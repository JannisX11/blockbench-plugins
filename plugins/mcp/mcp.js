var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// node_modules/zod/lib/index.mjs
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideMap,
      overrideMap === errorMap ? undefined : errorMap
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}

class ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

class ParseInputLazyPath {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
}
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a, _b;
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message !== null && message !== undefined ? message : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a = message !== null && message !== undefined ? message : required_error) !== null && _a !== undefined ? _a : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message !== null && message !== undefined ? message : invalid_type_error) !== null && _b !== undefined ? _b : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}

class ZodType {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus,
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result2 = this._parse(input);
    if (isAsync(result2)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result2;
  }
  _parseAsync(input) {
    const result2 = this._parse(input);
    return Promise.resolve(result2);
  }
  parse(data, params) {
    const result2 = this.safeParse(data, params);
    if (result2.success)
      return result2.data;
    throw result2.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async: (_a = params === null || params === undefined ? undefined : params.async) !== null && _a !== undefined ? _a : false,
        contextualErrorMap: params === null || params === undefined ? undefined : params.errorMap
      },
      path: (params === null || params === undefined ? undefined : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result2 = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result2);
  }
  "~validate"(data) {
    var _a, _b;
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result2 = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result2) ? {
          value: result2.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if ((_b = (_a = err === null || err === undefined ? undefined : err.message) === null || _a === undefined ? undefined : _a.toLowerCase()) === null || _b === undefined ? undefined : _b.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result2) => isValid(result2) ? {
      value: result2.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result2 = await this.safeParseAsync(data, params);
    if (result2.success)
      return result2.data;
    throw result2.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === undefined ? undefined : params.errorMap,
        async: true
      },
      path: (params === null || params === undefined ? undefined : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result2 = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result2);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result2 = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result2 instanceof Promise) {
        return result2.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result2) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(undefined).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
function timeRegexSource(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if (!decoded.typ || !decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch (_a) {
    return false;
  }
}
function isValidCidr(ip, version) {
  if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0;index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a, _b;
      const r = check(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          var _a2, _b2;
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = (_b2 = (_a2 = params.fatal) !== null && _a2 !== undefined ? _a2 : fatal) !== null && _b2 !== undefined ? _b2 : true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = (_b = (_a = params.fatal) !== null && _a !== undefined ? _a : fatal) !== null && _b !== undefined ? _b : true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny.create();
}
var util, objectUtil, ZodParsedType, getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
}, ZodIssueCode, quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
}, ZodError, errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
}, overrideErrorMap, makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== undefined) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
}, EMPTY_PATH, INVALID, DIRTY = (value) => ({ status: "dirty", value }), OK = (value) => ({ status: "valid", value }), isAborted = (x) => x.status === "aborted", isDirty = (x) => x.status === "dirty", isValid = (x) => x.status === "valid", isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise, errorUtil, _ZodEnum_cache, _ZodNativeEnum_cache, handleResult = (ctx, result2) => {
  if (isValid(result2)) {
    return { success: true, data: result2.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
}, cuidRegex, cuid2Regex, ulidRegex, uuidRegex, nanoidRegex, jwtRegex, durationRegex, emailRegex, _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`, emojiRegex, ipv4Regex, ipv4CidrRegex, ipv6Regex, ipv6CidrRegex, base64Regex, base64urlRegex, dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`, dateRegex, ZodString, ZodNumber, ZodBigInt, ZodBoolean, ZodDate, ZodSymbol, ZodUndefined, ZodNull, ZodAny, ZodUnknown, ZodNever, ZodVoid, ZodArray, ZodObject, ZodUnion, getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [undefined];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [undefined, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
}, ZodDiscriminatedUnion, ZodIntersection, ZodTuple, ZodRecord, ZodMap, ZodSet, ZodFunction, ZodLazy, ZodLiteral, ZodEnum, ZodNativeEnum, ZodPromise, ZodEffects, ZodOptional, ZodNullable, ZodDefault, ZodCatch, ZodNaN, BRAND, ZodBranded, ZodPipeline, ZodReadonly, late, ZodFirstPartyTypeKind, instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params), stringType, numberType, nanType, bigIntType, booleanType, dateType, symbolType, undefinedType, nullType, anyType, unknownType, neverType, voidType, arrayType, objectType, strictObjectType, unionType, discriminatedUnionType, intersectionType, tupleType, recordType, mapType, setType, functionType, lazyType, literalType, enumType, nativeEnumType, promiseType, effectsType, optionalType, nullableType, preprocessType, pipelineType, ostring = () => stringType().optional(), onumber = () => numberType().optional(), oboolean = () => booleanType().optional(), coerce, NEVER, z;
var init_lib = __esm(() => {
  (function(util2) {
    util2.assertEqual = (val) => val;
    function assertIs(_arg) {}
    util2.assertIs = assertIs;
    function assertNever(_x) {
      throw new Error;
    }
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items) => {
      const obj = {};
      for (const item of items) {
        obj[item] = item;
      }
      return obj;
    };
    util2.getValidEnumValues = (obj) => {
      const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
      const filtered = {};
      for (const k of validKeys) {
        filtered[k] = obj[k];
      }
      return util2.objectValues(filtered);
    };
    util2.objectValues = (obj) => {
      return util2.objectKeys(obj).map(function(e) {
        return obj[e];
      });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
      const keys = [];
      for (const key in object) {
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          keys.push(key);
        }
      }
      return keys;
    };
    util2.find = (arr, checker) => {
      for (const item of arr) {
        if (checker(item))
          return item;
      }
      return;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
      return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_, value) => {
      if (typeof value === "bigint") {
        return value.toString();
      }
      return value;
    };
  })(util || (util = {}));
  (function(objectUtil2) {
    objectUtil2.mergeShapes = (first, second) => {
      return {
        ...first,
        ...second
      };
    };
  })(objectUtil || (objectUtil = {}));
  ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
  ]);
  ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
  ]);
  ZodError = class ZodError extends Error {
    get errors() {
      return this.issues;
    }
    constructor(issues) {
      super();
      this.issues = [];
      this.addIssue = (sub) => {
        this.issues = [...this.issues, sub];
      };
      this.addIssues = (subs = []) => {
        this.issues = [...this.issues, ...subs];
      };
      const actualProto = new.target.prototype;
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(this, actualProto);
      } else {
        this.__proto__ = actualProto;
      }
      this.name = "ZodError";
      this.issues = issues;
    }
    format(_mapper) {
      const mapper = _mapper || function(issue) {
        return issue.message;
      };
      const fieldErrors = { _errors: [] };
      const processError = (error) => {
        for (const issue of error.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            let curr = fieldErrors;
            let i = 0;
            while (i < issue.path.length) {
              const el = issue.path[i];
              const terminal = i === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || { _errors: [] };
              } else {
                curr[el] = curr[el] || { _errors: [] };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i++;
            }
          }
        }
      };
      processError(this);
      return fieldErrors;
    }
    static assert(value) {
      if (!(value instanceof ZodError)) {
        throw new Error(`Not a ZodError: ${value}`);
      }
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
      const fieldErrors = {};
      const formErrors = [];
      for (const sub of this.issues) {
        if (sub.path.length > 0) {
          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
          fieldErrors[sub.path[0]].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
      return { formErrors, fieldErrors };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
  };
  overrideErrorMap = errorMap;
  EMPTY_PATH = [];
  INVALID = Object.freeze({
    status: "aborted"
  });
  (function(errorUtil2) {
    errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === undefined ? undefined : message.message;
  })(errorUtil || (errorUtil = {}));
  cuidRegex = /^c[^\s-]{8,}$/i;
  cuid2Regex = /^[0-9a-z]+$/;
  ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
  uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  nanoidRegex = /^[a-z0-9_-]{21}$/i;
  jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
  durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
  emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
  ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
  ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
  ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
  base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
  base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
  dateRegex = new RegExp(`^${dateRegexSource}$`);
  ZodString = class ZodString extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = String(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.string) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const status = new ParseStatus;
      let ctx = undefined;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.length < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.length > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "length") {
          const tooBig = input.data.length > check.value;
          const tooSmall = input.data.length < check.value;
          if (tooBig || tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            if (tooBig) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            } else if (tooSmall) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            }
            status.dirty();
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "email",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "emoji") {
          if (!emojiRegex) {
            emojiRegex = new RegExp(_emojiRegex, "u");
          }
          if (!emojiRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "emoji",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "uuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "nanoid") {
          if (!nanoidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "nanoid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid") {
          if (!cuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid2") {
          if (!cuid2Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid2",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ulid") {
          if (!ulidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ulid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "url") {
          try {
            new URL(input.data);
          } catch (_a) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "regex") {
          check.regex.lastIndex = 0;
          const testResult = check.regex.test(input.data);
          if (!testResult) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "regex",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "trim") {
          input.data = input.data.trim();
        } else if (check.kind === "includes") {
          if (!input.data.includes(check.value, check.position)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { includes: check.value, position: check.position },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "toLowerCase") {
          input.data = input.data.toLowerCase();
        } else if (check.kind === "toUpperCase") {
          input.data = input.data.toUpperCase();
        } else if (check.kind === "startsWith") {
          if (!input.data.startsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { startsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "endsWith") {
          if (!input.data.endsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { endsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "datetime") {
          const regex = datetimeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "datetime",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "date") {
          const regex = dateRegex;
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "date",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "time") {
          const regex = timeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "time",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "duration") {
          if (!durationRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "duration",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ip") {
          if (!isValidIP(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ip",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "jwt") {
          if (!isValidJWT(input.data, check.alg)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "jwt",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cidr") {
          if (!isValidCidr(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cidr",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "base64") {
          if (!base64Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "base64",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "base64url") {
          if (!base64urlRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "base64url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message) {
      return this.refinement((data) => regex.test(data), {
        validation,
        code: ZodIssueCode.invalid_string,
        ...errorUtil.errToObj(message)
      });
    }
    _addCheck(check) {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    email(message) {
      return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
      return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
      return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
      return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    nanoid(message) {
      return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
      return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
      return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
      return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    base64(message) {
      return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
    }
    base64url(message) {
      return this._addCheck({
        kind: "base64url",
        ...errorUtil.errToObj(message)
      });
    }
    jwt(options) {
      return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
    }
    ip(options) {
      return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    cidr(options) {
      return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
      var _a, _b;
      if (typeof options === "string") {
        return this._addCheck({
          kind: "datetime",
          precision: null,
          offset: false,
          local: false,
          message: options
        });
      }
      return this._addCheck({
        kind: "datetime",
        precision: typeof (options === null || options === undefined ? undefined : options.precision) === "undefined" ? null : options === null || options === undefined ? undefined : options.precision,
        offset: (_a = options === null || options === undefined ? undefined : options.offset) !== null && _a !== undefined ? _a : false,
        local: (_b = options === null || options === undefined ? undefined : options.local) !== null && _b !== undefined ? _b : false,
        ...errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
      });
    }
    date(message) {
      return this._addCheck({ kind: "date", message });
    }
    time(options) {
      if (typeof options === "string") {
        return this._addCheck({
          kind: "time",
          precision: null,
          message: options
        });
      }
      return this._addCheck({
        kind: "time",
        precision: typeof (options === null || options === undefined ? undefined : options.precision) === "undefined" ? null : options === null || options === undefined ? undefined : options.precision,
        ...errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
      });
    }
    duration(message) {
      return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
    }
    regex(regex, message) {
      return this._addCheck({
        kind: "regex",
        regex,
        ...errorUtil.errToObj(message)
      });
    }
    includes(value, options) {
      return this._addCheck({
        kind: "includes",
        value,
        position: options === null || options === undefined ? undefined : options.position,
        ...errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
      });
    }
    startsWith(value, message) {
      return this._addCheck({
        kind: "startsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    endsWith(value, message) {
      return this._addCheck({
        kind: "endsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    min(minLength, message) {
      return this._addCheck({
        kind: "min",
        value: minLength,
        ...errorUtil.errToObj(message)
      });
    }
    max(maxLength, message) {
      return this._addCheck({
        kind: "max",
        value: maxLength,
        ...errorUtil.errToObj(message)
      });
    }
    length(len, message) {
      return this._addCheck({
        kind: "length",
        value: len,
        ...errorUtil.errToObj(message)
      });
    }
    nonempty(message) {
      return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "trim" }]
      });
    }
    toLowerCase() {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toLowerCase" }]
      });
    }
    toUpperCase() {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toUpperCase" }]
      });
    }
    get isDatetime() {
      return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isDate() {
      return !!this._def.checks.find((ch) => ch.kind === "date");
    }
    get isTime() {
      return !!this._def.checks.find((ch) => ch.kind === "time");
    }
    get isDuration() {
      return !!this._def.checks.find((ch) => ch.kind === "duration");
    }
    get isEmail() {
      return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isNANOID() {
      return !!this._def.checks.find((ch) => ch.kind === "nanoid");
    }
    get isCUID() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get isCIDR() {
      return !!this._def.checks.find((ch) => ch.kind === "cidr");
    }
    get isBase64() {
      return !!this._def.checks.find((ch) => ch.kind === "base64");
    }
    get isBase64url() {
      return !!this._def.checks.find((ch) => ch.kind === "base64url");
    }
    get minLength() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxLength() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodString.create = (params) => {
    var _a;
    return new ZodString({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodString,
      coerce: (_a = params === null || params === undefined ? undefined : params.coerce) !== null && _a !== undefined ? _a : false,
      ...processCreateParams(params)
    });
  };
  ZodNumber = class ZodNumber extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
      this.step = this.multipleOf;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = Number(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.number) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.number,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = undefined;
      const status = new ParseStatus;
      for (const check of this._def.checks) {
        if (check.kind === "int") {
          if (!util.isInteger(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (floatSafeRemainder(input.data, check.value) !== 0) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "finite") {
          if (!Number.isFinite(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_finite,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new ZodNumber({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new ZodNumber({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    int(message) {
      return this._addCheck({
        kind: "int",
        message: errorUtil.toString(message)
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    finite(message) {
      return this._addCheck({
        kind: "finite",
        message: errorUtil.toString(message)
      });
    }
    safe(message) {
      return this._addCheck({
        kind: "min",
        inclusive: true,
        value: Number.MIN_SAFE_INTEGER,
        message: errorUtil.toString(message)
      })._addCheck({
        kind: "max",
        inclusive: true,
        value: Number.MAX_SAFE_INTEGER,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
    get isInt() {
      return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
      let max = null, min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
          return true;
        } else if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        } else if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return Number.isFinite(min) && Number.isFinite(max);
    }
  };
  ZodNumber.create = (params) => {
    return new ZodNumber({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodNumber,
      coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  ZodBigInt = class ZodBigInt extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
    }
    _parse(input) {
      if (this._def.coerce) {
        try {
          input.data = BigInt(input.data);
        } catch (_a) {
          return this._getInvalidInput(input);
        }
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.bigint) {
        return this._getInvalidInput(input);
      }
      let ctx = undefined;
      const status = new ParseStatus;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              type: "bigint",
              minimum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              type: "bigint",
              maximum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (input.data % check.value !== BigInt(0)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _getInvalidInput(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx.parsedType
      });
      return INVALID;
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new ZodBigInt({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new ZodBigInt({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodBigInt,
      coerce: (_a = params === null || params === undefined ? undefined : params.coerce) !== null && _a !== undefined ? _a : false,
      ...processCreateParams(params)
    });
  };
  ZodBoolean = class ZodBoolean extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = Boolean(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.boolean) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.boolean,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodBoolean.create = (params) => {
    return new ZodBoolean({
      typeName: ZodFirstPartyTypeKind.ZodBoolean,
      coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  ZodDate = class ZodDate extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = new Date(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.date) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.date,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      if (isNaN(input.data.getTime())) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_date
        });
        return INVALID;
      }
      const status = new ParseStatus;
      let ctx = undefined;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.getTime() < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              message: check.message,
              inclusive: true,
              exact: false,
              minimum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.getTime() > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              message: check.message,
              inclusive: true,
              exact: false,
              maximum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: new Date(input.data.getTime())
      };
    }
    _addCheck(check) {
      return new ZodDate({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    min(minDate, message) {
      return this._addCheck({
        kind: "min",
        value: minDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    max(maxDate, message) {
      return this._addCheck({
        kind: "max",
        value: maxDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    get minDate() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min != null ? new Date(min) : null;
    }
    get maxDate() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max != null ? new Date(max) : null;
    }
  };
  ZodDate.create = (params) => {
    return new ZodDate({
      checks: [],
      coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
      typeName: ZodFirstPartyTypeKind.ZodDate,
      ...processCreateParams(params)
    });
  };
  ZodSymbol = class ZodSymbol extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.symbol) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.symbol,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodSymbol.create = (params) => {
    return new ZodSymbol({
      typeName: ZodFirstPartyTypeKind.ZodSymbol,
      ...processCreateParams(params)
    });
  };
  ZodUndefined = class ZodUndefined extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.undefined,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodUndefined.create = (params) => {
    return new ZodUndefined({
      typeName: ZodFirstPartyTypeKind.ZodUndefined,
      ...processCreateParams(params)
    });
  };
  ZodNull = class ZodNull extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.null) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.null,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodNull.create = (params) => {
    return new ZodNull({
      typeName: ZodFirstPartyTypeKind.ZodNull,
      ...processCreateParams(params)
    });
  };
  ZodAny = class ZodAny extends ZodType {
    constructor() {
      super(...arguments);
      this._any = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodAny.create = (params) => {
    return new ZodAny({
      typeName: ZodFirstPartyTypeKind.ZodAny,
      ...processCreateParams(params)
    });
  };
  ZodUnknown = class ZodUnknown extends ZodType {
    constructor() {
      super(...arguments);
      this._unknown = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodUnknown.create = (params) => {
    return new ZodUnknown({
      typeName: ZodFirstPartyTypeKind.ZodUnknown,
      ...processCreateParams(params)
    });
  };
  ZodNever = class ZodNever extends ZodType {
    _parse(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.never,
        received: ctx.parsedType
      });
      return INVALID;
    }
  };
  ZodNever.create = (params) => {
    return new ZodNever({
      typeName: ZodFirstPartyTypeKind.ZodNever,
      ...processCreateParams(params)
    });
  };
  ZodVoid = class ZodVoid extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.void,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodVoid.create = (params) => {
    return new ZodVoid({
      typeName: ZodFirstPartyTypeKind.ZodVoid,
      ...processCreateParams(params)
    });
  };
  ZodArray = class ZodArray extends ZodType {
    _parse(input) {
      const { ctx, status } = this._processInputParams(input);
      const def = this._def;
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (def.exactLength !== null) {
        const tooBig = ctx.data.length > def.exactLength.value;
        const tooSmall = ctx.data.length < def.exactLength.value;
        if (tooBig || tooSmall) {
          addIssueToContext(ctx, {
            code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
            minimum: tooSmall ? def.exactLength.value : undefined,
            maximum: tooBig ? def.exactLength.value : undefined,
            type: "array",
            inclusive: true,
            exact: true,
            message: def.exactLength.message
          });
          status.dirty();
        }
      }
      if (def.minLength !== null) {
        if (ctx.data.length < def.minLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.minLength.message
          });
          status.dirty();
        }
      }
      if (def.maxLength !== null) {
        if (ctx.data.length > def.maxLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.maxLength.message
          });
          status.dirty();
        }
      }
      if (ctx.common.async) {
        return Promise.all([...ctx.data].map((item, i) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        })).then((result3) => {
          return ParseStatus.mergeArray(status, result3);
        });
      }
      const result2 = [...ctx.data].map((item, i) => {
        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      });
      return ParseStatus.mergeArray(status, result2);
    }
    get element() {
      return this._def.type;
    }
    min(minLength, message) {
      return new ZodArray({
        ...this._def,
        minLength: { value: minLength, message: errorUtil.toString(message) }
      });
    }
    max(maxLength, message) {
      return new ZodArray({
        ...this._def,
        maxLength: { value: maxLength, message: errorUtil.toString(message) }
      });
    }
    length(len, message) {
      return new ZodArray({
        ...this._def,
        exactLength: { value: len, message: errorUtil.toString(message) }
      });
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodArray.create = (schema, params) => {
    return new ZodArray({
      type: schema,
      minLength: null,
      maxLength: null,
      exactLength: null,
      typeName: ZodFirstPartyTypeKind.ZodArray,
      ...processCreateParams(params)
    });
  };
  ZodObject = class ZodObject extends ZodType {
    constructor() {
      super(...arguments);
      this._cached = null;
      this.nonstrict = this.passthrough;
      this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      const shape = this._def.shape();
      const keys = util.objectKeys(shape);
      return this._cached = { shape, keys };
    }
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.object) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const { status, ctx } = this._processInputParams(input);
      const { shape, keys: shapeKeys } = this._getCached();
      const extraKeys = [];
      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
        for (const key in ctx.data) {
          if (!shapeKeys.includes(key)) {
            extraKeys.push(key);
          }
        }
      }
      const pairs = [];
      for (const key of shapeKeys) {
        const keyValidator = shape[key];
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (this._def.catchall instanceof ZodNever) {
        const unknownKeys = this._def.unknownKeys;
        if (unknownKeys === "passthrough") {
          for (const key of extraKeys) {
            pairs.push({
              key: { status: "valid", value: key },
              value: { status: "valid", value: ctx.data[key] }
            });
          }
        } else if (unknownKeys === "strict") {
          if (extraKeys.length > 0) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            });
            status.dirty();
          }
        } else if (unknownKeys === "strip")
          ;
        else {
          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        }
      } else {
        const catchall = this._def.catchall;
        for (const key of extraKeys) {
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
      }
      if (ctx.common.async) {
        return Promise.resolve().then(async () => {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
              key,
              value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then((syncPairs) => {
          return ParseStatus.mergeObjectSync(status, syncPairs);
        });
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get shape() {
      return this._def.shape();
    }
    strict(message) {
      errorUtil.errToObj;
      return new ZodObject({
        ...this._def,
        unknownKeys: "strict",
        ...message !== undefined ? {
          errorMap: (issue, ctx) => {
            var _a, _b, _c, _d;
            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === undefined ? undefined : _b.call(_a, issue, ctx).message) !== null && _c !== undefined ? _c : ctx.defaultError;
            if (issue.code === "unrecognized_keys")
              return {
                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== undefined ? _d : defaultError
              };
            return {
              message: defaultError
            };
          }
        } : {}
      });
    }
    strip() {
      return new ZodObject({
        ...this._def,
        unknownKeys: "strip"
      });
    }
    passthrough() {
      return new ZodObject({
        ...this._def,
        unknownKeys: "passthrough"
      });
    }
    extend(augmentation) {
      return new ZodObject({
        ...this._def,
        shape: () => ({
          ...this._def.shape(),
          ...augmentation
        })
      });
    }
    merge(merging) {
      const merged = new ZodObject({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: () => ({
          ...this._def.shape(),
          ...merging._def.shape()
        }),
        typeName: ZodFirstPartyTypeKind.ZodObject
      });
      return merged;
    }
    setKey(key, schema) {
      return this.augment({ [key]: schema });
    }
    catchall(index) {
      return new ZodObject({
        ...this._def,
        catchall: index
      });
    }
    pick(mask) {
      const shape = {};
      util.objectKeys(mask).forEach((key) => {
        if (mask[key] && this.shape[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    omit(mask) {
      const shape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (!mask[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    deepPartial() {
      return deepPartialify(this);
    }
    partial(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        const fieldSchema = this.shape[key];
        if (mask && !mask[key]) {
          newShape[key] = fieldSchema;
        } else {
          newShape[key] = fieldSchema.optional();
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    required(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (mask && !mask[key]) {
          newShape[key] = this.shape[key];
        } else {
          const fieldSchema = this.shape[key];
          let newField = fieldSchema;
          while (newField instanceof ZodOptional) {
            newField = newField._def.innerType;
          }
          newShape[key] = newField;
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    keyof() {
      return createZodEnum(util.objectKeys(this.shape));
    }
  };
  ZodObject.create = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strict",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodUnion = class ZodUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const options = this._def.options;
      function handleResults(results) {
        for (const result2 of results) {
          if (result2.result.status === "valid") {
            return result2.result;
          }
        }
        for (const result2 of results) {
          if (result2.result.status === "dirty") {
            ctx.common.issues.push(...result2.ctx.common.issues);
            return result2.result;
          }
        }
        const unionErrors = results.map((result2) => new ZodError(result2.ctx.common.issues));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return Promise.all(options.map(async (option) => {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            }),
            ctx: childCtx
          };
        })).then(handleResults);
      } else {
        let dirty = undefined;
        const issues = [];
        for (const option of options) {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          const result2 = option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          });
          if (result2.status === "valid") {
            return result2;
          } else if (result2.status === "dirty" && !dirty) {
            dirty = { result: result2, ctx: childCtx };
          }
          if (childCtx.common.issues.length) {
            issues.push(childCtx.common.issues);
          }
        }
        if (dirty) {
          ctx.common.issues.push(...dirty.ctx.common.issues);
          return dirty.result;
        }
        const unionErrors = issues.map((issues2) => new ZodError(issues2));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  };
  ZodUnion.create = (types, params) => {
    return new ZodUnion({
      options: types,
      typeName: ZodFirstPartyTypeKind.ZodUnion,
      ...processCreateParams(params)
    });
  };
  ZodDiscriminatedUnion = class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const discriminator = this.discriminator;
      const discriminatorValue = ctx.data[discriminator];
      const option = this.optionsMap.get(discriminatorValue);
      if (!option) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union_discriminator,
          options: Array.from(this.optionsMap.keys()),
          path: [discriminator]
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      } else {
        return option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    static create(discriminator, options, params) {
      const optionsMap = new Map;
      for (const type of options) {
        const discriminatorValues = getDiscriminator(type.shape[discriminator]);
        if (!discriminatorValues.length) {
          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
        }
        for (const value of discriminatorValues) {
          if (optionsMap.has(value)) {
            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
          }
          optionsMap.set(value, type);
        }
      }
      return new ZodDiscriminatedUnion({
        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
        discriminator,
        options,
        optionsMap,
        ...processCreateParams(params)
      });
    }
  };
  ZodIntersection = class ZodIntersection extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const handleParsed = (parsedLeft, parsedRight) => {
        if (isAborted(parsedLeft) || isAborted(parsedRight)) {
          return INVALID;
        }
        const merged = mergeValues(parsedLeft.value, parsedRight.value);
        if (!merged.valid) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_intersection_types
          });
          return INVALID;
        }
        if (isDirty(parsedLeft) || isDirty(parsedRight)) {
          status.dirty();
        }
        return { status: status.value, value: merged.data };
      };
      if (ctx.common.async) {
        return Promise.all([
          this._def.left._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }),
          this._def.right._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        ]).then(([left, right]) => handleParsed(left, right));
      } else {
        return handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    }
  };
  ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
      left,
      right,
      typeName: ZodFirstPartyTypeKind.ZodIntersection,
      ...processCreateParams(params)
    });
  };
  ZodTuple = class ZodTuple extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (ctx.data.length < this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        return INVALID;
      }
      const rest = this._def.rest;
      if (!rest && ctx.data.length > this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        status.dirty();
      }
      const items = [...ctx.data].map((item, itemIndex) => {
        const schema = this._def.items[itemIndex] || this._def.rest;
        if (!schema)
          return null;
        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      }).filter((x) => !!x);
      if (ctx.common.async) {
        return Promise.all(items).then((results) => {
          return ParseStatus.mergeArray(status, results);
        });
      } else {
        return ParseStatus.mergeArray(status, items);
      }
    }
    get items() {
      return this._def.items;
    }
    rest(rest) {
      return new ZodTuple({
        ...this._def,
        rest
      });
    }
  };
  ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
      items: schemas,
      typeName: ZodFirstPartyTypeKind.ZodTuple,
      rest: null,
      ...processCreateParams(params)
    });
  };
  ZodRecord = class ZodRecord extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const pairs = [];
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      for (const key in ctx.data) {
        pairs.push({
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (ctx.common.async) {
        return ParseStatus.mergeObjectAsync(status, pairs);
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get element() {
      return this._def.valueType;
    }
    static create(first, second, third) {
      if (second instanceof ZodType) {
        return new ZodRecord({
          keyType: first,
          valueType: second,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(third)
        });
      }
      return new ZodRecord({
        keyType: ZodString.create(),
        valueType: first,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(second)
      });
    }
  };
  ZodMap = class ZodMap extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.map) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.map,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      const pairs = [...ctx.data.entries()].map(([key, value], index) => {
        return {
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
        };
      });
      if (ctx.common.async) {
        const finalMap = new Map;
        return Promise.resolve().then(async () => {
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        });
      } else {
        const finalMap = new Map;
        for (const pair of pairs) {
          const key = pair.key;
          const value = pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      }
    }
  };
  ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind.ZodMap,
      ...processCreateParams(params)
    });
  };
  ZodSet = class ZodSet extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.set) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.set,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const def = this._def;
      if (def.minSize !== null) {
        if (ctx.data.size < def.minSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.minSize.message
          });
          status.dirty();
        }
      }
      if (def.maxSize !== null) {
        if (ctx.data.size > def.maxSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.maxSize.message
          });
          status.dirty();
        }
      }
      const valueType = this._def.valueType;
      function finalizeSet(elements2) {
        const parsedSet = new Set;
        for (const element of elements2) {
          if (element.status === "aborted")
            return INVALID;
          if (element.status === "dirty")
            status.dirty();
          parsedSet.add(element.value);
        }
        return { status: status.value, value: parsedSet };
      }
      const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
      if (ctx.common.async) {
        return Promise.all(elements).then((elements2) => finalizeSet(elements2));
      } else {
        return finalizeSet(elements);
      }
    }
    min(minSize, message) {
      return new ZodSet({
        ...this._def,
        minSize: { value: minSize, message: errorUtil.toString(message) }
      });
    }
    max(maxSize, message) {
      return new ZodSet({
        ...this._def,
        maxSize: { value: maxSize, message: errorUtil.toString(message) }
      });
    }
    size(size, message) {
      return this.min(size, message).max(size, message);
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodSet.create = (valueType, params) => {
    return new ZodSet({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind.ZodSet,
      ...processCreateParams(params)
    });
  };
  ZodFunction = class ZodFunction extends ZodType {
    constructor() {
      super(...arguments);
      this.validate = this.implement;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.function) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.function,
          received: ctx.parsedType
        });
        return INVALID;
      }
      function makeArgsIssue(args, error) {
        return makeIssue({
          data: args,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_arguments,
            argumentsError: error
          }
        });
      }
      function makeReturnsIssue(returns, error) {
        return makeIssue({
          data: returns,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_return_type,
            returnTypeError: error
          }
        });
      }
      const params = { errorMap: ctx.common.contextualErrorMap };
      const fn = ctx.data;
      if (this._def.returns instanceof ZodPromise) {
        const me = this;
        return OK(async function(...args) {
          const error = new ZodError([]);
          const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
            error.addIssue(makeArgsIssue(args, e));
            throw error;
          });
          const result2 = await Reflect.apply(fn, this, parsedArgs);
          const parsedReturns = await me._def.returns._def.type.parseAsync(result2, params).catch((e) => {
            error.addIssue(makeReturnsIssue(result2, e));
            throw error;
          });
          return parsedReturns;
        });
      } else {
        const me = this;
        return OK(function(...args) {
          const parsedArgs = me._def.args.safeParse(args, params);
          if (!parsedArgs.success) {
            throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
          }
          const result2 = Reflect.apply(fn, this, parsedArgs.data);
          const parsedReturns = me._def.returns.safeParse(result2, params);
          if (!parsedReturns.success) {
            throw new ZodError([makeReturnsIssue(result2, parsedReturns.error)]);
          }
          return parsedReturns.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...items) {
      return new ZodFunction({
        ...this._def,
        args: ZodTuple.create(items).rest(ZodUnknown.create())
      });
    }
    returns(returnType) {
      return new ZodFunction({
        ...this._def,
        returns: returnType
      });
    }
    implement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    strictImplement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    static create(args, returns, params) {
      return new ZodFunction({
        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params)
      });
    }
  };
  ZodLazy = class ZodLazy extends ZodType {
    get schema() {
      return this._def.getter();
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const lazySchema = this._def.getter();
      return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
  };
  ZodLazy.create = (getter, params) => {
    return new ZodLazy({
      getter,
      typeName: ZodFirstPartyTypeKind.ZodLazy,
      ...processCreateParams(params)
    });
  };
  ZodLiteral = class ZodLiteral extends ZodType {
    _parse(input) {
      if (input.data !== this._def.value) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_literal,
          expected: this._def.value
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
    get value() {
      return this._def.value;
    }
  };
  ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
      value,
      typeName: ZodFirstPartyTypeKind.ZodLiteral,
      ...processCreateParams(params)
    });
  };
  ZodEnum = class ZodEnum extends ZodType {
    constructor() {
      super(...arguments);
      _ZodEnum_cache.set(this, undefined);
    }
    _parse(input) {
      if (typeof input.data !== "string") {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
        __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
      }
      if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Values() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    extract(values, newDef = this._def) {
      return ZodEnum.create(values, {
        ...this._def,
        ...newDef
      });
    }
    exclude(values, newDef = this._def) {
      return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
        ...this._def,
        ...newDef
      });
    }
  };
  _ZodEnum_cache = new WeakMap;
  ZodEnum.create = createZodEnum;
  ZodNativeEnum = class ZodNativeEnum extends ZodType {
    constructor() {
      super(...arguments);
      _ZodNativeEnum_cache.set(this, undefined);
    }
    _parse(input) {
      const nativeEnumValues = util.getValidEnumValues(this._def.values);
      const ctx = this._getOrReturnCtx(input);
      if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
        __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
      }
      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get enum() {
      return this._def.values;
    }
  };
  _ZodNativeEnum_cache = new WeakMap;
  ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
      ...processCreateParams(params)
    });
  };
  ZodPromise = class ZodPromise extends ZodType {
    unwrap() {
      return this._def.type;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.promise,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
      return OK(promisified.then((data) => {
        return this._def.type.parseAsync(data, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        });
      }));
    }
  };
  ZodPromise.create = (schema, params) => {
    return new ZodPromise({
      type: schema,
      typeName: ZodFirstPartyTypeKind.ZodPromise,
      ...processCreateParams(params)
    });
  };
  ZodEffects = class ZodEffects extends ZodType {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const effect = this._def.effect || null;
      const checkCtx = {
        addIssue: (arg) => {
          addIssueToContext(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        },
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      if (effect.type === "preprocess") {
        const processed = effect.transform(ctx.data, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(processed).then(async (processed2) => {
            if (status.value === "aborted")
              return INVALID;
            const result2 = await this._def.schema._parseAsync({
              data: processed2,
              path: ctx.path,
              parent: ctx
            });
            if (result2.status === "aborted")
              return INVALID;
            if (result2.status === "dirty")
              return DIRTY(result2.value);
            if (status.value === "dirty")
              return DIRTY(result2.value);
            return result2;
          });
        } else {
          if (status.value === "aborted")
            return INVALID;
          const result2 = this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
          if (result2.status === "aborted")
            return INVALID;
          if (result2.status === "dirty")
            return DIRTY(result2.value);
          if (status.value === "dirty")
            return DIRTY(result2.value);
          return result2;
        }
      }
      if (effect.type === "refinement") {
        const executeRefinement = (acc) => {
          const result2 = effect.refinement(acc, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(result2);
          }
          if (result2 instanceof Promise) {
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          }
          return acc;
        };
        if (ctx.common.async === false) {
          const inner = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          executeRefinement(inner.value);
          return { status: status.value, value: inner.value };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            return executeRefinement(inner.value).then(() => {
              return { status: status.value, value: inner.value };
            });
          });
        }
      }
      if (effect.type === "transform") {
        if (ctx.common.async === false) {
          const base = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (!isValid(base))
            return base;
          const result2 = effect.transform(base.value, checkCtx);
          if (result2 instanceof Promise) {
            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
          }
          return { status: status.value, value: result2 };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
            if (!isValid(base))
              return base;
            return Promise.resolve(effect.transform(base.value, checkCtx)).then((result2) => ({ status: status.value, value: result2 }));
          });
        }
      }
      util.assertNever(effect);
    }
  };
  ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
      schema,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect,
      ...processCreateParams(params)
    });
  };
  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
      schema,
      effect: { type: "preprocess", transform: preprocess },
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      ...processCreateParams(params)
    });
  };
  ZodOptional = class ZodOptional extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.undefined) {
        return OK(undefined);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodOptional.create = (type, params) => {
    return new ZodOptional({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodOptional,
      ...processCreateParams(params)
    });
  };
  ZodNullable = class ZodNullable extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.null) {
        return OK(null);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodNullable.create = (type, params) => {
    return new ZodNullable({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodNullable,
      ...processCreateParams(params)
    });
  };
  ZodDefault = class ZodDefault extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      let data = ctx.data;
      if (ctx.parsedType === ZodParsedType.undefined) {
        data = this._def.defaultValue();
      }
      return this._def.innerType._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  };
  ZodDefault.create = (type, params) => {
    return new ZodDefault({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
      defaultValue: typeof params.default === "function" ? params.default : () => params.default,
      ...processCreateParams(params)
    });
  };
  ZodCatch = class ZodCatch extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const newCtx = {
        ...ctx,
        common: {
          ...ctx.common,
          issues: []
        }
      };
      const result2 = this._def.innerType._parse({
        data: newCtx.data,
        path: newCtx.path,
        parent: {
          ...newCtx
        }
      });
      if (isAsync(result2)) {
        return result2.then((result3) => {
          return {
            status: "valid",
            value: result3.status === "valid" ? result3.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        });
      } else {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      }
    }
    removeCatch() {
      return this._def.innerType;
    }
  };
  ZodCatch.create = (type, params) => {
    return new ZodCatch({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodCatch,
      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
      ...processCreateParams(params)
    });
  };
  ZodNaN = class ZodNaN extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.nan) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.nan,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
  };
  ZodNaN.create = (params) => {
    return new ZodNaN({
      typeName: ZodFirstPartyTypeKind.ZodNaN,
      ...processCreateParams(params)
    });
  };
  BRAND = Symbol("zod_brand");
  ZodBranded = class ZodBranded extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const data = ctx.data;
      return this._def.type._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    unwrap() {
      return this._def.type;
    }
  };
  ZodPipeline = class ZodPipeline extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.common.async) {
        const handleAsync = async () => {
          const inResult = await this._def.in._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return DIRTY(inResult.value);
          } else {
            return this._def.out._parseAsync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        };
        return handleAsync();
      } else {
        const inResult = this._def.in._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return {
            status: "dirty",
            value: inResult.value
          };
        } else {
          return this._def.out._parseSync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      }
    }
    static create(a, b) {
      return new ZodPipeline({
        in: a,
        out: b,
        typeName: ZodFirstPartyTypeKind.ZodPipeline
      });
    }
  };
  ZodReadonly = class ZodReadonly extends ZodType {
    _parse(input) {
      const result2 = this._def.innerType._parse(input);
      const freeze = (data) => {
        if (isValid(data)) {
          data.value = Object.freeze(data.value);
        }
        return data;
      };
      return isAsync(result2) ? result2.then((data) => freeze(data)) : freeze(result2);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodReadonly,
      ...processCreateParams(params)
    });
  };
  late = {
    object: ZodObject.lazycreate
  };
  (function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  stringType = ZodString.create;
  numberType = ZodNumber.create;
  nanType = ZodNaN.create;
  bigIntType = ZodBigInt.create;
  booleanType = ZodBoolean.create;
  dateType = ZodDate.create;
  symbolType = ZodSymbol.create;
  undefinedType = ZodUndefined.create;
  nullType = ZodNull.create;
  anyType = ZodAny.create;
  unknownType = ZodUnknown.create;
  neverType = ZodNever.create;
  voidType = ZodVoid.create;
  arrayType = ZodArray.create;
  objectType = ZodObject.create;
  strictObjectType = ZodObject.strictCreate;
  unionType = ZodUnion.create;
  discriminatedUnionType = ZodDiscriminatedUnion.create;
  intersectionType = ZodIntersection.create;
  tupleType = ZodTuple.create;
  recordType = ZodRecord.create;
  mapType = ZodMap.create;
  setType = ZodSet.create;
  functionType = ZodFunction.create;
  lazyType = ZodLazy.create;
  literalType = ZodLiteral.create;
  enumType = ZodEnum.create;
  nativeEnumType = ZodNativeEnum.create;
  promiseType = ZodPromise.create;
  effectsType = ZodEffects.create;
  optionalType = ZodOptional.create;
  nullableType = ZodNullable.create;
  preprocessType = ZodEffects.createWithPreprocess;
  pipelineType = ZodPipeline.create;
  coerce = {
    string: (arg) => ZodString.create({ ...arg, coerce: true }),
    number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
    boolean: (arg) => ZodBoolean.create({
      ...arg,
      coerce: true
    }),
    bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
    date: (arg) => ZodDate.create({ ...arg, coerce: true })
  };
  NEVER = INVALID;
  z = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap,
    getErrorMap,
    makeIssue,
    EMPTY_PATH,
    addIssueToContext,
    ParseStatus,
    INVALID,
    DIRTY,
    OK,
    isAborted,
    isDirty,
    isValid,
    isAsync,
    get util() {
      return util;
    },
    get objectUtil() {
      return objectUtil;
    },
    ZodParsedType,
    getParsedType,
    ZodType,
    datetimeRegex,
    ZodString,
    ZodNumber,
    ZodBigInt,
    ZodBoolean,
    ZodDate,
    ZodSymbol,
    ZodUndefined,
    ZodNull,
    ZodAny,
    ZodUnknown,
    ZodNever,
    ZodVoid,
    ZodArray,
    ZodObject,
    ZodUnion,
    ZodDiscriminatedUnion,
    ZodIntersection,
    ZodTuple,
    ZodRecord,
    ZodMap,
    ZodSet,
    ZodFunction,
    ZodLazy,
    ZodLiteral,
    ZodEnum,
    ZodNativeEnum,
    ZodPromise,
    ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional,
    ZodNullable,
    ZodDefault,
    ZodCatch,
    ZodNaN,
    BRAND,
    ZodBranded,
    ZodPipeline,
    ZodReadonly,
    custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late,
    get ZodFirstPartyTypeKind() {
      return ZodFirstPartyTypeKind;
    },
    coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    enum: enumType,
    function: functionType,
    instanceof: instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    null: nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean,
    onumber,
    optional: optionalType,
    ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    undefined: undefinedType,
    union: unionType,
    unknown: unknownType,
    void: voidType,
    NEVER,
    ZodIssueCode,
    quotelessJson,
    ZodError
  });
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS((exports2) => {
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (;nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (;nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (;mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}
    e = e << mLen | m;
    eLen += mLen;
    for (;eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}
    buffer[offset + i - d] |= s * 128;
  };
});

// node_modules/ms/index.js
var require_ms = __commonJS((exports2, module2) => {
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module2.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  }
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }
  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS((exports2, module2) => {
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce2;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require_ms();
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key) => {
      createDebug[key] = env[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash = 0;
      for (let i2 = 0;i2 < namespace.length; i2++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i2);
        hash |= 0;
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug(...args) {
        if (!debug.enabled) {
          return;
        }
        const self = debug;
        const curr = Number(new Date);
        const ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self, args);
        const logFn = self.log || createDebug.log;
        logFn.apply(self, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy;
      Object.defineProperty(debug, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
      for (const ns of split) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce2(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  module2.exports = setup;
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS((exports2, module2) => {
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.storage = localstorage();
  exports2.destroy = (() => {
    let warned = false;
    return () => {
      if (!warned) {
        warned = true;
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
    };
  })();
  exports2.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    let m;
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match) => {
      if (match === "%%") {
        return;
      }
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  exports2.log = console.debug || console.log || (() => {});
  function save(namespaces) {
    try {
      if (namespaces) {
        exports2.storage.setItem("debug", namespaces);
      } else {
        exports2.storage.removeItem("debug");
      }
    } catch (error) {}
  }
  function load() {
    let r;
    try {
      r = exports2.storage.getItem("debug");
    } catch (error) {}
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {}
  }
  module2.exports = require_common()(exports2);
  var { formatters } = module2.exports;
  formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
});

// node_modules/debug/src/node.js
var require_node = __commonJS((exports2, module2) => {
  var tty = require("tty");
  var util2 = require("util");
  exports2.init = init;
  exports2.log = log;
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.destroy = util2.deprecate(() => {}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  exports2.colors = [6, 2, 3, 4, 5, 1];
  try {
    const supportsColor = (()=>{throw new Error("Cannot require module "+"supports-color");})();
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
      exports2.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ];
    }
  } catch (error) {}
  exports2.inspectOpts = Object.keys(process.env).filter((key) => {
    return /^debug_/i.test(key);
  }).reduce((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
      return k.toUpperCase();
    });
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === "null") {
      val = null;
    } else {
      val = Number(val);
    }
    obj[prop] = val;
    return obj;
  }, {});
  function useColors() {
    return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }
  function formatArgs(args) {
    const { namespace: name, useColors: useColors2 } = this;
    if (useColors2) {
      const c = this.color;
      const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
      const prefix = `  ${colorCode};1m${name} \x1B[0m`;
      args[0] = prefix + args[0].split(`
`).join(`
` + prefix);
      args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = getDate() + name + " " + args[0];
    }
  }
  function getDate() {
    if (exports2.inspectOpts.hideDate) {
      return "";
    }
    return new Date().toISOString() + " ";
  }
  function log(...args) {
    return process.stderr.write(util2.formatWithOptions(exports2.inspectOpts, ...args) + `
`);
  }
  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      delete process.env.DEBUG;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports2.inspectOpts);
    for (let i2 = 0;i2 < keys.length; i2++) {
      debug.inspectOpts[keys[i2]] = exports2.inspectOpts[keys[i2]];
    }
  }
  module2.exports = require_common()(exports2);
  var { formatters } = module2.exports;
  formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util2.inspect(v, this.inspectOpts).split(`
`).map((str) => str.trim()).join(" ");
  };
  formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util2.inspect(v, this.inspectOpts);
  };
});

// node_modules/debug/src/index.js
var require_src = __commonJS((exports2, module2) => {
  if (typeof process === "undefined" || process.type === "renderer" || false || process.__nwjs) {
    module2.exports = require_browser();
  } else {
    module2.exports = require_node();
  }
});

// node_modules/bytes/index.js
var require_bytes = __commonJS((exports2, module2) => {
  /*!
   * bytes
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015 Jed Watson
   * MIT Licensed
   */
  module2.exports = bytes;
  module2.exports.format = format2;
  module2.exports.parse = parse2;
  var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;
  var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;
  var map = {
    b: 1,
    kb: 1 << 10,
    mb: 1 << 20,
    gb: 1 << 30,
    tb: Math.pow(1024, 4),
    pb: Math.pow(1024, 5)
  };
  var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;
  function bytes(value, options) {
    if (typeof value === "string") {
      return parse2(value);
    }
    if (typeof value === "number") {
      return format2(value, options);
    }
    return null;
  }
  function format2(value, options) {
    if (!Number.isFinite(value)) {
      return null;
    }
    var mag = Math.abs(value);
    var thousandsSeparator = options && options.thousandsSeparator || "";
    var unitSeparator = options && options.unitSeparator || "";
    var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;
    var fixedDecimals = Boolean(options && options.fixedDecimals);
    var unit = options && options.unit || "";
    if (!unit || !map[unit.toLowerCase()]) {
      if (mag >= map.pb) {
        unit = "PB";
      } else if (mag >= map.tb) {
        unit = "TB";
      } else if (mag >= map.gb) {
        unit = "GB";
      } else if (mag >= map.mb) {
        unit = "MB";
      } else if (mag >= map.kb) {
        unit = "KB";
      } else {
        unit = "B";
      }
    }
    var val = value / map[unit.toLowerCase()];
    var str = val.toFixed(decimalPlaces);
    if (!fixedDecimals) {
      str = str.replace(formatDecimalsRegExp, "$1");
    }
    if (thousandsSeparator) {
      str = str.split(".").map(function(s, i2) {
        return i2 === 0 ? s.replace(formatThousandsRegExp, thousandsSeparator) : s;
      }).join(".");
    }
    return str + unitSeparator + unit;
  }
  function parse2(val) {
    if (typeof val === "number" && !isNaN(val)) {
      return val;
    }
    if (typeof val !== "string") {
      return null;
    }
    var results = parseRegExp.exec(val);
    var floatValue;
    var unit = "b";
    if (!results) {
      floatValue = parseInt(val, 10);
      unit = "b";
    } else {
      floatValue = parseFloat(results[1]);
      unit = results[4].toLowerCase();
    }
    if (isNaN(floatValue)) {
      return null;
    }
    return Math.floor(map[unit] * floatValue);
  }
});

// node_modules/depd/index.js
var require_depd = __commonJS((exports2, module2) => {
  /*!
   * depd
   * Copyright(c) 2014-2018 Douglas Christopher Wilson
   * MIT Licensed
   */
  var relative = require("path").relative;
  module2.exports = depd;
  var basePath = process.cwd();
  function containsNamespace(str, namespace) {
    var vals = str.split(/[ ,]+/);
    var ns = String(namespace).toLowerCase();
    for (var i2 = 0;i2 < vals.length; i2++) {
      var val = vals[i2];
      if (val && (val === "*" || val.toLowerCase() === ns)) {
        return true;
      }
    }
    return false;
  }
  function convertDataDescriptorToAccessor(obj, prop, message) {
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    var value = descriptor.value;
    descriptor.get = function getter() {
      return value;
    };
    if (descriptor.writable) {
      descriptor.set = function setter(val) {
        return value = val;
      };
    }
    delete descriptor.value;
    delete descriptor.writable;
    Object.defineProperty(obj, prop, descriptor);
    return descriptor;
  }
  function createArgumentsString(arity) {
    var str = "";
    for (var i2 = 0;i2 < arity; i2++) {
      str += ", arg" + i2;
    }
    return str.substr(2);
  }
  function createStackString(stack) {
    var str = this.name + ": " + this.namespace;
    if (this.message) {
      str += " deprecated " + this.message;
    }
    for (var i2 = 0;i2 < stack.length; i2++) {
      str += `
    at ` + stack[i2].toString();
    }
    return str;
  }
  function depd(namespace) {
    if (!namespace) {
      throw new TypeError("argument namespace is required");
    }
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    var file = site[0];
    function deprecate(message) {
      log.call(deprecate, message);
    }
    deprecate._file = file;
    deprecate._ignored = isignored(namespace);
    deprecate._namespace = namespace;
    deprecate._traced = istraced(namespace);
    deprecate._warned = Object.create(null);
    deprecate.function = wrapfunction;
    deprecate.property = wrapproperty;
    return deprecate;
  }
  function eehaslisteners(emitter, type) {
    var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
    return count > 0;
  }
  function isignored(namespace) {
    if (process.noDeprecation) {
      return true;
    }
    var str = process.env.NO_DEPRECATION || "";
    return containsNamespace(str, namespace);
  }
  function istraced(namespace) {
    if (process.traceDeprecation) {
      return true;
    }
    var str = process.env.TRACE_DEPRECATION || "";
    return containsNamespace(str, namespace);
  }
  function log(message, site) {
    var haslisteners = eehaslisteners(process, "deprecation");
    if (!haslisteners && this._ignored) {
      return;
    }
    var caller;
    var callFile;
    var callSite;
    var depSite;
    var i2 = 0;
    var seen = false;
    var stack = getStack();
    var file = this._file;
    if (site) {
      depSite = site;
      callSite = callSiteLocation(stack[1]);
      callSite.name = depSite.name;
      file = callSite[0];
    } else {
      i2 = 2;
      depSite = callSiteLocation(stack[i2]);
      callSite = depSite;
    }
    for (;i2 < stack.length; i2++) {
      caller = callSiteLocation(stack[i2]);
      callFile = caller[0];
      if (callFile === file) {
        seen = true;
      } else if (callFile === this._file) {
        file = this._file;
      } else if (seen) {
        break;
      }
    }
    var key = caller ? depSite.join(":") + "__" + caller.join(":") : undefined;
    if (key !== undefined && key in this._warned) {
      return;
    }
    this._warned[key] = true;
    var msg = message;
    if (!msg) {
      msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);
    }
    if (haslisteners) {
      var err2 = DeprecationError(this._namespace, msg, stack.slice(i2));
      process.emit("deprecation", err2);
      return;
    }
    var format2 = process.stderr.isTTY ? formatColor : formatPlain;
    var output = format2.call(this, msg, caller, stack.slice(i2));
    process.stderr.write(output + `
`, "utf8");
  }
  function callSiteLocation(callSite) {
    var file = callSite.getFileName() || "<anonymous>";
    var line = callSite.getLineNumber();
    var colm = callSite.getColumnNumber();
    if (callSite.isEval()) {
      file = callSite.getEvalOrigin() + ", " + file;
    }
    var site = [file, line, colm];
    site.callSite = callSite;
    site.name = callSite.getFunctionName();
    return site;
  }
  function defaultMessage(site) {
    var callSite = site.callSite;
    var funcName = site.name;
    if (!funcName) {
      funcName = "<anonymous@" + formatLocation(site) + ">";
    }
    var context = callSite.getThis();
    var typeName = context && callSite.getTypeName();
    if (typeName === "Object") {
      typeName = undefined;
    }
    if (typeName === "Function") {
      typeName = context.name || typeName;
    }
    return typeName && callSite.getMethodName() ? typeName + "." + funcName : funcName;
  }
  function formatPlain(msg, caller, stack) {
    var timestamp = new Date().toUTCString();
    var formatted = timestamp + " " + this._namespace + " deprecated " + msg;
    if (this._traced) {
      for (var i2 = 0;i2 < stack.length; i2++) {
        formatted += `
    at ` + stack[i2].toString();
      }
      return formatted;
    }
    if (caller) {
      formatted += " at " + formatLocation(caller);
    }
    return formatted;
  }
  function formatColor(msg, caller, stack) {
    var formatted = "\x1B[36;1m" + this._namespace + "\x1B[22;39m" + " \x1B[33;1mdeprecated\x1B[22;39m" + " \x1B[0m" + msg + "\x1B[39m";
    if (this._traced) {
      for (var i2 = 0;i2 < stack.length; i2++) {
        formatted += `
    \x1B[36mat ` + stack[i2].toString() + "\x1B[39m";
      }
      return formatted;
    }
    if (caller) {
      formatted += " \x1B[36m" + formatLocation(caller) + "\x1B[39m";
    }
    return formatted;
  }
  function formatLocation(callSite) {
    return relative(basePath, callSite[0]) + ":" + callSite[1] + ":" + callSite[2];
  }
  function getStack() {
    var limit = Error.stackTraceLimit;
    var obj = {};
    var prep = Error.prepareStackTrace;
    Error.prepareStackTrace = prepareObjectStackTrace;
    Error.stackTraceLimit = Math.max(10, limit);
    Error.captureStackTrace(obj);
    var stack = obj.stack.slice(1);
    Error.prepareStackTrace = prep;
    Error.stackTraceLimit = limit;
    return stack;
  }
  function prepareObjectStackTrace(obj, stack) {
    return stack;
  }
  function wrapfunction(fn, message) {
    if (typeof fn !== "function") {
      throw new TypeError("argument fn must be a function");
    }
    var args = createArgumentsString(fn.length);
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = fn.name;
    var deprecatedfn = new Function("fn", "log", "deprecate", "message", "site", `"use strict"
` + "return function (" + args + ") {" + `log.call(deprecate, message, site)
` + `return fn.apply(this, arguments)
` + "}")(fn, log, this, message, site);
    return deprecatedfn;
  }
  function wrapproperty(obj, prop, message) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new TypeError("argument obj must be object");
    }
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (!descriptor) {
      throw new TypeError("must call property on owner object");
    }
    if (!descriptor.configurable) {
      throw new TypeError("property must be configurable");
    }
    var deprecate = this;
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = prop;
    if ("value" in descriptor) {
      descriptor = convertDataDescriptorToAccessor(obj, prop, message);
    }
    var get2 = descriptor.get;
    var set = descriptor.set;
    if (typeof get2 === "function") {
      descriptor.get = function getter() {
        log.call(deprecate, message, site);
        return get2.apply(this, arguments);
      };
    }
    if (typeof set === "function") {
      descriptor.set = function setter() {
        log.call(deprecate, message, site);
        return set.apply(this, arguments);
      };
    }
    Object.defineProperty(obj, prop, descriptor);
  }
  function DeprecationError(namespace, message, stack) {
    var error = new Error;
    var stackString;
    Object.defineProperty(error, "constructor", {
      value: DeprecationError
    });
    Object.defineProperty(error, "message", {
      configurable: true,
      enumerable: false,
      value: message,
      writable: true
    });
    Object.defineProperty(error, "name", {
      enumerable: false,
      configurable: true,
      value: "DeprecationError",
      writable: true
    });
    Object.defineProperty(error, "namespace", {
      configurable: true,
      enumerable: false,
      value: namespace,
      writable: true
    });
    Object.defineProperty(error, "stack", {
      configurable: true,
      enumerable: false,
      get: function() {
        if (stackString !== undefined) {
          return stackString;
        }
        return stackString = createStackString.call(this, stack);
      },
      set: function setter(val) {
        stackString = val;
      }
    });
    return error;
  }
});

// node_modules/setprototypeof/index.js
var require_setprototypeof = __commonJS((exports2, module2) => {
  module2.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
  function setProtoOf(obj, proto) {
    obj.__proto__ = proto;
    return obj;
  }
  function mixinProperties(obj, proto) {
    for (var prop in proto) {
      if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
        obj[prop] = proto[prop];
      }
    }
    return obj;
  }
});

// node_modules/statuses/codes.json
var require_codes = __commonJS((exports2, module2) => {
  module2.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a Teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
});

// node_modules/statuses/index.js
var require_statuses = __commonJS((exports2, module2) => {
  /*!
   * statuses
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var codes = require_codes();
  module2.exports = status;
  status.message = codes;
  status.code = createMessageToStatusCodeMap(codes);
  status.codes = createStatusCodeList(codes);
  status.redirect = {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
  };
  status.empty = {
    204: true,
    205: true,
    304: true
  };
  status.retry = {
    502: true,
    503: true,
    504: true
  };
  function createMessageToStatusCodeMap(codes2) {
    var map = {};
    Object.keys(codes2).forEach(function forEachCode(code2) {
      var message = codes2[code2];
      var status2 = Number(code2);
      map[message.toLowerCase()] = status2;
    });
    return map;
  }
  function createStatusCodeList(codes2) {
    return Object.keys(codes2).map(function mapCode(code2) {
      return Number(code2);
    });
  }
  function getStatusCode(message) {
    var msg = message.toLowerCase();
    if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {
      throw new Error('invalid status message: "' + message + '"');
    }
    return status.code[msg];
  }
  function getStatusMessage(code2) {
    if (!Object.prototype.hasOwnProperty.call(status.message, code2)) {
      throw new Error("invalid status code: " + code2);
    }
    return status.message[code2];
  }
  function status(code2) {
    if (typeof code2 === "number") {
      return getStatusMessage(code2);
    }
    if (typeof code2 !== "string") {
      throw new TypeError("code must be a number or string");
    }
    var n = parseInt(code2, 10);
    if (!isNaN(n)) {
      return getStatusMessage(n);
    }
    return getStatusCode(code2);
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS((exports2, module2) => {
  if (typeof Object.create === "function") {
    module2.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module2.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor;
        ctor.prototype.constructor = ctor;
      }
    };
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS((exports2, module2) => {
  try {
    util2 = require("util");
    if (typeof util2.inherits !== "function")
      throw "";
    module2.exports = util2.inherits;
  } catch (e) {
    module2.exports = require_inherits_browser();
  }
  var util2;
});

// node_modules/toidentifier/index.js
var require_toidentifier = __commonJS((exports2, module2) => {
  /*!
   * toidentifier
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module2.exports = toIdentifier;
  function toIdentifier(str) {
    return str.split(" ").map(function(token) {
      return token.slice(0, 1).toUpperCase() + token.slice(1);
    }).join("").replace(/[^ _0-9a-z]/gi, "");
  }
});

// node_modules/http-errors/index.js
var require_http_errors = __commonJS((exports2, module2) => {
  /*!
   * http-errors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var deprecate = require_depd()("http-errors");
  var setPrototypeOf = require_setprototypeof();
  var statuses = require_statuses();
  var inherits = require_inherits();
  var toIdentifier = require_toidentifier();
  module2.exports = createError;
  module2.exports.HttpError = createHttpErrorConstructor();
  module2.exports.isHttpError = createIsHttpErrorFunction(module2.exports.HttpError);
  populateConstructorExports(module2.exports, statuses.codes, module2.exports.HttpError);
  function codeClass(status) {
    return Number(String(status).charAt(0) + "00");
  }
  function createError() {
    var err2;
    var msg;
    var status = 500;
    var props = {};
    for (var i2 = 0;i2 < arguments.length; i2++) {
      var arg = arguments[i2];
      var type = typeof arg;
      if (type === "object" && arg instanceof Error) {
        err2 = arg;
        status = err2.status || err2.statusCode || status;
      } else if (type === "number" && i2 === 0) {
        status = arg;
      } else if (type === "string") {
        msg = arg;
      } else if (type === "object") {
        props = arg;
      } else {
        throw new TypeError("argument #" + (i2 + 1) + " unsupported type " + type);
      }
    }
    if (typeof status === "number" && (status < 400 || status >= 600)) {
      deprecate("non-error status code; use only 4xx or 5xx status codes");
    }
    if (typeof status !== "number" || !statuses.message[status] && (status < 400 || status >= 600)) {
      status = 500;
    }
    var HttpError = createError[status] || createError[codeClass(status)];
    if (!err2) {
      err2 = HttpError ? new HttpError(msg) : new Error(msg || statuses.message[status]);
      Error.captureStackTrace(err2, createError);
    }
    if (!HttpError || !(err2 instanceof HttpError) || err2.status !== status) {
      err2.expose = status < 500;
      err2.status = err2.statusCode = status;
    }
    for (var key in props) {
      if (key !== "status" && key !== "statusCode") {
        err2[key] = props[key];
      }
    }
    return err2;
  }
  function createHttpErrorConstructor() {
    function HttpError() {
      throw new TypeError("cannot construct abstract class");
    }
    inherits(HttpError, Error);
    return HttpError;
  }
  function createClientErrorConstructor(HttpError, name, code2) {
    var className = toClassName(name);
    function ClientError(message) {
      var msg = message != null ? message : statuses.message[code2];
      var err2 = new Error(msg);
      Error.captureStackTrace(err2, ClientError);
      setPrototypeOf(err2, ClientError.prototype);
      Object.defineProperty(err2, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err2, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err2;
    }
    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);
    ClientError.prototype.status = code2;
    ClientError.prototype.statusCode = code2;
    ClientError.prototype.expose = true;
    return ClientError;
  }
  function createIsHttpErrorFunction(HttpError) {
    return function isHttpError(val) {
      if (!val || typeof val !== "object") {
        return false;
      }
      if (val instanceof HttpError) {
        return true;
      }
      return val instanceof Error && typeof val.expose === "boolean" && typeof val.statusCode === "number" && val.status === val.statusCode;
    };
  }
  function createServerErrorConstructor(HttpError, name, code2) {
    var className = toClassName(name);
    function ServerError(message) {
      var msg = message != null ? message : statuses.message[code2];
      var err2 = new Error(msg);
      Error.captureStackTrace(err2, ServerError);
      setPrototypeOf(err2, ServerError.prototype);
      Object.defineProperty(err2, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err2, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err2;
    }
    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);
    ServerError.prototype.status = code2;
    ServerError.prototype.statusCode = code2;
    ServerError.prototype.expose = false;
    return ServerError;
  }
  function nameFunc(func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, "name");
    if (desc && desc.configurable) {
      desc.value = name;
      Object.defineProperty(func, "name", desc);
    }
  }
  function populateConstructorExports(exports3, codes, HttpError) {
    codes.forEach(function forEachCode(code2) {
      var CodeError;
      var name = toIdentifier(statuses.message[code2]);
      switch (codeClass(code2)) {
        case 400:
          CodeError = createClientErrorConstructor(HttpError, name, code2);
          break;
        case 500:
          CodeError = createServerErrorConstructor(HttpError, name, code2);
          break;
      }
      if (CodeError) {
        exports3[code2] = CodeError;
        exports3[name] = CodeError;
      }
    });
  }
  function toClassName(name) {
    return name.substr(-5) !== "Error" ? name + "Error" : name;
  }
});

// node_modules/safer-buffer/safer.js
var require_safer = __commonJS((exports2, module2) => {
  var buffer = require("buffer");
  var Buffer2 = buffer.Buffer;
  var safer = {};
  var key;
  for (key in buffer) {
    if (!buffer.hasOwnProperty(key))
      continue;
    if (key === "SlowBuffer" || key === "Buffer")
      continue;
    safer[key] = buffer[key];
  }
  var Safer = safer.Buffer = {};
  for (key in Buffer2) {
    if (!Buffer2.hasOwnProperty(key))
      continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow")
      continue;
    Safer[key] = Buffer2[key];
  }
  safer.Buffer.prototype = Buffer2.prototype;
  if (!Safer.from || Safer.from === Uint8Array.from) {
    Safer.from = function(value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
      }
      if (value && typeof value.length === "undefined") {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
      }
      return Buffer2(value, encodingOrOffset, length);
    };
  }
  if (!Safer.alloc) {
    Safer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
      }
      if (size < 0 || size >= 2 * (1 << 30)) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
      var buf = Buffer2(size);
      if (!fill || fill.length === 0) {
        buf.fill(0);
      } else if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
      return buf;
    };
  }
  if (!safer.kStringMaxLength) {
    try {
      safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
    } catch (e) {}
  }
  if (!safer.constants) {
    safer.constants = {
      MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) {
      safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
    }
  }
  module2.exports = safer;
});

// node_modules/iconv-lite/lib/bom-handling.js
var require_bom_handling = __commonJS((exports2) => {
  var BOMChar = "\uFEFF";
  exports2.PrependBOM = PrependBOMWrapper;
  function PrependBOMWrapper(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
  }
  PrependBOMWrapper.prototype.write = function(str) {
    if (this.addBOM) {
      str = BOMChar + str;
      this.addBOM = false;
    }
    return this.encoder.write(str);
  };
  PrependBOMWrapper.prototype.end = function() {
    return this.encoder.end();
  };
  exports2.StripBOM = StripBOMWrapper;
  function StripBOMWrapper(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
  }
  StripBOMWrapper.prototype.write = function(buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res)
      return res;
    if (res[0] === BOMChar) {
      res = res.slice(1);
      if (typeof this.options.stripBOM === "function")
        this.options.stripBOM();
    }
    this.pass = true;
    return res;
  };
  StripBOMWrapper.prototype.end = function() {
    return this.decoder.end();
  };
});

// node_modules/iconv-lite/encodings/internal.js
var require_internal = __commonJS((exports2, module2) => {
  var Buffer2 = require_safer().Buffer;
  module2.exports = {
    utf8: { type: "_internal", bomAware: true },
    cesu8: { type: "_internal", bomAware: true },
    unicode11utf8: "utf8",
    ucs2: { type: "_internal", bomAware: true },
    utf16le: "ucs2",
    binary: { type: "_internal" },
    base64: { type: "_internal" },
    hex: { type: "_internal" },
    _internal: InternalCodec
  };
  function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;
    if (this.enc === "base64")
      this.encoder = InternalEncoderBase64;
    else if (this.enc === "cesu8") {
      this.enc = "utf8";
      this.encoder = InternalEncoderCesu8;
      if (Buffer2.from("eda0bdedb2a9", "hex").toString() !== "\uD83D\uDCA9") {
        this.decoder = InternalDecoderCesu8;
        this.defaultCharUnicode = iconv.defaultCharUnicode;
      }
    }
  }
  InternalCodec.prototype.encoder = InternalEncoder;
  InternalCodec.prototype.decoder = InternalDecoder;
  var StringDecoder = require("string_decoder").StringDecoder;
  if (!StringDecoder.prototype.end)
    StringDecoder.prototype.end = function() {};
  function InternalDecoder(options, codec) {
    this.decoder = new StringDecoder(codec.enc);
  }
  InternalDecoder.prototype.write = function(buf) {
    if (!Buffer2.isBuffer(buf)) {
      buf = Buffer2.from(buf);
    }
    return this.decoder.write(buf);
  };
  InternalDecoder.prototype.end = function() {
    return this.decoder.end();
  };
  function InternalEncoder(options, codec) {
    this.enc = codec.enc;
  }
  InternalEncoder.prototype.write = function(str) {
    return Buffer2.from(str, this.enc);
  };
  InternalEncoder.prototype.end = function() {};
  function InternalEncoderBase64(options, codec) {
    this.prevStr = "";
  }
  InternalEncoderBase64.prototype.write = function(str) {
    str = this.prevStr + str;
    var completeQuads = str.length - str.length % 4;
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);
    return Buffer2.from(str, "base64");
  };
  InternalEncoderBase64.prototype.end = function() {
    return Buffer2.from(this.prevStr, "base64");
  };
  function InternalEncoderCesu8(options, codec) {}
  InternalEncoderCesu8.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length * 3), bufIdx = 0;
    for (var i2 = 0;i2 < str.length; i2++) {
      var charCode = str.charCodeAt(i2);
      if (charCode < 128)
        buf[bufIdx++] = charCode;
      else if (charCode < 2048) {
        buf[bufIdx++] = 192 + (charCode >>> 6);
        buf[bufIdx++] = 128 + (charCode & 63);
      } else {
        buf[bufIdx++] = 224 + (charCode >>> 12);
        buf[bufIdx++] = 128 + (charCode >>> 6 & 63);
        buf[bufIdx++] = 128 + (charCode & 63);
      }
    }
    return buf.slice(0, bufIdx);
  };
  InternalEncoderCesu8.prototype.end = function() {};
  function InternalDecoderCesu8(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
  }
  InternalDecoderCesu8.prototype.write = function(buf) {
    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = "";
    for (var i2 = 0;i2 < buf.length; i2++) {
      var curByte = buf[i2];
      if ((curByte & 192) !== 128) {
        if (contBytes > 0) {
          res += this.defaultCharUnicode;
          contBytes = 0;
        }
        if (curByte < 128) {
          res += String.fromCharCode(curByte);
        } else if (curByte < 224) {
          acc = curByte & 31;
          contBytes = 1;
          accBytes = 1;
        } else if (curByte < 240) {
          acc = curByte & 15;
          contBytes = 2;
          accBytes = 1;
        } else {
          res += this.defaultCharUnicode;
        }
      } else {
        if (contBytes > 0) {
          acc = acc << 6 | curByte & 63;
          contBytes--;
          accBytes++;
          if (contBytes === 0) {
            if (accBytes === 2 && acc < 128 && acc > 0)
              res += this.defaultCharUnicode;
            else if (accBytes === 3 && acc < 2048)
              res += this.defaultCharUnicode;
            else
              res += String.fromCharCode(acc);
          }
        } else {
          res += this.defaultCharUnicode;
        }
      }
    }
    this.acc = acc;
    this.contBytes = contBytes;
    this.accBytes = accBytes;
    return res;
  };
  InternalDecoderCesu8.prototype.end = function() {
    var res = 0;
    if (this.contBytes > 0)
      res += this.defaultCharUnicode;
    return res;
  };
});

// node_modules/iconv-lite/encodings/utf32.js
var require_utf32 = __commonJS((exports2) => {
  var Buffer2 = require_safer().Buffer;
  exports2._utf32 = Utf32Codec;
  function Utf32Codec(codecOptions, iconv) {
    this.iconv = iconv;
    this.bomAware = true;
    this.isLE = codecOptions.isLE;
  }
  exports2.utf32le = { type: "_utf32", isLE: true };
  exports2.utf32be = { type: "_utf32", isLE: false };
  exports2.ucs4le = "utf32le";
  exports2.ucs4be = "utf32be";
  Utf32Codec.prototype.encoder = Utf32Encoder;
  Utf32Codec.prototype.decoder = Utf32Decoder;
  function Utf32Encoder(options, codec) {
    this.isLE = codec.isLE;
    this.highSurrogate = 0;
  }
  Utf32Encoder.prototype.write = function(str) {
    var src = Buffer2.from(str, "ucs2");
    var dst = Buffer2.alloc(src.length * 2);
    var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
    var offset = 0;
    for (var i2 = 0;i2 < src.length; i2 += 2) {
      var code2 = src.readUInt16LE(i2);
      var isHighSurrogate = 55296 <= code2 && code2 < 56320;
      var isLowSurrogate = 56320 <= code2 && code2 < 57344;
      if (this.highSurrogate) {
        if (isHighSurrogate || !isLowSurrogate) {
          write32.call(dst, this.highSurrogate, offset);
          offset += 4;
        } else {
          var codepoint = (this.highSurrogate - 55296 << 10 | code2 - 56320) + 65536;
          write32.call(dst, codepoint, offset);
          offset += 4;
          this.highSurrogate = 0;
          continue;
        }
      }
      if (isHighSurrogate)
        this.highSurrogate = code2;
      else {
        write32.call(dst, code2, offset);
        offset += 4;
        this.highSurrogate = 0;
      }
    }
    if (offset < dst.length)
      dst = dst.slice(0, offset);
    return dst;
  };
  Utf32Encoder.prototype.end = function() {
    if (!this.highSurrogate)
      return;
    var buf = Buffer2.alloc(4);
    if (this.isLE)
      buf.writeUInt32LE(this.highSurrogate, 0);
    else
      buf.writeUInt32BE(this.highSurrogate, 0);
    this.highSurrogate = 0;
    return buf;
  };
  function Utf32Decoder(options, codec) {
    this.isLE = codec.isLE;
    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
    this.overflow = [];
  }
  Utf32Decoder.prototype.write = function(src) {
    if (src.length === 0)
      return "";
    var i2 = 0;
    var codepoint = 0;
    var dst = Buffer2.alloc(src.length + 4);
    var offset = 0;
    var isLE = this.isLE;
    var overflow = this.overflow;
    var badChar = this.badChar;
    if (overflow.length > 0) {
      for (;i2 < src.length && overflow.length < 4; i2++)
        overflow.push(src[i2]);
      if (overflow.length === 4) {
        if (isLE) {
          codepoint = overflow[i2] | overflow[i2 + 1] << 8 | overflow[i2 + 2] << 16 | overflow[i2 + 3] << 24;
        } else {
          codepoint = overflow[i2 + 3] | overflow[i2 + 2] << 8 | overflow[i2 + 1] << 16 | overflow[i2] << 24;
        }
        overflow.length = 0;
        offset = _writeCodepoint(dst, offset, codepoint, badChar);
      }
    }
    for (;i2 < src.length - 3; i2 += 4) {
      if (isLE) {
        codepoint = src[i2] | src[i2 + 1] << 8 | src[i2 + 2] << 16 | src[i2 + 3] << 24;
      } else {
        codepoint = src[i2 + 3] | src[i2 + 2] << 8 | src[i2 + 1] << 16 | src[i2] << 24;
      }
      offset = _writeCodepoint(dst, offset, codepoint, badChar);
    }
    for (;i2 < src.length; i2++) {
      overflow.push(src[i2]);
    }
    return dst.slice(0, offset).toString("ucs2");
  };
  function _writeCodepoint(dst, offset, codepoint, badChar) {
    if (codepoint < 0 || codepoint > 1114111) {
      codepoint = badChar;
    }
    if (codepoint >= 65536) {
      codepoint -= 65536;
      var high = 55296 | codepoint >> 10;
      dst[offset++] = high & 255;
      dst[offset++] = high >> 8;
      var codepoint = 56320 | codepoint & 1023;
    }
    dst[offset++] = codepoint & 255;
    dst[offset++] = codepoint >> 8;
    return offset;
  }
  Utf32Decoder.prototype.end = function() {
    this.overflow.length = 0;
  };
  exports2.utf32 = Utf32AutoCodec;
  exports2.ucs4 = "utf32";
  function Utf32AutoCodec(options, iconv) {
    this.iconv = iconv;
  }
  Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
  Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder;
  function Utf32AutoEncoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
      options.addBOM = true;
    this.encoder = codec.iconv.getEncoder(options.defaultEncoding || "utf-32le", options);
  }
  Utf32AutoEncoder.prototype.write = function(str) {
    return this.encoder.write(str);
  };
  Utf32AutoEncoder.prototype.end = function() {
    return this.encoder.end();
  };
  function Utf32AutoDecoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  }
  Utf32AutoDecoder.prototype.write = function(buf) {
    if (!this.decoder) {
      this.initialBufs.push(buf);
      this.initialBufsLen += buf.length;
      if (this.initialBufsLen < 32)
        return "";
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = "";
      for (var i2 = 0;i2 < this.initialBufs.length; i2++)
        resStr += this.decoder.write(this.initialBufs[i2]);
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.write(buf);
  };
  Utf32AutoDecoder.prototype.end = function() {
    if (!this.decoder) {
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = "";
      for (var i2 = 0;i2 < this.initialBufs.length; i2++)
        resStr += this.decoder.write(this.initialBufs[i2]);
      var trail = this.decoder.end();
      if (trail)
        resStr += trail;
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.end();
  };
  function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var invalidLE = 0, invalidBE = 0;
    var bmpCharsLE = 0, bmpCharsBE = 0;
    outer_loop:
      for (var i2 = 0;i2 < bufs.length; i2++) {
        var buf = bufs[i2];
        for (var j = 0;j < buf.length; j++) {
          b.push(buf[j]);
          if (b.length === 4) {
            if (charsProcessed === 0) {
              if (b[0] === 255 && b[1] === 254 && b[2] === 0 && b[3] === 0) {
                return "utf-32le";
              }
              if (b[0] === 0 && b[1] === 0 && b[2] === 254 && b[3] === 255) {
                return "utf-32be";
              }
            }
            if (b[0] !== 0 || b[1] > 16)
              invalidBE++;
            if (b[3] !== 0 || b[2] > 16)
              invalidLE++;
            if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0))
              bmpCharsBE++;
            if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0)
              bmpCharsLE++;
            b.length = 0;
            charsProcessed++;
            if (charsProcessed >= 100) {
              break outer_loop;
            }
          }
        }
      }
    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)
      return "utf-32be";
    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)
      return "utf-32le";
    return defaultEncoding || "utf-32le";
  }
});

// node_modules/iconv-lite/encodings/utf16.js
var require_utf16 = __commonJS((exports2) => {
  var Buffer2 = require_safer().Buffer;
  exports2.utf16be = Utf16BECodec;
  function Utf16BECodec() {}
  Utf16BECodec.prototype.encoder = Utf16BEEncoder;
  Utf16BECodec.prototype.decoder = Utf16BEDecoder;
  Utf16BECodec.prototype.bomAware = true;
  function Utf16BEEncoder() {}
  Utf16BEEncoder.prototype.write = function(str) {
    var buf = Buffer2.from(str, "ucs2");
    for (var i2 = 0;i2 < buf.length; i2 += 2) {
      var tmp = buf[i2];
      buf[i2] = buf[i2 + 1];
      buf[i2 + 1] = tmp;
    }
    return buf;
  };
  Utf16BEEncoder.prototype.end = function() {};
  function Utf16BEDecoder() {
    this.overflowByte = -1;
  }
  Utf16BEDecoder.prototype.write = function(buf) {
    if (buf.length == 0)
      return "";
    var buf2 = Buffer2.alloc(buf.length + 1), i2 = 0, j = 0;
    if (this.overflowByte !== -1) {
      buf2[0] = buf[0];
      buf2[1] = this.overflowByte;
      i2 = 1;
      j = 2;
    }
    for (;i2 < buf.length - 1; i2 += 2, j += 2) {
      buf2[j] = buf[i2 + 1];
      buf2[j + 1] = buf[i2];
    }
    this.overflowByte = i2 == buf.length - 1 ? buf[buf.length - 1] : -1;
    return buf2.slice(0, j).toString("ucs2");
  };
  Utf16BEDecoder.prototype.end = function() {
    this.overflowByte = -1;
  };
  exports2.utf16 = Utf16Codec;
  function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf16Codec.prototype.encoder = Utf16Encoder;
  Utf16Codec.prototype.decoder = Utf16Decoder;
  function Utf16Encoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
      options.addBOM = true;
    this.encoder = codec.iconv.getEncoder("utf-16le", options);
  }
  Utf16Encoder.prototype.write = function(str) {
    return this.encoder.write(str);
  };
  Utf16Encoder.prototype.end = function() {
    return this.encoder.end();
  };
  function Utf16Decoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  }
  Utf16Decoder.prototype.write = function(buf) {
    if (!this.decoder) {
      this.initialBufs.push(buf);
      this.initialBufsLen += buf.length;
      if (this.initialBufsLen < 16)
        return "";
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = "";
      for (var i2 = 0;i2 < this.initialBufs.length; i2++)
        resStr += this.decoder.write(this.initialBufs[i2]);
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.write(buf);
  };
  Utf16Decoder.prototype.end = function() {
    if (!this.decoder) {
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = "";
      for (var i2 = 0;i2 < this.initialBufs.length; i2++)
        resStr += this.decoder.write(this.initialBufs[i2]);
      var trail = this.decoder.end();
      if (trail)
        resStr += trail;
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.end();
  };
  function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var asciiCharsLE = 0, asciiCharsBE = 0;
    outer_loop:
      for (var i2 = 0;i2 < bufs.length; i2++) {
        var buf = bufs[i2];
        for (var j = 0;j < buf.length; j++) {
          b.push(buf[j]);
          if (b.length === 2) {
            if (charsProcessed === 0) {
              if (b[0] === 255 && b[1] === 254)
                return "utf-16le";
              if (b[0] === 254 && b[1] === 255)
                return "utf-16be";
            }
            if (b[0] === 0 && b[1] !== 0)
              asciiCharsBE++;
            if (b[0] !== 0 && b[1] === 0)
              asciiCharsLE++;
            b.length = 0;
            charsProcessed++;
            if (charsProcessed >= 100) {
              break outer_loop;
            }
          }
        }
      }
    if (asciiCharsBE > asciiCharsLE)
      return "utf-16be";
    if (asciiCharsBE < asciiCharsLE)
      return "utf-16le";
    return defaultEncoding || "utf-16le";
  }
});

// node_modules/iconv-lite/encodings/utf7.js
var require_utf7 = __commonJS((exports2) => {
  var Buffer2 = require_safer().Buffer;
  exports2.utf7 = Utf7Codec;
  exports2.unicode11utf7 = "utf7";
  function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf7Codec.prototype.encoder = Utf7Encoder;
  Utf7Codec.prototype.decoder = Utf7Decoder;
  Utf7Codec.prototype.bomAware = true;
  var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
  function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv;
  }
  Utf7Encoder.prototype.write = function(str) {
    return Buffer2.from(str.replace(nonDirectChars, function(chunk) {
      return "+" + (chunk === "+" ? "" : this.iconv.encode(chunk, "utf16-be").toString("base64").replace(/=+$/, "")) + "-";
    }.bind(this)));
  };
  Utf7Encoder.prototype.end = function() {};
  function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  }
  var base64Regex2 = /[A-Za-z0-9\/+]/;
  var base64Chars = [];
  for (i2 = 0;i2 < 256; i2++)
    base64Chars[i2] = base64Regex2.test(String.fromCharCode(i2));
  var i2;
  var plusChar = 43;
  var minusChar = 45;
  var andChar = 38;
  Utf7Decoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i3 = 0;i3 < buf.length; i3++) {
      if (!inBase64) {
        if (buf[i3] == plusChar) {
          res += this.iconv.decode(buf.slice(lastI, i3), "ascii");
          lastI = i3 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64Chars[buf[i3]]) {
          if (i3 == lastI && buf[i3] == minusChar) {
            res += "+";
          } else {
            var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i3), "ascii");
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i3] != minusChar)
            i3--;
          lastI = i3 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7Decoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
  exports2.utf7imap = Utf7IMAPCodec;
  function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
  Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
  Utf7IMAPCodec.prototype.bomAware = true;
  function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer2.alloc(6);
    this.base64AccumIdx = 0;
  }
  Utf7IMAPEncoder.prototype.write = function(str) {
    var inBase64 = this.inBase64, base64Accum = this.base64Accum, base64AccumIdx = this.base64AccumIdx, buf = Buffer2.alloc(str.length * 5 + 10), bufIdx = 0;
    for (var i3 = 0;i3 < str.length; i3++) {
      var uChar = str.charCodeAt(i3);
      if (32 <= uChar && uChar <= 126) {
        if (inBase64) {
          if (base64AccumIdx > 0) {
            bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
            base64AccumIdx = 0;
          }
          buf[bufIdx++] = minusChar;
          inBase64 = false;
        }
        if (!inBase64) {
          buf[bufIdx++] = uChar;
          if (uChar === andChar)
            buf[bufIdx++] = minusChar;
        }
      } else {
        if (!inBase64) {
          buf[bufIdx++] = andChar;
          inBase64 = true;
        }
        if (inBase64) {
          base64Accum[base64AccumIdx++] = uChar >> 8;
          base64Accum[base64AccumIdx++] = uChar & 255;
          if (base64AccumIdx == base64Accum.length) {
            bufIdx += buf.write(base64Accum.toString("base64").replace(/\//g, ","), bufIdx);
            base64AccumIdx = 0;
          }
        }
      }
    }
    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;
    return buf.slice(0, bufIdx);
  };
  Utf7IMAPEncoder.prototype.end = function() {
    var buf = Buffer2.alloc(10), bufIdx = 0;
    if (this.inBase64) {
      if (this.base64AccumIdx > 0) {
        bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
        this.base64AccumIdx = 0;
      }
      buf[bufIdx++] = minusChar;
      this.inBase64 = false;
    }
    return buf.slice(0, bufIdx);
  };
  function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  }
  var base64IMAPChars = base64Chars.slice();
  base64IMAPChars[44] = true;
  Utf7IMAPDecoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i3 = 0;i3 < buf.length; i3++) {
      if (!inBase64) {
        if (buf[i3] == andChar) {
          res += this.iconv.decode(buf.slice(lastI, i3), "ascii");
          lastI = i3 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64IMAPChars[buf[i3]]) {
          if (i3 == lastI && buf[i3] == minusChar) {
            res += "&";
          } else {
            var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i3), "ascii").replace(/,/g, "/");
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i3] != minusChar)
            i3--;
          lastI = i3 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, "/");
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7IMAPDecoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
});

// node_modules/iconv-lite/encodings/sbcs-codec.js
var require_sbcs_codec = __commonJS((exports2) => {
  var Buffer2 = require_safer().Buffer;
  exports2._sbcs = SBCSCodec;
  function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions)
      throw new Error("SBCS codec is called without the data.");
    if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
      throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
    if (codecOptions.chars.length === 128) {
      var asciiString = "";
      for (var i2 = 0;i2 < 128; i2++)
        asciiString += String.fromCharCode(i2);
      codecOptions.chars = asciiString + codecOptions.chars;
    }
    this.decodeBuf = Buffer2.from(codecOptions.chars, "ucs2");
    var encodeBuf = Buffer2.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
    for (var i2 = 0;i2 < codecOptions.chars.length; i2++)
      encodeBuf[codecOptions.chars.charCodeAt(i2)] = i2;
    this.encodeBuf = encodeBuf;
  }
  SBCSCodec.prototype.encoder = SBCSEncoder;
  SBCSCodec.prototype.decoder = SBCSDecoder;
  function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf;
  }
  SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length);
    for (var i2 = 0;i2 < str.length; i2++)
      buf[i2] = this.encodeBuf[str.charCodeAt(i2)];
    return buf;
  };
  SBCSEncoder.prototype.end = function() {};
  function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf;
  }
  SBCSDecoder.prototype.write = function(buf) {
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer2.alloc(buf.length * 2);
    var idx1 = 0, idx2 = 0;
    for (var i2 = 0;i2 < buf.length; i2++) {
      idx1 = buf[i2] * 2;
      idx2 = i2 * 2;
      newBuf[idx2] = decodeBuf[idx1];
      newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
    }
    return newBuf.toString("ucs2");
  };
  SBCSDecoder.prototype.end = function() {};
});

// node_modules/iconv-lite/encodings/sbcs-data.js
var require_sbcs_data = __commonJS((exports2, module2) => {
  module2.exports = {
    "10029": "maccenteuro",
    maccenteuro: {
      type: "_sbcs",
      chars: "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
    },
    "808": "cp808",
    ibm808: "cp808",
    cp808: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
    },
    mik: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    cp720: {
      type: "_sbcs",
      chars: "éâàçêëèïîّْô¤ـûùءآأؤ£إئابةتثجحخدذرزسشص«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ضطظعغفµقكلمنهوىي≡ًٌٍَُِ≈°∙·√ⁿ²■ "
    },
    ascii8bit: "ascii",
    usascii: "ascii",
    ansix34: "ascii",
    ansix341968: "ascii",
    ansix341986: "ascii",
    csascii: "ascii",
    cp367: "ascii",
    ibm367: "ascii",
    isoir6: "ascii",
    iso646us: "ascii",
    iso646irv: "ascii",
    us: "ascii",
    latin1: "iso88591",
    latin2: "iso88592",
    latin3: "iso88593",
    latin4: "iso88594",
    latin5: "iso88599",
    latin6: "iso885910",
    latin7: "iso885913",
    latin8: "iso885914",
    latin9: "iso885915",
    latin10: "iso885916",
    csisolatin1: "iso88591",
    csisolatin2: "iso88592",
    csisolatin3: "iso88593",
    csisolatin4: "iso88594",
    csisolatincyrillic: "iso88595",
    csisolatinarabic: "iso88596",
    csisolatingreek: "iso88597",
    csisolatinhebrew: "iso88598",
    csisolatin5: "iso88599",
    csisolatin6: "iso885910",
    l1: "iso88591",
    l2: "iso88592",
    l3: "iso88593",
    l4: "iso88594",
    l5: "iso88599",
    l6: "iso885910",
    l7: "iso885913",
    l8: "iso885914",
    l9: "iso885915",
    l10: "iso885916",
    isoir14: "iso646jp",
    isoir57: "iso646cn",
    isoir100: "iso88591",
    isoir101: "iso88592",
    isoir109: "iso88593",
    isoir110: "iso88594",
    isoir144: "iso88595",
    isoir127: "iso88596",
    isoir126: "iso88597",
    isoir138: "iso88598",
    isoir148: "iso88599",
    isoir157: "iso885910",
    isoir166: "tis620",
    isoir179: "iso885913",
    isoir199: "iso885914",
    isoir203: "iso885915",
    isoir226: "iso885916",
    cp819: "iso88591",
    ibm819: "iso88591",
    cyrillic: "iso88595",
    arabic: "iso88596",
    arabic8: "iso88596",
    ecma114: "iso88596",
    asmo708: "iso88596",
    greek: "iso88597",
    greek8: "iso88597",
    ecma118: "iso88597",
    elot928: "iso88597",
    hebrew: "iso88598",
    hebrew8: "iso88598",
    turkish: "iso88599",
    turkish8: "iso88599",
    thai: "iso885911",
    thai8: "iso885911",
    celtic: "iso885914",
    celtic8: "iso885914",
    isoceltic: "iso885914",
    tis6200: "tis620",
    tis62025291: "tis620",
    tis62025330: "tis620",
    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",
    cspc8codepage437: "cp437",
    cspc775baltic: "cp775",
    cspc850multilingual: "cp850",
    cspcp852: "cp852",
    cspc862latinhebrew: "cp862",
    cpgr: "cp869",
    msee: "cp1250",
    mscyrl: "cp1251",
    msansi: "cp1252",
    msgreek: "cp1253",
    msturk: "cp1254",
    mshebr: "cp1255",
    msarab: "cp1256",
    winbaltrim: "cp1257",
    cp20866: "koi8r",
    "20866": "koi8r",
    ibm878: "koi8r",
    cskoi8r: "koi8r",
    cp21866: "koi8u",
    "21866": "koi8u",
    ibm1168: "koi8u",
    strk10482002: "rk1048",
    tcvn5712: "tcvn",
    tcvn57121: "tcvn",
    gb198880: "iso646cn",
    cn: "iso646cn",
    csiso14jisc6220ro: "iso646jp",
    jisc62201969ro: "iso646jp",
    jp: "iso646jp",
    cshproman8: "hproman8",
    r8: "hproman8",
    roman8: "hproman8",
    xroman8: "hproman8",
    ibm1051: "hproman8",
    mac: "macintosh",
    csmacintosh: "macintosh"
  };
});

// node_modules/iconv-lite/encodings/sbcs-data-generated.js
var require_sbcs_data_generated = __commonJS((exports2, module2) => {
  module2.exports = {
    "437": "cp437",
    "737": "cp737",
    "775": "cp775",
    "850": "cp850",
    "852": "cp852",
    "855": "cp855",
    "856": "cp856",
    "857": "cp857",
    "858": "cp858",
    "860": "cp860",
    "861": "cp861",
    "862": "cp862",
    "863": "cp863",
    "864": "cp864",
    "865": "cp865",
    "866": "cp866",
    "869": "cp869",
    "874": "windows874",
    "922": "cp922",
    "1046": "cp1046",
    "1124": "cp1124",
    "1125": "cp1125",
    "1129": "cp1129",
    "1133": "cp1133",
    "1161": "cp1161",
    "1162": "cp1162",
    "1163": "cp1163",
    "1250": "windows1250",
    "1251": "windows1251",
    "1252": "windows1252",
    "1253": "windows1253",
    "1254": "windows1254",
    "1255": "windows1255",
    "1256": "windows1256",
    "1257": "windows1257",
    "1258": "windows1258",
    "28591": "iso88591",
    "28592": "iso88592",
    "28593": "iso88593",
    "28594": "iso88594",
    "28595": "iso88595",
    "28596": "iso88596",
    "28597": "iso88597",
    "28598": "iso88598",
    "28599": "iso88599",
    "28600": "iso885910",
    "28601": "iso885911",
    "28603": "iso885913",
    "28604": "iso885914",
    "28605": "iso885915",
    "28606": "iso885916",
    windows874: {
      type: "_sbcs",
      chars: "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    win874: "windows874",
    cp874: "windows874",
    windows1250: {
      type: "_sbcs",
      chars: "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    },
    win1250: "windows1250",
    cp1250: "windows1250",
    windows1251: {
      type: "_sbcs",
      chars: "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    win1251: "windows1251",
    cp1251: "windows1251",
    windows1252: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    win1252: "windows1252",
    cp1252: "windows1252",
    windows1253: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
    },
    win1253: "windows1253",
    cp1253: "windows1253",
    windows1254: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
    },
    win1254: "windows1254",
    cp1254: "windows1254",
    windows1255: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
    },
    win1255: "windows1255",
    cp1255: "windows1255",
    windows1256: {
      type: "_sbcs",
      chars: "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
    },
    win1256: "windows1256",
    cp1256: "windows1256",
    windows1257: {
      type: "_sbcs",
      chars: "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
    },
    win1257: "windows1257",
    cp1257: "windows1257",
    windows1258: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    win1258: "windows1258",
    cp1258: "windows1258",
    iso88591: {
      type: "_sbcs",
      chars: " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    cp28591: "iso88591",
    iso88592: {
      type: "_sbcs",
      chars: " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    },
    cp28592: "iso88592",
    iso88593: {
      type: "_sbcs",
      chars: " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
    },
    cp28593: "iso88593",
    iso88594: {
      type: "_sbcs",
      chars: " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
    },
    cp28594: "iso88594",
    iso88595: {
      type: "_sbcs",
      chars: " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
    },
    cp28595: "iso88595",
    iso88596: {
      type: "_sbcs",
      chars: " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
    },
    cp28596: "iso88596",
    iso88597: {
      type: "_sbcs",
      chars: " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
    },
    cp28597: "iso88597",
    iso88598: {
      type: "_sbcs",
      chars: " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
    },
    cp28598: "iso88598",
    iso88599: {
      type: "_sbcs",
      chars: " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
    },
    cp28599: "iso88599",
    iso885910: {
      type: "_sbcs",
      chars: " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
    },
    cp28600: "iso885910",
    iso885911: {
      type: "_sbcs",
      chars: " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    cp28601: "iso885911",
    iso885913: {
      type: "_sbcs",
      chars: " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
    },
    cp28603: "iso885913",
    iso885914: {
      type: "_sbcs",
      chars: " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
    },
    cp28604: "iso885914",
    iso885915: {
      type: "_sbcs",
      chars: " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    cp28605: "iso885915",
    iso885916: {
      type: "_sbcs",
      chars: " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
    },
    cp28606: "iso885916",
    cp437: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm437: "cp437",
    csibm437: "cp437",
    cp737: {
      type: "_sbcs",
      chars: "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
    },
    ibm737: "cp737",
    csibm737: "cp737",
    cp775: {
      type: "_sbcs",
      chars: "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
    },
    ibm775: "cp775",
    csibm775: "cp775",
    cp850: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    ibm850: "cp850",
    csibm850: "cp850",
    cp852: {
      type: "_sbcs",
      chars: "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
    },
    ibm852: "cp852",
    csibm852: "cp852",
    cp855: {
      type: "_sbcs",
      chars: "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
    },
    ibm855: "cp855",
    csibm855: "cp855",
    cp856: {
      type: "_sbcs",
      chars: "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    ibm856: "cp856",
    csibm856: "cp856",
    cp857: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
    },
    ibm857: "cp857",
    csibm857: "cp857",
    cp858: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    ibm858: "cp858",
    csibm858: "cp858",
    cp860: {
      type: "_sbcs",
      chars: "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm860: "cp860",
    csibm860: "cp860",
    cp861: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm861: "cp861",
    csibm861: "cp861",
    cp862: {
      type: "_sbcs",
      chars: "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm862: "cp862",
    csibm862: "cp862",
    cp863: {
      type: "_sbcs",
      chars: "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm863: "cp863",
    csibm863: "cp863",
    cp864: {
      type: "_sbcs",
      chars: `\x00\x01\x02\x03\x04\x05\x06\x07\b	
\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�`
    },
    ibm864: "cp864",
    csibm864: "cp864",
    cp865: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm865: "cp865",
    csibm865: "cp865",
    cp866: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
    },
    ibm866: "cp866",
    csibm866: "cp866",
    cp869: {
      type: "_sbcs",
      chars: "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
    },
    ibm869: "cp869",
    csibm869: "cp869",
    cp922: {
      type: "_sbcs",
      chars: " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
    },
    ibm922: "cp922",
    csibm922: "cp922",
    cp1046: {
      type: "_sbcs",
      chars: "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
    },
    ibm1046: "cp1046",
    csibm1046: "cp1046",
    cp1124: {
      type: "_sbcs",
      chars: " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
    },
    ibm1124: "cp1124",
    csibm1124: "cp1124",
    cp1125: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
    },
    ibm1125: "cp1125",
    csibm1125: "cp1125",
    cp1129: {
      type: "_sbcs",
      chars: " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    ibm1129: "cp1129",
    csibm1129: "cp1129",
    cp1133: {
      type: "_sbcs",
      chars: " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
    },
    ibm1133: "cp1133",
    csibm1133: "cp1133",
    cp1161: {
      type: "_sbcs",
      chars: "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
    },
    ibm1161: "cp1161",
    csibm1161: "cp1161",
    cp1162: {
      type: "_sbcs",
      chars: "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    ibm1162: "cp1162",
    csibm1162: "cp1162",
    cp1163: {
      type: "_sbcs",
      chars: " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    ibm1163: "cp1163",
    csibm1163: "cp1163",
    maccroatian: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
    },
    maccyrillic: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
    },
    macgreek: {
      type: "_sbcs",
      chars: "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
    },
    maciceland: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    macroman: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    macromania: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    macthai: {
      type: "_sbcs",
      chars: "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFEFF​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
    },
    macturkish: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
    },
    macukraine: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
    },
    koi8r: {
      type: "_sbcs",
      chars: "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    koi8u: {
      type: "_sbcs",
      chars: "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    koi8ru: {
      type: "_sbcs",
      chars: "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    koi8t: {
      type: "_sbcs",
      chars: "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    armscii8: {
      type: "_sbcs",
      chars: " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
    },
    rk1048: {
      type: "_sbcs",
      chars: "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    tcvn: {
      type: "_sbcs",
      chars: `\x00ÚỤ\x03ỪỬỮ\x07\b	
\v\f\r\x0E\x0F\x10ỨỰỲỶỸÝỴ\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ`
    },
    georgianacademy: {
      type: "_sbcs",
      chars: "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    georgianps: {
      type: "_sbcs",
      chars: "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    pt154: {
      type: "_sbcs",
      chars: "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    viscii: {
      type: "_sbcs",
      chars: `\x00\x01Ẳ\x03\x04ẴẪ\x07\b	
\v\f\r\x0E\x0F\x10\x11\x12\x13Ỷ\x15\x16\x17\x18Ỹ\x1A\x1B\x1C\x1DỴ\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ`
    },
    iso646cn: {
      type: "_sbcs",
      chars: `\x00\x01\x02\x03\x04\x05\x06\x07\b	
\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������`
    },
    iso646jp: {
      type: "_sbcs",
      chars: `\x00\x01\x02\x03\x04\x05\x06\x07\b	
\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_\`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������`
    },
    hproman8: {
      type: "_sbcs",
      chars: " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
    },
    macintosh: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    ascii: {
      type: "_sbcs",
      chars: "��������������������������������������������������������������������������������������������������������������������������������"
    },
    tis620: {
      type: "_sbcs",
      chars: "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    }
  };
});

// node_modules/iconv-lite/encodings/dbcs-codec.js
var require_dbcs_codec = __commonJS((exports2) => {
  var Buffer2 = require_safer().Buffer;
  exports2._dbcs = DBCSCodec;
  var UNASSIGNED = -1;
  var GB18030_CODE = -2;
  var SEQ_START = -10;
  var NODE_START = -1000;
  var UNASSIGNED_NODE = new Array(256);
  var DEF_CHAR = -1;
  for (i2 = 0;i2 < 256; i2++)
    UNASSIGNED_NODE[i2] = UNASSIGNED;
  var i2;
  function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions)
      throw new Error("DBCS codec is called without the data.");
    if (!codecOptions.table)
      throw new Error("Encoding '" + this.encodingName + "' has no data.");
    var mappingTable = codecOptions.table();
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0);
    this.decodeTableSeq = [];
    for (var i3 = 0;i3 < mappingTable.length; i3++)
      this._addDecodeChunk(mappingTable[i3]);
    if (typeof codecOptions.gb18030 === "function") {
      this.gb18030 = codecOptions.gb18030();
      var commonThirdByteNodeIdx = this.decodeTables.length;
      this.decodeTables.push(UNASSIGNED_NODE.slice(0));
      var commonFourthByteNodeIdx = this.decodeTables.length;
      this.decodeTables.push(UNASSIGNED_NODE.slice(0));
      var firstByteNode = this.decodeTables[0];
      for (var i3 = 129;i3 <= 254; i3++) {
        var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i3]];
        for (var j = 48;j <= 57; j++) {
          if (secondByteNode[j] === UNASSIGNED) {
            secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
          } else if (secondByteNode[j] > NODE_START) {
            throw new Error("gb18030 decode tables conflict at byte 2");
          }
          var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];
          for (var k = 129;k <= 254; k++) {
            if (thirdByteNode[k] === UNASSIGNED) {
              thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
            } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
              continue;
            } else if (thirdByteNode[k] > NODE_START) {
              throw new Error("gb18030 decode tables conflict at byte 3");
            }
            var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];
            for (var l = 48;l <= 57; l++) {
              if (fourthByteNode[l] === UNASSIGNED)
                fourthByteNode[l] = GB18030_CODE;
            }
          }
        }
      }
    }
    this.defaultCharUnicode = iconv.defaultCharUnicode;
    this.encodeTable = [];
    this.encodeTableSeq = [];
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals)
      for (var i3 = 0;i3 < codecOptions.encodeSkipVals.length; i3++) {
        var val = codecOptions.encodeSkipVals[i3];
        if (typeof val === "number")
          skipEncodeChars[val] = true;
        else
          for (var j = val.from;j <= val.to; j++)
            skipEncodeChars[j] = true;
      }
    this._fillEncodeTable(0, 0, skipEncodeChars);
    if (codecOptions.encodeAdd) {
      for (var uChar in codecOptions.encodeAdd)
        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
          this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }
    this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = this.encodeTable[0]["?"];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = 63;
  }
  DBCSCodec.prototype.encoder = DBCSEncoder;
  DBCSCodec.prototype.decoder = DBCSDecoder;
  DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
    var bytes = [];
    for (;addr > 0; addr >>>= 8)
      bytes.push(addr & 255);
    if (bytes.length == 0)
      bytes.push(0);
    var node = this.decodeTables[0];
    for (var i3 = bytes.length - 1;i3 > 0; i3--) {
      var val = node[bytes[i3]];
      if (val == UNASSIGNED) {
        node[bytes[i3]] = NODE_START - this.decodeTables.length;
        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
      } else if (val <= NODE_START) {
        node = this.decodeTables[NODE_START - val];
      } else
        throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
  };
  DBCSCodec.prototype._addDecodeChunk = function(chunk) {
    var curAddr = parseInt(chunk[0], 16);
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 255;
    for (var k = 1;k < chunk.length; k++) {
      var part = chunk[k];
      if (typeof part === "string") {
        for (var l = 0;l < part.length; ) {
          var code2 = part.charCodeAt(l++);
          if (55296 <= code2 && code2 < 56320) {
            var codeTrail = part.charCodeAt(l++);
            if (56320 <= codeTrail && codeTrail < 57344)
              writeTable[curAddr++] = 65536 + (code2 - 55296) * 1024 + (codeTrail - 56320);
            else
              throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
          } else if (4080 < code2 && code2 <= 4095) {
            var len = 4095 - code2 + 2;
            var seq = [];
            for (var m = 0;m < len; m++)
              seq.push(part.charCodeAt(l++));
            writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
            this.decodeTableSeq.push(seq);
          } else
            writeTable[curAddr++] = code2;
        }
      } else if (typeof part === "number") {
        var charCode = writeTable[curAddr - 1] + 1;
        for (var l = 0;l < part; l++)
          writeTable[curAddr++] = charCode++;
      } else
        throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 255)
      throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
  };
  DBCSCodec.prototype._getEncodeBucket = function(uCode) {
    var high = uCode >> 8;
    if (this.encodeTable[high] === undefined)
      this.encodeTable[high] = UNASSIGNED_NODE.slice(0);
    return this.encodeTable[high];
  };
  DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    if (bucket[low] <= SEQ_START)
      this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;
    else if (bucket[low] == UNASSIGNED)
      bucket[low] = dbcsCode;
  };
  DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    var node;
    if (bucket[low] <= SEQ_START) {
      node = this.encodeTableSeq[SEQ_START - bucket[low]];
    } else {
      node = {};
      if (bucket[low] !== UNASSIGNED)
        node[DEF_CHAR] = bucket[low];
      bucket[low] = SEQ_START - this.encodeTableSeq.length;
      this.encodeTableSeq.push(node);
    }
    for (var j = 1;j < seq.length - 1; j++) {
      var oldVal = node[uCode];
      if (typeof oldVal === "object")
        node = oldVal;
      else {
        node = node[uCode] = {};
        if (oldVal !== undefined)
          node[DEF_CHAR] = oldVal;
      }
    }
    uCode = seq[seq.length - 1];
    node[uCode] = dbcsCode;
  };
  DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    var hasValues = false;
    var subNodeEmpty = {};
    for (var i3 = 0;i3 < 256; i3++) {
      var uCode = node[i3];
      var mbCode = prefix + i3;
      if (skipEncodeChars[mbCode])
        continue;
      if (uCode >= 0) {
        this._setEncodeChar(uCode, mbCode);
        hasValues = true;
      } else if (uCode <= NODE_START) {
        var subNodeIdx = NODE_START - uCode;
        if (!subNodeEmpty[subNodeIdx]) {
          var newPrefix = mbCode << 8 >>> 0;
          if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars))
            hasValues = true;
          else
            subNodeEmpty[subNodeIdx] = true;
        }
      } else if (uCode <= SEQ_START) {
        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
        hasValues = true;
      }
    }
    return hasValues;
  };
  function DBCSEncoder(options, codec) {
    this.leadSurrogate = -1;
    this.seqObj = undefined;
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
  }
  DBCSEncoder.prototype.write = function(str) {
    var newBuf = Buffer2.alloc(str.length * (this.gb18030 ? 4 : 3)), leadSurrogate = this.leadSurrogate, seqObj = this.seqObj, nextChar = -1, i3 = 0, j = 0;
    while (true) {
      if (nextChar === -1) {
        if (i3 == str.length)
          break;
        var uCode = str.charCodeAt(i3++);
      } else {
        var uCode = nextChar;
        nextChar = -1;
      }
      if (55296 <= uCode && uCode < 57344) {
        if (uCode < 56320) {
          if (leadSurrogate === -1) {
            leadSurrogate = uCode;
            continue;
          } else {
            leadSurrogate = uCode;
            uCode = UNASSIGNED;
          }
        } else {
          if (leadSurrogate !== -1) {
            uCode = 65536 + (leadSurrogate - 55296) * 1024 + (uCode - 56320);
            leadSurrogate = -1;
          } else {
            uCode = UNASSIGNED;
          }
        }
      } else if (leadSurrogate !== -1) {
        nextChar = uCode;
        uCode = UNASSIGNED;
        leadSurrogate = -1;
      }
      var dbcsCode = UNASSIGNED;
      if (seqObj !== undefined && uCode != UNASSIGNED) {
        var resCode = seqObj[uCode];
        if (typeof resCode === "object") {
          seqObj = resCode;
          continue;
        } else if (typeof resCode == "number") {
          dbcsCode = resCode;
        } else if (resCode == undefined) {
          resCode = seqObj[DEF_CHAR];
          if (resCode !== undefined) {
            dbcsCode = resCode;
            nextChar = uCode;
          } else {}
        }
        seqObj = undefined;
      } else if (uCode >= 0) {
        var subtable = this.encodeTable[uCode >> 8];
        if (subtable !== undefined)
          dbcsCode = subtable[uCode & 255];
        if (dbcsCode <= SEQ_START) {
          seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
          continue;
        }
        if (dbcsCode == UNASSIGNED && this.gb18030) {
          var idx = findIdx(this.gb18030.uChars, uCode);
          if (idx != -1) {
            var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
            newBuf[j++] = 129 + Math.floor(dbcsCode / 12600);
            dbcsCode = dbcsCode % 12600;
            newBuf[j++] = 48 + Math.floor(dbcsCode / 1260);
            dbcsCode = dbcsCode % 1260;
            newBuf[j++] = 129 + Math.floor(dbcsCode / 10);
            dbcsCode = dbcsCode % 10;
            newBuf[j++] = 48 + dbcsCode;
            continue;
          }
        }
      }
      if (dbcsCode === UNASSIGNED)
        dbcsCode = this.defaultCharSingleByte;
      if (dbcsCode < 256) {
        newBuf[j++] = dbcsCode;
      } else if (dbcsCode < 65536) {
        newBuf[j++] = dbcsCode >> 8;
        newBuf[j++] = dbcsCode & 255;
      } else if (dbcsCode < 16777216) {
        newBuf[j++] = dbcsCode >> 16;
        newBuf[j++] = dbcsCode >> 8 & 255;
        newBuf[j++] = dbcsCode & 255;
      } else {
        newBuf[j++] = dbcsCode >>> 24;
        newBuf[j++] = dbcsCode >>> 16 & 255;
        newBuf[j++] = dbcsCode >>> 8 & 255;
        newBuf[j++] = dbcsCode & 255;
      }
    }
    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.end = function() {
    if (this.leadSurrogate === -1 && this.seqObj === undefined)
      return;
    var newBuf = Buffer2.alloc(10), j = 0;
    if (this.seqObj) {
      var dbcsCode = this.seqObj[DEF_CHAR];
      if (dbcsCode !== undefined) {
        if (dbcsCode < 256) {
          newBuf[j++] = dbcsCode;
        } else {
          newBuf[j++] = dbcsCode >> 8;
          newBuf[j++] = dbcsCode & 255;
        }
      } else {}
      this.seqObj = undefined;
    }
    if (this.leadSurrogate !== -1) {
      newBuf[j++] = this.defaultCharSingleByte;
      this.leadSurrogate = -1;
    }
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.findIdx = findIdx;
  function DBCSDecoder(options, codec) {
    this.nodeIdx = 0;
    this.prevBytes = [];
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
  }
  DBCSDecoder.prototype.write = function(buf) {
    var newBuf = Buffer2.alloc(buf.length * 2), nodeIdx = this.nodeIdx, prevBytes = this.prevBytes, prevOffset = this.prevBytes.length, seqStart = -this.prevBytes.length, uCode;
    for (var i3 = 0, j = 0;i3 < buf.length; i3++) {
      var curByte = i3 >= 0 ? buf[i3] : prevBytes[i3 + prevOffset];
      var uCode = this.decodeTables[nodeIdx][curByte];
      if (uCode >= 0) {} else if (uCode === UNASSIGNED) {
        uCode = this.defaultCharUnicode.charCodeAt(0);
        i3 = seqStart;
      } else if (uCode === GB18030_CODE) {
        if (i3 >= 3) {
          var ptr = (buf[i3 - 3] - 129) * 12600 + (buf[i3 - 2] - 48) * 1260 + (buf[i3 - 1] - 129) * 10 + (curByte - 48);
        } else {
          var ptr = (prevBytes[i3 - 3 + prevOffset] - 129) * 12600 + ((i3 - 2 >= 0 ? buf[i3 - 2] : prevBytes[i3 - 2 + prevOffset]) - 48) * 1260 + ((i3 - 1 >= 0 ? buf[i3 - 1] : prevBytes[i3 - 1 + prevOffset]) - 129) * 10 + (curByte - 48);
        }
        var idx = findIdx(this.gb18030.gbChars, ptr);
        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
      } else if (uCode <= NODE_START) {
        nodeIdx = NODE_START - uCode;
        continue;
      } else if (uCode <= SEQ_START) {
        var seq = this.decodeTableSeq[SEQ_START - uCode];
        for (var k = 0;k < seq.length - 1; k++) {
          uCode = seq[k];
          newBuf[j++] = uCode & 255;
          newBuf[j++] = uCode >> 8;
        }
        uCode = seq[seq.length - 1];
      } else
        throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
      if (uCode >= 65536) {
        uCode -= 65536;
        var uCodeLead = 55296 | uCode >> 10;
        newBuf[j++] = uCodeLead & 255;
        newBuf[j++] = uCodeLead >> 8;
        uCode = 56320 | uCode & 1023;
      }
      newBuf[j++] = uCode & 255;
      newBuf[j++] = uCode >> 8;
      nodeIdx = 0;
      seqStart = i3 + 1;
    }
    this.nodeIdx = nodeIdx;
    this.prevBytes = seqStart >= 0 ? Array.prototype.slice.call(buf, seqStart) : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));
    return newBuf.slice(0, j).toString("ucs2");
  };
  DBCSDecoder.prototype.end = function() {
    var ret = "";
    while (this.prevBytes.length > 0) {
      ret += this.defaultCharUnicode;
      var bytesArr = this.prevBytes.slice(1);
      this.prevBytes = [];
      this.nodeIdx = 0;
      if (bytesArr.length > 0)
        ret += this.write(bytesArr);
    }
    this.prevBytes = [];
    this.nodeIdx = 0;
    return ret;
  };
  function findIdx(table, val) {
    if (table[0] > val)
      return -1;
    var l = 0, r = table.length;
    while (l < r - 1) {
      var mid = l + (r - l + 1 >> 1);
      if (table[mid] <= val)
        l = mid;
      else
        r = mid;
    }
    return l;
  }
});

// node_modules/iconv-lite/encodings/tables/shiftjis.json
var require_shiftjis = __commonJS((exports2, module2) => {
  module2.exports = [
    ["0", "\x00", 128],
    ["a1", "｡", 62],
    ["8140", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×"],
    ["8180", "÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],
    ["81b8", "∈∋⊆⊇⊂⊃∪∩"],
    ["81c8", "∧∨￢⇒⇔∀∃"],
    ["81da", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
    ["81f0", "Å‰♯♭♪†‡¶"],
    ["81fc", "◯"],
    ["824f", "０", 9],
    ["8260", "Ａ", 25],
    ["8281", "ａ", 25],
    ["829f", "ぁ", 82],
    ["8340", "ァ", 62],
    ["8380", "ム", 22],
    ["839f", "Α", 16, "Σ", 6],
    ["83bf", "α", 16, "σ", 6],
    ["8440", "А", 5, "ЁЖ", 25],
    ["8470", "а", 5, "ёж", 7],
    ["8480", "о", 17],
    ["849f", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
    ["8740", "①", 19, "Ⅰ", 9],
    ["875f", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
    ["877e", "㍻"],
    ["8780", "〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
    ["889f", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
    ["8940", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],
    ["8980", "園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
    ["8a40", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],
    ["8a80", "橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
    ["8b40", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],
    ["8b80", "朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
    ["8c40", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],
    ["8c80", "劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
    ["8d40", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],
    ["8d80", "項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
    ["8e40", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],
    ["8e80", "死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
    ["8f40", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],
    ["8f80", "準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
    ["9040", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],
    ["9080", "逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
    ["9140", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],
    ["9180", "操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
    ["9240", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],
    ["9280", "逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
    ["9340", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],
    ["9380", "凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
    ["9440", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],
    ["9480", "楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
    ["9540", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],
    ["9580", "斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
    ["9640", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],
    ["9680", "摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
    ["9740", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],
    ["9780", "沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
    ["9840", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
    ["989f", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
    ["9940", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],
    ["9980", "凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
    ["9a40", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],
    ["9a80", "噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
    ["9b40", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],
    ["9b80", "它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
    ["9c40", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],
    ["9c80", "怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
    ["9d40", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],
    ["9d80", "捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
    ["9e40", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],
    ["9e80", "梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
    ["9f40", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],
    ["9f80", "麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
    ["e040", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],
    ["e080", "烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
    ["e140", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],
    ["e180", "痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
    ["e240", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],
    ["e280", "窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
    ["e340", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],
    ["e380", "縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
    ["e440", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],
    ["e480", "艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
    ["e540", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],
    ["e580", "蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
    ["e640", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],
    ["e680", "諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
    ["e740", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],
    ["e780", "轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
    ["e840", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],
    ["e880", "閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
    ["e940", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],
    ["e980", "騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
    ["ea40", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],
    ["ea80", "黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],
    ["ed40", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],
    ["ed80", "塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
    ["ee40", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],
    ["ee80", "蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
    ["eeef", "ⅰ", 9, "￢￤＇＂"],
    ["f040", "", 62],
    ["f080", "", 124],
    ["f140", "", 62],
    ["f180", "", 124],
    ["f240", "", 62],
    ["f280", "", 124],
    ["f340", "", 62],
    ["f380", "", 124],
    ["f440", "", 62],
    ["f480", "", 124],
    ["f540", "", 62],
    ["f580", "", 124],
    ["f640", "", 62],
    ["f680", "", 124],
    ["f740", "", 62],
    ["f780", "", 124],
    ["f840", "", 62],
    ["f880", "", 124],
    ["f940", ""],
    ["fa40", "ⅰ", 9, "Ⅰ", 9, "￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],
    ["fa80", "兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],
    ["fb40", "涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],
    ["fb80", "祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],
    ["fc40", "髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]
  ];
});

// node_modules/iconv-lite/encodings/tables/eucjp.json
var require_eucjp = __commonJS((exports2, module2) => {
  module2.exports = [
    ["0", "\x00", 127],
    ["8ea1", "｡", 62],
    ["a1a1", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],
    ["a2a1", "◆□■△▲▽▼※〒→←↑↓〓"],
    ["a2ba", "∈∋⊆⊇⊂⊃∪∩"],
    ["a2ca", "∧∨￢⇒⇔∀∃"],
    ["a2dc", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
    ["a2f2", "Å‰♯♭♪†‡¶"],
    ["a2fe", "◯"],
    ["a3b0", "０", 9],
    ["a3c1", "Ａ", 25],
    ["a3e1", "ａ", 25],
    ["a4a1", "ぁ", 82],
    ["a5a1", "ァ", 85],
    ["a6a1", "Α", 16, "Σ", 6],
    ["a6c1", "α", 16, "σ", 6],
    ["a7a1", "А", 5, "ЁЖ", 25],
    ["a7d1", "а", 5, "ёж", 25],
    ["a8a1", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
    ["ada1", "①", 19, "Ⅰ", 9],
    ["adc0", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
    ["addf", "㍻〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
    ["b0a1", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
    ["b1a1", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],
    ["b2a1", "押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
    ["b3a1", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],
    ["b4a1", "粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
    ["b5a1", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],
    ["b6a1", "供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
    ["b7a1", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],
    ["b8a1", "検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
    ["b9a1", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],
    ["baa1", "此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
    ["bba1", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],
    ["bca1", "次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
    ["bda1", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],
    ["bea1", "勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
    ["bfa1", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],
    ["c0a1", "澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
    ["c1a1", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],
    ["c2a1", "臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
    ["c3a1", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],
    ["c4a1", "帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
    ["c5a1", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],
    ["c6a1", "董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
    ["c7a1", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],
    ["c8a1", "函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
    ["c9a1", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],
    ["caa1", "福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
    ["cba1", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],
    ["cca1", "漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
    ["cda1", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],
    ["cea1", "痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
    ["cfa1", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
    ["d0a1", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
    ["d1a1", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],
    ["d2a1", "辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
    ["d3a1", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],
    ["d4a1", "圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
    ["d5a1", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],
    ["d6a1", "屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
    ["d7a1", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],
    ["d8a1", "悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
    ["d9a1", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],
    ["daa1", "據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
    ["dba1", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],
    ["dca1", "棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
    ["dda1", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],
    ["dea1", "沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
    ["dfa1", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],
    ["e0a1", "燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
    ["e1a1", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],
    ["e2a1", "癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
    ["e3a1", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],
    ["e4a1", "筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
    ["e5a1", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],
    ["e6a1", "罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
    ["e7a1", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],
    ["e8a1", "茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
    ["e9a1", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],
    ["eaa1", "蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
    ["eba1", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],
    ["eca1", "譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
    ["eda1", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],
    ["eea1", "遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
    ["efa1", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],
    ["f0a1", "陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
    ["f1a1", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],
    ["f2a1", "髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
    ["f3a1", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],
    ["f4a1", "堯槇遙瑤凜熙"],
    ["f9a1", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],
    ["faa1", "忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
    ["fba1", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],
    ["fca1", "釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
    ["fcf1", "ⅰ", 9, "￢￤＇＂"],
    ["8fa2af", "˘ˇ¸˙˝¯˛˚～΄΅"],
    ["8fa2c2", "¡¦¿"],
    ["8fa2eb", "ºª©®™¤№"],
    ["8fa6e1", "ΆΈΉΊΪ"],
    ["8fa6e7", "Ό"],
    ["8fa6e9", "ΎΫ"],
    ["8fa6ec", "Ώ"],
    ["8fa6f1", "άέήίϊΐόςύϋΰώ"],
    ["8fa7c2", "Ђ", 10, "ЎЏ"],
    ["8fa7f2", "ђ", 10, "ўџ"],
    ["8fa9a1", "ÆĐ"],
    ["8fa9a4", "Ħ"],
    ["8fa9a6", "Ĳ"],
    ["8fa9a8", "ŁĿ"],
    ["8fa9ab", "ŊØŒ"],
    ["8fa9af", "ŦÞ"],
    ["8fa9c1", "æđðħıĳĸłŀŉŋøœßŧþ"],
    ["8faaa1", "ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],
    ["8faaba", "ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],
    ["8faba1", "áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],
    ["8fabbd", "ġĥíìïîǐ"],
    ["8fabc5", "īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],
    ["8fb0a1", "丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],
    ["8fb1a1", "侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],
    ["8fb2a1", "傒傓傔傖傛傜傞", 4, "傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],
    ["8fb3a1", "凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],
    ["8fb4a1", "匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],
    ["8fb5a1", "咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],
    ["8fb6a1", "嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍", 5, "嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤", 4, "囱囫园"],
    ["8fb7a1", "囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭", 4, "坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],
    ["8fb8a1", "堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],
    ["8fb9a1", "奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],
    ["8fbaa1", "嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖", 4, "寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],
    ["8fbba1", "屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],
    ["8fbca1", "巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪", 4, "幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],
    ["8fbda1", "彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐", 4, "忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],
    ["8fbea1", "悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐", 4, "愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],
    ["8fbfa1", "懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],
    ["8fc0a1", "捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],
    ["8fc1a1", "擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],
    ["8fc2a1", "昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],
    ["8fc3a1", "杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮", 4, "桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],
    ["8fc4a1", "棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],
    ["8fc5a1", "樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],
    ["8fc6a1", "歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],
    ["8fc7a1", "泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],
    ["8fc8a1", "湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],
    ["8fc9a1", "濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔", 4, "炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃", 4, "焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],
    ["8fcaa1", "煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],
    ["8fcba1", "狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],
    ["8fcca1", "珿琀琁琄琇琊琑琚琛琤琦琨", 9, "琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],
    ["8fcda1", "甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹", 5, "疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],
    ["8fcea1", "瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢", 6, "皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],
    ["8fcfa1", "睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],
    ["8fd0a1", "碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],
    ["8fd1a1", "秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],
    ["8fd2a1", "笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙", 5],
    ["8fd3a1", "籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],
    ["8fd4a1", "綞綦綧綪綳綶綷綹緂", 4, "緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],
    ["8fd5a1", "罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],
    ["8fd6a1", "胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],
    ["8fd7a1", "艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],
    ["8fd8a1", "荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],
    ["8fd9a1", "蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏", 4, "蕖蕙蕜", 6, "蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],
    ["8fdaa1", "藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠", 4, "虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],
    ["8fdba1", "蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃", 6, "螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],
    ["8fdca1", "蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊", 4, "裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],
    ["8fdda1", "襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔", 4, "觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],
    ["8fdea1", "誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂", 4, "譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],
    ["8fdfa1", "貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],
    ["8fe0a1", "踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],
    ["8fe1a1", "轃轇轏轑", 4, "轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],
    ["8fe2a1", "郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],
    ["8fe3a1", "釂釃釅釓釔釗釙釚釞釤釥釩釪釬", 5, "釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵", 4, "鉻鉼鉽鉿銈銉銊銍銎銒銗"],
    ["8fe4a1", "銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿", 4, "鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],
    ["8fe5a1", "鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉", 4, "鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],
    ["8fe6a1", "镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],
    ["8fe7a1", "霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],
    ["8fe8a1", "頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱", 4, "餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],
    ["8fe9a1", "馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿", 4],
    ["8feaa1", "鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪", 4, "魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],
    ["8feba1", "鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦", 4, "鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],
    ["8feca1", "鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],
    ["8feda1", "黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃", 4, "齓齕齖齗齘齚齝齞齨齩齭", 4, "齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]
  ];
});

// node_modules/iconv-lite/encodings/tables/cp936.json
var require_cp936 = __commonJS((exports2, module2) => {
  module2.exports = [
    ["0", "\x00", 127, "€"],
    ["8140", "丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪", 5, "乲乴", 9, "乿", 6, "亇亊"],
    ["8180", "亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂", 6, "伋伌伒", 4, "伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾", 4, "佄佅佇", 5, "佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],
    ["8240", "侤侫侭侰", 4, "侶", 8, "俀俁係俆俇俈俉俋俌俍俒", 4, "俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿", 11],
    ["8280", "個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯", 10, "倻倽倿偀偁偂偄偅偆偉偊偋偍偐", 4, "偖偗偘偙偛偝", 7, "偦", 5, "偭", 8, "偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎", 20, "傤傦傪傫傭", 4, "傳", 6, "傼"],
    ["8340", "傽", 17, "僐", 5, "僗僘僙僛", 10, "僨僩僪僫僯僰僱僲僴僶", 4, "僼", 9, "儈"],
    ["8380", "儉儊儌", 5, "儓", 13, "儢", 28, "兂兇兊兌兎兏児兒兓兗兘兙兛兝", 4, "兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦", 4, "冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒", 5],
    ["8440", "凘凙凚凜凞凟凢凣凥", 5, "凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄", 5, "剋剎剏剒剓剕剗剘"],
    ["8480", "剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳", 9, "剾劀劃", 4, "劉", 6, "劑劒劔", 6, "劜劤劥劦劧劮劯劰労", 9, "勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務", 5, "勠勡勢勣勥", 10, "勱", 7, "勻勼勽匁匂匃匄匇匉匊匋匌匎"],
    ["8540", "匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯", 9, "匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],
    ["8580", "厐", 4, "厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯", 6, "厷厸厹厺厼厽厾叀參", 4, "収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝", 4, "呣呥呧呩", 7, "呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],
    ["8640", "咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠", 4, "哫哬哯哰哱哴", 5, "哻哾唀唂唃唄唅唈唊", 4, "唒唓唕", 5, "唜唝唞唟唡唥唦"],
    ["8680", "唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋", 4, "啑啒啓啔啗", 4, "啝啞啟啠啢啣啨啩啫啯", 5, "啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠", 6, "喨", 8, "喲喴営喸喺喼喿", 4, "嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗", 4, "嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸", 4, "嗿嘂嘃嘄嘅"],
    ["8740", "嘆嘇嘊嘋嘍嘐", 7, "嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀", 11, "噏", 4, "噕噖噚噛噝", 4],
    ["8780", "噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽", 7, "嚇", 6, "嚐嚑嚒嚔", 14, "嚤", 10, "嚰", 6, "嚸嚹嚺嚻嚽", 12, "囋", 8, "囕囖囘囙囜団囥", 5, "囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國", 6],
    ["8840", "園", 9, "圝圞圠圡圢圤圥圦圧圫圱圲圴", 4, "圼圽圿坁坃坄坅坆坈坉坋坒", 4, "坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],
    ["8880", "垁垇垈垉垊垍", 4, "垔", 6, "垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹", 8, "埄", 6, "埌埍埐埑埓埖埗埛埜埞埡埢埣埥", 7, "埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥", 4, "堫", 4, "報堲堳場堶", 7],
    ["8940", "堾", 5, "塅", 6, "塎塏塐塒塓塕塖塗塙", 4, "塟", 5, "塦", 4, "塭", 16, "塿墂墄墆墇墈墊墋墌"],
    ["8980", "墍", 4, "墔", 4, "墛墜墝墠", 7, "墪", 17, "墽墾墿壀壂壃壄壆", 10, "壒壓壔壖", 13, "壥", 5, "壭壯壱売壴壵壷壸壺", 7, "夃夅夆夈", 4, "夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],
    ["8a40", "夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛", 4, "奡奣奤奦", 12, "奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],
    ["8a80", "妧妬妭妰妱妳", 5, "妺妼妽妿", 6, "姇姈姉姌姍姎姏姕姖姙姛姞", 4, "姤姦姧姩姪姫姭", 11, "姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪", 6, "娳娵娷", 4, "娽娾娿婁", 4, "婇婈婋", 9, "婖婗婘婙婛", 5],
    ["8b40", "婡婣婤婥婦婨婩婫", 8, "婸婹婻婼婽婾媀", 17, "媓", 6, "媜", 13, "媫媬"],
    ["8b80", "媭", 4, "媴媶媷媹", 4, "媿嫀嫃", 5, "嫊嫋嫍", 4, "嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬", 4, "嫲", 22, "嬊", 11, "嬘", 25, "嬳嬵嬶嬸", 7, "孁", 6],
    ["8c40", "孈", 7, "孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],
    ["8c80", "寑寔", 8, "寠寢寣實寧審", 4, "寯寱", 6, "寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧", 6, "屰屲", 6, "屻屼屽屾岀岃", 4, "岉岊岋岎岏岒岓岕岝", 4, "岤", 4],
    ["8d40", "岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅", 5, "峌", 5, "峓", 5, "峚", 6, "峢峣峧峩峫峬峮峯峱", 9, "峼", 4],
    ["8d80", "崁崄崅崈", 5, "崏", 4, "崕崗崘崙崚崜崝崟", 4, "崥崨崪崫崬崯", 4, "崵", 7, "崿", 7, "嵈嵉嵍", 10, "嵙嵚嵜嵞", 10, "嵪嵭嵮嵰嵱嵲嵳嵵", 12, "嶃", 21, "嶚嶛嶜嶞嶟嶠"],
    ["8e40", "嶡", 21, "嶸", 12, "巆", 6, "巎", 12, "巜巟巠巣巤巪巬巭"],
    ["8e80", "巰巵巶巸", 4, "巿帀帄帇帉帊帋帍帎帒帓帗帞", 7, "帨", 4, "帯帰帲", 4, "帹帺帾帿幀幁幃幆", 5, "幍", 6, "幖", 4, "幜幝幟幠幣", 14, "幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨", 4, "庮", 4, "庴庺庻庼庽庿", 6],
    ["8f40", "廆廇廈廋", 5, "廔廕廗廘廙廚廜", 11, "廩廫", 8, "廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],
    ["8f80", "弨弫弬弮弰弲", 6, "弻弽弾弿彁", 14, "彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢", 5, "復徫徬徯", 5, "徶徸徹徺徻徾", 4, "忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],
    ["9040", "怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰", 4, "怶", 4, "怽怾恀恄", 6, "恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],
    ["9080", "悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽", 7, "惇惈惉惌", 4, "惒惓惔惖惗惙惛惞惡", 4, "惪惱惲惵惷惸惻", 4, "愂愃愄愅愇愊愋愌愐", 4, "愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬", 18, "慀", 6],
    ["9140", "慇慉態慍慏慐慒慓慔慖", 6, "慞慟慠慡慣慤慥慦慩", 6, "慱慲慳慴慶慸", 18, "憌憍憏", 4, "憕"],
    ["9180", "憖", 6, "憞", 8, "憪憫憭", 9, "憸", 5, "憿懀懁懃", 4, "應懌", 4, "懓懕", 16, "懧", 13, "懶", 8, "戀", 5, "戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸", 4, "扂扄扅扆扊"],
    ["9240", "扏扐払扖扗扙扚扜", 6, "扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋", 5, "抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],
    ["9280", "拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳", 5, "挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖", 7, "捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙", 6, "採掤掦掫掯掱掲掵掶掹掻掽掿揀"],
    ["9340", "揁揂揃揅揇揈揊揋揌揑揓揔揕揗", 6, "揟揢揤", 4, "揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆", 4, "損搎搑搒搕", 5, "搝搟搢搣搤"],
    ["9380", "搥搧搨搩搫搮", 5, "搵", 4, "搻搼搾摀摂摃摉摋", 6, "摓摕摖摗摙", 4, "摟", 7, "摨摪摫摬摮", 9, "摻", 6, "撃撆撈", 8, "撓撔撗撘撚撛撜撝撟", 4, "撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆", 6, "擏擑擓擔擕擖擙據"],
    ["9440", "擛擜擝擟擠擡擣擥擧", 24, "攁", 7, "攊", 7, "攓", 4, "攙", 8],
    ["9480", "攢攣攤攦", 4, "攬攭攰攱攲攳攷攺攼攽敀", 4, "敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數", 14, "斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱", 7, "斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘", 7, "旡旣旤旪旫"],
    ["9540", "旲旳旴旵旸旹旻", 4, "昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷", 4, "昽昿晀時晄", 6, "晍晎晐晑晘"],
    ["9580", "晙晛晜晝晞晠晢晣晥晧晩", 4, "晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘", 4, "暞", 8, "暩", 4, "暯", 4, "暵暶暷暸暺暻暼暽暿", 25, "曚曞", 7, "曧曨曪", 5, "曱曵曶書曺曻曽朁朂會"],
    ["9640", "朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠", 5, "朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗", 4, "杝杢杣杤杦杧杫杬杮東杴杶"],
    ["9680", "杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹", 7, "柂柅", 9, "柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵", 7, "柾栁栂栃栄栆栍栐栒栔栕栘", 4, "栞栟栠栢", 6, "栫", 6, "栴栵栶栺栻栿桇桋桍桏桒桖", 5],
    ["9740", "桜桝桞桟桪桬", 7, "桵桸", 8, "梂梄梇", 7, "梐梑梒梔梕梖梘", 9, "梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],
    ["9780", "梹", 6, "棁棃", 5, "棊棌棎棏棐棑棓棔棖棗棙棛", 4, "棡棢棤", 9, "棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆", 4, "椌椏椑椓", 11, "椡椢椣椥", 7, "椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃", 16, "楕楖楘楙楛楜楟"],
    ["9840", "楡楢楤楥楧楨楩楪楬業楯楰楲", 4, "楺楻楽楾楿榁榃榅榊榋榌榎", 5, "榖榗榙榚榝", 9, "榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],
    ["9880", "榾榿槀槂", 7, "構槍槏槑槒槓槕", 5, "槜槝槞槡", 11, "槮槯槰槱槳", 9, "槾樀", 9, "樋", 11, "標", 5, "樠樢", 5, "権樫樬樭樮樰樲樳樴樶", 6, "樿", 4, "橅橆橈", 7, "橑", 6, "橚"],
    ["9940", "橜", 4, "橢橣橤橦", 10, "橲", 6, "橺橻橽橾橿檁檂檃檅", 8, "檏檒", 4, "檘", 7, "檡", 5],
    ["9980", "檧檨檪檭", 114, "欥欦欨", 6],
    ["9a40", "欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍", 11, "歚", 7, "歨歩歫", 13, "歺歽歾歿殀殅殈"],
    ["9a80", "殌殎殏殐殑殔殕殗殘殙殜", 4, "殢", 7, "殫", 7, "殶殸", 6, "毀毃毄毆", 4, "毌毎毐毑毘毚毜", 4, "毢", 7, "毬毭毮毰毱毲毴毶毷毸毺毻毼毾", 6, "氈", 4, "氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋", 4, "汑汒汓汖汘"],
    ["9b40", "汙汚汢汣汥汦汧汫", 4, "汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],
    ["9b80", "泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟", 5, "洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽", 4, "涃涄涆涇涊涋涍涏涐涒涖", 4, "涜涢涥涬涭涰涱涳涴涶涷涹", 5, "淁淂淃淈淉淊"],
    ["9c40", "淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽", 7, "渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],
    ["9c80", "渶渷渹渻", 7, "湅", 7, "湏湐湑湒湕湗湙湚湜湝湞湠", 10, "湬湭湯", 14, "満溁溂溄溇溈溊", 4, "溑", 6, "溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪", 5],
    ["9d40", "滰滱滲滳滵滶滷滸滺", 7, "漃漄漅漇漈漊", 4, "漐漑漒漖", 9, "漡漢漣漥漦漧漨漬漮漰漲漴漵漷", 6, "漿潀潁潂"],
    ["9d80", "潃潄潅潈潉潊潌潎", 9, "潙潚潛潝潟潠潡潣潤潥潧", 5, "潯潰潱潳潵潶潷潹潻潽", 6, "澅澆澇澊澋澏", 12, "澝澞澟澠澢", 4, "澨", 10, "澴澵澷澸澺", 5, "濁濃", 5, "濊", 6, "濓", 10, "濟濢濣濤濥"],
    ["9e40", "濦", 7, "濰", 32, "瀒", 7, "瀜", 6, "瀤", 6],
    ["9e80", "瀫", 9, "瀶瀷瀸瀺", 17, "灍灎灐", 13, "灟", 11, "灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞", 12, "炰炲炴炵炶為炾炿烄烅烆烇烉烋", 12, "烚"],
    ["9f40", "烜烝烞烠烡烢烣烥烪烮烰", 6, "烸烺烻烼烾", 10, "焋", 4, "焑焒焔焗焛", 10, "焧", 7, "焲焳焴"],
    ["9f80", "焵焷", 13, "煆煇煈煉煋煍煏", 12, "煝煟", 4, "煥煩", 4, "煯煰煱煴煵煶煷煹煻煼煾", 5, "熅", 4, "熋熌熍熎熐熑熒熓熕熖熗熚", 4, "熡", 6, "熩熪熫熭", 5, "熴熶熷熸熺", 8, "燄", 9, "燏", 4],
    ["a040", "燖", 9, "燡燢燣燤燦燨", 5, "燯", 9, "燺", 11, "爇", 19],
    ["a080", "爛爜爞", 9, "爩爫爭爮爯爲爳爴爺爼爾牀", 6, "牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅", 4, "犌犎犐犑犓", 11, "犠", 11, "犮犱犲犳犵犺", 6, "狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],
    ["a1a1", "　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈", 7, "〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],
    ["a2a1", "ⅰ", 9],
    ["a2b1", "⒈", 19, "⑴", 19, "①", 9],
    ["a2e5", "㈠", 9],
    ["a2f1", "Ⅰ", 11],
    ["a3a1", "！＂＃￥％", 88, "￣"],
    ["a4a1", "ぁ", 82],
    ["a5a1", "ァ", 85],
    ["a6a1", "Α", 16, "Σ", 6],
    ["a6c1", "α", 16, "σ", 6],
    ["a6e0", "︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],
    ["a6ee", "︻︼︷︸︱"],
    ["a6f4", "︳︴"],
    ["a7a1", "А", 5, "ЁЖ", 25],
    ["a7d1", "а", 5, "ёж", 25],
    ["a840", "ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═", 35, "▁", 6],
    ["a880", "█", 7, "▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],
    ["a8a1", "āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],
    ["a8bd", "ńň"],
    ["a8c0", "ɡ"],
    ["a8c5", "ㄅ", 36],
    ["a940", "〡", 8, "㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],
    ["a959", "℡㈱"],
    ["a95c", "‐"],
    ["a960", "ー゛゜ヽヾ〆ゝゞ﹉", 9, "﹔﹕﹖﹗﹙", 8],
    ["a980", "﹢", 4, "﹨﹩﹪﹫"],
    ["a996", "〇"],
    ["a9a4", "─", 75],
    ["aa40", "狜狝狟狢", 5, "狪狫狵狶狹狽狾狿猀猂猄", 5, "猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀", 8],
    ["aa80", "獉獊獋獌獎獏獑獓獔獕獖獘", 7, "獡", 10, "獮獰獱"],
    ["ab40", "獲", 11, "獿", 4, "玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣", 5, "玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃", 4],
    ["ab80", "珋珌珎珒", 6, "珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳", 4],
    ["ac40", "珸", 10, "琄琇琈琋琌琍琎琑", 8, "琜", 5, "琣琤琧琩琫琭琯琱琲琷", 4, "琽琾琿瑀瑂", 11],
    ["ac80", "瑎", 6, "瑖瑘瑝瑠", 12, "瑮瑯瑱", 4, "瑸瑹瑺"],
    ["ad40", "瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑", 10, "璝璟", 7, "璪", 15, "璻", 12],
    ["ad80", "瓈", 9, "瓓", 8, "瓝瓟瓡瓥瓧", 6, "瓰瓱瓲"],
    ["ae40", "瓳瓵瓸", 6, "甀甁甂甃甅", 7, "甎甐甒甔甕甖甗甛甝甞甠", 4, "甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],
    ["ae80", "畝", 7, "畧畨畩畫", 6, "畳畵當畷畺", 4, "疀疁疂疄疅疇"],
    ["af40", "疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦", 4, "疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],
    ["af80", "瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],
    ["b040", "癅", 6, "癎", 5, "癕癗", 4, "癝癟癠癡癢癤", 6, "癬癭癮癰", 7, "癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],
    ["b080", "皜", 7, "皥", 8, "皯皰皳皵", 9, "盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],
    ["b140", "盄盇盉盋盌盓盕盙盚盜盝盞盠", 4, "盦", 7, "盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎", 10, "眛眜眝眞眡眣眤眥眧眪眫"],
    ["b180", "眬眮眰", 4, "眹眻眽眾眿睂睄睅睆睈", 7, "睒", 7, "睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],
    ["b240", "睝睞睟睠睤睧睩睪睭", 11, "睺睻睼瞁瞂瞃瞆", 5, "瞏瞐瞓", 11, "瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶", 4],
    ["b280", "瞼瞾矀", 12, "矎", 8, "矘矙矚矝", 4, "矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],
    ["b340", "矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃", 5, "砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],
    ["b380", "硛硜硞", 11, "硯", 7, "硸硹硺硻硽", 6, "场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],
    ["b440", "碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨", 7, "碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚", 9],
    ["b480", "磤磥磦磧磩磪磫磭", 4, "磳磵磶磸磹磻", 5, "礂礃礄礆", 6, "础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],
    ["b540", "礍", 5, "礔", 9, "礟", 4, "礥", 14, "礵", 4, "礽礿祂祃祄祅祇祊", 8, "祔祕祘祙祡祣"],
    ["b580", "祤祦祩祪祫祬祮祰", 6, "祹祻", 4, "禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],
    ["b640", "禓", 6, "禛", 11, "禨", 10, "禴", 4, "禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙", 5, "秠秡秢秥秨秪"],
    ["b680", "秬秮秱", 6, "秹秺秼秾秿稁稄稅稇稈稉稊稌稏", 4, "稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],
    ["b740", "稝稟稡稢稤", 14, "稴稵稶稸稺稾穀", 5, "穇", 9, "穒", 4, "穘", 16],
    ["b780", "穩", 6, "穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],
    ["b840", "窣窤窧窩窪窫窮", 4, "窴", 10, "竀", 10, "竌", 9, "竗竘竚竛竜竝竡竢竤竧", 5, "竮竰竱竲竳"],
    ["b880", "竴", 4, "竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],
    ["b940", "笯笰笲笴笵笶笷笹笻笽笿", 5, "筆筈筊筍筎筓筕筗筙筜筞筟筡筣", 10, "筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆", 6, "箎箏"],
    ["b980", "箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹", 7, "篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],
    ["ba40", "篅篈築篊篋篍篎篏篐篒篔", 4, "篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲", 4, "篸篹篺篻篽篿", 7, "簈簉簊簍簎簐", 5, "簗簘簙"],
    ["ba80", "簚", 4, "簠", 5, "簨簩簫", 12, "簹", 5, "籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],
    ["bb40", "籃", 9, "籎", 36, "籵", 5, "籾", 9],
    ["bb80", "粈粊", 6, "粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴", 4, "粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],
    ["bc40", "粿糀糂糃糄糆糉糋糎", 6, "糘糚糛糝糞糡", 6, "糩", 5, "糰", 7, "糹糺糼", 13, "紋", 5],
    ["bc80", "紑", 14, "紡紣紤紥紦紨紩紪紬紭紮細", 6, "肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],
    ["bd40", "紷", 54, "絯", 7],
    ["bd80", "絸", 32, "健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],
    ["be40", "継", 12, "綧", 6, "綯", 42],
    ["be80", "線", 32, "尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],
    ["bf40", "緻", 62],
    ["bf80", "縺縼", 4, "繂", 4, "繈", 21, "俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],
    ["c040", "繞", 35, "纃", 23, "纜纝纞"],
    ["c080", "纮纴纻纼绖绤绬绹缊缐缞缷缹缻", 6, "罃罆", 9, "罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],
    ["c140", "罖罙罛罜罝罞罠罣", 4, "罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂", 7, "羋羍羏", 4, "羕", 4, "羛羜羠羢羣羥羦羨", 6, "羱"],
    ["c180", "羳", 4, "羺羻羾翀翂翃翄翆翇翈翉翋翍翏", 4, "翖翗翙", 5, "翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],
    ["c240", "翤翧翨翪翫翬翭翯翲翴", 6, "翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫", 5, "耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],
    ["c280", "聙聛", 13, "聫", 5, "聲", 11, "隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],
    ["c340", "聾肁肂肅肈肊肍", 5, "肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇", 4, "胏", 6, "胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],
    ["c380", "脌脕脗脙脛脜脝脟", 12, "脭脮脰脳脴脵脷脹", 4, "脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],
    ["c440", "腀", 5, "腇腉腍腎腏腒腖腗腘腛", 4, "腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃", 4, "膉膋膌膍膎膐膒", 5, "膙膚膞", 4, "膤膥"],
    ["c480", "膧膩膫", 7, "膴", 5, "膼膽膾膿臄臅臇臈臉臋臍", 6, "摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],
    ["c540", "臔", 14, "臤臥臦臨臩臫臮", 4, "臵", 5, "臽臿舃與", 4, "舎舏舑舓舕", 5, "舝舠舤舥舦舧舩舮舲舺舼舽舿"],
    ["c580", "艀艁艂艃艅艆艈艊艌艍艎艐", 7, "艙艛艜艝艞艠", 7, "艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],
    ["c640", "艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],
    ["c680", "苺苼", 4, "茊茋茍茐茒茓茖茘茙茝", 9, "茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],
    ["c740", "茾茿荁荂荄荅荈荊", 4, "荓荕", 4, "荝荢荰", 6, "荹荺荾", 6, "莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡", 6, "莬莭莮"],
    ["c780", "莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],
    ["c840", "菮華菳", 4, "菺菻菼菾菿萀萂萅萇萈萉萊萐萒", 5, "萙萚萛萞", 5, "萩", 7, "萲", 5, "萹萺萻萾", 7, "葇葈葉"],
    ["c880", "葊", 6, "葒", 4, "葘葝葞葟葠葢葤", 4, "葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],
    ["c940", "葽", 4, "蒃蒄蒅蒆蒊蒍蒏", 7, "蒘蒚蒛蒝蒞蒟蒠蒢", 12, "蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],
    ["c980", "蓘", 4, "蓞蓡蓢蓤蓧", 4, "蓭蓮蓯蓱", 10, "蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],
    ["ca40", "蔃", 8, "蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢", 8, "蔭", 9, "蔾", 4, "蕄蕅蕆蕇蕋", 10],
    ["ca80", "蕗蕘蕚蕛蕜蕝蕟", 4, "蕥蕦蕧蕩", 8, "蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],
    ["cb40", "薂薃薆薈", 6, "薐", 10, "薝", 6, "薥薦薧薩薫薬薭薱", 5, "薸薺", 6, "藂", 6, "藊", 4, "藑藒"],
    ["cb80", "藔藖", 5, "藝", 6, "藥藦藧藨藪", 14, "恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],
    ["cc40", "藹藺藼藽藾蘀", 4, "蘆", 10, "蘒蘓蘔蘕蘗", 15, "蘨蘪", 13, "蘹蘺蘻蘽蘾蘿虀"],
    ["cc80", "虁", 11, "虒虓處", 4, "虛虜虝號虠虡虣", 7, "獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],
    ["cd40", "虭虯虰虲", 6, "蚃", 6, "蚎", 4, "蚔蚖", 5, "蚞", 4, "蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻", 4, "蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],
    ["cd80", "蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],
    ["ce40", "蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀", 6, "蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚", 5, "蝡蝢蝦", 7, "蝯蝱蝲蝳蝵"],
    ["ce80", "蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎", 4, "螔螕螖螘", 6, "螠", 4, "巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],
    ["cf40", "螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁", 4, "蟇蟈蟉蟌", 4, "蟔", 6, "蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯", 9],
    ["cf80", "蟺蟻蟼蟽蟿蠀蠁蠂蠄", 5, "蠋", 7, "蠔蠗蠘蠙蠚蠜", 4, "蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],
    ["d040", "蠤", 13, "蠳", 5, "蠺蠻蠽蠾蠿衁衂衃衆", 5, "衎", 5, "衕衖衘衚", 6, "衦衧衪衭衯衱衳衴衵衶衸衹衺"],
    ["d080", "衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗", 4, "袝", 4, "袣袥", 5, "小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],
    ["d140", "袬袮袯袰袲", 4, "袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚", 4, "裠裡裦裧裩", 6, "裲裵裶裷裺裻製裿褀褁褃", 5],
    ["d180", "褉褋", 4, "褑褔", 4, "褜", 4, "褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],
    ["d240", "褸", 8, "襂襃襅", 24, "襠", 5, "襧", 19, "襼"],
    ["d280", "襽襾覀覂覄覅覇", 26, "摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],
    ["d340", "覢", 30, "觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴", 6],
    ["d380", "觻", 4, "訁", 5, "計", 21, "印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],
    ["d440", "訞", 31, "訿", 8, "詉", 21],
    ["d480", "詟", 25, "詺", 6, "浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],
    ["d540", "誁", 7, "誋", 7, "誔", 46],
    ["d580", "諃", 32, "铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],
    ["d640", "諤", 34, "謈", 27],
    ["d680", "謤謥謧", 30, "帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],
    ["d740", "譆", 31, "譧", 4, "譭", 25],
    ["d780", "讇", 24, "讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],
    ["d840", "谸", 8, "豂豃豄豅豈豊豋豍", 7, "豖豗豘豙豛", 5, "豣", 6, "豬", 6, "豴豵豶豷豻", 6, "貃貄貆貇"],
    ["d880", "貈貋貍", 6, "貕貖貗貙", 20, "亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],
    ["d940", "貮", 62],
    ["d980", "賭", 32, "佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],
    ["da40", "贎", 14, "贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸", 8, "趂趃趆趇趈趉趌", 4, "趒趓趕", 9, "趠趡"],
    ["da80", "趢趤", 12, "趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],
    ["db40", "跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾", 6, "踆踇踈踋踍踎踐踑踒踓踕", 7, "踠踡踤", 4, "踫踭踰踲踳踴踶踷踸踻踼踾"],
    ["db80", "踿蹃蹅蹆蹌", 4, "蹓", 5, "蹚", 11, "蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],
    ["dc40", "蹳蹵蹷", 4, "蹽蹾躀躂躃躄躆躈", 6, "躑躒躓躕", 6, "躝躟", 11, "躭躮躰躱躳", 6, "躻", 7],
    ["dc80", "軃", 10, "軏", 21, "堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],
    ["dd40", "軥", 62],
    ["dd80", "輤", 32, "荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],
    ["de40", "轅", 32, "轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],
    ["de80", "迉", 4, "迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],
    ["df40", "這逜連逤逥逧", 5, "逰", 4, "逷逹逺逽逿遀遃遅遆遈", 4, "過達違遖遙遚遜", 5, "遤遦遧適遪遫遬遯", 4, "遶", 6, "遾邁"],
    ["df80", "還邅邆邇邉邊邌", 4, "邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],
    ["e040", "郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅", 19, "鄚鄛鄜"],
    ["e080", "鄝鄟鄠鄡鄤", 10, "鄰鄲", 6, "鄺", 8, "酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],
    ["e140", "酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀", 4, "醆醈醊醎醏醓", 6, "醜", 5, "醤", 5, "醫醬醰醱醲醳醶醷醸醹醻"],
    ["e180", "醼", 10, "釈釋釐釒", 9, "針", 8, "帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],
    ["e240", "釦", 62],
    ["e280", "鈥", 32, "狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧", 5, "饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],
    ["e340", "鉆", 45, "鉵", 16],
    ["e380", "銆", 7, "銏", 24, "恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],
    ["e440", "銨", 5, "銯", 24, "鋉", 31],
    ["e480", "鋩", 32, "洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],
    ["e540", "錊", 51, "錿", 10],
    ["e580", "鍊", 31, "鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],
    ["e640", "鍬", 34, "鎐", 27],
    ["e680", "鎬", 29, "鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],
    ["e740", "鏎", 7, "鏗", 54],
    ["e780", "鐎", 32, "纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡", 6, "缪缫缬缭缯", 4, "缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],
    ["e840", "鐯", 14, "鐿", 43, "鑬鑭鑮鑯"],
    ["e880", "鑰", 20, "钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],
    ["e940", "锧锳锽镃镈镋镕镚镠镮镴镵長", 7, "門", 42],
    ["e980", "閫", 32, "椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],
    ["ea40", "闌", 27, "闬闿阇阓阘阛阞阠阣", 6, "阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],
    ["ea80", "陘陙陚陜陝陞陠陣陥陦陫陭", 4, "陳陸", 12, "隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],
    ["eb40", "隌階隑隒隓隕隖隚際隝", 9, "隨", 7, "隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖", 9, "雡", 6, "雫"],
    ["eb80", "雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗", 4, "霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],
    ["ec40", "霡", 8, "霫霬霮霯霱霳", 4, "霺霻霼霽霿", 18, "靔靕靗靘靚靜靝靟靣靤靦靧靨靪", 7],
    ["ec80", "靲靵靷", 4, "靽", 7, "鞆", 4, "鞌鞎鞏鞐鞓鞕鞖鞗鞙", 4, "臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],
    ["ed40", "鞞鞟鞡鞢鞤", 6, "鞬鞮鞰鞱鞳鞵", 46],
    ["ed80", "韤韥韨韮", 4, "韴韷", 23, "怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],
    ["ee40", "頏", 62],
    ["ee80", "顎", 32, "睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶", 4, "钼钽钿铄铈", 6, "铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],
    ["ef40", "顯", 5, "颋颎颒颕颙颣風", 37, "飏飐飔飖飗飛飜飝飠", 4],
    ["ef80", "飥飦飩", 30, "铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒", 4, "锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤", 8, "镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],
    ["f040", "餈", 4, "餎餏餑", 28, "餯", 26],
    ["f080", "饊", 9, "饖", 12, "饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨", 4, "鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦", 6, "鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],
    ["f140", "馌馎馚", 10, "馦馧馩", 47],
    ["f180", "駙", 32, "瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],
    ["f240", "駺", 62],
    ["f280", "騹", 32, "颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],
    ["f340", "驚", 17, "驲骃骉骍骎骔骕骙骦骩", 6, "骲骳骴骵骹骻骽骾骿髃髄髆", 4, "髍髎髏髐髒體髕髖髗髙髚髛髜"],
    ["f380", "髝髞髠髢髣髤髥髧髨髩髪髬髮髰", 8, "髺髼", 6, "鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],
    ["f440", "鬇鬉", 5, "鬐鬑鬒鬔", 10, "鬠鬡鬢鬤", 10, "鬰鬱鬳", 7, "鬽鬾鬿魀魆魊魋魌魎魐魒魓魕", 5],
    ["f480", "魛", 32, "簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],
    ["f540", "魼", 62],
    ["f580", "鮻", 32, "酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],
    ["f640", "鯜", 62],
    ["f680", "鰛", 32, "觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅", 5, "龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞", 5, "鲥", 4, "鲫鲭鲮鲰", 7, "鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],
    ["f740", "鰼", 62],
    ["f780", "鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾", 4, "鳈鳉鳑鳒鳚鳛鳠鳡鳌", 4, "鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],
    ["f840", "鳣", 62],
    ["f880", "鴢", 32],
    ["f940", "鵃", 62],
    ["f980", "鶂", 32],
    ["fa40", "鶣", 62],
    ["fa80", "鷢", 32],
    ["fb40", "鸃", 27, "鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴", 9, "麀"],
    ["fb80", "麁麃麄麅麆麉麊麌", 5, "麔", 8, "麞麠", 5, "麧麨麩麪"],
    ["fc40", "麫", 8, "麵麶麷麹麺麼麿", 4, "黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰", 8, "黺黽黿", 6],
    ["fc80", "鼆", 4, "鼌鼏鼑鼒鼔鼕鼖鼘鼚", 5, "鼡鼣", 8, "鼭鼮鼰鼱"],
    ["fd40", "鼲", 4, "鼸鼺鼼鼿", 4, "齅", 10, "齒", 38],
    ["fd80", "齹", 5, "龁龂龍", 11, "龜龝龞龡", 4, "郎凉秊裏隣"],
    ["fe40", "兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]
  ];
});

// node_modules/iconv-lite/encodings/tables/gbk-added.json
var require_gbk_added = __commonJS((exports2, module2) => {
  module2.exports = [
    ["a140", "", 62],
    ["a180", "", 32],
    ["a240", "", 62],
    ["a280", "", 32],
    ["a2ab", "", 5],
    ["a2e3", "€"],
    ["a2ef", ""],
    ["a2fd", ""],
    ["a340", "", 62],
    ["a380", "", 31, "　"],
    ["a440", "", 62],
    ["a480", "", 32],
    ["a4f4", "", 10],
    ["a540", "", 62],
    ["a580", "", 32],
    ["a5f7", "", 7],
    ["a640", "", 62],
    ["a680", "", 32],
    ["a6b9", "", 7],
    ["a6d9", "", 6],
    ["a6ec", ""],
    ["a6f3", ""],
    ["a6f6", "", 8],
    ["a740", "", 62],
    ["a780", "", 32],
    ["a7c2", "", 14],
    ["a7f2", "", 12],
    ["a896", "", 10],
    ["a8bc", "ḿ"],
    ["a8bf", "ǹ"],
    ["a8c1", ""],
    ["a8ea", "", 20],
    ["a958", ""],
    ["a95b", ""],
    ["a95d", ""],
    ["a989", "〾⿰", 11],
    ["a997", "", 12],
    ["a9f0", "", 14],
    ["aaa1", "", 93],
    ["aba1", "", 93],
    ["aca1", "", 93],
    ["ada1", "", 93],
    ["aea1", "", 93],
    ["afa1", "", 93],
    ["d7fa", "", 4],
    ["f8a1", "", 93],
    ["f9a1", "", 93],
    ["faa1", "", 93],
    ["fba1", "", 93],
    ["fca1", "", 93],
    ["fda1", "", 93],
    ["fe50", "⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],
    ["fe80", "䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓", 6, "䶮", 93],
    ["8135f437", ""]
  ];
});

// node_modules/iconv-lite/encodings/tables/gb18030-ranges.json
var require_gb18030_ranges = __commonJS((exports2, module2) => {
  module2.exports = { uChars: [128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276, 284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506, 594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215, 8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482, 8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748, 8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896, 8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680, 9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947, 11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351, 12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218, 13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703, 14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330, 17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814, 18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244, 59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478, 59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034, 64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536], gbChars: [0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148, 172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443, 544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927, 7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240, 8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401, 8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936, 8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162, 9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366, 11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716, 11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384, 12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919, 13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481, 16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915, 17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470, 33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550, 37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076, 38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189000] };
});

// node_modules/iconv-lite/encodings/tables/cp949.json
var require_cp949 = __commonJS((exports2, module2) => {
  module2.exports = [
    ["0", "\x00", 127],
    ["8141", "갂갃갅갆갋", 4, "갘갞갟갡갢갣갥", 6, "갮갲갳갴"],
    ["8161", "갵갶갷갺갻갽갾갿걁", 9, "걌걎", 5, "걕"],
    ["8181", "걖걗걙걚걛걝", 18, "걲걳걵걶걹걻", 4, "겂겇겈겍겎겏겑겒겓겕", 6, "겞겢", 5, "겫겭겮겱", 6, "겺겾겿곀곂곃곅곆곇곉곊곋곍", 7, "곖곘", 7, "곢곣곥곦곩곫곭곮곲곴곷", 4, "곾곿괁괂괃괅괇", 4, "괎괐괒괓"],
    ["8241", "괔괕괖괗괙괚괛괝괞괟괡", 7, "괪괫괮", 5],
    ["8261", "괶괷괹괺괻괽", 6, "굆굈굊", 5, "굑굒굓굕굖굗"],
    ["8281", "굙", 7, "굢굤", 7, "굮굯굱굲굷굸굹굺굾궀궃", 4, "궊궋궍궎궏궑", 10, "궞", 5, "궥", 17, "궸", 7, "귂귃귅귆귇귉", 6, "귒귔", 7, "귝귞귟귡귢귣귥", 18],
    ["8341", "귺귻귽귾긂", 5, "긊긌긎", 5, "긕", 7],
    ["8361", "긝", 18, "긲긳긵긶긹긻긼"],
    ["8381", "긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗", 4, "깞깢깣깤깦깧깪깫깭깮깯깱", 6, "깺깾", 5, "꺆", 5, "꺍", 46, "꺿껁껂껃껅", 6, "껎껒", 5, "껚껛껝", 8],
    ["8441", "껦껧껩껪껬껮", 5, "껵껶껷껹껺껻껽", 8],
    ["8461", "꼆꼉꼊꼋꼌꼎꼏꼑", 18],
    ["8481", "꼤", 7, "꼮꼯꼱꼳꼵", 6, "꼾꽀꽄꽅꽆꽇꽊", 5, "꽑", 10, "꽞", 5, "꽦", 18, "꽺", 5, "꾁꾂꾃꾅꾆꾇꾉", 6, "꾒꾓꾔꾖", 5, "꾝", 26, "꾺꾻꾽꾾"],
    ["8541", "꾿꿁", 5, "꿊꿌꿏", 4, "꿕", 6, "꿝", 4],
    ["8561", "꿢", 5, "꿪", 5, "꿲꿳꿵꿶꿷꿹", 6, "뀂뀃"],
    ["8581", "뀅", 6, "뀍뀎뀏뀑뀒뀓뀕", 6, "뀞", 9, "뀩", 26, "끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞", 29, "끾끿낁낂낃낅", 6, "낎낐낒", 5, "낛낝낞낣낤"],
    ["8641", "낥낦낧낪낰낲낶낷낹낺낻낽", 6, "냆냊", 5, "냒"],
    ["8661", "냓냕냖냗냙", 6, "냡냢냣냤냦", 10],
    ["8681", "냱", 22, "넊넍넎넏넑넔넕넖넗넚넞", 4, "넦넧넩넪넫넭", 6, "넶넺", 5, "녂녃녅녆녇녉", 6, "녒녓녖녗녙녚녛녝녞녟녡", 22, "녺녻녽녾녿놁놃", 4, "놊놌놎놏놐놑놕놖놗놙놚놛놝"],
    ["8741", "놞", 9, "놩", 15],
    ["8761", "놹", 18, "뇍뇎뇏뇑뇒뇓뇕"],
    ["8781", "뇖", 5, "뇞뇠", 7, "뇪뇫뇭뇮뇯뇱", 7, "뇺뇼뇾", 5, "눆눇눉눊눍", 6, "눖눘눚", 5, "눡", 18, "눵", 6, "눽", 26, "뉙뉚뉛뉝뉞뉟뉡", 6, "뉪", 4],
    ["8841", "뉯", 4, "뉶", 5, "뉽", 6, "늆늇늈늊", 4],
    ["8861", "늏늒늓늕늖늗늛", 4, "늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],
    ["8881", "늸", 15, "닊닋닍닎닏닑닓", 4, "닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉", 6, "댒댖", 5, "댝", 54, "덗덙덚덝덠덡덢덣"],
    ["8941", "덦덨덪덬덭덯덲덳덵덶덷덹", 6, "뎂뎆", 5, "뎍"],
    ["8961", "뎎뎏뎑뎒뎓뎕", 10, "뎢", 5, "뎩뎪뎫뎭"],
    ["8981", "뎮", 21, "돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩", 18, "돽", 18, "됑", 6, "됙됚됛됝됞됟됡", 6, "됪됬", 7, "됵", 15],
    ["8a41", "둅", 10, "둒둓둕둖둗둙", 6, "둢둤둦"],
    ["8a61", "둧", 4, "둭", 18, "뒁뒂"],
    ["8a81", "뒃", 4, "뒉", 19, "뒞", 5, "뒥뒦뒧뒩뒪뒫뒭", 7, "뒶뒸뒺", 5, "듁듂듃듅듆듇듉", 6, "듑듒듓듔듖", 5, "듞듟듡듢듥듧", 4, "듮듰듲", 5, "듹", 26, "딖딗딙딚딝"],
    ["8b41", "딞", 5, "딦딫", 4, "딲딳딵딶딷딹", 6, "땂땆"],
    ["8b61", "땇땈땉땊땎땏땑땒땓땕", 6, "땞땢", 8],
    ["8b81", "땫", 52, "떢떣떥떦떧떩떬떭떮떯떲떶", 4, "떾떿뗁뗂뗃뗅", 6, "뗎뗒", 5, "뗙", 18, "뗭", 18],
    ["8c41", "똀", 15, "똒똓똕똖똗똙", 4],
    ["8c61", "똞", 6, "똦", 5, "똭", 6, "똵", 5],
    ["8c81", "똻", 12, "뙉", 26, "뙥뙦뙧뙩", 50, "뚞뚟뚡뚢뚣뚥", 5, "뚭뚮뚯뚰뚲", 16],
    ["8d41", "뛃", 16, "뛕", 8],
    ["8d61", "뛞", 17, "뛱뛲뛳뛵뛶뛷뛹뛺"],
    ["8d81", "뛻", 4, "뜂뜃뜄뜆", 33, "뜪뜫뜭뜮뜱", 6, "뜺뜼", 7, "띅띆띇띉띊띋띍", 6, "띖", 9, "띡띢띣띥띦띧띩", 6, "띲띴띶", 5, "띾띿랁랂랃랅", 6, "랎랓랔랕랚랛랝랞"],
    ["8e41", "랟랡", 6, "랪랮", 5, "랶랷랹", 8],
    ["8e61", "럂", 4, "럈럊", 19],
    ["8e81", "럞", 13, "럮럯럱럲럳럵", 6, "럾렂", 4, "렊렋렍렎렏렑", 6, "렚렜렞", 5, "렦렧렩렪렫렭", 6, "렶렺", 5, "롁롂롃롅", 11, "롒롔", 7, "롞롟롡롢롣롥", 6, "롮롰롲", 5, "롹롺롻롽", 7],
    ["8f41", "뢅", 7, "뢎", 17],
    ["8f61", "뢠", 7, "뢩", 6, "뢱뢲뢳뢵뢶뢷뢹", 4],
    ["8f81", "뢾뢿룂룄룆", 5, "룍룎룏룑룒룓룕", 7, "룞룠룢", 5, "룪룫룭룮룯룱", 6, "룺룼룾", 5, "뤅", 18, "뤙", 6, "뤡", 26, "뤾뤿륁륂륃륅", 6, "륍륎륐륒", 5],
    ["9041", "륚륛륝륞륟륡", 6, "륪륬륮", 5, "륶륷륹륺륻륽"],
    ["9061", "륾", 5, "릆릈릋릌릏", 15],
    ["9081", "릟", 12, "릮릯릱릲릳릵", 6, "릾맀맂", 5, "맊맋맍맓", 4, "맚맜맟맠맢맦맧맩맪맫맭", 6, "맶맻", 4, "먂", 5, "먉", 11, "먖", 33, "먺먻먽먾먿멁멃멄멅멆"],
    ["9141", "멇멊멌멏멐멑멒멖멗멙멚멛멝", 6, "멦멪", 5],
    ["9161", "멲멳멵멶멷멹", 9, "몆몈몉몊몋몍", 5],
    ["9181", "몓", 20, "몪몭몮몯몱몳", 4, "몺몼몾", 5, "뫅뫆뫇뫉", 14, "뫚", 33, "뫽뫾뫿묁묂묃묅", 7, "묎묐묒", 5, "묙묚묛묝묞묟묡", 6],
    ["9241", "묨묪묬", 7, "묷묹묺묿", 4, "뭆뭈뭊뭋뭌뭎뭑뭒"],
    ["9261", "뭓뭕뭖뭗뭙", 7, "뭢뭤", 7, "뭭", 4],
    ["9281", "뭲", 21, "뮉뮊뮋뮍뮎뮏뮑", 18, "뮥뮦뮧뮩뮪뮫뮭", 6, "뮵뮶뮸", 7, "믁믂믃믅믆믇믉", 6, "믑믒믔", 35, "믺믻믽믾밁"],
    ["9341", "밃", 4, "밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],
    ["9361", "밶밷밹", 6, "뱂뱆뱇뱈뱊뱋뱎뱏뱑", 8],
    ["9381", "뱚뱛뱜뱞", 37, "벆벇벉벊벍벏", 4, "벖벘벛", 4, "벢벣벥벦벩", 6, "벲벶", 5, "벾벿볁볂볃볅", 7, "볎볒볓볔볖볗볙볚볛볝", 22, "볷볹볺볻볽"],
    ["9441", "볾", 5, "봆봈봊", 5, "봑봒봓봕", 8],
    ["9461", "봞", 5, "봥", 6, "봭", 12],
    ["9481", "봺", 5, "뵁", 6, "뵊뵋뵍뵎뵏뵑", 6, "뵚", 9, "뵥뵦뵧뵩", 22, "붂붃붅붆붋", 4, "붒붔붖붗붘붛붝", 6, "붥", 10, "붱", 6, "붹", 24],
    ["9541", "뷒뷓뷖뷗뷙뷚뷛뷝", 11, "뷪", 5, "뷱"],
    ["9561", "뷲뷳뷵뷶뷷뷹", 6, "븁븂븄븆", 5, "븎븏븑븒븓"],
    ["9581", "븕", 6, "븞븠", 35, "빆빇빉빊빋빍빏", 4, "빖빘빜빝빞빟빢빣빥빦빧빩빫", 4, "빲빶", 4, "빾빿뺁뺂뺃뺅", 6, "뺎뺒", 5, "뺚", 13, "뺩", 14],
    ["9641", "뺸", 23, "뻒뻓"],
    ["9661", "뻕뻖뻙", 6, "뻡뻢뻦", 5, "뻭", 8],
    ["9681", "뻶", 10, "뼂", 5, "뼊", 13, "뼚뼞", 33, "뽂뽃뽅뽆뽇뽉", 6, "뽒뽓뽔뽖", 44],
    ["9741", "뾃", 16, "뾕", 8],
    ["9761", "뾞", 17, "뾱", 7],
    ["9781", "뾹", 11, "뿆", 5, "뿎뿏뿑뿒뿓뿕", 6, "뿝뿞뿠뿢", 89, "쀽쀾쀿"],
    ["9841", "쁀", 16, "쁒", 5, "쁙쁚쁛"],
    ["9861", "쁝쁞쁟쁡", 6, "쁪", 15],
    ["9881", "쁺", 21, "삒삓삕삖삗삙", 6, "삢삤삦", 5, "삮삱삲삷", 4, "삾샂샃샄샆샇샊샋샍샎샏샑", 6, "샚샞", 5, "샦샧샩샪샫샭", 6, "샶샸샺", 5, "섁섂섃섅섆섇섉", 6, "섑섒섓섔섖", 5, "섡섢섥섨섩섪섫섮"],
    ["9941", "섲섳섴섵섷섺섻섽섾섿셁", 6, "셊셎", 5, "셖셗"],
    ["9961", "셙셚셛셝", 6, "셦셪", 5, "셱셲셳셵셶셷셹셺셻"],
    ["9981", "셼", 8, "솆", 5, "솏솑솒솓솕솗", 4, "솞솠솢솣솤솦솧솪솫솭솮솯솱", 11, "솾", 5, "쇅쇆쇇쇉쇊쇋쇍", 6, "쇕쇖쇙", 6, "쇡쇢쇣쇥쇦쇧쇩", 6, "쇲쇴", 7, "쇾쇿숁숂숃숅", 6, "숎숐숒", 5, "숚숛숝숞숡숢숣"],
    ["9a41", "숤숥숦숧숪숬숮숰숳숵", 16],
    ["9a61", "쉆쉇쉉", 6, "쉒쉓쉕쉖쉗쉙", 6, "쉡쉢쉣쉤쉦"],
    ["9a81", "쉧", 4, "쉮쉯쉱쉲쉳쉵", 6, "쉾슀슂", 5, "슊", 5, "슑", 6, "슙슚슜슞", 5, "슦슧슩슪슫슮", 5, "슶슸슺", 33, "싞싟싡싢싥", 5, "싮싰싲싳싴싵싷싺싽싾싿쌁", 6, "쌊쌋쌎쌏"],
    ["9b41", "쌐쌑쌒쌖쌗쌙쌚쌛쌝", 6, "쌦쌧쌪", 8],
    ["9b61", "쌳", 17, "썆", 7],
    ["9b81", "썎", 25, "썪썫썭썮썯썱썳", 4, "썺썻썾", 5, "쎅쎆쎇쎉쎊쎋쎍", 50, "쏁", 22, "쏚"],
    ["9c41", "쏛쏝쏞쏡쏣", 4, "쏪쏫쏬쏮", 5, "쏶쏷쏹", 5],
    ["9c61", "쏿", 8, "쐉", 6, "쐑", 9],
    ["9c81", "쐛", 8, "쐥", 6, "쐭쐮쐯쐱쐲쐳쐵", 6, "쐾", 9, "쑉", 26, "쑦쑧쑩쑪쑫쑭", 6, "쑶쑷쑸쑺", 5, "쒁", 18, "쒕", 6, "쒝", 12],
    ["9d41", "쒪", 13, "쒹쒺쒻쒽", 8],
    ["9d61", "쓆", 25],
    ["9d81", "쓠", 8, "쓪", 5, "쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂", 9, "씍씎씏씑씒씓씕", 6, "씝", 10, "씪씫씭씮씯씱", 6, "씺씼씾", 5, "앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩", 6, "앲앶", 5, "앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],
    ["9e41", "얖얙얚얛얝얞얟얡", 7, "얪", 9, "얶"],
    ["9e61", "얷얺얿", 4, "엋엍엏엒엓엕엖엗엙", 6, "엢엤엦엧"],
    ["9e81", "엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑", 6, "옚옝", 6, "옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉", 6, "왒왖", 5, "왞왟왡", 10, "왭왮왰왲", 5, "왺왻왽왾왿욁", 6, "욊욌욎", 5, "욖욗욙욚욛욝", 6, "욦"],
    ["9f41", "욨욪", 5, "욲욳욵욶욷욻", 4, "웂웄웆", 5, "웎"],
    ["9f61", "웏웑웒웓웕", 6, "웞웟웢", 5, "웪웫웭웮웯웱웲"],
    ["9f81", "웳", 4, "웺웻웼웾", 5, "윆윇윉윊윋윍", 6, "윖윘윚", 5, "윢윣윥윦윧윩", 6, "윲윴윶윸윹윺윻윾윿읁읂읃읅", 4, "읋읎읐읙읚읛읝읞읟읡", 6, "읩읪읬", 7, "읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛", 4, "잢잧", 4, "잮잯잱잲잳잵잶잷"],
    ["a041", "잸잹잺잻잾쟂", 5, "쟊쟋쟍쟏쟑", 6, "쟙쟚쟛쟜"],
    ["a061", "쟞", 5, "쟥쟦쟧쟩쟪쟫쟭", 13],
    ["a081", "쟻", 4, "젂젃젅젆젇젉젋", 4, "젒젔젗", 4, "젞젟젡젢젣젥", 6, "젮젰젲", 5, "젹젺젻젽젾젿졁", 6, "졊졋졎", 5, "졕", 26, "졲졳졵졶졷졹졻", 4, "좂좄좈좉좊좎", 5, "좕", 7, "좞좠좢좣좤"],
    ["a141", "좥좦좧좩", 18, "좾좿죀죁"],
    ["a161", "죂죃죅죆죇죉죊죋죍", 6, "죖죘죚", 5, "죢죣죥"],
    ["a181", "죦", 14, "죶", 5, "죾죿줁줂줃줇", 4, "줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈", 9, "±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],
    ["a241", "줐줒", 5, "줙", 18],
    ["a261", "줭", 6, "줵", 18],
    ["a281", "쥈", 7, "쥒쥓쥕쥖쥗쥙", 6, "쥢쥤", 7, "쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],
    ["a341", "쥱쥲쥳쥵", 6, "쥽", 10, "즊즋즍즎즏"],
    ["a361", "즑", 6, "즚즜즞", 16],
    ["a381", "즯", 16, "짂짃짅짆짉짋", 4, "짒짔짗짘짛！", 58, "￦］", 32, "￣"],
    ["a441", "짞짟짡짣짥짦짨짩짪짫짮짲", 5, "짺짻짽짾짿쨁쨂쨃쨄"],
    ["a461", "쨅쨆쨇쨊쨎", 5, "쨕쨖쨗쨙", 12],
    ["a481", "쨦쨧쨨쨪", 28, "ㄱ", 93],
    ["a541", "쩇", 4, "쩎쩏쩑쩒쩓쩕", 6, "쩞쩢", 5, "쩩쩪"],
    ["a561", "쩫", 17, "쩾", 5, "쪅쪆"],
    ["a581", "쪇", 16, "쪙", 14, "ⅰ", 9],
    ["a5b0", "Ⅰ", 9],
    ["a5c1", "Α", 16, "Σ", 6],
    ["a5e1", "α", 16, "σ", 6],
    ["a641", "쪨", 19, "쪾쪿쫁쫂쫃쫅"],
    ["a661", "쫆", 5, "쫎쫐쫒쫔쫕쫖쫗쫚", 5, "쫡", 6],
    ["a681", "쫨쫩쫪쫫쫭", 6, "쫵", 18, "쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃", 7],
    ["a741", "쬋", 4, "쬑쬒쬓쬕쬖쬗쬙", 6, "쬢", 7],
    ["a761", "쬪", 22, "쭂쭃쭄"],
    ["a781", "쭅쭆쭇쭊쭋쭍쭎쭏쭑", 6, "쭚쭛쭜쭞", 5, "쭥", 7, "㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙", 9, "㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰", 9, "㎀", 4, "㎺", 5, "㎐", 4, "Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],
    ["a841", "쭭", 10, "쭺", 14],
    ["a861", "쮉", 18, "쮝", 6],
    ["a881", "쮤", 19, "쮹", 11, "ÆÐªĦ"],
    ["a8a6", "Ĳ"],
    ["a8a8", "ĿŁØŒºÞŦŊ"],
    ["a8b1", "㉠", 27, "ⓐ", 25, "①", 14, "½⅓⅔¼¾⅛⅜⅝⅞"],
    ["a941", "쯅", 14, "쯕", 10],
    ["a961", "쯠쯡쯢쯣쯥쯦쯨쯪", 18],
    ["a981", "쯽", 14, "찎찏찑찒찓찕", 6, "찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀", 27, "⒜", 25, "⑴", 14, "¹²³⁴ⁿ₁₂₃₄"],
    ["aa41", "찥찦찪찫찭찯찱", 6, "찺찿", 4, "챆챇챉챊챋챍챎"],
    ["aa61", "챏", 4, "챖챚", 5, "챡챢챣챥챧챩", 6, "챱챲"],
    ["aa81", "챳챴챶", 29, "ぁ", 82],
    ["ab41", "첔첕첖첗첚첛첝첞첟첡", 6, "첪첮", 5, "첶첷첹"],
    ["ab61", "첺첻첽", 6, "쳆쳈쳊", 5, "쳑쳒쳓쳕", 5],
    ["ab81", "쳛", 8, "쳥", 6, "쳭쳮쳯쳱", 12, "ァ", 85],
    ["ac41", "쳾쳿촀촂", 5, "촊촋촍촎촏촑", 6, "촚촜촞촟촠"],
    ["ac61", "촡촢촣촥촦촧촩촪촫촭", 11, "촺", 4],
    ["ac81", "촿", 28, "쵝쵞쵟А", 5, "ЁЖ", 25],
    ["acd1", "а", 5, "ёж", 25],
    ["ad41", "쵡쵢쵣쵥", 6, "쵮쵰쵲", 5, "쵹", 7],
    ["ad61", "춁", 6, "춉", 10, "춖춗춙춚춛춝춞춟"],
    ["ad81", "춠춡춢춣춦춨춪", 5, "춱", 18, "췅"],
    ["ae41", "췆", 5, "췍췎췏췑", 16],
    ["ae61", "췢", 5, "췩췪췫췭췮췯췱", 6, "췺췼췾", 4],
    ["ae81", "츃츅츆츇츉츊츋츍", 6, "츕츖츗츘츚", 5, "츢츣츥츦츧츩츪츫"],
    ["af41", "츬츭츮츯츲츴츶", 19],
    ["af61", "칊", 13, "칚칛칝칞칢", 5, "칪칬"],
    ["af81", "칮", 5, "칶칷칹칺칻칽", 6, "캆캈캊", 5, "캒캓캕캖캗캙"],
    ["b041", "캚", 5, "캢캦", 5, "캮", 12],
    ["b061", "캻", 5, "컂", 19],
    ["b081", "컖", 13, "컦컧컩컪컭", 6, "컶컺", 5, "가각간갇갈갉갊감", 7, "같", 4, "갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],
    ["b141", "켂켃켅켆켇켉", 6, "켒켔켖", 5, "켝켞켟켡켢켣"],
    ["b161", "켥", 6, "켮켲", 5, "켹", 11],
    ["b181", "콅", 14, "콖콗콙콚콛콝", 6, "콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],
    ["b241", "콭콮콯콲콳콵콶콷콹", 6, "쾁쾂쾃쾄쾆", 5, "쾍"],
    ["b261", "쾎", 18, "쾢", 5, "쾩"],
    ["b281", "쾪", 5, "쾱", 18, "쿅", 6, "깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],
    ["b341", "쿌", 19, "쿢쿣쿥쿦쿧쿩"],
    ["b361", "쿪", 5, "쿲쿴쿶", 5, "쿽쿾쿿퀁퀂퀃퀅", 5],
    ["b381", "퀋", 5, "퀒", 5, "퀙", 19, "끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫", 4, "낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],
    ["b441", "퀮", 5, "퀶퀷퀹퀺퀻퀽", 6, "큆큈큊", 5],
    ["b461", "큑큒큓큕큖큗큙", 6, "큡", 10, "큮큯"],
    ["b481", "큱큲큳큵", 6, "큾큿킀킂", 18, "뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫", 4, "닳담답닷", 4, "닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],
    ["b541", "킕", 14, "킦킧킩킪킫킭", 5],
    ["b561", "킳킶킸킺", 5, "탂탃탅탆탇탊", 5, "탒탖", 4],
    ["b581", "탛탞탟탡탢탣탥", 6, "탮탲", 5, "탹", 11, "덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],
    ["b641", "턅", 7, "턎", 17],
    ["b661", "턠", 15, "턲턳턵턶턷턹턻턼턽턾"],
    ["b681", "턿텂텆", 5, "텎텏텑텒텓텕", 6, "텞텠텢", 5, "텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],
    ["b741", "텮", 13, "텽", 6, "톅톆톇톉톊"],
    ["b761", "톋", 20, "톢톣톥톦톧"],
    ["b781", "톩", 6, "톲톴톶톷톸톹톻톽톾톿퇁", 14, "래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],
    ["b841", "퇐", 7, "퇙", 17],
    ["b861", "퇫", 8, "퇵퇶퇷퇹", 13],
    ["b881", "툈툊", 5, "툑", 24, "륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많", 4, "맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],
    ["b941", "툪툫툮툯툱툲툳툵", 6, "툾퉀퉂", 5, "퉉퉊퉋퉌"],
    ["b961", "퉍", 14, "퉝", 6, "퉥퉦퉧퉨"],
    ["b981", "퉩", 22, "튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바", 4, "받", 4, "밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],
    ["ba41", "튍튎튏튒튓튔튖", 5, "튝튞튟튡튢튣튥", 6, "튭"],
    ["ba61", "튮튯튰튲", 5, "튺튻튽튾틁틃", 4, "틊틌", 5],
    ["ba81", "틒틓틕틖틗틙틚틛틝", 6, "틦", 9, "틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],
    ["bb41", "틻", 4, "팂팄팆", 5, "팏팑팒팓팕팗", 4, "팞팢팣"],
    ["bb61", "팤팦팧팪팫팭팮팯팱", 6, "팺팾", 5, "퍆퍇퍈퍉"],
    ["bb81", "퍊", 31, "빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],
    ["bc41", "퍪", 17, "퍾퍿펁펂펃펅펆펇"],
    ["bc61", "펈펉펊펋펎펒", 5, "펚펛펝펞펟펡", 6, "펪펬펮"],
    ["bc81", "펯", 4, "펵펶펷펹펺펻펽", 6, "폆폇폊", 5, "폑", 5, "샥샨샬샴샵샷샹섀섄섈섐섕서", 4, "섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],
    ["bd41", "폗폙", 7, "폢폤", 7, "폮폯폱폲폳폵폶폷"],
    ["bd61", "폸폹폺폻폾퐀퐂", 5, "퐉", 13],
    ["bd81", "퐗", 5, "퐞", 25, "숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],
    ["be41", "퐸", 7, "푁푂푃푅", 14],
    ["be61", "푔", 7, "푝푞푟푡푢푣푥", 7, "푮푰푱푲"],
    ["be81", "푳", 4, "푺푻푽푾풁풃", 4, "풊풌풎", 5, "풕", 8, "쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄", 6, "엌엎"],
    ["bf41", "풞", 10, "풪", 14],
    ["bf61", "풹", 18, "퓍퓎퓏퓑퓒퓓퓕"],
    ["bf81", "퓖", 5, "퓝퓞퓠", 7, "퓩퓪퓫퓭퓮퓯퓱", 6, "퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염", 5, "옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],
    ["c041", "퓾", 5, "픅픆픇픉픊픋픍", 6, "픖픘", 5],
    ["c061", "픞", 25],
    ["c081", "픸픹픺픻픾픿핁핂핃핅", 6, "핎핐핒", 5, "핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응", 7, "읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],
    ["c141", "핤핦핧핪핬핮", 5, "핶핷핹핺핻핽", 6, "햆햊햋"],
    ["c161", "햌햍햎햏햑", 19, "햦햧"],
    ["c181", "햨", 31, "점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],
    ["c241", "헊헋헍헎헏헑헓", 4, "헚헜헞", 5, "헦헧헩헪헫헭헮"],
    ["c261", "헯", 4, "헶헸헺", 5, "혂혃혅혆혇혉", 6, "혒"],
    ["c281", "혖", 5, "혝혞혟혡혢혣혥", 7, "혮", 9, "혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],
    ["c341", "혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝", 4],
    ["c361", "홢", 4, "홨홪", 5, "홲홳홵", 11],
    ["c381", "횁횂횄횆", 5, "횎횏횑횒횓횕", 7, "횞횠횢", 5, "횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],
    ["c441", "횫횭횮횯횱", 7, "횺횼", 7, "훆훇훉훊훋"],
    ["c461", "훍훎훏훐훒훓훕훖훘훚", 5, "훡훢훣훥훦훧훩", 4],
    ["c481", "훮훯훱훲훳훴훶", 5, "훾훿휁휂휃휅", 11, "휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],
    ["c541", "휕휖휗휚휛휝휞휟휡", 6, "휪휬휮", 5, "휶휷휹"],
    ["c561", "휺휻휽", 6, "흅흆흈흊", 5, "흒흓흕흚", 4],
    ["c581", "흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵", 6, "흾흿힀힂", 5, "힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],
    ["c641", "힍힎힏힑", 6, "힚힜힞", 5],
    ["c6a1", "퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],
    ["c7a1", "퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],
    ["c8a1", "혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],
    ["caa1", "伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],
    ["cba1", "匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],
    ["cca1", "瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],
    ["cda1", "棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],
    ["cea1", "科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],
    ["cfa1", "區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],
    ["d0a1", "鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],
    ["d1a1", "朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩", 5, "那樂", 4, "諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],
    ["d2a1", "納臘蠟衲囊娘廊", 4, "乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧", 5, "駑魯", 10, "濃籠聾膿農惱牢磊腦賂雷尿壘", 7, "嫩訥杻紐勒", 5, "能菱陵尼泥匿溺多茶"],
    ["d3a1", "丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],
    ["d4a1", "棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],
    ["d5a1", "蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],
    ["d6a1", "煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],
    ["d7a1", "遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],
    ["d8a1", "立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],
    ["d9a1", "蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],
    ["daa1", "汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],
    ["dba1", "發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],
    ["dca1", "碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],
    ["dda1", "孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],
    ["dea1", "脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],
    ["dfa1", "傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],
    ["e0a1", "胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],
    ["e1a1", "聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],
    ["e2a1", "戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],
    ["e3a1", "嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],
    ["e4a1", "沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],
    ["e5a1", "櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],
    ["e6a1", "旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],
    ["e7a1", "簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],
    ["e8a1", "烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],
    ["e9a1", "窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],
    ["eaa1", "運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],
    ["eba1", "濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],
    ["eca1", "議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],
    ["eda1", "立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],
    ["eea1", "障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],
    ["efa1", "煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],
    ["f0a1", "靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],
    ["f1a1", "踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],
    ["f2a1", "咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],
    ["f3a1", "鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],
    ["f4a1", "責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],
    ["f5a1", "椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],
    ["f6a1", "贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],
    ["f7a1", "鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],
    ["f8a1", "阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],
    ["f9a1", "品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],
    ["faa1", "行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],
    ["fba1", "形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],
    ["fca1", "禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],
    ["fda1", "爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]
  ];
});

// node_modules/iconv-lite/encodings/tables/cp950.json
var require_cp950 = __commonJS((exports2, module2) => {
  module2.exports = [
    ["0", "\x00", 127],
    ["a140", "　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],
    ["a1a1", "﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢", 4, "～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],
    ["a240", "＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁", 7, "▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],
    ["a2a1", "╮╰╯═╞╪╡◢◣◥◤╱╲╳０", 9, "Ⅰ", 9, "〡", 8, "十卄卅Ａ", 25, "ａ", 21],
    ["a340", "ｗｘｙｚΑ", 16, "Σ", 6, "α", 16, "σ", 6, "ㄅ", 10],
    ["a3a1", "ㄐ", 25, "˙ˉˊˇˋ"],
    ["a3e1", "€"],
    ["a440", "一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],
    ["a4a1", "丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],
    ["a540", "世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],
    ["a5a1", "央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],
    ["a640", "共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],
    ["a6a1", "式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],
    ["a740", "作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],
    ["a7a1", "均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],
    ["a840", "杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],
    ["a8a1", "芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],
    ["a940", "咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],
    ["a9a1", "屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],
    ["aa40", "昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],
    ["aaa1", "炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],
    ["ab40", "陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],
    ["aba1", "哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],
    ["ac40", "拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],
    ["aca1", "活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],
    ["ad40", "耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],
    ["ada1", "迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],
    ["ae40", "哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],
    ["aea1", "恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],
    ["af40", "浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],
    ["afa1", "砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],
    ["b040", "虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],
    ["b0a1", "陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],
    ["b140", "娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],
    ["b1a1", "情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],
    ["b240", "毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],
    ["b2a1", "瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],
    ["b340", "莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],
    ["b3a1", "部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],
    ["b440", "婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],
    ["b4a1", "插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],
    ["b540", "溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],
    ["b5a1", "窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],
    ["b640", "詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],
    ["b6a1", "間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],
    ["b740", "媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],
    ["b7a1", "楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],
    ["b840", "睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],
    ["b8a1", "腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],
    ["b940", "辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],
    ["b9a1", "飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],
    ["ba40", "愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],
    ["baa1", "滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],
    ["bb40", "罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],
    ["bba1", "說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],
    ["bc40", "劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],
    ["bca1", "慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],
    ["bd40", "瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],
    ["bda1", "翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],
    ["be40", "輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],
    ["bea1", "鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],
    ["bf40", "濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],
    ["bfa1", "縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],
    ["c040", "錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],
    ["c0a1", "嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],
    ["c140", "瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],
    ["c1a1", "薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],
    ["c240", "駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],
    ["c2a1", "癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],
    ["c340", "鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],
    ["c3a1", "獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],
    ["c440", "願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],
    ["c4a1", "纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],
    ["c540", "護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],
    ["c5a1", "禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],
    ["c640", "讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],
    ["c940", "乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],
    ["c9a1", "氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],
    ["ca40", "汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],
    ["caa1", "吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],
    ["cb40", "杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],
    ["cba1", "芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],
    ["cc40", "坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],
    ["cca1", "怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],
    ["cd40", "泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],
    ["cda1", "矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],
    ["ce40", "哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],
    ["cea1", "峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],
    ["cf40", "柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],
    ["cfa1", "洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],
    ["d040", "穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],
    ["d0a1", "苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],
    ["d140", "唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],
    ["d1a1", "恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],
    ["d240", "毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],
    ["d2a1", "牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],
    ["d340", "笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],
    ["d3a1", "荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],
    ["d440", "酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],
    ["d4a1", "唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],
    ["d540", "崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],
    ["d5a1", "捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],
    ["d640", "淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],
    ["d6a1", "痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],
    ["d740", "耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],
    ["d7a1", "蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],
    ["d840", "釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],
    ["d8a1", "堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],
    ["d940", "惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],
    ["d9a1", "晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],
    ["da40", "湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],
    ["daa1", "琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],
    ["db40", "罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],
    ["dba1", "菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],
    ["dc40", "軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],
    ["dca1", "隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],
    ["dd40", "媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],
    ["dda1", "搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],
    ["de40", "毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],
    ["dea1", "煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],
    ["df40", "稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],
    ["dfa1", "腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],
    ["e040", "觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],
    ["e0a1", "遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],
    ["e140", "凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],
    ["e1a1", "寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],
    ["e240", "榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],
    ["e2a1", "漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],
    ["e340", "禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],
    ["e3a1", "耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],
    ["e440", "裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],
    ["e4a1", "銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],
    ["e540", "噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],
    ["e5a1", "憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],
    ["e640", "澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],
    ["e6a1", "獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],
    ["e740", "膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],
    ["e7a1", "蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],
    ["e840", "踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],
    ["e8a1", "銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],
    ["e940", "噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],
    ["e9a1", "憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],
    ["ea40", "澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],
    ["eaa1", "瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],
    ["eb40", "蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],
    ["eba1", "諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],
    ["ec40", "錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],
    ["eca1", "魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],
    ["ed40", "檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],
    ["eda1", "瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],
    ["ee40", "蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],
    ["eea1", "謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],
    ["ef40", "鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],
    ["efa1", "鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],
    ["f040", "璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],
    ["f0a1", "臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],
    ["f140", "蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],
    ["f1a1", "鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],
    ["f240", "徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],
    ["f2a1", "礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],
    ["f340", "譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],
    ["f3a1", "鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],
    ["f440", "嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],
    ["f4a1", "禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],
    ["f540", "鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],
    ["f5a1", "鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],
    ["f640", "蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],
    ["f6a1", "騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],
    ["f740", "糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],
    ["f7a1", "驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],
    ["f840", "讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],
    ["f8a1", "齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],
    ["f940", "纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],
    ["f9a1", "龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]
  ];
});

// node_modules/iconv-lite/encodings/tables/big5-added.json
var require_big5_added = __commonJS((exports2, module2) => {
  module2.exports = [
    ["8740", "䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],
    ["8767", "綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],
    ["87a1", "𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],
    ["8840", "㇀", 4, "𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],
    ["88a1", "ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],
    ["8940", "𪎩𡅅"],
    ["8943", "攊"],
    ["8946", "丽滝鵎釟"],
    ["894c", "𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],
    ["89a1", "琑糼緍楆竉刧"],
    ["89ab", "醌碸酞肼"],
    ["89b0", "贋胶𠧧"],
    ["89b5", "肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],
    ["89c1", "溚舾甙"],
    ["89c5", "䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],
    ["8a40", "𧶄唥"],
    ["8a43", "𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],
    ["8a64", "𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],
    ["8a76", "䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],
    ["8aa1", "𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],
    ["8aac", "䠋𠆩㿺塳𢶍"],
    ["8ab2", "𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],
    ["8abb", "䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],
    ["8ac9", "𪘁𠸉𢫏𢳉"],
    ["8ace", "𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],
    ["8adf", "𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],
    ["8af6", "𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],
    ["8b40", "𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],
    ["8b55", "𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],
    ["8ba1", "𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],
    ["8bde", "𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],
    ["8c40", "倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],
    ["8ca1", "𣏹椙橃𣱣泿"],
    ["8ca7", "爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],
    ["8cc9", "顨杫䉶圽"],
    ["8cce", "藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],
    ["8ce6", "峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],
    ["8d40", "𠮟"],
    ["8d42", "𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],
    ["8da1", "㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],
    ["8e40", "𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],
    ["8ea1", "繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],
    ["8f40", "蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],
    ["8fa1", "𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],
    ["9040", "趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],
    ["90a1", "𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],
    ["9140", "𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],
    ["91a1", "鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],
    ["9240", "𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],
    ["92a1", "働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],
    ["9340", "媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],
    ["93a1", "摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],
    ["9440", "銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],
    ["94a1", "㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],
    ["9540", "𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],
    ["95a1", "衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],
    ["9640", "桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],
    ["96a1", "𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],
    ["9740", "愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],
    ["97a1", "𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],
    ["9840", "𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],
    ["98a1", "咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],
    ["9940", "䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],
    ["99a1", "䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],
    ["9a40", "鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],
    ["9aa1", "黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],
    ["9b40", "𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],
    ["9b62", "𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],
    ["9ba1", "椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],
    ["9c40", "嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],
    ["9ca1", "㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],
    ["9d40", "𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],
    ["9da1", "辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],
    ["9e40", "𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],
    ["9ea1", "鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],
    ["9ead", "𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],
    ["9ec5", "㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],
    ["9ef5", "噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],
    ["9f40", "籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],
    ["9f4f", "凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],
    ["9fa1", "椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],
    ["9fae", "酙隁酜"],
    ["9fb2", "酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],
    ["9fc1", "𤤙盖鮝个𠳔莾衂"],
    ["9fc9", "届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],
    ["9fdb", "歒酼龥鮗頮颴骺麨麄煺笔"],
    ["9fe7", "毺蠘罸"],
    ["9feb", "嘠𪙊蹷齓"],
    ["9ff0", "跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],
    ["a040", "𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],
    ["a055", "𡠻𦸅"],
    ["a058", "詾𢔛"],
    ["a05b", "惽癧髗鵄鍮鮏蟵"],
    ["a063", "蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],
    ["a073", "坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],
    ["a0a1", "嵗𨯂迚𨸹"],
    ["a0a6", "僙𡵆礆匲阸𠼻䁥"],
    ["a0ae", "矾"],
    ["a0b0", "糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],
    ["a0d4", "覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],
    ["a0e2", "罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],
    ["a3c0", "␀", 31, "␡"],
    ["c6a1", "①", 9, "⑴", 9, "ⅰ", 9, "丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ", 23],
    ["c740", "す", 58, "ァアィイ"],
    ["c7a1", "ゥ", 81, "А", 5, "ЁЖ", 4],
    ["c840", "Л", 26, "ёж", 25, "⇧↸↹㇏𠃌乚𠂊刂䒑"],
    ["c8a1", "龰冈龱𧘇"],
    ["c8cd", "￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],
    ["c8f5", "ʃɐɛɔɵœøŋʊɪ"],
    ["f9fe", "￭"],
    ["fa40", "𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],
    ["faa1", "鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],
    ["fb40", "𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],
    ["fba1", "𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],
    ["fc40", "廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],
    ["fca1", "𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],
    ["fd40", "𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],
    ["fda1", "𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],
    ["fe40", "鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],
    ["fea1", "𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]
  ];
});

// node_modules/iconv-lite/encodings/dbcs-data.js
var require_dbcs_data = __commonJS((exports2, module2) => {
  module2.exports = {
    shiftjis: {
      type: "_dbcs",
      table: function() {
        return require_shiftjis();
      },
      encodeAdd: { "¥": 92, "‾": 126 },
      encodeSkipVals: [{ from: 60736, to: 63808 }]
    },
    csshiftjis: "shiftjis",
    mskanji: "shiftjis",
    sjis: "shiftjis",
    windows31j: "shiftjis",
    ms31j: "shiftjis",
    xsjis: "shiftjis",
    windows932: "shiftjis",
    ms932: "shiftjis",
    "932": "shiftjis",
    cp932: "shiftjis",
    eucjp: {
      type: "_dbcs",
      table: function() {
        return require_eucjp();
      },
      encodeAdd: { "¥": 92, "‾": 126 }
    },
    gb2312: "cp936",
    gb231280: "cp936",
    gb23121980: "cp936",
    csgb2312: "cp936",
    csiso58gb231280: "cp936",
    euccn: "cp936",
    windows936: "cp936",
    ms936: "cp936",
    "936": "cp936",
    cp936: {
      type: "_dbcs",
      table: function() {
        return require_cp936();
      }
    },
    gbk: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      }
    },
    xgbk: "gbk",
    isoir58: "gbk",
    gb18030: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      },
      gb18030: function() {
        return require_gb18030_ranges();
      },
      encodeSkipVals: [128],
      encodeAdd: { "€": 41699 }
    },
    chinese: "gb18030",
    windows949: "cp949",
    ms949: "cp949",
    "949": "cp949",
    cp949: {
      type: "_dbcs",
      table: function() {
        return require_cp949();
      }
    },
    cseuckr: "cp949",
    csksc56011987: "cp949",
    euckr: "cp949",
    isoir149: "cp949",
    korean: "cp949",
    ksc56011987: "cp949",
    ksc56011989: "cp949",
    ksc5601: "cp949",
    windows950: "cp950",
    ms950: "cp950",
    "950": "cp950",
    cp950: {
      type: "_dbcs",
      table: function() {
        return require_cp950();
      }
    },
    big5: "big5hkscs",
    big5hkscs: {
      type: "_dbcs",
      table: function() {
        return require_cp950().concat(require_big5_added());
      },
      encodeSkipVals: [
        36457,
        36463,
        36478,
        36523,
        36532,
        36557,
        36560,
        36695,
        36713,
        36718,
        36811,
        36862,
        36973,
        36986,
        37060,
        37084,
        37105,
        37311,
        37551,
        37552,
        37553,
        37554,
        37585,
        37959,
        38090,
        38361,
        38652,
        39285,
        39798,
        39800,
        39803,
        39878,
        39902,
        39916,
        39926,
        40002,
        40019,
        40034,
        40040,
        40043,
        40055,
        40124,
        40125,
        40144,
        40279,
        40282,
        40388,
        40431,
        40443,
        40617,
        40687,
        40701,
        40800,
        40907,
        41079,
        41180,
        41183,
        36812,
        37576,
        38468,
        38637,
        41636,
        41637,
        41639,
        41638,
        41676,
        41678
      ]
    },
    cnbig5: "big5hkscs",
    csbig5: "big5hkscs",
    xxbig5: "big5hkscs"
  };
});

// node_modules/iconv-lite/encodings/index.js
var require_encodings = __commonJS((exports2, module2) => {
  var modules = [
    require_internal(),
    require_utf32(),
    require_utf16(),
    require_utf7(),
    require_sbcs_codec(),
    require_sbcs_data(),
    require_sbcs_data_generated(),
    require_dbcs_codec(),
    require_dbcs_data()
  ];
  for (i2 = 0;i2 < modules.length; i2++) {
    module2 = modules[i2];
    for (enc in module2)
      if (Object.prototype.hasOwnProperty.call(module2, enc))
        exports2[enc] = module2[enc];
  }
  var module2;
  var enc;
  var i2;
});

// node_modules/iconv-lite/lib/streams.js
var require_streams = __commonJS((exports2, module2) => {
  var Buffer2 = require_safer().Buffer;
  module2.exports = function(stream_module) {
    var Transform = stream_module.Transform;
    function IconvLiteEncoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.decodeStrings = false;
      Transform.call(this, options);
    }
    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
      constructor: { value: IconvLiteEncoderStream }
    });
    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
      if (typeof chunk != "string")
        return done(new Error("Iconv encoding stream needs strings as its input."));
      try {
        var res = this.conv.write(chunk);
        if (res && res.length)
          this.push(res);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteEncoderStream.prototype._flush = function(done) {
      try {
        var res = this.conv.end();
        if (res && res.length)
          this.push(res);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteEncoderStream.prototype.collect = function(cb) {
      var chunks = [];
      this.on("error", cb);
      this.on("data", function(chunk) {
        chunks.push(chunk);
      });
      this.on("end", function() {
        cb(null, Buffer2.concat(chunks));
      });
      return this;
    };
    function IconvLiteDecoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.encoding = this.encoding = "utf8";
      Transform.call(this, options);
    }
    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
      constructor: { value: IconvLiteDecoderStream }
    });
    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
      if (!Buffer2.isBuffer(chunk) && !(chunk instanceof Uint8Array))
        return done(new Error("Iconv decoding stream needs buffers as its input."));
      try {
        var res = this.conv.write(chunk);
        if (res && res.length)
          this.push(res, this.encoding);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteDecoderStream.prototype._flush = function(done) {
      try {
        var res = this.conv.end();
        if (res && res.length)
          this.push(res, this.encoding);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteDecoderStream.prototype.collect = function(cb) {
      var res = "";
      this.on("error", cb);
      this.on("data", function(chunk) {
        res += chunk;
      });
      this.on("end", function() {
        cb(null, res);
      });
      return this;
    };
    return {
      IconvLiteEncoderStream,
      IconvLiteDecoderStream
    };
  };
});

// node_modules/iconv-lite/lib/index.js
var require_lib = __commonJS((exports2, module2) => {
  var Buffer2 = require_safer().Buffer;
  var bomHandling = require_bom_handling();
  var iconv = module2.exports;
  iconv.encodings = null;
  iconv.defaultCharUnicode = "�";
  iconv.defaultCharSingleByte = "?";
  iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || "");
    var encoder = iconv.getEncoder(encoding, options);
    var res = encoder.write(str);
    var trail = encoder.end();
    return trail && trail.length > 0 ? Buffer2.concat([res, trail]) : res;
  };
  iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === "string") {
      if (!iconv.skipDecodeWarning) {
        console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding");
        iconv.skipDecodeWarning = true;
      }
      buf = Buffer2.from("" + (buf || ""), "binary");
    }
    var decoder = iconv.getDecoder(encoding, options);
    var res = decoder.write(buf);
    var trail = decoder.end();
    return trail ? res + trail : res;
  };
  iconv.encodingExists = function encodingExists(enc) {
    try {
      iconv.getCodec(enc);
      return true;
    } catch (e) {
      return false;
    }
  };
  iconv.toEncoding = iconv.encode;
  iconv.fromEncoding = iconv.decode;
  iconv._codecDataCache = {};
  iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings)
      iconv.encodings = require_encodings();
    var enc = iconv._canonicalizeEncoding(encoding);
    var codecOptions = {};
    while (true) {
      var codec = iconv._codecDataCache[enc];
      if (codec)
        return codec;
      var codecDef = iconv.encodings[enc];
      switch (typeof codecDef) {
        case "string":
          enc = codecDef;
          break;
        case "object":
          for (var key in codecDef)
            codecOptions[key] = codecDef[key];
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          enc = codecDef.type;
          break;
        case "function":
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          codec = new codecDef(codecOptions, iconv);
          iconv._codecDataCache[codecOptions.encodingName] = codec;
          return codec;
        default:
          throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
      }
    }
  };
  iconv._canonicalizeEncoding = function(encoding) {
    return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
  };
  iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding), encoder = new codec.encoder(options, codec);
    if (codec.bomAware && options && options.addBOM)
      encoder = new bomHandling.PrependBOM(encoder, options);
    return encoder;
  };
  iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);
    if (codec.bomAware && !(options && options.stripBOM === false))
      decoder = new bomHandling.StripBOM(decoder, options);
    return decoder;
  };
  iconv.enableStreamingAPI = function enableStreamingAPI(stream_module2) {
    if (iconv.supportsStreams)
      return;
    var streams = require_streams()(stream_module2);
    iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;
    iconv.encodeStream = function encodeStream(encoding, options) {
      return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    };
    iconv.decodeStream = function decodeStream(encoding, options) {
      return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    };
    iconv.supportsStreams = true;
  };
  var stream_module;
  try {
    stream_module = require("stream");
  } catch (e) {}
  if (stream_module && stream_module.Transform) {
    iconv.enableStreamingAPI(stream_module);
  } else {
    iconv.encodeStream = iconv.decodeStream = function() {
      throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
    };
  }
  if (false) {}
});

// node_modules/unpipe/index.js
var require_unpipe = __commonJS((exports2, module2) => {
  /*!
   * unpipe
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  module2.exports = unpipe;
  function hasPipeDataListeners(stream) {
    var listeners = stream.listeners("data");
    for (var i2 = 0;i2 < listeners.length; i2++) {
      if (listeners[i2].name === "ondata") {
        return true;
      }
    }
    return false;
  }
  function unpipe(stream) {
    if (!stream) {
      throw new TypeError("argument stream is required");
    }
    if (typeof stream.unpipe === "function") {
      stream.unpipe();
      return;
    }
    if (!hasPipeDataListeners(stream)) {
      return;
    }
    var listener;
    var listeners = stream.listeners("close");
    for (var i2 = 0;i2 < listeners.length; i2++) {
      listener = listeners[i2];
      if (listener.name !== "cleanup" && listener.name !== "onclose") {
        continue;
      }
      listener.call(stream);
    }
  }
});

// node_modules/raw-body/index.js
var require_raw_body = __commonJS((exports2, module2) => {
  /*!
   * raw-body
   * Copyright(c) 2013-2014 Jonathan Ong
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var asyncHooks = tryRequireAsyncHooks();
  var bytes = require_bytes();
  var createError = require_http_errors();
  var iconv = require_lib();
  var unpipe = require_unpipe();
  module2.exports = getRawBody;
  var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;
  function getDecoder(encoding) {
    if (!encoding)
      return null;
    try {
      return iconv.getDecoder(encoding);
    } catch (e) {
      if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message))
        throw e;
      throw createError(415, "specified encoding unsupported", {
        encoding,
        type: "encoding.unsupported"
      });
    }
  }
  function getRawBody(stream, options, callback) {
    var done = callback;
    var opts = options || {};
    if (stream === undefined) {
      throw new TypeError("argument stream is required");
    } else if (typeof stream !== "object" || stream === null || typeof stream.on !== "function") {
      throw new TypeError("argument stream must be a stream");
    }
    if (options === true || typeof options === "string") {
      opts = {
        encoding: options
      };
    }
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    if (done !== undefined && typeof done !== "function") {
      throw new TypeError("argument callback must be a function");
    }
    if (!done && !global.Promise) {
      throw new TypeError("argument callback is required");
    }
    var encoding = opts.encoding !== true ? opts.encoding : "utf-8";
    var limit = bytes.parse(opts.limit);
    var length = opts.length != null && !isNaN(opts.length) ? parseInt(opts.length, 10) : null;
    if (done) {
      return readStream(stream, encoding, length, limit, wrap(done));
    }
    return new Promise(function executor(resolve, reject) {
      readStream(stream, encoding, length, limit, function onRead(err2, buf) {
        if (err2)
          return reject(err2);
        resolve(buf);
      });
    });
  }
  function halt(stream) {
    unpipe(stream);
    if (typeof stream.pause === "function") {
      stream.pause();
    }
  }
  function readStream(stream, encoding, length, limit, callback) {
    var complete = false;
    var sync = true;
    if (limit !== null && length !== null && length > limit) {
      return done(createError(413, "request entity too large", {
        expected: length,
        length,
        limit,
        type: "entity.too.large"
      }));
    }
    var state = stream._readableState;
    if (stream._decoder || state && (state.encoding || state.decoder)) {
      return done(createError(500, "stream encoding should not be set", {
        type: "stream.encoding.set"
      }));
    }
    if (typeof stream.readable !== "undefined" && !stream.readable) {
      return done(createError(500, "stream is not readable", {
        type: "stream.not.readable"
      }));
    }
    var received = 0;
    var decoder;
    try {
      decoder = getDecoder(encoding);
    } catch (err2) {
      return done(err2);
    }
    var buffer = decoder ? "" : [];
    stream.on("aborted", onAborted);
    stream.on("close", cleanup);
    stream.on("data", onData);
    stream.on("end", onEnd);
    stream.on("error", onEnd);
    sync = false;
    function done() {
      var args = new Array(arguments.length);
      for (var i2 = 0;i2 < args.length; i2++) {
        args[i2] = arguments[i2];
      }
      complete = true;
      if (sync) {
        process.nextTick(invokeCallback);
      } else {
        invokeCallback();
      }
      function invokeCallback() {
        cleanup();
        if (args[0]) {
          halt(stream);
        }
        callback.apply(null, args);
      }
    }
    function onAborted() {
      if (complete)
        return;
      done(createError(400, "request aborted", {
        code: "ECONNABORTED",
        expected: length,
        length,
        received,
        type: "request.aborted"
      }));
    }
    function onData(chunk) {
      if (complete)
        return;
      received += chunk.length;
      if (limit !== null && received > limit) {
        done(createError(413, "request entity too large", {
          limit,
          received,
          type: "entity.too.large"
        }));
      } else if (decoder) {
        buffer += decoder.write(chunk);
      } else {
        buffer.push(chunk);
      }
    }
    function onEnd(err2) {
      if (complete)
        return;
      if (err2)
        return done(err2);
      if (length !== null && received !== length) {
        done(createError(400, "request size did not match content length", {
          expected: length,
          length,
          received,
          type: "request.size.invalid"
        }));
      } else {
        var string = decoder ? buffer + (decoder.end() || "") : Buffer.concat(buffer);
        done(null, string);
      }
    }
    function cleanup() {
      buffer = null;
      stream.removeListener("aborted", onAborted);
      stream.removeListener("data", onData);
      stream.removeListener("end", onEnd);
      stream.removeListener("error", onEnd);
      stream.removeListener("close", cleanup);
    }
  }
  function tryRequireAsyncHooks() {
    try {
      return require("async_hooks");
    } catch (e) {
      return {};
    }
  }
  function wrap(fn) {
    var res;
    if (asyncHooks.AsyncResource) {
      res = new asyncHooks.AsyncResource(fn.name || "bound-anonymous-fn");
    }
    if (!res || !res.runInAsyncScope) {
      return fn;
    }
    return res.runInAsyncScope.bind(res, fn, null);
  }
});

// node_modules/content-type/index.js
var require_content_type = __commonJS((exports2) => {
  /*!
   * content-type
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
  var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
  var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;
  var QUOTE_REGEXP = /([\\"])/g;
  var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
  exports2.format = format2;
  exports2.parse = parse2;
  function format2(obj) {
    if (!obj || typeof obj !== "object") {
      throw new TypeError("argument obj is required");
    }
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || !TYPE_REGEXP.test(type)) {
      throw new TypeError("invalid type");
    }
    var string = type;
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i2 = 0;i2 < params.length; i2++) {
        param = params[i2];
        if (!TOKEN_REGEXP.test(param)) {
          throw new TypeError("invalid parameter name");
        }
        string += "; " + param + "=" + qstring(parameters[param]);
      }
    }
    return string;
  }
  function parse2(string) {
    if (!string) {
      throw new TypeError("argument string is required");
    }
    var header = typeof string === "object" ? getcontenttype(string) : string;
    if (typeof header !== "string") {
      throw new TypeError("argument string is required to be a string");
    }
    var index = header.indexOf(";");
    var type = index !== -1 ? header.slice(0, index).trim() : header.trim();
    if (!TYPE_REGEXP.test(type)) {
      throw new TypeError("invalid media type");
    }
    var obj = new ContentType(type.toLowerCase());
    if (index !== -1) {
      var key;
      var match;
      var value;
      PARAM_REGEXP.lastIndex = index;
      while (match = PARAM_REGEXP.exec(header)) {
        if (match.index !== index) {
          throw new TypeError("invalid parameter format");
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (value.charCodeAt(0) === 34) {
          value = value.slice(1, -1);
          if (value.indexOf("\\") !== -1) {
            value = value.replace(QESC_REGEXP, "$1");
          }
        }
        obj.parameters[key] = value;
      }
      if (index !== header.length) {
        throw new TypeError("invalid parameter format");
      }
    }
    return obj;
  }
  function getcontenttype(obj) {
    var header;
    if (typeof obj.getHeader === "function") {
      header = obj.getHeader("content-type");
    } else if (typeof obj.headers === "object") {
      header = obj.headers && obj.headers["content-type"];
    }
    if (typeof header !== "string") {
      throw new TypeError("content-type header is missing from object");
    }
    return header;
  }
  function qstring(val) {
    var str = String(val);
    if (TOKEN_REGEXP.test(str)) {
      return str;
    }
    if (str.length > 0 && !TEXT_REGEXP.test(str)) {
      throw new TypeError("invalid parameter value");
    }
    return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
  }
  function ContentType(type) {
    this.parameters = Object.create(null);
    this.type = type;
  }
});

// node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS((exports2, module2) => {
  module2.exports = {
    kClose: Symbol("close"),
    kDestroy: Symbol("destroy"),
    kDispatch: Symbol("dispatch"),
    kUrl: Symbol("url"),
    kWriting: Symbol("writing"),
    kResuming: Symbol("resuming"),
    kQueue: Symbol("queue"),
    kConnect: Symbol("connect"),
    kConnecting: Symbol("connecting"),
    kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
    kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
    kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
    kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
    kKeepAlive: Symbol("keep alive"),
    kHeadersTimeout: Symbol("headers timeout"),
    kBodyTimeout: Symbol("body timeout"),
    kServerName: Symbol("server name"),
    kLocalAddress: Symbol("local address"),
    kHost: Symbol("host"),
    kNoRef: Symbol("no ref"),
    kBodyUsed: Symbol("used"),
    kBody: Symbol("abstracted request body"),
    kRunning: Symbol("running"),
    kBlocking: Symbol("blocking"),
    kPending: Symbol("pending"),
    kSize: Symbol("size"),
    kBusy: Symbol("busy"),
    kQueued: Symbol("queued"),
    kFree: Symbol("free"),
    kConnected: Symbol("connected"),
    kClosed: Symbol("closed"),
    kNeedDrain: Symbol("need drain"),
    kReset: Symbol("reset"),
    kDestroyed: Symbol.for("nodejs.stream.destroyed"),
    kResume: Symbol("resume"),
    kOnError: Symbol("on error"),
    kMaxHeadersSize: Symbol("max headers size"),
    kRunningIdx: Symbol("running index"),
    kPendingIdx: Symbol("pending index"),
    kError: Symbol("error"),
    kClients: Symbol("clients"),
    kClient: Symbol("client"),
    kParser: Symbol("parser"),
    kOnDestroyed: Symbol("destroy callbacks"),
    kPipelining: Symbol("pipelining"),
    kSocket: Symbol("socket"),
    kHostHeader: Symbol("host header"),
    kConnector: Symbol("connector"),
    kStrictContentLength: Symbol("strict content length"),
    kMaxRedirections: Symbol("maxRedirections"),
    kMaxRequests: Symbol("maxRequestsPerClient"),
    kProxy: Symbol("proxy agent options"),
    kCounter: Symbol("socket request counter"),
    kMaxResponseSize: Symbol("max response size"),
    kHTTP2Session: Symbol("http2Session"),
    kHTTP2SessionState: Symbol("http2Session state"),
    kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
    kConstruct: Symbol("constructable"),
    kListeners: Symbol("listeners"),
    kHTTPContext: Symbol("http context"),
    kMaxConcurrentStreams: Symbol("max concurrent streams"),
    kNoProxyAgent: Symbol("no proxy agent"),
    kHttpProxyAgent: Symbol("http proxy agent"),
    kHttpsProxyAgent: Symbol("https proxy agent")
  };
});

// node_modules/undici/lib/util/timers.js
var require_timers = __commonJS((exports2, module2) => {
  var fastNow = 0;
  var RESOLUTION_MS = 1000;
  var TICK_MS = (RESOLUTION_MS >> 1) - 1;
  var fastNowTimeout;
  var kFastTimer = Symbol("kFastTimer");
  var fastTimers = [];
  var NOT_IN_LIST = -2;
  var TO_BE_CLEARED = -1;
  var PENDING = 0;
  var ACTIVE = 1;
  function onTick() {
    fastNow += TICK_MS;
    let idx = 0;
    let len = fastTimers.length;
    while (idx < len) {
      const timer = fastTimers[idx];
      if (timer._state === PENDING) {
        timer._idleStart = fastNow - TICK_MS;
        timer._state = ACTIVE;
      } else if (timer._state === ACTIVE && fastNow >= timer._idleStart + timer._idleTimeout) {
        timer._state = TO_BE_CLEARED;
        timer._idleStart = -1;
        timer._onTimeout(timer._timerArg);
      }
      if (timer._state === TO_BE_CLEARED) {
        timer._state = NOT_IN_LIST;
        if (--len !== 0) {
          fastTimers[idx] = fastTimers[len];
        }
      } else {
        ++idx;
      }
    }
    fastTimers.length = len;
    if (fastTimers.length !== 0) {
      refreshTimeout();
    }
  }
  function refreshTimeout() {
    if (fastNowTimeout) {
      fastNowTimeout.refresh();
    } else {
      clearTimeout(fastNowTimeout);
      fastNowTimeout = setTimeout(onTick, TICK_MS);
      if (fastNowTimeout.unref) {
        fastNowTimeout.unref();
      }
    }
  }

  class FastTimer {
    [kFastTimer] = true;
    _state = NOT_IN_LIST;
    _idleTimeout = -1;
    _idleStart = -1;
    _onTimeout;
    _timerArg;
    constructor(callback, delay, arg) {
      this._onTimeout = callback;
      this._idleTimeout = delay;
      this._timerArg = arg;
      this.refresh();
    }
    refresh() {
      if (this._state === NOT_IN_LIST) {
        fastTimers.push(this);
      }
      if (!fastNowTimeout || fastTimers.length === 1) {
        refreshTimeout();
      }
      this._state = PENDING;
    }
    clear() {
      this._state = TO_BE_CLEARED;
      this._idleStart = -1;
    }
  }
  module2.exports = {
    setTimeout(callback, delay, arg) {
      return delay <= RESOLUTION_MS ? setTimeout(callback, delay, arg) : new FastTimer(callback, delay, arg);
    },
    clearTimeout(timeout) {
      if (timeout[kFastTimer]) {
        timeout.clear();
      } else {
        clearTimeout(timeout);
      }
    },
    setFastTimeout(callback, delay, arg) {
      return new FastTimer(callback, delay, arg);
    },
    clearFastTimeout(timeout) {
      timeout.clear();
    },
    now() {
      return fastNow;
    },
    tick(delay = 0) {
      fastNow += delay - RESOLUTION_MS + 1;
      onTick();
      onTick();
    },
    reset() {
      fastNow = 0;
      fastTimers.length = 0;
      clearTimeout(fastNowTimeout);
      fastNowTimeout = null;
    },
    kFastTimer
  };
});

// node_modules/undici/lib/core/errors.js
var require_errors = __commonJS((exports2, module2) => {
  class UndiciError extends Error {
    constructor(message, options) {
      super(message, options);
      this.name = "UndiciError";
      this.code = "UND_ERR";
    }
  }

  class ConnectTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "ConnectTimeoutError";
      this.message = message || "Connect Timeout Error";
      this.code = "UND_ERR_CONNECT_TIMEOUT";
    }
  }

  class HeadersTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "HeadersTimeoutError";
      this.message = message || "Headers Timeout Error";
      this.code = "UND_ERR_HEADERS_TIMEOUT";
    }
  }

  class HeadersOverflowError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "HeadersOverflowError";
      this.message = message || "Headers Overflow Error";
      this.code = "UND_ERR_HEADERS_OVERFLOW";
    }
  }

  class BodyTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "BodyTimeoutError";
      this.message = message || "Body Timeout Error";
      this.code = "UND_ERR_BODY_TIMEOUT";
    }
  }

  class ResponseStatusCodeError extends UndiciError {
    constructor(message, statusCode, headers, body) {
      super(message);
      this.name = "ResponseStatusCodeError";
      this.message = message || "Response Status Code Error";
      this.code = "UND_ERR_RESPONSE_STATUS_CODE";
      this.body = body;
      this.status = statusCode;
      this.statusCode = statusCode;
      this.headers = headers;
    }
  }

  class InvalidArgumentError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "InvalidArgumentError";
      this.message = message || "Invalid Argument Error";
      this.code = "UND_ERR_INVALID_ARG";
    }
  }

  class InvalidReturnValueError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "InvalidReturnValueError";
      this.message = message || "Invalid Return Value Error";
      this.code = "UND_ERR_INVALID_RETURN_VALUE";
    }
  }

  class AbortError2 extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "AbortError";
      this.message = message || "The operation was aborted";
    }
  }

  class RequestAbortedError extends AbortError2 {
    constructor(message) {
      super(message);
      this.name = "AbortError";
      this.message = message || "Request aborted";
      this.code = "UND_ERR_ABORTED";
    }
  }

  class InformationalError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "InformationalError";
      this.message = message || "Request information";
      this.code = "UND_ERR_INFO";
    }
  }

  class RequestContentLengthMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "RequestContentLengthMismatchError";
      this.message = message || "Request body length does not match content-length header";
      this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
    }
  }

  class ResponseContentLengthMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "ResponseContentLengthMismatchError";
      this.message = message || "Response body length does not match content-length header";
      this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
    }
  }

  class ClientDestroyedError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "ClientDestroyedError";
      this.message = message || "The client is destroyed";
      this.code = "UND_ERR_DESTROYED";
    }
  }

  class ClientClosedError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "ClientClosedError";
      this.message = message || "The client is closed";
      this.code = "UND_ERR_CLOSED";
    }
  }

  class SocketError extends UndiciError {
    constructor(message, socket) {
      super(message);
      this.name = "SocketError";
      this.message = message || "Socket error";
      this.code = "UND_ERR_SOCKET";
      this.socket = socket;
    }
  }

  class NotSupportedError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "NotSupportedError";
      this.message = message || "Not supported error";
      this.code = "UND_ERR_NOT_SUPPORTED";
    }
  }

  class BalancedPoolMissingUpstreamError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "MissingUpstreamError";
      this.message = message || "No upstream has been added to the BalancedPool";
      this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
    }
  }

  class HTTPParserError extends Error {
    constructor(message, code2, data) {
      super(message);
      this.name = "HTTPParserError";
      this.code = code2 ? `HPE_${code2}` : undefined;
      this.data = data ? data.toString() : undefined;
    }
  }

  class ResponseExceededMaxSizeError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "ResponseExceededMaxSizeError";
      this.message = message || "Response content exceeded max size";
      this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
    }
  }

  class RequestRetryError extends UndiciError {
    constructor(message, code2, { headers, data }) {
      super(message);
      this.name = "RequestRetryError";
      this.message = message || "Request retry error";
      this.code = "UND_ERR_REQ_RETRY";
      this.statusCode = code2;
      this.data = data;
      this.headers = headers;
    }
  }

  class ResponseError extends UndiciError {
    constructor(message, code2, { headers, body }) {
      super(message);
      this.name = "ResponseError";
      this.message = message || "Response error";
      this.code = "UND_ERR_RESPONSE";
      this.statusCode = code2;
      this.body = body;
      this.headers = headers;
    }
  }

  class SecureProxyConnectionError extends UndiciError {
    constructor(cause, message, options = {}) {
      super(message, { cause, ...options });
      this.name = "SecureProxyConnectionError";
      this.message = message || "Secure Proxy Connection failed";
      this.code = "UND_ERR_PRX_TLS";
      this.cause = cause;
    }
  }
  module2.exports = {
    AbortError: AbortError2,
    HTTPParserError,
    UndiciError,
    HeadersTimeoutError,
    HeadersOverflowError,
    BodyTimeoutError,
    RequestContentLengthMismatchError,
    ConnectTimeoutError,
    ResponseStatusCodeError,
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError,
    ClientDestroyedError,
    ClientClosedError,
    InformationalError,
    SocketError,
    NotSupportedError,
    ResponseContentLengthMismatchError,
    BalancedPoolMissingUpstreamError,
    ResponseExceededMaxSizeError,
    RequestRetryError,
    ResponseError,
    SecureProxyConnectionError
  };
});

// node_modules/undici/lib/core/constants.js
var require_constants = __commonJS((exports2, module2) => {
  var wellknownHeaderNames = [
    "Accept",
    "Accept-Encoding",
    "Accept-Language",
    "Accept-Ranges",
    "Access-Control-Allow-Credentials",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Origin",
    "Access-Control-Expose-Headers",
    "Access-Control-Max-Age",
    "Access-Control-Request-Headers",
    "Access-Control-Request-Method",
    "Age",
    "Allow",
    "Alt-Svc",
    "Alt-Used",
    "Authorization",
    "Cache-Control",
    "Clear-Site-Data",
    "Connection",
    "Content-Disposition",
    "Content-Encoding",
    "Content-Language",
    "Content-Length",
    "Content-Location",
    "Content-Range",
    "Content-Security-Policy",
    "Content-Security-Policy-Report-Only",
    "Content-Type",
    "Cookie",
    "Cross-Origin-Embedder-Policy",
    "Cross-Origin-Opener-Policy",
    "Cross-Origin-Resource-Policy",
    "Date",
    "Device-Memory",
    "Downlink",
    "ECT",
    "ETag",
    "Expect",
    "Expect-CT",
    "Expires",
    "Forwarded",
    "From",
    "Host",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Range",
    "If-Unmodified-Since",
    "Keep-Alive",
    "Last-Modified",
    "Link",
    "Location",
    "Max-Forwards",
    "Origin",
    "Permissions-Policy",
    "Pragma",
    "Proxy-Authenticate",
    "Proxy-Authorization",
    "RTT",
    "Range",
    "Referer",
    "Referrer-Policy",
    "Refresh",
    "Retry-After",
    "Sec-WebSocket-Accept",
    "Sec-WebSocket-Extensions",
    "Sec-WebSocket-Key",
    "Sec-WebSocket-Protocol",
    "Sec-WebSocket-Version",
    "Server",
    "Server-Timing",
    "Service-Worker-Allowed",
    "Service-Worker-Navigation-Preload",
    "Set-Cookie",
    "SourceMap",
    "Strict-Transport-Security",
    "Supports-Loading-Mode",
    "TE",
    "Timing-Allow-Origin",
    "Trailer",
    "Transfer-Encoding",
    "Upgrade",
    "Upgrade-Insecure-Requests",
    "User-Agent",
    "Vary",
    "Via",
    "WWW-Authenticate",
    "X-Content-Type-Options",
    "X-DNS-Prefetch-Control",
    "X-Frame-Options",
    "X-Permitted-Cross-Domain-Policies",
    "X-Powered-By",
    "X-Requested-With",
    "X-XSS-Protection"
  ];
  var headerNameLowerCasedRecord = {};
  Object.setPrototypeOf(headerNameLowerCasedRecord, null);
  var wellknownHeaderNameBuffers = {};
  Object.setPrototypeOf(wellknownHeaderNameBuffers, null);
  function getHeaderNameAsBuffer(header) {
    let buffer = wellknownHeaderNameBuffers[header];
    if (buffer === undefined) {
      buffer = Buffer.from(header);
    }
    return buffer;
  }
  for (let i2 = 0;i2 < wellknownHeaderNames.length; ++i2) {
    const key = wellknownHeaderNames[i2];
    const lowerCasedKey = key.toLowerCase();
    headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
  }
  module2.exports = {
    wellknownHeaderNames,
    headerNameLowerCasedRecord,
    getHeaderNameAsBuffer
  };
});

// node_modules/undici/lib/core/tree.js
var require_tree = __commonJS((exports2, module2) => {
  var {
    wellknownHeaderNames,
    headerNameLowerCasedRecord
  } = require_constants();

  class TstNode {
    value = null;
    left = null;
    middle = null;
    right = null;
    code;
    constructor(key, value, index) {
      if (index === undefined || index >= key.length) {
        throw new TypeError("Unreachable");
      }
      const code2 = this.code = key.charCodeAt(index);
      if (code2 > 127) {
        throw new TypeError("key must be ascii string");
      }
      if (key.length !== ++index) {
        this.middle = new TstNode(key, value, index);
      } else {
        this.value = value;
      }
    }
    add(key, value) {
      const length = key.length;
      if (length === 0) {
        throw new TypeError("Unreachable");
      }
      let index = 0;
      let node = this;
      while (true) {
        const code2 = key.charCodeAt(index);
        if (code2 > 127) {
          throw new TypeError("key must be ascii string");
        }
        if (node.code === code2) {
          if (length === ++index) {
            node.value = value;
            break;
          } else if (node.middle !== null) {
            node = node.middle;
          } else {
            node.middle = new TstNode(key, value, index);
            break;
          }
        } else if (node.code < code2) {
          if (node.left !== null) {
            node = node.left;
          } else {
            node.left = new TstNode(key, value, index);
            break;
          }
        } else if (node.right !== null) {
          node = node.right;
        } else {
          node.right = new TstNode(key, value, index);
          break;
        }
      }
    }
    search(key) {
      const keylength = key.length;
      let index = 0;
      let node = this;
      while (node !== null && index < keylength) {
        let code2 = key[index];
        if (code2 <= 90 && code2 >= 65) {
          code2 |= 32;
        }
        while (node !== null) {
          if (code2 === node.code) {
            if (keylength === ++index) {
              return node;
            }
            node = node.middle;
            break;
          }
          node = node.code < code2 ? node.left : node.right;
        }
      }
      return null;
    }
  }

  class TernarySearchTree {
    node = null;
    insert(key, value) {
      if (this.node === null) {
        this.node = new TstNode(key, value, 0);
      } else {
        this.node.add(key, value);
      }
    }
    lookup(key) {
      return this.node?.search(key)?.value ?? null;
    }
  }
  var tree = new TernarySearchTree;
  for (let i2 = 0;i2 < wellknownHeaderNames.length; ++i2) {
    const key = headerNameLowerCasedRecord[wellknownHeaderNames[i2]];
    tree.insert(key, key);
  }
  module2.exports = {
    TernarySearchTree,
    tree
  };
});

// node_modules/undici/lib/core/util.js
var require_util = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { kDestroyed, kBodyUsed, kListeners, kBody } = require_symbols();
  var { IncomingMessage } = require("node:http");
  var stream = require("node:stream");
  var net = require("node:net");
  var { Blob: Blob2 } = require("node:buffer");
  var nodeUtil = require("node:util");
  var { stringify } = require("node:querystring");
  var { EventEmitter: EE } = require("node:events");
  var timers = require_timers();
  var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
  var { headerNameLowerCasedRecord } = require_constants();
  var { tree } = require_tree();
  var [nodeMajor, nodeMinor] = process.versions.node.split(".", 2).map((v) => Number(v));

  class BodyAsyncIterable {
    constructor(body) {
      this[kBody] = body;
      this[kBodyUsed] = false;
    }
    async* [Symbol.asyncIterator]() {
      assert(!this[kBodyUsed], "disturbed");
      this[kBodyUsed] = true;
      yield* this[kBody];
    }
  }
  function noop() {}
  function wrapRequestBody(body) {
    if (isStream(body)) {
      if (bodyLength(body) === 0) {
        body.on("data", function() {
          assert(false);
        });
      }
      if (typeof body.readableDidRead !== "boolean") {
        body[kBodyUsed] = false;
        EE.prototype.on.call(body, "data", function() {
          this[kBodyUsed] = true;
        });
      }
      return body;
    } else if (body && typeof body.pipeTo === "function") {
      return new BodyAsyncIterable(body);
    } else if (body && typeof body !== "string" && !ArrayBuffer.isView(body) && isIterable(body)) {
      return new BodyAsyncIterable(body);
    } else {
      return body;
    }
  }
  function isStream(obj) {
    return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
  }
  function isBlobLike(object) {
    if (object === null) {
      return false;
    } else if (object instanceof Blob2) {
      return true;
    } else if (typeof object !== "object") {
      return false;
    } else {
      const sTag = object[Symbol.toStringTag];
      return (sTag === "Blob" || sTag === "File") && (("stream" in object) && typeof object.stream === "function" || ("arrayBuffer" in object) && typeof object.arrayBuffer === "function");
    }
  }
  function serializePathWithQuery(url, queryParams) {
    if (url.includes("?") || url.includes("#")) {
      throw new Error('Query params cannot be passed when url already contains "?" or "#".');
    }
    const stringified = stringify(queryParams);
    if (stringified) {
      url += "?" + stringified;
    }
    return url;
  }
  function isValidPort(port) {
    const value = parseInt(port, 10);
    return value === Number(port) && value >= 0 && value <= 65535;
  }
  function isHttpOrHttpsPrefixed(value) {
    return value != null && value[0] === "h" && value[1] === "t" && value[2] === "t" && value[3] === "p" && (value[4] === ":" || value[4] === "s" && value[5] === ":");
  }
  function parseURL(url) {
    if (typeof url === "string") {
      url = new URL(url);
      if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      return url;
    }
    if (!url || typeof url !== "object") {
      throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
    }
    if (!(url instanceof URL)) {
      if (url.port != null && url.port !== "" && isValidPort(url.port) === false) {
        throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
      }
      if (url.path != null && typeof url.path !== "string") {
        throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
      }
      if (url.pathname != null && typeof url.pathname !== "string") {
        throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
      }
      if (url.hostname != null && typeof url.hostname !== "string") {
        throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
      }
      if (url.origin != null && typeof url.origin !== "string") {
        throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
      }
      if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
      let origin = url.origin != null ? url.origin : `${url.protocol || ""}//${url.hostname || ""}:${port}`;
      let path = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
      if (origin[origin.length - 1] === "/") {
        origin = origin.slice(0, origin.length - 1);
      }
      if (path && path[0] !== "/") {
        path = `/${path}`;
      }
      return new URL(`${origin}${path}`);
    }
    if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {
      throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
    }
    return url;
  }
  function parseOrigin(url) {
    url = parseURL(url);
    if (url.pathname !== "/" || url.search || url.hash) {
      throw new InvalidArgumentError("invalid url");
    }
    return url;
  }
  function getHostname(host) {
    if (host[0] === "[") {
      const idx2 = host.indexOf("]");
      assert(idx2 !== -1);
      return host.substring(1, idx2);
    }
    const idx = host.indexOf(":");
    if (idx === -1)
      return host;
    return host.substring(0, idx);
  }
  function getServerName(host) {
    if (!host) {
      return null;
    }
    assert(typeof host === "string");
    const servername = getHostname(host);
    if (net.isIP(servername)) {
      return "";
    }
    return servername;
  }
  function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  function isAsyncIterable(obj) {
    return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
  }
  function isIterable(obj) {
    return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
  }
  function bodyLength(body) {
    if (body == null) {
      return 0;
    } else if (isStream(body)) {
      const state = body._readableState;
      return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
    } else if (isBlobLike(body)) {
      return body.size != null ? body.size : null;
    } else if (isBuffer(body)) {
      return body.byteLength;
    }
    return null;
  }
  function isDestroyed(body) {
    return body && !!(body.destroyed || body[kDestroyed] || stream.isDestroyed?.(body));
  }
  function destroy(stream2, err2) {
    if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {
      return;
    }
    if (typeof stream2.destroy === "function") {
      if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
        stream2.socket = null;
      }
      stream2.destroy(err2);
    } else if (err2) {
      queueMicrotask(() => {
        stream2.emit("error", err2);
      });
    }
    if (stream2.destroyed !== true) {
      stream2[kDestroyed] = true;
    }
  }
  var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
  function parseKeepAliveTimeout(val) {
    const m = val.match(KEEPALIVE_TIMEOUT_EXPR);
    return m ? parseInt(m[1], 10) * 1000 : null;
  }
  function headerNameToString(value) {
    return typeof value === "string" ? headerNameLowerCasedRecord[value] ?? value.toLowerCase() : tree.lookup(value) ?? value.toString("latin1").toLowerCase();
  }
  function bufferToLowerCasedHeaderName(value) {
    return tree.lookup(value) ?? value.toString("latin1").toLowerCase();
  }
  function parseHeaders(headers, obj) {
    if (obj === undefined)
      obj = {};
    for (let i2 = 0;i2 < headers.length; i2 += 2) {
      const key = headerNameToString(headers[i2]);
      let val = obj[key];
      if (val) {
        if (typeof val === "string") {
          val = [val];
          obj[key] = val;
        }
        val.push(headers[i2 + 1].toString("utf8"));
      } else {
        const headersValue = headers[i2 + 1];
        if (typeof headersValue === "string") {
          obj[key] = headersValue;
        } else {
          obj[key] = Array.isArray(headersValue) ? headersValue.map((x2) => x2.toString("utf8")) : headersValue.toString("utf8");
        }
      }
    }
    if ("content-length" in obj && "content-disposition" in obj) {
      obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
    }
    return obj;
  }
  function parseRawHeaders(headers) {
    const headersLength = headers.length;
    const ret = new Array(headersLength);
    let hasContentLength = false;
    let contentDispositionIdx = -1;
    let key;
    let val;
    let kLen = 0;
    for (let n = 0;n < headersLength; n += 2) {
      key = headers[n];
      val = headers[n + 1];
      typeof key !== "string" && (key = key.toString());
      typeof val !== "string" && (val = val.toString("utf8"));
      kLen = key.length;
      if (kLen === 14 && key[7] === "-" && (key === "content-length" || key.toLowerCase() === "content-length")) {
        hasContentLength = true;
      } else if (kLen === 19 && key[7] === "-" && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) {
        contentDispositionIdx = n + 1;
      }
      ret[n] = key;
      ret[n + 1] = val;
    }
    if (hasContentLength && contentDispositionIdx !== -1) {
      ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
    }
    return ret;
  }
  function encodeRawHeaders(headers) {
    if (!Array.isArray(headers)) {
      throw new TypeError("expected headers to be an array");
    }
    return headers.map((x2) => Buffer.from(x2));
  }
  function isBuffer(buffer) {
    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
  }
  function assertRequestHandler(handler, method, upgrade) {
    if (!handler || typeof handler !== "object") {
      throw new InvalidArgumentError("handler must be an object");
    }
    if (typeof handler.onRequestStart === "function") {
      return;
    }
    if (typeof handler.onConnect !== "function") {
      throw new InvalidArgumentError("invalid onConnect method");
    }
    if (typeof handler.onError !== "function") {
      throw new InvalidArgumentError("invalid onError method");
    }
    if (typeof handler.onBodySent !== "function" && handler.onBodySent !== undefined) {
      throw new InvalidArgumentError("invalid onBodySent method");
    }
    if (upgrade || method === "CONNECT") {
      if (typeof handler.onUpgrade !== "function") {
        throw new InvalidArgumentError("invalid onUpgrade method");
      }
    } else {
      if (typeof handler.onHeaders !== "function") {
        throw new InvalidArgumentError("invalid onHeaders method");
      }
      if (typeof handler.onData !== "function") {
        throw new InvalidArgumentError("invalid onData method");
      }
      if (typeof handler.onComplete !== "function") {
        throw new InvalidArgumentError("invalid onComplete method");
      }
    }
  }
  function isDisturbed(body) {
    return !!(body && (stream.isDisturbed(body) || body[kBodyUsed]));
  }
  function getSocketInfo(socket) {
    return {
      localAddress: socket.localAddress,
      localPort: socket.localPort,
      remoteAddress: socket.remoteAddress,
      remotePort: socket.remotePort,
      remoteFamily: socket.remoteFamily,
      timeout: socket.timeout,
      bytesWritten: socket.bytesWritten,
      bytesRead: socket.bytesRead
    };
  }
  function ReadableStreamFrom(iterable) {
    let iterator;
    return new ReadableStream({
      async start() {
        iterator = iterable[Symbol.asyncIterator]();
      },
      pull(controller) {
        async function pull() {
          const { done, value } = await iterator.next();
          if (done) {
            queueMicrotask(() => {
              controller.close();
              controller.byobRequest?.respond(0);
            });
          } else {
            const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
            if (buf.byteLength) {
              controller.enqueue(new Uint8Array(buf));
            } else {
              return await pull();
            }
          }
        }
        return pull();
      },
      async cancel() {
        await iterator.return();
      },
      type: "bytes"
    });
  }
  function isFormDataLike(object) {
    return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
  }
  function addAbortListener(signal, listener) {
    if ("addEventListener" in signal) {
      signal.addEventListener("abort", listener, { once: true });
      return () => signal.removeEventListener("abort", listener);
    }
    signal.once("abort", listener);
    return () => signal.removeListener("abort", listener);
  }
  var toUSVString = (() => {
    if (typeof String.prototype.toWellFormed === "function") {
      return (value) => `${value}`.toWellFormed();
    } else {
      return nodeUtil.toUSVString;
    }
  })();
  var isUSVString = (() => {
    if (typeof String.prototype.isWellFormed === "function") {
      return (value) => `${value}`.isWellFormed();
    } else {
      return (value) => toUSVString(value) === `${value}`;
    }
  })();
  function isTokenCharCode(c) {
    switch (c) {
      case 34:
      case 40:
      case 41:
      case 44:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 91:
      case 92:
      case 93:
      case 123:
      case 125:
        return false;
      default:
        return c >= 33 && c <= 126;
    }
  }
  function isValidHTTPToken(characters) {
    if (characters.length === 0) {
      return false;
    }
    for (let i2 = 0;i2 < characters.length; ++i2) {
      if (!isTokenCharCode(characters.charCodeAt(i2))) {
        return false;
      }
    }
    return true;
  }
  var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  function isValidHeaderValue(characters) {
    return !headerCharRegex.test(characters);
  }
  var rangeHeaderRegex = /^bytes (\d+)-(\d+)\/(\d+)?$/;
  function parseRangeHeader(range) {
    if (range == null || range === "")
      return { start: 0, end: null, size: null };
    const m = range ? range.match(rangeHeaderRegex) : null;
    return m ? {
      start: parseInt(m[1]),
      end: m[2] ? parseInt(m[2]) : null,
      size: m[3] ? parseInt(m[3]) : null
    } : null;
  }
  function addListener(obj, name, listener) {
    const listeners = obj[kListeners] ??= [];
    listeners.push([name, listener]);
    obj.on(name, listener);
    return obj;
  }
  function removeAllListeners(obj) {
    if (obj[kListeners] != null) {
      for (const [name, listener] of obj[kListeners]) {
        obj.removeListener(name, listener);
      }
      obj[kListeners] = null;
    }
    return obj;
  }
  function errorRequest(client, request, err2) {
    try {
      request.onError(err2);
      assert(request.aborted);
    } catch (err3) {
      client.emit("error", err3);
    }
  }
  var setupConnectTimeout = process.platform === "win32" ? (socketWeakRef, opts) => {
    if (!opts.timeout) {
      return noop;
    }
    let s1 = null;
    let s2 = null;
    const fastTimer = timers.setFastTimeout(() => {
      s1 = setImmediate(() => {
        s2 = setImmediate(() => onConnectTimeout(socketWeakRef.deref(), opts));
      });
    }, opts.timeout);
    return () => {
      timers.clearFastTimeout(fastTimer);
      clearImmediate(s1);
      clearImmediate(s2);
    };
  } : (socketWeakRef, opts) => {
    if (!opts.timeout) {
      return noop;
    }
    let s1 = null;
    const fastTimer = timers.setFastTimeout(() => {
      s1 = setImmediate(() => {
        onConnectTimeout(socketWeakRef.deref(), opts);
      });
    }, opts.timeout);
    return () => {
      timers.clearFastTimeout(fastTimer);
      clearImmediate(s1);
    };
  };
  function onConnectTimeout(socket, opts) {
    if (socket == null) {
      return;
    }
    let message = "Connect Timeout Error";
    if (Array.isArray(socket.autoSelectFamilyAttemptedAddresses)) {
      message += ` (attempted addresses: ${socket.autoSelectFamilyAttemptedAddresses.join(", ")},`;
    } else {
      message += ` (attempted address: ${opts.hostname}:${opts.port},`;
    }
    message += ` timeout: ${opts.timeout}ms)`;
    destroy(socket, new ConnectTimeoutError(message));
  }
  var kEnumerableProperty = Object.create(null);
  kEnumerableProperty.enumerable = true;
  var normalizedMethodRecordsBase = {
    delete: "DELETE",
    DELETE: "DELETE",
    get: "GET",
    GET: "GET",
    head: "HEAD",
    HEAD: "HEAD",
    options: "OPTIONS",
    OPTIONS: "OPTIONS",
    post: "POST",
    POST: "POST",
    put: "PUT",
    PUT: "PUT"
  };
  var normalizedMethodRecords = {
    ...normalizedMethodRecordsBase,
    patch: "patch",
    PATCH: "PATCH"
  };
  Object.setPrototypeOf(normalizedMethodRecordsBase, null);
  Object.setPrototypeOf(normalizedMethodRecords, null);
  module2.exports = {
    kEnumerableProperty,
    isDisturbed,
    toUSVString,
    isUSVString,
    isBlobLike,
    parseOrigin,
    parseURL,
    getServerName,
    isStream,
    isIterable,
    isAsyncIterable,
    isDestroyed,
    headerNameToString,
    bufferToLowerCasedHeaderName,
    addListener,
    removeAllListeners,
    errorRequest,
    parseRawHeaders,
    encodeRawHeaders,
    parseHeaders,
    parseKeepAliveTimeout,
    destroy,
    bodyLength,
    deepClone,
    ReadableStreamFrom,
    isBuffer,
    assertRequestHandler,
    getSocketInfo,
    isFormDataLike,
    serializePathWithQuery,
    addAbortListener,
    isValidHTTPToken,
    isValidHeaderValue,
    isTokenCharCode,
    parseRangeHeader,
    normalizedMethodRecordsBase,
    normalizedMethodRecords,
    isValidPort,
    isHttpOrHttpsPrefixed,
    nodeMajor,
    nodeMinor,
    safeHTTPMethods: Object.freeze(["GET", "HEAD", "OPTIONS", "TRACE"]),
    wrapRequestBody,
    setupConnectTimeout
  };
});

// node_modules/undici/lib/core/diagnostics.js
var require_diagnostics = __commonJS((exports2, module2) => {
  var diagnosticsChannel = require("node:diagnostics_channel");
  var util2 = require("node:util");
  var undiciDebugLog = util2.debuglog("undici");
  var fetchDebuglog = util2.debuglog("fetch");
  var websocketDebuglog = util2.debuglog("websocket");
  var channels = {
    beforeConnect: diagnosticsChannel.channel("undici:client:beforeConnect"),
    connected: diagnosticsChannel.channel("undici:client:connected"),
    connectError: diagnosticsChannel.channel("undici:client:connectError"),
    sendHeaders: diagnosticsChannel.channel("undici:client:sendHeaders"),
    create: diagnosticsChannel.channel("undici:request:create"),
    bodySent: diagnosticsChannel.channel("undici:request:bodySent"),
    headers: diagnosticsChannel.channel("undici:request:headers"),
    trailers: diagnosticsChannel.channel("undici:request:trailers"),
    error: diagnosticsChannel.channel("undici:request:error"),
    open: diagnosticsChannel.channel("undici:websocket:open"),
    close: diagnosticsChannel.channel("undici:websocket:close"),
    socketError: diagnosticsChannel.channel("undici:websocket:socket_error"),
    ping: diagnosticsChannel.channel("undici:websocket:ping"),
    pong: diagnosticsChannel.channel("undici:websocket:pong")
  };
  var isTrackingClientEvents = false;
  function trackClientEvents(debugLog = undiciDebugLog) {
    if (isTrackingClientEvents) {
      return;
    }
    isTrackingClientEvents = true;
    diagnosticsChannel.subscribe("undici:client:beforeConnect", (evt) => {
      const {
        connectParams: { version, protocol, port, host }
      } = evt;
      debugLog("connecting to %s%s using %s%s", host, port ? `:${port}` : "", protocol, version);
    });
    diagnosticsChannel.subscribe("undici:client:connected", (evt) => {
      const {
        connectParams: { version, protocol, port, host }
      } = evt;
      debugLog("connected to %s%s using %s%s", host, port ? `:${port}` : "", protocol, version);
    });
    diagnosticsChannel.subscribe("undici:client:connectError", (evt) => {
      const {
        connectParams: { version, protocol, port, host },
        error
      } = evt;
      debugLog("connection to %s%s using %s%s errored - %s", host, port ? `:${port}` : "", protocol, version, error.message);
    });
    diagnosticsChannel.subscribe("undici:client:sendHeaders", (evt) => {
      const {
        request: { method, path, origin }
      } = evt;
      debugLog("sending request to %s %s/%s", method, origin, path);
    });
  }
  var isTrackingRequestEvents = false;
  function trackRequestEvents(debugLog = undiciDebugLog) {
    if (isTrackingRequestEvents) {
      return;
    }
    isTrackingRequestEvents = true;
    diagnosticsChannel.subscribe("undici:request:headers", (evt) => {
      const {
        request: { method, path, origin },
        response: { statusCode }
      } = evt;
      debugLog("received response to %s %s/%s - HTTP %d", method, origin, path, statusCode);
    });
    diagnosticsChannel.subscribe("undici:request:trailers", (evt) => {
      const {
        request: { method, path, origin }
      } = evt;
      debugLog("trailers received from %s %s/%s", method, origin, path);
    });
    diagnosticsChannel.subscribe("undici:request:error", (evt) => {
      const {
        request: { method, path, origin },
        error
      } = evt;
      debugLog("request to %s %s/%s errored - %s", method, origin, path, error.message);
    });
  }
  var isTrackingWebSocketEvents = false;
  function trackWebSocketEvents(debugLog = websocketDebuglog) {
    if (isTrackingWebSocketEvents) {
      return;
    }
    isTrackingWebSocketEvents = true;
    diagnosticsChannel.subscribe("undici:websocket:open", (evt) => {
      const {
        address: { address, port }
      } = evt;
      debugLog("connection opened %s%s", address, port ? `:${port}` : "");
    });
    diagnosticsChannel.subscribe("undici:websocket:close", (evt) => {
      const { websocket, code: code2, reason } = evt;
      debugLog("closed connection to %s - %s %s", websocket.url, code2, reason);
    });
    diagnosticsChannel.subscribe("undici:websocket:socket_error", (err2) => {
      debugLog("connection errored - %s", err2.message);
    });
    diagnosticsChannel.subscribe("undici:websocket:ping", (evt) => {
      debugLog("ping received");
    });
    diagnosticsChannel.subscribe("undici:websocket:pong", (evt) => {
      debugLog("pong received");
    });
  }
  if (undiciDebugLog.enabled || fetchDebuglog.enabled) {
    trackClientEvents(fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog);
    trackRequestEvents(fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog);
  }
  if (websocketDebuglog.enabled) {
    trackClientEvents(undiciDebugLog.enabled ? undiciDebugLog : websocketDebuglog);
    trackWebSocketEvents(websocketDebuglog);
  }
  module2.exports = {
    channels
  };
});

// node_modules/undici/lib/core/request.js
var require_request = __commonJS((exports2, module2) => {
  var {
    InvalidArgumentError,
    NotSupportedError
  } = require_errors();
  var assert = require("node:assert");
  var {
    isValidHTTPToken,
    isValidHeaderValue,
    isStream,
    destroy,
    isBuffer,
    isFormDataLike,
    isIterable,
    isBlobLike,
    serializePathWithQuery,
    assertRequestHandler,
    getServerName,
    normalizedMethodRecords
  } = require_util();
  var { channels } = require_diagnostics();
  var { headerNameLowerCasedRecord } = require_constants();
  var invalidPathRegex = /[^\u0021-\u00ff]/;
  var kHandler = Symbol("handler");

  class Request {
    constructor(origin, {
      path,
      method,
      body,
      headers,
      query,
      idempotent,
      blocking,
      upgrade,
      headersTimeout,
      bodyTimeout,
      reset,
      expectContinue,
      servername,
      throwOnError
    }, handler) {
      if (typeof path !== "string") {
        throw new InvalidArgumentError("path must be a string");
      } else if (path[0] !== "/" && !(path.startsWith("http://") || path.startsWith("https://")) && method !== "CONNECT") {
        throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
      } else if (invalidPathRegex.test(path)) {
        throw new InvalidArgumentError("invalid request path");
      }
      if (typeof method !== "string") {
        throw new InvalidArgumentError("method must be a string");
      } else if (normalizedMethodRecords[method] === undefined && !isValidHTTPToken(method)) {
        throw new InvalidArgumentError("invalid request method");
      }
      if (upgrade && typeof upgrade !== "string") {
        throw new InvalidArgumentError("upgrade must be a string");
      }
      if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
        throw new InvalidArgumentError("invalid headersTimeout");
      }
      if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
        throw new InvalidArgumentError("invalid bodyTimeout");
      }
      if (reset != null && typeof reset !== "boolean") {
        throw new InvalidArgumentError("invalid reset");
      }
      if (expectContinue != null && typeof expectContinue !== "boolean") {
        throw new InvalidArgumentError("invalid expectContinue");
      }
      if (throwOnError != null) {
        throw new InvalidArgumentError("invalid throwOnError");
      }
      this.headersTimeout = headersTimeout;
      this.bodyTimeout = bodyTimeout;
      this.method = method;
      this.abort = null;
      if (body == null) {
        this.body = null;
      } else if (isStream(body)) {
        this.body = body;
        const rState = this.body._readableState;
        if (!rState || !rState.autoDestroy) {
          this.endHandler = function autoDestroy() {
            destroy(this);
          };
          this.body.on("end", this.endHandler);
        }
        this.errorHandler = (err2) => {
          if (this.abort) {
            this.abort(err2);
          } else {
            this.error = err2;
          }
        };
        this.body.on("error", this.errorHandler);
      } else if (isBuffer(body)) {
        this.body = body.byteLength ? body : null;
      } else if (ArrayBuffer.isView(body)) {
        this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
      } else if (body instanceof ArrayBuffer) {
        this.body = body.byteLength ? Buffer.from(body) : null;
      } else if (typeof body === "string") {
        this.body = body.length ? Buffer.from(body) : null;
      } else if (isFormDataLike(body) || isIterable(body) || isBlobLike(body)) {
        this.body = body;
      } else {
        throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
      }
      this.completed = false;
      this.aborted = false;
      this.upgrade = upgrade || null;
      this.path = query ? serializePathWithQuery(path, query) : path;
      this.origin = origin;
      this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
      this.blocking = blocking ?? this.method !== "HEAD";
      this.reset = reset == null ? null : reset;
      this.host = null;
      this.contentLength = null;
      this.contentType = null;
      this.headers = [];
      this.expectContinue = expectContinue != null ? expectContinue : false;
      if (Array.isArray(headers)) {
        if (headers.length % 2 !== 0) {
          throw new InvalidArgumentError("headers array must be even");
        }
        for (let i2 = 0;i2 < headers.length; i2 += 2) {
          processHeader(this, headers[i2], headers[i2 + 1]);
        }
      } else if (headers && typeof headers === "object") {
        if (headers[Symbol.iterator]) {
          for (const header of headers) {
            if (!Array.isArray(header) || header.length !== 2) {
              throw new InvalidArgumentError("headers must be in key-value pair format");
            }
            processHeader(this, header[0], header[1]);
          }
        } else {
          const keys = Object.keys(headers);
          for (let i2 = 0;i2 < keys.length; ++i2) {
            processHeader(this, keys[i2], headers[keys[i2]]);
          }
        }
      } else if (headers != null) {
        throw new InvalidArgumentError("headers must be an object or an array");
      }
      assertRequestHandler(handler, method, upgrade);
      this.servername = servername || getServerName(this.host) || null;
      this[kHandler] = handler;
      if (channels.create.hasSubscribers) {
        channels.create.publish({ request: this });
      }
    }
    onBodySent(chunk) {
      if (this[kHandler].onBodySent) {
        try {
          return this[kHandler].onBodySent(chunk);
        } catch (err2) {
          this.abort(err2);
        }
      }
    }
    onRequestSent() {
      if (channels.bodySent.hasSubscribers) {
        channels.bodySent.publish({ request: this });
      }
      if (this[kHandler].onRequestSent) {
        try {
          return this[kHandler].onRequestSent();
        } catch (err2) {
          this.abort(err2);
        }
      }
    }
    onConnect(abort) {
      assert(!this.aborted);
      assert(!this.completed);
      if (this.error) {
        abort(this.error);
      } else {
        this.abort = abort;
        return this[kHandler].onConnect(abort);
      }
    }
    onResponseStarted() {
      return this[kHandler].onResponseStarted?.();
    }
    onHeaders(statusCode, headers, resume, statusText) {
      assert(!this.aborted);
      assert(!this.completed);
      if (channels.headers.hasSubscribers) {
        channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
      }
      try {
        return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
      } catch (err2) {
        this.abort(err2);
      }
    }
    onData(chunk) {
      assert(!this.aborted);
      assert(!this.completed);
      try {
        return this[kHandler].onData(chunk);
      } catch (err2) {
        this.abort(err2);
        return false;
      }
    }
    onUpgrade(statusCode, headers, socket) {
      assert(!this.aborted);
      assert(!this.completed);
      return this[kHandler].onUpgrade(statusCode, headers, socket);
    }
    onComplete(trailers) {
      this.onFinally();
      assert(!this.aborted);
      assert(!this.completed);
      this.completed = true;
      if (channels.trailers.hasSubscribers) {
        channels.trailers.publish({ request: this, trailers });
      }
      try {
        return this[kHandler].onComplete(trailers);
      } catch (err2) {
        this.onError(err2);
      }
    }
    onError(error) {
      this.onFinally();
      if (channels.error.hasSubscribers) {
        channels.error.publish({ request: this, error });
      }
      if (this.aborted) {
        return;
      }
      this.aborted = true;
      return this[kHandler].onError(error);
    }
    onFinally() {
      if (this.errorHandler) {
        this.body.off("error", this.errorHandler);
        this.errorHandler = null;
      }
      if (this.endHandler) {
        this.body.off("end", this.endHandler);
        this.endHandler = null;
      }
    }
    addHeader(key, value) {
      processHeader(this, key, value);
      return this;
    }
  }
  function processHeader(request, key, val) {
    if (val && (typeof val === "object" && !Array.isArray(val))) {
      throw new InvalidArgumentError(`invalid ${key} header`);
    } else if (val === undefined) {
      return;
    }
    let headerName = headerNameLowerCasedRecord[key];
    if (headerName === undefined) {
      headerName = key.toLowerCase();
      if (headerNameLowerCasedRecord[headerName] === undefined && !isValidHTTPToken(headerName)) {
        throw new InvalidArgumentError("invalid header key");
      }
    }
    if (Array.isArray(val)) {
      const arr = [];
      for (let i2 = 0;i2 < val.length; i2++) {
        if (typeof val[i2] === "string") {
          if (!isValidHeaderValue(val[i2])) {
            throw new InvalidArgumentError(`invalid ${key} header`);
          }
          arr.push(val[i2]);
        } else if (val[i2] === null) {
          arr.push("");
        } else if (typeof val[i2] === "object") {
          throw new InvalidArgumentError(`invalid ${key} header`);
        } else {
          arr.push(`${val[i2]}`);
        }
      }
      val = arr;
    } else if (typeof val === "string") {
      if (!isValidHeaderValue(val)) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
    } else if (val === null) {
      val = "";
    } else {
      val = `${val}`;
    }
    if (request.host === null && headerName === "host") {
      if (typeof val !== "string") {
        throw new InvalidArgumentError("invalid host header");
      }
      request.host = val;
    } else if (request.contentLength === null && headerName === "content-length") {
      request.contentLength = parseInt(val, 10);
      if (!Number.isFinite(request.contentLength)) {
        throw new InvalidArgumentError("invalid content-length header");
      }
    } else if (request.contentType === null && headerName === "content-type") {
      request.contentType = val;
      request.headers.push(key, val);
    } else if (headerName === "transfer-encoding" || headerName === "keep-alive" || headerName === "upgrade") {
      throw new InvalidArgumentError(`invalid ${headerName} header`);
    } else if (headerName === "connection") {
      const value = typeof val === "string" ? val.toLowerCase() : null;
      if (value !== "close" && value !== "keep-alive") {
        throw new InvalidArgumentError("invalid connection header");
      }
      if (value === "close") {
        request.reset = true;
      }
    } else if (headerName === "expect") {
      throw new NotSupportedError("expect header not supported");
    } else {
      request.headers.push(key, val);
    }
  }
  module2.exports = Request;
});

// node_modules/undici/lib/handler/wrap-handler.js
var require_wrap_handler = __commonJS((exports2, module2) => {
  var { InvalidArgumentError } = require_errors();
  module2.exports = class WrapHandler {
    #handler;
    constructor(handler) {
      this.#handler = handler;
    }
    static wrap(handler) {
      return handler.onRequestStart ? handler : new WrapHandler(handler);
    }
    onConnect(abort, context) {
      return this.#handler.onConnect?.(abort, context);
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      return this.#handler.onHeaders?.(statusCode, rawHeaders, resume, statusMessage);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
      return this.#handler.onUpgrade?.(statusCode, rawHeaders, socket);
    }
    onData(data) {
      return this.#handler.onData?.(data);
    }
    onComplete(trailers) {
      return this.#handler.onComplete?.(trailers);
    }
    onError(err2) {
      if (!this.#handler.onError) {
        throw err2;
      }
      return this.#handler.onError?.(err2);
    }
    onRequestStart(controller, context) {
      this.#handler.onConnect?.((reason) => controller.abort(reason), context);
    }
    onRequestUpgrade(controller, statusCode, headers, socket) {
      const rawHeaders = [];
      for (const [key, val] of Object.entries(headers)) {
        rawHeaders.push(Buffer.from(key), Array.isArray(val) ? val.map((v) => Buffer.from(v)) : Buffer.from(val));
      }
      this.#handler.onUpgrade?.(statusCode, rawHeaders, socket);
    }
    onResponseStart(controller, statusCode, headers, statusMessage) {
      const rawHeaders = [];
      for (const [key, val] of Object.entries(headers)) {
        rawHeaders.push(Buffer.from(key), Array.isArray(val) ? val.map((v) => Buffer.from(v)) : Buffer.from(val));
      }
      if (this.#handler.onHeaders?.(statusCode, rawHeaders, () => controller.resume(), statusMessage) === false) {
        controller.pause();
      }
    }
    onResponseData(controller, data) {
      if (this.#handler.onData?.(data) === false) {
        controller.pause();
      }
    }
    onResponseEnd(controller, trailers) {
      const rawTrailers = [];
      for (const [key, val] of Object.entries(trailers)) {
        rawTrailers.push(Buffer.from(key), Array.isArray(val) ? val.map((v) => Buffer.from(v)) : Buffer.from(val));
      }
      this.#handler.onComplete?.(rawTrailers);
    }
    onResponseError(controller, err2) {
      if (!this.#handler.onError) {
        throw new InvalidArgumentError("invalid onError method");
      }
      this.#handler.onError?.(err2);
    }
  };
});

// node_modules/undici/lib/dispatcher/dispatcher.js
var require_dispatcher = __commonJS((exports2, module2) => {
  var EventEmitter = require("node:events");
  var WrapHandler = require_wrap_handler();
  var wrapInterceptor = (dispatch) => (opts, handler) => dispatch(opts, WrapHandler.wrap(handler));

  class Dispatcher extends EventEmitter {
    dispatch() {
      throw new Error("not implemented");
    }
    close() {
      throw new Error("not implemented");
    }
    destroy() {
      throw new Error("not implemented");
    }
    compose(...args) {
      const interceptors = Array.isArray(args[0]) ? args[0] : args;
      let dispatch = this.dispatch.bind(this);
      for (const interceptor of interceptors) {
        if (interceptor == null) {
          continue;
        }
        if (typeof interceptor !== "function") {
          throw new TypeError(`invalid interceptor, expected function received ${typeof interceptor}`);
        }
        dispatch = interceptor(dispatch);
        dispatch = wrapInterceptor(dispatch);
        if (dispatch == null || typeof dispatch !== "function" || dispatch.length !== 2) {
          throw new TypeError("invalid interceptor");
        }
      }
      return new Proxy(this, {
        get: (target, key) => key === "dispatch" ? dispatch : target[key]
      });
    }
  }
  module2.exports = Dispatcher;
});

// node_modules/undici/lib/handler/unwrap-handler.js
var require_unwrap_handler = __commonJS((exports2, module2) => {
  var { parseHeaders } = require_util();
  var { InvalidArgumentError } = require_errors();
  var kResume = Symbol("resume");

  class UnwrapController {
    #paused = false;
    #reason = null;
    #aborted = false;
    #abort;
    [kResume] = null;
    constructor(abort) {
      this.#abort = abort;
    }
    pause() {
      this.#paused = true;
    }
    resume() {
      if (this.#paused) {
        this.#paused = false;
        this[kResume]?.();
      }
    }
    abort(reason) {
      if (!this.#aborted) {
        this.#aborted = true;
        this.#reason = reason;
        this.#abort(reason);
      }
    }
    get aborted() {
      return this.#aborted;
    }
    get reason() {
      return this.#reason;
    }
    get paused() {
      return this.#paused;
    }
  }
  module2.exports = class UnwrapHandler {
    #handler;
    #controller;
    constructor(handler) {
      this.#handler = handler;
    }
    static unwrap(handler) {
      return !handler.onRequestStart ? handler : new UnwrapHandler(handler);
    }
    onConnect(abort, context) {
      this.#controller = new UnwrapController(abort);
      this.#handler.onRequestStart?.(this.#controller, context);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
      this.#handler.onRequestUpgrade?.(this.#controller, statusCode, parseHeaders(rawHeaders), socket);
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      this.#controller[kResume] = resume;
      this.#handler.onResponseStart?.(this.#controller, statusCode, parseHeaders(rawHeaders), statusMessage);
      return !this.#controller.paused;
    }
    onData(data) {
      this.#handler.onResponseData?.(this.#controller, data);
      return !this.#controller.paused;
    }
    onComplete(rawTrailers) {
      this.#handler.onResponseEnd?.(this.#controller, parseHeaders(rawTrailers));
    }
    onError(err2) {
      if (!this.#handler.onResponseError) {
        throw new InvalidArgumentError("invalid onError method");
      }
      this.#handler.onResponseError?.(this.#controller, err2);
    }
  };
});

// node_modules/undici/lib/dispatcher/dispatcher-base.js
var require_dispatcher_base = __commonJS((exports2, module2) => {
  var Dispatcher = require_dispatcher();
  var UnwrapHandler = require_unwrap_handler();
  var {
    ClientDestroyedError,
    ClientClosedError,
    InvalidArgumentError
  } = require_errors();
  var { kDestroy, kClose, kClosed, kDestroyed, kDispatch } = require_symbols();
  var kOnDestroyed = Symbol("onDestroyed");
  var kOnClosed = Symbol("onClosed");

  class DispatcherBase extends Dispatcher {
    constructor() {
      super();
      this[kDestroyed] = false;
      this[kOnDestroyed] = null;
      this[kClosed] = false;
      this[kOnClosed] = [];
    }
    get destroyed() {
      return this[kDestroyed];
    }
    get closed() {
      return this[kClosed];
    }
    close(callback) {
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          this.close((err2, data) => {
            return err2 ? reject(err2) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        queueMicrotask(() => callback(new ClientDestroyedError, null));
        return;
      }
      if (this[kClosed]) {
        if (this[kOnClosed]) {
          this[kOnClosed].push(callback);
        } else {
          queueMicrotask(() => callback(null, null));
        }
        return;
      }
      this[kClosed] = true;
      this[kOnClosed].push(callback);
      const onClosed = () => {
        const callbacks = this[kOnClosed];
        this[kOnClosed] = null;
        for (let i2 = 0;i2 < callbacks.length; i2++) {
          callbacks[i2](null, null);
        }
      };
      this[kClose]().then(() => this.destroy()).then(() => {
        queueMicrotask(onClosed);
      });
    }
    destroy(err2, callback) {
      if (typeof err2 === "function") {
        callback = err2;
        err2 = null;
      }
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          this.destroy(err2, (err3, data) => {
            return err3 ? reject(err3) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        if (this[kOnDestroyed]) {
          this[kOnDestroyed].push(callback);
        } else {
          queueMicrotask(() => callback(null, null));
        }
        return;
      }
      if (!err2) {
        err2 = new ClientDestroyedError;
      }
      this[kDestroyed] = true;
      this[kOnDestroyed] = this[kOnDestroyed] || [];
      this[kOnDestroyed].push(callback);
      const onDestroyed = () => {
        const callbacks = this[kOnDestroyed];
        this[kOnDestroyed] = null;
        for (let i2 = 0;i2 < callbacks.length; i2++) {
          callbacks[i2](null, null);
        }
      };
      this[kDestroy](err2).then(() => {
        queueMicrotask(onDestroyed);
      });
    }
    dispatch(opts, handler) {
      if (!handler || typeof handler !== "object") {
        throw new InvalidArgumentError("handler must be an object");
      }
      handler = UnwrapHandler.unwrap(handler);
      try {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("opts must be an object.");
        }
        if (this[kDestroyed] || this[kOnDestroyed]) {
          throw new ClientDestroyedError;
        }
        if (this[kClosed]) {
          throw new ClientClosedError;
        }
        return this[kDispatch](opts, handler);
      } catch (err2) {
        if (typeof handler.onError !== "function") {
          throw err2;
        }
        handler.onError(err2);
        return false;
      }
    }
  }
  module2.exports = DispatcherBase;
});

// node_modules/undici/lib/core/connect.js
var require_connect = __commonJS((exports2, module2) => {
  var net = require("node:net");
  var assert = require("node:assert");
  var util2 = require_util();
  var { InvalidArgumentError } = require_errors();
  var tls;
  var SessionCache;
  if (global.FinalizationRegistry && !(process.env.NODE_V8_COVERAGE || process.env.UNDICI_NO_FG)) {
    SessionCache = class WeakSessionCache {
      constructor(maxCachedSessions) {
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map;
        this._sessionRegistry = new global.FinalizationRegistry((key) => {
          if (this._sessionCache.size < this._maxCachedSessions) {
            return;
          }
          const ref = this._sessionCache.get(key);
          if (ref !== undefined && ref.deref() === undefined) {
            this._sessionCache.delete(key);
          }
        });
      }
      get(sessionKey) {
        const ref = this._sessionCache.get(sessionKey);
        return ref ? ref.deref() : null;
      }
      set(sessionKey, session) {
        if (this._maxCachedSessions === 0) {
          return;
        }
        this._sessionCache.set(sessionKey, new WeakRef(session));
        this._sessionRegistry.register(session, sessionKey);
      }
    };
  } else {
    SessionCache = class SimpleSessionCache {
      constructor(maxCachedSessions) {
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map;
      }
      get(sessionKey) {
        return this._sessionCache.get(sessionKey);
      }
      set(sessionKey, session) {
        if (this._maxCachedSessions === 0) {
          return;
        }
        if (this._sessionCache.size >= this._maxCachedSessions) {
          const { value: oldestKey } = this._sessionCache.keys().next();
          this._sessionCache.delete(oldestKey);
        }
        this._sessionCache.set(sessionKey, session);
      }
    };
  }
  function buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, session: customSession, ...opts }) {
    if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
      throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
    }
    const options = { path: socketPath, ...opts };
    const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
    timeout = timeout == null ? 1e4 : timeout;
    allowH2 = allowH2 != null ? allowH2 : false;
    return function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
      let socket;
      if (protocol === "https:") {
        if (!tls) {
          tls = require("node:tls");
        }
        servername = servername || options.servername || util2.getServerName(host) || null;
        const sessionKey = servername || hostname;
        assert(sessionKey);
        const session = customSession || sessionCache.get(sessionKey) || null;
        port = port || 443;
        socket = tls.connect({
          highWaterMark: 16384,
          ...options,
          servername,
          session,
          localAddress,
          ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
          socket: httpSocket,
          port,
          host: hostname
        });
        socket.on("session", function(session2) {
          sessionCache.set(sessionKey, session2);
        });
      } else {
        assert(!httpSocket, "httpSocket can only be sent on TLS update");
        port = port || 80;
        socket = net.connect({
          highWaterMark: 64 * 1024,
          ...options,
          localAddress,
          port,
          host: hostname
        });
      }
      if (options.keepAlive == null || options.keepAlive) {
        const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60000 : options.keepAliveInitialDelay;
        socket.setKeepAlive(true, keepAliveInitialDelay);
      }
      const clearConnectTimeout = util2.setupConnectTimeout(new WeakRef(socket), { timeout, hostname, port });
      socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
        queueMicrotask(clearConnectTimeout);
        if (callback) {
          const cb = callback;
          callback = null;
          cb(null, this);
        }
      }).on("error", function(err2) {
        queueMicrotask(clearConnectTimeout);
        if (callback) {
          const cb = callback;
          callback = null;
          cb(err2);
        }
      });
      return socket;
    };
  }
  module2.exports = buildConnector;
});

// node_modules/undici/lib/llhttp/utils.js
var require_utils = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.enumToMap = undefined;
  function enumToMap(obj, filter = [], exceptions = []) {
    var _a2, _b2;
    const emptyFilter = ((_a2 = filter === null || filter === undefined ? undefined : filter.length) !== null && _a2 !== undefined ? _a2 : 0) === 0;
    const emptyExceptions = ((_b2 = exceptions === null || exceptions === undefined ? undefined : exceptions.length) !== null && _b2 !== undefined ? _b2 : 0) === 0;
    return Object.fromEntries(Object.entries(obj).filter(([, value]) => {
      return typeof value === "number" && (emptyFilter || filter.includes(value)) && (emptyExceptions || !exceptions.includes(value));
    }));
  }
  exports2.enumToMap = enumToMap;
});

// node_modules/undici/lib/llhttp/constants.js
var require_constants2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.SPECIAL_HEADERS = exports2.MINOR = exports2.MAJOR = exports2.HTAB_SP_VCHAR_OBS_TEXT = exports2.QUOTED_STRING = exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS = exports2.TOKEN = exports2.HEX = exports2.URL_CHAR = exports2.USERINFO_CHARS = exports2.MARK = exports2.ALPHANUM = exports2.NUM = exports2.HEX_MAP = exports2.NUM_MAP = exports2.ALPHA = exports2.STATUSES_HTTP = exports2.H_METHOD_MAP = exports2.METHOD_MAP = exports2.METHODS_RTSP = exports2.METHODS_ICE = exports2.METHODS_HTTP = exports2.HEADER_STATE = exports2.FINISH = exports2.STATUSES = exports2.METHODS = exports2.LENIENT_FLAGS = exports2.FLAGS = exports2.TYPE = exports2.ERROR = undefined;
  var utils_1 = require_utils();
  exports2.ERROR = {
    OK: 0,
    INTERNAL: 1,
    STRICT: 2,
    CR_EXPECTED: 25,
    LF_EXPECTED: 3,
    UNEXPECTED_CONTENT_LENGTH: 4,
    UNEXPECTED_SPACE: 30,
    CLOSED_CONNECTION: 5,
    INVALID_METHOD: 6,
    INVALID_URL: 7,
    INVALID_CONSTANT: 8,
    INVALID_VERSION: 9,
    INVALID_HEADER_TOKEN: 10,
    INVALID_CONTENT_LENGTH: 11,
    INVALID_CHUNK_SIZE: 12,
    INVALID_STATUS: 13,
    INVALID_EOF_STATE: 14,
    INVALID_TRANSFER_ENCODING: 15,
    CB_MESSAGE_BEGIN: 16,
    CB_HEADERS_COMPLETE: 17,
    CB_MESSAGE_COMPLETE: 18,
    CB_CHUNK_HEADER: 19,
    CB_CHUNK_COMPLETE: 20,
    PAUSED: 21,
    PAUSED_UPGRADE: 22,
    PAUSED_H2_UPGRADE: 23,
    USER: 24,
    CB_URL_COMPLETE: 26,
    CB_STATUS_COMPLETE: 27,
    CB_METHOD_COMPLETE: 32,
    CB_VERSION_COMPLETE: 33,
    CB_HEADER_FIELD_COMPLETE: 28,
    CB_HEADER_VALUE_COMPLETE: 29,
    CB_CHUNK_EXTENSION_NAME_COMPLETE: 34,
    CB_CHUNK_EXTENSION_VALUE_COMPLETE: 35,
    CB_RESET: 31
  };
  exports2.TYPE = {
    BOTH: 0,
    REQUEST: 1,
    RESPONSE: 2
  };
  exports2.FLAGS = {
    CONNECTION_KEEP_ALIVE: 1 << 0,
    CONNECTION_CLOSE: 1 << 1,
    CONNECTION_UPGRADE: 1 << 2,
    CHUNKED: 1 << 3,
    UPGRADE: 1 << 4,
    CONTENT_LENGTH: 1 << 5,
    SKIPBODY: 1 << 6,
    TRAILING: 1 << 7,
    TRANSFER_ENCODING: 1 << 9
  };
  exports2.LENIENT_FLAGS = {
    HEADERS: 1 << 0,
    CHUNKED_LENGTH: 1 << 1,
    KEEP_ALIVE: 1 << 2,
    TRANSFER_ENCODING: 1 << 3,
    VERSION: 1 << 4,
    DATA_AFTER_CLOSE: 1 << 5,
    OPTIONAL_LF_AFTER_CR: 1 << 6,
    OPTIONAL_CRLF_AFTER_CHUNK: 1 << 7,
    OPTIONAL_CR_BEFORE_LF: 1 << 8,
    SPACES_AFTER_CHUNK_SIZE: 1 << 9
  };
  exports2.METHODS = {
    DELETE: 0,
    GET: 1,
    HEAD: 2,
    POST: 3,
    PUT: 4,
    CONNECT: 5,
    OPTIONS: 6,
    TRACE: 7,
    COPY: 8,
    LOCK: 9,
    MKCOL: 10,
    MOVE: 11,
    PROPFIND: 12,
    PROPPATCH: 13,
    SEARCH: 14,
    UNLOCK: 15,
    BIND: 16,
    REBIND: 17,
    UNBIND: 18,
    ACL: 19,
    REPORT: 20,
    MKACTIVITY: 21,
    CHECKOUT: 22,
    MERGE: 23,
    "M-SEARCH": 24,
    NOTIFY: 25,
    SUBSCRIBE: 26,
    UNSUBSCRIBE: 27,
    PATCH: 28,
    PURGE: 29,
    MKCALENDAR: 30,
    LINK: 31,
    UNLINK: 32,
    SOURCE: 33,
    PRI: 34,
    DESCRIBE: 35,
    ANNOUNCE: 36,
    SETUP: 37,
    PLAY: 38,
    PAUSE: 39,
    TEARDOWN: 40,
    GET_PARAMETER: 41,
    SET_PARAMETER: 42,
    REDIRECT: 43,
    RECORD: 44,
    FLUSH: 45,
    QUERY: 46
  };
  exports2.STATUSES = {
    CONTINUE: 100,
    SWITCHING_PROTOCOLS: 101,
    PROCESSING: 102,
    EARLY_HINTS: 103,
    RESPONSE_IS_STALE: 110,
    REVALIDATION_FAILED: 111,
    DISCONNECTED_OPERATION: 112,
    HEURISTIC_EXPIRATION: 113,
    MISCELLANEOUS_WARNING: 199,
    OK: 200,
    CREATED: 201,
    ACCEPTED: 202,
    NON_AUTHORITATIVE_INFORMATION: 203,
    NO_CONTENT: 204,
    RESET_CONTENT: 205,
    PARTIAL_CONTENT: 206,
    MULTI_STATUS: 207,
    ALREADY_REPORTED: 208,
    TRANSFORMATION_APPLIED: 214,
    IM_USED: 226,
    MISCELLANEOUS_PERSISTENT_WARNING: 299,
    MULTIPLE_CHOICES: 300,
    MOVED_PERMANENTLY: 301,
    FOUND: 302,
    SEE_OTHER: 303,
    NOT_MODIFIED: 304,
    USE_PROXY: 305,
    SWITCH_PROXY: 306,
    TEMPORARY_REDIRECT: 307,
    PERMANENT_REDIRECT: 308,
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    PAYMENT_REQUIRED: 402,
    FORBIDDEN: 403,
    NOT_FOUND: 404,
    METHOD_NOT_ALLOWED: 405,
    NOT_ACCEPTABLE: 406,
    PROXY_AUTHENTICATION_REQUIRED: 407,
    REQUEST_TIMEOUT: 408,
    CONFLICT: 409,
    GONE: 410,
    LENGTH_REQUIRED: 411,
    PRECONDITION_FAILED: 412,
    PAYLOAD_TOO_LARGE: 413,
    URI_TOO_LONG: 414,
    UNSUPPORTED_MEDIA_TYPE: 415,
    RANGE_NOT_SATISFIABLE: 416,
    EXPECTATION_FAILED: 417,
    IM_A_TEAPOT: 418,
    PAGE_EXPIRED: 419,
    ENHANCE_YOUR_CALM: 420,
    MISDIRECTED_REQUEST: 421,
    UNPROCESSABLE_ENTITY: 422,
    LOCKED: 423,
    FAILED_DEPENDENCY: 424,
    TOO_EARLY: 425,
    UPGRADE_REQUIRED: 426,
    PRECONDITION_REQUIRED: 428,
    TOO_MANY_REQUESTS: 429,
    REQUEST_HEADER_FIELDS_TOO_LARGE_UNOFFICIAL: 430,
    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,
    LOGIN_TIMEOUT: 440,
    NO_RESPONSE: 444,
    RETRY_WITH: 449,
    BLOCKED_BY_PARENTAL_CONTROL: 450,
    UNAVAILABLE_FOR_LEGAL_REASONS: 451,
    CLIENT_CLOSED_LOAD_BALANCED_REQUEST: 460,
    INVALID_X_FORWARDED_FOR: 463,
    REQUEST_HEADER_TOO_LARGE: 494,
    SSL_CERTIFICATE_ERROR: 495,
    SSL_CERTIFICATE_REQUIRED: 496,
    HTTP_REQUEST_SENT_TO_HTTPS_PORT: 497,
    INVALID_TOKEN: 498,
    CLIENT_CLOSED_REQUEST: 499,
    INTERNAL_SERVER_ERROR: 500,
    NOT_IMPLEMENTED: 501,
    BAD_GATEWAY: 502,
    SERVICE_UNAVAILABLE: 503,
    GATEWAY_TIMEOUT: 504,
    HTTP_VERSION_NOT_SUPPORTED: 505,
    VARIANT_ALSO_NEGOTIATES: 506,
    INSUFFICIENT_STORAGE: 507,
    LOOP_DETECTED: 508,
    BANDWIDTH_LIMIT_EXCEEDED: 509,
    NOT_EXTENDED: 510,
    NETWORK_AUTHENTICATION_REQUIRED: 511,
    WEB_SERVER_UNKNOWN_ERROR: 520,
    WEB_SERVER_IS_DOWN: 521,
    CONNECTION_TIMEOUT: 522,
    ORIGIN_IS_UNREACHABLE: 523,
    TIMEOUT_OCCURED: 524,
    SSL_HANDSHAKE_FAILED: 525,
    INVALID_SSL_CERTIFICATE: 526,
    RAILGUN_ERROR: 527,
    SITE_IS_OVERLOADED: 529,
    SITE_IS_FROZEN: 530,
    IDENTITY_PROVIDER_AUTHENTICATION_ERROR: 561,
    NETWORK_READ_TIMEOUT: 598,
    NETWORK_CONNECT_TIMEOUT: 599
  };
  exports2.FINISH = {
    SAFE: 0,
    SAFE_WITH_CB: 1,
    UNSAFE: 2
  };
  exports2.HEADER_STATE = {
    GENERAL: 0,
    CONNECTION: 1,
    CONTENT_LENGTH: 2,
    TRANSFER_ENCODING: 3,
    UPGRADE: 4,
    CONNECTION_KEEP_ALIVE: 5,
    CONNECTION_CLOSE: 6,
    CONNECTION_UPGRADE: 7,
    TRANSFER_ENCODING_CHUNKED: 8
  };
  exports2.METHODS_HTTP = [
    exports2.METHODS.DELETE,
    exports2.METHODS.GET,
    exports2.METHODS.HEAD,
    exports2.METHODS.POST,
    exports2.METHODS.PUT,
    exports2.METHODS.CONNECT,
    exports2.METHODS.OPTIONS,
    exports2.METHODS.TRACE,
    exports2.METHODS.COPY,
    exports2.METHODS.LOCK,
    exports2.METHODS.MKCOL,
    exports2.METHODS.MOVE,
    exports2.METHODS.PROPFIND,
    exports2.METHODS.PROPPATCH,
    exports2.METHODS.SEARCH,
    exports2.METHODS.UNLOCK,
    exports2.METHODS.BIND,
    exports2.METHODS.REBIND,
    exports2.METHODS.UNBIND,
    exports2.METHODS.ACL,
    exports2.METHODS.REPORT,
    exports2.METHODS.MKACTIVITY,
    exports2.METHODS.CHECKOUT,
    exports2.METHODS.MERGE,
    exports2.METHODS["M-SEARCH"],
    exports2.METHODS.NOTIFY,
    exports2.METHODS.SUBSCRIBE,
    exports2.METHODS.UNSUBSCRIBE,
    exports2.METHODS.PATCH,
    exports2.METHODS.PURGE,
    exports2.METHODS.MKCALENDAR,
    exports2.METHODS.LINK,
    exports2.METHODS.UNLINK,
    exports2.METHODS.PRI,
    exports2.METHODS.SOURCE,
    exports2.METHODS.QUERY
  ];
  exports2.METHODS_ICE = [
    exports2.METHODS.SOURCE
  ];
  exports2.METHODS_RTSP = [
    exports2.METHODS.OPTIONS,
    exports2.METHODS.DESCRIBE,
    exports2.METHODS.ANNOUNCE,
    exports2.METHODS.SETUP,
    exports2.METHODS.PLAY,
    exports2.METHODS.PAUSE,
    exports2.METHODS.TEARDOWN,
    exports2.METHODS.GET_PARAMETER,
    exports2.METHODS.SET_PARAMETER,
    exports2.METHODS.REDIRECT,
    exports2.METHODS.RECORD,
    exports2.METHODS.FLUSH,
    exports2.METHODS.GET,
    exports2.METHODS.POST
  ];
  exports2.METHOD_MAP = (0, utils_1.enumToMap)(exports2.METHODS);
  exports2.H_METHOD_MAP = Object.fromEntries(Object.entries(exports2.METHODS).filter(([k]) => k.startsWith("H")));
  exports2.STATUSES_HTTP = [
    exports2.STATUSES.CONTINUE,
    exports2.STATUSES.SWITCHING_PROTOCOLS,
    exports2.STATUSES.PROCESSING,
    exports2.STATUSES.EARLY_HINTS,
    exports2.STATUSES.RESPONSE_IS_STALE,
    exports2.STATUSES.REVALIDATION_FAILED,
    exports2.STATUSES.DISCONNECTED_OPERATION,
    exports2.STATUSES.HEURISTIC_EXPIRATION,
    exports2.STATUSES.MISCELLANEOUS_WARNING,
    exports2.STATUSES.OK,
    exports2.STATUSES.CREATED,
    exports2.STATUSES.ACCEPTED,
    exports2.STATUSES.NON_AUTHORITATIVE_INFORMATION,
    exports2.STATUSES.NO_CONTENT,
    exports2.STATUSES.RESET_CONTENT,
    exports2.STATUSES.PARTIAL_CONTENT,
    exports2.STATUSES.MULTI_STATUS,
    exports2.STATUSES.ALREADY_REPORTED,
    exports2.STATUSES.TRANSFORMATION_APPLIED,
    exports2.STATUSES.IM_USED,
    exports2.STATUSES.MISCELLANEOUS_PERSISTENT_WARNING,
    exports2.STATUSES.MULTIPLE_CHOICES,
    exports2.STATUSES.MOVED_PERMANENTLY,
    exports2.STATUSES.FOUND,
    exports2.STATUSES.SEE_OTHER,
    exports2.STATUSES.NOT_MODIFIED,
    exports2.STATUSES.USE_PROXY,
    exports2.STATUSES.SWITCH_PROXY,
    exports2.STATUSES.TEMPORARY_REDIRECT,
    exports2.STATUSES.PERMANENT_REDIRECT,
    exports2.STATUSES.BAD_REQUEST,
    exports2.STATUSES.UNAUTHORIZED,
    exports2.STATUSES.PAYMENT_REQUIRED,
    exports2.STATUSES.FORBIDDEN,
    exports2.STATUSES.NOT_FOUND,
    exports2.STATUSES.METHOD_NOT_ALLOWED,
    exports2.STATUSES.NOT_ACCEPTABLE,
    exports2.STATUSES.PROXY_AUTHENTICATION_REQUIRED,
    exports2.STATUSES.REQUEST_TIMEOUT,
    exports2.STATUSES.CONFLICT,
    exports2.STATUSES.GONE,
    exports2.STATUSES.LENGTH_REQUIRED,
    exports2.STATUSES.PRECONDITION_FAILED,
    exports2.STATUSES.PAYLOAD_TOO_LARGE,
    exports2.STATUSES.URI_TOO_LONG,
    exports2.STATUSES.UNSUPPORTED_MEDIA_TYPE,
    exports2.STATUSES.RANGE_NOT_SATISFIABLE,
    exports2.STATUSES.EXPECTATION_FAILED,
    exports2.STATUSES.IM_A_TEAPOT,
    exports2.STATUSES.PAGE_EXPIRED,
    exports2.STATUSES.ENHANCE_YOUR_CALM,
    exports2.STATUSES.MISDIRECTED_REQUEST,
    exports2.STATUSES.UNPROCESSABLE_ENTITY,
    exports2.STATUSES.LOCKED,
    exports2.STATUSES.FAILED_DEPENDENCY,
    exports2.STATUSES.TOO_EARLY,
    exports2.STATUSES.UPGRADE_REQUIRED,
    exports2.STATUSES.PRECONDITION_REQUIRED,
    exports2.STATUSES.TOO_MANY_REQUESTS,
    exports2.STATUSES.REQUEST_HEADER_FIELDS_TOO_LARGE_UNOFFICIAL,
    exports2.STATUSES.REQUEST_HEADER_FIELDS_TOO_LARGE,
    exports2.STATUSES.LOGIN_TIMEOUT,
    exports2.STATUSES.NO_RESPONSE,
    exports2.STATUSES.RETRY_WITH,
    exports2.STATUSES.BLOCKED_BY_PARENTAL_CONTROL,
    exports2.STATUSES.UNAVAILABLE_FOR_LEGAL_REASONS,
    exports2.STATUSES.CLIENT_CLOSED_LOAD_BALANCED_REQUEST,
    exports2.STATUSES.INVALID_X_FORWARDED_FOR,
    exports2.STATUSES.REQUEST_HEADER_TOO_LARGE,
    exports2.STATUSES.SSL_CERTIFICATE_ERROR,
    exports2.STATUSES.SSL_CERTIFICATE_REQUIRED,
    exports2.STATUSES.HTTP_REQUEST_SENT_TO_HTTPS_PORT,
    exports2.STATUSES.INVALID_TOKEN,
    exports2.STATUSES.CLIENT_CLOSED_REQUEST,
    exports2.STATUSES.INTERNAL_SERVER_ERROR,
    exports2.STATUSES.NOT_IMPLEMENTED,
    exports2.STATUSES.BAD_GATEWAY,
    exports2.STATUSES.SERVICE_UNAVAILABLE,
    exports2.STATUSES.GATEWAY_TIMEOUT,
    exports2.STATUSES.HTTP_VERSION_NOT_SUPPORTED,
    exports2.STATUSES.VARIANT_ALSO_NEGOTIATES,
    exports2.STATUSES.INSUFFICIENT_STORAGE,
    exports2.STATUSES.LOOP_DETECTED,
    exports2.STATUSES.BANDWIDTH_LIMIT_EXCEEDED,
    exports2.STATUSES.NOT_EXTENDED,
    exports2.STATUSES.NETWORK_AUTHENTICATION_REQUIRED,
    exports2.STATUSES.WEB_SERVER_UNKNOWN_ERROR,
    exports2.STATUSES.WEB_SERVER_IS_DOWN,
    exports2.STATUSES.CONNECTION_TIMEOUT,
    exports2.STATUSES.ORIGIN_IS_UNREACHABLE,
    exports2.STATUSES.TIMEOUT_OCCURED,
    exports2.STATUSES.SSL_HANDSHAKE_FAILED,
    exports2.STATUSES.INVALID_SSL_CERTIFICATE,
    exports2.STATUSES.RAILGUN_ERROR,
    exports2.STATUSES.SITE_IS_OVERLOADED,
    exports2.STATUSES.SITE_IS_FROZEN,
    exports2.STATUSES.IDENTITY_PROVIDER_AUTHENTICATION_ERROR,
    exports2.STATUSES.NETWORK_READ_TIMEOUT,
    exports2.STATUSES.NETWORK_CONNECT_TIMEOUT
  ];
  exports2.ALPHA = [];
  for (let i2 = 65;i2 <= 90; i2++) {
    exports2.ALPHA.push(String.fromCharCode(i2));
    exports2.ALPHA.push(String.fromCharCode(i2 + 32));
  }
  exports2.NUM_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9
  };
  exports2.HEX_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
  };
  exports2.NUM = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9"
  ];
  exports2.ALPHANUM = exports2.ALPHA.concat(exports2.NUM);
  exports2.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
  exports2.USERINFO_CHARS = exports2.ALPHANUM.concat(exports2.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
  exports2.URL_CHAR = [
    "!",
    '"',
    "$",
    "%",
    "&",
    "'",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "@",
    "[",
    "\\",
    "]",
    "^",
    "_",
    "`",
    "{",
    "|",
    "}",
    "~"
  ].concat(exports2.ALPHANUM);
  exports2.HEX = exports2.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
  exports2.TOKEN = [
    "!",
    "#",
    "$",
    "%",
    "&",
    "'",
    "*",
    "+",
    "-",
    ".",
    "^",
    "_",
    "`",
    "|",
    "~"
  ].concat(exports2.ALPHANUM);
  exports2.HEADER_CHARS = ["\t"];
  for (let i2 = 32;i2 <= 255; i2++) {
    if (i2 !== 127) {
      exports2.HEADER_CHARS.push(i2);
    }
  }
  exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS.filter((c) => c !== 44);
  exports2.QUOTED_STRING = ["\t", " "];
  for (let i2 = 33;i2 <= 255; i2++) {
    if (i2 !== 34 && i2 !== 92) {
      exports2.QUOTED_STRING.push(i2);
    }
  }
  exports2.HTAB_SP_VCHAR_OBS_TEXT = ["\t", " "];
  for (let i2 = 33;i2 <= 126; i2++) {
    exports2.HTAB_SP_VCHAR_OBS_TEXT.push(i2);
  }
  for (let i2 = 128;i2 <= 255; i2++) {
    exports2.HTAB_SP_VCHAR_OBS_TEXT.push(i2);
  }
  exports2.MAJOR = exports2.NUM_MAP;
  exports2.MINOR = exports2.MAJOR;
  exports2.SPECIAL_HEADERS = {
    connection: exports2.HEADER_STATE.CONNECTION,
    "content-length": exports2.HEADER_STATE.CONTENT_LENGTH,
    "proxy-connection": exports2.HEADER_STATE.CONNECTION,
    "transfer-encoding": exports2.HEADER_STATE.TRANSFER_ENCODING,
    upgrade: exports2.HEADER_STATE.UPGRADE
  };
});

// node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS((exports2, module2) => {
  var { Buffer: Buffer2 } = require("node:buffer");
  var wasmBase64 = "AGFzbQEAAAABJwdgAX8Bf2ADf39/AX9gAn9/AGABfwBgBH9/f38Bf2AAAGADf39/AALLAQgDZW52GHdhc21fb25faGVhZGVyc19jb21wbGV0ZQAEA2VudhV3YXNtX29uX21lc3NhZ2VfYmVnaW4AAANlbnYLd2FzbV9vbl91cmwAAQNlbnYOd2FzbV9vbl9zdGF0dXMAAQNlbnYUd2FzbV9vbl9oZWFkZXJfZmllbGQAAQNlbnYUd2FzbV9vbl9oZWFkZXJfdmFsdWUAAQNlbnYMd2FzbV9vbl9ib2R5AAEDZW52GHdhc21fb25fbWVzc2FnZV9jb21wbGV0ZQAAAzQzBQYAAAMAAAAAAAADAQMAAwMDAAACAAAAAAICAgICAgICAgIBAQEBAQEBAQEDAAADAAAABAUBcAESEgUDAQACBggBfwFBgNgECwfFBygGbWVtb3J5AgALX2luaXRpYWxpemUACBlfX2luZGlyZWN0X2Z1bmN0aW9uX3RhYmxlAQALbGxodHRwX2luaXQACRhsbGh0dHBfc2hvdWxkX2tlZXBfYWxpdmUANgxsbGh0dHBfYWxsb2MACwZtYWxsb2MAOAtsbGh0dHBfZnJlZQAMBGZyZWUADA9sbGh0dHBfZ2V0X3R5cGUADRVsbGh0dHBfZ2V0X2h0dHBfbWFqb3IADhVsbGh0dHBfZ2V0X2h0dHBfbWlub3IADxFsbGh0dHBfZ2V0X21ldGhvZAAQFmxsaHR0cF9nZXRfc3RhdHVzX2NvZGUAERJsbGh0dHBfZ2V0X3VwZ3JhZGUAEgxsbGh0dHBfcmVzZXQAEw5sbGh0dHBfZXhlY3V0ZQAUFGxsaHR0cF9zZXR0aW5nc19pbml0ABUNbGxodHRwX2ZpbmlzaAAWDGxsaHR0cF9wYXVzZQAXDWxsaHR0cF9yZXN1bWUAGBtsbGh0dHBfcmVzdW1lX2FmdGVyX3VwZ3JhZGUAGRBsbGh0dHBfZ2V0X2Vycm5vABoXbGxodHRwX2dldF9lcnJvcl9yZWFzb24AGxdsbGh0dHBfc2V0X2Vycm9yX3JlYXNvbgAcFGxsaHR0cF9nZXRfZXJyb3JfcG9zAB0RbGxodHRwX2Vycm5vX25hbWUAHhJsbGh0dHBfbWV0aG9kX25hbWUAHxJsbGh0dHBfc3RhdHVzX25hbWUAIBpsbGh0dHBfc2V0X2xlbmllbnRfaGVhZGVycwAhIWxsaHR0cF9zZXRfbGVuaWVudF9jaHVua2VkX2xlbmd0aAAiHWxsaHR0cF9zZXRfbGVuaWVudF9rZWVwX2FsaXZlACMkbGxodHRwX3NldF9sZW5pZW50X3RyYW5zZmVyX2VuY29kaW5nACQabGxodHRwX3NldF9sZW5pZW50X3ZlcnNpb24AJSNsbGh0dHBfc2V0X2xlbmllbnRfZGF0YV9hZnRlcl9jbG9zZQAmJ2xsaHR0cF9zZXRfbGVuaWVudF9vcHRpb25hbF9sZl9hZnRlcl9jcgAnLGxsaHR0cF9zZXRfbGVuaWVudF9vcHRpb25hbF9jcmxmX2FmdGVyX2NodW5rACgobGxodHRwX3NldF9sZW5pZW50X29wdGlvbmFsX2NyX2JlZm9yZV9sZgApKmxsaHR0cF9zZXRfbGVuaWVudF9zcGFjZXNfYWZ0ZXJfY2h1bmtfc2l6ZQAqGGxsaHR0cF9tZXNzYWdlX25lZWRzX2VvZgA1CRcBAEEBCxEBAgMEBQoGBzEzMi0uLCsvMAq8ywIzFgBB/NMAKAIABEAAC0H80wBBATYCAAsUACAAEDcgACACNgI4IAAgAToAKAsUACAAIAAvATQgAC0AMCAAEDYQAAseAQF/QcAAEDkiARA3IAFBgAg2AjggASAAOgAoIAELjwwBB38CQCAARQ0AIABBCGsiASAAQQRrKAIAIgBBeHEiBGohBQJAIABBAXENACAAQQNxRQ0BIAEgASgCACIAayIBQZDUACgCAEkNASAAIARqIQQCQAJAQZTUACgCACABRwRAIABB/wFNBEAgAEEDdiEDIAEoAggiACABKAIMIgJGBEBBgNQAQYDUACgCAEF+IAN3cTYCAAwFCyACIAA2AgggACACNgIMDAQLIAEoAhghBiABIAEoAgwiAEcEQCAAIAEoAggiAjYCCCACIAA2AgwMAwsgAUEUaiIDKAIAIgJFBEAgASgCECICRQ0CIAFBEGohAwsDQCADIQcgAiIAQRRqIgMoAgAiAg0AIABBEGohAyAAKAIQIgINAAsgB0EANgIADAILIAUoAgQiAEEDcUEDRw0CIAUgAEF+cTYCBEGI1AAgBDYCACAFIAQ2AgAgASAEQQFyNgIEDAMLQQAhAAsgBkUNAAJAIAEoAhwiAkECdEGw1gBqIgMoAgAgAUYEQCADIAA2AgAgAA0BQYTUAEGE1AAoAgBBfiACd3E2AgAMAgsgBkEQQRQgBigCECABRhtqIAA2AgAgAEUNAQsgACAGNgIYIAEoAhAiAgRAIAAgAjYCECACIAA2AhgLIAFBFGooAgAiAkUNACAAQRRqIAI2AgAgAiAANgIYCyABIAVPDQAgBSgCBCIAQQFxRQ0AAkACQAJAAkAgAEECcUUEQEGY1AAoAgAgBUYEQEGY1AAgATYCAEGM1ABBjNQAKAIAIARqIgA2AgAgASAAQQFyNgIEIAFBlNQAKAIARw0GQYjUAEEANgIAQZTUAEEANgIADAYLQZTUACgCACAFRgRAQZTUACABNgIAQYjUAEGI1AAoAgAgBGoiADYCACABIABBAXI2AgQgACABaiAANgIADAYLIABBeHEgBGohBCAAQf8BTQRAIABBA3YhAyAFKAIIIgAgBSgCDCICRgRAQYDUAEGA1AAoAgBBfiADd3E2AgAMBQsgAiAANgIIIAAgAjYCDAwECyAFKAIYIQYgBSAFKAIMIgBHBEBBkNQAKAIAGiAAIAUoAggiAjYCCCACIAA2AgwMAwsgBUEUaiIDKAIAIgJFBEAgBSgCECICRQ0CIAVBEGohAwsDQCADIQcgAiIAQRRqIgMoAgAiAg0AIABBEGohAyAAKAIQIgINAAsgB0EANgIADAILIAUgAEF+cTYCBCABIARqIAQ2AgAgASAEQQFyNgIEDAMLQQAhAAsgBkUNAAJAIAUoAhwiAkECdEGw1gBqIgMoAgAgBUYEQCADIAA2AgAgAA0BQYTUAEGE1AAoAgBBfiACd3E2AgAMAgsgBkEQQRQgBigCECAFRhtqIAA2AgAgAEUNAQsgACAGNgIYIAUoAhAiAgRAIAAgAjYCECACIAA2AhgLIAVBFGooAgAiAkUNACAAQRRqIAI2AgAgAiAANgIYCyABIARqIAQ2AgAgASAEQQFyNgIEIAFBlNQAKAIARw0AQYjUACAENgIADAELIARB/wFNBEAgBEF4cUGo1ABqIQACf0GA1AAoAgAiAkEBIARBA3Z0IgNxRQRAQYDUACACIANyNgIAIAAMAQsgACgCCAsiAiABNgIMIAAgATYCCCABIAA2AgwgASACNgIIDAELQR8hAiAEQf///wdNBEAgBEEmIARBCHZnIgBrdkEBcSAAQQF0a0E+aiECCyABIAI2AhwgAUIANwIQIAJBAnRBsNYAaiEAAkBBhNQAKAIAIgNBASACdCIHcUUEQCAAIAE2AgBBhNQAIAMgB3I2AgAgASAANgIYIAEgATYCCCABIAE2AgwMAQsgBEEZIAJBAXZrQQAgAkEfRxt0IQIgACgCACEAAkADQCAAIgMoAgRBeHEgBEYNASACQR12IQAgAkEBdCECIAMgAEEEcWpBEGoiBygCACIADQALIAcgATYCACABIAM2AhggASABNgIMIAEgATYCCAwBCyADKAIIIgAgATYCDCADIAE2AgggAUEANgIYIAEgAzYCDCABIAA2AggLQaDUAEGg1AAoAgBBAWsiAEF/IAAbNgIACwsHACAALQAoCwcAIAAtACoLBwAgAC0AKwsHACAALQApCwcAIAAvATQLBwAgAC0AMAtAAQR/IAAoAhghASAALwEuIQIgAC0AKCEDIAAoAjghBCAAEDcgACAENgI4IAAgAzoAKCAAIAI7AS4gACABNgIYC8X4AQIHfwN+IAEgAmohBAJAIAAiAygCDCIADQAgAygCBARAIAMgATYCBAsjAEEQayIJJAACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAn8CQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgAygCHCICQQFrDuwB7gEB6AECAwQFBgcICQoLDA0ODxAREucBE+YBFBXlARYX5AEYGRobHB0eHyDvAe0BIeMBIiMkJSYnKCkqK+IBLC0uLzAxMuEB4AEzNN8B3gE1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk/pAVBRUlPdAdwBVNsBVdoBVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/gAGBAYIBgwGEAYUBhgGHAYgBiQGKAYsBjAGNAY4BjwGQAZEBkgGTAZQBlQGWAZcBmAGZAZoBmwGcAZ0BngGfAaABoQGiAaMBpAGlAaYBpwGoAakBqgGrAawBrQGuAa8BsAGxAbIBswG0AbUBtgG3AbgBuQG6AbsBvAG9Ab4BvwHAAcEBwgHDAcQBxQHZAdgBxgHXAccB1gHIAckBygHLAcwBzQHOAc8B0AHRAdIB0wHUAQDqAQtBAAzUAQtBDgzTAQtBDQzSAQtBDwzRAQtBEAzQAQtBEQzPAQtBEgzOAQtBEwzNAQtBFAzMAQtBFQzLAQtBFgzKAQtBFwzJAQtBGAzIAQtBGQzHAQtBGgzGAQtBGwzFAQtBHAzEAQtBHQzDAQtBHgzCAQtBHwzBAQtBCAzAAQtBIAy/AQtBIgy+AQtBIQy9AQtBBwy8AQtBIwy7AQtBJAy6AQtBJQy5AQtBJgy4AQtBJwy3AQtBzgEMtgELQSgMtQELQSkMtAELQSoMswELQSsMsgELQc8BDLEBC0EtDLABC0EuDK8BC0EvDK4BC0EwDK0BC0ExDKwBC0EyDKsBC0EzDKoBC0HQAQypAQtBNAyoAQtBOAynAQtBDAymAQtBNQylAQtBNgykAQtBNwyjAQtBPQyiAQtBOQyhAQtB0QEMoAELQQsMnwELQT4MngELQToMnQELQQoMnAELQTsMmwELQTwMmgELQdIBDJkBC0HAAAyYAQtBPwyXAQtBwQAMlgELQQkMlQELQSwMlAELQcIADJMBC0HDAAySAQtBxAAMkQELQcUADJABC0HGAAyPAQtBxwAMjgELQcgADI0BC0HJAAyMAQtBygAMiwELQcsADIoBC0HMAAyJAQtBzQAMiAELQc4ADIcBC0HPAAyGAQtB0AAMhQELQdEADIQBC0HSAAyDAQtB1AAMggELQdMADIEBC0HVAAyAAQtB1gAMfwtB1wAMfgtB2AAMfQtB2QAMfAtB2gAMewtB2wAMegtB0wEMeQtB3AAMeAtB3QAMdwtBBgx2C0HeAAx1C0EFDHQLQd8ADHMLQQQMcgtB4AAMcQtB4QAMcAtB4gAMbwtB4wAMbgtBAwxtC0HkAAxsC0HlAAxrC0HmAAxqC0HoAAxpC0HnAAxoC0HpAAxnC0HqAAxmC0HrAAxlC0HsAAxkC0ECDGMLQe0ADGILQe4ADGELQe8ADGALQfAADF8LQfEADF4LQfIADF0LQfMADFwLQfQADFsLQfUADFoLQfYADFkLQfcADFgLQfgADFcLQfkADFYLQfoADFULQfsADFQLQfwADFMLQf0ADFILQf4ADFELQf8ADFALQYABDE8LQYEBDE4LQYIBDE0LQYMBDEwLQYQBDEsLQYUBDEoLQYYBDEkLQYcBDEgLQYgBDEcLQYkBDEYLQYoBDEULQYsBDEQLQYwBDEMLQY0BDEILQY4BDEELQY8BDEALQZABDD8LQZEBDD4LQZIBDD0LQZMBDDwLQZQBDDsLQZUBDDoLQZYBDDkLQZcBDDgLQZgBDDcLQZkBDDYLQZoBDDULQZsBDDQLQZwBDDMLQZ0BDDILQZ4BDDELQZ8BDDALQaABDC8LQaEBDC4LQaIBDC0LQaMBDCwLQaQBDCsLQaUBDCoLQaYBDCkLQacBDCgLQagBDCcLQakBDCYLQaoBDCULQasBDCQLQawBDCMLQa0BDCILQa4BDCELQa8BDCALQbABDB8LQbEBDB4LQbIBDB0LQbMBDBwLQbQBDBsLQbUBDBoLQbYBDBkLQbcBDBgLQbgBDBcLQQEMFgtBuQEMFQtBugEMFAtBuwEMEwtBvAEMEgtBvQEMEQtBvgEMEAtBvwEMDwtBwAEMDgtBwQEMDQtBwgEMDAtBwwEMCwtBxAEMCgtBxQEMCQtBxgEMCAtB1AEMBwtBxwEMBgtByAEMBQtByQEMBAtBygEMAwtBywEMAgtBzQEMAQtBzAELIQIDQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAMCfwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACfwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAn8CQAJAAkACQAJAAkACQAJ/AkACQAJAAn8CQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAMCfwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACfwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCACDtQBAAECAwQFBgcICQoLDA0ODxARFBUWFxgZGhscHR4fICEjJCUnKCmIA4cDhQOEA/wC9QLuAusC6ALmAuMC4ALfAt0C2wLWAtUC1ALTAtICygLJAsgCxwLGAsUCxALDAr0CvAK6ArkCuAK3ArYCtQK0ArICsQKsAqoCqAKnAqYCpQKkAqMCogKhAqACnwKbApoCmQKYApcCkAKIAoQCgwKCAvkB9gH1AfQB8wHyAfEB8AHvAe0B6wHoAeMB4QHgAd8B3gHdAdwB2wHaAdkB2AHXAdYB1QHUAdIB0QHQAc8BzgHNAcwBywHKAckByAHHAcYBxQHEAcMBwgHBAcABvwG+Ab0BvAG7AboBuQG4AbcBtgG1AbQBswGyAbEBsAGvAa4BrQGsAasBqgGpAagBpwGmAaUBpAGjAaIBoQGgAZ8BngGdAZwBmwGaAZcBlgGRAZABjwGOAY0BjAGLAYoBiQGIAYUBhAGDAX59fHt6d3Z1LFFSU1RVVgsgASAERw1zQewBIQIMqQMLIAEgBEcNkAFB0QEhAgyoAwsgASAERw3pAUGEASECDKcDCyABIARHDfQBQfoAIQIMpgMLIAEgBEcNggJB9QAhAgylAwsgASAERw2JAkHzACECDKQDCyABIARHDYwCQfEAIQIMowMLIAEgBEcNHkEeIQIMogMLIAEgBEcNGUEYIQIMoQMLIAEgBEcNuAJBzQAhAgygAwsgASAERw3DAkHGACECDJ8DCyABIARHDcQCQcMAIQIMngMLIAEgBEcNygJBOCECDJ0DCyADLQAwQQFGDZUDDPICC0EAIQACQAJAAkAgAy0AKkUNACADLQArRQ0AIAMvATIiAkECcUUNAQwCCyADLwEyIgJBAXFFDQELQQEhACADLQAoQQFGDQAgAy8BNCIGQeQAa0HkAEkNACAGQcwBRg0AIAZBsAJGDQAgAkHAAHENAEEAIQAgAkGIBHFBgARGDQAgAkEocUEARyEACyADQQA7ATIgA0EAOgAxAkAgAEUEQCADQQA6ADEgAy0ALkEEcQ0BDJwDCyADQgA3AyALIANBADoAMSADQQE6ADYMSQtBACEAAkAgAygCOCICRQ0AIAIoAiwiAkUNACADIAIRAAAhAAsgAEUNSSAAQRVHDWMgA0EENgIcIAMgATYCFCADQb0aNgIQIANBFTYCDEEAIQIMmgMLIAEgBEYEQEEGIQIMmgMLIAEtAABBCkYNGQwBCyABIARGBEBBByECDJkDCwJAIAEtAABBCmsOBAIBAQABCyABQQFqIQFBECECDP4CCyADLQAuQYABcQ0YQQAhAiADQQA2AhwgAyABNgIUIANBqR82AhAgA0ECNgIMDJcDCyABQQFqIQEgA0Evai0AAEEBcQ0XQQAhAiADQQA2AhwgAyABNgIUIANBhB82AhAgA0EZNgIMDJYDCyADIAMpAyAiDCAEIAFrrSIKfSILQgAgCyAMWBs3AyAgCiAMWg0ZQQghAgyVAwsgASAERwRAIANBCTYCCCADIAE2AgRBEiECDPsCC0EJIQIMlAMLIAMpAyBQDZwCDEQLIAEgBEYEQEELIQIMkwMLIAEtAABBCkcNFyABQQFqIQEMGAsgA0Evai0AAEEBcUUNGgwnC0EAIQACQCADKAI4IgJFDQAgAigCSCICRQ0AIAMgAhEAACEACyAADRoMQwtBACEAAkAgAygCOCICRQ0AIAIoAkgiAkUNACADIAIRAAAhAAsgAA0bDCULQQAhAAJAIAMoAjgiAkUNACACKAJIIgJFDQAgAyACEQAAIQALIAANHAwzCyADQS9qLQAAQQFxRQ0dDCMLQQAhAAJAIAMoAjgiAkUNACACKAJMIgJFDQAgAyACEQAAIQALIAANHQxDC0EAIQACQCADKAI4IgJFDQAgAigCTCICRQ0AIAMgAhEAACEACyAADR4MIQsgASAERgRAQRMhAgyLAwsCQCABLQAAIgBBCmsOBCAkJAAjCyABQQFqIQEMIAtBACEAAkAgAygCOCICRQ0AIAIoAkwiAkUNACADIAIRAAAhAAsgAA0jDEMLIAEgBEYEQEEWIQIMiQMLIAEtAABB8D9qLQAAQQFHDSQM7QILAkADQCABLQAAQeA5ai0AACIAQQFHBEACQCAAQQJrDgIDACgLIAFBAWohAUEfIQIM8AILIAQgAUEBaiIBRw0AC0EYIQIMiAMLIAMoAgQhAEEAIQIgA0EANgIEIAMgACABQQFqIgEQMyIADSIMQgtBACEAAkAgAygCOCICRQ0AIAIoAkwiAkUNACADIAIRAAAhAAsgAA0kDCsLIAEgBEYEQEEcIQIMhgMLIANBCjYCCCADIAE2AgRBACEAAkAgAygCOCICRQ0AIAIoAkgiAkUNACADIAIRAAAhAAsgAA0mQSIhAgzrAgsgASAERwRAA0AgAS0AAEHgO2otAAAiAEEDRwRAIABBAWsOBRkbJ+wCJicLIAQgAUEBaiIBRw0AC0EbIQIMhQMLQRshAgyEAwsDQCABLQAAQeA9ai0AACIAQQNHBEAgAEEBaw4FEBIoFCcoCyAEIAFBAWoiAUcNAAtBHiECDIMDCyABIARHBEAgA0ELNgIIIAMgATYCBEEHIQIM6QILQR8hAgyCAwsgASAERgRAQSAhAgyCAwsCQCABLQAAQQ1rDhQvQEBAQEBAQEBAQEBAQEBAQEBAAEALQQAhAiADQQA2AhwgA0G3CzYCECADQQI2AgwgAyABQQFqNgIUDIEDCyADQS9qIQIDQCABIARGBEBBISECDIIDCwJAAkACQCABLQAAIgBBCWsOGAIAKioBKioqKioqKioqKioqKioqKioqAigLIAFBAWohASADQS9qLQAAQQFxRQ0LDBkLIAFBAWohAQwYCyABQQFqIQEgAi0AAEECcQ0AC0EAIQIgA0EANgIcIAMgATYCFCADQc4UNgIQIANBDDYCDAyAAwsgAUEBaiEBC0EAIQACQCADKAI4IgJFDQAgAigCVCICRQ0AIAMgAhEAACEACyAADQEM0QILIANCADcDIAw8CyAAQRVGBEAgA0EkNgIcIAMgATYCFCADQYYaNgIQIANBFTYCDEEAIQIM/QILQQAhAiADQQA2AhwgAyABNgIUIANB4g02AhAgA0EUNgIMDPwCCyADKAIEIQBBACECIANBADYCBCADIAAgASAMp2oiARAxIgBFDSsgA0EHNgIcIAMgATYCFCADIAA2AgwM+wILIAMtAC5BwABxRQ0BC0EAIQACQCADKAI4IgJFDQAgAigCUCICRQ0AIAMgAhEAACEACyAARQ0rIABBFUYEQCADQQo2AhwgAyABNgIUIANB8Rg2AhAgA0EVNgIMQQAhAgz6AgtBACECIANBADYCHCADIAE2AhQgA0GLDDYCECADQRM2AgwM+QILQQAhAiADQQA2AhwgAyABNgIUIANBsRQ2AhAgA0ECNgIMDPgCC0EAIQIgA0EANgIcIAMgATYCFCADQYwUNgIQIANBGTYCDAz3AgtBACECIANBADYCHCADIAE2AhQgA0HRHDYCECADQRk2AgwM9gILIABBFUYNPUEAIQIgA0EANgIcIAMgATYCFCADQaIPNgIQIANBIjYCDAz1AgsgAygCBCEAQQAhAiADQQA2AgQgAyAAIAEQMiIARQ0oIANBDTYCHCADIAE2AhQgAyAANgIMDPQCCyAAQRVGDTpBACECIANBADYCHCADIAE2AhQgA0GiDzYCECADQSI2AgwM8wILIAMoAgQhAEEAIQIgA0EANgIEIAMgACABEDIiAEUEQCABQQFqIQEMKAsgA0EONgIcIAMgADYCDCADIAFBAWo2AhQM8gILIABBFUYNN0EAIQIgA0EANgIcIAMgATYCFCADQaIPNgIQIANBIjYCDAzxAgsgAygCBCEAQQAhAiADQQA2AgQgAyAAIAEQMiIARQRAIAFBAWohAQwnCyADQQ82AhwgAyAANgIMIAMgAUEBajYCFAzwAgtBACECIANBADYCHCADIAE2AhQgA0HoFjYCECADQRk2AgwM7wILIABBFUYNM0EAIQIgA0EANgIcIAMgATYCFCADQc4MNgIQIANBIzYCDAzuAgsgAygCBCEAQQAhAiADQQA2AgQgAyAAIAEQMyIARQ0lIANBETYCHCADIAE2AhQgAyAANgIMDO0CCyAAQRVGDTBBACECIANBADYCHCADIAE2AhQgA0HODDYCECADQSM2AgwM7AILIAMoAgQhAEEAIQIgA0EANgIEIAMgACABEDMiAEUEQCABQQFqIQEMJQsgA0ESNgIcIAMgADYCDCADIAFBAWo2AhQM6wILIANBL2otAABBAXFFDQELQRUhAgzPAgtBACECIANBADYCHCADIAE2AhQgA0HoFjYCECADQRk2AgwM6AILIABBO0cNACABQQFqIQEMDAtBACECIANBADYCHCADIAE2AhQgA0GYFzYCECADQQI2AgwM5gILIABBFUYNKEEAIQIgA0EANgIcIAMgATYCFCADQc4MNgIQIANBIzYCDAzlAgsgA0EUNgIcIAMgATYCFCADIAA2AgwM5AILIAMoAgQhAEEAIQIgA0EANgIEIAMgACABEDMiAEUEQCABQQFqIQEM3AILIANBFTYCHCADIAA2AgwgAyABQQFqNgIUDOMCCyADKAIEIQBBACECIANBADYCBCADIAAgARAzIgBFBEAgAUEBaiEBDNoCCyADQRc2AhwgAyAANgIMIAMgAUEBajYCFAziAgsgAEEVRg0jQQAhAiADQQA2AhwgAyABNgIUIANBzgw2AhAgA0EjNgIMDOECCyADKAIEIQBBACECIANBADYCBCADIAAgARAzIgBFBEAgAUEBaiEBDB0LIANBGTYCHCADIAA2AgwgAyABQQFqNgIUDOACCyADKAIEIQBBACECIANBADYCBCADIAAgARAzIgBFBEAgAUEBaiEBDNYCCyADQRo2AhwgAyAANgIMIAMgAUEBajYCFAzfAgsgAEEVRg0fQQAhAiADQQA2AhwgAyABNgIUIANBog82AhAgA0EiNgIMDN4CCyADKAIEIQBBACECIANBADYCBCADIAAgARAyIgBFBEAgAUEBaiEBDBsLIANBHDYCHCADIAA2AgwgAyABQQFqNgIUDN0CCyADKAIEIQBBACECIANBADYCBCADIAAgARAyIgBFBEAgAUEBaiEBDNICCyADQR02AhwgAyAANgIMIAMgAUEBajYCFAzcAgsgAEE7Rw0BIAFBAWohAQtBJCECDMACC0EAIQIgA0EANgIcIAMgATYCFCADQc4UNgIQIANBDDYCDAzZAgsgASAERwRAA0AgAS0AAEEgRw3xASAEIAFBAWoiAUcNAAtBLCECDNkCC0EsIQIM2AILIAEgBEYEQEE0IQIM2AILAkACQANAAkAgAS0AAEEKaw4EAgAAAwALIAQgAUEBaiIBRw0AC0E0IQIM2QILIAMoAgQhACADQQA2AgQgAyAAIAEQMCIARQ2MAiADQTI2AhwgAyABNgIUIAMgADYCDEEAIQIM2AILIAMoAgQhACADQQA2AgQgAyAAIAEQMCIARQRAIAFBAWohAQyMAgsgA0EyNgIcIAMgADYCDCADIAFBAWo2AhRBACECDNcCCyABIARHBEACQANAIAEtAABBMGsiAEH/AXFBCk8EQEE5IQIMwAILIAMpAyAiC0KZs+bMmbPmzBlWDQEgAyALQgp+Igo3AyAgCiAArUL/AYMiC0J/hVYNASADIAogC3w3AyAgBCABQQFqIgFHDQALQcAAIQIM2AILIAMoAgQhACADQQA2AgQgAyAAIAFBAWoiARAwIgANFwzJAgtBwAAhAgzWAgsgASAERgRAQckAIQIM1gILAkADQAJAIAEtAABBCWsOGAACjwKPApMCjwKPAo8CjwKPAo8CjwKPAo8CjwKPAo8CjwKPAo8CjwKPAo8CAI8CCyAEIAFBAWoiAUcNAAtByQAhAgzWAgsgAUEBaiEBIANBL2otAABBAXENjwIgA0EANgIcIAMgATYCFCADQekPNgIQIANBCjYCDEEAIQIM1QILIAEgBEcEQANAIAEtAAAiAEEgRwRAAkACQAJAIABByABrDgsAAc0BzQHNAc0BzQHNAc0BzQECzQELIAFBAWohAUHZACECDL8CCyABQQFqIQFB2gAhAgy+AgsgAUEBaiEBQdsAIQIMvQILIAQgAUEBaiIBRw0AC0HuACECDNUCC0HuACECDNQCCyADQQI6ACgMMAtBACECIANBADYCHCADQbcLNgIQIANBAjYCDCADIAFBAWo2AhQM0gILQQAhAgy3AgtBDSECDLYCC0ERIQIMtQILQRMhAgy0AgtBFCECDLMCC0EWIQIMsgILQRchAgyxAgtBGCECDLACC0EZIQIMrwILQRohAgyuAgtBGyECDK0CC0EcIQIMrAILQR0hAgyrAgtBHiECDKoCC0EgIQIMqQILQSEhAgyoAgtBIyECDKcCC0EnIQIMpgILIANBPTYCHCADIAE2AhQgAyAANgIMQQAhAgy/AgsgA0EbNgIcIAMgATYCFCADQY8bNgIQIANBFTYCDEEAIQIMvgILIANBIDYCHCADIAE2AhQgA0GeGTYCECADQRU2AgxBACECDL0CCyADQRM2AhwgAyABNgIUIANBnhk2AhAgA0EVNgIMQQAhAgy8AgsgA0ELNgIcIAMgATYCFCADQZ4ZNgIQIANBFTYCDEEAIQIMuwILIANBEDYCHCADIAE2AhQgA0GeGTYCECADQRU2AgxBACECDLoCCyADQSA2AhwgAyABNgIUIANBjxs2AhAgA0EVNgIMQQAhAgy5AgsgA0ELNgIcIAMgATYCFCADQY8bNgIQIANBFTYCDEEAIQIMuAILIANBDDYCHCADIAE2AhQgA0GPGzYCECADQRU2AgxBACECDLcCC0EAIQIgA0EANgIcIAMgATYCFCADQa8ONgIQIANBEjYCDAy2AgsCQANAAkAgAS0AAEEKaw4EAAICAAILIAQgAUEBaiIBRw0AC0HsASECDLYCCwJAAkAgAy0ANkEBRw0AQQAhAAJAIAMoAjgiAkUNACACKAJYIgJFDQAgAyACEQAAIQALIABFDQAgAEEVRw0BIANB6wE2AhwgAyABNgIUIANB4hg2AhAgA0EVNgIMQQAhAgy3AgtBzAEhAgycAgsgA0EANgIcIAMgATYCFCADQfELNgIQIANBHzYCDEEAIQIMtQILAkACQCADLQAoQQFrDgIEAQALQcsBIQIMmwILQcQBIQIMmgILIANBAjoAMUEAIQACQCADKAI4IgJFDQAgAigCACICRQ0AIAMgAhEAACEACyAARQRAQc0BIQIMmgILIABBFUcEQCADQQA2AhwgAyABNgIUIANBrAw2AhAgA0EQNgIMQQAhAgy0AgsgA0HqATYCHCADIAE2AhQgA0GHGTYCECADQRU2AgxBACECDLMCCyABIARGBEBB6QEhAgyzAgsgAS0AAEHIAEYNASADQQE6ACgLQbYBIQIMlwILQcoBIQIMlgILIAEgBEcEQCADQQw2AgggAyABNgIEQckBIQIMlgILQegBIQIMrwILIAEgBEYEQEHnASECDK8CCyABLQAAQcgARw0EIAFBAWohAUHIASECDJQCCyABIARGBEBB5gEhAgyuAgsCQAJAIAEtAABBxQBrDhAABQUFBQUFBQUFBQUFBQUBBQsgAUEBaiEBQcYBIQIMlAILIAFBAWohAUHHASECDJMCC0HlASECIAEgBEYNrAIgAygCACIAIAQgAWtqIQUgASAAa0ECaiEGAkADQCABLQAAIABB99MAai0AAEcNAyAAQQJGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAMrQILIAMoAgQhACADQgA3AwAgAyAAIAZBAWoiARAtIgBFBEBB1AEhAgyTAgsgA0HkATYCHCADIAE2AhQgAyAANgIMQQAhAgysAgtB4wEhAiABIARGDasCIAMoAgAiACAEIAFraiEFIAEgAGtBAWohBgJAA0AgAS0AACAAQfXTAGotAABHDQIgAEEBRg0BIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADKwCCyADQYEEOwEoIAMoAgQhACADQgA3AwAgAyAAIAZBAWoiARAtIgANAwwCCyADQQA2AgALQQAhAiADQQA2AhwgAyABNgIUIANB0B42AhAgA0EINgIMDKkCC0HFASECDI4CCyADQeIBNgIcIAMgATYCFCADIAA2AgxBACECDKcCC0EAIQACQCADKAI4IgJFDQAgAigCOCICRQ0AIAMgAhEAACEACyAARQ1lIABBFUcEQCADQQA2AhwgAyABNgIUIANB1A42AhAgA0EgNgIMQQAhAgynAgsgA0GFATYCHCADIAE2AhQgA0HXGjYCECADQRU2AgxBACECDKYCC0HhASECIAQgASIARg2lAiAEIAFrIAMoAgAiAWohBSAAIAFrQQRqIQYCQANAIAAtAAAgAUHw0wBqLQAARw0BIAFBBEYNAyABQQFqIQEgBCAAQQFqIgBHDQALIAMgBTYCAAymAgsgA0EANgIcIAMgADYCFCADQYQ3NgIQIANBCDYCDCADQQA2AgBBACECDKUCCyABIARHBEAgA0ENNgIIIAMgATYCBEHCASECDIsCC0HgASECDKQCCyADQQA2AgAgBkEBaiEBC0HDASECDIgCCyABIARGBEBB3wEhAgyiAgsgAS0AAEEwayIAQf8BcUEKSQRAIAMgADoAKiABQQFqIQFBwQEhAgyIAgsgAygCBCEAIANBADYCBCADIAAgARAuIgBFDYgCIANB3gE2AhwgAyABNgIUIAMgADYCDEEAIQIMoQILIAEgBEYEQEHdASECDKECCwJAIAEtAABBLkYEQCABQQFqIQEMAQsgAygCBCEAIANBADYCBCADIAAgARAuIgBFDYkCIANB3AE2AhwgAyABNgIUIAMgADYCDEEAIQIMoQILQcABIQIMhgILIAEgBEYEQEHbASECDKACC0EAIQBBASEFQQEhB0EAIQICQAJAAkACQAJAAn8CQAJAAkACQAJAAkACQCABLQAAQTBrDgoKCQABAgMEBQYICwtBAgwGC0EDDAULQQQMBAtBBQwDC0EGDAILQQcMAQtBCAshAkEAIQVBACEHDAILQQkhAkEBIQBBACEFQQAhBwwBC0EAIQVBASECCyADIAI6ACsgAUEBaiEBAkACQCADLQAuQRBxDQACQAJAAkAgAy0AKg4DAQACBAsgB0UNAwwCCyAADQEMAgsgBUUNAQsgAygCBCEAIANBADYCBCADIAAgARAuIgBFDQIgA0HYATYCHCADIAE2AhQgAyAANgIMQQAhAgyiAgsgAygCBCEAIANBADYCBCADIAAgARAuIgBFDYsCIANB2QE2AhwgAyABNgIUIAMgADYCDEEAIQIMoQILIAMoAgQhACADQQA2AgQgAyAAIAEQLiIARQ2JAiADQdoBNgIcIAMgATYCFCADIAA2AgwMoAILQb8BIQIMhQILQQAhAAJAIAMoAjgiAkUNACACKAI8IgJFDQAgAyACEQAAIQALAkAgAARAIABBFUYNASADQQA2AhwgAyABNgIUIANBnA02AhAgA0EhNgIMQQAhAgygAgtBvgEhAgyFAgsgA0HXATYCHCADIAE2AhQgA0HWGTYCECADQRU2AgxBACECDJ4CCyABIARGBEBB1wEhAgyeAgsCQCABLQAAQSBGBEAgA0EAOwE0IAFBAWohAQwBCyADQQA2AhwgAyABNgIUIANB6xA2AhAgA0EJNgIMQQAhAgyeAgtBvQEhAgyDAgsgASAERgRAQdYBIQIMnQILAkAgAS0AAEEwa0H/AXEiAkEKSQRAIAFBAWohAQJAIAMvATQiAEGZM0sNACADIABBCmwiADsBNCAAQf7/A3EgAkH//wNzSw0AIAMgACACajsBNAwCC0EAIQIgA0EANgIcIAMgATYCFCADQYAdNgIQIANBDTYCDAyeAgsgA0EANgIcIAMgATYCFCADQYAdNgIQIANBDTYCDEEAIQIMnQILQbwBIQIMggILIAEgBEYEQEHVASECDJwCCwJAIAEtAABBMGtB/wFxIgJBCkkEQCABQQFqIQECQCADLwE0IgBBmTNLDQAgAyAAQQpsIgA7ATQgAEH+/wNxIAJB//8Dc0sNACADIAAgAmo7ATQMAgtBACECIANBADYCHCADIAE2AhQgA0GAHTYCECADQQ02AgwMnQILIANBADYCHCADIAE2AhQgA0GAHTYCECADQQ02AgxBACECDJwCC0G7ASECDIECCyABIARGBEBB1AEhAgybAgsCQCABLQAAQTBrQf8BcSICQQpJBEAgAUEBaiEBAkAgAy8BNCIAQZkzSw0AIAMgAEEKbCIAOwE0IABB/v8DcSACQf//A3NLDQAgAyAAIAJqOwE0DAILQQAhAiADQQA2AhwgAyABNgIUIANBgB02AhAgA0ENNgIMDJwCCyADQQA2AhwgAyABNgIUIANBgB02AhAgA0ENNgIMQQAhAgybAgtBugEhAgyAAgsgASAERgRAQdMBIQIMmgILAkACQAJAAkAgAS0AAEEKaw4XAgMDAAMDAwMDAwMDAwMDAwMDAwMDAwEDCyABQQFqDAULIAFBAWohAUG5ASECDIECCyABQQFqIQEgA0Evai0AAEEBcQ0IIANBADYCHCADIAE2AhQgA0GFCzYCECADQQ02AgxBACECDJoCCyADQQA2AhwgAyABNgIUIANBhQs2AhAgA0ENNgIMQQAhAgyZAgsgASAERwRAIANBDjYCCCADIAE2AgRBASECDP8BC0HSASECDJgCCwJAAkADQAJAIAEtAABBCmsOBAIAAAMACyAEIAFBAWoiAUcNAAtB0QEhAgyZAgsgAygCBCEAIANBADYCBCADIAAgARAsIgBFBEAgAUEBaiEBDAQLIANB0AE2AhwgAyAANgIMIAMgAUEBajYCFEEAIQIMmAILIAMoAgQhACADQQA2AgQgAyAAIAEQLCIADQEgAUEBagshAUG3ASECDPwBCyADQc8BNgIcIAMgADYCDCADIAFBAWo2AhRBACECDJUCC0G4ASECDPoBCyADQS9qLQAAQQFxDQEgA0EANgIcIAMgATYCFCADQc8bNgIQIANBGTYCDEEAIQIMkwILIAEgBEYEQEHPASECDJMCCwJAAkACQCABLQAAQQprDgQBAgIAAgsgAUEBaiEBDAILIAFBAWohAQwBCyADLQAuQcAAcUUNAQtBACEAAkAgAygCOCICRQ0AIAIoAjQiAkUNACADIAIRAAAhAAsgAEUNlgEgAEEVRgRAIANB2QA2AhwgAyABNgIUIANBvRk2AhAgA0EVNgIMQQAhAgySAgsgA0EANgIcIAMgATYCFCADQfgMNgIQIANBGzYCDEEAIQIMkQILIANBADYCHCADIAE2AhQgA0HHJzYCECADQQI2AgxBACECDJACCyABIARHBEAgA0EMNgIIIAMgATYCBEG1ASECDPYBC0HOASECDI8CCyABIARGBEBBzQEhAgyPAgsCQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAEtAABBwQBrDhUAAQIDWgQFBlpaWgcICQoLDA0ODxBaCyABQQFqIQFB8QAhAgyEAgsgAUEBaiEBQfIAIQIMgwILIAFBAWohAUH3ACECDIICCyABQQFqIQFB+wAhAgyBAgsgAUEBaiEBQfwAIQIMgAILIAFBAWohAUH/ACECDP8BCyABQQFqIQFBgAEhAgz+AQsgAUEBaiEBQYMBIQIM/QELIAFBAWohAUGMASECDPwBCyABQQFqIQFBjQEhAgz7AQsgAUEBaiEBQY4BIQIM+gELIAFBAWohAUGbASECDPkBCyABQQFqIQFBnAEhAgz4AQsgAUEBaiEBQaIBIQIM9wELIAFBAWohAUGqASECDPYBCyABQQFqIQFBrQEhAgz1AQsgAUEBaiEBQbQBIQIM9AELIAEgBEYEQEHMASECDI4CCyABLQAAQc4ARw1IIAFBAWohAUGzASECDPMBCyABIARGBEBBywEhAgyNAgsCQAJAAkAgAS0AAEHCAGsOEgBKSkpKSkpKSkoBSkpKSkpKAkoLIAFBAWohAUGuASECDPQBCyABQQFqIQFBsQEhAgzzAQsgAUEBaiEBQbIBIQIM8gELQcoBIQIgASAERg2LAiADKAIAIgAgBCABa2ohBSABIABrQQdqIQYCQANAIAEtAAAgAEHo0wBqLQAARw1FIABBB0YNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAyMAgsgA0EANgIAIAZBAWohAUEbDEULIAEgBEYEQEHJASECDIsCCwJAAkAgAS0AAEHJAGsOBwBHR0dHRwFHCyABQQFqIQFBrwEhAgzxAQsgAUEBaiEBQbABIQIM8AELQcgBIQIgASAERg2JAiADKAIAIgAgBCABa2ohBSABIABrQQFqIQYCQANAIAEtAAAgAEHm0wBqLQAARw1DIABBAUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAyKAgsgA0EANgIAIAZBAWohAUEPDEMLQccBIQIgASAERg2IAiADKAIAIgAgBCABa2ohBSABIABrQQFqIQYCQANAIAEtAAAgAEHk0wBqLQAARw1CIABBAUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAyJAgsgA0EANgIAIAZBAWohAUEgDEILQcYBIQIgASAERg2HAiADKAIAIgAgBCABa2ohBSABIABrQQJqIQYCQANAIAEtAAAgAEHh0wBqLQAARw1BIABBAkYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAyIAgsgA0EANgIAIAZBAWohAUESDEELIAEgBEYEQEHFASECDIcCCwJAAkAgAS0AAEHFAGsODgBDQ0NDQ0NDQ0NDQ0MBQwsgAUEBaiEBQasBIQIM7QELIAFBAWohAUGsASECDOwBC0HEASECIAEgBEYNhQIgAygCACIAIAQgAWtqIQUgASAAa0ECaiEGAkADQCABLQAAIABB3tMAai0AAEcNPyAAQQJGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAMhgILIANBADYCACAGQQFqIQFBBww/C0HDASECIAEgBEYNhAIgAygCACIAIAQgAWtqIQUgASAAa0EFaiEGAkADQCABLQAAIABB2NMAai0AAEcNPiAAQQVGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAMhQILIANBADYCACAGQQFqIQFBKAw+CyABIARGBEBBwgEhAgyEAgsCQAJAAkAgAS0AAEHFAGsOEQBBQUFBQUFBQUEBQUFBQUECQQsgAUEBaiEBQacBIQIM6wELIAFBAWohAUGoASECDOoBCyABQQFqIQFBqQEhAgzpAQtBwQEhAiABIARGDYICIAMoAgAiACAEIAFraiEFIAEgAGtBBmohBgJAA0AgAS0AACAAQdHTAGotAABHDTwgAEEGRg0BIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADIMCCyADQQA2AgAgBkEBaiEBQRoMPAtBwAEhAiABIARGDYECIAMoAgAiACAEIAFraiEFIAEgAGtBA2ohBgJAA0AgAS0AACAAQc3TAGotAABHDTsgAEEDRg0BIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADIICCyADQQA2AgAgBkEBaiEBQSEMOwsgASAERgRAQb8BIQIMgQILAkACQCABLQAAQcEAaw4UAD09PT09PT09PT09PT09PT09PQE9CyABQQFqIQFBowEhAgznAQsgAUEBaiEBQaYBIQIM5gELIAEgBEYEQEG+ASECDIACCwJAAkAgAS0AAEHVAGsOCwA8PDw8PDw8PDwBPAsgAUEBaiEBQaQBIQIM5gELIAFBAWohAUGlASECDOUBC0G9ASECIAEgBEYN/gEgAygCACIAIAQgAWtqIQUgASAAa0EIaiEGAkADQCABLQAAIABBxNMAai0AAEcNOCAAQQhGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM/wELIANBADYCACAGQQFqIQFBKgw4CyABIARGBEBBvAEhAgz+AQsgAS0AAEHQAEcNOCABQQFqIQFBJQw3C0G7ASECIAEgBEYN/AEgAygCACIAIAQgAWtqIQUgASAAa0ECaiEGAkADQCABLQAAIABBwdMAai0AAEcNNiAAQQJGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM/QELIANBADYCACAGQQFqIQFBDgw2CyABIARGBEBBugEhAgz8AQsgAS0AAEHFAEcNNiABQQFqIQFBoQEhAgzhAQsgASAERgRAQbkBIQIM+wELAkACQAJAAkAgAS0AAEHCAGsODwABAjk5OTk5OTk5OTk5AzkLIAFBAWohAUGdASECDOMBCyABQQFqIQFBngEhAgziAQsgAUEBaiEBQZ8BIQIM4QELIAFBAWohAUGgASECDOABC0G4ASECIAEgBEYN+QEgAygCACIAIAQgAWtqIQUgASAAa0ECaiEGAkADQCABLQAAIABBvtMAai0AAEcNMyAAQQJGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM+gELIANBADYCACAGQQFqIQFBFAwzC0G3ASECIAEgBEYN+AEgAygCACIAIAQgAWtqIQUgASAAa0EEaiEGAkADQCABLQAAIABBudMAai0AAEcNMiAAQQRGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM+QELIANBADYCACAGQQFqIQFBKwwyC0G2ASECIAEgBEYN9wEgAygCACIAIAQgAWtqIQUgASAAa0ECaiEGAkADQCABLQAAIABBttMAai0AAEcNMSAAQQJGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM+AELIANBADYCACAGQQFqIQFBLAwxC0G1ASECIAEgBEYN9gEgAygCACIAIAQgAWtqIQUgASAAa0ECaiEGAkADQCABLQAAIABB4dMAai0AAEcNMCAAQQJGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM9wELIANBADYCACAGQQFqIQFBEQwwC0G0ASECIAEgBEYN9QEgAygCACIAIAQgAWtqIQUgASAAa0EDaiEGAkADQCABLQAAIABBstMAai0AAEcNLyAAQQNGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM9gELIANBADYCACAGQQFqIQFBLgwvCyABIARGBEBBswEhAgz1AQsCQAJAAkACQAJAIAEtAABBwQBrDhUANDQ0NDQ0NDQ0NAE0NAI0NAM0NAQ0CyABQQFqIQFBkQEhAgzeAQsgAUEBaiEBQZIBIQIM3QELIAFBAWohAUGTASECDNwBCyABQQFqIQFBmAEhAgzbAQsgAUEBaiEBQZoBIQIM2gELIAEgBEYEQEGyASECDPQBCwJAAkAgAS0AAEHSAGsOAwAwATALIAFBAWohAUGZASECDNoBCyABQQFqIQFBBAwtC0GxASECIAEgBEYN8gEgAygCACIAIAQgAWtqIQUgASAAa0EBaiEGAkADQCABLQAAIABBsNMAai0AAEcNLCAAQQFGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM8wELIANBADYCACAGQQFqIQFBHQwsCyABIARGBEBBsAEhAgzyAQsCQAJAIAEtAABByQBrDgcBLi4uLi4ALgsgAUEBaiEBQZcBIQIM2AELIAFBAWohAUEiDCsLIAEgBEYEQEGvASECDPEBCyABLQAAQdAARw0rIAFBAWohAUGWASECDNYBCyABIARGBEBBrgEhAgzwAQsCQAJAIAEtAABBxgBrDgsALCwsLCwsLCwsASwLIAFBAWohAUGUASECDNYBCyABQQFqIQFBlQEhAgzVAQtBrQEhAiABIARGDe4BIAMoAgAiACAEIAFraiEFIAEgAGtBA2ohBgJAA0AgAS0AACAAQazTAGotAABHDSggAEEDRg0BIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADO8BCyADQQA2AgAgBkEBaiEBQQ0MKAtBrAEhAiABIARGDe0BIAMoAgAiACAEIAFraiEFIAEgAGtBAmohBgJAA0AgAS0AACAAQeHTAGotAABHDScgAEECRg0BIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADO4BCyADQQA2AgAgBkEBaiEBQQwMJwtBqwEhAiABIARGDewBIAMoAgAiACAEIAFraiEFIAEgAGtBAWohBgJAA0AgAS0AACAAQarTAGotAABHDSYgAEEBRg0BIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADO0BCyADQQA2AgAgBkEBaiEBQQMMJgtBqgEhAiABIARGDesBIAMoAgAiACAEIAFraiEFIAEgAGtBAWohBgJAA0AgAS0AACAAQajTAGotAABHDSUgAEEBRg0BIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADOwBCyADQQA2AgAgBkEBaiEBQSYMJQsgASAERgRAQakBIQIM6wELAkACQCABLQAAQdQAaw4CAAEnCyABQQFqIQFBjwEhAgzRAQsgAUEBaiEBQZABIQIM0AELQagBIQIgASAERg3pASADKAIAIgAgBCABa2ohBSABIABrQQFqIQYCQANAIAEtAAAgAEGm0wBqLQAARw0jIABBAUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzqAQsgA0EANgIAIAZBAWohAUEnDCMLQacBIQIgASAERg3oASADKAIAIgAgBCABa2ohBSABIABrQQFqIQYCQANAIAEtAAAgAEGk0wBqLQAARw0iIABBAUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzpAQsgA0EANgIAIAZBAWohAUEcDCILQaYBIQIgASAERg3nASADKAIAIgAgBCABa2ohBSABIABrQQVqIQYCQANAIAEtAAAgAEGe0wBqLQAARw0hIABBBUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzoAQsgA0EANgIAIAZBAWohAUEGDCELQaUBIQIgASAERg3mASADKAIAIgAgBCABa2ohBSABIABrQQRqIQYCQANAIAEtAAAgAEGZ0wBqLQAARw0gIABBBEYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAznAQsgA0EANgIAIAZBAWohAUEZDCALIAEgBEYEQEGkASECDOYBCwJAAkACQAJAIAEtAABBLWsOIwAkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJAEkJCQkJAIkJCQDJAsgAUEBaiEBQYQBIQIMzgELIAFBAWohAUGFASECDM0BCyABQQFqIQFBigEhAgzMAQsgAUEBaiEBQYsBIQIMywELQaMBIQIgASAERg3kASADKAIAIgAgBCABa2ohBSABIABrQQFqIQYCQANAIAEtAAAgAEGX0wBqLQAARw0eIABBAUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzlAQsgA0EANgIAIAZBAWohAUELDB4LIAEgBEYEQEGiASECDOQBCwJAAkAgAS0AAEHBAGsOAwAgASALIAFBAWohAUGGASECDMoBCyABQQFqIQFBiQEhAgzJAQsgASAERgRAQaEBIQIM4wELAkACQCABLQAAQcEAaw4PAB8fHx8fHx8fHx8fHx8BHwsgAUEBaiEBQYcBIQIMyQELIAFBAWohAUGIASECDMgBCyABIARGBEBBoAEhAgziAQsgAS0AAEHMAEcNHCABQQFqIQFBCgwbC0GfASECIAEgBEYN4AEgAygCACIAIAQgAWtqIQUgASAAa0EFaiEGAkADQCABLQAAIABBkdMAai0AAEcNGiAAQQVGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM4QELIANBADYCACAGQQFqIQFBHgwaC0GeASECIAEgBEYN3wEgAygCACIAIAQgAWtqIQUgASAAa0EGaiEGAkADQCABLQAAIABBitMAai0AAEcNGSAAQQZGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM4AELIANBADYCACAGQQFqIQFBFQwZC0GdASECIAEgBEYN3gEgAygCACIAIAQgAWtqIQUgASAAa0ECaiEGAkADQCABLQAAIABBh9MAai0AAEcNGCAAQQJGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM3wELIANBADYCACAGQQFqIQFBFwwYC0GcASECIAEgBEYN3QEgAygCACIAIAQgAWtqIQUgASAAa0EFaiEGAkADQCABLQAAIABBgdMAai0AAEcNFyAAQQVGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM3gELIANBADYCACAGQQFqIQFBGAwXCyABIARGBEBBmwEhAgzdAQsCQAJAIAEtAABByQBrDgcAGRkZGRkBGQsgAUEBaiEBQYEBIQIMwwELIAFBAWohAUGCASECDMIBC0GaASECIAEgBEYN2wEgAygCACIAIAQgAWtqIQUgASAAa0EBaiEGAkADQCABLQAAIABB5tMAai0AAEcNFSAAQQFGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM3AELIANBADYCACAGQQFqIQFBCQwVC0GZASECIAEgBEYN2gEgAygCACIAIAQgAWtqIQUgASAAa0EBaiEGAkADQCABLQAAIABB5NMAai0AAEcNFCAAQQFGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM2wELIANBADYCACAGQQFqIQFBHwwUC0GYASECIAEgBEYN2QEgAygCACIAIAQgAWtqIQUgASAAa0ECaiEGAkADQCABLQAAIABB/tIAai0AAEcNEyAAQQJGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM2gELIANBADYCACAGQQFqIQFBAgwTC0GXASECIAEgBEYN2AEgAygCACIAIAQgAWtqIQUgASAAa0EBaiEGA0AgAS0AACAAQfzSAGotAABHDREgAEEBRg0CIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADNgBCyABIARGBEBBlgEhAgzYAQtBASABLQAAQd8ARw0RGiABQQFqIQFB/QAhAgy9AQsgA0EANgIAIAZBAWohAUH+ACECDLwBC0GVASECIAEgBEYN1QEgAygCACIAIAQgAWtqIQUgASAAa0EIaiEGAkADQCABLQAAIABBxNMAai0AAEcNDyAAQQhGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM1gELIANBADYCACAGQQFqIQFBKQwPC0GUASECIAEgBEYN1AEgAygCACIAIAQgAWtqIQUgASAAa0EDaiEGAkADQCABLQAAIABB+NIAai0AAEcNDiAAQQNGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAM1QELIANBADYCACAGQQFqIQFBLQwOCyABIARGBEBBkwEhAgzUAQsgAS0AAEHFAEcNDiABQQFqIQFB+gAhAgy5AQsgASAERgRAQZIBIQIM0wELAkACQCABLQAAQcwAaw4IAA8PDw8PDwEPCyABQQFqIQFB+AAhAgy5AQsgAUEBaiEBQfkAIQIMuAELQZEBIQIgASAERg3RASADKAIAIgAgBCABa2ohBSABIABrQQRqIQYCQANAIAEtAAAgAEHz0gBqLQAARw0LIABBBEYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzSAQsgA0EANgIAIAZBAWohAUEjDAsLQZABIQIgASAERg3QASADKAIAIgAgBCABa2ohBSABIABrQQJqIQYCQANAIAEtAAAgAEHw0gBqLQAARw0KIABBAkYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzRAQsgA0EANgIAIAZBAWohAUEADAoLIAEgBEYEQEGPASECDNABCwJAAkAgAS0AAEHIAGsOCAAMDAwMDAwBDAsgAUEBaiEBQfMAIQIMtgELIAFBAWohAUH2ACECDLUBCyABIARGBEBBjgEhAgzPAQsCQAJAIAEtAABBzgBrDgMACwELCyABQQFqIQFB9AAhAgy1AQsgAUEBaiEBQfUAIQIMtAELIAEgBEYEQEGNASECDM4BCyABLQAAQdkARw0IIAFBAWohAUEIDAcLQYwBIQIgASAERg3MASADKAIAIgAgBCABa2ohBSABIABrQQNqIQYCQANAIAEtAAAgAEHs0gBqLQAARw0GIABBA0YNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzNAQsgA0EANgIAIAZBAWohAUEFDAYLQYsBIQIgASAERg3LASADKAIAIgAgBCABa2ohBSABIABrQQVqIQYCQANAIAEtAAAgAEHm0gBqLQAARw0FIABBBUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzMAQsgA0EANgIAIAZBAWohAUEWDAULQYoBIQIgASAERg3KASADKAIAIgAgBCABa2ohBSABIABrQQJqIQYCQANAIAEtAAAgAEHh0wBqLQAARw0EIABBAkYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAzLAQsgA0EANgIAIAZBAWohAUEQDAQLIAEgBEYEQEGJASECDMoBCwJAAkAgAS0AAEHDAGsODAAGBgYGBgYGBgYGAQYLIAFBAWohAUHvACECDLABCyABQQFqIQFB8AAhAgyvAQtBiAEhAiABIARGDcgBIAMoAgAiACAEIAFraiEFIAEgAGtBBWohBgJAA0AgAS0AACAAQeDSAGotAABHDQIgAEEFRg0BIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADMkBCyADQQA2AgAgBkEBaiEBQSQMAgsgA0EANgIADAILIAEgBEYEQEGHASECDMcBCyABLQAAQcwARw0BIAFBAWohAUETCzoAKSADKAIEIQAgA0EANgIEIAMgACABEC0iAA0CDAELQQAhAiADQQA2AhwgAyABNgIUIANB6R42AhAgA0EGNgIMDMQBC0HuACECDKkBCyADQYYBNgIcIAMgATYCFCADIAA2AgxBACECDMIBC0EAIQACQCADKAI4IgJFDQAgAigCOCICRQ0AIAMgAhEAACEACyAARQ0AIABBFUYNASADQQA2AhwgAyABNgIUIANB1A42AhAgA0EgNgIMQQAhAgzBAQtB7QAhAgymAQsgA0GFATYCHCADIAE2AhQgA0HXGjYCECADQRU2AgxBACECDL8BCyABIARGBEBBhQEhAgy/AQsCQCABLQAAQSBGBEAgAUEBaiEBDAELIANBADYCHCADIAE2AhQgA0GGHjYCECADQQY2AgxBACECDL8BC0ECIQIMpAELA0AgAS0AAEEgRw0CIAQgAUEBaiIBRw0AC0GEASECDL0BCyABIARGBEBBgwEhAgy9AQsCQCABLQAAQQlrDgRAAABAAAtB6wAhAgyiAQsgAy0AKUEFRgRAQewAIQIMogELQeoAIQIMoQELIAEgBEYEQEGCASECDLsBCyADQQ82AgggAyABNgIEDAoLIAEgBEYEQEGBASECDLoBCwJAIAEtAABBCWsOBD0AAD0AC0HpACECDJ8BCyABIARHBEAgA0EPNgIIIAMgATYCBEHnACECDJ8BC0GAASECDLgBCwJAIAEgBEcEQANAIAEtAABB4M4Aai0AACIAQQNHBEACQCAAQQFrDgI/AAQLQeYAIQIMoQELIAQgAUEBaiIBRw0AC0H+ACECDLkBC0H+ACECDLgBCyADQQA2AhwgAyABNgIUIANBxh82AhAgA0EHNgIMQQAhAgy3AQsgASAERgRAQf8AIQIMtwELAkACQAJAIAEtAABB4NAAai0AAEEBaw4DPAIAAQtB6AAhAgyeAQsgA0EANgIcIAMgATYCFCADQYYSNgIQIANBBzYCDEEAIQIMtwELQeAAIQIMnAELIAEgBEcEQCABQQFqIQFB5QAhAgycAQtB/QAhAgy1AQsgBCABIgBGBEBB/AAhAgy1AQsgAC0AACIBQS9GBEAgAEEBaiEBQeQAIQIMmwELIAFBCWsiAkEXSw0BIAAhAUEBIAJ0QZuAgARxDTcMAQsgBCABIgBGBEBB+wAhAgy0AQsgAC0AAEEvRw0AIABBAWohAQwDC0EAIQIgA0EANgIcIAMgADYCFCADQcYfNgIQIANBBzYCDAyyAQsCQAJAAkACQAJAA0AgAS0AAEHgzABqLQAAIgBBBUcEQAJAAkAgAEEBaw4IPQUGBwgABAEIC0HhACECDJ8BCyABQQFqIQFB4wAhAgyeAQsgBCABQQFqIgFHDQALQfoAIQIMtgELIAFBAWoMFAsgAygCBCEAIANBADYCBCADIAAgARArIgBFDR4gA0HbADYCHCADIAE2AhQgAyAANgIMQQAhAgy0AQsgAygCBCEAIANBADYCBCADIAAgARArIgBFDR4gA0HdADYCHCADIAE2AhQgAyAANgIMQQAhAgyzAQsgAygCBCEAIANBADYCBCADIAAgARArIgBFDR4gA0HwADYCHCADIAE2AhQgAyAANgIMQQAhAgyyAQsgA0EANgIcIAMgATYCFCADQcsPNgIQIANBBzYCDEEAIQIMsQELIAEgBEYEQEH5ACECDLEBCwJAIAEtAABB4MwAai0AAEEBaw4INAQFBgAIAgMHCyABQQFqIQELQQMhAgyVAQsgAUEBagwNC0EAIQIgA0EANgIcIANBoxI2AhAgA0EHNgIMIAMgAUEBajYCFAytAQsgAygCBCEAIANBADYCBCADIAAgARArIgBFDRYgA0HbADYCHCADIAE2AhQgAyAANgIMQQAhAgysAQsgAygCBCEAIANBADYCBCADIAAgARArIgBFDRYgA0HdADYCHCADIAE2AhQgAyAANgIMQQAhAgyrAQsgAygCBCEAIANBADYCBCADIAAgARArIgBFDRYgA0HwADYCHCADIAE2AhQgAyAANgIMQQAhAgyqAQsgA0EANgIcIAMgATYCFCADQcsPNgIQIANBBzYCDEEAIQIMqQELQeIAIQIMjgELIAEgBEYEQEH4ACECDKgBCyABQQFqDAILIAEgBEYEQEH3ACECDKcBCyABQQFqDAELIAEgBEYNASABQQFqCyEBQQQhAgyKAQtB9gAhAgyjAQsDQCABLQAAQeDKAGotAAAiAEECRwRAIABBAUcEQEHfACECDIsBCwwnCyAEIAFBAWoiAUcNAAtB9QAhAgyiAQsgASAERgRAQfQAIQIMogELAkAgAS0AAEEJaw43JQMGJQQGBgYGBgYGBgYGBgYGBgYGBgYFBgYCBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGAAYLIAFBAWoLIQFBBSECDIYBCyABQQFqDAYLIAMoAgQhACADQQA2AgQgAyAAIAEQKyIARQ0IIANB2wA2AhwgAyABNgIUIAMgADYCDEEAIQIMngELIAMoAgQhACADQQA2AgQgAyAAIAEQKyIARQ0IIANB3QA2AhwgAyABNgIUIAMgADYCDEEAIQIMnQELIAMoAgQhACADQQA2AgQgAyAAIAEQKyIARQ0IIANB8AA2AhwgAyABNgIUIAMgADYCDEEAIQIMnAELIANBADYCHCADIAE2AhQgA0G8EzYCECADQQc2AgxBACECDJsBCwJAAkACQAJAA0AgAS0AAEHgyABqLQAAIgBBBUcEQAJAIABBAWsOBiQDBAUGAAYLQd4AIQIMhgELIAQgAUEBaiIBRw0AC0HzACECDJ4BCyADKAIEIQAgA0EANgIEIAMgACABECsiAEUNByADQdsANgIcIAMgATYCFCADIAA2AgxBACECDJ0BCyADKAIEIQAgA0EANgIEIAMgACABECsiAEUNByADQd0ANgIcIAMgATYCFCADIAA2AgxBACECDJwBCyADKAIEIQAgA0EANgIEIAMgACABECsiAEUNByADQfAANgIcIAMgATYCFCADIAA2AgxBACECDJsBCyADQQA2AhwgAyABNgIUIANB3Ag2AhAgA0EHNgIMQQAhAgyaAQsgASAERg0BIAFBAWoLIQFBBiECDH4LQfIAIQIMlwELAkACQAJAAkADQCABLQAAQeDGAGotAAAiAEEFRwRAIABBAWsOBB8CAwQFCyAEIAFBAWoiAUcNAAtB8QAhAgyaAQsgAygCBCEAIANBADYCBCADIAAgARArIgBFDQMgA0HbADYCHCADIAE2AhQgAyAANgIMQQAhAgyZAQsgAygCBCEAIANBADYCBCADIAAgARArIgBFDQMgA0HdADYCHCADIAE2AhQgAyAANgIMQQAhAgyYAQsgAygCBCEAIANBADYCBCADIAAgARArIgBFDQMgA0HwADYCHCADIAE2AhQgAyAANgIMQQAhAgyXAQsgA0EANgIcIAMgATYCFCADQbQKNgIQIANBBzYCDEEAIQIMlgELQc4AIQIMewtB0AAhAgx6C0HdACECDHkLIAEgBEYEQEHwACECDJMBCwJAIAEtAABBCWsOBBYAABYACyABQQFqIQFB3AAhAgx4CyABIARGBEBB7wAhAgySAQsCQCABLQAAQQlrDgQVAAAVAAtBACEAAkAgAygCOCICRQ0AIAIoAjAiAkUNACADIAIRAAAhAAsgAEUEQEHTASECDHgLIABBFUcEQCADQQA2AhwgAyABNgIUIANBwQ02AhAgA0EaNgIMQQAhAgySAQsgA0HuADYCHCADIAE2AhQgA0HwGTYCECADQRU2AgxBACECDJEBC0HtACECIAEgBEYNkAEgAygCACIAIAQgAWtqIQUgASAAa0EDaiEGAkADQCABLQAAIABB18YAai0AAEcNBCAAQQNGDQEgAEEBaiEAIAQgAUEBaiIBRw0ACyADIAU2AgAMkQELIANBADYCACAGQQFqIQEgAy0AKSIAQSNrQQtJDQQCQCAAQQZLDQBBASAAdEHKAHFFDQAMBQtBACECIANBADYCHCADIAE2AhQgA0HlCTYCECADQQg2AgwMkAELQewAIQIgASAERg2PASADKAIAIgAgBCABa2ohBSABIABrQQJqIQYCQANAIAEtAAAgAEHUxgBqLQAARw0DIABBAkYNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAyQAQsgA0EANgIAIAZBAWohASADLQApQSFGDQMgA0EANgIcIAMgATYCFCADQYkKNgIQIANBCDYCDEEAIQIMjwELQesAIQIgASAERg2OASADKAIAIgAgBCABa2ohBSABIABrQQNqIQYCQANAIAEtAAAgAEHQxgBqLQAARw0CIABBA0YNASAAQQFqIQAgBCABQQFqIgFHDQALIAMgBTYCAAyPAQsgA0EANgIAIAZBAWohASADLQApIgBBI0kNAiAAQS5GDQIgA0EANgIcIAMgATYCFCADQcEJNgIQIANBCDYCDEEAIQIMjgELIANBADYCAAtBACECIANBADYCHCADIAE2AhQgA0GENzYCECADQQg2AgwMjAELQdgAIQIMcQsgASAERwRAIANBDTYCCCADIAE2AgRB1wAhAgxxC0HqACECDIoBCyABIARGBEBB6QAhAgyKAQsgAS0AAEEwayIAQf8BcUEKSQRAIAMgADoAKiABQQFqIQFB1gAhAgxwCyADKAIEIQAgA0EANgIEIAMgACABEC4iAEUNdCADQegANgIcIAMgATYCFCADIAA2AgxBACECDIkBCyABIARGBEBB5wAhAgyJAQsCQCABLQAAQS5GBEAgAUEBaiEBDAELIAMoAgQhACADQQA2AgQgAyAAIAEQLiIARQ11IANB5gA2AhwgAyABNgIUIAMgADYCDEEAIQIMiQELQdUAIQIMbgsgASAERgRAQeUAIQIMiAELQQAhAEEBIQVBASEHQQAhAgJAAkACQAJAAkACfwJAAkACQAJAAkACQAJAIAEtAABBMGsOCgoJAAECAwQFBggLC0ECDAYLQQMMBQtBBAwEC0EFDAMLQQYMAgtBBwwBC0EICyECQQAhBUEAIQcMAgtBCSECQQEhAEEAIQVBACEHDAELQQAhBUEBIQILIAMgAjoAKyABQQFqIQECQAJAIAMtAC5BEHENAAJAAkACQCADLQAqDgMBAAIECyAHRQ0DDAILIAANAQwCCyAFRQ0BCyADKAIEIQAgA0EANgIEIAMgACABEC4iAEUNAiADQeIANgIcIAMgATYCFCADIAA2AgxBACECDIoBCyADKAIEIQAgA0EANgIEIAMgACABEC4iAEUNdyADQeMANgIcIAMgATYCFCADIAA2AgxBACECDIkBCyADKAIEIQAgA0EANgIEIAMgACABEC4iAEUNdSADQeQANgIcIAMgATYCFCADIAA2AgwMiAELQdMAIQIMbQsgAy0AKUEiRg2AAUHSACECDGwLQQAhAAJAIAMoAjgiAkUNACACKAI8IgJFDQAgAyACEQAAIQALIABFBEBB1AAhAgxsCyAAQRVHBEAgA0EANgIcIAMgATYCFCADQZwNNgIQIANBITYCDEEAIQIMhgELIANB4QA2AhwgAyABNgIUIANB1hk2AhAgA0EVNgIMQQAhAgyFAQsgASAERgRAQeAAIQIMhQELAkACQAJAAkACQCABLQAAQQprDgQBBAQABAsgAUEBaiEBDAELIAFBAWohASADQS9qLQAAQQFxRQ0BC0HRACECDGwLIANBADYCHCADIAE2AhQgA0GIETYCECADQQk2AgxBACECDIUBCyADQQA2AhwgAyABNgIUIANBiBE2AhAgA0EJNgIMQQAhAgyEAQsgASAERgRAQd8AIQIMhAELIAEtAABBCkYEQCABQQFqIQEMCQsgAy0ALkHAAHENCCADQQA2AhwgAyABNgIUIANBiBE2AhAgA0ECNgIMQQAhAgyDAQsgASAERgRAQd0AIQIMgwELIAEtAAAiAkENRgRAIAFBAWohAUHPACECDGkLIAEhACACQQlrDgQFAQEFAQsgBCABIgBGBEBB3AAhAgyCAQsgAC0AAEEKRw0AIABBAWoMAgtBACECIANBADYCHCADIAA2AhQgA0G1LDYCECADQQc2AgwMgAELIAEgBEYEQEHbACECDIABCwJAIAEtAABBCWsOBAMAAAMACyABQQFqCyEBQc0AIQIMZAsgASAERgRAQdoAIQIMfgsgAS0AAEEJaw4EAAEBAAELQQAhAiADQQA2AhwgA0HsETYCECADQQc2AgwgAyABQQFqNgIUDHwLIANBgBI7ASpBACEAAkAgAygCOCICRQ0AIAIoAjAiAkUNACADIAIRAAAhAAsgAEUNACAAQRVHDQEgA0HZADYCHCADIAE2AhQgA0HwGTYCECADQRU2AgxBACECDHsLQcwAIQIMYAsgA0EANgIcIAMgATYCFCADQcENNgIQIANBGjYCDEEAIQIMeQsgASAERgRAQdkAIQIMeQsgAS0AAEEgRw06IAFBAWohASADLQAuQQFxDTogA0EANgIcIAMgATYCFCADQa0bNgIQIANBHjYCDEEAIQIMeAsgASAERgRAQdgAIQIMeAsCQAJAAkACQAJAIAEtAAAiAEEKaw4EAgMDAAELIAFBAWohAUErIQIMYQsgAEE6Rw0BIANBADYCHCADIAE2AhQgA0G5ETYCECADQQo2AgxBACECDHoLIAFBAWohASADQS9qLQAAQQFxRQ1tIAMtADJBgAFxRQRAIANBMmohAiADEDRBACEAAkAgAygCOCIGRQ0AIAYoAiQiBkUNACADIAYRAAAhAAsCQAJAIAAOFkpJSAEBAQEBAQEBAQEBAQEBAQEBAQABCyADQSk2AhwgAyABNgIUIANBshg2AhAgA0EVNgIMQQAhAgx7CyADQQA2AhwgAyABNgIUIANB3Qs2AhAgA0ERNgIMQQAhAgx6C0EAIQACQCADKAI4IgJFDQAgAigCVCICRQ0AIAMgAhEAACEACyAARQ1VIABBFUcNASADQQU2AhwgAyABNgIUIANBhho2AhAgA0EVNgIMQQAhAgx5C0HKACECDF4LQQAhAiADQQA2AhwgAyABNgIUIANB4g02AhAgA0EUNgIMDHcLIAMgAy8BMkGAAXI7ATIMOAsgASAERwRAIANBEDYCCCADIAE2AgRByQAhAgxcC0HXACECDHULIAEgBEYEQEHWACECDHULAkACQAJAAkAgAS0AACIAQSByIAAgAEHBAGtB/wFxQRpJG0H/AXFB4wBrDhMAPT09PT09PT09PT09AT09PQIDPQsgAUEBaiEBQcUAIQIMXQsgAUEBaiEBQcYAIQIMXAsgAUEBaiEBQccAIQIMWwsgAUEBaiEBQcgAIQIMWgtB1QAhAiAEIAEiAEYNcyAEIAFrIAMoAgAiAWohBiAAIAFrQQVqIQcDQCABQcDGAGotAAAgAC0AACIFQSByIAUgBUHBAGtB/wFxQRpJG0H/AXFHDQhBBCABQQVGDQoaIAFBAWohASAEIABBAWoiAEcNAAsgAyAGNgIADHMLQdQAIQIgBCABIgBGDXIgBCABayADKAIAIgFqIQYgACABa0EPaiEHA0AgAUGwxgBqLQAAIAAtAAAiBUEgciAFIAVBwQBrQf8BcUEaSRtB/wFxRw0HQQMgAUEPRg0JGiABQQFqIQEgBCAAQQFqIgBHDQALIAMgBjYCAAxyC0HTACECIAQgASIARg1xIAQgAWsgAygCACIBaiEGIAAgAWtBDmohBwNAIAFBksYAai0AACAALQAAIgVBIHIgBSAFQcEAa0H/AXFBGkkbQf8BcUcNBiABQQ5GDQcgAUEBaiEBIAQgAEEBaiIARw0ACyADIAY2AgAMcQtB0gAhAiAEIAEiAEYNcCAEIAFrIAMoAgAiAWohBSAAIAFrQQFqIQYDQCABQZDGAGotAAAgAC0AACIHQSByIAcgB0HBAGtB/wFxQRpJG0H/AXFHDQUgAUEBRg0CIAFBAWohASAEIABBAWoiAEcNAAsgAyAFNgIADHALIAEgBEYEQEHRACECDHALAkACQCABLQAAIgBBIHIgACAAQcEAa0H/AXFBGkkbQf8BcUHuAGsOBwA2NjY2NgE2CyABQQFqIQFBwgAhAgxWCyABQQFqIQFBwwAhAgxVCyADQQA2AgAgBkEBaiEBQcQAIQIMVAtB0AAhAiAEIAEiAEYNbSAEIAFrIAMoAgAiAWohBiAAIAFrQQlqIQcDQCABQYbGAGotAAAgAC0AACIFQSByIAUgBUHBAGtB/wFxQRpJG0H/AXFHDQJBAiABQQlGDQQaIAFBAWohASAEIABBAWoiAEcNAAsgAyAGNgIADG0LQc8AIQIgBCABIgBGDWwgBCABayADKAIAIgFqIQYgACABa0EFaiEHA0AgAUGAxgBqLQAAIAAtAAAiBUEgciAFIAVBwQBrQf8BcUEaSRtB/wFxRw0BIAFBBUYNAiABQQFqIQEgBCAAQQFqIgBHDQALIAMgBjYCAAxsCyAAIQEgA0EANgIADDALQQELOgAsIANBADYCACAHQQFqIQELQSwhAgxOCwJAA0AgAS0AAEGAxABqLQAAQQFHDQEgBCABQQFqIgFHDQALQc0AIQIMaAtBwQAhAgxNCyABIARGBEBBzAAhAgxnCyABLQAAQTpGBEAgAygCBCEAIANBADYCBCADIAAgARAvIgBFDTAgA0HLADYCHCADIAA2AgwgAyABQQFqNgIUQQAhAgxnCyADQQA2AhwgAyABNgIUIANBuRE2AhAgA0EKNgIMQQAhAgxmCwJAAkAgAy0ALEECaw4CAAEkCyADQTNqLQAAQQJxRQ0jIAMtAC5BAnENIyADQQA2AhwgAyABNgIUIANB1RM2AhAgA0ELNgIMQQAhAgxmCyADLQAyQSBxRQ0iIAMtAC5BAnENIiADQQA2AhwgAyABNgIUIANB7BI2AhAgA0EPNgIMQQAhAgxlC0EAIQACQCADKAI4IgJFDQAgAigCQCICRQ0AIAMgAhEAACEACyAARQRAQcAAIQIMSwsgAEEVRwRAIANBADYCHCADIAE2AhQgA0H4DjYCECADQRw2AgxBACECDGULIANBygA2AhwgAyABNgIUIANB8Bo2AhAgA0EVNgIMQQAhAgxkCyABIARHBEADQCABLQAAQfA/ai0AAEEBRw0XIAQgAUEBaiIBRw0AC0HEACECDGQLQcQAIQIMYwsgASAERwRAA0ACQCABLQAAIgBBIHIgACAAQcEAa0H/AXFBGkkbQf8BcSIAQQlGDQAgAEEgRg0AAkACQAJAAkAgAEHjAGsOEwADAwMDAwMDAQMDAwMDAwMDAwIDCyABQQFqIQFBNSECDE4LIAFBAWohAUE2IQIMTQsgAUEBaiEBQTchAgxMCwwVCyAEIAFBAWoiAUcNAAtBPCECDGMLQTwhAgxiCyABIARGBEBByAAhAgxiCyADQRE2AgggAyABNgIEAkACQAJAAkACQCADLQAsQQFrDgQUAAECCQsgAy0AMkEgcQ0DQdEBIQIMSwsCQCADLwEyIgBBCHFFDQAgAy0AKEEBRw0AIAMtAC5BCHFFDQILIAMgAEH3+wNxQYAEcjsBMgwLCyADIAMvATJBEHI7ATIMBAsgA0EANgIEIAMgASABEDAiAARAIANBwQA2AhwgAyAANgIMIAMgAUEBajYCFEEAIQIMYwsgAUEBaiEBDFILIANBADYCHCADIAE2AhQgA0GjEzYCECADQQQ2AgxBACECDGELQccAIQIgASAERg1gIAMoAgAiACAEIAFraiEFIAEgAGtBBmohBgJAA0AgAEHwwwBqLQAAIAEtAABBIHJHDQEgAEEGRg1GIABBAWohACAEIAFBAWoiAUcNAAsgAyAFNgIADGELIANBADYCAAwFCwJAIAEgBEcEQANAIAEtAABB8MEAai0AACIAQQFHBEAgAEECRw0DIAFBAWohAQwFCyAEIAFBAWoiAUcNAAtBxQAhAgxhC0HFACECDGALCyADQQA6ACwMAQtBCyECDEMLQT4hAgxCCwJAAkADQCABLQAAIgBBIEcEQAJAIABBCmsOBAMFBQMACyAAQSxGDQMMBAsgBCABQQFqIgFHDQALQcYAIQIMXQsgA0EIOgAsDA4LIAMtAChBAUcNAiADLQAuQQhxDQIgAygCBCEAIANBADYCBCADIAAgARAwIgAEQCADQcIANgIcIAMgADYCDCADIAFBAWo2AhRBACECDFwLIAFBAWohAQxKC0E6IQIMQAsCQANAIAEtAAAiAEEgRyAAQQlHcQ0BIAQgAUEBaiIBRw0AC0HDACECDFoLC0E7IQIMPgsCQAJAIAEgBEcEQANAIAEtAAAiAEEgRwRAIABBCmsOBAMEBAMECyAEIAFBAWoiAUcNAAtBPyECDFoLQT8hAgxZCyADIAMvATJBIHI7ATIMCgsgAygCBCEAIANBADYCBCADIAAgARAwIgBFDUggA0E+NgIcIAMgATYCFCADIAA2AgxBACECDFcLAkAgASAERwRAA0AgAS0AAEHwwQBqLQAAIgBBAUcEQCAAQQJGDQMMDAsgBCABQQFqIgFHDQALQTchAgxYC0E3IQIMVwsgAUEBaiEBDAQLQTshAiAEIAEiAEYNVSAEIAFrIAMoAgAiAWohBiAAIAFrQQVqIQcCQANAIAFBwMYAai0AACAALQAAIgVBIHIgBSAFQcEAa0H/AXFBGkkbQf8BcUcNASABQQVGBEBBByEBDDsLIAFBAWohASAEIABBAWoiAEcNAAsgAyAGNgIADFYLIANBADYCACAAIQEMBQtBOiECIAQgASIARg1UIAQgAWsgAygCACIBaiEGIAAgAWtBCGohBwJAA0AgAUHkP2otAAAgAC0AACIFQSByIAUgBUHBAGtB/wFxQRpJG0H/AXFHDQEgAUEIRgRAQQUhAQw6CyABQQFqIQEgBCAAQQFqIgBHDQALIAMgBjYCAAxVCyADQQA2AgAgACEBDAQLQTkhAiAEIAEiAEYNUyAEIAFrIAMoAgAiAWohBiAAIAFrQQNqIQcCQANAIAFB4D9qLQAAIAAtAAAiBUEgciAFIAVBwQBrQf8BcUEaSRtB/wFxRw0BIAFBA0YEQEEGIQEMOQsgAUEBaiEBIAQgAEEBaiIARw0ACyADIAY2AgAMVAsgA0EANgIAIAAhAQwDCwJAA0AgAS0AACIAQSBHBEAgAEEKaw4EBwQEBwILIAQgAUEBaiIBRw0AC0E4IQIMUwsgAEEsRw0BIAFBAWohAEEBIQECQAJAAkACQAJAIAMtACxBBWsOBAMBAgQACyAAIQEMBAtBAiEBDAELQQQhAQsgA0EBOgAsIAMgAy8BMiABcjsBMiAAIQEMAQsgAyADLwEyQQhyOwEyIAAhAQtBPSECDDcLIANBADoALAtBOCECDDULIAEgBEYEQEE2IQIMTwsCQAJAAkACQAJAIAEtAABBCmsOBAACAgECCyADKAIEIQAgA0EANgIEIAMgACABEDAiAEUNAiADQTM2AhwgAyABNgIUIAMgADYCDEEAIQIMUgsgAygCBCEAIANBADYCBCADIAAgARAwIgBFBEAgAUEBaiEBDAYLIANBMjYCHCADIAA2AgwgAyABQQFqNgIUQQAhAgxRCyADLQAuQQFxBEBB0AEhAgw3CyADKAIEIQAgA0EANgIEIAMgACABEDAiAA0BDEMLQTMhAgw1CyADQTU2AhwgAyABNgIUIAMgADYCDEEAIQIMTgtBNCECDDMLIANBL2otAABBAXENACADQQA2AhwgAyABNgIUIANB8RU2AhAgA0EZNgIMQQAhAgxMC0EyIQIMMQsgASAERgRAQTIhAgxLCwJAIAEtAABBCkYEQCABQQFqIQEMAQsgA0EANgIcIAMgATYCFCADQZgWNgIQIANBAzYCDEEAIQIMSwtBMSECDDALIAEgBEYEQEExIQIMSgsgAS0AACIAQQlHIABBIEdxDQEgAy0ALEEIRw0AIANBADoALAtBPCECDC4LQQEhAgJAAkACQAJAIAMtACxBBWsOBAMBAgAKCyADIAMvATJBCHI7ATIMCQtBAiECDAELQQQhAgsgA0EBOgAsIAMgAy8BMiACcjsBMgwGCyABIARGBEBBMCECDEcLIAEtAABBCkYEQCABQQFqIQEMAQsgAy0ALkEBcQ0AIANBADYCHCADIAE2AhQgA0HHJzYCECADQQI2AgxBACECDEYLQS8hAgwrCyABQQFqIQFBMCECDCoLIAEgBEYEQEEvIQIMRAsgAS0AACIAQQlHIABBIEdxRQRAIAFBAWohASADLQAuQQFxDQEgA0EANgIcIAMgATYCFCADQekPNgIQIANBCjYCDEEAIQIMRAtBASECAkACQAJAAkACQAJAIAMtACxBAmsOBwUEBAMBAgAECyADIAMvATJBCHI7ATIMAwtBAiECDAELQQQhAgsgA0EBOgAsIAMgAy8BMiACcjsBMgtBLiECDCoLIANBADYCHCADIAE2AhQgA0GzEjYCECADQQs2AgxBACECDEMLQdIBIQIMKAsgASAERgRAQS4hAgxCCyADQQA2AgQgA0ERNgIIIAMgASABEDAiAA0BC0EtIQIMJgsgA0EtNgIcIAMgATYCFCADIAA2AgxBACECDD8LQQAhAAJAIAMoAjgiAkUNACACKAJEIgJFDQAgAyACEQAAIQALIABFDQAgAEEVRw0BIANB2AA2AhwgAyABNgIUIANBnho2AhAgA0EVNgIMQQAhAgw+C0HLACECDCMLIANBADYCHCADIAE2AhQgA0GFDjYCECADQR02AgxBACECDDwLIAEgBEYEQEHOACECDDwLIAEtAAAiAEEgRg0CIABBOkYNAQsgA0EAOgAsQQkhAgwgCyADKAIEIQAgA0EANgIEIAMgACABEC8iAA0BDAILIAMtAC5BAXEEQEHPASECDB8LIAMoAgQhACADQQA2AgQgAyAAIAEQLyIARQ0CIANBKjYCHCADIAA2AgwgAyABQQFqNgIUQQAhAgw4CyADQcsANgIcIAMgADYCDCADIAFBAWo2AhRBACECDDcLIAFBAWohAUE/IQIMHAsgAUEBaiEBDCkLIAEgBEYEQEErIQIMNQsCQCABLQAAQQpGBEAgAUEBaiEBDAELIAMtAC5BwABxRQ0GCyADLQAyQYABcQRAQQAhAAJAIAMoAjgiAkUNACACKAJUIgJFDQAgAyACEQAAIQALIABFDREgAEEVRgRAIANBBTYCHCADIAE2AhQgA0GGGjYCECADQRU2AgxBACECDDYLIANBADYCHCADIAE2AhQgA0HiDTYCECADQRQ2AgxBACECDDULIANBMmohAiADEDRBACEAAkAgAygCOCIGRQ0AIAYoAiQiBkUNACADIAYRAAAhAAsgAA4WAgEABAQEBAQEBAQEBAQEBAQEBAQEAwQLIANBAToAMAsgAiACLwEAQcAAcjsBAAtBKiECDBcLIANBKTYCHCADIAE2AhQgA0GyGDYCECADQRU2AgxBACECDDALIANBADYCHCADIAE2AhQgA0HdCzYCECADQRE2AgxBACECDC8LIANBADYCHCADIAE2AhQgA0GdCzYCECADQQI2AgxBACECDC4LQQEhByADLwEyIgVBCHFFBEAgAykDIEIAUiEHCwJAIAMtADAEQEEBIQAgAy0AKUEFRg0BIAVBwABxRSAHcUUNAQsCQCADLQAoIgJBAkYEQEEBIQAgAy8BNCIGQeUARg0CQQAhACAFQcAAcQ0CIAZB5ABGDQIgBkHmAGtBAkkNAiAGQcwBRg0CIAZBsAJGDQIMAQtBACEAIAVBwABxDQELQQIhACAFQQhxDQAgBUGABHEEQAJAIAJBAUcNACADLQAuQQpxDQBBBSEADAILQQQhAAwBCyAFQSBxRQRAIAMQNUEAR0ECdCEADAELQQBBAyADKQMgUBshAAsCQCAAQQFrDgUAAQYHAgMLQQAhAgJAIAMoAjgiAEUNACAAKAIsIgBFDQAgAyAAEQAAIQILIAJFDSYgAkEVRgRAIANBAzYCHCADIAE2AhQgA0G9GjYCECADQRU2AgxBACECDC4LQQAhAiADQQA2AhwgAyABNgIUIANBrw42AhAgA0ESNgIMDC0LQc4BIQIMEgtBACECIANBADYCHCADIAE2AhQgA0HkHzYCECADQQ82AgwMKwtBACEAAkAgAygCOCICRQ0AIAIoAiwiAkUNACADIAIRAAAhAAsgAA0BC0EOIQIMDwsgAEEVRgRAIANBAjYCHCADIAE2AhQgA0G9GjYCECADQRU2AgxBACECDCkLQQAhAiADQQA2AhwgAyABNgIUIANBrw42AhAgA0ESNgIMDCgLQSkhAgwNCyADQQE6ADEMJAsgASAERwRAIANBCTYCCCADIAE2AgRBKCECDAwLQSYhAgwlCyADIAMpAyAiDCAEIAFrrSIKfSILQgAgCyAMWBs3AyAgCiAMVARAQSUhAgwlCyADKAIEIQBBACECIANBADYCBCADIAAgASAMp2oiARAxIgBFDQAgA0EFNgIcIAMgATYCFCADIAA2AgwMJAtBDyECDAkLIAEgBEYEQEEjIQIMIwtCACEKAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAEtAABBMGsONxcWAAECAwQFBgcUFBQUFBQUCAkKCwwNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQODxAREhMUC0ICIQoMFgtCAyEKDBULQgQhCgwUC0IFIQoMEwtCBiEKDBILQgchCgwRC0IIIQoMEAtCCSEKDA8LQgohCgwOC0ILIQoMDQtCDCEKDAwLQg0hCgwLC0IOIQoMCgtCDyEKDAkLQgohCgwIC0ILIQoMBwtCDCEKDAYLQg0hCgwFC0IOIQoMBAtCDyEKDAMLQQAhAiADQQA2AhwgAyABNgIUIANBzhQ2AhAgA0EMNgIMDCILIAEgBEYEQEEiIQIMIgtCACEKAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCABLQAAQTBrDjcVFAABAgMEBQYHFhYWFhYWFggJCgsMDRYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWDg8QERITFgtCAiEKDBQLQgMhCgwTC0IEIQoMEgtCBSEKDBELQgYhCgwQC0IHIQoMDwtCCCEKDA4LQgkhCgwNC0IKIQoMDAtCCyEKDAsLQgwhCgwKC0INIQoMCQtCDiEKDAgLQg8hCgwHC0IKIQoMBgtCCyEKDAULQgwhCgwEC0INIQoMAwtCDiEKDAILQg8hCgwBC0IBIQoLIAFBAWohASADKQMgIgtC//////////8PWARAIAMgC0IEhiAKhDcDIAwCC0EAIQIgA0EANgIcIAMgATYCFCADQa0JNgIQIANBDDYCDAwfC0ElIQIMBAtBJiECDAMLIAMgAToALCADQQA2AgAgB0EBaiEBQQwhAgwCCyADQQA2AgAgBkEBaiEBQQohAgwBCyABQQFqIQFBCCECDAALAAtBACECIANBADYCHCADIAE2AhQgA0HVEDYCECADQQk2AgwMGAtBACECIANBADYCHCADIAE2AhQgA0HXCjYCECADQQk2AgwMFwtBACECIANBADYCHCADIAE2AhQgA0G/EDYCECADQQk2AgwMFgtBACECIANBADYCHCADIAE2AhQgA0GkETYCECADQQk2AgwMFQtBACECIANBADYCHCADIAE2AhQgA0HVEDYCECADQQk2AgwMFAtBACECIANBADYCHCADIAE2AhQgA0HXCjYCECADQQk2AgwMEwtBACECIANBADYCHCADIAE2AhQgA0G/EDYCECADQQk2AgwMEgtBACECIANBADYCHCADIAE2AhQgA0GkETYCECADQQk2AgwMEQtBACECIANBADYCHCADIAE2AhQgA0G/FjYCECADQQ82AgwMEAtBACECIANBADYCHCADIAE2AhQgA0G/FjYCECADQQ82AgwMDwtBACECIANBADYCHCADIAE2AhQgA0HIEjYCECADQQs2AgwMDgtBACECIANBADYCHCADIAE2AhQgA0GVCTYCECADQQs2AgwMDQtBACECIANBADYCHCADIAE2AhQgA0HpDzYCECADQQo2AgwMDAtBACECIANBADYCHCADIAE2AhQgA0GDEDYCECADQQo2AgwMCwtBACECIANBADYCHCADIAE2AhQgA0GmHDYCECADQQI2AgwMCgtBACECIANBADYCHCADIAE2AhQgA0HFFTYCECADQQI2AgwMCQtBACECIANBADYCHCADIAE2AhQgA0H/FzYCECADQQI2AgwMCAtBACECIANBADYCHCADIAE2AhQgA0HKFzYCECADQQI2AgwMBwsgA0ECNgIcIAMgATYCFCADQZQdNgIQIANBFjYCDEEAIQIMBgtB3gAhAiABIARGDQUgCUEIaiEHIAMoAgAhBQJAAkAgASAERwRAIAVBxsYAaiEIIAQgBWogAWshBiAFQX9zQQpqIgUgAWohAANAIAEtAAAgCC0AAEcEQEECIQgMAwsgBUUEQEEAIQggACEBDAMLIAVBAWshBSAIQQFqIQggBCABQQFqIgFHDQALIAYhBSAEIQELIAdBATYCACADIAU2AgAMAQsgA0EANgIAIAcgCDYCAAsgByABNgIEIAkoAgwhACAJKAIIDgMBBQIACwALIANBADYCHCADQa0dNgIQIANBFzYCDCADIABBAWo2AhRBACECDAMLIANBADYCHCADIAA2AhQgA0HCHTYCECADQQk2AgxBACECDAILIAEgBEYEQEEoIQIMAgsgA0EJNgIIIAMgATYCBEEnIQIMAQsgASAERgRAQQEhAgwBCwNAAkACQAJAIAEtAABBCmsOBAABAQABCyABQQFqIQEMAQsgAUEBaiEBIAMtAC5BIHENAEEAIQIgA0EANgIcIAMgATYCFCADQYwgNgIQIANBBTYCDAwCC0EBIQIgASAERw0ACwsgCUEQaiQAIAJFBEAgAygCDCEADAELIAMgAjYCHEEAIQAgAygCBCIBRQ0AIAMgASAEIAMoAggRAQAiAUUNACADIAQ2AhQgAyABNgIMIAEhAAsgAAu+AgECfyAAQQA6AAAgAEHcAGoiAUEBa0EAOgAAIABBADoAAiAAQQA6AAEgAUEDa0EAOgAAIAFBAmtBADoAACAAQQA6AAMgAUEEa0EAOgAAQQAgAGtBA3EiASAAaiIAQQA2AgBB3AAgAWtBfHEiAiAAaiIBQQRrQQA2AgACQCACQQlJDQAgAEEANgIIIABBADYCBCABQQhrQQA2AgAgAUEMa0EANgIAIAJBGUkNACAAQQA2AhggAEEANgIUIABBADYCECAAQQA2AgwgAUEQa0EANgIAIAFBFGtBADYCACABQRhrQQA2AgAgAUEca0EANgIAIAIgAEEEcUEYciICayIBQSBJDQAgACACaiEAA0AgAEIANwMYIABCADcDECAAQgA3AwggAEIANwMAIABBIGohACABQSBrIgFBH0sNAAsLC1YBAX8CQCAAKAIMDQACQAJAAkACQCAALQAxDgMBAAMCCyAAKAI4IgFFDQAgASgCLCIBRQ0AIAAgAREAACIBDQMLQQAPCwALIABB0Bg2AhBBDiEBCyABCxoAIAAoAgxFBEAgAEHJHjYCECAAQRU2AgwLCxQAIAAoAgxBFUYEQCAAQQA2AgwLCxQAIAAoAgxBFkYEQCAAQQA2AgwLCwcAIAAoAgwLBwAgACgCEAsJACAAIAE2AhALBwAgACgCFAsXACAAQSRPBEAACyAAQQJ0QZQ3aigCAAsXACAAQS9PBEAACyAAQQJ0QaQ4aigCAAu/CQEBf0HfLCEBAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgAEHkAGsO9ANjYgABYWFhYWFhAgMEBWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWEGBwgJCgsMDQ4PYWFhYWEQYWFhYWFhYWFhYWERYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhEhMUFRYXGBkaG2FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWEcHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTZhNzg5OmFhYWFhYWFhO2FhYTxhYWFhPT4/YWFhYWFhYWFAYWFBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhQkNERUZHSElKS0xNTk9QUVJTYWFhYWFhYWFUVVZXWFlaW2FcXWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYV5hYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFfYGELQdUrDwtBgyUPC0G/MA8LQfI1DwtBtCgPC0GfKA8LQYEsDwtB1ioPC0H0Mw8LQa0zDwtByygPC0HOIw8LQcAjDwtB2SMPC0HRJA8LQZwzDwtBojYPC0H8Mw8LQeArDwtB4SUPC0HtIA8LQcQyDwtBqScPC0G5Ng8LQbggDwtBqyAPC0GjJA8LQbYkDwtBgSMPC0HhMg8LQZ80DwtByCkPC0HAMg8LQe4yDwtB8C8PC0HGNA8LQdAhDwtBmiQPC0HrLw8LQYQ1DwtByzUPC0GWMQ8LQcgrDwtB1C8PC0GTMA8LQd81DwtBtCMPC0G+NQ8LQdIpDwtBsyIPC0HNIA8LQZs2DwtBkCEPC0H/IA8LQa01DwtBsDQPC0HxJA8LQacqDwtB3TAPC0GLIg8LQcgvDwtB6yoPC0H0KQ8LQY8lDwtB3SIPC0HsJg8LQf0wDwtB1iYPC0GUNQ8LQY0jDwtBuikPC0HHIg8LQfIlDwtBtjMPC0GiIQ8LQf8vDwtBwCEPC0GBMw8LQcklDwtBqDEPC0HGMw8LQdM2DwtBxjYPC0HkNA8LQYgmDwtB7ScPC0H4IQ8LQakwDwtBjzQPC0GGNg8LQaovDwtBoSYPC0HsNg8LQZIpDwtBryYPC0GZIg8LQeAhDwsAC0G1JSEBCyABCxcAIAAgAC8BLkH+/wNxIAFBAEdyOwEuCxoAIAAgAC8BLkH9/wNxIAFBAEdBAXRyOwEuCxoAIAAgAC8BLkH7/wNxIAFBAEdBAnRyOwEuCxoAIAAgAC8BLkH3/wNxIAFBAEdBA3RyOwEuCxoAIAAgAC8BLkHv/wNxIAFBAEdBBHRyOwEuCxoAIAAgAC8BLkHf/wNxIAFBAEdBBXRyOwEuCxoAIAAgAC8BLkG//wNxIAFBAEdBBnRyOwEuCxoAIAAgAC8BLkH//gNxIAFBAEdBB3RyOwEuCxoAIAAgAC8BLkH//QNxIAFBAEdBCHRyOwEuCxoAIAAgAC8BLkH/+wNxIAFBAEdBCXRyOwEuCz4BAn8CQCAAKAI4IgNFDQAgAygCBCIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABBzhE2AhBBGCEECyAECz4BAn8CQCAAKAI4IgNFDQAgAygCCCIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABB5Ao2AhBBGCEECyAECz4BAn8CQCAAKAI4IgNFDQAgAygCDCIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABB5R02AhBBGCEECyAECz4BAn8CQCAAKAI4IgNFDQAgAygCECIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABBnRA2AhBBGCEECyAECz4BAn8CQCAAKAI4IgNFDQAgAygCFCIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABBoh42AhBBGCEECyAECz4BAn8CQCAAKAI4IgNFDQAgAygCGCIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABB7hQ2AhBBGCEECyAECz4BAn8CQCAAKAI4IgNFDQAgAygCKCIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABB9gg2AhBBGCEECyAECz4BAn8CQCAAKAI4IgNFDQAgAygCHCIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABB9xs2AhBBGCEECyAECz4BAn8CQCAAKAI4IgNFDQAgAygCICIDRQ0AIAAgASACIAFrIAMRAQAiBEF/Rw0AIABBlRU2AhBBGCEECyAECzgAIAACfyAALwEyQRRxQRRGBEBBASAALQAoQQFGDQEaIAAvATRB5QBGDAELIAAtAClBBUYLOgAwC1kBAn8CQCAALQAoQQFGDQAgAC8BNCIBQeQAa0HkAEkNACABQcwBRg0AIAFBsAJGDQAgAC8BMiIAQcAAcQ0AQQEhAiAAQYgEcUGABEYNACAAQShxRSECCyACC4wBAQJ/AkACQAJAIAAtACpFDQAgAC0AK0UNACAALwEyIgFBAnFFDQEMAgsgAC8BMiIBQQFxRQ0BC0EBIQIgAC0AKEEBRg0AIAAvATQiAEHkAGtB5ABJDQAgAEHMAUYNACAAQbACRg0AIAFBwABxDQBBACECIAFBiARxQYAERg0AIAFBKHFBAEchAgsgAgtXACAAQRhqQgA3AwAgAEIANwMAIABBOGpCADcDACAAQTBqQgA3AwAgAEEoakIANwMAIABBIGpCADcDACAAQRBqQgA3AwAgAEEIakIANwMAIABB7AE2AhwLBgAgABA5C5otAQt/IwBBEGsiCiQAQZjUACgCACIJRQRAQdjXACgCACIFRQRAQeTXAEJ/NwIAQdzXAEKAgISAgIDAADcCAEHY1wAgCkEIakFwcUHYqtWqBXMiBTYCAEHs1wBBADYCAEG81wBBADYCAAtBwNcAQYDYBDYCAEGQ1ABBgNgENgIAQaTUACAFNgIAQaDUAEF/NgIAQcTXAEGAqAM2AgADQCABQbzUAGogAUGw1ABqIgI2AgAgAiABQajUAGoiAzYCACABQbTUAGogAzYCACABQcTUAGogAUG41ABqIgM2AgAgAyACNgIAIAFBzNQAaiABQcDUAGoiAjYCACACIAM2AgAgAUHI1ABqIAI2AgAgAUEgaiIBQYACRw0AC0GM2ARBwacDNgIAQZzUAEHo1wAoAgA2AgBBjNQAQcCnAzYCAEGY1ABBiNgENgIAQcz/B0E4NgIAQYjYBCEJCwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIABB7AFNBEBBgNQAKAIAIgZBECAAQRNqQXBxIABBC0kbIgRBA3YiAHYiAUEDcQRAAkAgAUEBcSAAckEBcyICQQN0IgBBqNQAaiIBIABBsNQAaigCACIAKAIIIgNGBEBBgNQAIAZBfiACd3E2AgAMAQsgASADNgIIIAMgATYCDAsgAEEIaiEBIAAgAkEDdCICQQNyNgIEIAAgAmoiACAAKAIEQQFyNgIEDBELQYjUACgCACIIIARPDQEgAQRAAkBBAiAAdCICQQAgAmtyIAEgAHRxaCIAQQN0IgJBqNQAaiIBIAJBsNQAaigCACICKAIIIgNGBEBBgNQAIAZBfiAAd3EiBjYCAAwBCyABIAM2AgggAyABNgIMCyACIARBA3I2AgQgAEEDdCIAIARrIQUgACACaiAFNgIAIAIgBGoiBCAFQQFyNgIEIAgEQCAIQXhxQajUAGohAEGU1AAoAgAhAwJ/QQEgCEEDdnQiASAGcUUEQEGA1AAgASAGcjYCACAADAELIAAoAggLIgEgAzYCDCAAIAM2AgggAyAANgIMIAMgATYCCAsgAkEIaiEBQZTUACAENgIAQYjUACAFNgIADBELQYTUACgCACILRQ0BIAtoQQJ0QbDWAGooAgAiACgCBEF4cSAEayEFIAAhAgNAAkAgAigCECIBRQRAIAJBFGooAgAiAUUNAQsgASgCBEF4cSAEayIDIAVJIQIgAyAFIAIbIQUgASAAIAIbIQAgASECDAELCyAAKAIYIQkgACgCDCIDIABHBEBBkNQAKAIAGiADIAAoAggiATYCCCABIAM2AgwMEAsgAEEUaiICKAIAIgFFBEAgACgCECIBRQ0DIABBEGohAgsDQCACIQcgASIDQRRqIgIoAgAiAQ0AIANBEGohAiADKAIQIgENAAsgB0EANgIADA8LQX8hBCAAQb9/Sw0AIABBE2oiAUFwcSEEQYTUACgCACIIRQ0AQQAgBGshBQJAAkACQAJ/QQAgBEGAAkkNABpBHyAEQf///wdLDQAaIARBJiABQQh2ZyIAa3ZBAXEgAEEBdGtBPmoLIgZBAnRBsNYAaigCACICRQRAQQAhAUEAIQMMAQtBACEBIARBGSAGQQF2a0EAIAZBH0cbdCEAQQAhAwNAAkAgAigCBEF4cSAEayIHIAVPDQAgAiEDIAciBQ0AQQAhBSACIQEMAwsgASACQRRqKAIAIgcgByACIABBHXZBBHFqQRBqKAIAIgJGGyABIAcbIQEgAEEBdCEAIAINAAsLIAEgA3JFBEBBACEDQQIgBnQiAEEAIABrciAIcSIARQ0DIABoQQJ0QbDWAGooAgAhAQsgAUUNAQsDQCABKAIEQXhxIARrIgIgBUkhACACIAUgABshBSABIAMgABshAyABKAIQIgAEfyAABSABQRRqKAIACyIBDQALCyADRQ0AIAVBiNQAKAIAIARrTw0AIAMoAhghByADIAMoAgwiAEcEQEGQ1AAoAgAaIAAgAygCCCIBNgIIIAEgADYCDAwOCyADQRRqIgIoAgAiAUUEQCADKAIQIgFFDQMgA0EQaiECCwNAIAIhBiABIgBBFGoiAigCACIBDQAgAEEQaiECIAAoAhAiAQ0ACyAGQQA2AgAMDQtBiNQAKAIAIgMgBE8EQEGU1AAoAgAhAQJAIAMgBGsiAkEQTwRAIAEgBGoiACACQQFyNgIEIAEgA2ogAjYCACABIARBA3I2AgQMAQsgASADQQNyNgIEIAEgA2oiACAAKAIEQQFyNgIEQQAhAEEAIQILQYjUACACNgIAQZTUACAANgIAIAFBCGohAQwPC0GM1AAoAgAiAyAESwRAIAQgCWoiACADIARrIgFBAXI2AgRBmNQAIAA2AgBBjNQAIAE2AgAgCSAEQQNyNgIEIAlBCGohAQwPC0EAIQEgBAJ/QdjXACgCAARAQeDXACgCAAwBC0Hk1wBCfzcCAEHc1wBCgICEgICAwAA3AgBB2NcAIApBDGpBcHFB2KrVqgVzNgIAQezXAEEANgIAQbzXAEEANgIAQYCABAsiACAEQccAaiIFaiIGQQAgAGsiB3EiAk8EQEHw1wBBMDYCAAwPCwJAQbjXACgCACIBRQ0AQbDXACgCACIIIAJqIQAgACABTSAAIAhLcQ0AQQAhAUHw1wBBMDYCAAwPC0G81wAtAABBBHENBAJAAkAgCQRAQcDXACEBA0AgASgCACIAIAlNBEAgACABKAIEaiAJSw0DCyABKAIIIgENAAsLQQAQOiIAQX9GDQUgAiEGQdzXACgCACIBQQFrIgMgAHEEQCACIABrIAAgA2pBACABa3FqIQYLIAQgBk8NBSAGQf7///8HSw0FQbjXACgCACIDBEBBsNcAKAIAIgcgBmohASABIAdNDQYgASADSw0GCyAGEDoiASAARw0BDAcLIAYgA2sgB3EiBkH+////B0sNBCAGEDohACAAIAEoAgAgASgCBGpGDQMgACEBCwJAIAYgBEHIAGpPDQAgAUF/Rg0AQeDXACgCACIAIAUgBmtqQQAgAGtxIgBB/v///wdLBEAgASEADAcLIAAQOkF/RwRAIAAgBmohBiABIQAMBwtBACAGaxA6GgwECyABIgBBf0cNBQwDC0EAIQMMDAtBACEADAoLIABBf0cNAgtBvNcAQbzXACgCAEEEcjYCAAsgAkH+////B0sNASACEDohAEEAEDohASAAQX9GDQEgAUF/Rg0BIAAgAU8NASABIABrIgYgBEE4ak0NAQtBsNcAQbDXACgCACAGaiIBNgIAQbTXACgCACABSQRAQbTXACABNgIACwJAAkACQEGY1AAoAgAiAgRAQcDXACEBA0AgACABKAIAIgMgASgCBCIFakYNAiABKAIIIgENAAsMAgtBkNQAKAIAIgFBAEcgACABT3FFBEBBkNQAIAA2AgALQQAhAUHE1wAgBjYCAEHA1wAgADYCAEGg1ABBfzYCAEGk1ABB2NcAKAIANgIAQczXAEEANgIAA0AgAUG81ABqIAFBsNQAaiICNgIAIAIgAUGo1ABqIgM2AgAgAUG01ABqIAM2AgAgAUHE1ABqIAFBuNQAaiIDNgIAIAMgAjYCACABQczUAGogAUHA1ABqIgI2AgAgAiADNgIAIAFByNQAaiACNgIAIAFBIGoiAUGAAkcNAAtBeCAAa0EPcSIBIABqIgIgBkE4ayIDIAFrIgFBAXI2AgRBnNQAQejXACgCADYCAEGM1AAgATYCAEGY1AAgAjYCACAAIANqQTg2AgQMAgsgACACTQ0AIAIgA0kNACABKAIMQQhxDQBBeCACa0EPcSIAIAJqIgNBjNQAKAIAIAZqIgcgAGsiAEEBcjYCBCABIAUgBmo2AgRBnNQAQejXACgCADYCAEGM1AAgADYCAEGY1AAgAzYCACACIAdqQTg2AgQMAQsgAEGQ1AAoAgBJBEBBkNQAIAA2AgALIAAgBmohA0HA1wAhAQJAAkACQANAIAMgASgCAEcEQCABKAIIIgENAQwCCwsgAS0ADEEIcUUNAQtBwNcAIQEDQCABKAIAIgMgAk0EQCADIAEoAgRqIgUgAksNAwsgASgCCCEBDAALAAsgASAANgIAIAEgASgCBCAGajYCBCAAQXggAGtBD3FqIgkgBEEDcjYCBCADQXggA2tBD3FqIgYgBCAJaiIEayEBIAIgBkYEQEGY1AAgBDYCAEGM1ABBjNQAKAIAIAFqIgA2AgAgBCAAQQFyNgIEDAgLQZTUACgCACAGRgRAQZTUACAENgIAQYjUAEGI1AAoAgAgAWoiADYCACAEIABBAXI2AgQgACAEaiAANgIADAgLIAYoAgQiBUEDcUEBRw0GIAVBeHEhCCAFQf8BTQRAIAVBA3YhAyAGKAIIIgAgBigCDCICRgRAQYDUAEGA1AAoAgBBfiADd3E2AgAMBwsgAiAANgIIIAAgAjYCDAwGCyAGKAIYIQcgBiAGKAIMIgBHBEAgACAGKAIIIgI2AgggAiAANgIMDAULIAZBFGoiAigCACIFRQRAIAYoAhAiBUUNBCAGQRBqIQILA0AgAiEDIAUiAEEUaiICKAIAIgUNACAAQRBqIQIgACgCECIFDQALIANBADYCAAwEC0F4IABrQQ9xIgEgAGoiByAGQThrIgMgAWsiAUEBcjYCBCAAIANqQTg2AgQgAiAFQTcgBWtBD3FqQT9rIgMgAyACQRBqSRsiA0EjNgIEQZzUAEHo1wAoAgA2AgBBjNQAIAE2AgBBmNQAIAc2AgAgA0EQakHI1wApAgA3AgAgA0HA1wApAgA3AghByNcAIANBCGo2AgBBxNcAIAY2AgBBwNcAIAA2AgBBzNcAQQA2AgAgA0EkaiEBA0AgAUEHNgIAIAUgAUEEaiIBSw0ACyACIANGDQAgAyADKAIEQX5xNgIEIAMgAyACayIFNgIAIAIgBUEBcjYCBCAFQf8BTQRAIAVBeHFBqNQAaiEAAn9BgNQAKAIAIgFBASAFQQN2dCIDcUUEQEGA1AAgASADcjYCACAADAELIAAoAggLIgEgAjYCDCAAIAI2AgggAiAANgIMIAIgATYCCAwBC0EfIQEgBUH///8HTQRAIAVBJiAFQQh2ZyIAa3ZBAXEgAEEBdGtBPmohAQsgAiABNgIcIAJCADcCECABQQJ0QbDWAGohAEGE1AAoAgAiA0EBIAF0IgZxRQRAIAAgAjYCAEGE1AAgAyAGcjYCACACIAA2AhggAiACNgIIIAIgAjYCDAwBCyAFQRkgAUEBdmtBACABQR9HG3QhASAAKAIAIQMCQANAIAMiACgCBEF4cSAFRg0BIAFBHXYhAyABQQF0IQEgACADQQRxakEQaiIGKAIAIgMNAAsgBiACNgIAIAIgADYCGCACIAI2AgwgAiACNgIIDAELIAAoAggiASACNgIMIAAgAjYCCCACQQA2AhggAiAANgIMIAIgATYCCAtBjNQAKAIAIgEgBE0NAEGY1AAoAgAiACAEaiICIAEgBGsiAUEBcjYCBEGM1AAgATYCAEGY1AAgAjYCACAAIARBA3I2AgQgAEEIaiEBDAgLQQAhAUHw1wBBMDYCAAwHC0EAIQALIAdFDQACQCAGKAIcIgJBAnRBsNYAaiIDKAIAIAZGBEAgAyAANgIAIAANAUGE1ABBhNQAKAIAQX4gAndxNgIADAILIAdBEEEUIAcoAhAgBkYbaiAANgIAIABFDQELIAAgBzYCGCAGKAIQIgIEQCAAIAI2AhAgAiAANgIYCyAGQRRqKAIAIgJFDQAgAEEUaiACNgIAIAIgADYCGAsgASAIaiEBIAYgCGoiBigCBCEFCyAGIAVBfnE2AgQgASAEaiABNgIAIAQgAUEBcjYCBCABQf8BTQRAIAFBeHFBqNQAaiEAAn9BgNQAKAIAIgJBASABQQN2dCIBcUUEQEGA1AAgASACcjYCACAADAELIAAoAggLIgEgBDYCDCAAIAQ2AgggBCAANgIMIAQgATYCCAwBC0EfIQUgAUH///8HTQRAIAFBJiABQQh2ZyIAa3ZBAXEgAEEBdGtBPmohBQsgBCAFNgIcIARCADcCECAFQQJ0QbDWAGohAEGE1AAoAgAiAkEBIAV0IgNxRQRAIAAgBDYCAEGE1AAgAiADcjYCACAEIAA2AhggBCAENgIIIAQgBDYCDAwBCyABQRkgBUEBdmtBACAFQR9HG3QhBSAAKAIAIQACQANAIAAiAigCBEF4cSABRg0BIAVBHXYhACAFQQF0IQUgAiAAQQRxakEQaiIDKAIAIgANAAsgAyAENgIAIAQgAjYCGCAEIAQ2AgwgBCAENgIIDAELIAIoAggiACAENgIMIAIgBDYCCCAEQQA2AhggBCACNgIMIAQgADYCCAsgCUEIaiEBDAILAkAgB0UNAAJAIAMoAhwiAUECdEGw1gBqIgIoAgAgA0YEQCACIAA2AgAgAA0BQYTUACAIQX4gAXdxIgg2AgAMAgsgB0EQQRQgBygCECADRhtqIAA2AgAgAEUNAQsgACAHNgIYIAMoAhAiAQRAIAAgATYCECABIAA2AhgLIANBFGooAgAiAUUNACAAQRRqIAE2AgAgASAANgIYCwJAIAVBD00EQCADIAQgBWoiAEEDcjYCBCAAIANqIgAgACgCBEEBcjYCBAwBCyADIARqIgIgBUEBcjYCBCADIARBA3I2AgQgAiAFaiAFNgIAIAVB/wFNBEAgBUF4cUGo1ABqIQACf0GA1AAoAgAiAUEBIAVBA3Z0IgVxRQRAQYDUACABIAVyNgIAIAAMAQsgACgCCAsiASACNgIMIAAgAjYCCCACIAA2AgwgAiABNgIIDAELQR8hASAFQf///wdNBEAgBUEmIAVBCHZnIgBrdkEBcSAAQQF0a0E+aiEBCyACIAE2AhwgAkIANwIQIAFBAnRBsNYAaiEAQQEgAXQiBCAIcUUEQCAAIAI2AgBBhNQAIAQgCHI2AgAgAiAANgIYIAIgAjYCCCACIAI2AgwMAQsgBUEZIAFBAXZrQQAgAUEfRxt0IQEgACgCACEEAkADQCAEIgAoAgRBeHEgBUYNASABQR12IQQgAUEBdCEBIAAgBEEEcWpBEGoiBigCACIEDQALIAYgAjYCACACIAA2AhggAiACNgIMIAIgAjYCCAwBCyAAKAIIIgEgAjYCDCAAIAI2AgggAkEANgIYIAIgADYCDCACIAE2AggLIANBCGohAQwBCwJAIAlFDQACQCAAKAIcIgFBAnRBsNYAaiICKAIAIABGBEAgAiADNgIAIAMNAUGE1AAgC0F+IAF3cTYCAAwCCyAJQRBBFCAJKAIQIABGG2ogAzYCACADRQ0BCyADIAk2AhggACgCECIBBEAgAyABNgIQIAEgAzYCGAsgAEEUaigCACIBRQ0AIANBFGogATYCACABIAM2AhgLAkAgBUEPTQRAIAAgBCAFaiIBQQNyNgIEIAAgAWoiASABKAIEQQFyNgIEDAELIAAgBGoiByAFQQFyNgIEIAAgBEEDcjYCBCAFIAdqIAU2AgAgCARAIAhBeHFBqNQAaiEBQZTUACgCACEDAn9BASAIQQN2dCICIAZxRQRAQYDUACACIAZyNgIAIAEMAQsgASgCCAsiAiADNgIMIAEgAzYCCCADIAE2AgwgAyACNgIIC0GU1AAgBzYCAEGI1AAgBTYCAAsgAEEIaiEBCyAKQRBqJAAgAQtDACAARQRAPwBBEHQPCwJAIABB//8DcQ0AIABBAEgNACAAQRB2QAAiAEF/RgRAQfDXAEEwNgIAQX8PCyAAQRB0DwsACwvbQCIAQYAICwkBAAAAAgAAAAMAQZQICwUEAAAABQBBpAgLCQYAAAAHAAAACABB3AgLgjFJbnZhbGlkIGNoYXIgaW4gdXJsIHF1ZXJ5AFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fYm9keQBDb250ZW50LUxlbmd0aCBvdmVyZmxvdwBDaHVuayBzaXplIG92ZXJmbG93AEludmFsaWQgbWV0aG9kIGZvciBIVFRQL3gueCByZXF1ZXN0AEludmFsaWQgbWV0aG9kIGZvciBSVFNQL3gueCByZXF1ZXN0AEV4cGVjdGVkIFNPVVJDRSBtZXRob2QgZm9yIElDRS94LnggcmVxdWVzdABJbnZhbGlkIGNoYXIgaW4gdXJsIGZyYWdtZW50IHN0YXJ0AEV4cGVjdGVkIGRvdABTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX3N0YXR1cwBJbnZhbGlkIHJlc3BvbnNlIHN0YXR1cwBFeHBlY3RlZCBMRiBhZnRlciBoZWFkZXJzAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIGV4dGVuc2lvbnMAVXNlciBjYWxsYmFjayBlcnJvcgBgb25fcmVzZXRgIGNhbGxiYWNrIGVycm9yAGBvbl9jaHVua19oZWFkZXJgIGNhbGxiYWNrIGVycm9yAGBvbl9tZXNzYWdlX2JlZ2luYCBjYWxsYmFjayBlcnJvcgBgb25fY2h1bmtfZXh0ZW5zaW9uX3ZhbHVlYCBjYWxsYmFjayBlcnJvcgBgb25fc3RhdHVzX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fdmVyc2lvbl9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX3VybF9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX2NodW5rX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25faGVhZGVyX3ZhbHVlX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fbWVzc2FnZV9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX21ldGhvZF9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX2hlYWRlcl9maWVsZF9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX2NodW5rX2V4dGVuc2lvbl9uYW1lYCBjYWxsYmFjayBlcnJvcgBVbmV4cGVjdGVkIGNoYXIgaW4gdXJsIHNlcnZlcgBJbnZhbGlkIGhlYWRlciB2YWx1ZSBjaGFyAEludmFsaWQgaGVhZGVyIGZpZWxkIGNoYXIAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl92ZXJzaW9uAEludmFsaWQgbWlub3IgdmVyc2lvbgBJbnZhbGlkIG1ham9yIHZlcnNpb24ARXhwZWN0ZWQgc3BhY2UgYWZ0ZXIgdmVyc2lvbgBFeHBlY3RlZCBDUkxGIGFmdGVyIHZlcnNpb24ASW52YWxpZCBIVFRQIHZlcnNpb24ASW52YWxpZCBoZWFkZXIgdG9rZW4AU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl91cmwASW52YWxpZCBjaGFyYWN0ZXJzIGluIHVybABVbmV4cGVjdGVkIHN0YXJ0IGNoYXIgaW4gdXJsAERvdWJsZSBAIGluIHVybABFbXB0eSBDb250ZW50LUxlbmd0aABJbnZhbGlkIGNoYXJhY3RlciBpbiBDb250ZW50LUxlbmd0aABUcmFuc2Zlci1FbmNvZGluZyBjYW4ndCBiZSBwcmVzZW50IHdpdGggQ29udGVudC1MZW5ndGgARHVwbGljYXRlIENvbnRlbnQtTGVuZ3RoAEludmFsaWQgY2hhciBpbiB1cmwgcGF0aABDb250ZW50LUxlbmd0aCBjYW4ndCBiZSBwcmVzZW50IHdpdGggVHJhbnNmZXItRW5jb2RpbmcATWlzc2luZyBleHBlY3RlZCBDUiBhZnRlciBjaHVuayBzaXplAEV4cGVjdGVkIExGIGFmdGVyIGNodW5rIHNpemUASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgc2l6ZQBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX2hlYWRlcl92YWx1ZQBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX2NodW5rX2V4dGVuc2lvbl92YWx1ZQBJbnZhbGlkIGNoYXJhY3RlciBpbiBjaHVuayBleHRlbnNpb25zIHZhbHVlAE1pc3NpbmcgZXhwZWN0ZWQgQ1IgYWZ0ZXIgaGVhZGVyIHZhbHVlAE1pc3NpbmcgZXhwZWN0ZWQgTEYgYWZ0ZXIgaGVhZGVyIHZhbHVlAEludmFsaWQgYFRyYW5zZmVyLUVuY29kaW5nYCBoZWFkZXIgdmFsdWUATWlzc2luZyBleHBlY3RlZCBDUiBhZnRlciBjaHVuayBleHRlbnNpb24gdmFsdWUASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgZXh0ZW5zaW9ucyBxdW90ZSB2YWx1ZQBJbnZhbGlkIHF1b3RlZC1wYWlyIGluIGNodW5rIGV4dGVuc2lvbnMgcXVvdGVkIHZhbHVlAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIGV4dGVuc2lvbnMgcXVvdGVkIHZhbHVlAFBhdXNlZCBieSBvbl9oZWFkZXJzX2NvbXBsZXRlAEludmFsaWQgRU9GIHN0YXRlAG9uX3Jlc2V0IHBhdXNlAG9uX2NodW5rX2hlYWRlciBwYXVzZQBvbl9tZXNzYWdlX2JlZ2luIHBhdXNlAG9uX2NodW5rX2V4dGVuc2lvbl92YWx1ZSBwYXVzZQBvbl9zdGF0dXNfY29tcGxldGUgcGF1c2UAb25fdmVyc2lvbl9jb21wbGV0ZSBwYXVzZQBvbl91cmxfY29tcGxldGUgcGF1c2UAb25fY2h1bmtfY29tcGxldGUgcGF1c2UAb25faGVhZGVyX3ZhbHVlX2NvbXBsZXRlIHBhdXNlAG9uX21lc3NhZ2VfY29tcGxldGUgcGF1c2UAb25fbWV0aG9kX2NvbXBsZXRlIHBhdXNlAG9uX2hlYWRlcl9maWVsZF9jb21wbGV0ZSBwYXVzZQBvbl9jaHVua19leHRlbnNpb25fbmFtZSBwYXVzZQBVbmV4cGVjdGVkIHNwYWNlIGFmdGVyIHN0YXJ0IGxpbmUATWlzc2luZyBleHBlY3RlZCBDUiBhZnRlciByZXNwb25zZSBsaW5lAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fY2h1bmtfZXh0ZW5zaW9uX25hbWUASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgZXh0ZW5zaW9ucyBuYW1lAE1pc3NpbmcgZXhwZWN0ZWQgQ1IgYWZ0ZXIgY2h1bmsgZXh0ZW5zaW9uIG5hbWUASW52YWxpZCBzdGF0dXMgY29kZQBQYXVzZSBvbiBDT05ORUNUL1VwZ3JhZGUAUGF1c2Ugb24gUFJJL1VwZ3JhZGUARXhwZWN0ZWQgSFRUUC8yIENvbm5lY3Rpb24gUHJlZmFjZQBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX21ldGhvZABFeHBlY3RlZCBzcGFjZSBhZnRlciBtZXRob2QAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9oZWFkZXJfZmllbGQAUGF1c2VkAEludmFsaWQgd29yZCBlbmNvdW50ZXJlZABJbnZhbGlkIG1ldGhvZCBlbmNvdW50ZXJlZABNaXNzaW5nIGV4cGVjdGVkIENSIGFmdGVyIGNodW5rIGRhdGEARXhwZWN0ZWQgTEYgYWZ0ZXIgY2h1bmsgZGF0YQBVbmV4cGVjdGVkIGNoYXIgaW4gdXJsIHNjaGVtYQBSZXF1ZXN0IGhhcyBpbnZhbGlkIGBUcmFuc2Zlci1FbmNvZGluZ2AARGF0YSBhZnRlciBgQ29ubmVjdGlvbjogY2xvc2VgAFNXSVRDSF9QUk9YWQBVU0VfUFJPWFkATUtBQ1RJVklUWQBVTlBST0NFU1NBQkxFX0VOVElUWQBRVUVSWQBDT1BZAE1PVkVEX1BFUk1BTkVOVExZAFRPT19FQVJMWQBOT1RJRlkARkFJTEVEX0RFUEVOREVOQ1kAQkFEX0dBVEVXQVkAUExBWQBQVVQAQ0hFQ0tPVVQAR0FURVdBWV9USU1FT1VUAFJFUVVFU1RfVElNRU9VVABORVRXT1JLX0NPTk5FQ1RfVElNRU9VVABDT05ORUNUSU9OX1RJTUVPVVQATE9HSU5fVElNRU9VVABORVRXT1JLX1JFQURfVElNRU9VVABQT1NUAE1JU0RJUkVDVEVEX1JFUVVFU1QAQ0xJRU5UX0NMT1NFRF9SRVFVRVNUAENMSUVOVF9DTE9TRURfTE9BRF9CQUxBTkNFRF9SRVFVRVNUAEJBRF9SRVFVRVNUAEhUVFBfUkVRVUVTVF9TRU5UX1RPX0hUVFBTX1BPUlQAUkVQT1JUAElNX0FfVEVBUE9UAFJFU0VUX0NPTlRFTlQATk9fQ09OVEVOVABQQVJUSUFMX0NPTlRFTlQASFBFX0lOVkFMSURfQ09OU1RBTlQASFBFX0NCX1JFU0VUAEdFVABIUEVfU1RSSUNUAENPTkZMSUNUAFRFTVBPUkFSWV9SRURJUkVDVABQRVJNQU5FTlRfUkVESVJFQ1QAQ09OTkVDVABNVUxUSV9TVEFUVVMASFBFX0lOVkFMSURfU1RBVFVTAFRPT19NQU5ZX1JFUVVFU1RTAEVBUkxZX0hJTlRTAFVOQVZBSUxBQkxFX0ZPUl9MRUdBTF9SRUFTT05TAE9QVElPTlMAU1dJVENISU5HX1BST1RPQ09MUwBWQVJJQU5UX0FMU09fTkVHT1RJQVRFUwBNVUxUSVBMRV9DSE9JQ0VTAElOVEVSTkFMX1NFUlZFUl9FUlJPUgBXRUJfU0VSVkVSX1VOS05PV05fRVJST1IAUkFJTEdVTl9FUlJPUgBJREVOVElUWV9QUk9WSURFUl9BVVRIRU5USUNBVElPTl9FUlJPUgBTU0xfQ0VSVElGSUNBVEVfRVJST1IASU5WQUxJRF9YX0ZPUldBUkRFRF9GT1IAU0VUX1BBUkFNRVRFUgBHRVRfUEFSQU1FVEVSAEhQRV9VU0VSAFNFRV9PVEhFUgBIUEVfQ0JfQ0hVTktfSEVBREVSAEV4cGVjdGVkIExGIGFmdGVyIENSAE1LQ0FMRU5EQVIAU0VUVVAAV0VCX1NFUlZFUl9JU19ET1dOAFRFQVJET1dOAEhQRV9DTE9TRURfQ09OTkVDVElPTgBIRVVSSVNUSUNfRVhQSVJBVElPTgBESVNDT05ORUNURURfT1BFUkFUSU9OAE5PTl9BVVRIT1JJVEFUSVZFX0lORk9STUFUSU9OAEhQRV9JTlZBTElEX1ZFUlNJT04ASFBFX0NCX01FU1NBR0VfQkVHSU4AU0lURV9JU19GUk9aRU4ASFBFX0lOVkFMSURfSEVBREVSX1RPS0VOAElOVkFMSURfVE9LRU4ARk9SQklEREVOAEVOSEFOQ0VfWU9VUl9DQUxNAEhQRV9JTlZBTElEX1VSTABCTE9DS0VEX0JZX1BBUkVOVEFMX0NPTlRST0wATUtDT0wAQUNMAEhQRV9JTlRFUk5BTABSRVFVRVNUX0hFQURFUl9GSUVMRFNfVE9PX0xBUkdFX1VOT0ZGSUNJQUwASFBFX09LAFVOTElOSwBVTkxPQ0sAUFJJAFJFVFJZX1dJVEgASFBFX0lOVkFMSURfQ09OVEVOVF9MRU5HVEgASFBFX1VORVhQRUNURURfQ09OVEVOVF9MRU5HVEgARkxVU0gAUFJPUFBBVENIAE0tU0VBUkNIAFVSSV9UT09fTE9ORwBQUk9DRVNTSU5HAE1JU0NFTExBTkVPVVNfUEVSU0lTVEVOVF9XQVJOSU5HAE1JU0NFTExBTkVPVVNfV0FSTklORwBIUEVfSU5WQUxJRF9UUkFOU0ZFUl9FTkNPRElORwBFeHBlY3RlZCBDUkxGAEhQRV9JTlZBTElEX0NIVU5LX1NJWkUATU9WRQBDT05USU5VRQBIUEVfQ0JfU1RBVFVTX0NPTVBMRVRFAEhQRV9DQl9IRUFERVJTX0NPTVBMRVRFAEhQRV9DQl9WRVJTSU9OX0NPTVBMRVRFAEhQRV9DQl9VUkxfQ09NUExFVEUASFBFX0NCX0NIVU5LX0NPTVBMRVRFAEhQRV9DQl9IRUFERVJfVkFMVUVfQ09NUExFVEUASFBFX0NCX0NIVU5LX0VYVEVOU0lPTl9WQUxVRV9DT01QTEVURQBIUEVfQ0JfQ0hVTktfRVhURU5TSU9OX05BTUVfQ09NUExFVEUASFBFX0NCX01FU1NBR0VfQ09NUExFVEUASFBFX0NCX01FVEhPRF9DT01QTEVURQBIUEVfQ0JfSEVBREVSX0ZJRUxEX0NPTVBMRVRFAERFTEVURQBIUEVfSU5WQUxJRF9FT0ZfU1RBVEUASU5WQUxJRF9TU0xfQ0VSVElGSUNBVEUAUEFVU0UATk9fUkVTUE9OU0UAVU5TVVBQT1JURURfTUVESUFfVFlQRQBHT05FAE5PVF9BQ0NFUFRBQkxFAFNFUlZJQ0VfVU5BVkFJTEFCTEUAUkFOR0VfTk9UX1NBVElTRklBQkxFAE9SSUdJTl9JU19VTlJFQUNIQUJMRQBSRVNQT05TRV9JU19TVEFMRQBQVVJHRQBNRVJHRQBSRVFVRVNUX0hFQURFUl9GSUVMRFNfVE9PX0xBUkdFAFJFUVVFU1RfSEVBREVSX1RPT19MQVJHRQBQQVlMT0FEX1RPT19MQVJHRQBJTlNVRkZJQ0lFTlRfU1RPUkFHRQBIUEVfUEFVU0VEX1VQR1JBREUASFBFX1BBVVNFRF9IMl9VUEdSQURFAFNPVVJDRQBBTk5PVU5DRQBUUkFDRQBIUEVfVU5FWFBFQ1RFRF9TUEFDRQBERVNDUklCRQBVTlNVQlNDUklCRQBSRUNPUkQASFBFX0lOVkFMSURfTUVUSE9EAE5PVF9GT1VORABQUk9QRklORABVTkJJTkQAUkVCSU5EAFVOQVVUSE9SSVpFRABNRVRIT0RfTk9UX0FMTE9XRUQASFRUUF9WRVJTSU9OX05PVF9TVVBQT1JURUQAQUxSRUFEWV9SRVBPUlRFRABBQ0NFUFRFRABOT1RfSU1QTEVNRU5URUQATE9PUF9ERVRFQ1RFRABIUEVfQ1JfRVhQRUNURUQASFBFX0xGX0VYUEVDVEVEAENSRUFURUQASU1fVVNFRABIUEVfUEFVU0VEAFRJTUVPVVRfT0NDVVJFRABQQVlNRU5UX1JFUVVJUkVEAFBSRUNPTkRJVElPTl9SRVFVSVJFRABQUk9YWV9BVVRIRU5USUNBVElPTl9SRVFVSVJFRABORVRXT1JLX0FVVEhFTlRJQ0FUSU9OX1JFUVVJUkVEAExFTkdUSF9SRVFVSVJFRABTU0xfQ0VSVElGSUNBVEVfUkVRVUlSRUQAVVBHUkFERV9SRVFVSVJFRABQQUdFX0VYUElSRUQAUFJFQ09ORElUSU9OX0ZBSUxFRABFWFBFQ1RBVElPTl9GQUlMRUQAUkVWQUxJREFUSU9OX0ZBSUxFRABTU0xfSEFORFNIQUtFX0ZBSUxFRABMT0NLRUQAVFJBTlNGT1JNQVRJT05fQVBQTElFRABOT1RfTU9ESUZJRUQATk9UX0VYVEVOREVEAEJBTkRXSURUSF9MSU1JVF9FWENFRURFRABTSVRFX0lTX09WRVJMT0FERUQASEVBRABFeHBlY3RlZCBIVFRQLwAAUhUAABoVAAAPEgAA5BkAAJEVAAAJFAAALRkAAOQUAADpEQAAaRQAAKEUAAB2FQAAQxYAAF4SAACUFwAAFxYAAH0UAAB/FgAAQRcAALMTAADDFgAABBoAAL0YAADQGAAAoBMAANQZAACvFgAAaBYAAHAXAADZFgAA/BgAAP4RAABZFwAAlxYAABwXAAD2FgAAjRcAAAsSAAB/GwAALhEAALMQAABJEgAArRIAAPYYAABoEAAAYhUAABAVAABaFgAAShkAALUVAADBFQAAYBUAAFwZAABaGQAAUxkAABYVAACtEQAAQhAAALcQAABXGAAAvxUAAIkQAAAcGQAAGhkAALkVAABRGAAA3BMAAFsVAABZFQAA5hgAAGcVAAARGQAA7RgAAOcTAACuEAAAwhcAAAAUAACSEwAAhBMAAEASAAAmGQAArxUAAGIQAEHpOQsBAQBBgDoL4AEBAQIBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQBB6jsLBAEAAAIAQYE8C14DBAMDAwMDAAADAwADAwADAwMDAwMDAwMDAAUAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAwADAEHqPQsEAQAAAgBBgT4LXgMAAwMDAwMAAAMDAAMDAAMDAwMDAwMDAwMABAAFAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwADAAMAQeA/Cw1sb3NlZWVwLWFsaXZlAEH5PwsBAQBBkMAAC+ABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAQfnBAAsBAQBBkMIAC+cBAQEBAQEBAQEBAQEBAgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQFjaHVua2VkAEGhxAALXgEAAQEBAQEAAAEBAAEBAAEBAQEBAQEBAQEAAAAAAAAAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAAEAQYDGAAshZWN0aW9uZW50LWxlbmd0aG9ucm94eS1jb25uZWN0aW9uAEGwxgALK3JhbnNmZXItZW5jb2RpbmdwZ3JhZGUNCg0KU00NCg0KVFRQL0NFL1RTUC8AQenGAAsFAQIAAQMAQYDHAAtfBAUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUAQenIAAsFAQIAAQMAQYDJAAtfBAUFBgUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUAQenKAAsEAQAAAQBBgcsAC14CAgACAgICAgICAgICAgICAgICAgICAgICAgICAgIAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAEHpzAALBQECAAEDAEGAzQALXwQFAAAFBQUFBQUFBQUFBQYFBQUFBQUFBQUFBQUABQAHCAUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQAFAAUABQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUAAAAFAEHpzgALBQEBAAEBAEGAzwALAQEAQZrPAAtBAgAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAAAAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAQenQAAsFAQEAAQEAQYDRAAsBAQBBitEACwYCAAAAAAIAQaHRAAs6AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwBB4NIAC5oBTk9VTkNFRUNLT1VUTkVDVEVURUNSSUJFTFVTSEVURUFEU0VBUkNIUkdFQ1RJVklUWUxFTkRBUlZFT1RJRllQVElPTlNDSFNFQVlTVEFUQ0hHRVVFUllPUkRJUkVDVE9SVFJDSFBBUkFNRVRFUlVSQ0VCU0NSSUJFQVJET1dOQUNFSU5ETktDS1VCU0NSSUJFSFRUUC9BRFRQLw==";
  var wasmBuffer;
  Object.defineProperty(module2, "exports", {
    get: () => {
      return wasmBuffer ? wasmBuffer : wasmBuffer = Buffer2.from(wasmBase64, "base64");
    }
  });
});

// node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS((exports2, module2) => {
  var { Buffer: Buffer2 } = require("node:buffer");
  var wasmBase64 = "";
  var wasmBuffer;
  Object.defineProperty(module2, "exports", {
    get: () => {
      return wasmBuffer ? wasmBuffer : wasmBuffer = Buffer2.from(wasmBase64, "base64");
    }
  });
});

// node_modules/undici/lib/web/fetch/constants.js
var require_constants3 = __commonJS((exports2, module2) => {
  var corsSafeListedMethods = ["GET", "HEAD", "POST"];
  var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
  var nullBodyStatus = [101, 204, 205, 304];
  var redirectStatus = [301, 302, 303, 307, 308];
  var redirectStatusSet = new Set(redirectStatus);
  var badPorts = [
    "1",
    "7",
    "9",
    "11",
    "13",
    "15",
    "17",
    "19",
    "20",
    "21",
    "22",
    "23",
    "25",
    "37",
    "42",
    "43",
    "53",
    "69",
    "77",
    "79",
    "87",
    "95",
    "101",
    "102",
    "103",
    "104",
    "109",
    "110",
    "111",
    "113",
    "115",
    "117",
    "119",
    "123",
    "135",
    "137",
    "139",
    "143",
    "161",
    "179",
    "389",
    "427",
    "465",
    "512",
    "513",
    "514",
    "515",
    "526",
    "530",
    "531",
    "532",
    "540",
    "548",
    "554",
    "556",
    "563",
    "587",
    "601",
    "636",
    "989",
    "990",
    "993",
    "995",
    "1719",
    "1720",
    "1723",
    "2049",
    "3659",
    "4045",
    "4190",
    "5060",
    "5061",
    "6000",
    "6566",
    "6665",
    "6666",
    "6667",
    "6668",
    "6669",
    "6679",
    "6697",
    "10080"
  ];
  var badPortsSet = new Set(badPorts);
  var referrerPolicyTokens = [
    "no-referrer",
    "no-referrer-when-downgrade",
    "same-origin",
    "origin",
    "strict-origin",
    "origin-when-cross-origin",
    "strict-origin-when-cross-origin",
    "unsafe-url"
  ];
  var referrerPolicy = [
    "",
    ...referrerPolicyTokens
  ];
  var referrerPolicyTokensSet = new Set(referrerPolicyTokens);
  var requestRedirect = ["follow", "manual", "error"];
  var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
  var safeMethodsSet = new Set(safeMethods);
  var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
  var requestCredentials = ["omit", "same-origin", "include"];
  var requestCache = [
    "default",
    "no-store",
    "reload",
    "no-cache",
    "force-cache",
    "only-if-cached"
  ];
  var requestBodyHeader = [
    "content-encoding",
    "content-language",
    "content-location",
    "content-type",
    "content-length"
  ];
  var requestDuplex = [
    "half"
  ];
  var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
  var forbiddenMethodsSet = new Set(forbiddenMethods);
  var subresource = [
    "audio",
    "audioworklet",
    "font",
    "image",
    "manifest",
    "paintworklet",
    "script",
    "style",
    "track",
    "video",
    "xslt",
    ""
  ];
  var subresourceSet = new Set(subresource);
  module2.exports = {
    subresource,
    forbiddenMethods,
    requestBodyHeader,
    referrerPolicy,
    requestRedirect,
    requestMode,
    requestCredentials,
    requestCache,
    redirectStatus,
    corsSafeListedMethods,
    nullBodyStatus,
    safeMethods,
    badPorts,
    requestDuplex,
    subresourceSet,
    badPortsSet,
    redirectStatusSet,
    corsSafeListedMethodsSet,
    safeMethodsSet,
    forbiddenMethodsSet,
    referrerPolicyTokens: referrerPolicyTokensSet
  };
});

// node_modules/undici/lib/web/fetch/global.js
var require_global = __commonJS((exports2, module2) => {
  var globalOrigin = Symbol.for("undici.globalOrigin.1");
  function getGlobalOrigin() {
    return globalThis[globalOrigin];
  }
  function setGlobalOrigin(newOrigin) {
    if (newOrigin === undefined) {
      Object.defineProperty(globalThis, globalOrigin, {
        value: undefined,
        writable: true,
        enumerable: false,
        configurable: false
      });
      return;
    }
    const parsedURL = new URL(newOrigin);
    if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
      throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
    }
    Object.defineProperty(globalThis, globalOrigin, {
      value: parsedURL,
      writable: true,
      enumerable: false,
      configurable: false
    });
  }
  module2.exports = {
    getGlobalOrigin,
    setGlobalOrigin
  };
});

// node_modules/undici/lib/web/fetch/data-url.js
var require_data_url = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var encoder = new TextEncoder;
  var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+\-.^_|~A-Za-z0-9]+$/;
  var HTTP_WHITESPACE_REGEX = /[\u000A\u000D\u0009\u0020]/;
  var ASCII_WHITESPACE_REPLACE_REGEX = /[\u0009\u000A\u000C\u000D\u0020]/g;
  var HTTP_QUOTED_STRING_TOKENS = /^[\u0009\u0020-\u007E\u0080-\u00FF]+$/;
  function dataURLProcessor(dataURL) {
    assert(dataURL.protocol === "data:");
    let input = URLSerializer(dataURL, true);
    input = input.slice(5);
    const position = { position: 0 };
    let mimeType = collectASequenceOfCodePointsFast(",", input, position);
    const mimeTypeLength = mimeType.length;
    mimeType = removeASCIIWhitespace(mimeType, true, true);
    if (position.position >= input.length) {
      return "failure";
    }
    position.position++;
    const encodedBody = input.slice(mimeTypeLength + 1);
    let body = stringPercentDecode(encodedBody);
    if (/;(\u0020){0,}base64$/i.test(mimeType)) {
      const stringBody = isomorphicDecode(body);
      body = forgivingBase64(stringBody);
      if (body === "failure") {
        return "failure";
      }
      mimeType = mimeType.slice(0, -6);
      mimeType = mimeType.replace(/(\u0020)+$/, "");
      mimeType = mimeType.slice(0, -1);
    }
    if (mimeType.startsWith(";")) {
      mimeType = "text/plain" + mimeType;
    }
    let mimeTypeRecord = parseMIMEType(mimeType);
    if (mimeTypeRecord === "failure") {
      mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
    }
    return { mimeType: mimeTypeRecord, body };
  }
  function URLSerializer(url, excludeFragment = false) {
    if (!excludeFragment) {
      return url.href;
    }
    const href = url.href;
    const hashLength = url.hash.length;
    const serialized = hashLength === 0 ? href : href.substring(0, href.length - hashLength);
    if (!hashLength && href.endsWith("#")) {
      return serialized.slice(0, -1);
    }
    return serialized;
  }
  function collectASequenceOfCodePoints(condition, input, position) {
    let result2 = "";
    while (position.position < input.length && condition(input[position.position])) {
      result2 += input[position.position];
      position.position++;
    }
    return result2;
  }
  function collectASequenceOfCodePointsFast(char, input, position) {
    const idx = input.indexOf(char, position.position);
    const start = position.position;
    if (idx === -1) {
      position.position = input.length;
      return input.slice(start);
    }
    position.position = idx;
    return input.slice(start, position.position);
  }
  function stringPercentDecode(input) {
    const bytes = encoder.encode(input);
    return percentDecode(bytes);
  }
  function isHexCharByte(byte) {
    return byte >= 48 && byte <= 57 || byte >= 65 && byte <= 70 || byte >= 97 && byte <= 102;
  }
  function hexByteToNumber(byte) {
    return byte >= 48 && byte <= 57 ? byte - 48 : (byte & 223) - 55;
  }
  function percentDecode(input) {
    const length = input.length;
    const output = new Uint8Array(length);
    let j = 0;
    for (let i2 = 0;i2 < length; ++i2) {
      const byte = input[i2];
      if (byte !== 37) {
        output[j++] = byte;
      } else if (byte === 37 && !(isHexCharByte(input[i2 + 1]) && isHexCharByte(input[i2 + 2]))) {
        output[j++] = 37;
      } else {
        output[j++] = hexByteToNumber(input[i2 + 1]) << 4 | hexByteToNumber(input[i2 + 2]);
        i2 += 2;
      }
    }
    return length === j ? output : output.subarray(0, j);
  }
  function parseMIMEType(input) {
    input = removeHTTPWhitespace(input, true, true);
    const position = { position: 0 };
    const type = collectASequenceOfCodePointsFast("/", input, position);
    if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
      return "failure";
    }
    if (position.position >= input.length) {
      return "failure";
    }
    position.position++;
    let subtype = collectASequenceOfCodePointsFast(";", input, position);
    subtype = removeHTTPWhitespace(subtype, false, true);
    if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
      return "failure";
    }
    const typeLowercase = type.toLowerCase();
    const subtypeLowercase = subtype.toLowerCase();
    const mimeType = {
      type: typeLowercase,
      subtype: subtypeLowercase,
      parameters: new Map,
      essence: `${typeLowercase}/${subtypeLowercase}`
    };
    while (position.position < input.length) {
      position.position++;
      collectASequenceOfCodePoints((char) => HTTP_WHITESPACE_REGEX.test(char), input, position);
      let parameterName = collectASequenceOfCodePoints((char) => char !== ";" && char !== "=", input, position);
      parameterName = parameterName.toLowerCase();
      if (position.position < input.length) {
        if (input[position.position] === ";") {
          continue;
        }
        position.position++;
      }
      if (position.position >= input.length) {
        break;
      }
      let parameterValue = null;
      if (input[position.position] === '"') {
        parameterValue = collectAnHTTPQuotedString(input, position, true);
        collectASequenceOfCodePointsFast(";", input, position);
      } else {
        parameterValue = collectASequenceOfCodePointsFast(";", input, position);
        parameterValue = removeHTTPWhitespace(parameterValue, false, true);
        if (parameterValue.length === 0) {
          continue;
        }
      }
      if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
        mimeType.parameters.set(parameterName, parameterValue);
      }
    }
    return mimeType;
  }
  function forgivingBase64(data) {
    data = data.replace(ASCII_WHITESPACE_REPLACE_REGEX, "");
    let dataLength = data.length;
    if (dataLength % 4 === 0) {
      if (data.charCodeAt(dataLength - 1) === 61) {
        --dataLength;
        if (data.charCodeAt(dataLength - 1) === 61) {
          --dataLength;
        }
      }
    }
    if (dataLength % 4 === 1) {
      return "failure";
    }
    if (/[^+/0-9A-Za-z]/.test(data.length === dataLength ? data : data.substring(0, dataLength))) {
      return "failure";
    }
    const buffer = Buffer.from(data, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  }
  function collectAnHTTPQuotedString(input, position, extractValue = false) {
    const positionStart = position.position;
    let value = "";
    assert(input[position.position] === '"');
    position.position++;
    while (true) {
      value += collectASequenceOfCodePoints((char) => char !== '"' && char !== "\\", input, position);
      if (position.position >= input.length) {
        break;
      }
      const quoteOrBackslash = input[position.position];
      position.position++;
      if (quoteOrBackslash === "\\") {
        if (position.position >= input.length) {
          value += "\\";
          break;
        }
        value += input[position.position];
        position.position++;
      } else {
        assert(quoteOrBackslash === '"');
        break;
      }
    }
    if (extractValue) {
      return value;
    }
    return input.slice(positionStart, position.position);
  }
  function serializeAMimeType(mimeType) {
    assert(mimeType !== "failure");
    const { parameters, essence } = mimeType;
    let serialization = essence;
    for (let [name, value] of parameters.entries()) {
      serialization += ";";
      serialization += name;
      serialization += "=";
      if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
        value = value.replace(/(\\|")/g, "\\$1");
        value = '"' + value;
        value += '"';
      }
      serialization += value;
    }
    return serialization;
  }
  function isHTTPWhiteSpace(char) {
    return char === 13 || char === 10 || char === 9 || char === 32;
  }
  function removeHTTPWhitespace(str, leading = true, trailing = true) {
    return removeChars(str, leading, trailing, isHTTPWhiteSpace);
  }
  function isASCIIWhitespace(char) {
    return char === 13 || char === 10 || char === 9 || char === 12 || char === 32;
  }
  function removeASCIIWhitespace(str, leading = true, trailing = true) {
    return removeChars(str, leading, trailing, isASCIIWhitespace);
  }
  function removeChars(str, leading, trailing, predicate) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
      while (lead < str.length && predicate(str.charCodeAt(lead)))
        lead++;
    }
    if (trailing) {
      while (trail > 0 && predicate(str.charCodeAt(trail)))
        trail--;
    }
    return lead === 0 && trail === str.length - 1 ? str : str.slice(lead, trail + 1);
  }
  function isomorphicDecode(input) {
    const length = input.length;
    if ((2 << 15) - 1 > length) {
      return String.fromCharCode.apply(null, input);
    }
    let result2 = "";
    let i2 = 0;
    let addition = (2 << 15) - 1;
    while (i2 < length) {
      if (i2 + addition > length) {
        addition = length - i2;
      }
      result2 += String.fromCharCode.apply(null, input.subarray(i2, i2 += addition));
    }
    return result2;
  }
  function minimizeSupportedMimeType(mimeType) {
    switch (mimeType.essence) {
      case "application/ecmascript":
      case "application/javascript":
      case "application/x-ecmascript":
      case "application/x-javascript":
      case "text/ecmascript":
      case "text/javascript":
      case "text/javascript1.0":
      case "text/javascript1.1":
      case "text/javascript1.2":
      case "text/javascript1.3":
      case "text/javascript1.4":
      case "text/javascript1.5":
      case "text/jscript":
      case "text/livescript":
      case "text/x-ecmascript":
      case "text/x-javascript":
        return "text/javascript";
      case "application/json":
      case "text/json":
        return "application/json";
      case "image/svg+xml":
        return "image/svg+xml";
      case "text/xml":
      case "application/xml":
        return "application/xml";
    }
    if (mimeType.subtype.endsWith("+json")) {
      return "application/json";
    }
    if (mimeType.subtype.endsWith("+xml")) {
      return "application/xml";
    }
    return "";
  }
  module2.exports = {
    dataURLProcessor,
    URLSerializer,
    collectASequenceOfCodePoints,
    collectASequenceOfCodePointsFast,
    stringPercentDecode,
    parseMIMEType,
    collectAnHTTPQuotedString,
    serializeAMimeType,
    removeChars,
    removeHTTPWhitespace,
    minimizeSupportedMimeType,
    HTTP_TOKEN_CODEPOINTS,
    isomorphicDecode
  };
});

// node_modules/undici/lib/web/fetch/webidl.js
var require_webidl = __commonJS((exports2, module2) => {
  var { types, inspect } = require("node:util");
  var { markAsUncloneable } = require("node:worker_threads");
  var { toUSVString } = require_util();
  var UNDEFINED = 1;
  var BOOLEAN = 2;
  var STRING = 3;
  var SYMBOL = 4;
  var NUMBER = 5;
  var BIGINT = 6;
  var NULL = 7;
  var OBJECT = 8;
  var FunctionPrototypeSymbolHasInstance = Function.call.bind(Function.prototype[Symbol.hasInstance]);
  var webidl = {
    converters: {},
    util: {},
    errors: {},
    is: {}
  };
  webidl.errors.exception = function(message) {
    return new TypeError(`${message.header}: ${message.message}`);
  };
  webidl.errors.conversionFailed = function(context) {
    const plural = context.types.length === 1 ? "" : " one of";
    const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(", ")}.`;
    return webidl.errors.exception({
      header: context.prefix,
      message
    });
  };
  webidl.errors.invalidArgument = function(context) {
    return webidl.errors.exception({
      header: context.prefix,
      message: `"${context.value}" is an invalid ${context.type}.`
    });
  };
  webidl.brandCheck = function(V, I) {
    if (!FunctionPrototypeSymbolHasInstance(I, V)) {
      const err2 = new TypeError("Illegal invocation");
      err2.code = "ERR_INVALID_THIS";
      throw err2;
    }
  };
  webidl.brandCheckMultiple = function(List) {
    const prototypes = List.map((c) => webidl.util.MakeTypeAssertion(c));
    return (V) => {
      if (prototypes.every((typeCheck) => !typeCheck(V))) {
        const err2 = new TypeError("Illegal invocation");
        err2.code = "ERR_INVALID_THIS";
        throw err2;
      }
    };
  };
  webidl.argumentLengthCheck = function({ length }, min, ctx) {
    if (length < min) {
      throw webidl.errors.exception({
        message: `${min} argument${min !== 1 ? "s" : ""} required, ` + `but${length ? " only" : ""} ${length} found.`,
        header: ctx
      });
    }
  };
  webidl.illegalConstructor = function() {
    throw webidl.errors.exception({
      header: "TypeError",
      message: "Illegal constructor"
    });
  };
  webidl.util.MakeTypeAssertion = function(I) {
    return (O) => FunctionPrototypeSymbolHasInstance(I, O);
  };
  webidl.util.Type = function(V) {
    switch (typeof V) {
      case "undefined":
        return UNDEFINED;
      case "boolean":
        return BOOLEAN;
      case "string":
        return STRING;
      case "symbol":
        return SYMBOL;
      case "number":
        return NUMBER;
      case "bigint":
        return BIGINT;
      case "function":
      case "object": {
        if (V === null) {
          return NULL;
        }
        return OBJECT;
      }
    }
  };
  webidl.util.Types = {
    UNDEFINED,
    BOOLEAN,
    STRING,
    SYMBOL,
    NUMBER,
    BIGINT,
    NULL,
    OBJECT
  };
  webidl.util.TypeValueToString = function(o) {
    switch (webidl.util.Type(o)) {
      case UNDEFINED:
        return "Undefined";
      case BOOLEAN:
        return "Boolean";
      case STRING:
        return "String";
      case SYMBOL:
        return "Symbol";
      case NUMBER:
        return "Number";
      case BIGINT:
        return "BigInt";
      case NULL:
        return "Null";
      case OBJECT:
        return "Object";
    }
  };
  webidl.util.markAsUncloneable = markAsUncloneable || (() => {});
  webidl.util.ConvertToInt = function(V, bitLength, signedness, opts) {
    let upperBound;
    let lowerBound;
    if (bitLength === 64) {
      upperBound = Math.pow(2, 53) - 1;
      if (signedness === "unsigned") {
        lowerBound = 0;
      } else {
        lowerBound = Math.pow(-2, 53) + 1;
      }
    } else if (signedness === "unsigned") {
      lowerBound = 0;
      upperBound = Math.pow(2, bitLength) - 1;
    } else {
      lowerBound = Math.pow(-2, bitLength) - 1;
      upperBound = Math.pow(2, bitLength - 1) - 1;
    }
    let x2 = Number(V);
    if (x2 === 0) {
      x2 = 0;
    }
    if (opts?.enforceRange === true) {
      if (Number.isNaN(x2) || x2 === Number.POSITIVE_INFINITY || x2 === Number.NEGATIVE_INFINITY) {
        throw webidl.errors.exception({
          header: "Integer conversion",
          message: `Could not convert ${webidl.util.Stringify(V)} to an integer.`
        });
      }
      x2 = webidl.util.IntegerPart(x2);
      if (x2 < lowerBound || x2 > upperBound) {
        throw webidl.errors.exception({
          header: "Integer conversion",
          message: `Value must be between ${lowerBound}-${upperBound}, got ${x2}.`
        });
      }
      return x2;
    }
    if (!Number.isNaN(x2) && opts?.clamp === true) {
      x2 = Math.min(Math.max(x2, lowerBound), upperBound);
      if (Math.floor(x2) % 2 === 0) {
        x2 = Math.floor(x2);
      } else {
        x2 = Math.ceil(x2);
      }
      return x2;
    }
    if (Number.isNaN(x2) || x2 === 0 && Object.is(0, x2) || x2 === Number.POSITIVE_INFINITY || x2 === Number.NEGATIVE_INFINITY) {
      return 0;
    }
    x2 = webidl.util.IntegerPart(x2);
    x2 = x2 % Math.pow(2, bitLength);
    if (signedness === "signed" && x2 >= Math.pow(2, bitLength) - 1) {
      return x2 - Math.pow(2, bitLength);
    }
    return x2;
  };
  webidl.util.IntegerPart = function(n) {
    const r = Math.floor(Math.abs(n));
    if (n < 0) {
      return -1 * r;
    }
    return r;
  };
  webidl.util.Stringify = function(V) {
    const type = webidl.util.Type(V);
    switch (type) {
      case SYMBOL:
        return `Symbol(${V.description})`;
      case OBJECT:
        return inspect(V);
      case STRING:
        return `"${V}"`;
      default:
        return `${V}`;
    }
  };
  webidl.sequenceConverter = function(converter) {
    return (V, prefix, argument, Iterable) => {
      if (webidl.util.Type(V) !== OBJECT) {
        throw webidl.errors.exception({
          header: prefix,
          message: `${argument} (${webidl.util.Stringify(V)}) is not iterable.`
        });
      }
      const method = typeof Iterable === "function" ? Iterable() : V?.[Symbol.iterator]?.();
      const seq = [];
      let index = 0;
      if (method === undefined || typeof method.next !== "function") {
        throw webidl.errors.exception({
          header: prefix,
          message: `${argument} is not iterable.`
        });
      }
      while (true) {
        const { done, value } = method.next();
        if (done) {
          break;
        }
        seq.push(converter(value, prefix, `${argument}[${index++}]`));
      }
      return seq;
    };
  };
  webidl.recordConverter = function(keyConverter, valueConverter) {
    return (O, prefix, argument) => {
      if (webidl.util.Type(O) !== OBJECT) {
        throw webidl.errors.exception({
          header: prefix,
          message: `${argument} ("${webidl.util.TypeValueToString(O)}") is not an Object.`
        });
      }
      const result2 = {};
      if (!types.isProxy(O)) {
        const keys2 = [...Object.getOwnPropertyNames(O), ...Object.getOwnPropertySymbols(O)];
        for (const key of keys2) {
          const keyName = webidl.util.Stringify(key);
          const typedKey = keyConverter(key, prefix, `Key ${keyName} in ${argument}`);
          const typedValue = valueConverter(O[key], prefix, `${argument}[${keyName}]`);
          result2[typedKey] = typedValue;
        }
        return result2;
      }
      const keys = Reflect.ownKeys(O);
      for (const key of keys) {
        const desc = Reflect.getOwnPropertyDescriptor(O, key);
        if (desc?.enumerable) {
          const typedKey = keyConverter(key, prefix, argument);
          const typedValue = valueConverter(O[key], prefix, argument);
          result2[typedKey] = typedValue;
        }
      }
      return result2;
    };
  };
  webidl.interfaceConverter = function(TypeCheck, name) {
    return (V, prefix, argument) => {
      if (!TypeCheck(V)) {
        throw webidl.errors.exception({
          header: prefix,
          message: `Expected ${argument} ("${webidl.util.Stringify(V)}") to be an instance of ${name}.`
        });
      }
      return V;
    };
  };
  webidl.dictionaryConverter = function(converters) {
    return (dictionary, prefix, argument) => {
      const dict = {};
      if (dictionary != null && webidl.util.Type(dictionary) !== OBJECT) {
        throw webidl.errors.exception({
          header: prefix,
          message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
        });
      }
      for (const options of converters) {
        const { key, defaultValue, required, converter } = options;
        if (required === true) {
          if (dictionary == null || !Object.hasOwn(dictionary, key)) {
            throw webidl.errors.exception({
              header: prefix,
              message: `Missing required key "${key}".`
            });
          }
        }
        let value = dictionary?.[key];
        const hasDefault = defaultValue !== undefined;
        if (hasDefault && value === undefined) {
          value = defaultValue();
        }
        if (required || hasDefault || value !== undefined) {
          value = converter(value, prefix, `${argument}.${key}`);
          if (options.allowedValues && !options.allowedValues.includes(value)) {
            throw webidl.errors.exception({
              header: prefix,
              message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
            });
          }
          dict[key] = value;
        }
      }
      return dict;
    };
  };
  webidl.nullableConverter = function(converter) {
    return (V, prefix, argument) => {
      if (V === null) {
        return V;
      }
      return converter(V, prefix, argument);
    };
  };
  webidl.is.ReadableStream = webidl.util.MakeTypeAssertion(ReadableStream);
  webidl.is.Blob = webidl.util.MakeTypeAssertion(Blob);
  webidl.is.URLSearchParams = webidl.util.MakeTypeAssertion(URLSearchParams);
  webidl.is.File = webidl.util.MakeTypeAssertion(globalThis.File ?? require("node:buffer").File);
  webidl.is.URL = webidl.util.MakeTypeAssertion(URL);
  webidl.is.AbortSignal = webidl.util.MakeTypeAssertion(AbortSignal);
  webidl.is.MessagePort = webidl.util.MakeTypeAssertion(MessagePort);
  webidl.converters.DOMString = function(V, prefix, argument, opts) {
    if (V === null && opts?.legacyNullToEmptyString) {
      return "";
    }
    if (typeof V === "symbol") {
      throw webidl.errors.exception({
        header: prefix,
        message: `${argument} is a symbol, which cannot be converted to a DOMString.`
      });
    }
    return String(V);
  };
  webidl.converters.ByteString = function(V, prefix, argument) {
    if (typeof V === "symbol") {
      throw webidl.errors.exception({
        header: prefix,
        message: `${argument} is a symbol, which cannot be converted to a ByteString.`
      });
    }
    const x2 = String(V);
    for (let index = 0;index < x2.length; index++) {
      if (x2.charCodeAt(index) > 255) {
        throw new TypeError("Cannot convert argument to a ByteString because the character at " + `index ${index} has a value of ${x2.charCodeAt(index)} which is greater than 255.`);
      }
    }
    return x2;
  };
  webidl.converters.USVString = toUSVString;
  webidl.converters.boolean = function(V) {
    const x2 = Boolean(V);
    return x2;
  };
  webidl.converters.any = function(V) {
    return V;
  };
  webidl.converters["long long"] = function(V, prefix, argument) {
    const x2 = webidl.util.ConvertToInt(V, 64, "signed", undefined, prefix, argument);
    return x2;
  };
  webidl.converters["unsigned long long"] = function(V, prefix, argument) {
    const x2 = webidl.util.ConvertToInt(V, 64, "unsigned", undefined, prefix, argument);
    return x2;
  };
  webidl.converters["unsigned long"] = function(V, prefix, argument) {
    const x2 = webidl.util.ConvertToInt(V, 32, "unsigned", undefined, prefix, argument);
    return x2;
  };
  webidl.converters["unsigned short"] = function(V, prefix, argument, opts) {
    const x2 = webidl.util.ConvertToInt(V, 16, "unsigned", opts, prefix, argument);
    return x2;
  };
  webidl.converters.ArrayBuffer = function(V, prefix, argument, opts) {
    if (webidl.util.Type(V) !== OBJECT || !types.isAnyArrayBuffer(V)) {
      throw webidl.errors.conversionFailed({
        prefix,
        argument: `${argument} ("${webidl.util.Stringify(V)}")`,
        types: ["ArrayBuffer"]
      });
    }
    if (opts?.allowShared === false && types.isSharedArrayBuffer(V)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    if (V.resizable || V.growable) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "Received a resizable ArrayBuffer."
      });
    }
    return V;
  };
  webidl.converters.TypedArray = function(V, T, prefix, name, opts) {
    if (webidl.util.Type(V) !== OBJECT || !types.isTypedArray(V) || V.constructor.name !== T.name) {
      throw webidl.errors.conversionFailed({
        prefix,
        argument: `${name} ("${webidl.util.Stringify(V)}")`,
        types: [T.name]
      });
    }
    if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    if (V.buffer.resizable || V.buffer.growable) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "Received a resizable ArrayBuffer."
      });
    }
    return V;
  };
  webidl.converters.DataView = function(V, prefix, name, opts) {
    if (webidl.util.Type(V) !== OBJECT || !types.isDataView(V)) {
      throw webidl.errors.exception({
        header: prefix,
        message: `${name} is not a DataView.`
      });
    }
    if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    if (V.buffer.resizable || V.buffer.growable) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "Received a resizable ArrayBuffer."
      });
    }
    return V;
  };
  webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(webidl.converters.ByteString);
  webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(webidl.converters["sequence<ByteString>"]);
  webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString);
  webidl.converters.Blob = webidl.interfaceConverter(webidl.is.Blob, "Blob");
  webidl.converters.AbortSignal = webidl.interfaceConverter(webidl.is.AbortSignal, "AbortSignal");
  module2.exports = {
    webidl
  };
});

// node_modules/undici/lib/web/fetch/util.js
var require_util2 = __commonJS((exports2, module2) => {
  var { Transform } = require("node:stream");
  var zlib = require("node:zlib");
  var { redirectStatusSet, referrerPolicyTokens, badPortsSet } = require_constants3();
  var { getGlobalOrigin } = require_global();
  var { collectASequenceOfCodePoints, collectAnHTTPQuotedString, removeChars, parseMIMEType } = require_data_url();
  var { performance: performance2 } = require("node:perf_hooks");
  var { ReadableStreamFrom, isValidHTTPToken, normalizedMethodRecordsBase } = require_util();
  var assert = require("node:assert");
  var { isUint8Array } = require("node:util/types");
  var { webidl } = require_webidl();
  var supportedHashes = [];
  var crypto2;
  try {
    crypto2 = require("node:crypto");
    const possibleRelevantHashes = ["sha256", "sha384", "sha512"];
    supportedHashes = crypto2.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
  } catch {}
  function responseURL(response) {
    const urlList = response.urlList;
    const length = urlList.length;
    return length === 0 ? null : urlList[length - 1].toString();
  }
  function responseLocationURL(response, requestFragment) {
    if (!redirectStatusSet.has(response.status)) {
      return null;
    }
    let location = response.headersList.get("location", true);
    if (location !== null && isValidHeaderValue(location)) {
      if (!isValidEncodedURL(location)) {
        location = normalizeBinaryStringToUtf8(location);
      }
      location = new URL(location, responseURL(response));
    }
    if (location && !location.hash) {
      location.hash = requestFragment;
    }
    return location;
  }
  function isValidEncodedURL(url) {
    for (let i2 = 0;i2 < url.length; ++i2) {
      const code2 = url.charCodeAt(i2);
      if (code2 > 126 || code2 < 32) {
        return false;
      }
    }
    return true;
  }
  function normalizeBinaryStringToUtf8(value) {
    return Buffer.from(value, "binary").toString("utf8");
  }
  function requestCurrentURL(request) {
    return request.urlList[request.urlList.length - 1];
  }
  function requestBadPort(request) {
    const url = requestCurrentURL(request);
    if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
      return "blocked";
    }
    return "allowed";
  }
  function isErrorLike(object) {
    return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");
  }
  function isValidReasonPhrase(statusText) {
    for (let i2 = 0;i2 < statusText.length; ++i2) {
      const c = statusText.charCodeAt(i2);
      if (!(c === 9 || c >= 32 && c <= 126 || c >= 128 && c <= 255)) {
        return false;
      }
    }
    return true;
  }
  var isValidHeaderName = isValidHTTPToken;
  function isValidHeaderValue(potentialValue) {
    return (potentialValue[0] === "\t" || potentialValue[0] === " " || potentialValue[potentialValue.length - 1] === "\t" || potentialValue[potentialValue.length - 1] === " " || potentialValue.includes(`
`) || potentialValue.includes("\r") || potentialValue.includes("\x00")) === false;
  }
  function parseReferrerPolicy(actualResponse) {
    const policyHeader = (actualResponse.headersList.get("referrer-policy", true) ?? "").split(",");
    let policy = "";
    if (policyHeader.length) {
      for (let i2 = policyHeader.length;i2 !== 0; i2--) {
        const token = policyHeader[i2 - 1].trim();
        if (referrerPolicyTokens.has(token)) {
          policy = token;
          break;
        }
      }
    }
    return policy;
  }
  function setRequestReferrerPolicyOnRedirect(request, actualResponse) {
    const policy = parseReferrerPolicy(actualResponse);
    if (policy !== "") {
      request.referrerPolicy = policy;
    }
  }
  function crossOriginResourcePolicyCheck() {
    return "allowed";
  }
  function corsCheck() {
    return "success";
  }
  function TAOCheck() {
    return "success";
  }
  function appendFetchMetadata(httpRequest) {
    let header = null;
    header = httpRequest.mode;
    httpRequest.headersList.set("sec-fetch-mode", header, true);
  }
  function appendRequestOriginHeader(request) {
    let serializedOrigin = request.origin;
    if (serializedOrigin === "client" || serializedOrigin === undefined) {
      return;
    }
    if (request.responseTainting === "cors" || request.mode === "websocket") {
      request.headersList.append("origin", serializedOrigin, true);
    } else if (request.method !== "GET" && request.method !== "HEAD") {
      switch (request.referrerPolicy) {
        case "no-referrer":
          serializedOrigin = null;
          break;
        case "no-referrer-when-downgrade":
        case "strict-origin":
        case "strict-origin-when-cross-origin":
          if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
            serializedOrigin = null;
          }
          break;
        case "same-origin":
          if (!sameOrigin(request, requestCurrentURL(request))) {
            serializedOrigin = null;
          }
          break;
        default:
      }
      request.headersList.append("origin", serializedOrigin, true);
    }
  }
  function coarsenTime(timestamp, crossOriginIsolatedCapability) {
    return timestamp;
  }
  function clampAndCoarsenConnectionTimingInfo(connectionTimingInfo, defaultStartTime, crossOriginIsolatedCapability) {
    if (!connectionTimingInfo?.startTime || connectionTimingInfo.startTime < defaultStartTime) {
      return {
        domainLookupStartTime: defaultStartTime,
        domainLookupEndTime: defaultStartTime,
        connectionStartTime: defaultStartTime,
        connectionEndTime: defaultStartTime,
        secureConnectionStartTime: defaultStartTime,
        ALPNNegotiatedProtocol: connectionTimingInfo?.ALPNNegotiatedProtocol
      };
    }
    return {
      domainLookupStartTime: coarsenTime(connectionTimingInfo.domainLookupStartTime, crossOriginIsolatedCapability),
      domainLookupEndTime: coarsenTime(connectionTimingInfo.domainLookupEndTime, crossOriginIsolatedCapability),
      connectionStartTime: coarsenTime(connectionTimingInfo.connectionStartTime, crossOriginIsolatedCapability),
      connectionEndTime: coarsenTime(connectionTimingInfo.connectionEndTime, crossOriginIsolatedCapability),
      secureConnectionStartTime: coarsenTime(connectionTimingInfo.secureConnectionStartTime, crossOriginIsolatedCapability),
      ALPNNegotiatedProtocol: connectionTimingInfo.ALPNNegotiatedProtocol
    };
  }
  function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
    return coarsenTime(performance2.now(), crossOriginIsolatedCapability);
  }
  function createOpaqueTimingInfo(timingInfo) {
    return {
      startTime: timingInfo.startTime ?? 0,
      redirectStartTime: 0,
      redirectEndTime: 0,
      postRedirectStartTime: timingInfo.startTime ?? 0,
      finalServiceWorkerStartTime: 0,
      finalNetworkResponseStartTime: 0,
      finalNetworkRequestStartTime: 0,
      endTime: 0,
      encodedBodySize: 0,
      decodedBodySize: 0,
      finalConnectionTimingInfo: null
    };
  }
  function makePolicyContainer() {
    return {
      referrerPolicy: "strict-origin-when-cross-origin"
    };
  }
  function clonePolicyContainer(policyContainer) {
    return {
      referrerPolicy: policyContainer.referrerPolicy
    };
  }
  function determineRequestsReferrer(request) {
    const policy = request.referrerPolicy;
    assert(policy);
    let referrerSource = null;
    if (request.referrer === "client") {
      const globalOrigin = getGlobalOrigin();
      if (!globalOrigin || globalOrigin.origin === "null") {
        return "no-referrer";
      }
      referrerSource = new URL(globalOrigin);
    } else if (webidl.is.URL(request.referrer)) {
      referrerSource = request.referrer;
    }
    let referrerURL = stripURLForReferrer(referrerSource);
    const referrerOrigin = stripURLForReferrer(referrerSource, true);
    if (referrerURL.toString().length > 4096) {
      referrerURL = referrerOrigin;
    }
    switch (policy) {
      case "no-referrer":
        return "no-referrer";
      case "origin":
        if (referrerOrigin != null) {
          return referrerOrigin;
        }
        return stripURLForReferrer(referrerSource, true);
      case "unsafe-url":
        return referrerURL;
      case "strict-origin": {
        const currentURL = requestCurrentURL(request);
        if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
          return "no-referrer";
        }
        return referrerOrigin;
      }
      case "strict-origin-when-cross-origin": {
        const currentURL = requestCurrentURL(request);
        if (sameOrigin(referrerURL, currentURL)) {
          return referrerURL;
        }
        if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
          return "no-referrer";
        }
        return referrerOrigin;
      }
      case "same-origin":
        if (sameOrigin(request, referrerURL)) {
          return referrerURL;
        }
        return "no-referrer";
      case "origin-when-cross-origin":
        if (sameOrigin(request, referrerURL)) {
          return referrerURL;
        }
        return referrerOrigin;
      case "no-referrer-when-downgrade": {
        const currentURL = requestCurrentURL(request);
        if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
          return "no-referrer";
        }
        return referrerOrigin;
      }
    }
  }
  function stripURLForReferrer(url, originOnly = false) {
    assert(webidl.is.URL(url));
    url = new URL(url);
    if (urlIsLocal(url)) {
      return "no-referrer";
    }
    url.username = "";
    url.password = "";
    url.hash = "";
    if (originOnly === true) {
      url.pathname = "";
      url.search = "";
    }
    return url;
  }
  var potentialleTrustworthyIPv4RegExp = new RegExp("^(?:" + "(?:127\\.)" + "(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){2}" + "(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])" + ")$");
  var potentialleTrustworthyIPv6RegExp = new RegExp("^(?:" + "(?:(?:0{1,4}):){7}(?:(?:0{0,3}1))|" + "(?:(?:0{1,4}):){1,6}(?::(?:0{0,3}1))|" + "(?:::(?:0{0,3}1))|" + ")$");
  function isOriginIPPotentiallyTrustworthy(origin) {
    if (origin.includes(":")) {
      if (origin[0] === "[" && origin[origin.length - 1] === "]") {
        origin = origin.slice(1, -1);
      }
      return potentialleTrustworthyIPv6RegExp.test(origin);
    }
    return potentialleTrustworthyIPv4RegExp.test(origin);
  }
  function isOriginPotentiallyTrustworthy(origin) {
    if (origin == null || origin === "null") {
      return false;
    }
    origin = new URL(origin);
    if (origin.protocol === "https:" || origin.protocol === "wss:") {
      return true;
    }
    if (isOriginIPPotentiallyTrustworthy(origin.hostname)) {
      return true;
    }
    if (origin.hostname === "localhost" || origin.hostname === "localhost.") {
      return true;
    }
    if (origin.hostname.endsWith(".localhost") || origin.hostname.endsWith(".localhost.")) {
      return true;
    }
    if (origin.protocol === "file:") {
      return true;
    }
    return false;
  }
  function isURLPotentiallyTrustworthy(url) {
    if (!webidl.is.URL(url)) {
      return false;
    }
    if (url.href === "about:blank" || url.href === "about:srcdoc") {
      return true;
    }
    if (url.protocol === "data:")
      return true;
    if (url.protocol === "blob:")
      return true;
    return isOriginPotentiallyTrustworthy(url.origin);
  }
  function bytesMatch(bytes, metadataList) {
    if (crypto2 === undefined) {
      return true;
    }
    const parsedMetadata = parseMetadata(metadataList);
    if (parsedMetadata === "no metadata") {
      return true;
    }
    if (parsedMetadata.length === 0) {
      return true;
    }
    const strongest = getStrongestMetadata(parsedMetadata);
    const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
    for (const item of metadata) {
      const algorithm = item.algo;
      const expectedValue = item.hash;
      let actualValue = crypto2.createHash(algorithm).update(bytes).digest("base64");
      if (actualValue[actualValue.length - 1] === "=") {
        if (actualValue[actualValue.length - 2] === "=") {
          actualValue = actualValue.slice(0, -2);
        } else {
          actualValue = actualValue.slice(0, -1);
        }
      }
      if (compareBase64Mixed(actualValue, expectedValue)) {
        return true;
      }
    }
    return false;
  }
  var parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
  function parseMetadata(metadata) {
    const result2 = [];
    let empty = true;
    for (const token of metadata.split(" ")) {
      empty = false;
      const parsedToken = parseHashWithOptions.exec(token);
      if (parsedToken === null || parsedToken.groups === undefined || parsedToken.groups.algo === undefined) {
        continue;
      }
      const algorithm = parsedToken.groups.algo.toLowerCase();
      if (supportedHashes.includes(algorithm)) {
        result2.push(parsedToken.groups);
      }
    }
    if (empty === true) {
      return "no metadata";
    }
    return result2;
  }
  function getStrongestMetadata(metadataList) {
    let algorithm = metadataList[0].algo;
    if (algorithm[3] === "5") {
      return algorithm;
    }
    for (let i2 = 1;i2 < metadataList.length; ++i2) {
      const metadata = metadataList[i2];
      if (metadata.algo[3] === "5") {
        algorithm = "sha512";
        break;
      } else if (algorithm[3] === "3") {
        continue;
      } else if (metadata.algo[3] === "3") {
        algorithm = "sha384";
      }
    }
    return algorithm;
  }
  function filterMetadataListByAlgorithm(metadataList, algorithm) {
    if (metadataList.length === 1) {
      return metadataList;
    }
    let pos = 0;
    for (let i2 = 0;i2 < metadataList.length; ++i2) {
      if (metadataList[i2].algo === algorithm) {
        metadataList[pos++] = metadataList[i2];
      }
    }
    metadataList.length = pos;
    return metadataList;
  }
  function compareBase64Mixed(actualValue, expectedValue) {
    if (actualValue.length !== expectedValue.length) {
      return false;
    }
    for (let i2 = 0;i2 < actualValue.length; ++i2) {
      if (actualValue[i2] !== expectedValue[i2]) {
        if (actualValue[i2] === "+" && expectedValue[i2] === "-" || actualValue[i2] === "/" && expectedValue[i2] === "_") {
          continue;
        }
        return false;
      }
    }
    return true;
  }
  function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {}
  function sameOrigin(A, B) {
    if (A.origin === B.origin && A.origin === "null") {
      return true;
    }
    if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
      return true;
    }
    return false;
  }
  function createDeferredPromise() {
    let res;
    let rej;
    const promise = new Promise((resolve, reject) => {
      res = resolve;
      rej = reject;
    });
    return { promise, resolve: res, reject: rej };
  }
  function isAborted2(fetchParams) {
    return fetchParams.controller.state === "aborted";
  }
  function isCancelled(fetchParams) {
    return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
  }
  function normalizeMethod(method) {
    return normalizedMethodRecordsBase[method.toLowerCase()] ?? method;
  }
  function serializeJavascriptValueToJSONString(value) {
    const result2 = JSON.stringify(value);
    if (result2 === undefined) {
      throw new TypeError("Value is not JSON serializable");
    }
    assert(typeof result2 === "string");
    return result2;
  }
  var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
  function createIterator(name, kInternalIterator, keyIndex = 0, valueIndex = 1) {

    class FastIterableIterator {
      #target;
      #kind;
      #index;
      constructor(target, kind) {
        this.#target = target;
        this.#kind = kind;
        this.#index = 0;
      }
      next() {
        if (typeof this !== "object" || this === null || !(#target in this)) {
          throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
        }
        const index = this.#index;
        const values = kInternalIterator(this.#target);
        const len = values.length;
        if (index >= len) {
          return {
            value: undefined,
            done: true
          };
        }
        const { [keyIndex]: key, [valueIndex]: value } = values[index];
        this.#index = index + 1;
        let result2;
        switch (this.#kind) {
          case "key":
            result2 = key;
            break;
          case "value":
            result2 = value;
            break;
          case "key+value":
            result2 = [key, value];
            break;
        }
        return {
          value: result2,
          done: false
        };
      }
    }
    delete FastIterableIterator.prototype.constructor;
    Object.setPrototypeOf(FastIterableIterator.prototype, esIteratorPrototype);
    Object.defineProperties(FastIterableIterator.prototype, {
      [Symbol.toStringTag]: {
        writable: false,
        enumerable: false,
        configurable: true,
        value: `${name} Iterator`
      },
      next: { writable: true, enumerable: true, configurable: true }
    });
    return function(target, kind) {
      return new FastIterableIterator(target, kind);
    };
  }
  function iteratorMixin(name, object, kInternalIterator, keyIndex = 0, valueIndex = 1) {
    const makeIterator = createIterator(name, kInternalIterator, keyIndex, valueIndex);
    const properties = {
      keys: {
        writable: true,
        enumerable: true,
        configurable: true,
        value: function keys() {
          webidl.brandCheck(this, object);
          return makeIterator(this, "key");
        }
      },
      values: {
        writable: true,
        enumerable: true,
        configurable: true,
        value: function values() {
          webidl.brandCheck(this, object);
          return makeIterator(this, "value");
        }
      },
      entries: {
        writable: true,
        enumerable: true,
        configurable: true,
        value: function entries() {
          webidl.brandCheck(this, object);
          return makeIterator(this, "key+value");
        }
      },
      forEach: {
        writable: true,
        enumerable: true,
        configurable: true,
        value: function forEach(callbackfn, thisArg = globalThis) {
          webidl.brandCheck(this, object);
          webidl.argumentLengthCheck(arguments, 1, `${name}.forEach`);
          if (typeof callbackfn !== "function") {
            throw new TypeError(`Failed to execute 'forEach' on '${name}': parameter 1 is not of type 'Function'.`);
          }
          for (const { 0: key, 1: value } of makeIterator(this, "key+value")) {
            callbackfn.call(thisArg, value, key, this);
          }
        }
      }
    };
    return Object.defineProperties(object.prototype, {
      ...properties,
      [Symbol.iterator]: {
        writable: true,
        enumerable: false,
        configurable: true,
        value: properties.entries.value
      }
    });
  }
  function fullyReadBody(body, processBody, processBodyError) {
    const successSteps = processBody;
    const errorSteps = processBodyError;
    let reader;
    try {
      reader = body.stream.getReader();
    } catch (e) {
      errorSteps(e);
      return;
    }
    readAllBytes(reader, successSteps, errorSteps);
  }
  function readableStreamClose(controller) {
    try {
      controller.close();
      controller.byobRequest?.respond(0);
    } catch (err2) {
      if (!err2.message.includes("Controller is already closed") && !err2.message.includes("ReadableStream is already closed")) {
        throw err2;
      }
    }
  }
  var invalidIsomorphicEncodeValueRegex = /[^\x00-\xFF]/;
  function isomorphicEncode(input) {
    assert(!invalidIsomorphicEncodeValueRegex.test(input));
    return input;
  }
  async function readAllBytes(reader, successSteps, failureSteps) {
    const bytes = [];
    let byteLength = 0;
    try {
      do {
        const { done, value: chunk } = await reader.read();
        if (done) {
          successSteps(Buffer.concat(bytes, byteLength));
          return;
        }
        if (!isUint8Array(chunk)) {
          failureSteps(TypeError("Received non-Uint8Array chunk"));
          return;
        }
        bytes.push(chunk);
        byteLength += chunk.length;
      } while (true);
    } catch (e) {
      failureSteps(e);
    }
  }
  function urlIsLocal(url) {
    assert("protocol" in url);
    const protocol = url.protocol;
    return protocol === "about:" || protocol === "blob:" || protocol === "data:";
  }
  function urlHasHttpsScheme(url) {
    return typeof url === "string" && url[5] === ":" && url[0] === "h" && url[1] === "t" && url[2] === "t" && url[3] === "p" && url[4] === "s" || url.protocol === "https:";
  }
  function urlIsHttpHttpsScheme(url) {
    assert("protocol" in url);
    const protocol = url.protocol;
    return protocol === "http:" || protocol === "https:";
  }
  function simpleRangeHeaderValue(value, allowWhitespace) {
    const data = value;
    if (!data.startsWith("bytes")) {
      return "failure";
    }
    const position = { position: 5 };
    if (allowWhitespace) {
      collectASequenceOfCodePoints((char) => char === "\t" || char === " ", data, position);
    }
    if (data.charCodeAt(position.position) !== 61) {
      return "failure";
    }
    position.position++;
    if (allowWhitespace) {
      collectASequenceOfCodePoints((char) => char === "\t" || char === " ", data, position);
    }
    const rangeStart = collectASequenceOfCodePoints((char) => {
      const code2 = char.charCodeAt(0);
      return code2 >= 48 && code2 <= 57;
    }, data, position);
    const rangeStartValue = rangeStart.length ? Number(rangeStart) : null;
    if (allowWhitespace) {
      collectASequenceOfCodePoints((char) => char === "\t" || char === " ", data, position);
    }
    if (data.charCodeAt(position.position) !== 45) {
      return "failure";
    }
    position.position++;
    if (allowWhitespace) {
      collectASequenceOfCodePoints((char) => char === "\t" || char === " ", data, position);
    }
    const rangeEnd = collectASequenceOfCodePoints((char) => {
      const code2 = char.charCodeAt(0);
      return code2 >= 48 && code2 <= 57;
    }, data, position);
    const rangeEndValue = rangeEnd.length ? Number(rangeEnd) : null;
    if (position.position < data.length) {
      return "failure";
    }
    if (rangeEndValue === null && rangeStartValue === null) {
      return "failure";
    }
    if (rangeStartValue > rangeEndValue) {
      return "failure";
    }
    return { rangeStartValue, rangeEndValue };
  }
  function buildContentRange(rangeStart, rangeEnd, fullLength) {
    let contentRange = "bytes ";
    contentRange += isomorphicEncode(`${rangeStart}`);
    contentRange += "-";
    contentRange += isomorphicEncode(`${rangeEnd}`);
    contentRange += "/";
    contentRange += isomorphicEncode(`${fullLength}`);
    return contentRange;
  }

  class InflateStream extends Transform {
    #zlibOptions;
    constructor(zlibOptions) {
      super();
      this.#zlibOptions = zlibOptions;
    }
    _transform(chunk, encoding, callback) {
      if (!this._inflateStream) {
        if (chunk.length === 0) {
          callback();
          return;
        }
        this._inflateStream = (chunk[0] & 15) === 8 ? zlib.createInflate(this.#zlibOptions) : zlib.createInflateRaw(this.#zlibOptions);
        this._inflateStream.on("data", this.push.bind(this));
        this._inflateStream.on("end", () => this.push(null));
        this._inflateStream.on("error", (err2) => this.destroy(err2));
      }
      this._inflateStream.write(chunk, encoding, callback);
    }
    _final(callback) {
      if (this._inflateStream) {
        this._inflateStream.end();
        this._inflateStream = null;
      }
      callback();
    }
  }
  function createInflate(zlibOptions) {
    return new InflateStream(zlibOptions);
  }
  function extractMimeType(headers) {
    let charset = null;
    let essence = null;
    let mimeType = null;
    const values = getDecodeSplit("content-type", headers);
    if (values === null) {
      return "failure";
    }
    for (const value of values) {
      const temporaryMimeType = parseMIMEType(value);
      if (temporaryMimeType === "failure" || temporaryMimeType.essence === "*/*") {
        continue;
      }
      mimeType = temporaryMimeType;
      if (mimeType.essence !== essence) {
        charset = null;
        if (mimeType.parameters.has("charset")) {
          charset = mimeType.parameters.get("charset");
        }
        essence = mimeType.essence;
      } else if (!mimeType.parameters.has("charset") && charset !== null) {
        mimeType.parameters.set("charset", charset);
      }
    }
    if (mimeType == null) {
      return "failure";
    }
    return mimeType;
  }
  function gettingDecodingSplitting(value) {
    const input = value;
    const position = { position: 0 };
    const values = [];
    let temporaryValue = "";
    while (position.position < input.length) {
      temporaryValue += collectASequenceOfCodePoints((char) => char !== '"' && char !== ",", input, position);
      if (position.position < input.length) {
        if (input.charCodeAt(position.position) === 34) {
          temporaryValue += collectAnHTTPQuotedString(input, position);
          if (position.position < input.length) {
            continue;
          }
        } else {
          assert(input.charCodeAt(position.position) === 44);
          position.position++;
        }
      }
      temporaryValue = removeChars(temporaryValue, true, true, (char) => char === 9 || char === 32);
      values.push(temporaryValue);
      temporaryValue = "";
    }
    return values;
  }
  function getDecodeSplit(name, list) {
    const value = list.get(name, true);
    if (value === null) {
      return null;
    }
    return gettingDecodingSplitting(value);
  }
  var textDecoder = new TextDecoder;
  function utf8DecodeBytes(buffer) {
    if (buffer.length === 0) {
      return "";
    }
    if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {
      buffer = buffer.subarray(3);
    }
    const output = textDecoder.decode(buffer);
    return output;
  }

  class EnvironmentSettingsObjectBase {
    get baseUrl() {
      return getGlobalOrigin();
    }
    get origin() {
      return this.baseUrl?.origin;
    }
    policyContainer = makePolicyContainer();
  }

  class EnvironmentSettingsObject {
    settingsObject = new EnvironmentSettingsObjectBase;
  }
  var environmentSettingsObject = new EnvironmentSettingsObject;
  module2.exports = {
    isAborted: isAborted2,
    isCancelled,
    isValidEncodedURL,
    createDeferredPromise,
    ReadableStreamFrom,
    tryUpgradeRequestToAPotentiallyTrustworthyURL,
    clampAndCoarsenConnectionTimingInfo,
    coarsenedSharedCurrentTime,
    determineRequestsReferrer,
    makePolicyContainer,
    clonePolicyContainer,
    appendFetchMetadata,
    appendRequestOriginHeader,
    TAOCheck,
    corsCheck,
    crossOriginResourcePolicyCheck,
    createOpaqueTimingInfo,
    setRequestReferrerPolicyOnRedirect,
    isValidHTTPToken,
    requestBadPort,
    requestCurrentURL,
    responseURL,
    responseLocationURL,
    isURLPotentiallyTrustworthy,
    isValidReasonPhrase,
    sameOrigin,
    normalizeMethod,
    serializeJavascriptValueToJSONString,
    iteratorMixin,
    createIterator,
    isValidHeaderName,
    isValidHeaderValue,
    isErrorLike,
    fullyReadBody,
    bytesMatch,
    readableStreamClose,
    isomorphicEncode,
    urlIsLocal,
    urlHasHttpsScheme,
    urlIsHttpHttpsScheme,
    readAllBytes,
    simpleRangeHeaderValue,
    buildContentRange,
    parseMetadata,
    createInflate,
    extractMimeType,
    getDecodeSplit,
    utf8DecodeBytes,
    environmentSettingsObject,
    isOriginIPPotentiallyTrustworthy
  };
});

// node_modules/undici/lib/web/fetch/formdata.js
var require_formdata = __commonJS((exports2, module2) => {
  var { iteratorMixin } = require_util2();
  var { kEnumerableProperty } = require_util();
  var { webidl } = require_webidl();
  var { File: NativeFile } = require("node:buffer");
  var nodeUtil = require("node:util");
  var File2 = globalThis.File ?? NativeFile;

  class FormData {
    #state = [];
    constructor(form) {
      webidl.util.markAsUncloneable(this);
      if (form !== undefined) {
        throw webidl.errors.conversionFailed({
          prefix: "FormData constructor",
          argument: "Argument 1",
          types: ["undefined"]
        });
      }
    }
    append(name, value, filename = undefined) {
      webidl.brandCheck(this, FormData);
      const prefix = "FormData.append";
      webidl.argumentLengthCheck(arguments, 2, prefix);
      name = webidl.converters.USVString(name);
      if (arguments.length === 3 || webidl.is.Blob(value)) {
        value = webidl.converters.Blob(value, prefix, "value");
        if (filename !== undefined) {
          filename = webidl.converters.USVString(filename);
        }
      } else {
        value = webidl.converters.USVString(value);
      }
      const entry = makeEntry(name, value, filename);
      this.#state.push(entry);
    }
    delete(name) {
      webidl.brandCheck(this, FormData);
      const prefix = "FormData.delete";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      name = webidl.converters.USVString(name);
      this.#state = this.#state.filter((entry) => entry.name !== name);
    }
    get(name) {
      webidl.brandCheck(this, FormData);
      const prefix = "FormData.get";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      name = webidl.converters.USVString(name);
      const idx = this.#state.findIndex((entry) => entry.name === name);
      if (idx === -1) {
        return null;
      }
      return this.#state[idx].value;
    }
    getAll(name) {
      webidl.brandCheck(this, FormData);
      const prefix = "FormData.getAll";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      name = webidl.converters.USVString(name);
      return this.#state.filter((entry) => entry.name === name).map((entry) => entry.value);
    }
    has(name) {
      webidl.brandCheck(this, FormData);
      const prefix = "FormData.has";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      name = webidl.converters.USVString(name);
      return this.#state.findIndex((entry) => entry.name === name) !== -1;
    }
    set(name, value, filename = undefined) {
      webidl.brandCheck(this, FormData);
      const prefix = "FormData.set";
      webidl.argumentLengthCheck(arguments, 2, prefix);
      name = webidl.converters.USVString(name);
      if (arguments.length === 3 || webidl.is.Blob(value)) {
        value = webidl.converters.Blob(value, prefix, "value");
        if (filename !== undefined) {
          filename = webidl.converters.USVString(filename);
        }
      } else {
        value = webidl.converters.USVString(value);
      }
      const entry = makeEntry(name, value, filename);
      const idx = this.#state.findIndex((entry2) => entry2.name === name);
      if (idx !== -1) {
        this.#state = [
          ...this.#state.slice(0, idx),
          entry,
          ...this.#state.slice(idx + 1).filter((entry2) => entry2.name !== name)
        ];
      } else {
        this.#state.push(entry);
      }
    }
    [nodeUtil.inspect.custom](depth, options) {
      const state = this.#state.reduce((a, b) => {
        if (a[b.name]) {
          if (Array.isArray(a[b.name])) {
            a[b.name].push(b.value);
          } else {
            a[b.name] = [a[b.name], b.value];
          }
        } else {
          a[b.name] = b.value;
        }
        return a;
      }, { __proto__: null });
      options.depth ??= depth;
      options.colors ??= true;
      const output = nodeUtil.formatWithOptions(options, state);
      return `FormData ${output.slice(output.indexOf("]") + 2)}`;
    }
    static getFormDataState(formData) {
      return formData.#state;
    }
    static setFormDataState(formData, newState) {
      formData.#state = newState;
    }
  }
  var { getFormDataState, setFormDataState } = FormData;
  Reflect.deleteProperty(FormData, "getFormDataState");
  Reflect.deleteProperty(FormData, "setFormDataState");
  iteratorMixin("FormData", FormData, getFormDataState, "name", "value");
  Object.defineProperties(FormData.prototype, {
    append: kEnumerableProperty,
    delete: kEnumerableProperty,
    get: kEnumerableProperty,
    getAll: kEnumerableProperty,
    has: kEnumerableProperty,
    set: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "FormData",
      configurable: true
    }
  });
  function makeEntry(name, value, filename) {
    if (typeof value === "string") {} else {
      if (!webidl.is.File(value)) {
        value = new File2([value], "blob", { type: value.type });
      }
      if (filename !== undefined) {
        const options = {
          type: value.type,
          lastModified: value.lastModified
        };
        value = new File2([value], filename, options);
      }
    }
    return { name, value };
  }
  webidl.is.FormData = webidl.util.MakeTypeAssertion(FormData);
  module2.exports = { FormData, makeEntry, setFormDataState };
});

// node_modules/undici/lib/web/fetch/formdata-parser.js
var require_formdata_parser = __commonJS((exports2, module2) => {
  var { isUSVString, bufferToLowerCasedHeaderName } = require_util();
  var { utf8DecodeBytes } = require_util2();
  var { HTTP_TOKEN_CODEPOINTS, isomorphicDecode } = require_data_url();
  var { makeEntry } = require_formdata();
  var { webidl } = require_webidl();
  var assert = require("node:assert");
  var { File: NodeFile } = require("node:buffer");
  var File2 = globalThis.File ?? NodeFile;
  var formDataNameBuffer = Buffer.from('form-data; name="');
  var filenameBuffer = Buffer.from("filename");
  var dd = Buffer.from("--");
  var ddcrlf = Buffer.from(`--\r
`);
  function isAsciiString(chars) {
    for (let i2 = 0;i2 < chars.length; ++i2) {
      if ((chars.charCodeAt(i2) & ~127) !== 0) {
        return false;
      }
    }
    return true;
  }
  function validateBoundary(boundary) {
    const length = boundary.length;
    if (length < 27 || length > 70) {
      return false;
    }
    for (let i2 = 0;i2 < length; ++i2) {
      const cp = boundary.charCodeAt(i2);
      if (!(cp >= 48 && cp <= 57 || cp >= 65 && cp <= 90 || cp >= 97 && cp <= 122 || cp === 39 || cp === 45 || cp === 95)) {
        return false;
      }
    }
    return true;
  }
  function multipartFormDataParser(input, mimeType) {
    assert(mimeType !== "failure" && mimeType.essence === "multipart/form-data");
    const boundaryString = mimeType.parameters.get("boundary");
    if (boundaryString === undefined) {
      throw parsingError("missing boundary in content-type header");
    }
    const boundary = Buffer.from(`--${boundaryString}`, "utf8");
    const entryList = [];
    const position = { position: 0 };
    while (input[position.position] === 13 && input[position.position + 1] === 10) {
      position.position += 2;
    }
    let trailing = input.length;
    while (input[trailing - 1] === 10 && input[trailing - 2] === 13) {
      trailing -= 2;
    }
    if (trailing !== input.length) {
      input = input.subarray(0, trailing);
    }
    while (true) {
      if (input.subarray(position.position, position.position + boundary.length).equals(boundary)) {
        position.position += boundary.length;
      } else {
        throw parsingError("expected a value starting with -- and the boundary");
      }
      if (position.position === input.length - 2 && bufferStartsWith(input, dd, position) || position.position === input.length - 4 && bufferStartsWith(input, ddcrlf, position)) {
        return entryList;
      }
      if (input[position.position] !== 13 || input[position.position + 1] !== 10) {
        throw parsingError("expected CRLF");
      }
      position.position += 2;
      const result2 = parseMultipartFormDataHeaders(input, position);
      let { name, filename, contentType: contentType3, encoding } = result2;
      position.position += 2;
      let body;
      {
        const boundaryIndex = input.indexOf(boundary.subarray(2), position.position);
        if (boundaryIndex === -1) {
          throw parsingError("expected boundary after body");
        }
        body = input.subarray(position.position, boundaryIndex - 4);
        position.position += body.length;
        if (encoding === "base64") {
          body = Buffer.from(body.toString(), "base64");
        }
      }
      if (input[position.position] !== 13 || input[position.position + 1] !== 10) {
        throw parsingError("expected CRLF");
      } else {
        position.position += 2;
      }
      let value;
      if (filename !== null) {
        contentType3 ??= "text/plain";
        if (!isAsciiString(contentType3)) {
          contentType3 = "";
        }
        value = new File2([body], filename, { type: contentType3 });
      } else {
        value = utf8DecodeBytes(Buffer.from(body));
      }
      assert(isUSVString(name));
      assert(typeof value === "string" && isUSVString(value) || webidl.is.File(value));
      entryList.push(makeEntry(name, value, filename));
    }
  }
  function parseMultipartFormDataHeaders(input, position) {
    let name = null;
    let filename = null;
    let contentType3 = null;
    let encoding = null;
    while (true) {
      if (input[position.position] === 13 && input[position.position + 1] === 10) {
        if (name === null) {
          throw parsingError("header name is null");
        }
        return { name, filename, contentType: contentType3, encoding };
      }
      let headerName = collectASequenceOfBytes((char) => char !== 10 && char !== 13 && char !== 58, input, position);
      headerName = removeChars(headerName, true, true, (char) => char === 9 || char === 32);
      if (!HTTP_TOKEN_CODEPOINTS.test(headerName.toString())) {
        throw parsingError("header name does not match the field-name token production");
      }
      if (input[position.position] !== 58) {
        throw parsingError("expected :");
      }
      position.position++;
      collectASequenceOfBytes((char) => char === 32 || char === 9, input, position);
      switch (bufferToLowerCasedHeaderName(headerName)) {
        case "content-disposition": {
          name = filename = null;
          if (!bufferStartsWith(input, formDataNameBuffer, position)) {
            throw parsingError('expected form-data; name=" for content-disposition header');
          }
          position.position += 17;
          name = parseMultipartFormDataName(input, position);
          if (input[position.position] === 59 && input[position.position + 1] === 32) {
            const at = { position: position.position + 2 };
            if (bufferStartsWith(input, filenameBuffer, at)) {
              if (input[at.position + 8] === 42) {
                at.position += 10;
                collectASequenceOfBytes((char) => char === 32 || char === 9, input, at);
                const headerValue = collectASequenceOfBytes((char) => char !== 32 && char !== 13 && char !== 10, input, at);
                if (headerValue[0] !== 117 && headerValue[0] !== 85 || headerValue[1] !== 116 && headerValue[1] !== 84 || headerValue[2] !== 102 && headerValue[2] !== 70 || headerValue[3] !== 45 || headerValue[4] !== 56) {
                  throw parsingError("unknown encoding, expected utf-8''");
                }
                filename = decodeURIComponent(new TextDecoder().decode(headerValue.subarray(7)));
                position.position = at.position;
              } else {
                position.position += 11;
                collectASequenceOfBytes((char) => char === 32 || char === 9, input, position);
                position.position++;
                filename = parseMultipartFormDataName(input, position);
              }
            }
          }
          break;
        }
        case "content-type": {
          let headerValue = collectASequenceOfBytes((char) => char !== 10 && char !== 13, input, position);
          headerValue = removeChars(headerValue, false, true, (char) => char === 9 || char === 32);
          contentType3 = isomorphicDecode(headerValue);
          break;
        }
        case "content-transfer-encoding": {
          let headerValue = collectASequenceOfBytes((char) => char !== 10 && char !== 13, input, position);
          headerValue = removeChars(headerValue, false, true, (char) => char === 9 || char === 32);
          encoding = isomorphicDecode(headerValue);
          break;
        }
        default: {
          collectASequenceOfBytes((char) => char !== 10 && char !== 13, input, position);
        }
      }
      if (input[position.position] !== 13 && input[position.position + 1] !== 10) {
        throw parsingError("expected CRLF");
      } else {
        position.position += 2;
      }
    }
  }
  function parseMultipartFormDataName(input, position) {
    assert(input[position.position - 1] === 34);
    let name = collectASequenceOfBytes((char) => char !== 10 && char !== 13 && char !== 34, input, position);
    if (input[position.position] !== 34) {
      throw parsingError('expected "');
    } else {
      position.position++;
    }
    name = new TextDecoder().decode(name).replace(/%0A/ig, `
`).replace(/%0D/ig, "\r").replace(/%22/g, '"');
    return name;
  }
  function collectASequenceOfBytes(condition, input, position) {
    let start = position.position;
    while (start < input.length && condition(input[start])) {
      ++start;
    }
    return input.subarray(position.position, position.position = start);
  }
  function removeChars(buf, leading, trailing, predicate) {
    let lead = 0;
    let trail = buf.length - 1;
    if (leading) {
      while (lead < buf.length && predicate(buf[lead]))
        lead++;
    }
    if (trailing) {
      while (trail > 0 && predicate(buf[trail]))
        trail--;
    }
    return lead === 0 && trail === buf.length - 1 ? buf : buf.subarray(lead, trail + 1);
  }
  function bufferStartsWith(buffer, start, position) {
    if (buffer.length < start.length) {
      return false;
    }
    for (let i2 = 0;i2 < start.length; i2++) {
      if (start[i2] !== buffer[position.position + i2]) {
        return false;
      }
    }
    return true;
  }
  function parsingError(cause) {
    return new TypeError("Failed to parse body as FormData.", { cause: new TypeError(cause) });
  }
  module2.exports = {
    multipartFormDataParser,
    validateBoundary
  };
});

// node_modules/undici/lib/web/fetch/body.js
var require_body = __commonJS((exports2, module2) => {
  var util2 = require_util();
  var {
    ReadableStreamFrom,
    readableStreamClose,
    createDeferredPromise,
    fullyReadBody,
    extractMimeType,
    utf8DecodeBytes
  } = require_util2();
  var { FormData, setFormDataState } = require_formdata();
  var { webidl } = require_webidl();
  var { Blob: Blob2 } = require("node:buffer");
  var assert = require("node:assert");
  var { isErrored, isDisturbed } = require("node:stream");
  var { isArrayBuffer } = require("node:util/types");
  var { serializeAMimeType } = require_data_url();
  var { multipartFormDataParser } = require_formdata_parser();
  var random;
  try {
    const crypto2 = require("node:crypto");
    random = (max2) => crypto2.randomInt(0, max2);
  } catch {
    random = (max2) => Math.floor(Math.random() * max2);
  }
  var textEncoder = new TextEncoder;
  function noop() {}
  var hasFinalizationRegistry = globalThis.FinalizationRegistry && process.version.indexOf("v18") !== 0;
  var streamRegistry;
  if (hasFinalizationRegistry) {
    streamRegistry = new FinalizationRegistry((weakRef) => {
      const stream = weakRef.deref();
      if (stream && !stream.locked && !isDisturbed(stream) && !isErrored(stream)) {
        stream.cancel("Response object has been garbage collected").catch(noop);
      }
    });
  }
  function extractBody(object, keepalive = false) {
    let stream = null;
    if (webidl.is.ReadableStream(object)) {
      stream = object;
    } else if (webidl.is.Blob(object)) {
      stream = object.stream();
    } else {
      stream = new ReadableStream({
        async pull(controller) {
          const buffer = typeof source === "string" ? textEncoder.encode(source) : source;
          if (buffer.byteLength) {
            controller.enqueue(buffer);
          }
          queueMicrotask(() => readableStreamClose(controller));
        },
        start() {},
        type: "bytes"
      });
    }
    assert(webidl.is.ReadableStream(stream));
    let action = null;
    let source = null;
    let length = null;
    let type = null;
    if (typeof object === "string") {
      source = object;
      type = "text/plain;charset=UTF-8";
    } else if (webidl.is.URLSearchParams(object)) {
      source = object.toString();
      type = "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isArrayBuffer(object)) {
      source = new Uint8Array(object.slice());
    } else if (ArrayBuffer.isView(object)) {
      source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
    } else if (webidl.is.FormData(object)) {
      const boundary = `----formdata-undici-0${`${random(100000000000)}`.padStart(11, "0")}`;
      const prefix = `--${boundary}\r
Content-Disposition: form-data`;
      /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
      const escape = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
      const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, `\r
`);
      const blobParts = [];
      const rn = new Uint8Array([13, 10]);
      length = 0;
      let hasUnknownSizeValue = false;
      for (const [name, value] of object) {
        if (typeof value === "string") {
          const chunk2 = textEncoder.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"` + `\r
\r
${normalizeLinefeeds(value)}\r
`);
          blobParts.push(chunk2);
          length += chunk2.byteLength;
        } else {
          const chunk2 = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + `\r
` + `Content-Type: ${value.type || "application/octet-stream"}\r
\r
`);
          blobParts.push(chunk2, value, rn);
          if (typeof value.size === "number") {
            length += chunk2.byteLength + value.size + rn.byteLength;
          } else {
            hasUnknownSizeValue = true;
          }
        }
      }
      const chunk = textEncoder.encode(`--${boundary}--\r
`);
      blobParts.push(chunk);
      length += chunk.byteLength;
      if (hasUnknownSizeValue) {
        length = null;
      }
      source = object;
      action = async function* () {
        for (const part of blobParts) {
          if (part.stream) {
            yield* part.stream();
          } else {
            yield part;
          }
        }
      };
      type = `multipart/form-data; boundary=${boundary}`;
    } else if (webidl.is.Blob(object)) {
      source = object;
      length = object.size;
      if (object.type) {
        type = object.type;
      }
    } else if (typeof object[Symbol.asyncIterator] === "function") {
      if (keepalive) {
        throw new TypeError("keepalive");
      }
      if (util2.isDisturbed(object) || object.locked) {
        throw new TypeError("Response body object should not be disturbed or locked");
      }
      stream = webidl.is.ReadableStream(object) ? object : ReadableStreamFrom(object);
    }
    if (typeof source === "string" || util2.isBuffer(source)) {
      length = Buffer.byteLength(source);
    }
    if (action != null) {
      let iterator;
      stream = new ReadableStream({
        async start() {
          iterator = action(object)[Symbol.asyncIterator]();
        },
        async pull(controller) {
          const { value, done } = await iterator.next();
          if (done) {
            queueMicrotask(() => {
              controller.close();
              controller.byobRequest?.respond(0);
            });
          } else {
            if (!isErrored(stream)) {
              const buffer = new Uint8Array(value);
              if (buffer.byteLength) {
                controller.enqueue(buffer);
              }
            }
          }
          return controller.desiredSize > 0;
        },
        async cancel(reason) {
          await iterator.return();
        },
        type: "bytes"
      });
    }
    const body = { stream, source, length };
    return [body, type];
  }
  function safelyExtractBody(object, keepalive = false) {
    if (webidl.is.ReadableStream(object)) {
      assert(!util2.isDisturbed(object), "The body has already been consumed.");
      assert(!object.locked, "The stream is locked.");
    }
    return extractBody(object, keepalive);
  }
  function cloneBody(instance, body) {
    const [out1, out2] = body.stream.tee();
    if (hasFinalizationRegistry) {
      streamRegistry.register(instance, new WeakRef(out1));
    }
    body.stream = out1;
    return {
      stream: out2,
      length: body.length,
      source: body.source
    };
  }
  function throwIfAborted(state) {
    if (state.aborted) {
      throw new DOMException("The operation was aborted.", "AbortError");
    }
  }
  function bodyMixinMethods(instance, getInternalState) {
    const methods = {
      blob() {
        return consumeBody(this, (bytes) => {
          let mimeType = bodyMimeType(getInternalState(this));
          if (mimeType === null) {
            mimeType = "";
          } else if (mimeType) {
            mimeType = serializeAMimeType(mimeType);
          }
          return new Blob2([bytes], { type: mimeType });
        }, instance, getInternalState);
      },
      arrayBuffer() {
        return consumeBody(this, (bytes) => {
          return new Uint8Array(bytes).buffer;
        }, instance, getInternalState);
      },
      text() {
        return consumeBody(this, utf8DecodeBytes, instance, getInternalState);
      },
      json() {
        return consumeBody(this, parseJSONFromBytes, instance, getInternalState);
      },
      formData() {
        return consumeBody(this, (value) => {
          const mimeType = bodyMimeType(getInternalState(this));
          if (mimeType !== null) {
            switch (mimeType.essence) {
              case "multipart/form-data": {
                const parsed = multipartFormDataParser(value, mimeType);
                const fd2 = new FormData;
                setFormDataState(fd2, parsed);
                return fd2;
              }
              case "application/x-www-form-urlencoded": {
                const entries = new URLSearchParams(value.toString());
                const fd2 = new FormData;
                for (const [name, value2] of entries) {
                  fd2.append(name, value2);
                }
                return fd2;
              }
            }
          }
          throw new TypeError('Content-Type was not one of "multipart/form-data" or "application/x-www-form-urlencoded".');
        }, instance, getInternalState);
      },
      bytes() {
        return consumeBody(this, (bytes) => {
          return new Uint8Array(bytes);
        }, instance, getInternalState);
      }
    };
    return methods;
  }
  function mixinBody(prototype, getInternalState) {
    Object.assign(prototype.prototype, bodyMixinMethods(prototype, getInternalState));
  }
  async function consumeBody(object, convertBytesToJSValue, instance, getInternalState) {
    webidl.brandCheck(object, instance);
    const state = getInternalState(object);
    if (bodyUnusable(state)) {
      throw new TypeError("Body is unusable: Body has already been read");
    }
    throwIfAborted(state);
    const promise = createDeferredPromise();
    const errorSteps = (error) => promise.reject(error);
    const successSteps = (data) => {
      try {
        promise.resolve(convertBytesToJSValue(data));
      } catch (e) {
        errorSteps(e);
      }
    };
    if (state.body == null) {
      successSteps(Buffer.allocUnsafe(0));
      return promise.promise;
    }
    fullyReadBody(state.body, successSteps, errorSteps);
    return promise.promise;
  }
  function bodyUnusable(object) {
    const body = object.body;
    return body != null && (body.stream.locked || util2.isDisturbed(body.stream));
  }
  function parseJSONFromBytes(bytes) {
    return JSON.parse(utf8DecodeBytes(bytes));
  }
  function bodyMimeType(requestOrResponse) {
    const headers = requestOrResponse.headersList;
    const mimeType = extractMimeType(headers);
    if (mimeType === "failure") {
      return null;
    }
    return mimeType;
  }
  module2.exports = {
    extractBody,
    safelyExtractBody,
    cloneBody,
    mixinBody,
    streamRegistry,
    hasFinalizationRegistry,
    bodyUnusable
  };
});

// node_modules/undici/lib/dispatcher/client-h1.js
var require_client_h1 = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var util2 = require_util();
  var { channels } = require_diagnostics();
  var timers = require_timers();
  var {
    RequestContentLengthMismatchError,
    ResponseContentLengthMismatchError,
    RequestAbortedError,
    HeadersTimeoutError,
    HeadersOverflowError,
    SocketError,
    InformationalError,
    BodyTimeoutError,
    HTTPParserError,
    ResponseExceededMaxSizeError
  } = require_errors();
  var {
    kUrl,
    kReset,
    kClient,
    kParser,
    kBlocking,
    kRunning,
    kPending,
    kSize,
    kWriting,
    kQueue,
    kNoRef,
    kKeepAliveDefaultTimeout,
    kHostHeader,
    kPendingIdx,
    kRunningIdx,
    kError,
    kPipelining,
    kSocket,
    kKeepAliveTimeoutValue,
    kMaxHeadersSize,
    kKeepAliveMaxTimeout,
    kKeepAliveTimeoutThreshold,
    kHeadersTimeout,
    kBodyTimeout,
    kStrictContentLength,
    kMaxRequests,
    kCounter,
    kMaxResponseSize,
    kOnError,
    kResume,
    kHTTPContext,
    kClosed
  } = require_symbols();
  var constants = require_constants2();
  var EMPTY_BUF = Buffer.alloc(0);
  var FastBuffer = Buffer[Symbol.species];
  var removeAllListeners = util2.removeAllListeners;
  var extractBody;
  async function lazyllhttp() {
    const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : undefined;
    let mod;
    try {
      mod = await WebAssembly.compile(require_llhttp_simd_wasm());
    } catch (e) {
      mod = await WebAssembly.compile(llhttpWasmData || require_llhttp_wasm());
    }
    return await WebAssembly.instantiate(mod, {
      env: {
        wasm_on_url: (p, at, len) => {
          return 0;
        },
        wasm_on_status: (p, at, len) => {
          assert(currentParser.ptr === p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len));
        },
        wasm_on_message_begin: (p) => {
          assert(currentParser.ptr === p);
          return currentParser.onMessageBegin();
        },
        wasm_on_header_field: (p, at, len) => {
          assert(currentParser.ptr === p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len));
        },
        wasm_on_header_value: (p, at, len) => {
          assert(currentParser.ptr === p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len));
        },
        wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
          assert(currentParser.ptr === p);
          return currentParser.onHeadersComplete(statusCode, upgrade === 1, shouldKeepAlive === 1);
        },
        wasm_on_body: (p, at, len) => {
          assert(currentParser.ptr === p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len));
        },
        wasm_on_message_complete: (p) => {
          assert(currentParser.ptr === p);
          return currentParser.onMessageComplete();
        }
      }
    });
  }
  var llhttpInstance = null;
  var llhttpPromise = lazyllhttp();
  llhttpPromise.catch();
  var currentParser = null;
  var currentBufferRef = null;
  var currentBufferSize = 0;
  var currentBufferPtr = null;
  var USE_NATIVE_TIMER = 0;
  var USE_FAST_TIMER = 1;
  var TIMEOUT_HEADERS = 2 | USE_FAST_TIMER;
  var TIMEOUT_BODY = 4 | USE_FAST_TIMER;
  var TIMEOUT_KEEP_ALIVE = 8 | USE_NATIVE_TIMER;

  class Parser {
    constructor(client, socket, { exports: exports3 }) {
      this.llhttp = exports3;
      this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
      this.client = client;
      this.socket = socket;
      this.timeout = null;
      this.timeoutValue = null;
      this.timeoutType = null;
      this.statusCode = 0;
      this.statusText = "";
      this.upgrade = false;
      this.headers = [];
      this.headersSize = 0;
      this.headersMaxSize = client[kMaxHeadersSize];
      this.shouldKeepAlive = false;
      this.paused = false;
      this.resume = this.resume.bind(this);
      this.bytesRead = 0;
      this.keepAlive = "";
      this.contentLength = "";
      this.connection = "";
      this.maxResponseSize = client[kMaxResponseSize];
    }
    setTimeout(delay, type) {
      if (delay !== this.timeoutValue || type & USE_FAST_TIMER ^ this.timeoutType & USE_FAST_TIMER) {
        if (this.timeout) {
          timers.clearTimeout(this.timeout);
          this.timeout = null;
        }
        if (delay) {
          if (type & USE_FAST_TIMER) {
            this.timeout = timers.setFastTimeout(onParserTimeout, delay, new WeakRef(this));
          } else {
            this.timeout = setTimeout(onParserTimeout, delay, new WeakRef(this));
            this.timeout.unref();
          }
        }
        this.timeoutValue = delay;
      } else if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      this.timeoutType = type;
    }
    resume() {
      if (this.socket.destroyed || !this.paused) {
        return;
      }
      assert(this.ptr != null);
      assert(currentParser === null);
      this.llhttp.llhttp_resume(this.ptr);
      assert(this.timeoutType === TIMEOUT_BODY);
      if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      this.paused = false;
      this.execute(this.socket.read() || EMPTY_BUF);
      this.readMore();
    }
    readMore() {
      while (!this.paused && this.ptr) {
        const chunk = this.socket.read();
        if (chunk === null) {
          break;
        }
        this.execute(chunk);
      }
    }
    execute(chunk) {
      assert(currentParser === null);
      assert(this.ptr != null);
      assert(!this.paused);
      const { socket, llhttp } = this;
      if (chunk.length > currentBufferSize) {
        if (currentBufferPtr) {
          llhttp.free(currentBufferPtr);
        }
        currentBufferSize = Math.ceil(chunk.length / 4096) * 4096;
        currentBufferPtr = llhttp.malloc(currentBufferSize);
      }
      new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(chunk);
      try {
        let ret;
        try {
          currentBufferRef = chunk;
          currentParser = this;
          ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, chunk.length);
        } catch (err2) {
          throw err2;
        } finally {
          currentParser = null;
          currentBufferRef = null;
        }
        if (ret !== constants.ERROR.OK) {
          const data = chunk.subarray(llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr);
          if (ret === constants.ERROR.PAUSED_UPGRADE) {
            this.onUpgrade(data);
          } else if (ret === constants.ERROR.PAUSED) {
            this.paused = true;
            socket.unshift(data);
          } else {
            const ptr = llhttp.llhttp_get_error_reason(this.ptr);
            let message = "";
            if (ptr) {
              const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
              message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
            }
            throw new HTTPParserError(message, constants.ERROR[ret], data);
          }
        }
      } catch (err2) {
        util2.destroy(socket, err2);
      }
    }
    destroy() {
      assert(currentParser === null);
      assert(this.ptr != null);
      this.llhttp.llhttp_free(this.ptr);
      this.ptr = null;
      this.timeout && timers.clearTimeout(this.timeout);
      this.timeout = null;
      this.timeoutValue = null;
      this.timeoutType = null;
      this.paused = false;
    }
    onStatus(buf) {
      this.statusText = buf.toString();
      return 0;
    }
    onMessageBegin() {
      const { socket, client } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      if (!request) {
        return -1;
      }
      request.onResponseStarted();
      return 0;
    }
    onHeaderField(buf) {
      const len = this.headers.length;
      if ((len & 1) === 0) {
        this.headers.push(buf);
      } else {
        this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
      }
      this.trackHeader(buf.length);
      return 0;
    }
    onHeaderValue(buf) {
      let len = this.headers.length;
      if ((len & 1) === 1) {
        this.headers.push(buf);
        len += 1;
      } else {
        this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
      }
      const key = this.headers[len - 2];
      if (key.length === 10) {
        const headerName = util2.bufferToLowerCasedHeaderName(key);
        if (headerName === "keep-alive") {
          this.keepAlive += buf.toString();
        } else if (headerName === "connection") {
          this.connection += buf.toString();
        }
      } else if (key.length === 14 && util2.bufferToLowerCasedHeaderName(key) === "content-length") {
        this.contentLength += buf.toString();
      }
      this.trackHeader(buf.length);
      return 0;
    }
    trackHeader(len) {
      this.headersSize += len;
      if (this.headersSize >= this.headersMaxSize) {
        util2.destroy(this.socket, new HeadersOverflowError);
      }
    }
    onUpgrade(head) {
      const { upgrade, client, socket, headers, statusCode } = this;
      assert(upgrade);
      assert(client[kSocket] === socket);
      assert(!socket.destroyed);
      assert(!this.paused);
      assert((headers.length & 1) === 0);
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      assert(request.upgrade || request.method === "CONNECT");
      this.statusCode = 0;
      this.statusText = "";
      this.shouldKeepAlive = false;
      this.headers = [];
      this.headersSize = 0;
      socket.unshift(head);
      socket[kParser].destroy();
      socket[kParser] = null;
      socket[kClient] = null;
      socket[kError] = null;
      removeAllListeners(socket);
      client[kSocket] = null;
      client[kHTTPContext] = null;
      client[kQueue][client[kRunningIdx]++] = null;
      client.emit("disconnect", client[kUrl], [client], new InformationalError("upgrade"));
      try {
        request.onUpgrade(statusCode, headers, socket);
      } catch (err2) {
        util2.destroy(socket, err2);
      }
      client[kResume]();
    }
    onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
      const { client, socket, headers, statusText } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      if (!request) {
        return -1;
      }
      assert(!this.upgrade);
      assert(this.statusCode < 200);
      if (statusCode === 100) {
        util2.destroy(socket, new SocketError("bad response", util2.getSocketInfo(socket)));
        return -1;
      }
      if (upgrade && !request.upgrade) {
        util2.destroy(socket, new SocketError("bad upgrade", util2.getSocketInfo(socket)));
        return -1;
      }
      assert(this.timeoutType === TIMEOUT_HEADERS);
      this.statusCode = statusCode;
      this.shouldKeepAlive = shouldKeepAlive || request.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
      if (this.statusCode >= 200) {
        const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];
        this.setTimeout(bodyTimeout, TIMEOUT_BODY);
      } else if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      if (request.method === "CONNECT") {
        assert(client[kRunning] === 1);
        this.upgrade = true;
        return 2;
      }
      if (upgrade) {
        assert(client[kRunning] === 1);
        this.upgrade = true;
        return 2;
      }
      assert((this.headers.length & 1) === 0);
      this.headers = [];
      this.headersSize = 0;
      if (this.shouldKeepAlive && client[kPipelining]) {
        const keepAliveTimeout = this.keepAlive ? util2.parseKeepAliveTimeout(this.keepAlive) : null;
        if (keepAliveTimeout != null) {
          const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
          if (timeout <= 0) {
            socket[kReset] = true;
          } else {
            client[kKeepAliveTimeoutValue] = timeout;
          }
        } else {
          client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
        }
      } else {
        socket[kReset] = true;
      }
      const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
      if (request.aborted) {
        return -1;
      }
      if (request.method === "HEAD") {
        return 1;
      }
      if (statusCode < 200) {
        return 1;
      }
      if (socket[kBlocking]) {
        socket[kBlocking] = false;
        client[kResume]();
      }
      return pause ? constants.ERROR.PAUSED : 0;
    }
    onBody(buf) {
      const { client, socket, statusCode, maxResponseSize } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      assert(this.timeoutType === TIMEOUT_BODY);
      if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      assert(statusCode >= 200);
      if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
        util2.destroy(socket, new ResponseExceededMaxSizeError);
        return -1;
      }
      this.bytesRead += buf.length;
      if (request.onData(buf) === false) {
        return constants.ERROR.PAUSED;
      }
      return 0;
    }
    onMessageComplete() {
      const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;
      if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
        return -1;
      }
      if (upgrade) {
        return 0;
      }
      assert(statusCode >= 100);
      assert((this.headers.length & 1) === 0);
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      this.statusCode = 0;
      this.statusText = "";
      this.bytesRead = 0;
      this.contentLength = "";
      this.keepAlive = "";
      this.connection = "";
      this.headers = [];
      this.headersSize = 0;
      if (statusCode < 200) {
        return 0;
      }
      if (request.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
        util2.destroy(socket, new ResponseContentLengthMismatchError);
        return -1;
      }
      request.onComplete(headers);
      client[kQueue][client[kRunningIdx]++] = null;
      if (socket[kWriting]) {
        assert(client[kRunning] === 0);
        util2.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (!shouldKeepAlive) {
        util2.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (socket[kReset] && client[kRunning] === 0) {
        util2.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (client[kPipelining] == null || client[kPipelining] === 1) {
        setImmediate(() => client[kResume]());
      } else {
        client[kResume]();
      }
      return 0;
    }
  }
  function onParserTimeout(parser) {
    const { socket, timeoutType, client, paused } = parser.deref();
    if (timeoutType === TIMEOUT_HEADERS) {
      if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
        assert(!paused, "cannot be paused while waiting for headers");
        util2.destroy(socket, new HeadersTimeoutError);
      }
    } else if (timeoutType === TIMEOUT_BODY) {
      if (!paused) {
        util2.destroy(socket, new BodyTimeoutError);
      }
    } else if (timeoutType === TIMEOUT_KEEP_ALIVE) {
      assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
      util2.destroy(socket, new InformationalError("socket idle timeout"));
    }
  }
  async function connectH1(client, socket) {
    client[kSocket] = socket;
    if (!llhttpInstance) {
      const noop = () => {};
      socket.on("error", noop);
      llhttpInstance = await llhttpPromise;
      llhttpPromise = null;
      socket.off("error", noop);
    }
    if (socket.errored) {
      throw socket.errored;
    }
    if (socket.destroyed) {
      throw new SocketError("destroyed");
    }
    socket[kNoRef] = false;
    socket[kWriting] = false;
    socket[kReset] = false;
    socket[kBlocking] = false;
    socket[kParser] = new Parser(client, socket, llhttpInstance);
    util2.addListener(socket, "error", onHttpSocketError);
    util2.addListener(socket, "readable", onHttpSocketReadable);
    util2.addListener(socket, "end", onHttpSocketEnd);
    util2.addListener(socket, "close", onHttpSocketClose);
    socket[kClosed] = false;
    socket.on("close", onSocketClose);
    return {
      version: "h1",
      defaultPipelining: 1,
      write(request) {
        return writeH1(client, request);
      },
      resume() {
        resumeH1(client);
      },
      destroy(err2, callback) {
        if (socket[kClosed]) {
          queueMicrotask(callback);
        } else {
          socket.on("close", callback);
          socket.destroy(err2);
        }
      },
      get destroyed() {
        return socket.destroyed;
      },
      busy(request) {
        if (socket[kWriting] || socket[kReset] || socket[kBlocking]) {
          return true;
        }
        if (request) {
          if (client[kRunning] > 0 && !request.idempotent) {
            return true;
          }
          if (client[kRunning] > 0 && (request.upgrade || request.method === "CONNECT")) {
            return true;
          }
          if (client[kRunning] > 0 && util2.bodyLength(request.body) !== 0 && (util2.isStream(request.body) || util2.isAsyncIterable(request.body) || util2.isFormDataLike(request.body))) {
            return true;
          }
        }
        return false;
      }
    };
  }
  function onHttpSocketError(err2) {
    assert(err2.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    const parser = this[kParser];
    if (err2.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
      parser.onMessageComplete();
      return;
    }
    this[kError] = err2;
    this[kClient][kOnError](err2);
  }
  function onHttpSocketReadable() {
    this[kParser]?.readMore();
  }
  function onHttpSocketEnd() {
    const parser = this[kParser];
    if (parser.statusCode && !parser.shouldKeepAlive) {
      parser.onMessageComplete();
      return;
    }
    util2.destroy(this, new SocketError("other side closed", util2.getSocketInfo(this)));
  }
  function onHttpSocketClose() {
    const parser = this[kParser];
    if (parser) {
      if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
        parser.onMessageComplete();
      }
      this[kParser].destroy();
      this[kParser] = null;
    }
    const err2 = this[kError] || new SocketError("closed", util2.getSocketInfo(this));
    const client = this[kClient];
    client[kSocket] = null;
    client[kHTTPContext] = null;
    if (client.destroyed) {
      assert(client[kPending] === 0);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i2 = 0;i2 < requests.length; i2++) {
        const request = requests[i2];
        util2.errorRequest(client, request, err2);
      }
    } else if (client[kRunning] > 0 && err2.code !== "UND_ERR_INFO") {
      const request = client[kQueue][client[kRunningIdx]];
      client[kQueue][client[kRunningIdx]++] = null;
      util2.errorRequest(client, request, err2);
    }
    client[kPendingIdx] = client[kRunningIdx];
    assert(client[kRunning] === 0);
    client.emit("disconnect", client[kUrl], [client], err2);
    client[kResume]();
  }
  function onSocketClose() {
    this[kClosed] = true;
  }
  function resumeH1(client) {
    const socket = client[kSocket];
    if (socket && !socket.destroyed) {
      if (client[kSize] === 0) {
        if (!socket[kNoRef] && socket.unref) {
          socket.unref();
          socket[kNoRef] = true;
        }
      } else if (socket[kNoRef] && socket.ref) {
        socket.ref();
        socket[kNoRef] = false;
      }
      if (client[kSize] === 0) {
        if (socket[kParser].timeoutType !== TIMEOUT_KEEP_ALIVE) {
          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_KEEP_ALIVE);
        }
      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
          const request = client[kQueue][client[kRunningIdx]];
          const headersTimeout = request.headersTimeout != null ? request.headersTimeout : client[kHeadersTimeout];
          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
        }
      }
    }
  }
  function shouldSendContentLength(method) {
    return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
  }
  function writeH1(client, request) {
    const { method, path, host, upgrade, blocking, reset } = request;
    let { body, headers, contentLength } = request;
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH" || method === "QUERY" || method === "PROPFIND" || method === "PROPPATCH";
    if (util2.isFormDataLike(body)) {
      if (!extractBody) {
        extractBody = require_body().extractBody;
      }
      const [bodyStream, contentType3] = extractBody(body);
      if (request.contentType == null) {
        headers.push("content-type", contentType3);
      }
      body = bodyStream.stream;
      contentLength = bodyStream.length;
    } else if (util2.isBlobLike(body) && request.contentType == null && body.type) {
      headers.push("content-type", body.type);
    }
    if (body && typeof body.read === "function") {
      body.read(0);
    }
    const bodyLength = util2.bodyLength(body);
    contentLength = bodyLength ?? contentLength;
    if (contentLength === null) {
      contentLength = request.contentLength;
    }
    if (contentLength === 0 && !expectsPayload) {
      contentLength = null;
    }
    if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
      if (client[kStrictContentLength]) {
        util2.errorRequest(client, request, new RequestContentLengthMismatchError);
        return false;
      }
      process.emitWarning(new RequestContentLengthMismatchError);
    }
    const socket = client[kSocket];
    const abort = (err2) => {
      if (request.aborted || request.completed) {
        return;
      }
      util2.errorRequest(client, request, err2 || new RequestAbortedError);
      util2.destroy(body);
      util2.destroy(socket, new InformationalError("aborted"));
    };
    try {
      request.onConnect(abort);
    } catch (err2) {
      util2.errorRequest(client, request, err2);
    }
    if (request.aborted) {
      return false;
    }
    if (method === "HEAD") {
      socket[kReset] = true;
    }
    if (upgrade || method === "CONNECT") {
      socket[kReset] = true;
    }
    if (reset != null) {
      socket[kReset] = reset;
    }
    if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
      socket[kReset] = true;
    }
    if (blocking) {
      socket[kBlocking] = true;
    }
    let header = `${method} ${path} HTTP/1.1\r
`;
    if (typeof host === "string") {
      header += `host: ${host}\r
`;
    } else {
      header += client[kHostHeader];
    }
    if (upgrade) {
      header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
    } else if (client[kPipelining] && !socket[kReset]) {
      header += `connection: keep-alive\r
`;
    } else {
      header += `connection: close\r
`;
    }
    if (Array.isArray(headers)) {
      for (let n = 0;n < headers.length; n += 2) {
        const key = headers[n + 0];
        const val = headers[n + 1];
        if (Array.isArray(val)) {
          for (let i2 = 0;i2 < val.length; i2++) {
            header += `${key}: ${val[i2]}\r
`;
          }
        } else {
          header += `${key}: ${val}\r
`;
        }
      }
    }
    if (channels.sendHeaders.hasSubscribers) {
      channels.sendHeaders.publish({ request, headers: header, socket });
    }
    if (!body || bodyLength === 0) {
      writeBuffer(abort, null, client, request, socket, contentLength, header, expectsPayload);
    } else if (util2.isBuffer(body)) {
      writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload);
    } else if (util2.isBlobLike(body)) {
      if (typeof body.stream === "function") {
        writeIterable(abort, body.stream(), client, request, socket, contentLength, header, expectsPayload);
      } else {
        writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload);
      }
    } else if (util2.isStream(body)) {
      writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload);
    } else if (util2.isIterable(body)) {
      writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload);
    } else {
      assert(false);
    }
    return true;
  }
  function writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload) {
    assert(contentLength !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
    let finished = false;
    const writer = new AsyncWriter({ abort, socket, request, contentLength, client, expectsPayload, header });
    const onData = function(chunk) {
      if (finished) {
        return;
      }
      try {
        if (!writer.write(chunk) && this.pause) {
          this.pause();
        }
      } catch (err2) {
        util2.destroy(this, err2);
      }
    };
    const onDrain = function() {
      if (finished) {
        return;
      }
      if (body.resume) {
        body.resume();
      }
    };
    const onClose = function() {
      queueMicrotask(() => {
        body.removeListener("error", onFinished);
      });
      if (!finished) {
        const err2 = new RequestAbortedError;
        queueMicrotask(() => onFinished(err2));
      }
    };
    const onFinished = function(err2) {
      if (finished) {
        return;
      }
      finished = true;
      assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
      socket.off("drain", onDrain).off("error", onFinished);
      body.removeListener("data", onData).removeListener("end", onFinished).removeListener("close", onClose);
      if (!err2) {
        try {
          writer.end();
        } catch (er) {
          err2 = er;
        }
      }
      writer.destroy(err2);
      if (err2 && (err2.code !== "UND_ERR_INFO" || err2.message !== "reset")) {
        util2.destroy(body, err2);
      } else {
        util2.destroy(body);
      }
    };
    body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onClose);
    if (body.resume) {
      body.resume();
    }
    socket.on("drain", onDrain).on("error", onFinished);
    if (body.errorEmitted ?? body.errored) {
      setImmediate(() => onFinished(body.errored));
    } else if (body.endEmitted ?? body.readableEnded) {
      setImmediate(() => onFinished(null));
    }
    if (body.closeEmitted ?? body.closed) {
      setImmediate(onClose);
    }
  }
  function writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload) {
    try {
      if (!body) {
        if (contentLength === 0) {
          socket.write(`${header}content-length: 0\r
\r
`, "latin1");
        } else {
          assert(contentLength === null, "no body must not have content length");
          socket.write(`${header}\r
`, "latin1");
        }
      } else if (util2.isBuffer(body)) {
        assert(contentLength === body.byteLength, "buffer body must have content length");
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
        socket.write(body);
        socket.uncork();
        request.onBodySent(body);
        if (!expectsPayload && request.reset !== false) {
          socket[kReset] = true;
        }
      }
      request.onRequestSent();
      client[kResume]();
    } catch (err2) {
      abort(err2);
    }
  }
  async function writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload) {
    assert(contentLength === body.size, "blob body must have content length");
    try {
      if (contentLength != null && contentLength !== body.size) {
        throw new RequestContentLengthMismatchError;
      }
      const buffer = Buffer.from(await body.arrayBuffer());
      socket.cork();
      socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
      socket.write(buffer);
      socket.uncork();
      request.onBodySent(buffer);
      request.onRequestSent();
      if (!expectsPayload && request.reset !== false) {
        socket[kReset] = true;
      }
      client[kResume]();
    } catch (err2) {
      abort(err2);
    }
  }
  async function writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload) {
    assert(contentLength !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
    let callback = null;
    function onDrain() {
      if (callback) {
        const cb = callback;
        callback = null;
        cb();
      }
    }
    const waitForDrain = () => new Promise((resolve, reject) => {
      assert(callback === null);
      if (socket[kError]) {
        reject(socket[kError]);
      } else {
        callback = resolve;
      }
    });
    socket.on("close", onDrain).on("drain", onDrain);
    const writer = new AsyncWriter({ abort, socket, request, contentLength, client, expectsPayload, header });
    try {
      for await (const chunk of body) {
        if (socket[kError]) {
          throw socket[kError];
        }
        if (!writer.write(chunk)) {
          await waitForDrain();
        }
      }
      writer.end();
    } catch (err2) {
      writer.destroy(err2);
    } finally {
      socket.off("close", onDrain).off("drain", onDrain);
    }
  }

  class AsyncWriter {
    constructor({ abort, socket, request, contentLength, client, expectsPayload, header }) {
      this.socket = socket;
      this.request = request;
      this.contentLength = contentLength;
      this.client = client;
      this.bytesWritten = 0;
      this.expectsPayload = expectsPayload;
      this.header = header;
      this.abort = abort;
      socket[kWriting] = true;
    }
    write(chunk) {
      const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;
      if (socket[kError]) {
        throw socket[kError];
      }
      if (socket.destroyed) {
        return false;
      }
      const len = Buffer.byteLength(chunk);
      if (!len) {
        return true;
      }
      if (contentLength !== null && bytesWritten + len > contentLength) {
        if (client[kStrictContentLength]) {
          throw new RequestContentLengthMismatchError;
        }
        process.emitWarning(new RequestContentLengthMismatchError);
      }
      socket.cork();
      if (bytesWritten === 0) {
        if (!expectsPayload && request.reset !== false) {
          socket[kReset] = true;
        }
        if (contentLength === null) {
          socket.write(`${header}transfer-encoding: chunked\r
`, "latin1");
        } else {
          socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
        }
      }
      if (contentLength === null) {
        socket.write(`\r
${len.toString(16)}\r
`, "latin1");
      }
      this.bytesWritten += len;
      const ret = socket.write(chunk);
      socket.uncork();
      request.onBodySent(chunk);
      if (!ret) {
        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh();
          }
        }
      }
      return ret;
    }
    end() {
      const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;
      request.onRequestSent();
      socket[kWriting] = false;
      if (socket[kError]) {
        throw socket[kError];
      }
      if (socket.destroyed) {
        return;
      }
      if (bytesWritten === 0) {
        if (expectsPayload) {
          socket.write(`${header}content-length: 0\r
\r
`, "latin1");
        } else {
          socket.write(`${header}\r
`, "latin1");
        }
      } else if (contentLength === null) {
        socket.write(`\r
0\r
\r
`, "latin1");
      }
      if (contentLength !== null && bytesWritten !== contentLength) {
        if (client[kStrictContentLength]) {
          throw new RequestContentLengthMismatchError;
        } else {
          process.emitWarning(new RequestContentLengthMismatchError);
        }
      }
      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
        if (socket[kParser].timeout.refresh) {
          socket[kParser].timeout.refresh();
        }
      }
      client[kResume]();
    }
    destroy(err2) {
      const { socket, client, abort } = this;
      socket[kWriting] = false;
      if (err2) {
        assert(client[kRunning] <= 1, "pipeline should only contain this request");
        abort(err2);
      }
    }
  }
  module2.exports = connectH1;
});

// node_modules/undici/lib/dispatcher/client-h2.js
var require_client_h2 = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { pipeline } = require("node:stream");
  var util2 = require_util();
  var {
    RequestContentLengthMismatchError,
    RequestAbortedError,
    SocketError,
    InformationalError
  } = require_errors();
  var {
    kUrl,
    kReset,
    kClient,
    kRunning,
    kPending,
    kQueue,
    kPendingIdx,
    kRunningIdx,
    kError,
    kSocket,
    kStrictContentLength,
    kOnError,
    kMaxConcurrentStreams,
    kHTTP2Session,
    kResume,
    kSize,
    kHTTPContext,
    kClosed,
    kBodyTimeout
  } = require_symbols();
  var { channels } = require_diagnostics();
  var kOpenStreams = Symbol("open streams");
  var extractBody;
  var http22;
  try {
    http22 = require("node:http2");
  } catch {
    http22 = { constants: {} };
  }
  var {
    constants: {
      HTTP2_HEADER_AUTHORITY,
      HTTP2_HEADER_METHOD,
      HTTP2_HEADER_PATH,
      HTTP2_HEADER_SCHEME,
      HTTP2_HEADER_CONTENT_LENGTH,
      HTTP2_HEADER_EXPECT,
      HTTP2_HEADER_STATUS
    }
  } = http22;
  function parseH2Headers(headers) {
    const result2 = [];
    for (const [name, value] of Object.entries(headers)) {
      if (Array.isArray(value)) {
        for (const subvalue of value) {
          result2.push(Buffer.from(name), Buffer.from(subvalue));
        }
      } else {
        result2.push(Buffer.from(name), Buffer.from(value));
      }
    }
    return result2;
  }
  async function connectH2(client, socket) {
    client[kSocket] = socket;
    const session = http22.connect(client[kUrl], {
      createConnection: () => socket,
      peerMaxConcurrentStreams: client[kMaxConcurrentStreams],
      settings: {
        enablePush: false
      }
    });
    session[kOpenStreams] = 0;
    session[kClient] = client;
    session[kSocket] = socket;
    session[kHTTP2Session] = null;
    util2.addListener(session, "error", onHttp2SessionError);
    util2.addListener(session, "frameError", onHttp2FrameError);
    util2.addListener(session, "end", onHttp2SessionEnd);
    util2.addListener(session, "goaway", onHttp2SessionGoAway);
    util2.addListener(session, "close", onHttp2SessionClose);
    session.unref();
    client[kHTTP2Session] = session;
    socket[kHTTP2Session] = session;
    util2.addListener(socket, "error", onHttp2SocketError);
    util2.addListener(socket, "end", onHttp2SocketEnd);
    util2.addListener(socket, "close", onHttp2SocketClose);
    socket[kClosed] = false;
    socket.on("close", onSocketClose);
    return {
      version: "h2",
      defaultPipelining: Infinity,
      write(request) {
        return writeH2(client, request);
      },
      resume() {
        resumeH2(client);
      },
      destroy(err2, callback) {
        if (socket[kClosed]) {
          queueMicrotask(callback);
        } else {
          socket.destroy(err2).on("close", callback);
        }
      },
      get destroyed() {
        return socket.destroyed;
      },
      busy() {
        return false;
      }
    };
  }
  function resumeH2(client) {
    const socket = client[kSocket];
    if (socket?.destroyed === false) {
      if (client[kSize] === 0 || client[kMaxConcurrentStreams] === 0) {
        socket.unref();
        client[kHTTP2Session].unref();
      } else {
        socket.ref();
        client[kHTTP2Session].ref();
      }
    }
  }
  function onHttp2SessionError(err2) {
    assert(err2.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    this[kSocket][kError] = err2;
    this[kClient][kOnError](err2);
  }
  function onHttp2FrameError(type, code2, id) {
    if (id === 0) {
      const err2 = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code2}`);
      this[kSocket][kError] = err2;
      this[kClient][kOnError](err2);
    }
  }
  function onHttp2SessionEnd() {
    const err2 = new SocketError("other side closed", util2.getSocketInfo(this[kSocket]));
    this.destroy(err2);
    util2.destroy(this[kSocket], err2);
  }
  function onHttp2SessionGoAway(errorCode) {
    const err2 = this[kError] || new SocketError(`HTTP/2: "GOAWAY" frame received with code ${errorCode}`, util2.getSocketInfo(this[kSocket]));
    const client = this[kClient];
    client[kSocket] = null;
    client[kHTTPContext] = null;
    this.close();
    this[kHTTP2Session] = null;
    util2.destroy(this[kSocket], err2);
    if (client[kRunningIdx] < client[kQueue].length) {
      const request = client[kQueue][client[kRunningIdx]];
      client[kQueue][client[kRunningIdx]++] = null;
      util2.errorRequest(client, request, err2);
      client[kPendingIdx] = client[kRunningIdx];
    }
    assert(client[kRunning] === 0);
    client.emit("disconnect", client[kUrl], [client], err2);
    client.emit("connectionError", client[kUrl], [client], err2);
    client[kResume]();
  }
  function onHttp2SessionClose() {
    const { [kClient]: client } = this;
    const { [kSocket]: socket } = client;
    const err2 = this[kSocket][kError] || this[kError] || new SocketError("closed", util2.getSocketInfo(socket));
    client[kSocket] = null;
    client[kHTTPContext] = null;
    if (client.destroyed) {
      assert(client[kPending] === 0);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i2 = 0;i2 < requests.length; i2++) {
        const request = requests[i2];
        util2.errorRequest(client, request, err2);
      }
    }
  }
  function onHttp2SocketClose() {
    const err2 = this[kError] || new SocketError("closed", util2.getSocketInfo(this));
    const client = this[kHTTP2Session][kClient];
    client[kSocket] = null;
    client[kHTTPContext] = null;
    if (this[kHTTP2Session] !== null) {
      this[kHTTP2Session].destroy(err2);
    }
    client[kPendingIdx] = client[kRunningIdx];
    assert(client[kRunning] === 0);
    client.emit("disconnect", client[kUrl], [client], err2);
    client[kResume]();
  }
  function onHttp2SocketError(err2) {
    assert(err2.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    this[kError] = err2;
    this[kClient][kOnError](err2);
  }
  function onHttp2SocketEnd() {
    util2.destroy(this, new SocketError("other side closed", util2.getSocketInfo(this)));
  }
  function onSocketClose() {
    this[kClosed] = true;
  }
  function shouldSendContentLength(method) {
    return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
  }
  function writeH2(client, request) {
    const requestTimeout = request.bodyTimeout ?? client[kBodyTimeout];
    const session = client[kHTTP2Session];
    const { method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;
    let { body } = request;
    if (upgrade) {
      util2.errorRequest(client, request, new Error("Upgrade not supported for H2"));
      return false;
    }
    const headers = {};
    for (let n = 0;n < reqHeaders.length; n += 2) {
      const key = reqHeaders[n + 0];
      const val = reqHeaders[n + 1];
      if (Array.isArray(val)) {
        for (let i2 = 0;i2 < val.length; i2++) {
          if (headers[key]) {
            headers[key] += `,${val[i2]}`;
          } else {
            headers[key] = val[i2];
          }
        }
      } else {
        headers[key] = val;
      }
    }
    let stream = null;
    const { hostname, port } = client[kUrl];
    headers[HTTP2_HEADER_AUTHORITY] = host || `${hostname}${port ? `:${port}` : ""}`;
    headers[HTTP2_HEADER_METHOD] = method;
    const abort = (err2) => {
      if (request.aborted || request.completed) {
        return;
      }
      err2 = err2 || new RequestAbortedError;
      util2.errorRequest(client, request, err2);
      if (stream != null) {
        stream.removeAllListeners("data");
        stream.close();
        client[kOnError](err2);
        client[kResume]();
      }
      util2.destroy(body, err2);
    };
    try {
      request.onConnect(abort);
    } catch (err2) {
      util2.errorRequest(client, request, err2);
    }
    if (request.aborted) {
      return false;
    }
    if (method === "CONNECT") {
      session.ref();
      stream = session.request(headers, { endStream: false, signal });
      if (!stream.pending) {
        request.onUpgrade(null, null, stream);
        ++session[kOpenStreams];
        client[kQueue][client[kRunningIdx]++] = null;
      } else {
        stream.once("ready", () => {
          request.onUpgrade(null, null, stream);
          ++session[kOpenStreams];
          client[kQueue][client[kRunningIdx]++] = null;
        });
      }
      stream.once("close", () => {
        session[kOpenStreams] -= 1;
        if (session[kOpenStreams] === 0)
          session.unref();
      });
      stream.setTimeout(requestTimeout);
      return true;
    }
    headers[HTTP2_HEADER_PATH] = path;
    headers[HTTP2_HEADER_SCHEME] = "https";
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") {
      body.read(0);
    }
    let contentLength = util2.bodyLength(body);
    if (util2.isFormDataLike(body)) {
      extractBody ??= require_body().extractBody;
      const [bodyStream, contentType3] = extractBody(body);
      headers["content-type"] = contentType3;
      body = bodyStream.stream;
      contentLength = bodyStream.length;
    }
    if (contentLength == null) {
      contentLength = request.contentLength;
    }
    if (contentLength === 0 || !expectsPayload) {
      contentLength = null;
    }
    if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
      if (client[kStrictContentLength]) {
        util2.errorRequest(client, request, new RequestContentLengthMismatchError);
        return false;
      }
      process.emitWarning(new RequestContentLengthMismatchError);
    }
    if (contentLength != null) {
      assert(body, "no body must not have content length");
      headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
    }
    session.ref();
    if (channels.sendHeaders.hasSubscribers) {
      let header = "";
      for (const key in headers) {
        header += `${key}: ${headers[key]}\r
`;
      }
      channels.sendHeaders.publish({ request, headers: header, socket: session[kSocket] });
    }
    const shouldEndStream = method === "GET" || method === "HEAD" || body === null;
    if (expectContinue) {
      headers[HTTP2_HEADER_EXPECT] = "100-continue";
      stream = session.request(headers, { endStream: shouldEndStream, signal });
      stream.once("continue", writeBodyH2);
    } else {
      stream = session.request(headers, {
        endStream: shouldEndStream,
        signal
      });
      writeBodyH2();
    }
    ++session[kOpenStreams];
    stream.setTimeout(requestTimeout);
    stream.once("response", (headers2) => {
      const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers2;
      request.onResponseStarted();
      if (request.aborted) {
        stream.removeAllListeners("data");
        return;
      }
      if (request.onHeaders(Number(statusCode), parseH2Headers(realHeaders), stream.resume.bind(stream), "") === false) {
        stream.pause();
      }
    });
    stream.on("data", (chunk) => {
      if (request.onData(chunk) === false) {
        stream.pause();
      }
    });
    stream.once("end", (err2) => {
      stream.removeAllListeners("data");
      if (stream.state?.state == null || stream.state.state < 6) {
        if (!request.aborted && !request.completed) {
          request.onComplete({});
        }
        client[kQueue][client[kRunningIdx]++] = null;
        client[kResume]();
      } else {
        --session[kOpenStreams];
        if (session[kOpenStreams] === 0) {
          session.unref();
        }
        abort(err2 ?? new InformationalError("HTTP/2: stream half-closed (remote)"));
        client[kQueue][client[kRunningIdx]++] = null;
        client[kPendingIdx] = client[kRunningIdx];
        client[kResume]();
      }
    });
    stream.once("close", () => {
      stream.removeAllListeners("data");
      session[kOpenStreams] -= 1;
      if (session[kOpenStreams] === 0) {
        session.unref();
      }
    });
    stream.once("error", function(err2) {
      stream.removeAllListeners("data");
      abort(err2);
    });
    stream.once("frameError", (type, code2) => {
      stream.removeAllListeners("data");
      abort(new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code2}`));
    });
    stream.on("aborted", () => {
      stream.removeAllListeners("data");
    });
    stream.on("timeout", () => {
      const err2 = new InformationalError(`HTTP/2: "stream timeout after ${requestTimeout}"`);
      stream.removeAllListeners("data");
      session[kOpenStreams] -= 1;
      if (session[kOpenStreams] === 0) {
        session.unref();
      }
      abort(err2);
    });
    stream.once("trailers", (trailers) => {
      if (request.aborted || request.completed) {
        return;
      }
      request.onComplete(trailers);
    });
    return true;
    function writeBodyH2() {
      if (!body || contentLength === 0) {
        writeBuffer(abort, stream, null, client, request, client[kSocket], contentLength, expectsPayload);
      } else if (util2.isBuffer(body)) {
        writeBuffer(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);
      } else if (util2.isBlobLike(body)) {
        if (typeof body.stream === "function") {
          writeIterable(abort, stream, body.stream(), client, request, client[kSocket], contentLength, expectsPayload);
        } else {
          writeBlob(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);
        }
      } else if (util2.isStream(body)) {
        writeStream(abort, client[kSocket], expectsPayload, stream, body, client, request, contentLength);
      } else if (util2.isIterable(body)) {
        writeIterable(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);
      } else {
        assert(false);
      }
    }
  }
  function writeBuffer(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {
    try {
      if (body != null && util2.isBuffer(body)) {
        assert(contentLength === body.byteLength, "buffer body must have content length");
        h2stream.cork();
        h2stream.write(body);
        h2stream.uncork();
        h2stream.end();
        request.onBodySent(body);
      }
      if (!expectsPayload) {
        socket[kReset] = true;
      }
      request.onRequestSent();
      client[kResume]();
    } catch (error) {
      abort(error);
    }
  }
  function writeStream(abort, socket, expectsPayload, h2stream, body, client, request, contentLength) {
    assert(contentLength !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
    const pipe = pipeline(body, h2stream, (err2) => {
      if (err2) {
        util2.destroy(pipe, err2);
        abort(err2);
      } else {
        util2.removeAllListeners(pipe);
        request.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
        client[kResume]();
      }
    });
    util2.addListener(pipe, "data", onPipeData);
    function onPipeData(chunk) {
      request.onBodySent(chunk);
    }
  }
  async function writeBlob(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {
    assert(contentLength === body.size, "blob body must have content length");
    try {
      if (contentLength != null && contentLength !== body.size) {
        throw new RequestContentLengthMismatchError;
      }
      const buffer = Buffer.from(await body.arrayBuffer());
      h2stream.cork();
      h2stream.write(buffer);
      h2stream.uncork();
      h2stream.end();
      request.onBodySent(buffer);
      request.onRequestSent();
      if (!expectsPayload) {
        socket[kReset] = true;
      }
      client[kResume]();
    } catch (err2) {
      abort(err2);
    }
  }
  async function writeIterable(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {
    assert(contentLength !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
    let callback = null;
    function onDrain() {
      if (callback) {
        const cb = callback;
        callback = null;
        cb();
      }
    }
    const waitForDrain = () => new Promise((resolve, reject) => {
      assert(callback === null);
      if (socket[kError]) {
        reject(socket[kError]);
      } else {
        callback = resolve;
      }
    });
    h2stream.on("close", onDrain).on("drain", onDrain);
    try {
      for await (const chunk of body) {
        if (socket[kError]) {
          throw socket[kError];
        }
        const res = h2stream.write(chunk);
        request.onBodySent(chunk);
        if (!res) {
          await waitForDrain();
        }
      }
      h2stream.end();
      request.onRequestSent();
      if (!expectsPayload) {
        socket[kReset] = true;
      }
      client[kResume]();
    } catch (err2) {
      abort(err2);
    } finally {
      h2stream.off("close", onDrain).off("drain", onDrain);
    }
  }
  module2.exports = connectH2;
});

// node_modules/undici/lib/dispatcher/client.js
var require_client = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var net = require("node:net");
  var http3 = require("node:http");
  var util2 = require_util();
  var { channels } = require_diagnostics();
  var Request = require_request();
  var DispatcherBase = require_dispatcher_base();
  var {
    InvalidArgumentError,
    InformationalError,
    ClientDestroyedError
  } = require_errors();
  var buildConnector = require_connect();
  var {
    kUrl,
    kServerName,
    kClient,
    kBusy,
    kConnect,
    kResuming,
    kRunning,
    kPending,
    kSize,
    kQueue,
    kConnected,
    kConnecting,
    kNeedDrain,
    kKeepAliveDefaultTimeout,
    kHostHeader,
    kPendingIdx,
    kRunningIdx,
    kError,
    kPipelining,
    kKeepAliveTimeoutValue,
    kMaxHeadersSize,
    kKeepAliveMaxTimeout,
    kKeepAliveTimeoutThreshold,
    kHeadersTimeout,
    kBodyTimeout,
    kStrictContentLength,
    kConnector,
    kMaxRequests,
    kCounter,
    kClose,
    kDestroy,
    kDispatch,
    kLocalAddress,
    kMaxResponseSize,
    kOnError,
    kHTTPContext,
    kMaxConcurrentStreams,
    kResume
  } = require_symbols();
  var connectH1 = require_client_h1();
  var connectH2 = require_client_h2();
  var kClosedResolve = Symbol("kClosedResolve");
  var getDefaultNodeMaxHeaderSize = http3 && http3.maxHeaderSize && Number.isInteger(http3.maxHeaderSize) && http3.maxHeaderSize > 0 ? () => http3.maxHeaderSize : () => {
    throw new InvalidArgumentError("http module not available or http.maxHeaderSize invalid");
  };
  var noop = () => {};
  function getPipelining(client) {
    return client[kPipelining] ?? client[kHTTPContext]?.defaultPipelining ?? 1;
  }

  class Client2 extends DispatcherBase {
    constructor(url, {
      maxHeaderSize,
      headersTimeout,
      socketTimeout,
      requestTimeout,
      connectTimeout,
      bodyTimeout,
      idleTimeout,
      keepAlive,
      keepAliveTimeout,
      maxKeepAliveTimeout,
      keepAliveMaxTimeout,
      keepAliveTimeoutThreshold,
      socketPath,
      pipelining,
      tls,
      strictContentLength,
      maxCachedSessions,
      connect: connect2,
      maxRequestsPerClient,
      localAddress,
      maxResponseSize,
      autoSelectFamily,
      autoSelectFamilyAttemptTimeout,
      maxConcurrentStreams,
      allowH2
    } = {}) {
      if (keepAlive !== undefined) {
        throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
      }
      if (socketTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
      }
      if (requestTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
      }
      if (idleTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
      }
      if (maxKeepAliveTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
      }
      if (maxHeaderSize != null) {
        if (!Number.isInteger(maxHeaderSize) || maxHeaderSize < 1) {
          throw new InvalidArgumentError("invalid maxHeaderSize");
        }
      } else {
        maxHeaderSize = getDefaultNodeMaxHeaderSize();
      }
      if (socketPath != null && typeof socketPath !== "string") {
        throw new InvalidArgumentError("invalid socketPath");
      }
      if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
        throw new InvalidArgumentError("invalid connectTimeout");
      }
      if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
        throw new InvalidArgumentError("invalid keepAliveTimeout");
      }
      if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
        throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
      }
      if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
        throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
      }
      if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
        throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
      }
      if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
        throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
      }
      if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
        throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
      }
      if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) {
        throw new InvalidArgumentError("localAddress must be valid string IP address");
      }
      if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
        throw new InvalidArgumentError("maxResponseSize must be a positive number");
      }
      if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
        throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
      }
      if (allowH2 != null && typeof allowH2 !== "boolean") {
        throw new InvalidArgumentError("allowH2 must be a valid boolean value");
      }
      if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) {
        throw new InvalidArgumentError("maxConcurrentStreams must be a positive integer, greater than 0");
      }
      super();
      if (typeof connect2 !== "function") {
        connect2 = buildConnector({
          ...tls,
          maxCachedSessions,
          allowH2,
          socketPath,
          timeout: connectTimeout,
          ...typeof autoSelectFamily === "boolean" ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined,
          ...connect2
        });
      }
      this[kUrl] = util2.parseOrigin(url);
      this[kConnector] = connect2;
      this[kPipelining] = pipelining != null ? pipelining : 1;
      this[kMaxHeadersSize] = maxHeaderSize;
      this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4000 : keepAliveTimeout;
      this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600000 : keepAliveMaxTimeout;
      this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 2000 : keepAliveTimeoutThreshold;
      this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
      this[kServerName] = null;
      this[kLocalAddress] = localAddress != null ? localAddress : null;
      this[kResuming] = 0;
      this[kNeedDrain] = 0;
      this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
      this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300000;
      this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300000;
      this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
      this[kMaxRequests] = maxRequestsPerClient;
      this[kClosedResolve] = null;
      this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
      this[kMaxConcurrentStreams] = maxConcurrentStreams != null ? maxConcurrentStreams : 100;
      this[kHTTPContext] = null;
      this[kQueue] = [];
      this[kRunningIdx] = 0;
      this[kPendingIdx] = 0;
      this[kResume] = (sync) => resume(this, sync);
      this[kOnError] = (err2) => onError(this, err2);
    }
    get pipelining() {
      return this[kPipelining];
    }
    set pipelining(value) {
      this[kPipelining] = value;
      this[kResume](true);
    }
    get [kPending]() {
      return this[kQueue].length - this[kPendingIdx];
    }
    get [kRunning]() {
      return this[kPendingIdx] - this[kRunningIdx];
    }
    get [kSize]() {
      return this[kQueue].length - this[kRunningIdx];
    }
    get [kConnected]() {
      return !!this[kHTTPContext] && !this[kConnecting] && !this[kHTTPContext].destroyed;
    }
    get [kBusy]() {
      return Boolean(this[kHTTPContext]?.busy(null) || this[kSize] >= (getPipelining(this) || 1) || this[kPending] > 0);
    }
    [kConnect](cb) {
      connect(this);
      this.once("connect", cb);
    }
    [kDispatch](opts, handler) {
      const origin = opts.origin || this[kUrl].origin;
      const request = new Request(origin, opts, handler);
      this[kQueue].push(request);
      if (this[kResuming]) {} else if (util2.bodyLength(request.body) == null && util2.isIterable(request.body)) {
        this[kResuming] = 1;
        queueMicrotask(() => resume(this));
      } else {
        this[kResume](true);
      }
      if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
        this[kNeedDrain] = 2;
      }
      return this[kNeedDrain] < 2;
    }
    async[kClose]() {
      return new Promise((resolve) => {
        if (this[kSize]) {
          this[kClosedResolve] = resolve;
        } else {
          resolve(null);
        }
      });
    }
    async[kDestroy](err2) {
      return new Promise((resolve) => {
        const requests = this[kQueue].splice(this[kPendingIdx]);
        for (let i2 = 0;i2 < requests.length; i2++) {
          const request = requests[i2];
          util2.errorRequest(this, request, err2);
        }
        const callback = () => {
          if (this[kClosedResolve]) {
            this[kClosedResolve]();
            this[kClosedResolve] = null;
          }
          resolve(null);
        };
        if (this[kHTTPContext]) {
          this[kHTTPContext].destroy(err2, callback);
          this[kHTTPContext] = null;
        } else {
          queueMicrotask(callback);
        }
        this[kResume]();
      });
    }
  }
  function onError(client, err2) {
    if (client[kRunning] === 0 && err2.code !== "UND_ERR_INFO" && err2.code !== "UND_ERR_SOCKET") {
      assert(client[kPendingIdx] === client[kRunningIdx]);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i2 = 0;i2 < requests.length; i2++) {
        const request = requests[i2];
        util2.errorRequest(client, request, err2);
      }
      assert(client[kSize] === 0);
    }
  }
  async function connect(client) {
    assert(!client[kConnecting]);
    assert(!client[kHTTPContext]);
    let { host, hostname, protocol, port } = client[kUrl];
    if (hostname[0] === "[") {
      const idx = hostname.indexOf("]");
      assert(idx !== -1);
      const ip = hostname.substring(1, idx);
      assert(net.isIPv6(ip));
      hostname = ip;
    }
    client[kConnecting] = true;
    if (channels.beforeConnect.hasSubscribers) {
      channels.beforeConnect.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          version: client[kHTTPContext]?.version,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector]
      });
    }
    try {
      const socket = await new Promise((resolve, reject) => {
        client[kConnector]({
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        }, (err2, socket2) => {
          if (err2) {
            reject(err2);
          } else {
            resolve(socket2);
          }
        });
      });
      if (client.destroyed) {
        util2.destroy(socket.on("error", noop), new ClientDestroyedError);
        return;
      }
      assert(socket);
      try {
        client[kHTTPContext] = socket.alpnProtocol === "h2" ? await connectH2(client, socket) : await connectH1(client, socket);
      } catch (err2) {
        socket.destroy().on("error", noop);
        throw err2;
      }
      client[kConnecting] = false;
      socket[kCounter] = 0;
      socket[kMaxRequests] = client[kMaxRequests];
      socket[kClient] = client;
      socket[kError] = null;
      if (channels.connected.hasSubscribers) {
        channels.connected.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            version: client[kHTTPContext]?.version,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector],
          socket
        });
      }
      client.emit("connect", client[kUrl], [client]);
    } catch (err2) {
      if (client.destroyed) {
        return;
      }
      client[kConnecting] = false;
      if (channels.connectError.hasSubscribers) {
        channels.connectError.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            version: client[kHTTPContext]?.version,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector],
          error: err2
        });
      }
      if (err2.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
        assert(client[kRunning] === 0);
        while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
          const request = client[kQueue][client[kPendingIdx]++];
          util2.errorRequest(client, request, err2);
        }
      } else {
        onError(client, err2);
      }
      client.emit("connectionError", client[kUrl], [client], err2);
    }
    client[kResume]();
  }
  function emitDrain(client) {
    client[kNeedDrain] = 0;
    client.emit("drain", client[kUrl], [client]);
  }
  function resume(client, sync) {
    if (client[kResuming] === 2) {
      return;
    }
    client[kResuming] = 2;
    _resume(client, sync);
    client[kResuming] = 0;
    if (client[kRunningIdx] > 256) {
      client[kQueue].splice(0, client[kRunningIdx]);
      client[kPendingIdx] -= client[kRunningIdx];
      client[kRunningIdx] = 0;
    }
  }
  function _resume(client, sync) {
    while (true) {
      if (client.destroyed) {
        assert(client[kPending] === 0);
        return;
      }
      if (client[kClosedResolve] && !client[kSize]) {
        client[kClosedResolve]();
        client[kClosedResolve] = null;
        return;
      }
      if (client[kHTTPContext]) {
        client[kHTTPContext].resume();
      }
      if (client[kBusy]) {
        client[kNeedDrain] = 2;
      } else if (client[kNeedDrain] === 2) {
        if (sync) {
          client[kNeedDrain] = 1;
          queueMicrotask(() => emitDrain(client));
        } else {
          emitDrain(client);
        }
        continue;
      }
      if (client[kPending] === 0) {
        return;
      }
      if (client[kRunning] >= (getPipelining(client) || 1)) {
        return;
      }
      const request = client[kQueue][client[kPendingIdx]];
      if (client[kUrl].protocol === "https:" && client[kServerName] !== request.servername) {
        if (client[kRunning] > 0) {
          return;
        }
        client[kServerName] = request.servername;
        client[kHTTPContext]?.destroy(new InformationalError("servername changed"), () => {
          client[kHTTPContext] = null;
          resume(client);
        });
      }
      if (client[kConnecting]) {
        return;
      }
      if (!client[kHTTPContext]) {
        connect(client);
        return;
      }
      if (client[kHTTPContext].destroyed) {
        return;
      }
      if (client[kHTTPContext].busy(request)) {
        return;
      }
      if (!request.aborted && client[kHTTPContext].write(request)) {
        client[kPendingIdx]++;
      } else {
        client[kQueue].splice(client[kPendingIdx], 1);
      }
    }
  }
  module2.exports = Client2;
});

// node_modules/undici/lib/dispatcher/fixed-queue.js
var require_fixed_queue = __commonJS((exports2, module2) => {
  var kSize = 2048;
  var kMask = kSize - 1;

  class FixedCircularBuffer {
    constructor() {
      this.bottom = 0;
      this.top = 0;
      this.list = new Array(kSize).fill(undefined);
      this.next = null;
    }
    isEmpty() {
      return this.top === this.bottom;
    }
    isFull() {
      return (this.top + 1 & kMask) === this.bottom;
    }
    push(data) {
      this.list[this.top] = data;
      this.top = this.top + 1 & kMask;
    }
    shift() {
      const nextItem = this.list[this.bottom];
      if (nextItem === undefined) {
        return null;
      }
      this.list[this.bottom] = undefined;
      this.bottom = this.bottom + 1 & kMask;
      return nextItem;
    }
  }
  module2.exports = class FixedQueue {
    constructor() {
      this.head = this.tail = new FixedCircularBuffer;
    }
    isEmpty() {
      return this.head.isEmpty();
    }
    push(data) {
      if (this.head.isFull()) {
        this.head = this.head.next = new FixedCircularBuffer;
      }
      this.head.push(data);
    }
    shift() {
      const tail = this.tail;
      const next = tail.shift();
      if (tail.isEmpty() && tail.next !== null) {
        this.tail = tail.next;
        tail.next = null;
      }
      return next;
    }
  };
});

// node_modules/undici/lib/dispatcher/pool-stats.js
var require_pool_stats = __commonJS((exports2, module2) => {
  var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
  var kPool = Symbol("pool");

  class PoolStats {
    constructor(pool) {
      this[kPool] = pool;
    }
    get connected() {
      return this[kPool][kConnected];
    }
    get free() {
      return this[kPool][kFree];
    }
    get pending() {
      return this[kPool][kPending];
    }
    get queued() {
      return this[kPool][kQueued];
    }
    get running() {
      return this[kPool][kRunning];
    }
    get size() {
      return this[kPool][kSize];
    }
  }
  module2.exports = PoolStats;
});

// node_modules/undici/lib/dispatcher/pool-base.js
var require_pool_base = __commonJS((exports2, module2) => {
  var DispatcherBase = require_dispatcher_base();
  var FixedQueue = require_fixed_queue();
  var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
  var PoolStats = require_pool_stats();
  var kClients = Symbol("clients");
  var kNeedDrain = Symbol("needDrain");
  var kQueue = Symbol("queue");
  var kClosedResolve = Symbol("closed resolve");
  var kOnDrain = Symbol("onDrain");
  var kOnConnect = Symbol("onConnect");
  var kOnDisconnect = Symbol("onDisconnect");
  var kOnConnectionError = Symbol("onConnectionError");
  var kGetDispatcher = Symbol("get dispatcher");
  var kAddClient = Symbol("add client");
  var kRemoveClient = Symbol("remove client");
  var kStats = Symbol("stats");

  class PoolBase extends DispatcherBase {
    constructor() {
      super();
      this[kQueue] = new FixedQueue;
      this[kClients] = [];
      this[kQueued] = 0;
      const pool = this;
      this[kOnDrain] = function onDrain(origin, targets) {
        const queue = pool[kQueue];
        let needDrain = false;
        while (!needDrain) {
          const item = queue.shift();
          if (!item) {
            break;
          }
          pool[kQueued]--;
          needDrain = !this.dispatch(item.opts, item.handler);
        }
        this[kNeedDrain] = needDrain;
        if (!this[kNeedDrain] && pool[kNeedDrain]) {
          pool[kNeedDrain] = false;
          pool.emit("drain", origin, [pool, ...targets]);
        }
        if (pool[kClosedResolve] && queue.isEmpty()) {
          Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
        }
      };
      this[kOnConnect] = (origin, targets) => {
        pool.emit("connect", origin, [pool, ...targets]);
      };
      this[kOnDisconnect] = (origin, targets, err2) => {
        pool.emit("disconnect", origin, [pool, ...targets], err2);
      };
      this[kOnConnectionError] = (origin, targets, err2) => {
        pool.emit("connectionError", origin, [pool, ...targets], err2);
      };
      this[kStats] = new PoolStats(this);
    }
    get [kBusy]() {
      return this[kNeedDrain];
    }
    get [kConnected]() {
      return this[kClients].filter((client) => client[kConnected]).length;
    }
    get [kFree]() {
      return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;
    }
    get [kPending]() {
      let ret = this[kQueued];
      for (const { [kPending]: pending } of this[kClients]) {
        ret += pending;
      }
      return ret;
    }
    get [kRunning]() {
      let ret = 0;
      for (const { [kRunning]: running } of this[kClients]) {
        ret += running;
      }
      return ret;
    }
    get [kSize]() {
      let ret = this[kQueued];
      for (const { [kSize]: size } of this[kClients]) {
        ret += size;
      }
      return ret;
    }
    get stats() {
      return this[kStats];
    }
    async[kClose]() {
      if (this[kQueue].isEmpty()) {
        await Promise.all(this[kClients].map((c) => c.close()));
      } else {
        await new Promise((resolve) => {
          this[kClosedResolve] = resolve;
        });
      }
    }
    async[kDestroy](err2) {
      while (true) {
        const item = this[kQueue].shift();
        if (!item) {
          break;
        }
        item.handler.onError(err2);
      }
      await Promise.all(this[kClients].map((c) => c.destroy(err2)));
    }
    [kDispatch](opts, handler) {
      const dispatcher = this[kGetDispatcher]();
      if (!dispatcher) {
        this[kNeedDrain] = true;
        this[kQueue].push({ opts, handler });
        this[kQueued]++;
      } else if (!dispatcher.dispatch(opts, handler)) {
        dispatcher[kNeedDrain] = true;
        this[kNeedDrain] = !this[kGetDispatcher]();
      }
      return !this[kNeedDrain];
    }
    [kAddClient](client) {
      client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
      this[kClients].push(client);
      if (this[kNeedDrain]) {
        queueMicrotask(() => {
          if (this[kNeedDrain]) {
            this[kOnDrain](client[kUrl], [this, client]);
          }
        });
      }
      return this;
    }
    [kRemoveClient](client) {
      client.close(() => {
        const idx = this[kClients].indexOf(client);
        if (idx !== -1) {
          this[kClients].splice(idx, 1);
        }
      });
      this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
    }
  }
  module2.exports = {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kRemoveClient,
    kGetDispatcher
  };
});

// node_modules/undici/lib/dispatcher/pool.js
var require_pool = __commonJS((exports2, module2) => {
  var {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kGetDispatcher
  } = require_pool_base();
  var Client2 = require_client();
  var {
    InvalidArgumentError
  } = require_errors();
  var util2 = require_util();
  var { kUrl } = require_symbols();
  var buildConnector = require_connect();
  var kOptions = Symbol("options");
  var kConnections = Symbol("connections");
  var kFactory = Symbol("factory");
  function defaultFactory(origin, opts) {
    return new Client2(origin, opts);
  }

  class Pool extends PoolBase {
    constructor(origin, {
      connections,
      factory = defaultFactory,
      connect,
      connectTimeout,
      tls,
      maxCachedSessions,
      socketPath,
      autoSelectFamily,
      autoSelectFamilyAttemptTimeout,
      allowH2,
      ...options
    } = {}) {
      if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
        throw new InvalidArgumentError("invalid connections");
      }
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      super();
      if (typeof connect !== "function") {
        connect = buildConnector({
          ...tls,
          maxCachedSessions,
          allowH2,
          socketPath,
          timeout: connectTimeout,
          ...typeof autoSelectFamily === "boolean" ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined,
          ...connect
        });
      }
      this[kConnections] = connections || null;
      this[kUrl] = util2.parseOrigin(origin);
      this[kOptions] = { ...util2.deepClone(options), connect, allowH2 };
      this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : undefined;
      this[kFactory] = factory;
      this.on("connectionError", (origin2, targets, error) => {
        for (const target of targets) {
          const idx = this[kClients].indexOf(target);
          if (idx !== -1) {
            this[kClients].splice(idx, 1);
          }
        }
      });
    }
    [kGetDispatcher]() {
      for (const client of this[kClients]) {
        if (!client[kNeedDrain]) {
          return client;
        }
      }
      if (!this[kConnections] || this[kClients].length < this[kConnections]) {
        const dispatcher = this[kFactory](this[kUrl], this[kOptions]);
        this[kAddClient](dispatcher);
        return dispatcher;
      }
    }
  }
  module2.exports = Pool;
});

// node_modules/undici/lib/dispatcher/balanced-pool.js
var require_balanced_pool = __commonJS((exports2, module2) => {
  var {
    BalancedPoolMissingUpstreamError,
    InvalidArgumentError
  } = require_errors();
  var {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kRemoveClient,
    kGetDispatcher
  } = require_pool_base();
  var Pool = require_pool();
  var { kUrl } = require_symbols();
  var { parseOrigin } = require_util();
  var kFactory = Symbol("factory");
  var kOptions = Symbol("options");
  var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
  var kCurrentWeight = Symbol("kCurrentWeight");
  var kIndex = Symbol("kIndex");
  var kWeight = Symbol("kWeight");
  var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
  var kErrorPenalty = Symbol("kErrorPenalty");
  function getGreatestCommonDivisor(a, b) {
    if (a === 0)
      return b;
    while (b !== 0) {
      const t = b;
      b = a % b;
      a = t;
    }
    return a;
  }
  function defaultFactory(origin, opts) {
    return new Pool(origin, opts);
  }

  class BalancedPool extends PoolBase {
    constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      super();
      this[kOptions] = opts;
      this[kIndex] = -1;
      this[kCurrentWeight] = 0;
      this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
      this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
      if (!Array.isArray(upstreams)) {
        upstreams = [upstreams];
      }
      this[kFactory] = factory;
      for (const upstream of upstreams) {
        this.addUpstream(upstream);
      }
      this._updateBalancedPoolStats();
    }
    addUpstream(upstream) {
      const upstreamOrigin = parseOrigin(upstream).origin;
      if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {
        return this;
      }
      const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
      this[kAddClient](pool);
      pool.on("connect", () => {
        pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
      });
      pool.on("connectionError", () => {
        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
        this._updateBalancedPoolStats();
      });
      pool.on("disconnect", (...args) => {
        const err2 = args[2];
        if (err2 && err2.code === "UND_ERR_SOCKET") {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
          this._updateBalancedPoolStats();
        }
      });
      for (const client of this[kClients]) {
        client[kWeight] = this[kMaxWeightPerServer];
      }
      this._updateBalancedPoolStats();
      return this;
    }
    _updateBalancedPoolStats() {
      let result2 = 0;
      for (let i2 = 0;i2 < this[kClients].length; i2++) {
        result2 = getGreatestCommonDivisor(this[kClients][i2][kWeight], result2);
      }
      this[kGreatestCommonDivisor] = result2;
    }
    removeUpstream(upstream) {
      const upstreamOrigin = parseOrigin(upstream).origin;
      const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
      if (pool) {
        this[kRemoveClient](pool);
      }
      return this;
    }
    get upstreams() {
      return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
    }
    [kGetDispatcher]() {
      if (this[kClients].length === 0) {
        throw new BalancedPoolMissingUpstreamError;
      }
      const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
      if (!dispatcher) {
        return;
      }
      const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
      if (allClientsBusy) {
        return;
      }
      let counter = 0;
      let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);
      while (counter++ < this[kClients].length) {
        this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
        const pool = this[kClients][this[kIndex]];
        if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
          maxWeightIndex = this[kIndex];
        }
        if (this[kIndex] === 0) {
          this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
          if (this[kCurrentWeight] <= 0) {
            this[kCurrentWeight] = this[kMaxWeightPerServer];
          }
        }
        if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
          return pool;
        }
      }
      this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
      this[kIndex] = maxWeightIndex;
      return this[kClients][maxWeightIndex];
    }
  }
  module2.exports = BalancedPool;
});

// node_modules/undici/lib/dispatcher/agent.js
var require_agent = __commonJS((exports2, module2) => {
  var { InvalidArgumentError } = require_errors();
  var { kClients, kRunning, kClose, kDestroy, kDispatch } = require_symbols();
  var DispatcherBase = require_dispatcher_base();
  var Pool = require_pool();
  var Client2 = require_client();
  var util2 = require_util();
  var kOnConnect = Symbol("onConnect");
  var kOnDisconnect = Symbol("onDisconnect");
  var kOnConnectionError = Symbol("onConnectionError");
  var kOnDrain = Symbol("onDrain");
  var kFactory = Symbol("factory");
  var kOptions = Symbol("options");
  function defaultFactory(origin, opts) {
    return opts && opts.connections === 1 ? new Client2(origin, opts) : new Pool(origin, opts);
  }

  class Agent extends DispatcherBase {
    constructor({ factory = defaultFactory, connect, ...options } = {}) {
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      super();
      if (connect && typeof connect !== "function") {
        connect = { ...connect };
      }
      this[kOptions] = { ...util2.deepClone(options), connect };
      this[kFactory] = factory;
      this[kClients] = new Map;
      this[kOnDrain] = (origin, targets) => {
        this.emit("drain", origin, [this, ...targets]);
      };
      this[kOnConnect] = (origin, targets) => {
        this.emit("connect", origin, [this, ...targets]);
      };
      this[kOnDisconnect] = (origin, targets, err2) => {
        this.emit("disconnect", origin, [this, ...targets], err2);
      };
      this[kOnConnectionError] = (origin, targets, err2) => {
        this.emit("connectionError", origin, [this, ...targets], err2);
      };
    }
    get [kRunning]() {
      let ret = 0;
      for (const client of this[kClients].values()) {
        ret += client[kRunning];
      }
      return ret;
    }
    [kDispatch](opts, handler) {
      let key;
      if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
        key = String(opts.origin);
      } else {
        throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
      }
      let dispatcher = this[kClients].get(key);
      if (!dispatcher) {
        dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
        this[kClients].set(key, dispatcher);
      }
      return dispatcher.dispatch(opts, handler);
    }
    async[kClose]() {
      const closePromises = [];
      for (const client of this[kClients].values()) {
        closePromises.push(client.close());
      }
      this[kClients].clear();
      await Promise.all(closePromises);
    }
    async[kDestroy](err2) {
      const destroyPromises = [];
      for (const client of this[kClients].values()) {
        destroyPromises.push(client.destroy(err2));
      }
      this[kClients].clear();
      await Promise.all(destroyPromises);
    }
  }
  module2.exports = Agent;
});

// node_modules/undici/lib/dispatcher/proxy-agent.js
var require_proxy_agent = __commonJS((exports2, module2) => {
  var { kProxy, kClose, kDestroy } = require_symbols();
  var { URL: URL3 } = require("node:url");
  var Agent = require_agent();
  var Pool = require_pool();
  var DispatcherBase = require_dispatcher_base();
  var { InvalidArgumentError, RequestAbortedError, SecureProxyConnectionError } = require_errors();
  var buildConnector = require_connect();
  var kAgent = Symbol("proxy agent");
  var kClient = Symbol("proxy client");
  var kProxyHeaders = Symbol("proxy headers");
  var kRequestTls = Symbol("request tls settings");
  var kProxyTls = Symbol("proxy tls settings");
  var kConnectEndpoint = Symbol("connect endpoint function");
  function defaultProtocolPort(protocol) {
    return protocol === "https:" ? 443 : 80;
  }
  function defaultFactory(origin, opts) {
    return new Pool(origin, opts);
  }
  var noop = () => {};

  class ProxyAgent extends DispatcherBase {
    constructor(opts) {
      if (!opts || typeof opts === "object" && !(opts instanceof URL3) && !opts.uri) {
        throw new InvalidArgumentError("Proxy uri is mandatory");
      }
      const { clientFactory = defaultFactory } = opts;
      if (typeof clientFactory !== "function") {
        throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
      }
      super();
      const url = this.#getUrl(opts);
      const { href, origin, port, protocol, username, password, hostname: proxyHostname } = url;
      this[kProxy] = { uri: href, protocol };
      this[kRequestTls] = opts.requestTls;
      this[kProxyTls] = opts.proxyTls;
      this[kProxyHeaders] = opts.headers || {};
      if (opts.auth && opts.token) {
        throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
      } else if (opts.auth) {
        this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
      } else if (opts.token) {
        this[kProxyHeaders]["proxy-authorization"] = opts.token;
      } else if (username && password) {
        this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
      }
      const connect = buildConnector({ ...opts.proxyTls });
      this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
      this[kClient] = clientFactory(url, { connect });
      this[kAgent] = new Agent({
        ...opts,
        connect: async (opts2, callback) => {
          let requestedPath = opts2.host;
          if (!opts2.port) {
            requestedPath += `:${defaultProtocolPort(opts2.protocol)}`;
          }
          try {
            const { socket, statusCode } = await this[kClient].connect({
              origin,
              port,
              path: requestedPath,
              signal: opts2.signal,
              headers: {
                ...this[kProxyHeaders],
                host: opts2.host
              },
              servername: this[kProxyTls]?.servername || proxyHostname
            });
            if (statusCode !== 200) {
              socket.on("error", noop).destroy();
              callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
            }
            if (opts2.protocol !== "https:") {
              callback(null, socket);
              return;
            }
            let servername;
            if (this[kRequestTls]) {
              servername = this[kRequestTls].servername;
            } else {
              servername = opts2.servername;
            }
            this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
          } catch (err2) {
            if (err2.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
              callback(new SecureProxyConnectionError(err2));
            } else {
              callback(err2);
            }
          }
        }
      });
    }
    dispatch(opts, handler) {
      const headers = buildHeaders(opts.headers);
      throwIfProxyAuthIsSent(headers);
      if (headers && !("host" in headers) && !("Host" in headers)) {
        const { host } = new URL3(opts.origin);
        headers.host = host;
      }
      return this[kAgent].dispatch({
        ...opts,
        headers
      }, handler);
    }
    #getUrl(opts) {
      if (typeof opts === "string") {
        return new URL3(opts);
      } else if (opts instanceof URL3) {
        return opts;
      } else {
        return new URL3(opts.uri);
      }
    }
    async[kClose]() {
      await this[kAgent].close();
      await this[kClient].close();
    }
    async[kDestroy]() {
      await this[kAgent].destroy();
      await this[kClient].destroy();
    }
  }
  function buildHeaders(headers) {
    if (Array.isArray(headers)) {
      const headersPair = {};
      for (let i2 = 0;i2 < headers.length; i2 += 2) {
        headersPair[headers[i2]] = headers[i2 + 1];
      }
      return headersPair;
    }
    return headers;
  }
  function throwIfProxyAuthIsSent(headers) {
    const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
    if (existProxyAuth) {
      throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
    }
  }
  module2.exports = ProxyAgent;
});

// node_modules/undici/lib/dispatcher/env-http-proxy-agent.js
var require_env_http_proxy_agent = __commonJS((exports2, module2) => {
  var DispatcherBase = require_dispatcher_base();
  var { kClose, kDestroy, kClosed, kDestroyed, kDispatch, kNoProxyAgent, kHttpProxyAgent, kHttpsProxyAgent } = require_symbols();
  var ProxyAgent = require_proxy_agent();
  var Agent = require_agent();
  var DEFAULT_PORTS = {
    "http:": 80,
    "https:": 443
  };

  class EnvHttpProxyAgent extends DispatcherBase {
    #noProxyValue = null;
    #noProxyEntries = null;
    #opts = null;
    constructor(opts = {}) {
      super();
      this.#opts = opts;
      const { httpProxy, httpsProxy, noProxy, ...agentOpts } = opts;
      this[kNoProxyAgent] = new Agent(agentOpts);
      const HTTP_PROXY = httpProxy ?? process.env.http_proxy ?? process.env.HTTP_PROXY;
      if (HTTP_PROXY) {
        this[kHttpProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTP_PROXY });
      } else {
        this[kHttpProxyAgent] = this[kNoProxyAgent];
      }
      const HTTPS_PROXY = httpsProxy ?? process.env.https_proxy ?? process.env.HTTPS_PROXY;
      if (HTTPS_PROXY) {
        this[kHttpsProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTPS_PROXY });
      } else {
        this[kHttpsProxyAgent] = this[kHttpProxyAgent];
      }
      this.#parseNoProxy();
    }
    [kDispatch](opts, handler) {
      const url = new URL(opts.origin);
      const agent = this.#getProxyAgentForUrl(url);
      return agent.dispatch(opts, handler);
    }
    async[kClose]() {
      await this[kNoProxyAgent].close();
      if (!this[kHttpProxyAgent][kClosed]) {
        await this[kHttpProxyAgent].close();
      }
      if (!this[kHttpsProxyAgent][kClosed]) {
        await this[kHttpsProxyAgent].close();
      }
    }
    async[kDestroy](err2) {
      await this[kNoProxyAgent].destroy(err2);
      if (!this[kHttpProxyAgent][kDestroyed]) {
        await this[kHttpProxyAgent].destroy(err2);
      }
      if (!this[kHttpsProxyAgent][kDestroyed]) {
        await this[kHttpsProxyAgent].destroy(err2);
      }
    }
    #getProxyAgentForUrl(url) {
      let { protocol, host: hostname, port } = url;
      hostname = hostname.replace(/:\d*$/, "").toLowerCase();
      port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0;
      if (!this.#shouldProxy(hostname, port)) {
        return this[kNoProxyAgent];
      }
      if (protocol === "https:") {
        return this[kHttpsProxyAgent];
      }
      return this[kHttpProxyAgent];
    }
    #shouldProxy(hostname, port) {
      if (this.#noProxyChanged) {
        this.#parseNoProxy();
      }
      if (this.#noProxyEntries.length === 0) {
        return true;
      }
      if (this.#noProxyValue === "*") {
        return false;
      }
      for (let i2 = 0;i2 < this.#noProxyEntries.length; i2++) {
        const entry = this.#noProxyEntries[i2];
        if (entry.port && entry.port !== port) {
          continue;
        }
        if (!/^[.*]/.test(entry.hostname)) {
          if (hostname === entry.hostname) {
            return false;
          }
        } else {
          if (hostname.endsWith(entry.hostname.replace(/^\*/, ""))) {
            return false;
          }
        }
      }
      return true;
    }
    #parseNoProxy() {
      const noProxyValue = this.#opts.noProxy ?? this.#noProxyEnv;
      const noProxySplit = noProxyValue.split(/[,\s]/);
      const noProxyEntries = [];
      for (let i2 = 0;i2 < noProxySplit.length; i2++) {
        const entry = noProxySplit[i2];
        if (!entry) {
          continue;
        }
        const parsed = entry.match(/^(.+):(\d+)$/);
        noProxyEntries.push({
          hostname: (parsed ? parsed[1] : entry).toLowerCase(),
          port: parsed ? Number.parseInt(parsed[2], 10) : 0
        });
      }
      this.#noProxyValue = noProxyValue;
      this.#noProxyEntries = noProxyEntries;
    }
    get #noProxyChanged() {
      if (this.#opts.noProxy !== undefined) {
        return false;
      }
      return this.#noProxyValue !== this.#noProxyEnv;
    }
    get #noProxyEnv() {
      return process.env.no_proxy ?? process.env.NO_PROXY ?? "";
    }
  }
  module2.exports = EnvHttpProxyAgent;
});

// node_modules/undici/lib/handler/retry-handler.js
var require_retry_handler = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { kRetryHandlerDefaultRetry } = require_symbols();
  var { RequestRetryError } = require_errors();
  var WrapHandler = require_wrap_handler();
  var {
    isDisturbed,
    parseRangeHeader,
    wrapRequestBody
  } = require_util();
  function calculateRetryAfterHeader(retryAfter) {
    const retryTime = new Date(retryAfter).getTime();
    return isNaN(retryTime) ? 0 : retryTime - Date.now();
  }

  class RetryHandler {
    constructor(opts, { dispatch, handler }) {
      const { retryOptions, ...dispatchOpts } = opts;
      const {
        retry: retryFn,
        maxRetries,
        maxTimeout,
        minTimeout,
        timeoutFactor,
        methods,
        errorCodes,
        retryAfter,
        statusCodes
      } = retryOptions ?? {};
      this.dispatch = dispatch;
      this.handler = WrapHandler.wrap(handler);
      this.opts = { ...dispatchOpts, body: wrapRequestBody(opts.body) };
      this.retryOpts = {
        retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
        retryAfter: retryAfter ?? true,
        maxTimeout: maxTimeout ?? 30 * 1000,
        minTimeout: minTimeout ?? 500,
        timeoutFactor: timeoutFactor ?? 2,
        maxRetries: maxRetries ?? 5,
        methods: methods ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"],
        statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
        errorCodes: errorCodes ?? [
          "ECONNRESET",
          "ECONNREFUSED",
          "ENOTFOUND",
          "ENETDOWN",
          "ENETUNREACH",
          "EHOSTDOWN",
          "EHOSTUNREACH",
          "EPIPE",
          "UND_ERR_SOCKET"
        ]
      };
      this.retryCount = 0;
      this.retryCountCheckpoint = 0;
      this.headersSent = false;
      this.start = 0;
      this.end = null;
      this.etag = null;
    }
    onRequestStart(controller, context) {
      if (!this.headersSent) {
        this.handler.onRequestStart?.(controller, context);
      }
    }
    onRequestUpgrade(controller, statusCode, headers, socket) {
      this.handler.onRequestUpgrade?.(controller, statusCode, headers, socket);
    }
    static [kRetryHandlerDefaultRetry](err2, { state, opts }, cb) {
      const { statusCode, code: code2, headers } = err2;
      const { method, retryOptions } = opts;
      const {
        maxRetries,
        minTimeout,
        maxTimeout,
        timeoutFactor,
        statusCodes,
        errorCodes,
        methods
      } = retryOptions;
      const { counter } = state;
      if (code2 && code2 !== "UND_ERR_REQ_RETRY" && !errorCodes.includes(code2)) {
        cb(err2);
        return;
      }
      if (Array.isArray(methods) && !methods.includes(method)) {
        cb(err2);
        return;
      }
      if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
        cb(err2);
        return;
      }
      if (counter > maxRetries) {
        cb(err2);
        return;
      }
      let retryAfterHeader = headers?.["retry-after"];
      if (retryAfterHeader) {
        retryAfterHeader = Number(retryAfterHeader);
        retryAfterHeader = Number.isNaN(retryAfterHeader) ? calculateRetryAfterHeader(headers["retry-after"]) : retryAfterHeader * 1000;
      }
      const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(minTimeout * timeoutFactor ** (counter - 1), maxTimeout);
      setTimeout(() => cb(null), retryTimeout);
    }
    onResponseStart(controller, statusCode, headers, statusMessage) {
      this.retryCount += 1;
      if (statusCode >= 300) {
        if (this.retryOpts.statusCodes.includes(statusCode) === false) {
          this.headersSent = true;
          this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
          return;
        } else {
          throw new RequestRetryError("Request failed", statusCode, {
            headers,
            data: {
              count: this.retryCount
            }
          });
        }
      }
      if (this.headersSent) {
        if (statusCode !== 206 && (this.start > 0 || statusCode !== 200)) {
          throw new RequestRetryError("server does not support the range header and the payload was partially consumed", statusCode, {
            headers,
            data: { count: this.retryCount }
          });
        }
        const contentRange = parseRangeHeader(headers["content-range"]);
        if (!contentRange) {
          throw new RequestRetryError("Content-Range mismatch", statusCode, {
            headers,
            data: { count: this.retryCount }
          });
        }
        if (this.etag != null && this.etag !== headers.etag) {
          throw new RequestRetryError("ETag mismatch", statusCode, {
            headers,
            data: { count: this.retryCount }
          });
        }
        const { start, size, end = size ? size - 1 : null } = contentRange;
        assert(this.start === start, "content-range mismatch");
        assert(this.end == null || this.end === end, "content-range mismatch");
        return;
      }
      if (this.end == null) {
        if (statusCode === 206) {
          const range = parseRangeHeader(headers["content-range"]);
          if (range == null) {
            this.headersSent = true;
            this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
            return;
          }
          const { start, size, end = size ? size - 1 : null } = range;
          assert(start != null && Number.isFinite(start), "content-range mismatch");
          assert(end != null && Number.isFinite(end), "invalid content-length");
          this.start = start;
          this.end = end;
        }
        if (this.end == null) {
          const contentLength = headers["content-length"];
          this.end = contentLength != null ? Number(contentLength) - 1 : null;
        }
        assert(Number.isFinite(this.start));
        assert(this.end == null || Number.isFinite(this.end), "invalid content-length");
        this.resume = true;
        this.etag = headers.etag != null ? headers.etag : null;
        if (this.etag != null && this.etag[0] === "W" && this.etag[1] === "/") {
          this.etag = null;
        }
        this.headersSent = true;
        this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
      } else {
        throw new RequestRetryError("Request failed", statusCode, {
          headers,
          data: { count: this.retryCount }
        });
      }
    }
    onResponseData(controller, chunk) {
      this.start += chunk.length;
      this.handler.onResponseData?.(controller, chunk);
    }
    onResponseEnd(controller, trailers) {
      this.retryCount = 0;
      return this.handler.onResponseEnd?.(controller, trailers);
    }
    onResponseError(controller, err2) {
      if (controller?.aborted || isDisturbed(this.opts.body)) {
        this.handler.onResponseError?.(controller, err2);
        return;
      }
      if (this.retryCount - this.retryCountCheckpoint > 0) {
        this.retryCount = this.retryCountCheckpoint + (this.retryCount - this.retryCountCheckpoint);
      } else {
        this.retryCount += 1;
      }
      this.retryOpts.retry(err2, {
        state: { counter: this.retryCount },
        opts: { retryOptions: this.retryOpts, ...this.opts }
      }, onRetry.bind(this));
      function onRetry(err3) {
        if (err3 != null || controller?.aborted || isDisturbed(this.opts.body)) {
          return this.handler.onResponseError?.(controller, err3);
        }
        if (this.start !== 0) {
          const headers = { range: `bytes=${this.start}-${this.end ?? ""}` };
          if (this.etag != null) {
            headers["if-match"] = this.etag;
          }
          this.opts = {
            ...this.opts,
            headers: {
              ...this.opts.headers,
              ...headers
            }
          };
        }
        try {
          this.retryCountCheckpoint = this.retryCount;
          this.dispatch(this.opts, this);
        } catch (err4) {
          this.handler.onResponseError?.(controller, err4);
        }
      }
    }
  }
  module2.exports = RetryHandler;
});

// node_modules/undici/lib/dispatcher/retry-agent.js
var require_retry_agent = __commonJS((exports2, module2) => {
  var Dispatcher = require_dispatcher();
  var RetryHandler = require_retry_handler();

  class RetryAgent extends Dispatcher {
    #agent = null;
    #options = null;
    constructor(agent, options = {}) {
      super(options);
      this.#agent = agent;
      this.#options = options;
    }
    dispatch(opts, handler) {
      const retry = new RetryHandler({
        ...opts,
        retryOptions: this.#options
      }, {
        dispatch: this.#agent.dispatch.bind(this.#agent),
        handler
      });
      return this.#agent.dispatch(opts, retry);
    }
    close() {
      return this.#agent.close();
    }
    destroy() {
      return this.#agent.destroy();
    }
  }
  module2.exports = RetryAgent;
});

// node_modules/undici/lib/dispatcher/h2c-client.js
var require_h2c_client = __commonJS((exports2, module2) => {
  var { connect } = require("node:net");
  var { kClose, kDestroy } = require_symbols();
  var { InvalidArgumentError } = require_errors();
  var util2 = require_util();
  var Client2 = require_client();
  var DispatcherBase = require_dispatcher_base();

  class H2CClient extends DispatcherBase {
    #client = null;
    constructor(origin, clientOpts) {
      super();
      if (typeof origin === "string") {
        origin = new URL(origin);
      }
      if (origin.protocol !== "http:") {
        throw new InvalidArgumentError("h2c-client: Only h2c protocol is supported");
      }
      const { connect: connect2, maxConcurrentStreams, pipelining, ...opts } = clientOpts ?? {};
      let defaultMaxConcurrentStreams = 100;
      let defaultPipelining = 100;
      if (maxConcurrentStreams != null && Number.isInteger(maxConcurrentStreams) && maxConcurrentStreams > 0) {
        defaultMaxConcurrentStreams = maxConcurrentStreams;
      }
      if (pipelining != null && Number.isInteger(pipelining) && pipelining > 0) {
        defaultPipelining = pipelining;
      }
      if (defaultPipelining > defaultMaxConcurrentStreams) {
        throw new InvalidArgumentError("h2c-client: pipelining cannot be greater than maxConcurrentStreams");
      }
      this.#client = new Client2(origin, {
        ...opts,
        connect: this.#buildConnector(connect2),
        maxConcurrentStreams: defaultMaxConcurrentStreams,
        pipelining: defaultPipelining,
        allowH2: true
      });
    }
    #buildConnector(connectOpts) {
      return (opts, callback) => {
        const timeout = connectOpts?.connectOpts ?? 1e4;
        const { hostname, port, pathname } = opts;
        const socket = connect({
          ...opts,
          host: hostname,
          port,
          pathname
        });
        if (opts.keepAlive == null || opts.keepAlive) {
          const keepAliveInitialDelay = opts.keepAliveInitialDelay == null ? 60000 : opts.keepAliveInitialDelay;
          socket.setKeepAlive(true, keepAliveInitialDelay);
        }
        socket.alpnProtocol = "h2";
        const clearConnectTimeout = util2.setupConnectTimeout(new WeakRef(socket), { timeout, hostname, port });
        socket.setNoDelay(true).once("connect", function() {
          queueMicrotask(clearConnectTimeout);
          if (callback) {
            const cb = callback;
            callback = null;
            cb(null, this);
          }
        }).on("error", function(err2) {
          queueMicrotask(clearConnectTimeout);
          if (callback) {
            const cb = callback;
            callback = null;
            cb(err2);
          }
        });
        return socket;
      };
    }
    dispatch(opts, handler) {
      return this.#client.dispatch(opts, handler);
    }
    async[kClose]() {
      await this.#client.close();
    }
    async[kDestroy]() {
      await this.#client.destroy();
    }
  }
  module2.exports = H2CClient;
});

// node_modules/undici/lib/api/readable.js
var require_readable = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { Readable } = require("node:stream");
  var { RequestAbortedError, NotSupportedError, InvalidArgumentError, AbortError: AbortError2 } = require_errors();
  var util2 = require_util();
  var { ReadableStreamFrom } = require_util();
  var kConsume = Symbol("kConsume");
  var kReading = Symbol("kReading");
  var kBody = Symbol("kBody");
  var kAbort = Symbol("kAbort");
  var kContentType = Symbol("kContentType");
  var kContentLength = Symbol("kContentLength");
  var kUsed = Symbol("kUsed");
  var kBytesRead = Symbol("kBytesRead");
  var noop = () => {};

  class BodyReadable extends Readable {
    constructor({
      resume,
      abort,
      contentType: contentType3 = "",
      contentLength,
      highWaterMark = 64 * 1024
    }) {
      super({
        autoDestroy: true,
        read: resume,
        highWaterMark
      });
      this._readableState.dataEmitted = false;
      this[kAbort] = abort;
      this[kConsume] = null;
      this[kBytesRead] = 0;
      this[kBody] = null;
      this[kUsed] = false;
      this[kContentType] = contentType3;
      this[kContentLength] = Number.isFinite(contentLength) ? contentLength : null;
      this[kReading] = false;
    }
    _destroy(err2, callback) {
      if (!err2 && !this._readableState.endEmitted) {
        err2 = new RequestAbortedError;
      }
      if (err2) {
        this[kAbort]();
      }
      if (!this[kUsed]) {
        setImmediate(() => {
          callback(err2);
        });
      } else {
        callback(err2);
      }
    }
    on(event, listener) {
      if (event === "data" || event === "readable") {
        this[kReading] = true;
        this[kUsed] = true;
      }
      return super.on(event, listener);
    }
    addListener(event, listener) {
      return this.on(event, listener);
    }
    off(event, listener) {
      const ret = super.off(event, listener);
      if (event === "data" || event === "readable") {
        this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
      }
      return ret;
    }
    removeListener(event, listener) {
      return this.off(event, listener);
    }
    push(chunk) {
      this[kBytesRead] += chunk ? chunk.length : 0;
      if (this[kConsume] && chunk !== null) {
        consumePush(this[kConsume], chunk);
        return this[kReading] ? super.push(chunk) : true;
      }
      return super.push(chunk);
    }
    text() {
      return consume(this, "text");
    }
    json() {
      return consume(this, "json");
    }
    blob() {
      return consume(this, "blob");
    }
    bytes() {
      return consume(this, "bytes");
    }
    arrayBuffer() {
      return consume(this, "arrayBuffer");
    }
    async formData() {
      throw new NotSupportedError;
    }
    get bodyUsed() {
      return util2.isDisturbed(this);
    }
    get body() {
      if (!this[kBody]) {
        this[kBody] = ReadableStreamFrom(this);
        if (this[kConsume]) {
          this[kBody].getReader();
          assert(this[kBody].locked);
        }
      }
      return this[kBody];
    }
    async dump(opts) {
      const signal = opts?.signal;
      if (signal != null && (typeof signal !== "object" || !("aborted" in signal))) {
        throw new InvalidArgumentError("signal must be an AbortSignal");
      }
      const limit = opts?.limit && Number.isFinite(opts.limit) ? opts.limit : 128 * 1024;
      signal?.throwIfAborted();
      if (this._readableState.closeEmitted) {
        return null;
      }
      return await new Promise((resolve, reject) => {
        if (this[kContentLength] && this[kContentLength] > limit || this[kBytesRead] > limit) {
          this.destroy(new AbortError2);
        }
        if (signal) {
          const onAbort = () => {
            this.destroy(signal.reason ?? new AbortError2);
          };
          signal.addEventListener("abort", onAbort);
          this.on("close", function() {
            signal.removeEventListener("abort", onAbort);
            if (signal.aborted) {
              reject(signal.reason ?? new AbortError2);
            } else {
              resolve(null);
            }
          });
        } else {
          this.on("close", resolve);
        }
        this.on("error", noop).on("data", () => {
          if (this[kBytesRead] > limit) {
            this.destroy();
          }
        }).resume();
      });
    }
    setEncoding(encoding) {
      if (Buffer.isEncoding(encoding)) {
        this._readableState.encoding = encoding;
      }
      return this;
    }
  }
  function isLocked(bodyReadable) {
    return bodyReadable[kBody]?.locked === true || bodyReadable[kConsume] !== null;
  }
  function isUnusable(bodyReadable) {
    return util2.isDisturbed(bodyReadable) || isLocked(bodyReadable);
  }
  function consume(stream, type) {
    assert(!stream[kConsume]);
    return new Promise((resolve, reject) => {
      if (isUnusable(stream)) {
        const rState = stream._readableState;
        if (rState.destroyed && rState.closeEmitted === false) {
          stream.on("error", (err2) => {
            reject(err2);
          }).on("close", () => {
            reject(new TypeError("unusable"));
          });
        } else {
          reject(rState.errored ?? new TypeError("unusable"));
        }
      } else {
        queueMicrotask(() => {
          stream[kConsume] = {
            type,
            stream,
            resolve,
            reject,
            length: 0,
            body: []
          };
          stream.on("error", function(err2) {
            consumeFinish(this[kConsume], err2);
          }).on("close", function() {
            if (this[kConsume].body !== null) {
              consumeFinish(this[kConsume], new RequestAbortedError);
            }
          });
          consumeStart(stream[kConsume]);
        });
      }
    });
  }
  function consumeStart(consume2) {
    if (consume2.body === null) {
      return;
    }
    const { _readableState: state } = consume2.stream;
    if (state.bufferIndex) {
      const start = state.bufferIndex;
      const end = state.buffer.length;
      for (let n = start;n < end; n++) {
        consumePush(consume2, state.buffer[n]);
      }
    } else {
      for (const chunk of state.buffer) {
        consumePush(consume2, chunk);
      }
    }
    if (state.endEmitted) {
      consumeEnd(this[kConsume], this._readableState.encoding);
    } else {
      consume2.stream.on("end", function() {
        consumeEnd(this[kConsume], this._readableState.encoding);
      });
    }
    consume2.stream.resume();
    while (consume2.stream.read() != null) {}
  }
  function chunksDecode(chunks, length, encoding) {
    if (chunks.length === 0 || length === 0) {
      return "";
    }
    const buffer = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks, length);
    const bufferLength = buffer.length;
    const start = bufferLength > 2 && buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191 ? 3 : 0;
    if (!encoding || encoding === "utf8" || encoding === "utf-8") {
      return buffer.utf8Slice(start, bufferLength);
    } else {
      return buffer.subarray(start, bufferLength).toString(encoding);
    }
  }
  function chunksConcat(chunks, length) {
    if (chunks.length === 0 || length === 0) {
      return new Uint8Array(0);
    }
    if (chunks.length === 1) {
      return new Uint8Array(chunks[0]);
    }
    const buffer = new Uint8Array(Buffer.allocUnsafeSlow(length).buffer);
    let offset = 0;
    for (let i2 = 0;i2 < chunks.length; ++i2) {
      const chunk = chunks[i2];
      buffer.set(chunk, offset);
      offset += chunk.length;
    }
    return buffer;
  }
  function consumeEnd(consume2, encoding) {
    const { type, body, resolve, stream, length } = consume2;
    try {
      if (type === "text") {
        resolve(chunksDecode(body, length, encoding));
      } else if (type === "json") {
        resolve(JSON.parse(chunksDecode(body, length, encoding)));
      } else if (type === "arrayBuffer") {
        resolve(chunksConcat(body, length).buffer);
      } else if (type === "blob") {
        resolve(new Blob(body, { type: stream[kContentType] }));
      } else if (type === "bytes") {
        resolve(chunksConcat(body, length));
      }
      consumeFinish(consume2);
    } catch (err2) {
      stream.destroy(err2);
    }
  }
  function consumePush(consume2, chunk) {
    consume2.length += chunk.length;
    consume2.body.push(chunk);
  }
  function consumeFinish(consume2, err2) {
    if (consume2.body === null) {
      return;
    }
    if (err2) {
      consume2.reject(err2);
    } else {
      consume2.resolve();
    }
    consume2.type = null;
    consume2.stream = null;
    consume2.resolve = null;
    consume2.reject = null;
    consume2.length = 0;
    consume2.body = null;
  }
  module2.exports = {
    Readable: BodyReadable,
    chunksDecode
  };
});

// node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { AsyncResource } = require("node:async_hooks");
  var { Readable } = require_readable();
  var { InvalidArgumentError, RequestAbortedError } = require_errors();
  var util2 = require_util();
  function noop() {}

  class RequestHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const { signal, method, opaque, body, onInfo, responseHeaders, highWaterMark } = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) {
          throw new InvalidArgumentError("invalid highWaterMark");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_REQUEST");
      } catch (err2) {
        if (util2.isStream(body)) {
          util2.destroy(body.on("error", noop), err2);
        }
        throw err2;
      }
      this.method = method;
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.body = body;
      this.trailers = {};
      this.context = null;
      this.onInfo = onInfo || null;
      this.highWaterMark = highWaterMark;
      this.reason = null;
      this.removeAbortListener = null;
      if (signal?.aborted) {
        this.reason = signal.reason ?? new RequestAbortedError;
      } else if (signal) {
        this.removeAbortListener = util2.addAbortListener(signal, () => {
          this.reason = signal.reason ?? new RequestAbortedError;
          if (this.res) {
            util2.destroy(this.res.on("error", noop), this.reason);
          } else if (this.abort) {
            this.abort(this.reason);
          }
        });
      }
    }
    onConnect(abort, context) {
      if (this.reason) {
        abort(this.reason);
        return;
      }
      assert(this.callback);
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;
      const headers = responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
      if (statusCode < 200) {
        if (this.onInfo) {
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      const parsedHeaders = responseHeaders === "raw" ? util2.parseHeaders(rawHeaders) : headers;
      const contentType3 = parsedHeaders["content-type"];
      const contentLength = parsedHeaders["content-length"];
      const res = new Readable({
        resume,
        abort,
        contentType: contentType3,
        contentLength: this.method !== "HEAD" && contentLength ? Number(contentLength) : null,
        highWaterMark
      });
      if (this.removeAbortListener) {
        res.on("close", this.removeAbortListener);
        this.removeAbortListener = null;
      }
      this.callback = null;
      this.res = res;
      if (callback !== null) {
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          trailers: this.trailers,
          opaque,
          body: res,
          context
        });
      }
    }
    onData(chunk) {
      return this.res.push(chunk);
    }
    onComplete(trailers) {
      util2.parseHeaders(trailers, this.trailers);
      this.res.push(null);
    }
    onError(err2) {
      const { res, callback, body, opaque } = this;
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err2, { opaque });
        });
      }
      if (res) {
        this.res = null;
        queueMicrotask(() => {
          util2.destroy(res.on("error", noop), err2);
        });
      }
      if (body) {
        this.body = null;
        if (util2.isStream(body)) {
          body.on("error", noop);
          util2.destroy(body, err2);
        }
      }
      if (this.removeAbortListener) {
        this.removeAbortListener();
        this.removeAbortListener = null;
      }
    }
  }
  function request(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        request.call(this, opts, (err2, data) => {
          return err2 ? reject(err2) : resolve(data);
        });
      });
    }
    try {
      const handler = new RequestHandler(opts, callback);
      this.dispatch(opts, handler);
    } catch (err2) {
      if (typeof callback !== "function") {
        throw err2;
      }
      const opaque = opts?.opaque;
      queueMicrotask(() => callback(err2, { opaque }));
    }
  }
  module2.exports = request;
  module2.exports.RequestHandler = RequestHandler;
});

// node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS((exports2, module2) => {
  var { addAbortListener } = require_util();
  var { RequestAbortedError } = require_errors();
  var kListener = Symbol("kListener");
  var kSignal = Symbol("kSignal");
  function abort(self) {
    if (self.abort) {
      self.abort(self[kSignal]?.reason);
    } else {
      self.reason = self[kSignal]?.reason ?? new RequestAbortedError;
    }
    removeSignal(self);
  }
  function addSignal(self, signal) {
    self.reason = null;
    self[kSignal] = null;
    self[kListener] = null;
    if (!signal) {
      return;
    }
    if (signal.aborted) {
      abort(self);
      return;
    }
    self[kSignal] = signal;
    self[kListener] = () => {
      abort(self);
    };
    addAbortListener(self[kSignal], self[kListener]);
  }
  function removeSignal(self) {
    if (!self[kSignal]) {
      return;
    }
    if ("removeEventListener" in self[kSignal]) {
      self[kSignal].removeEventListener("abort", self[kListener]);
    } else {
      self[kSignal].removeListener("abort", self[kListener]);
    }
    self[kSignal] = null;
    self[kListener] = null;
  }
  module2.exports = {
    addSignal,
    removeSignal
  };
});

// node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { finished } = require("node:stream");
  var { AsyncResource } = require("node:async_hooks");
  var { InvalidArgumentError, InvalidReturnValueError } = require_errors();
  var util2 = require_util();
  var { addSignal, removeSignal } = require_abort_signal();
  function noop() {}

  class StreamHandler extends AsyncResource {
    constructor(opts, factory, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const { signal, method, opaque, body, onInfo, responseHeaders } = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("invalid factory");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_STREAM");
      } catch (err2) {
        if (util2.isStream(body)) {
          util2.destroy(body.on("error", noop), err2);
        }
        throw err2;
      }
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.factory = factory;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.context = null;
      this.trailers = null;
      this.body = body;
      this.onInfo = onInfo || null;
      if (util2.isStream(body)) {
        body.on("error", (err2) => {
          this.onError(err2);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (this.reason) {
        abort(this.reason);
        return;
      }
      assert(this.callback);
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      const { factory, opaque, context, responseHeaders } = this;
      const headers = responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
      if (statusCode < 200) {
        if (this.onInfo) {
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      this.factory = null;
      if (factory === null) {
        return;
      }
      const res = this.runInAsyncScope(factory, null, {
        statusCode,
        headers,
        opaque,
        context
      });
      if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
        throw new InvalidReturnValueError("expected Writable");
      }
      finished(res, { readable: false }, (err2) => {
        const { callback, res: res2, opaque: opaque2, trailers, abort } = this;
        this.res = null;
        if (err2 || !res2.readable) {
          util2.destroy(res2, err2);
        }
        this.callback = null;
        this.runInAsyncScope(callback, null, err2 || null, { opaque: opaque2, trailers });
        if (err2) {
          abort();
        }
      });
      res.on("drain", resume);
      this.res = res;
      const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState?.needDrain;
      return needDrain !== true;
    }
    onData(chunk) {
      const { res } = this;
      return res ? res.write(chunk) : true;
    }
    onComplete(trailers) {
      const { res } = this;
      removeSignal(this);
      if (!res) {
        return;
      }
      this.trailers = util2.parseHeaders(trailers);
      res.end();
    }
    onError(err2) {
      const { res, callback, opaque, body } = this;
      removeSignal(this);
      this.factory = null;
      if (res) {
        this.res = null;
        util2.destroy(res, err2);
      } else if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err2, { opaque });
        });
      }
      if (body) {
        this.body = null;
        util2.destroy(body, err2);
      }
    }
  }
  function stream(opts, factory, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        stream.call(this, opts, factory, (err2, data) => {
          return err2 ? reject(err2) : resolve(data);
        });
      });
    }
    try {
      const handler = new StreamHandler(opts, factory, callback);
      this.dispatch(opts, handler);
    } catch (err2) {
      if (typeof callback !== "function") {
        throw err2;
      }
      const opaque = opts?.opaque;
      queueMicrotask(() => callback(err2, { opaque }));
    }
  }
  module2.exports = stream;
});

// node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS((exports2, module2) => {
  var {
    Readable,
    Duplex,
    PassThrough
  } = require("node:stream");
  var assert = require("node:assert");
  var { AsyncResource } = require("node:async_hooks");
  var {
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError
  } = require_errors();
  var util2 = require_util();
  var { addSignal, removeSignal } = require_abort_signal();
  function noop() {}
  var kResume = Symbol("resume");

  class PipelineRequest extends Readable {
    constructor() {
      super({ autoDestroy: true });
      this[kResume] = null;
    }
    _read() {
      const { [kResume]: resume } = this;
      if (resume) {
        this[kResume] = null;
        resume();
      }
    }
    _destroy(err2, callback) {
      this._read();
      callback(err2);
    }
  }

  class PipelineResponse extends Readable {
    constructor(resume) {
      super({ autoDestroy: true });
      this[kResume] = resume;
    }
    _read() {
      this[kResume]();
    }
    _destroy(err2, callback) {
      if (!err2 && !this._readableState.endEmitted) {
        err2 = new RequestAbortedError;
      }
      callback(err2);
    }
  }

  class PipelineHandler extends AsyncResource {
    constructor(opts, handler) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof handler !== "function") {
        throw new InvalidArgumentError("invalid handler");
      }
      const { signal, method, opaque, onInfo, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      if (method === "CONNECT") {
        throw new InvalidArgumentError("invalid method");
      }
      if (onInfo && typeof onInfo !== "function") {
        throw new InvalidArgumentError("invalid onInfo callback");
      }
      super("UNDICI_PIPELINE");
      this.opaque = opaque || null;
      this.responseHeaders = responseHeaders || null;
      this.handler = handler;
      this.abort = null;
      this.context = null;
      this.onInfo = onInfo || null;
      this.req = new PipelineRequest().on("error", noop);
      this.ret = new Duplex({
        readableObjectMode: opts.objectMode,
        autoDestroy: true,
        read: () => {
          const { body } = this;
          if (body?.resume) {
            body.resume();
          }
        },
        write: (chunk, encoding, callback) => {
          const { req } = this;
          if (req.push(chunk, encoding) || req._readableState.destroyed) {
            callback();
          } else {
            req[kResume] = callback;
          }
        },
        destroy: (err2, callback) => {
          const { body, req, res, ret, abort } = this;
          if (!err2 && !ret._readableState.endEmitted) {
            err2 = new RequestAbortedError;
          }
          if (abort && err2) {
            abort();
          }
          util2.destroy(body, err2);
          util2.destroy(req, err2);
          util2.destroy(res, err2);
          removeSignal(this);
          callback(err2);
        }
      }).on("prefinish", () => {
        const { req } = this;
        req.push(null);
      });
      this.res = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      const { res } = this;
      if (this.reason) {
        abort(this.reason);
        return;
      }
      assert(!res, "pipeline cannot be retried");
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume) {
      const { opaque, handler, context } = this;
      if (statusCode < 200) {
        if (this.onInfo) {
          const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      this.res = new PipelineResponse(resume);
      let body;
      try {
        this.handler = null;
        const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
        body = this.runInAsyncScope(handler, null, {
          statusCode,
          headers,
          opaque,
          body: this.res,
          context
        });
      } catch (err2) {
        this.res.on("error", noop);
        throw err2;
      }
      if (!body || typeof body.on !== "function") {
        throw new InvalidReturnValueError("expected Readable");
      }
      body.on("data", (chunk) => {
        const { ret, body: body2 } = this;
        if (!ret.push(chunk) && body2.pause) {
          body2.pause();
        }
      }).on("error", (err2) => {
        const { ret } = this;
        util2.destroy(ret, err2);
      }).on("end", () => {
        const { ret } = this;
        ret.push(null);
      }).on("close", () => {
        const { ret } = this;
        if (!ret._readableState.ended) {
          util2.destroy(ret, new RequestAbortedError);
        }
      });
      this.body = body;
    }
    onData(chunk) {
      const { res } = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const { res } = this;
      res.push(null);
    }
    onError(err2) {
      const { ret } = this;
      this.handler = null;
      util2.destroy(ret, err2);
    }
  }
  function pipeline(opts, handler) {
    try {
      const pipelineHandler = new PipelineHandler(opts, handler);
      this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
      return pipelineHandler.ret;
    } catch (err2) {
      return new PassThrough().destroy(err2);
    }
  }
  module2.exports = pipeline;
});

// node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS((exports2, module2) => {
  var { InvalidArgumentError, SocketError } = require_errors();
  var { AsyncResource } = require("node:async_hooks");
  var assert = require("node:assert");
  var util2 = require_util();
  var { addSignal, removeSignal } = require_abort_signal();

  class UpgradeHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      const { signal, opaque, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_UPGRADE");
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.callback = callback;
      this.abort = null;
      this.context = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (this.reason) {
        abort(this.reason);
        return;
      }
      assert(this.callback);
      this.abort = abort;
      this.context = null;
    }
    onHeaders() {
      throw new SocketError("bad upgrade", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
      assert(statusCode === 101);
      const { callback, opaque, context } = this;
      removeSignal(this);
      this.callback = null;
      const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
      this.runInAsyncScope(callback, null, null, {
        headers,
        socket,
        opaque,
        context
      });
    }
    onError(err2) {
      const { callback, opaque } = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err2, { opaque });
        });
      }
    }
  }
  function upgrade(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        upgrade.call(this, opts, (err2, data) => {
          return err2 ? reject(err2) : resolve(data);
        });
      });
    }
    try {
      const upgradeHandler = new UpgradeHandler(opts, callback);
      const upgradeOpts = {
        ...opts,
        method: opts.method || "GET",
        upgrade: opts.protocol || "Websocket"
      };
      this.dispatch(upgradeOpts, upgradeHandler);
    } catch (err2) {
      if (typeof callback !== "function") {
        throw err2;
      }
      const opaque = opts?.opaque;
      queueMicrotask(() => callback(err2, { opaque }));
    }
  }
  module2.exports = upgrade;
});

// node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { AsyncResource } = require("node:async_hooks");
  var { InvalidArgumentError, SocketError } = require_errors();
  var util2 = require_util();
  var { addSignal, removeSignal } = require_abort_signal();

  class ConnectHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      const { signal, opaque, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_CONNECT");
      this.opaque = opaque || null;
      this.responseHeaders = responseHeaders || null;
      this.callback = callback;
      this.abort = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (this.reason) {
        abort(this.reason);
        return;
      }
      assert(this.callback);
      this.abort = abort;
      this.context = context;
    }
    onHeaders() {
      throw new SocketError("bad connect", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
      const { callback, opaque, context } = this;
      removeSignal(this);
      this.callback = null;
      let headers = rawHeaders;
      if (headers != null) {
        headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
      }
      this.runInAsyncScope(callback, null, null, {
        statusCode,
        headers,
        socket,
        opaque,
        context
      });
    }
    onError(err2) {
      const { callback, opaque } = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err2, { opaque });
        });
      }
    }
  }
  function connect(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        connect.call(this, opts, (err2, data) => {
          return err2 ? reject(err2) : resolve(data);
        });
      });
    }
    try {
      const connectHandler = new ConnectHandler(opts, callback);
      const connectOptions = { ...opts, method: "CONNECT" };
      this.dispatch(connectOptions, connectHandler);
    } catch (err2) {
      if (typeof callback !== "function") {
        throw err2;
      }
      const opaque = opts?.opaque;
      queueMicrotask(() => callback(err2, { opaque }));
    }
  }
  module2.exports = connect;
});

// node_modules/undici/lib/api/index.js
var require_api = __commonJS((exports2, module2) => {
  module2.exports.request = require_api_request();
  module2.exports.stream = require_api_stream();
  module2.exports.pipeline = require_api_pipeline();
  module2.exports.upgrade = require_api_upgrade();
  module2.exports.connect = require_api_connect();
});

// node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS((exports2, module2) => {
  var { UndiciError } = require_errors();

  class MockNotMatchedError extends UndiciError {
    constructor(message) {
      super(message);
      this.name = "MockNotMatchedError";
      this.message = message || "The request does not match any registered mock dispatches";
      this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
    }
  }
  module2.exports = {
    MockNotMatchedError
  };
});

// node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS((exports2, module2) => {
  module2.exports = {
    kAgent: Symbol("agent"),
    kOptions: Symbol("options"),
    kFactory: Symbol("factory"),
    kDispatches: Symbol("dispatches"),
    kDispatchKey: Symbol("dispatch key"),
    kDefaultHeaders: Symbol("default headers"),
    kDefaultTrailers: Symbol("default trailers"),
    kContentLength: Symbol("content length"),
    kMockAgent: Symbol("mock agent"),
    kMockAgentSet: Symbol("mock agent set"),
    kMockAgentGet: Symbol("mock agent get"),
    kMockDispatch: Symbol("mock dispatch"),
    kClose: Symbol("close"),
    kOriginalClose: Symbol("original agent close"),
    kOriginalDispatch: Symbol("original dispatch"),
    kOrigin: Symbol("origin"),
    kIsMockActive: Symbol("is mock active"),
    kNetConnect: Symbol("net connect"),
    kGetNetConnect: Symbol("get net connect"),
    kConnected: Symbol("connected"),
    kIgnoreTrailingSlash: Symbol("ignore trailing slash"),
    kMockAgentMockCallHistoryInstance: Symbol("mock agent mock call history name"),
    kMockAgentRegisterCallHistory: Symbol("mock agent register mock call history"),
    kMockAgentAddCallHistoryLog: Symbol("mock agent add call history log"),
    kMockAgentIsCallHistoryEnabled: Symbol("mock agent is call history enabled"),
    kMockCallHistoryAddLog: Symbol("mock call history add log")
  };
});

// node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS((exports2, module2) => {
  var { MockNotMatchedError } = require_mock_errors();
  var {
    kDispatches,
    kMockAgent,
    kOriginalDispatch,
    kOrigin,
    kGetNetConnect
  } = require_mock_symbols();
  var { serializePathWithQuery } = require_util();
  var { STATUS_CODES } = require("node:http");
  var {
    types: {
      isPromise
    }
  } = require("node:util");
  var { InvalidArgumentError } = require_errors();
  function matchValue(match, value) {
    if (typeof match === "string") {
      return match === value;
    }
    if (match instanceof RegExp) {
      return match.test(value);
    }
    if (typeof match === "function") {
      return match(value) === true;
    }
    return false;
  }
  function lowerCaseEntries(headers) {
    return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
      return [headerName.toLocaleLowerCase(), headerValue];
    }));
  }
  function getHeaderByName(headers, key) {
    if (Array.isArray(headers)) {
      for (let i2 = 0;i2 < headers.length; i2 += 2) {
        if (headers[i2].toLocaleLowerCase() === key.toLocaleLowerCase()) {
          return headers[i2 + 1];
        }
      }
      return;
    } else if (typeof headers.get === "function") {
      return headers.get(key);
    } else {
      return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
    }
  }
  function buildHeadersFromArray(headers) {
    const clone = headers.slice();
    const entries = [];
    for (let index = 0;index < clone.length; index += 2) {
      entries.push([clone[index], clone[index + 1]]);
    }
    return Object.fromEntries(entries);
  }
  function matchHeaders(mockDispatch2, headers) {
    if (typeof mockDispatch2.headers === "function") {
      if (Array.isArray(headers)) {
        headers = buildHeadersFromArray(headers);
      }
      return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
    }
    if (typeof mockDispatch2.headers === "undefined") {
      return true;
    }
    if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
      return false;
    }
    for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
      const headerValue = getHeaderByName(headers, matchHeaderName);
      if (!matchValue(matchHeaderValue, headerValue)) {
        return false;
      }
    }
    return true;
  }
  function safeUrl(path) {
    if (typeof path !== "string") {
      return path;
    }
    const pathSegments = path.split("?", 3);
    if (pathSegments.length !== 2) {
      return path;
    }
    const qp = new URLSearchParams(pathSegments.pop());
    qp.sort();
    return [...pathSegments, qp.toString()].join("?");
  }
  function matchKey(mockDispatch2, { path, method, body, headers }) {
    const pathMatch = matchValue(mockDispatch2.path, path);
    const methodMatch = matchValue(mockDispatch2.method, method);
    const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body) : true;
    const headersMatch = matchHeaders(mockDispatch2, headers);
    return pathMatch && methodMatch && bodyMatch && headersMatch;
  }
  function getResponseData(data) {
    if (Buffer.isBuffer(data)) {
      return data;
    } else if (data instanceof Uint8Array) {
      return data;
    } else if (data instanceof ArrayBuffer) {
      return data;
    } else if (typeof data === "object") {
      return JSON.stringify(data);
    } else if (data) {
      return data.toString();
    } else {
      return "";
    }
  }
  function getMockDispatch(mockDispatches, key) {
    const basePath = key.query ? serializePathWithQuery(key.path, key.query) : key.path;
    const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
    const resolvedPathWithoutTrailingSlash = removeTrailingSlash(resolvedPath);
    let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path, ignoreTrailingSlash }) => {
      return ignoreTrailingSlash ? matchValue(removeTrailingSlash(safeUrl(path)), resolvedPathWithoutTrailingSlash) : matchValue(safeUrl(path), resolvedPath);
    });
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}' on path '${resolvedPath}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue(body, key.body) : true);
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}' on path '${resolvedPath}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));
    if (matchedMockDispatches.length === 0) {
      const headers = typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers;
      throw new MockNotMatchedError(`Mock dispatch not matched for headers '${headers}' on path '${resolvedPath}'`);
    }
    return matchedMockDispatches[0];
  }
  function addMockDispatch(mockDispatches, key, data, opts) {
    const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false, ...opts };
    const replyData = typeof data === "function" ? { callback: data } : { ...data };
    const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
    mockDispatches.push(newMockDispatch);
    return newMockDispatch;
  }
  function deleteMockDispatch(mockDispatches, key) {
    const index = mockDispatches.findIndex((dispatch) => {
      if (!dispatch.consumed) {
        return false;
      }
      return matchKey(dispatch, key);
    });
    if (index !== -1) {
      mockDispatches.splice(index, 1);
    }
  }
  function removeTrailingSlash(path) {
    while (path.endsWith("/")) {
      path = path.slice(0, -1);
    }
    if (path.length === 0) {
      path = "/";
    }
    return path;
  }
  function buildKey(opts) {
    const { path, method, body, headers, query } = opts;
    return {
      path,
      method,
      body,
      headers,
      query
    };
  }
  function generateKeyValues(data) {
    const keys = Object.keys(data);
    const result2 = [];
    for (let i2 = 0;i2 < keys.length; ++i2) {
      const key = keys[i2];
      const value = data[key];
      const name = Buffer.from(`${key}`);
      if (Array.isArray(value)) {
        for (let j = 0;j < value.length; ++j) {
          result2.push(name, Buffer.from(`${value[j]}`));
        }
      } else {
        result2.push(name, Buffer.from(`${value}`));
      }
    }
    return result2;
  }
  function getStatusText(statusCode) {
    return STATUS_CODES[statusCode] || "unknown";
  }
  async function getResponse(body) {
    const buffers = [];
    for await (const data of body) {
      buffers.push(data);
    }
    return Buffer.concat(buffers).toString("utf8");
  }
  function mockDispatch(opts, handler) {
    const key = buildKey(opts);
    const mockDispatch2 = getMockDispatch(this[kDispatches], key);
    mockDispatch2.timesInvoked++;
    if (mockDispatch2.data.callback) {
      mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
    }
    const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch2;
    const { timesInvoked, times } = mockDispatch2;
    mockDispatch2.consumed = !persist && timesInvoked >= times;
    mockDispatch2.pending = timesInvoked < times;
    if (error !== null) {
      deleteMockDispatch(this[kDispatches], key);
      handler.onError(error);
      return true;
    }
    if (typeof delay === "number" && delay > 0) {
      setTimeout(() => {
        handleReply(this[kDispatches]);
      }, delay);
    } else {
      handleReply(this[kDispatches]);
    }
    function handleReply(mockDispatches, _data = data) {
      const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
      const body = typeof _data === "function" ? _data({ ...opts, headers: optsHeaders }) : _data;
      if (isPromise(body)) {
        body.then((newData) => handleReply(mockDispatches, newData));
        return;
      }
      const responseData = getResponseData(body);
      const responseHeaders = generateKeyValues(headers);
      const responseTrailers = generateKeyValues(trailers);
      handler.onConnect?.((err2) => handler.onError(err2), null);
      handler.onHeaders?.(statusCode, responseHeaders, resume, getStatusText(statusCode));
      handler.onData?.(Buffer.from(responseData));
      handler.onComplete?.(responseTrailers);
      deleteMockDispatch(mockDispatches, key);
    }
    function resume() {}
    return true;
  }
  function buildMockDispatch() {
    const agent = this[kMockAgent];
    const origin = this[kOrigin];
    const originalDispatch = this[kOriginalDispatch];
    return function dispatch(opts, handler) {
      if (agent.isMockActive) {
        try {
          mockDispatch.call(this, opts, handler);
        } catch (error) {
          if (error instanceof MockNotMatchedError) {
            const netConnect = agent[kGetNetConnect]();
            if (netConnect === false) {
              throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
            }
            if (checkNetConnect(netConnect, origin)) {
              originalDispatch.call(this, opts, handler);
            } else {
              throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
            }
          } else {
            throw error;
          }
        }
      } else {
        originalDispatch.call(this, opts, handler);
      }
    };
  }
  function checkNetConnect(netConnect, origin) {
    const url = new URL(origin);
    if (netConnect === true) {
      return true;
    } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
      return true;
    }
    return false;
  }
  function buildAndValidateMockOptions(opts) {
    if (opts) {
      const { agent, ...mockOptions } = opts;
      if ("enableCallHistory" in mockOptions && typeof mockOptions.enableCallHistory !== "boolean") {
        throw new InvalidArgumentError("options.enableCallHistory must to be a boolean");
      }
      return mockOptions;
    }
  }
  module2.exports = {
    getResponseData,
    getMockDispatch,
    addMockDispatch,
    deleteMockDispatch,
    buildKey,
    generateKeyValues,
    matchValue,
    getResponse,
    getStatusText,
    mockDispatch,
    buildMockDispatch,
    checkNetConnect,
    buildAndValidateMockOptions,
    getHeaderByName,
    buildHeadersFromArray
  };
});

// node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS((exports2, module2) => {
  var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kDispatchKey,
    kDefaultHeaders,
    kDefaultTrailers,
    kContentLength,
    kMockDispatch,
    kIgnoreTrailingSlash
  } = require_mock_symbols();
  var { InvalidArgumentError } = require_errors();
  var { serializePathWithQuery } = require_util();

  class MockScope {
    constructor(mockDispatch) {
      this[kMockDispatch] = mockDispatch;
    }
    delay(waitInMs) {
      if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
        throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
      }
      this[kMockDispatch].delay = waitInMs;
      return this;
    }
    persist() {
      this[kMockDispatch].persist = true;
      return this;
    }
    times(repeatTimes) {
      if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
        throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
      }
      this[kMockDispatch].times = repeatTimes;
      return this;
    }
  }

  class MockInterceptor {
    constructor(opts, mockDispatches) {
      if (typeof opts !== "object") {
        throw new InvalidArgumentError("opts must be an object");
      }
      if (typeof opts.path === "undefined") {
        throw new InvalidArgumentError("opts.path must be defined");
      }
      if (typeof opts.method === "undefined") {
        opts.method = "GET";
      }
      if (typeof opts.path === "string") {
        if (opts.query) {
          opts.path = serializePathWithQuery(opts.path, opts.query);
        } else {
          const parsedURL = new URL(opts.path, "data://");
          opts.path = parsedURL.pathname + parsedURL.search;
        }
      }
      if (typeof opts.method === "string") {
        opts.method = opts.method.toUpperCase();
      }
      this[kDispatchKey] = buildKey(opts);
      this[kDispatches] = mockDispatches;
      this[kIgnoreTrailingSlash] = opts.ignoreTrailingSlash ?? false;
      this[kDefaultHeaders] = {};
      this[kDefaultTrailers] = {};
      this[kContentLength] = false;
    }
    createMockScopeDispatchData({ statusCode, data, responseOptions }) {
      const responseData = getResponseData(data);
      const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
      const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
      const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
      return { statusCode, data, headers, trailers };
    }
    validateReplyParameters(replyParameters) {
      if (typeof replyParameters.statusCode === "undefined") {
        throw new InvalidArgumentError("statusCode must be defined");
      }
      if (typeof replyParameters.responseOptions !== "object" || replyParameters.responseOptions === null) {
        throw new InvalidArgumentError("responseOptions must be an object");
      }
    }
    reply(replyOptionsCallbackOrStatusCode) {
      if (typeof replyOptionsCallbackOrStatusCode === "function") {
        const wrappedDefaultsCallback = (opts) => {
          const resolvedData = replyOptionsCallbackOrStatusCode(opts);
          if (typeof resolvedData !== "object" || resolvedData === null) {
            throw new InvalidArgumentError("reply options callback must return an object");
          }
          const replyParameters2 = { data: "", responseOptions: {}, ...resolvedData };
          this.validateReplyParameters(replyParameters2);
          return {
            ...this.createMockScopeDispatchData(replyParameters2)
          };
        };
        const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback, { ignoreTrailingSlash: this[kIgnoreTrailingSlash] });
        return new MockScope(newMockDispatch2);
      }
      const replyParameters = {
        statusCode: replyOptionsCallbackOrStatusCode,
        data: arguments[1] === undefined ? "" : arguments[1],
        responseOptions: arguments[2] === undefined ? {} : arguments[2]
      };
      this.validateReplyParameters(replyParameters);
      const dispatchData = this.createMockScopeDispatchData(replyParameters);
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData, { ignoreTrailingSlash: this[kIgnoreTrailingSlash] });
      return new MockScope(newMockDispatch);
    }
    replyWithError(error) {
      if (typeof error === "undefined") {
        throw new InvalidArgumentError("error must be defined");
      }
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error }, { ignoreTrailingSlash: this[kIgnoreTrailingSlash] });
      return new MockScope(newMockDispatch);
    }
    defaultReplyHeaders(headers) {
      if (typeof headers === "undefined") {
        throw new InvalidArgumentError("headers must be defined");
      }
      this[kDefaultHeaders] = headers;
      return this;
    }
    defaultReplyTrailers(trailers) {
      if (typeof trailers === "undefined") {
        throw new InvalidArgumentError("trailers must be defined");
      }
      this[kDefaultTrailers] = trailers;
      return this;
    }
    replyContentLength() {
      this[kContentLength] = true;
      return this;
    }
  }
  module2.exports.MockInterceptor = MockInterceptor;
  module2.exports.MockScope = MockScope;
});

// node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS((exports2, module2) => {
  var { promisify } = require("node:util");
  var Client2 = require_client();
  var { buildMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kMockAgent,
    kClose,
    kOriginalClose,
    kOrigin,
    kOriginalDispatch,
    kConnected,
    kIgnoreTrailingSlash
  } = require_mock_symbols();
  var { MockInterceptor } = require_mock_interceptor();
  var Symbols = require_symbols();
  var { InvalidArgumentError } = require_errors();

  class MockClient extends Client2 {
    constructor(origin, opts) {
      if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      super(origin, opts);
      this[kMockAgent] = opts.agent;
      this[kOrigin] = origin;
      this[kIgnoreTrailingSlash] = opts.ignoreTrailingSlash ?? false;
      this[kDispatches] = [];
      this[kConnected] = 1;
      this[kOriginalDispatch] = this.dispatch;
      this[kOriginalClose] = this.close.bind(this);
      this.dispatch = buildMockDispatch.call(this);
      this.close = this[kClose];
    }
    get [Symbols.kConnected]() {
      return this[kConnected];
    }
    intercept(opts) {
      return new MockInterceptor(opts && { ignoreTrailingSlash: this[kIgnoreTrailingSlash], ...opts }, this[kDispatches]);
    }
    async[kClose]() {
      await promisify(this[kOriginalClose])();
      this[kConnected] = 0;
      this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
    }
  }
  module2.exports = MockClient;
});

// node_modules/undici/lib/mock/mock-call-history.js
var require_mock_call_history = __commonJS((exports2, module2) => {
  var { kMockCallHistoryAddLog } = require_mock_symbols();
  var { InvalidArgumentError } = require_errors();
  function handleFilterCallsWithOptions(criteria, options, handler, store) {
    switch (options.operator) {
      case "OR":
        store.push(...handler(criteria));
        return store;
      case "AND":
        return handler.call({ logs: store }, criteria);
      default:
        throw new InvalidArgumentError("options.operator must to be a case insensitive string equal to 'OR' or 'AND'");
    }
  }
  function buildAndValidateFilterCallsOptions(options = {}) {
    const finalOptions = {};
    if ("operator" in options) {
      if (typeof options.operator !== "string" || options.operator.toUpperCase() !== "OR" && options.operator.toUpperCase() !== "AND") {
        throw new InvalidArgumentError("options.operator must to be a case insensitive string equal to 'OR' or 'AND'");
      }
      return {
        ...finalOptions,
        operator: options.operator.toUpperCase()
      };
    }
    return finalOptions;
  }
  function makeFilterCalls(parameterName) {
    return (parameterValue) => {
      if (typeof parameterValue === "string" || parameterValue == null) {
        return this.logs.filter((log) => {
          return log[parameterName] === parameterValue;
        });
      }
      if (parameterValue instanceof RegExp) {
        return this.logs.filter((log) => {
          return parameterValue.test(log[parameterName]);
        });
      }
      throw new InvalidArgumentError(`${parameterName} parameter should be one of string, regexp, undefined or null`);
    };
  }
  function computeUrlWithMaybeSearchParameters(requestInit) {
    try {
      const url = new URL(requestInit.path, requestInit.origin);
      if (url.search.length !== 0) {
        return url;
      }
      url.search = new URLSearchParams(requestInit.query).toString();
      return url;
    } catch (error) {
      throw new InvalidArgumentError("An error occurred when computing MockCallHistoryLog.url", { cause: error });
    }
  }

  class MockCallHistoryLog {
    constructor(requestInit = {}) {
      this.body = requestInit.body;
      this.headers = requestInit.headers;
      this.method = requestInit.method;
      const url = computeUrlWithMaybeSearchParameters(requestInit);
      this.fullUrl = url.toString();
      this.origin = url.origin;
      this.path = url.pathname;
      this.searchParams = Object.fromEntries(url.searchParams);
      this.protocol = url.protocol;
      this.host = url.host;
      this.port = url.port;
      this.hash = url.hash;
    }
    toMap() {
      return new Map([
        ["protocol", this.protocol],
        ["host", this.host],
        ["port", this.port],
        ["origin", this.origin],
        ["path", this.path],
        ["hash", this.hash],
        ["searchParams", this.searchParams],
        ["fullUrl", this.fullUrl],
        ["method", this.method],
        ["body", this.body],
        ["headers", this.headers]
      ]);
    }
    toString() {
      const options = { betweenKeyValueSeparator: "->", betweenPairSeparator: "|" };
      let result2 = "";
      this.toMap().forEach((value, key) => {
        if (typeof value === "string" || value === undefined || value === null) {
          result2 = `${result2}${key}${options.betweenKeyValueSeparator}${value}${options.betweenPairSeparator}`;
        }
        if (typeof value === "object" && value !== null || Array.isArray(value)) {
          result2 = `${result2}${key}${options.betweenKeyValueSeparator}${JSON.stringify(value)}${options.betweenPairSeparator}`;
        }
      });
      return result2.slice(0, -1);
    }
  }

  class MockCallHistory {
    logs = [];
    calls() {
      return this.logs;
    }
    firstCall() {
      return this.logs.at(0);
    }
    lastCall() {
      return this.logs.at(-1);
    }
    nthCall(number) {
      if (typeof number !== "number") {
        throw new InvalidArgumentError("nthCall must be called with a number");
      }
      if (!Number.isInteger(number)) {
        throw new InvalidArgumentError("nthCall must be called with an integer");
      }
      if (Math.sign(number) !== 1) {
        throw new InvalidArgumentError("nthCall must be called with a positive value. use firstCall or lastCall instead");
      }
      return this.logs.at(number - 1);
    }
    filterCalls(criteria, options) {
      if (this.logs.length === 0) {
        return this.logs;
      }
      if (typeof criteria === "function") {
        return this.logs.filter(criteria);
      }
      if (criteria instanceof RegExp) {
        return this.logs.filter((log) => {
          return criteria.test(log.toString());
        });
      }
      if (typeof criteria === "object" && criteria !== null) {
        if (Object.keys(criteria).length === 0) {
          return this.logs;
        }
        const finalOptions = { operator: "OR", ...buildAndValidateFilterCallsOptions(options) };
        let maybeDuplicatedLogsFiltered = [];
        if ("protocol" in criteria) {
          maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.protocol, finalOptions, this.filterCallsByProtocol, maybeDuplicatedLogsFiltered);
        }
        if ("host" in criteria) {
          maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.host, finalOptions, this.filterCallsByHost, maybeDuplicatedLogsFiltered);
        }
        if ("port" in criteria) {
          maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.port, finalOptions, this.filterCallsByPort, maybeDuplicatedLogsFiltered);
        }
        if ("origin" in criteria) {
          maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.origin, finalOptions, this.filterCallsByOrigin, maybeDuplicatedLogsFiltered);
        }
        if ("path" in criteria) {
          maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.path, finalOptions, this.filterCallsByPath, maybeDuplicatedLogsFiltered);
        }
        if ("hash" in criteria) {
          maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.hash, finalOptions, this.filterCallsByHash, maybeDuplicatedLogsFiltered);
        }
        if ("fullUrl" in criteria) {
          maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.fullUrl, finalOptions, this.filterCallsByFullUrl, maybeDuplicatedLogsFiltered);
        }
        if ("method" in criteria) {
          maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.method, finalOptions, this.filterCallsByMethod, maybeDuplicatedLogsFiltered);
        }
        const uniqLogsFiltered = [...new Set(maybeDuplicatedLogsFiltered)];
        return uniqLogsFiltered;
      }
      throw new InvalidArgumentError("criteria parameter should be one of function, regexp, or object");
    }
    filterCallsByProtocol = makeFilterCalls.call(this, "protocol");
    filterCallsByHost = makeFilterCalls.call(this, "host");
    filterCallsByPort = makeFilterCalls.call(this, "port");
    filterCallsByOrigin = makeFilterCalls.call(this, "origin");
    filterCallsByPath = makeFilterCalls.call(this, "path");
    filterCallsByHash = makeFilterCalls.call(this, "hash");
    filterCallsByFullUrl = makeFilterCalls.call(this, "fullUrl");
    filterCallsByMethod = makeFilterCalls.call(this, "method");
    clear() {
      this.logs = [];
    }
    [kMockCallHistoryAddLog](requestInit) {
      const log = new MockCallHistoryLog(requestInit);
      this.logs.push(log);
      return log;
    }
    *[Symbol.iterator]() {
      for (const log of this.calls()) {
        yield log;
      }
    }
  }
  module2.exports.MockCallHistory = MockCallHistory;
  module2.exports.MockCallHistoryLog = MockCallHistoryLog;
});

// node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS((exports2, module2) => {
  var { promisify } = require("node:util");
  var Pool = require_pool();
  var { buildMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kMockAgent,
    kClose,
    kOriginalClose,
    kOrigin,
    kOriginalDispatch,
    kConnected,
    kIgnoreTrailingSlash
  } = require_mock_symbols();
  var { MockInterceptor } = require_mock_interceptor();
  var Symbols = require_symbols();
  var { InvalidArgumentError } = require_errors();

  class MockPool extends Pool {
    constructor(origin, opts) {
      if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      super(origin, opts);
      this[kMockAgent] = opts.agent;
      this[kOrigin] = origin;
      this[kIgnoreTrailingSlash] = opts.ignoreTrailingSlash ?? false;
      this[kDispatches] = [];
      this[kConnected] = 1;
      this[kOriginalDispatch] = this.dispatch;
      this[kOriginalClose] = this.close.bind(this);
      this.dispatch = buildMockDispatch.call(this);
      this.close = this[kClose];
    }
    get [Symbols.kConnected]() {
      return this[kConnected];
    }
    intercept(opts) {
      return new MockInterceptor(opts && { ignoreTrailingSlash: this[kIgnoreTrailingSlash], ...opts }, this[kDispatches]);
    }
    async[kClose]() {
      await promisify(this[kOriginalClose])();
      this[kConnected] = 0;
      this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
    }
  }
  module2.exports = MockPool;
});

// node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS((exports2, module2) => {
  var { Transform } = require("node:stream");
  var { Console } = require("node:console");
  var PERSISTENT = process.versions.icu ? "✅" : "Y ";
  var NOT_PERSISTENT = process.versions.icu ? "❌" : "N ";
  module2.exports = class PendingInterceptorsFormatter {
    constructor({ disableColors } = {}) {
      this.transform = new Transform({
        transform(chunk, _enc, cb) {
          cb(null, chunk);
        }
      });
      this.logger = new Console({
        stdout: this.transform,
        inspectOptions: {
          colors: !disableColors && !process.env.CI
        }
      });
    }
    format(pendingInterceptors) {
      const withPrettyHeaders = pendingInterceptors.map(({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
        Method: method,
        Origin: origin,
        Path: path,
        "Status code": statusCode,
        Persistent: persist ? PERSISTENT : NOT_PERSISTENT,
        Invocations: timesInvoked,
        Remaining: persist ? Infinity : times - timesInvoked
      }));
      this.logger.table(withPrettyHeaders);
      return this.transform.read().toString();
    }
  };
});

// node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS((exports2, module2) => {
  var { kClients } = require_symbols();
  var Agent = require_agent();
  var {
    kAgent,
    kMockAgentSet,
    kMockAgentGet,
    kDispatches,
    kIsMockActive,
    kNetConnect,
    kGetNetConnect,
    kOptions,
    kFactory,
    kMockAgentRegisterCallHistory,
    kMockAgentIsCallHistoryEnabled,
    kMockAgentAddCallHistoryLog,
    kMockAgentMockCallHistoryInstance,
    kMockCallHistoryAddLog
  } = require_mock_symbols();
  var MockClient = require_mock_client();
  var MockPool = require_mock_pool();
  var { matchValue, buildAndValidateMockOptions } = require_mock_utils();
  var { InvalidArgumentError, UndiciError } = require_errors();
  var Dispatcher = require_dispatcher();
  var PendingInterceptorsFormatter = require_pending_interceptors_formatter();
  var { MockCallHistory } = require_mock_call_history();

  class MockAgent extends Dispatcher {
    constructor(opts) {
      super(opts);
      const mockOptions = buildAndValidateMockOptions(opts);
      this[kNetConnect] = true;
      this[kIsMockActive] = true;
      this[kMockAgentIsCallHistoryEnabled] = mockOptions?.enableCallHistory ?? false;
      if (opts?.agent && typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      const agent = opts?.agent ? opts.agent : new Agent(opts);
      this[kAgent] = agent;
      this[kClients] = agent[kClients];
      this[kOptions] = mockOptions;
      if (this[kMockAgentIsCallHistoryEnabled]) {
        this[kMockAgentRegisterCallHistory]();
      }
    }
    get(origin) {
      let dispatcher = this[kMockAgentGet](origin);
      if (!dispatcher) {
        dispatcher = this[kFactory](origin);
        this[kMockAgentSet](origin, dispatcher);
      }
      return dispatcher;
    }
    dispatch(opts, handler) {
      this.get(opts.origin);
      this[kMockAgentAddCallHistoryLog](opts);
      return this[kAgent].dispatch(opts, handler);
    }
    async close() {
      this.clearCallHistory();
      await this[kAgent].close();
      this[kClients].clear();
    }
    deactivate() {
      this[kIsMockActive] = false;
    }
    activate() {
      this[kIsMockActive] = true;
    }
    enableNetConnect(matcher) {
      if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
        if (Array.isArray(this[kNetConnect])) {
          this[kNetConnect].push(matcher);
        } else {
          this[kNetConnect] = [matcher];
        }
      } else if (typeof matcher === "undefined") {
        this[kNetConnect] = true;
      } else {
        throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
      }
    }
    disableNetConnect() {
      this[kNetConnect] = false;
    }
    enableCallHistory() {
      this[kMockAgentIsCallHistoryEnabled] = true;
      return this;
    }
    disableCallHistory() {
      this[kMockAgentIsCallHistoryEnabled] = false;
      return this;
    }
    getCallHistory() {
      return this[kMockAgentMockCallHistoryInstance];
    }
    clearCallHistory() {
      if (this[kMockAgentMockCallHistoryInstance] !== undefined) {
        this[kMockAgentMockCallHistoryInstance].clear();
      }
    }
    get isMockActive() {
      return this[kIsMockActive];
    }
    [kMockAgentRegisterCallHistory]() {
      if (this[kMockAgentMockCallHistoryInstance] === undefined) {
        this[kMockAgentMockCallHistoryInstance] = new MockCallHistory;
      }
    }
    [kMockAgentAddCallHistoryLog](opts) {
      if (this[kMockAgentIsCallHistoryEnabled]) {
        this[kMockAgentRegisterCallHistory]();
        this[kMockAgentMockCallHistoryInstance][kMockCallHistoryAddLog](opts);
      }
    }
    [kMockAgentSet](origin, dispatcher) {
      this[kClients].set(origin, dispatcher);
    }
    [kFactory](origin) {
      const mockOptions = Object.assign({ agent: this }, this[kOptions]);
      return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
    }
    [kMockAgentGet](origin) {
      const client = this[kClients].get(origin);
      if (client) {
        return client;
      }
      if (typeof origin !== "string") {
        const dispatcher = this[kFactory]("http://localhost:9999");
        this[kMockAgentSet](origin, dispatcher);
        return dispatcher;
      }
      for (const [keyMatcher, nonExplicitDispatcher] of Array.from(this[kClients])) {
        if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
          const dispatcher = this[kFactory](origin);
          this[kMockAgentSet](origin, dispatcher);
          dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
          return dispatcher;
        }
      }
    }
    [kGetNetConnect]() {
      return this[kNetConnect];
    }
    pendingInterceptors() {
      const mockAgentClients = this[kClients];
      return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);
    }
    assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter } = {}) {
      const pending = this.pendingInterceptors();
      if (pending.length === 0) {
        return;
      }
      throw new UndiciError(pending.length === 1 ? `1 interceptor is pending:

${pendingInterceptorsFormatter.format(pending)}`.trim() : `${pending.length} interceptors are pending:

${pendingInterceptorsFormatter.format(pending)}`.trim());
    }
  }
  module2.exports = MockAgent;
});

// node_modules/undici/lib/global.js
var require_global2 = __commonJS((exports2, module2) => {
  var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
  var { InvalidArgumentError } = require_errors();
  var Agent = require_agent();
  if (getGlobalDispatcher() === undefined) {
    setGlobalDispatcher(new Agent);
  }
  function setGlobalDispatcher(agent) {
    if (!agent || typeof agent.dispatch !== "function") {
      throw new InvalidArgumentError("Argument agent must implement Agent");
    }
    Object.defineProperty(globalThis, globalDispatcher, {
      value: agent,
      writable: true,
      enumerable: false,
      configurable: false
    });
  }
  function getGlobalDispatcher() {
    return globalThis[globalDispatcher];
  }
  module2.exports = {
    setGlobalDispatcher,
    getGlobalDispatcher
  };
});

// node_modules/undici/lib/handler/decorator-handler.js
var require_decorator_handler = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var WrapHandler = require_wrap_handler();
  module2.exports = class DecoratorHandler {
    #handler;
    #onCompleteCalled = false;
    #onErrorCalled = false;
    #onResponseStartCalled = false;
    constructor(handler) {
      if (typeof handler !== "object" || handler === null) {
        throw new TypeError("handler must be an object");
      }
      this.#handler = WrapHandler.wrap(handler);
    }
    onRequestStart(...args) {
      this.#handler.onRequestStart?.(...args);
    }
    onRequestUpgrade(...args) {
      assert(!this.#onCompleteCalled);
      assert(!this.#onErrorCalled);
      return this.#handler.onRequestUpgrade?.(...args);
    }
    onResponseStart(...args) {
      assert(!this.#onCompleteCalled);
      assert(!this.#onErrorCalled);
      assert(!this.#onResponseStartCalled);
      this.#onResponseStartCalled = true;
      return this.#handler.onResponseStart?.(...args);
    }
    onResponseData(...args) {
      assert(!this.#onCompleteCalled);
      assert(!this.#onErrorCalled);
      return this.#handler.onResponseData?.(...args);
    }
    onResponseEnd(...args) {
      assert(!this.#onCompleteCalled);
      assert(!this.#onErrorCalled);
      this.#onCompleteCalled = true;
      return this.#handler.onResponseEnd?.(...args);
    }
    onResponseError(...args) {
      this.#onErrorCalled = true;
      return this.#handler.onResponseError?.(...args);
    }
    onBodySent() {}
  };
});

// node_modules/undici/lib/handler/redirect-handler.js
var require_redirect_handler = __commonJS((exports2, module2) => {
  var util2 = require_util();
  var { kBodyUsed } = require_symbols();
  var assert = require("node:assert");
  var { InvalidArgumentError } = require_errors();
  var EE = require("node:events");
  var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
  var kBody = Symbol("body");
  var noop = () => {};

  class BodyAsyncIterable {
    constructor(body) {
      this[kBody] = body;
      this[kBodyUsed] = false;
    }
    async* [Symbol.asyncIterator]() {
      assert(!this[kBodyUsed], "disturbed");
      this[kBodyUsed] = true;
      yield* this[kBody];
    }
  }

  class RedirectHandler {
    static buildDispatch(dispatcher, maxRedirections) {
      if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
        throw new InvalidArgumentError("maxRedirections must be a positive number");
      }
      const dispatch = dispatcher.dispatch.bind(dispatcher);
      return (opts, originalHandler) => dispatch(opts, new RedirectHandler(dispatch, maxRedirections, opts, originalHandler));
    }
    constructor(dispatch, maxRedirections, opts, handler) {
      if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
        throw new InvalidArgumentError("maxRedirections must be a positive number");
      }
      this.dispatch = dispatch;
      this.location = null;
      this.opts = { ...opts, maxRedirections: 0 };
      this.maxRedirections = maxRedirections;
      this.handler = handler;
      this.history = [];
      if (util2.isStream(this.opts.body)) {
        if (util2.bodyLength(this.opts.body) === 0) {
          this.opts.body.on("data", function() {
            assert(false);
          });
        }
        if (typeof this.opts.body.readableDidRead !== "boolean") {
          this.opts.body[kBodyUsed] = false;
          EE.prototype.on.call(this.opts.body, "data", function() {
            this[kBodyUsed] = true;
          });
        }
      } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
        this.opts.body = new BodyAsyncIterable(this.opts.body);
      } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util2.isIterable(this.opts.body) && !util2.isFormDataLike(this.opts.body)) {
        this.opts.body = new BodyAsyncIterable(this.opts.body);
      }
    }
    onRequestStart(controller, context) {
      this.handler.onRequestStart?.(controller, { ...context, history: this.history });
    }
    onRequestUpgrade(controller, statusCode, headers, socket) {
      this.handler.onRequestUpgrade?.(controller, statusCode, headers, socket);
    }
    onResponseStart(controller, statusCode, headers, statusMessage) {
      if (this.opts.throwOnMaxRedirect && this.history.length >= this.maxRedirections) {
        throw new Error("max redirects");
      }
      if ((statusCode === 301 || statusCode === 302) && this.opts.method === "POST") {
        this.opts.method = "GET";
        if (util2.isStream(this.opts.body)) {
          util2.destroy(this.opts.body.on("error", noop));
        }
        this.opts.body = null;
      }
      if (statusCode === 303 && this.opts.method !== "HEAD") {
        this.opts.method = "GET";
        if (util2.isStream(this.opts.body)) {
          util2.destroy(this.opts.body.on("error", noop));
        }
        this.opts.body = null;
      }
      this.location = this.history.length >= this.maxRedirections || util2.isDisturbed(this.opts.body) || redirectableStatusCodes.indexOf(statusCode) === -1 ? null : headers.location;
      if (this.opts.origin) {
        this.history.push(new URL(this.opts.path, this.opts.origin));
      }
      if (!this.location) {
        this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
        return;
      }
      const { origin, pathname, search: search2 } = util2.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
      const path = search2 ? `${pathname}${search2}` : pathname;
      this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
      this.opts.path = path;
      this.opts.origin = origin;
      this.opts.maxRedirections = 0;
      this.opts.query = null;
    }
    onResponseData(controller, chunk) {
      if (this.location) {} else {
        this.handler.onResponseData?.(controller, chunk);
      }
    }
    onResponseEnd(controller, trailers) {
      if (this.location) {
        this.dispatch(this.opts, this);
      } else {
        this.handler.onResponseEnd(controller, trailers);
      }
    }
    onResponseError(controller, error) {
      this.handler.onResponseError?.(controller, error);
    }
  }
  function shouldRemoveHeader(header, removeContent, unknownOrigin) {
    if (header.length === 4) {
      return util2.headerNameToString(header) === "host";
    }
    if (removeContent && util2.headerNameToString(header).startsWith("content-")) {
      return true;
    }
    if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
      const name = util2.headerNameToString(header);
      return name === "authorization" || name === "cookie" || name === "proxy-authorization";
    }
    return false;
  }
  function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
    const ret = [];
    if (Array.isArray(headers)) {
      for (let i2 = 0;i2 < headers.length; i2 += 2) {
        if (!shouldRemoveHeader(headers[i2], removeContent, unknownOrigin)) {
          ret.push(headers[i2], headers[i2 + 1]);
        }
      }
    } else if (headers && typeof headers === "object") {
      const entries = typeof headers[Symbol.iterator] === "function" ? headers : Object.entries(headers);
      for (const [key, value] of entries) {
        if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
          ret.push(key, value);
        }
      }
    } else {
      assert(headers == null, "headers must be an object or an array");
    }
    return ret;
  }
  module2.exports = RedirectHandler;
});

// node_modules/undici/lib/interceptor/redirect.js
var require_redirect = __commonJS((exports2, module2) => {
  var RedirectHandler = require_redirect_handler();
  function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections } = {}) {
    return (dispatch) => {
      return function Intercept(opts, handler) {
        const { maxRedirections = defaultMaxRedirections, ...rest } = opts;
        if (maxRedirections == null || maxRedirections === 0) {
          return dispatch(opts, handler);
        }
        const dispatchOpts = { ...rest, maxRedirections: 0 };
        const redirectHandler = new RedirectHandler(dispatch, maxRedirections, dispatchOpts, handler);
        return dispatch(dispatchOpts, redirectHandler);
      };
    };
  }
  module2.exports = createRedirectInterceptor;
});

// node_modules/undici/lib/interceptor/response-error.js
var require_response_error = __commonJS((exports2, module2) => {
  var DecoratorHandler = require_decorator_handler();
  var { ResponseError } = require_errors();

  class ResponseErrorHandler extends DecoratorHandler {
    #statusCode;
    #contentType;
    #decoder;
    #headers;
    #body;
    constructor(_opts, { handler }) {
      super(handler);
    }
    #checkContentType(contentType3) {
      return (this.#contentType ?? "").indexOf(contentType3) === 0;
    }
    onRequestStart(controller, context) {
      this.#statusCode = 0;
      this.#contentType = null;
      this.#decoder = null;
      this.#headers = null;
      this.#body = "";
      return super.onRequestStart(controller, context);
    }
    onResponseStart(controller, statusCode, headers, statusMessage) {
      this.#statusCode = statusCode;
      this.#headers = headers;
      this.#contentType = headers["content-type"];
      if (this.#statusCode < 400) {
        return super.onResponseStart(controller, statusCode, headers, statusMessage);
      }
      if (this.#checkContentType("application/json") || this.#checkContentType("text/plain")) {
        this.#decoder = new TextDecoder("utf-8");
      }
    }
    onResponseData(controller, chunk) {
      if (this.#statusCode < 400) {
        return super.onResponseData(controller, chunk);
      }
      this.#body += this.#decoder?.decode(chunk, { stream: true }) ?? "";
    }
    onResponseEnd(controller, trailers) {
      if (this.#statusCode >= 400) {
        this.#body += this.#decoder?.decode(undefined, { stream: false }) ?? "";
        if (this.#checkContentType("application/json")) {
          try {
            this.#body = JSON.parse(this.#body);
          } catch {}
        }
        let err2;
        const stackTraceLimit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        try {
          err2 = new ResponseError("Response Error", this.#statusCode, {
            body: this.#body,
            headers: this.#headers
          });
        } finally {
          Error.stackTraceLimit = stackTraceLimit;
        }
        super.onResponseError(controller, err2);
      } else {
        super.onResponseEnd(controller, trailers);
      }
    }
    onResponseError(controller, err2) {
      super.onResponseError(controller, err2);
    }
  }
  module2.exports = () => {
    return (dispatch) => {
      return function Intercept(opts, handler) {
        return dispatch(opts, new ResponseErrorHandler(opts, { handler }));
      };
    };
  };
});

// node_modules/undici/lib/interceptor/retry.js
var require_retry = __commonJS((exports2, module2) => {
  var RetryHandler = require_retry_handler();
  module2.exports = (globalOpts) => {
    return (dispatch) => {
      return function retryInterceptor(opts, handler) {
        return dispatch(opts, new RetryHandler({ ...opts, retryOptions: { ...globalOpts, ...opts.retryOptions } }, {
          handler,
          dispatch
        }));
      };
    };
  };
});

// node_modules/undici/lib/interceptor/dump.js
var require_dump = __commonJS((exports2, module2) => {
  var { InvalidArgumentError, RequestAbortedError } = require_errors();
  var DecoratorHandler = require_decorator_handler();

  class DumpHandler extends DecoratorHandler {
    #maxSize = 1024 * 1024;
    #dumped = false;
    #size = 0;
    #controller = null;
    aborted = false;
    reason = false;
    constructor({ maxSize, signal }, handler) {
      if (maxSize != null && (!Number.isFinite(maxSize) || maxSize < 1)) {
        throw new InvalidArgumentError("maxSize must be a number greater than 0");
      }
      super(handler);
      this.#maxSize = maxSize ?? this.#maxSize;
    }
    #abort(reason) {
      this.aborted = true;
      this.reason = reason;
    }
    onRequestStart(controller, context) {
      controller.abort = this.#abort.bind(this);
      this.#controller = controller;
      return super.onRequestStart(controller, context);
    }
    onResponseStart(controller, statusCode, headers, statusMessage) {
      const contentLength = headers["content-length"];
      if (contentLength != null && contentLength > this.#maxSize) {
        throw new RequestAbortedError(`Response size (${contentLength}) larger than maxSize (${this.#maxSize})`);
      }
      if (this.aborted === true) {
        return true;
      }
      return super.onResponseStart(controller, statusCode, headers, statusMessage);
    }
    onResponseError(controller, err2) {
      if (this.#dumped) {
        return;
      }
      err2 = this.#controller.reason ?? err2;
      super.onResponseError(controller, err2);
    }
    onResponseData(controller, chunk) {
      this.#size = this.#size + chunk.length;
      if (this.#size >= this.#maxSize) {
        this.#dumped = true;
        if (this.aborted === true) {
          super.onResponseError(controller, this.reason);
        } else {
          super.onResponseEnd(controller, {});
        }
      }
      return true;
    }
    onResponseEnd(controller, trailers) {
      if (this.#dumped) {
        return;
      }
      if (this.#controller.aborted === true) {
        super.onResponseError(controller, this.reason);
        return;
      }
      super.onResponseEnd(controller, trailers);
    }
  }
  function createDumpInterceptor({ maxSize: defaultMaxSize } = {
    maxSize: 1024 * 1024
  }) {
    return (dispatch) => {
      return function Intercept(opts, handler) {
        const { dumpMaxSize = defaultMaxSize } = opts;
        const dumpHandler = new DumpHandler({ maxSize: dumpMaxSize, signal: opts.signal }, handler);
        return dispatch(opts, dumpHandler);
      };
    };
  }
  module2.exports = createDumpInterceptor;
});

// node_modules/undici/lib/interceptor/dns.js
var require_dns = __commonJS((exports2, module2) => {
  var { isIP } = require("node:net");
  var { lookup } = require("node:dns");
  var DecoratorHandler = require_decorator_handler();
  var { InvalidArgumentError, InformationalError } = require_errors();
  var maxInt = Math.pow(2, 31) - 1;

  class DNSInstance {
    #maxTTL = 0;
    #maxItems = 0;
    #records = new Map;
    dualStack = true;
    affinity = null;
    lookup = null;
    pick = null;
    constructor(opts) {
      this.#maxTTL = opts.maxTTL;
      this.#maxItems = opts.maxItems;
      this.dualStack = opts.dualStack;
      this.affinity = opts.affinity;
      this.lookup = opts.lookup ?? this.#defaultLookup;
      this.pick = opts.pick ?? this.#defaultPick;
    }
    get full() {
      return this.#records.size === this.#maxItems;
    }
    runLookup(origin, opts, cb) {
      const ips = this.#records.get(origin.hostname);
      if (ips == null && this.full) {
        cb(null, origin);
        return;
      }
      const newOpts = {
        affinity: this.affinity,
        dualStack: this.dualStack,
        lookup: this.lookup,
        pick: this.pick,
        ...opts.dns,
        maxTTL: this.#maxTTL,
        maxItems: this.#maxItems
      };
      if (ips == null) {
        this.lookup(origin, newOpts, (err2, addresses) => {
          if (err2 || addresses == null || addresses.length === 0) {
            cb(err2 ?? new InformationalError("No DNS entries found"));
            return;
          }
          this.setRecords(origin, addresses);
          const records = this.#records.get(origin.hostname);
          const ip = this.pick(origin, records, newOpts.affinity);
          let port;
          if (typeof ip.port === "number") {
            port = `:${ip.port}`;
          } else if (origin.port !== "") {
            port = `:${origin.port}`;
          } else {
            port = "";
          }
          cb(null, new URL(`${origin.protocol}//${ip.family === 6 ? `[${ip.address}]` : ip.address}${port}`));
        });
      } else {
        const ip = this.pick(origin, ips, newOpts.affinity);
        if (ip == null) {
          this.#records.delete(origin.hostname);
          this.runLookup(origin, opts, cb);
          return;
        }
        let port;
        if (typeof ip.port === "number") {
          port = `:${ip.port}`;
        } else if (origin.port !== "") {
          port = `:${origin.port}`;
        } else {
          port = "";
        }
        cb(null, new URL(`${origin.protocol}//${ip.family === 6 ? `[${ip.address}]` : ip.address}${port}`));
      }
    }
    #defaultLookup(origin, opts, cb) {
      lookup(origin.hostname, {
        all: true,
        family: this.dualStack === false ? this.affinity : 0,
        order: "ipv4first"
      }, (err2, addresses) => {
        if (err2) {
          return cb(err2);
        }
        const results = new Map;
        for (const addr of addresses) {
          results.set(`${addr.address}:${addr.family}`, addr);
        }
        cb(null, results.values());
      });
    }
    #defaultPick(origin, hostnameRecords, affinity) {
      let ip = null;
      const { records, offset } = hostnameRecords;
      let family;
      if (this.dualStack) {
        if (affinity == null) {
          if (offset == null || offset === maxInt) {
            hostnameRecords.offset = 0;
            affinity = 4;
          } else {
            hostnameRecords.offset++;
            affinity = (hostnameRecords.offset & 1) === 1 ? 6 : 4;
          }
        }
        if (records[affinity] != null && records[affinity].ips.length > 0) {
          family = records[affinity];
        } else {
          family = records[affinity === 4 ? 6 : 4];
        }
      } else {
        family = records[affinity];
      }
      if (family == null || family.ips.length === 0) {
        return ip;
      }
      if (family.offset == null || family.offset === maxInt) {
        family.offset = 0;
      } else {
        family.offset++;
      }
      const position = family.offset % family.ips.length;
      ip = family.ips[position] ?? null;
      if (ip == null) {
        return ip;
      }
      if (Date.now() - ip.timestamp > ip.ttl) {
        family.ips.splice(position, 1);
        return this.pick(origin, hostnameRecords, affinity);
      }
      return ip;
    }
    pickFamily(origin, ipFamily) {
      const records = this.#records.get(origin.hostname)?.records;
      if (!records) {
        return null;
      }
      const family = records[ipFamily];
      if (!family) {
        return null;
      }
      if (family.offset == null || family.offset === maxInt) {
        family.offset = 0;
      } else {
        family.offset++;
      }
      const position = family.offset % family.ips.length;
      const ip = family.ips[position] ?? null;
      if (ip == null) {
        return ip;
      }
      if (Date.now() - ip.timestamp > ip.ttl) {
        family.ips.splice(position, 1);
      }
      return ip;
    }
    setRecords(origin, addresses) {
      const timestamp = Date.now();
      const records = { records: { 4: null, 6: null } };
      for (const record of addresses) {
        record.timestamp = timestamp;
        if (typeof record.ttl === "number") {
          record.ttl = Math.min(record.ttl, this.#maxTTL);
        } else {
          record.ttl = this.#maxTTL;
        }
        const familyRecords = records.records[record.family] ?? { ips: [] };
        familyRecords.ips.push(record);
        records.records[record.family] = familyRecords;
      }
      this.#records.set(origin.hostname, records);
    }
    deleteRecords(origin) {
      this.#records.delete(origin.hostname);
    }
    getHandler(meta, opts) {
      return new DNSDispatchHandler(this, meta, opts);
    }
  }

  class DNSDispatchHandler extends DecoratorHandler {
    #state = null;
    #opts = null;
    #dispatch = null;
    #origin = null;
    #controller = null;
    #newOrigin = null;
    #firstTry = true;
    constructor(state, { origin, handler, dispatch, newOrigin }, opts) {
      super(handler);
      this.#origin = origin;
      this.#newOrigin = newOrigin;
      this.#opts = { ...opts };
      this.#state = state;
      this.#dispatch = dispatch;
    }
    onResponseError(controller, err2) {
      switch (err2.code) {
        case "ETIMEDOUT":
        case "ECONNREFUSED": {
          if (this.#state.dualStack) {
            if (!this.#firstTry) {
              super.onResponseError(controller, err2);
              return;
            }
            this.#firstTry = false;
            const otherFamily = this.#newOrigin.hostname[0] === "[" ? 4 : 6;
            const ip = this.#state.pickFamily(this.#origin, otherFamily);
            if (ip == null) {
              super.onResponseError(controller, err2);
              return;
            }
            let port;
            if (typeof ip.port === "number") {
              port = `:${ip.port}`;
            } else if (this.#origin.port !== "") {
              port = `:${this.#origin.port}`;
            } else {
              port = "";
            }
            const dispatchOpts = {
              ...this.#opts,
              origin: `${this.#origin.protocol}//${ip.family === 6 ? `[${ip.address}]` : ip.address}${port}`
            };
            this.#dispatch(dispatchOpts, this);
            return;
          }
          super.onResponseError(controller, err2);
          break;
        }
        case "ENOTFOUND":
          this.#state.deleteRecords(this.#origin);
          super.onResponseError(controller, err2);
          break;
        default:
          super.onResponseError(controller, err2);
          break;
      }
    }
  }
  module2.exports = (interceptorOpts) => {
    if (interceptorOpts?.maxTTL != null && (typeof interceptorOpts?.maxTTL !== "number" || interceptorOpts?.maxTTL < 0)) {
      throw new InvalidArgumentError("Invalid maxTTL. Must be a positive number");
    }
    if (interceptorOpts?.maxItems != null && (typeof interceptorOpts?.maxItems !== "number" || interceptorOpts?.maxItems < 1)) {
      throw new InvalidArgumentError("Invalid maxItems. Must be a positive number and greater than zero");
    }
    if (interceptorOpts?.affinity != null && interceptorOpts?.affinity !== 4 && interceptorOpts?.affinity !== 6) {
      throw new InvalidArgumentError("Invalid affinity. Must be either 4 or 6");
    }
    if (interceptorOpts?.dualStack != null && typeof interceptorOpts?.dualStack !== "boolean") {
      throw new InvalidArgumentError("Invalid dualStack. Must be a boolean");
    }
    if (interceptorOpts?.lookup != null && typeof interceptorOpts?.lookup !== "function") {
      throw new InvalidArgumentError("Invalid lookup. Must be a function");
    }
    if (interceptorOpts?.pick != null && typeof interceptorOpts?.pick !== "function") {
      throw new InvalidArgumentError("Invalid pick. Must be a function");
    }
    const dualStack = interceptorOpts?.dualStack ?? true;
    let affinity;
    if (dualStack) {
      affinity = interceptorOpts?.affinity ?? null;
    } else {
      affinity = interceptorOpts?.affinity ?? 4;
    }
    const opts = {
      maxTTL: interceptorOpts?.maxTTL ?? 1e4,
      lookup: interceptorOpts?.lookup ?? null,
      pick: interceptorOpts?.pick ?? null,
      dualStack,
      affinity,
      maxItems: interceptorOpts?.maxItems ?? Infinity
    };
    const instance = new DNSInstance(opts);
    return (dispatch) => {
      return function dnsInterceptor(origDispatchOpts, handler) {
        const origin = origDispatchOpts.origin.constructor === URL ? origDispatchOpts.origin : new URL(origDispatchOpts.origin);
        if (isIP(origin.hostname) !== 0) {
          return dispatch(origDispatchOpts, handler);
        }
        instance.runLookup(origin, origDispatchOpts, (err2, newOrigin) => {
          if (err2) {
            return handler.onResponseError(null, err2);
          }
          const dispatchOpts = {
            ...origDispatchOpts,
            servername: origin.hostname,
            origin: newOrigin.origin,
            headers: {
              host: origin.host,
              ...origDispatchOpts.headers
            }
          };
          dispatch(dispatchOpts, instance.getHandler({ origin, dispatch, handler, newOrigin }, origDispatchOpts));
        });
        return true;
      };
    };
  };
});

// node_modules/undici/lib/util/cache.js
var require_cache = __commonJS((exports2, module2) => {
  var {
    safeHTTPMethods
  } = require_util();
  function makeCacheKey(opts) {
    if (!opts.origin) {
      throw new Error("opts.origin is undefined");
    }
    const headers = normaliseHeaders(opts);
    return {
      origin: opts.origin.toString(),
      method: opts.method,
      path: opts.path,
      headers
    };
  }
  function normaliseHeaders(opts) {
    let headers;
    if (opts.headers == null) {
      headers = {};
    } else if (typeof opts.headers[Symbol.iterator] === "function") {
      headers = {};
      for (const x2 of opts.headers) {
        if (!Array.isArray(x2)) {
          throw new Error("opts.headers is not a valid header map");
        }
        const [key, val] = x2;
        if (typeof key !== "string" || typeof val !== "string") {
          throw new Error("opts.headers is not a valid header map");
        }
        headers[key.toLowerCase()] = val;
      }
    } else if (typeof opts.headers === "object") {
      headers = {};
      for (const key of Object.keys(opts.headers)) {
        headers[key.toLowerCase()] = opts.headers[key];
      }
    } else {
      throw new Error("opts.headers is not an object");
    }
    return headers;
  }
  function assertCacheKey(key) {
    if (typeof key !== "object") {
      throw new TypeError(`expected key to be object, got ${typeof key}`);
    }
    for (const property of ["origin", "method", "path"]) {
      if (typeof key[property] !== "string") {
        throw new TypeError(`expected key.${property} to be string, got ${typeof key[property]}`);
      }
    }
    if (key.headers !== undefined && typeof key.headers !== "object") {
      throw new TypeError(`expected headers to be object, got ${typeof key}`);
    }
  }
  function assertCacheValue(value) {
    if (typeof value !== "object") {
      throw new TypeError(`expected value to be object, got ${typeof value}`);
    }
    for (const property of ["statusCode", "cachedAt", "staleAt", "deleteAt"]) {
      if (typeof value[property] !== "number") {
        throw new TypeError(`expected value.${property} to be number, got ${typeof value[property]}`);
      }
    }
    if (typeof value.statusMessage !== "string") {
      throw new TypeError(`expected value.statusMessage to be string, got ${typeof value.statusMessage}`);
    }
    if (value.headers != null && typeof value.headers !== "object") {
      throw new TypeError(`expected value.rawHeaders to be object, got ${typeof value.headers}`);
    }
    if (value.vary !== undefined && typeof value.vary !== "object") {
      throw new TypeError(`expected value.vary to be object, got ${typeof value.vary}`);
    }
    if (value.etag !== undefined && typeof value.etag !== "string") {
      throw new TypeError(`expected value.etag to be string, got ${typeof value.etag}`);
    }
  }
  function parseCacheControlHeader(header) {
    const output = {};
    let directives;
    if (Array.isArray(header)) {
      directives = [];
      for (const directive of header) {
        directives.push(...directive.split(","));
      }
    } else {
      directives = header.split(",");
    }
    for (let i2 = 0;i2 < directives.length; i2++) {
      const directive = directives[i2].toLowerCase();
      const keyValueDelimiter = directive.indexOf("=");
      let key;
      let value;
      if (keyValueDelimiter !== -1) {
        key = directive.substring(0, keyValueDelimiter).trimStart();
        value = directive.substring(keyValueDelimiter + 1);
      } else {
        key = directive.trim();
      }
      switch (key) {
        case "min-fresh":
        case "max-stale":
        case "max-age":
        case "s-maxage":
        case "stale-while-revalidate":
        case "stale-if-error": {
          if (value === undefined || value[0] === " ") {
            continue;
          }
          if (value.length >= 2 && value[0] === '"' && value[value.length - 1] === '"') {
            value = value.substring(1, value.length - 1);
          }
          const parsedValue = parseInt(value, 10);
          if (parsedValue !== parsedValue) {
            continue;
          }
          if (key === "max-age" && key in output && output[key] >= parsedValue) {
            continue;
          }
          output[key] = parsedValue;
          break;
        }
        case "private":
        case "no-cache": {
          if (value) {
            if (value[0] === '"') {
              const headers = [value.substring(1)];
              let foundEndingQuote = value[value.length - 1] === '"';
              if (!foundEndingQuote) {
                for (let j = i2 + 1;j < directives.length; j++) {
                  const nextPart = directives[j];
                  const nextPartLength = nextPart.length;
                  headers.push(nextPart.trim());
                  if (nextPartLength !== 0 && nextPart[nextPartLength - 1] === '"') {
                    foundEndingQuote = true;
                    break;
                  }
                }
              }
              if (foundEndingQuote) {
                let lastHeader = headers[headers.length - 1];
                if (lastHeader[lastHeader.length - 1] === '"') {
                  lastHeader = lastHeader.substring(0, lastHeader.length - 1);
                  headers[headers.length - 1] = lastHeader;
                }
                if (key in output) {
                  output[key] = output[key].concat(headers);
                } else {
                  output[key] = headers;
                }
              }
            } else {
              if (key in output) {
                output[key] = output[key].concat(value);
              } else {
                output[key] = [value];
              }
            }
            break;
          }
        }
        case "public":
        case "no-store":
        case "must-revalidate":
        case "proxy-revalidate":
        case "immutable":
        case "no-transform":
        case "must-understand":
        case "only-if-cached":
          if (value) {
            continue;
          }
          output[key] = true;
          break;
        default:
          continue;
      }
    }
    return output;
  }
  function parseVaryHeader(varyHeader, headers) {
    if (typeof varyHeader === "string" && varyHeader.includes("*")) {
      return headers;
    }
    const output = {};
    const varyingHeaders = typeof varyHeader === "string" ? varyHeader.split(",") : varyHeader;
    for (const header of varyingHeaders) {
      const trimmedHeader = header.trim().toLowerCase();
      output[trimmedHeader] = headers[trimmedHeader] ?? null;
    }
    return output;
  }
  function isEtagUsable(etag) {
    if (etag.length <= 2) {
      return false;
    }
    if (etag[0] === '"' && etag[etag.length - 1] === '"') {
      return !(etag[1] === '"' || etag.startsWith('"W/'));
    }
    if (etag.startsWith('W/"') && etag[etag.length - 1] === '"') {
      return etag.length !== 4;
    }
    return false;
  }
  function assertCacheStore(store, name = "CacheStore") {
    if (typeof store !== "object" || store === null) {
      throw new TypeError(`expected type of ${name} to be a CacheStore, got ${store === null ? "null" : typeof store}`);
    }
    for (const fn of ["get", "createWriteStream", "delete"]) {
      if (typeof store[fn] !== "function") {
        throw new TypeError(`${name} needs to have a \`${fn}()\` function`);
      }
    }
  }
  function assertCacheMethods(methods, name = "CacheMethods") {
    if (!Array.isArray(methods)) {
      throw new TypeError(`expected type of ${name} needs to be an array, got ${methods === null ? "null" : typeof methods}`);
    }
    if (methods.length === 0) {
      throw new TypeError(`${name} needs to have at least one method`);
    }
    for (const method of methods) {
      if (!safeHTTPMethods.includes(method)) {
        throw new TypeError(`element of ${name}-array needs to be one of following values: ${safeHTTPMethods.join(", ")}, got ${method}`);
      }
    }
  }
  module2.exports = {
    makeCacheKey,
    normaliseHeaders,
    assertCacheKey,
    assertCacheValue,
    parseCacheControlHeader,
    parseVaryHeader,
    isEtagUsable,
    assertCacheMethods,
    assertCacheStore
  };
});

// node_modules/undici/lib/util/date.js
var require_date = __commonJS((exports2, module2) => {
  var IMF_DAYS = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"];
  var IMF_SPACES = [4, 7, 11, 16, 25];
  var IMF_MONTHS = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
  var IMF_COLONS = [19, 22];
  var ASCTIME_SPACES = [3, 7, 10, 19];
  var RFC850_DAYS = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"];
  function parseHttpDate(date, now) {
    date = date.toLowerCase();
    switch (date[3]) {
      case ",":
        return parseImfDate(date);
      case " ":
        return parseAscTimeDate(date);
      default:
        return parseRfc850Date(date, now);
    }
  }
  function parseImfDate(date) {
    if (date.length !== 29) {
      return;
    }
    if (!date.endsWith("gmt")) {
      return;
    }
    for (const spaceInx of IMF_SPACES) {
      if (date[spaceInx] !== " ") {
        return;
      }
    }
    for (const colonIdx of IMF_COLONS) {
      if (date[colonIdx] !== ":") {
        return;
      }
    }
    const dayName = date.substring(0, 3);
    if (!IMF_DAYS.includes(dayName)) {
      return;
    }
    const dayString = date.substring(5, 7);
    const day = Number.parseInt(dayString);
    if (isNaN(day) || day < 10 && dayString[0] !== "0") {
      return;
    }
    const month = date.substring(8, 11);
    const monthIdx = IMF_MONTHS.indexOf(month);
    if (monthIdx === -1) {
      return;
    }
    const year = Number.parseInt(date.substring(12, 16));
    if (isNaN(year)) {
      return;
    }
    const hourString = date.substring(17, 19);
    const hour = Number.parseInt(hourString);
    if (isNaN(hour) || hour < 10 && hourString[0] !== "0") {
      return;
    }
    const minuteString = date.substring(20, 22);
    const minute = Number.parseInt(minuteString);
    if (isNaN(minute) || minute < 10 && minuteString[0] !== "0") {
      return;
    }
    const secondString = date.substring(23, 25);
    const second = Number.parseInt(secondString);
    if (isNaN(second) || second < 10 && secondString[0] !== "0") {
      return;
    }
    return new Date(Date.UTC(year, monthIdx, day, hour, minute, second));
  }
  function parseAscTimeDate(date) {
    if (date.length !== 24) {
      return;
    }
    for (const spaceIdx of ASCTIME_SPACES) {
      if (date[spaceIdx] !== " ") {
        return;
      }
    }
    const dayName = date.substring(0, 3);
    if (!IMF_DAYS.includes(dayName)) {
      return;
    }
    const month = date.substring(4, 7);
    const monthIdx = IMF_MONTHS.indexOf(month);
    if (monthIdx === -1) {
      return;
    }
    const dayString = date.substring(8, 10);
    const day = Number.parseInt(dayString);
    if (isNaN(day) || day < 10 && dayString[0] !== " ") {
      return;
    }
    const hourString = date.substring(11, 13);
    const hour = Number.parseInt(hourString);
    if (isNaN(hour) || hour < 10 && hourString[0] !== "0") {
      return;
    }
    const minuteString = date.substring(14, 16);
    const minute = Number.parseInt(minuteString);
    if (isNaN(minute) || minute < 10 && minuteString[0] !== "0") {
      return;
    }
    const secondString = date.substring(17, 19);
    const second = Number.parseInt(secondString);
    if (isNaN(second) || second < 10 && secondString[0] !== "0") {
      return;
    }
    const year = Number.parseInt(date.substring(20, 24));
    if (isNaN(year)) {
      return;
    }
    return new Date(Date.UTC(year, monthIdx, day, hour, minute, second));
  }
  function parseRfc850Date(date, now = new Date) {
    if (!date.endsWith("gmt")) {
      return;
    }
    const commaIndex = date.indexOf(",");
    if (commaIndex === -1) {
      return;
    }
    if (date.length - commaIndex - 1 !== 23) {
      return;
    }
    const dayName = date.substring(0, commaIndex);
    if (!RFC850_DAYS.includes(dayName)) {
      return;
    }
    if (date[commaIndex + 1] !== " " || date[commaIndex + 4] !== "-" || date[commaIndex + 8] !== "-" || date[commaIndex + 11] !== " " || date[commaIndex + 14] !== ":" || date[commaIndex + 17] !== ":" || date[commaIndex + 20] !== " ") {
      return;
    }
    const dayString = date.substring(commaIndex + 2, commaIndex + 4);
    const day = Number.parseInt(dayString);
    if (isNaN(day) || day < 10 && dayString[0] !== "0") {
      return;
    }
    const month = date.substring(commaIndex + 5, commaIndex + 8);
    const monthIdx = IMF_MONTHS.indexOf(month);
    if (monthIdx === -1) {
      return;
    }
    let year = Number.parseInt(date.substring(commaIndex + 9, commaIndex + 11));
    if (isNaN(year)) {
      return;
    }
    const currentYear = now.getUTCFullYear();
    const currentDecade = currentYear % 100;
    const currentCentury = Math.floor(currentYear / 100);
    if (year > currentDecade && year - currentDecade >= 50) {
      year += (currentCentury - 1) * 100;
    } else {
      year += currentCentury * 100;
    }
    const hourString = date.substring(commaIndex + 12, commaIndex + 14);
    const hour = Number.parseInt(hourString);
    if (isNaN(hour) || hour < 10 && hourString[0] !== "0") {
      return;
    }
    const minuteString = date.substring(commaIndex + 15, commaIndex + 17);
    const minute = Number.parseInt(minuteString);
    if (isNaN(minute) || minute < 10 && minuteString[0] !== "0") {
      return;
    }
    const secondString = date.substring(commaIndex + 18, commaIndex + 20);
    const second = Number.parseInt(secondString);
    if (isNaN(second) || second < 10 && secondString[0] !== "0") {
      return;
    }
    return new Date(Date.UTC(year, monthIdx, day, hour, minute, second));
  }
  module2.exports = {
    parseHttpDate
  };
});

// node_modules/undici/lib/handler/cache-handler.js
var require_cache_handler = __commonJS((exports2, module2) => {
  var util2 = require_util();
  var {
    parseCacheControlHeader,
    parseVaryHeader,
    isEtagUsable
  } = require_cache();
  var { parseHttpDate } = require_date();
  function noop() {}
  var HEURISTICALLY_CACHEABLE_STATUS_CODES = [
    200,
    203,
    204,
    206,
    300,
    301,
    308,
    404,
    405,
    410,
    414,
    501
  ];
  var MAX_RESPONSE_AGE = 2147483647000;

  class CacheHandler {
    #cacheKey;
    #cacheType;
    #cacheByDefault;
    #store;
    #handler;
    #writeStream;
    constructor({ store, type, cacheByDefault }, cacheKey, handler) {
      this.#store = store;
      this.#cacheType = type;
      this.#cacheByDefault = cacheByDefault;
      this.#cacheKey = cacheKey;
      this.#handler = handler;
    }
    onRequestStart(controller, context) {
      this.#writeStream?.destroy();
      this.#writeStream = undefined;
      this.#handler.onRequestStart?.(controller, context);
    }
    onRequestUpgrade(controller, statusCode, headers, socket) {
      this.#handler.onRequestUpgrade?.(controller, statusCode, headers, socket);
    }
    onResponseStart(controller, statusCode, resHeaders, statusMessage) {
      const downstreamOnHeaders = () => this.#handler.onResponseStart?.(controller, statusCode, resHeaders, statusMessage);
      if (!util2.safeHTTPMethods.includes(this.#cacheKey.method) && statusCode >= 200 && statusCode <= 399) {
        try {
          this.#store.delete(this.#cacheKey)?.catch?.(noop);
        } catch {}
        return downstreamOnHeaders();
      }
      const cacheControlHeader = resHeaders["cache-control"];
      const heuristicallyCacheable = resHeaders["last-modified"] && HEURISTICALLY_CACHEABLE_STATUS_CODES.includes(statusCode);
      if (!cacheControlHeader && !resHeaders["expires"] && !heuristicallyCacheable && !this.#cacheByDefault) {
        return downstreamOnHeaders();
      }
      const cacheControlDirectives = cacheControlHeader ? parseCacheControlHeader(cacheControlHeader) : {};
      if (!canCacheResponse(this.#cacheType, statusCode, resHeaders, cacheControlDirectives)) {
        return downstreamOnHeaders();
      }
      const now = Date.now();
      const resAge = resHeaders.age ? getAge(resHeaders.age) : undefined;
      if (resAge && resAge >= MAX_RESPONSE_AGE) {
        return downstreamOnHeaders();
      }
      const resDate = typeof resHeaders.date === "string" ? parseHttpDate(resHeaders.date) : undefined;
      const staleAt = determineStaleAt(this.#cacheType, now, resAge, resHeaders, resDate, cacheControlDirectives) ?? this.#cacheByDefault;
      if (staleAt === undefined || resAge && resAge > staleAt) {
        return downstreamOnHeaders();
      }
      const baseTime = resDate ? resDate.getTime() : now;
      const absoluteStaleAt = staleAt + baseTime;
      if (now >= absoluteStaleAt) {
        return downstreamOnHeaders();
      }
      let varyDirectives;
      if (this.#cacheKey.headers && resHeaders.vary) {
        varyDirectives = parseVaryHeader(resHeaders.vary, this.#cacheKey.headers);
        if (!varyDirectives) {
          return downstreamOnHeaders();
        }
      }
      const deleteAt = determineDeleteAt(baseTime, cacheControlDirectives, absoluteStaleAt);
      const strippedHeaders = stripNecessaryHeaders(resHeaders, cacheControlDirectives);
      const value = {
        statusCode,
        statusMessage,
        headers: strippedHeaders,
        vary: varyDirectives,
        cacheControlDirectives,
        cachedAt: resAge ? now - resAge : now,
        staleAt: absoluteStaleAt,
        deleteAt
      };
      if (typeof resHeaders.etag === "string" && isEtagUsable(resHeaders.etag)) {
        value.etag = resHeaders.etag;
      }
      this.#writeStream = this.#store.createWriteStream(this.#cacheKey, value);
      if (!this.#writeStream) {
        return downstreamOnHeaders();
      }
      const handler = this;
      this.#writeStream.on("drain", () => controller.resume()).on("error", function() {
        handler.#writeStream = undefined;
        handler.#store.delete(handler.#cacheKey);
      }).on("close", function() {
        if (handler.#writeStream === this) {
          handler.#writeStream = undefined;
        }
        controller.resume();
      });
      return downstreamOnHeaders();
    }
    onResponseData(controller, chunk) {
      if (this.#writeStream?.write(chunk) === false) {
        controller.pause();
      }
      this.#handler.onResponseData?.(controller, chunk);
    }
    onResponseEnd(controller, trailers) {
      this.#writeStream?.end();
      this.#handler.onResponseEnd?.(controller, trailers);
    }
    onResponseError(controller, err2) {
      this.#writeStream?.destroy(err2);
      this.#writeStream = undefined;
      this.#handler.onResponseError?.(controller, err2);
    }
  }
  function canCacheResponse(cacheType, statusCode, resHeaders, cacheControlDirectives) {
    if (statusCode !== 200 && statusCode !== 307) {
      return false;
    }
    if (cacheControlDirectives["no-store"]) {
      return false;
    }
    if (cacheType === "shared" && cacheControlDirectives.private === true) {
      return false;
    }
    if (resHeaders.vary?.includes("*")) {
      return false;
    }
    if (resHeaders.authorization) {
      if (!cacheControlDirectives.public || typeof resHeaders.authorization !== "string") {
        return false;
      }
      if (Array.isArray(cacheControlDirectives["no-cache"]) && cacheControlDirectives["no-cache"].includes("authorization")) {
        return false;
      }
      if (Array.isArray(cacheControlDirectives["private"]) && cacheControlDirectives["private"].includes("authorization")) {
        return false;
      }
    }
    return true;
  }
  function getAge(ageHeader) {
    const age = parseInt(Array.isArray(ageHeader) ? ageHeader[0] : ageHeader);
    return isNaN(age) ? undefined : age * 1000;
  }
  function determineStaleAt(cacheType, now, age, resHeaders, responseDate, cacheControlDirectives) {
    if (cacheType === "shared") {
      const sMaxAge = cacheControlDirectives["s-maxage"];
      if (sMaxAge !== undefined) {
        return sMaxAge > 0 ? sMaxAge * 1000 : undefined;
      }
    }
    const maxAge = cacheControlDirectives["max-age"];
    if (maxAge !== undefined) {
      return maxAge > 0 ? maxAge * 1000 : undefined;
    }
    if (typeof resHeaders.expires === "string") {
      const expiresDate = parseHttpDate(resHeaders.expires);
      if (expiresDate) {
        if (now >= expiresDate.getTime()) {
          return;
        }
        if (responseDate) {
          if (responseDate >= expiresDate) {
            return;
          }
          if (age !== undefined && age > expiresDate - responseDate) {
            return;
          }
        }
        return expiresDate.getTime() - now;
      }
    }
    if (typeof resHeaders["last-modified"] === "string") {
      const lastModified = new Date(resHeaders["last-modified"]);
      if (isValidDate(lastModified)) {
        if (lastModified.getTime() >= now) {
          return;
        }
        const responseAge = now - lastModified.getTime();
        return responseAge * 0.1;
      }
    }
    if (cacheControlDirectives.immutable) {
      return 31536000;
    }
    return;
  }
  function determineDeleteAt(now, cacheControlDirectives, staleAt) {
    let staleWhileRevalidate = -Infinity;
    let staleIfError = -Infinity;
    let immutable = -Infinity;
    if (cacheControlDirectives["stale-while-revalidate"]) {
      staleWhileRevalidate = staleAt + cacheControlDirectives["stale-while-revalidate"] * 1000;
    }
    if (cacheControlDirectives["stale-if-error"]) {
      staleIfError = staleAt + cacheControlDirectives["stale-if-error"] * 1000;
    }
    if (staleWhileRevalidate === -Infinity && staleIfError === -Infinity) {
      immutable = now + 31536000000;
    }
    return Math.max(staleAt, staleWhileRevalidate, staleIfError, immutable);
  }
  function stripNecessaryHeaders(resHeaders, cacheControlDirectives) {
    const headersToRemove = [
      "connection",
      "proxy-authenticate",
      "proxy-authentication-info",
      "proxy-authorization",
      "proxy-connection",
      "te",
      "transfer-encoding",
      "upgrade",
      "age"
    ];
    if (resHeaders["connection"]) {
      if (Array.isArray(resHeaders["connection"])) {
        headersToRemove.push(...resHeaders["connection"].map((header) => header.trim()));
      } else {
        headersToRemove.push(...resHeaders["connection"].split(",").map((header) => header.trim()));
      }
    }
    if (Array.isArray(cacheControlDirectives["no-cache"])) {
      headersToRemove.push(...cacheControlDirectives["no-cache"]);
    }
    if (Array.isArray(cacheControlDirectives["private"])) {
      headersToRemove.push(...cacheControlDirectives["private"]);
    }
    let strippedHeaders;
    for (const headerName of headersToRemove) {
      if (resHeaders[headerName]) {
        strippedHeaders ??= { ...resHeaders };
        delete strippedHeaders[headerName];
      }
    }
    return strippedHeaders ?? resHeaders;
  }
  function isValidDate(date) {
    return date instanceof Date && Number.isFinite(date.valueOf());
  }
  module2.exports = CacheHandler;
});

// node_modules/undici/lib/cache/memory-cache-store.js
var require_memory_cache_store = __commonJS((exports2, module2) => {
  var { Writable } = require("node:stream");
  var { assertCacheKey, assertCacheValue } = require_cache();

  class MemoryCacheStore {
    #maxCount = Infinity;
    #maxSize = Infinity;
    #maxEntrySize = Infinity;
    #size = 0;
    #count = 0;
    #entries = new Map;
    constructor(opts) {
      if (opts) {
        if (typeof opts !== "object") {
          throw new TypeError("MemoryCacheStore options must be an object");
        }
        if (opts.maxCount !== undefined) {
          if (typeof opts.maxCount !== "number" || !Number.isInteger(opts.maxCount) || opts.maxCount < 0) {
            throw new TypeError("MemoryCacheStore options.maxCount must be a non-negative integer");
          }
          this.#maxCount = opts.maxCount;
        }
        if (opts.maxSize !== undefined) {
          if (typeof opts.maxSize !== "number" || !Number.isInteger(opts.maxSize) || opts.maxSize < 0) {
            throw new TypeError("MemoryCacheStore options.maxSize must be a non-negative integer");
          }
          this.#maxSize = opts.maxSize;
        }
        if (opts.maxEntrySize !== undefined) {
          if (typeof opts.maxEntrySize !== "number" || !Number.isInteger(opts.maxEntrySize) || opts.maxEntrySize < 0) {
            throw new TypeError("MemoryCacheStore options.maxEntrySize must be a non-negative integer");
          }
          this.#maxEntrySize = opts.maxEntrySize;
        }
      }
    }
    get(key) {
      assertCacheKey(key);
      const topLevelKey = `${key.origin}:${key.path}`;
      const now = Date.now();
      const entry = this.#entries.get(topLevelKey)?.find((entry2) => entry2.deleteAt > now && entry2.method === key.method && (entry2.vary == null || Object.keys(entry2.vary).every((headerName) => {
        if (entry2.vary[headerName] === null) {
          return key.headers[headerName] === undefined;
        }
        return entry2.vary[headerName] === key.headers[headerName];
      })));
      return entry == null ? undefined : {
        statusMessage: entry.statusMessage,
        statusCode: entry.statusCode,
        headers: entry.headers,
        body: entry.body,
        vary: entry.vary ? entry.vary : undefined,
        etag: entry.etag,
        cacheControlDirectives: entry.cacheControlDirectives,
        cachedAt: entry.cachedAt,
        staleAt: entry.staleAt,
        deleteAt: entry.deleteAt
      };
    }
    createWriteStream(key, val) {
      assertCacheKey(key);
      assertCacheValue(val);
      const topLevelKey = `${key.origin}:${key.path}`;
      const store = this;
      const entry = { ...key, ...val, body: [], size: 0 };
      return new Writable({
        write(chunk, encoding, callback) {
          if (typeof chunk === "string") {
            chunk = Buffer.from(chunk, encoding);
          }
          entry.size += chunk.byteLength;
          if (entry.size >= store.#maxEntrySize) {
            this.destroy();
          } else {
            entry.body.push(chunk);
          }
          callback(null);
        },
        final(callback) {
          let entries = store.#entries.get(topLevelKey);
          if (!entries) {
            entries = [];
            store.#entries.set(topLevelKey, entries);
          }
          entries.push(entry);
          store.#size += entry.size;
          store.#count += 1;
          if (store.#size > store.#maxSize || store.#count > store.#maxCount) {
            for (const [key2, entries2] of store.#entries) {
              for (const entry2 of entries2.splice(0, entries2.length / 2)) {
                store.#size -= entry2.size;
                store.#count -= 1;
              }
              if (entries2.length === 0) {
                store.#entries.delete(key2);
              }
            }
          }
          callback(null);
        }
      });
    }
    delete(key) {
      if (typeof key !== "object") {
        throw new TypeError(`expected key to be object, got ${typeof key}`);
      }
      const topLevelKey = `${key.origin}:${key.path}`;
      for (const entry of this.#entries.get(topLevelKey) ?? []) {
        this.#size -= entry.size;
        this.#count -= 1;
      }
      this.#entries.delete(topLevelKey);
    }
  }
  module2.exports = MemoryCacheStore;
});

// node_modules/undici/lib/handler/cache-revalidation-handler.js
var require_cache_revalidation_handler = __commonJS((exports2, module2) => {
  var assert = require("node:assert");

  class CacheRevalidationHandler {
    #successful = false;
    #callback;
    #handler;
    #context;
    #allowErrorStatusCodes;
    constructor(callback, handler, allowErrorStatusCodes) {
      if (typeof callback !== "function") {
        throw new TypeError("callback must be a function");
      }
      this.#callback = callback;
      this.#handler = handler;
      this.#allowErrorStatusCodes = allowErrorStatusCodes;
    }
    onRequestStart(_, context) {
      this.#successful = false;
      this.#context = context;
    }
    onRequestUpgrade(controller, statusCode, headers, socket) {
      this.#handler.onRequestUpgrade?.(controller, statusCode, headers, socket);
    }
    onResponseStart(controller, statusCode, headers, statusMessage) {
      assert(this.#callback != null);
      this.#successful = statusCode === 304 || this.#allowErrorStatusCodes && statusCode >= 500 && statusCode <= 504;
      this.#callback(this.#successful, this.#context);
      this.#callback = null;
      if (this.#successful) {
        return true;
      }
      this.#handler.onRequestStart?.(controller, this.#context);
      this.#handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
    }
    onResponseData(controller, chunk) {
      if (this.#successful) {
        return;
      }
      return this.#handler.onResponseData?.(controller, chunk);
    }
    onResponseEnd(controller, trailers) {
      if (this.#successful) {
        return;
      }
      this.#handler.onResponseEnd?.(controller, trailers);
    }
    onResponseError(controller, err2) {
      if (this.#successful) {
        return;
      }
      if (this.#callback) {
        this.#callback(false);
        this.#callback = null;
      }
      if (typeof this.#handler.onResponseError === "function") {
        this.#handler.onResponseError(controller, err2);
      } else {
        throw err2;
      }
    }
  }
  module2.exports = CacheRevalidationHandler;
});

// node_modules/undici/lib/interceptor/cache.js
var require_cache2 = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { Readable } = require("node:stream");
  var util2 = require_util();
  var CacheHandler = require_cache_handler();
  var MemoryCacheStore = require_memory_cache_store();
  var CacheRevalidationHandler = require_cache_revalidation_handler();
  var { assertCacheStore, assertCacheMethods, makeCacheKey, normaliseHeaders, parseCacheControlHeader } = require_cache();
  var { AbortError: AbortError2 } = require_errors();
  function needsRevalidation(result2, cacheControlDirectives) {
    if (cacheControlDirectives?.["no-cache"]) {
      return true;
    }
    const now = Date.now();
    if (now > result2.staleAt) {
      if (cacheControlDirectives?.["max-stale"]) {
        const gracePeriod = result2.staleAt + cacheControlDirectives["max-stale"] * 1000;
        return now > gracePeriod;
      }
      return true;
    }
    if (cacheControlDirectives?.["min-fresh"]) {
      const timeLeftTillStale = result2.staleAt - now;
      const threshold = cacheControlDirectives["min-fresh"] * 1000;
      return timeLeftTillStale <= threshold;
    }
    return false;
  }
  function handleUncachedResponse(dispatch, globalOpts, cacheKey, handler, opts, reqCacheControl) {
    if (reqCacheControl?.["only-if-cached"]) {
      let aborted = false;
      try {
        if (typeof handler.onConnect === "function") {
          handler.onConnect(() => {
            aborted = true;
          });
          if (aborted) {
            return;
          }
        }
        if (typeof handler.onHeaders === "function") {
          handler.onHeaders(504, [], () => {}, "Gateway Timeout");
          if (aborted) {
            return;
          }
        }
        if (typeof handler.onComplete === "function") {
          handler.onComplete([]);
        }
      } catch (err2) {
        if (typeof handler.onError === "function") {
          handler.onError(err2);
        }
      }
      return true;
    }
    return dispatch(opts, new CacheHandler(globalOpts, cacheKey, handler));
  }
  function sendCachedValue(handler, opts, result2, age, context, isStale) {
    const stream = util2.isStream(result2.body) ? result2.body : Readable.from(result2.body ?? []);
    assert(!stream.destroyed, "stream should not be destroyed");
    assert(!stream.readableDidRead, "stream should not be readableDidRead");
    const controller = {
      resume() {
        stream.resume();
      },
      pause() {
        stream.pause();
      },
      get paused() {
        return stream.isPaused();
      },
      get aborted() {
        return stream.destroyed;
      },
      get reason() {
        return stream.errored;
      },
      abort(reason) {
        stream.destroy(reason ?? new AbortError2);
      }
    };
    stream.on("error", function(err2) {
      if (!this.readableEnded) {
        if (typeof handler.onResponseError === "function") {
          handler.onResponseError(controller, err2);
        } else {
          throw err2;
        }
      }
    }).on("close", function() {
      if (!this.errored) {
        handler.onResponseEnd?.(controller, {});
      }
    });
    handler.onRequestStart?.(controller, context);
    if (stream.destroyed) {
      return;
    }
    const headers = { ...result2.headers, age: String(age) };
    if (isStale) {
      headers.warning = '110 - "response is stale"';
    }
    handler.onResponseStart?.(controller, result2.statusCode, headers, result2.statusMessage);
    if (opts.method === "HEAD") {
      stream.destroy();
    } else {
      stream.on("data", function(chunk) {
        handler.onResponseData?.(controller, chunk);
      });
    }
  }
  function handleResult2(dispatch, globalOpts, cacheKey, handler, opts, reqCacheControl, result2) {
    if (!result2) {
      return handleUncachedResponse(dispatch, globalOpts, cacheKey, handler, opts, reqCacheControl);
    }
    const now = Date.now();
    if (now > result2.deleteAt) {
      return dispatch(opts, new CacheHandler(globalOpts, cacheKey, handler));
    }
    const age = Math.round((now - result2.cachedAt) / 1000);
    if (reqCacheControl?.["max-age"] && age >= reqCacheControl["max-age"]) {
      return dispatch(opts, handler);
    }
    if (needsRevalidation(result2, reqCacheControl)) {
      if (util2.isStream(opts.body) && util2.bodyLength(opts.body) !== 0) {
        return dispatch(opts, new CacheHandler(globalOpts, cacheKey, handler));
      }
      let withinStaleIfErrorThreshold = false;
      const staleIfErrorExpiry = result2.cacheControlDirectives["stale-if-error"] ?? reqCacheControl?.["stale-if-error"];
      if (staleIfErrorExpiry) {
        withinStaleIfErrorThreshold = now < result2.staleAt + staleIfErrorExpiry * 1000;
      }
      let headers = {
        ...normaliseHeaders(opts),
        "if-modified-since": new Date(result2.cachedAt).toUTCString()
      };
      if (result2.etag) {
        headers["if-none-match"] = result2.etag;
      }
      if (result2.vary) {
        headers = {
          ...headers,
          ...result2.vary
        };
      }
      return dispatch({
        ...opts,
        headers
      }, new CacheRevalidationHandler((success, context) => {
        if (success) {
          sendCachedValue(handler, opts, result2, age, context, true);
        } else if (util2.isStream(result2.body)) {
          result2.body.on("error", () => {}).destroy();
        }
      }, new CacheHandler(globalOpts, cacheKey, handler), withinStaleIfErrorThreshold));
    }
    if (util2.isStream(opts.body)) {
      opts.body.on("error", () => {}).destroy();
    }
    sendCachedValue(handler, opts, result2, age, null, false);
  }
  module2.exports = (opts = {}) => {
    const {
      store = new MemoryCacheStore,
      methods = ["GET"],
      cacheByDefault = undefined,
      type = "shared"
    } = opts;
    if (typeof opts !== "object" || opts === null) {
      throw new TypeError(`expected type of opts to be an Object, got ${opts === null ? "null" : typeof opts}`);
    }
    assertCacheStore(store, "opts.store");
    assertCacheMethods(methods, "opts.methods");
    if (typeof cacheByDefault !== "undefined" && typeof cacheByDefault !== "number") {
      throw new TypeError(`exepcted opts.cacheByDefault to be number or undefined, got ${typeof cacheByDefault}`);
    }
    if (typeof type !== "undefined" && type !== "shared" && type !== "private") {
      throw new TypeError(`exepcted opts.type to be shared, private, or undefined, got ${typeof type}`);
    }
    const globalOpts = {
      store,
      methods,
      cacheByDefault,
      type
    };
    const safeMethodsToNotCache = util2.safeHTTPMethods.filter((method) => methods.includes(method) === false);
    return (dispatch) => {
      return (opts2, handler) => {
        if (!opts2.origin || safeMethodsToNotCache.includes(opts2.method)) {
          return dispatch(opts2, handler);
        }
        const reqCacheControl = opts2.headers?.["cache-control"] ? parseCacheControlHeader(opts2.headers["cache-control"]) : undefined;
        if (reqCacheControl?.["no-store"]) {
          return dispatch(opts2, handler);
        }
        const cacheKey = makeCacheKey(opts2);
        const result2 = store.get(cacheKey);
        if (result2 && typeof result2.then === "function") {
          result2.then((result3) => {
            handleResult2(dispatch, globalOpts, cacheKey, handler, opts2, reqCacheControl, result3);
          });
        } else {
          handleResult2(dispatch, globalOpts, cacheKey, handler, opts2, reqCacheControl, result2);
        }
        return true;
      };
    };
  };
});

// node_modules/better-sqlite3/lib/util.js
var require_util3 = __commonJS((exports2) => {
  exports2.getBooleanOption = (options, key) => {
    let value = false;
    if (key in options && typeof (value = options[key]) !== "boolean") {
      throw new TypeError(`Expected the "${key}" option to be a boolean`);
    }
    return value;
  };
  exports2.cppdb = Symbol();
  exports2.inspect = Symbol.for("nodejs.util.inspect.custom");
});

// node_modules/better-sqlite3/lib/sqlite-error.js
var require_sqlite_error = __commonJS((exports2, module2) => {
  var descriptor = { value: "SqliteError", writable: true, enumerable: false, configurable: true };
  function SqliteError(message, code2) {
    if (new.target !== SqliteError) {
      return new SqliteError(message, code2);
    }
    if (typeof code2 !== "string") {
      throw new TypeError("Expected second argument to be a string");
    }
    Error.call(this, message);
    descriptor.value = "" + message;
    Object.defineProperty(this, "message", descriptor);
    Error.captureStackTrace(this, SqliteError);
    this.code = code2;
  }
  Object.setPrototypeOf(SqliteError, Error);
  Object.setPrototypeOf(SqliteError.prototype, Error.prototype);
  Object.defineProperty(SqliteError.prototype, "name", descriptor);
  module2.exports = SqliteError;
});

// node_modules/file-uri-to-path/index.js
var require_file_uri_to_path = __commonJS((exports2, module2) => {
  var sep = require("path").sep || "/";
  module2.exports = fileUriToPath;
  function fileUriToPath(uri) {
    if (typeof uri != "string" || uri.length <= 7 || uri.substring(0, 7) != "file://") {
      throw new TypeError("must pass in a file:// URI to convert to a file path");
    }
    var rest = decodeURI(uri.substring(7));
    var firstSlash = rest.indexOf("/");
    var host = rest.substring(0, firstSlash);
    var path = rest.substring(firstSlash + 1);
    if (host == "localhost")
      host = "";
    if (host) {
      host = sep + sep + host;
    }
    path = path.replace(/^(.+)\|/, "$1:");
    if (sep == "\\") {
      path = path.replace(/\//g, "\\");
    }
    if (/^.+\:/.test(path)) {} else {
      path = sep + path;
    }
    return host + path;
  }
});

// node_modules/bindings/bindings.js
var require_bindings = __commonJS((exports2, module2) => {
  var __filename = "D:\\Web Development\\GitHub\\blockbench-plugins\\src\\mcp\\node_modules\\bindings\\bindings.js";
  var fs = require("fs");
  var path = require("path");
  var fileURLToPath = require_file_uri_to_path();
  var join = path.join;
  var dirname = path.dirname;
  var exists = fs.accessSync && function(path2) {
    try {
      fs.accessSync(path2);
    } catch (e) {
      return false;
    }
    return true;
  } || fs.existsSync || path.existsSync;
  var defaults = {
    arrow: process.env.NODE_BINDINGS_ARROW || " → ",
    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || "compiled",
    platform: process.platform,
    arch: process.arch,
    nodePreGyp: "node-v" + process.versions.modules + "-" + process.platform + "-" + process.arch,
    version: process.versions.node,
    bindings: "bindings.node",
    try: [
      ["module_root", "build", "bindings"],
      ["module_root", "build", "Debug", "bindings"],
      ["module_root", "build", "Release", "bindings"],
      ["module_root", "out", "Debug", "bindings"],
      ["module_root", "Debug", "bindings"],
      ["module_root", "out", "Release", "bindings"],
      ["module_root", "Release", "bindings"],
      ["module_root", "build", "default", "bindings"],
      ["module_root", "compiled", "version", "platform", "arch", "bindings"],
      ["module_root", "addon-build", "release", "install-root", "bindings"],
      ["module_root", "addon-build", "debug", "install-root", "bindings"],
      ["module_root", "addon-build", "default", "install-root", "bindings"],
      ["module_root", "lib", "binding", "nodePreGyp", "bindings"]
    ]
  };
  function bindings(opts) {
    if (typeof opts == "string") {
      opts = { bindings: opts };
    } else if (!opts) {
      opts = {};
    }
    Object.keys(defaults).map(function(i3) {
      if (!(i3 in opts))
        opts[i3] = defaults[i3];
    });
    if (!opts.module_root) {
      opts.module_root = exports2.getRoot(exports2.getFileName());
    }
    if (path.extname(opts.bindings) != ".node") {
      opts.bindings += ".node";
    }
    var requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : require;
    var tries = [], i2 = 0, l = opts.try.length, n, b, err2;
    for (;i2 < l; i2++) {
      n = join.apply(null, opts.try[i2].map(function(p) {
        return opts[p] || p;
      }));
      tries.push(n);
      try {
        b = opts.path ? requireFunc.resolve(n) : requireFunc(n);
        if (!opts.path) {
          b.path = n;
        }
        return b;
      } catch (e) {
        if (e.code !== "MODULE_NOT_FOUND" && e.code !== "QUALIFIED_PATH_RESOLUTION_FAILED" && !/not find/i.test(e.message)) {
          throw e;
        }
      }
    }
    err2 = new Error(`Could not locate the bindings file. Tried:
` + tries.map(function(a) {
      return opts.arrow + a;
    }).join(`
`));
    err2.tries = tries;
    throw err2;
  }
  module2.exports = exports2 = bindings;
  exports2.getFileName = function getFileName(calling_file) {
    var { prepareStackTrace: origPST, stackTraceLimit: origSTL } = Error, dummy = {}, fileName;
    Error.stackTraceLimit = 10;
    Error.prepareStackTrace = function(e, st) {
      for (var i2 = 0, l = st.length;i2 < l; i2++) {
        fileName = st[i2].getFileName();
        if (fileName !== __filename) {
          if (calling_file) {
            if (fileName !== calling_file) {
              return;
            }
          } else {
            return;
          }
        }
      }
    };
    Error.captureStackTrace(dummy);
    dummy.stack;
    Error.prepareStackTrace = origPST;
    Error.stackTraceLimit = origSTL;
    var fileSchema = "file://";
    if (fileName.indexOf(fileSchema) === 0) {
      fileName = fileURLToPath(fileName);
    }
    return fileName;
  };
  exports2.getRoot = function getRoot(file) {
    var dir = dirname(file), prev;
    while (true) {
      if (dir === ".") {
        dir = process.cwd();
      }
      if (exists(join(dir, "package.json")) || exists(join(dir, "node_modules"))) {
        return dir;
      }
      if (prev === dir) {
        throw new Error('Could not find module root given file: "' + file + '". Do you have a `package.json` file? ');
      }
      prev = dir;
      dir = join(dir, "..");
    }
  };
});

// node_modules/better-sqlite3/lib/methods/wrappers.js
var require_wrappers = __commonJS((exports2) => {
  var { cppdb } = require_util3();
  exports2.prepare = function prepare(sql) {
    return this[cppdb].prepare(sql, this, false);
  };
  exports2.exec = function exec(sql) {
    this[cppdb].exec(sql);
    return this;
  };
  exports2.close = function close() {
    this[cppdb].close();
    return this;
  };
  exports2.loadExtension = function loadExtension(...args) {
    this[cppdb].loadExtension(...args);
    return this;
  };
  exports2.defaultSafeIntegers = function defaultSafeIntegers(...args) {
    this[cppdb].defaultSafeIntegers(...args);
    return this;
  };
  exports2.unsafeMode = function unsafeMode(...args) {
    this[cppdb].unsafeMode(...args);
    return this;
  };
  exports2.getters = {
    name: {
      get: function name() {
        return this[cppdb].name;
      },
      enumerable: true
    },
    open: {
      get: function open() {
        return this[cppdb].open;
      },
      enumerable: true
    },
    inTransaction: {
      get: function inTransaction() {
        return this[cppdb].inTransaction;
      },
      enumerable: true
    },
    readonly: {
      get: function readonly() {
        return this[cppdb].readonly;
      },
      enumerable: true
    },
    memory: {
      get: function memory() {
        return this[cppdb].memory;
      },
      enumerable: true
    }
  };
});

// node_modules/better-sqlite3/lib/methods/transaction.js
var require_transaction = __commonJS((exports2, module2) => {
  var { cppdb } = require_util3();
  var controllers = new WeakMap;
  module2.exports = function transaction(fn) {
    if (typeof fn !== "function")
      throw new TypeError("Expected first argument to be a function");
    const db = this[cppdb];
    const controller = getController(db, this);
    const { apply } = Function.prototype;
    const properties = {
      default: { value: wrapTransaction(apply, fn, db, controller.default) },
      deferred: { value: wrapTransaction(apply, fn, db, controller.deferred) },
      immediate: { value: wrapTransaction(apply, fn, db, controller.immediate) },
      exclusive: { value: wrapTransaction(apply, fn, db, controller.exclusive) },
      database: { value: this, enumerable: true }
    };
    Object.defineProperties(properties.default.value, properties);
    Object.defineProperties(properties.deferred.value, properties);
    Object.defineProperties(properties.immediate.value, properties);
    Object.defineProperties(properties.exclusive.value, properties);
    return properties.default.value;
  };
  var getController = (db, self) => {
    let controller = controllers.get(db);
    if (!controller) {
      const shared = {
        commit: db.prepare("COMMIT", self, false),
        rollback: db.prepare("ROLLBACK", self, false),
        savepoint: db.prepare("SAVEPOINT `	_bs3.	`", self, false),
        release: db.prepare("RELEASE `	_bs3.	`", self, false),
        rollbackTo: db.prepare("ROLLBACK TO `	_bs3.	`", self, false)
      };
      controllers.set(db, controller = {
        default: Object.assign({ begin: db.prepare("BEGIN", self, false) }, shared),
        deferred: Object.assign({ begin: db.prepare("BEGIN DEFERRED", self, false) }, shared),
        immediate: Object.assign({ begin: db.prepare("BEGIN IMMEDIATE", self, false) }, shared),
        exclusive: Object.assign({ begin: db.prepare("BEGIN EXCLUSIVE", self, false) }, shared)
      });
    }
    return controller;
  };
  var wrapTransaction = (apply, fn, db, { begin, commit, rollback, savepoint, release, rollbackTo }) => function sqliteTransaction() {
    let before, after, undo;
    if (db.inTransaction) {
      before = savepoint;
      after = release;
      undo = rollbackTo;
    } else {
      before = begin;
      after = commit;
      undo = rollback;
    }
    before.run();
    try {
      const result2 = apply.call(fn, this, arguments);
      after.run();
      return result2;
    } catch (ex) {
      if (db.inTransaction) {
        undo.run();
        if (undo !== rollback)
          after.run();
      }
      throw ex;
    }
  };
});

// node_modules/better-sqlite3/lib/methods/pragma.js
var require_pragma = __commonJS((exports2, module2) => {
  var { getBooleanOption, cppdb } = require_util3();
  module2.exports = function pragma(source, options) {
    if (options == null)
      options = {};
    if (typeof source !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof options !== "object")
      throw new TypeError("Expected second argument to be an options object");
    const simple = getBooleanOption(options, "simple");
    const stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);
    return simple ? stmt.pluck().get() : stmt.all();
  };
});

// node_modules/better-sqlite3/lib/methods/backup.js
var require_backup = __commonJS((exports2, module2) => {
  var fs = require("fs");
  var path = require("path");
  var { promisify } = require("util");
  var { cppdb } = require_util3();
  var fsAccess = promisify(fs.access);
  module2.exports = async function backup(filename, options) {
    if (options == null)
      options = {};
    if (typeof filename !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof options !== "object")
      throw new TypeError("Expected second argument to be an options object");
    filename = filename.trim();
    const attachedName = "attached" in options ? options.attached : "main";
    const handler = "progress" in options ? options.progress : null;
    if (!filename)
      throw new TypeError("Backup filename cannot be an empty string");
    if (filename === ":memory:")
      throw new TypeError('Invalid backup filename ":memory:"');
    if (typeof attachedName !== "string")
      throw new TypeError('Expected the "attached" option to be a string');
    if (!attachedName)
      throw new TypeError('The "attached" option cannot be an empty string');
    if (handler != null && typeof handler !== "function")
      throw new TypeError('Expected the "progress" option to be a function');
    await fsAccess(path.dirname(filename)).catch(() => {
      throw new TypeError("Cannot save backup because the directory does not exist");
    });
    const isNewFile = await fsAccess(filename).then(() => false, () => true);
    return runBackup(this[cppdb].backup(this, attachedName, filename, isNewFile), handler || null);
  };
  var runBackup = (backup, handler) => {
    let rate = 0;
    let useDefault = true;
    return new Promise((resolve, reject) => {
      setImmediate(function step() {
        try {
          const progress = backup.transfer(rate);
          if (!progress.remainingPages) {
            backup.close();
            resolve(progress);
            return;
          }
          if (useDefault) {
            useDefault = false;
            rate = 100;
          }
          if (handler) {
            const ret = handler(progress);
            if (ret !== undefined) {
              if (typeof ret === "number" && ret === ret)
                rate = Math.max(0, Math.min(2147483647, Math.round(ret)));
              else
                throw new TypeError("Expected progress callback to return a number or undefined");
            }
          }
          setImmediate(step);
        } catch (err2) {
          backup.close();
          reject(err2);
        }
      });
    });
  };
});

// node_modules/better-sqlite3/lib/methods/serialize.js
var require_serialize = __commonJS((exports2, module2) => {
  var { cppdb } = require_util3();
  module2.exports = function serialize(options) {
    if (options == null)
      options = {};
    if (typeof options !== "object")
      throw new TypeError("Expected first argument to be an options object");
    const attachedName = "attached" in options ? options.attached : "main";
    if (typeof attachedName !== "string")
      throw new TypeError('Expected the "attached" option to be a string');
    if (!attachedName)
      throw new TypeError('The "attached" option cannot be an empty string');
    return this[cppdb].serialize(attachedName);
  };
});

// node_modules/better-sqlite3/lib/methods/function.js
var require_function = __commonJS((exports2, module2) => {
  var { getBooleanOption, cppdb } = require_util3();
  module2.exports = function defineFunction(name, options, fn) {
    if (options == null)
      options = {};
    if (typeof options === "function") {
      fn = options;
      options = {};
    }
    if (typeof name !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof fn !== "function")
      throw new TypeError("Expected last argument to be a function");
    if (typeof options !== "object")
      throw new TypeError("Expected second argument to be an options object");
    if (!name)
      throw new TypeError("User-defined function name cannot be an empty string");
    const safeIntegers = "safeIntegers" in options ? +getBooleanOption(options, "safeIntegers") : 2;
    const deterministic = getBooleanOption(options, "deterministic");
    const directOnly = getBooleanOption(options, "directOnly");
    const varargs = getBooleanOption(options, "varargs");
    let argCount = -1;
    if (!varargs) {
      argCount = fn.length;
      if (!Number.isInteger(argCount) || argCount < 0)
        throw new TypeError("Expected function.length to be a positive integer");
      if (argCount > 100)
        throw new RangeError("User-defined functions cannot have more than 100 arguments");
    }
    this[cppdb].function(fn, name, argCount, safeIntegers, deterministic, directOnly);
    return this;
  };
});

// node_modules/better-sqlite3/lib/methods/aggregate.js
var require_aggregate = __commonJS((exports2, module2) => {
  var { getBooleanOption, cppdb } = require_util3();
  module2.exports = function defineAggregate(name, options) {
    if (typeof name !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof options !== "object" || options === null)
      throw new TypeError("Expected second argument to be an options object");
    if (!name)
      throw new TypeError("User-defined function name cannot be an empty string");
    const start = "start" in options ? options.start : null;
    const step = getFunctionOption(options, "step", true);
    const inverse = getFunctionOption(options, "inverse", false);
    const result2 = getFunctionOption(options, "result", false);
    const safeIntegers = "safeIntegers" in options ? +getBooleanOption(options, "safeIntegers") : 2;
    const deterministic = getBooleanOption(options, "deterministic");
    const directOnly = getBooleanOption(options, "directOnly");
    const varargs = getBooleanOption(options, "varargs");
    let argCount = -1;
    if (!varargs) {
      argCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);
      if (argCount > 0)
        argCount -= 1;
      if (argCount > 100)
        throw new RangeError("User-defined functions cannot have more than 100 arguments");
    }
    this[cppdb].aggregate(start, step, inverse, result2, name, argCount, safeIntegers, deterministic, directOnly);
    return this;
  };
  var getFunctionOption = (options, key, required) => {
    const value = key in options ? options[key] : null;
    if (typeof value === "function")
      return value;
    if (value != null)
      throw new TypeError(`Expected the "${key}" option to be a function`);
    if (required)
      throw new TypeError(`Missing required option "${key}"`);
    return null;
  };
  var getLength = ({ length }) => {
    if (Number.isInteger(length) && length >= 0)
      return length;
    throw new TypeError("Expected function.length to be a positive integer");
  };
});

// node_modules/better-sqlite3/lib/methods/table.js
var require_table = __commonJS((exports2, module2) => {
  var { cppdb } = require_util3();
  module2.exports = function defineTable(name, factory) {
    if (typeof name !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (!name)
      throw new TypeError("Virtual table module name cannot be an empty string");
    let eponymous = false;
    if (typeof factory === "object" && factory !== null) {
      eponymous = true;
      factory = defer(parseTableDefinition(factory, "used", name));
    } else {
      if (typeof factory !== "function")
        throw new TypeError("Expected second argument to be a function or a table definition object");
      factory = wrapFactory(factory);
    }
    this[cppdb].table(factory, name, eponymous);
    return this;
  };
  function wrapFactory(factory) {
    return function virtualTableFactory(moduleName, databaseName, tableName, ...args) {
      const thisObject = {
        module: moduleName,
        database: databaseName,
        table: tableName
      };
      const def = apply.call(factory, thisObject, args);
      if (typeof def !== "object" || def === null) {
        throw new TypeError(`Virtual table module "${moduleName}" did not return a table definition object`);
      }
      return parseTableDefinition(def, "returned", moduleName);
    };
  }
  function parseTableDefinition(def, verb, moduleName) {
    if (!hasOwnProperty.call(def, "rows")) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition without a "rows" property`);
    }
    if (!hasOwnProperty.call(def, "columns")) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition without a "columns" property`);
    }
    const rows = def.rows;
    if (typeof rows !== "function" || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "rows" property (should be a generator function)`);
    }
    let columns = def.columns;
    if (!Array.isArray(columns) || !(columns = [...columns]).every((x2) => typeof x2 === "string")) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "columns" property (should be an array of strings)`);
    }
    if (columns.length !== new Set(columns).size) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with duplicate column names`);
    }
    if (!columns.length) {
      throw new RangeError(`Virtual table module "${moduleName}" ${verb} a table definition with zero columns`);
    }
    let parameters;
    if (hasOwnProperty.call(def, "parameters")) {
      parameters = def.parameters;
      if (!Array.isArray(parameters) || !(parameters = [...parameters]).every((x2) => typeof x2 === "string")) {
        throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "parameters" property (should be an array of strings)`);
      }
    } else {
      parameters = inferParameters(rows);
    }
    if (parameters.length !== new Set(parameters).size) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with duplicate parameter names`);
    }
    if (parameters.length > 32) {
      throw new RangeError(`Virtual table module "${moduleName}" ${verb} a table definition with more than the maximum number of 32 parameters`);
    }
    for (const parameter of parameters) {
      if (columns.includes(parameter)) {
        throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with column "${parameter}" which was ambiguously defined as both a column and parameter`);
      }
    }
    let safeIntegers = 2;
    if (hasOwnProperty.call(def, "safeIntegers")) {
      const bool = def.safeIntegers;
      if (typeof bool !== "boolean") {
        throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "safeIntegers" property (should be a boolean)`);
      }
      safeIntegers = +bool;
    }
    let directOnly = false;
    if (hasOwnProperty.call(def, "directOnly")) {
      directOnly = def.directOnly;
      if (typeof directOnly !== "boolean") {
        throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "directOnly" property (should be a boolean)`);
      }
    }
    const columnDefinitions = [
      ...parameters.map(identifier).map((str) => `${str} HIDDEN`),
      ...columns.map(identifier)
    ];
    return [
      `CREATE TABLE x(${columnDefinitions.join(", ")});`,
      wrapGenerator(rows, new Map(columns.map((x2, i2) => [x2, parameters.length + i2])), moduleName),
      parameters,
      safeIntegers,
      directOnly
    ];
  }
  function wrapGenerator(generator, columnMap, moduleName) {
    return function* virtualTable(...args) {
      const output = args.map((x2) => Buffer.isBuffer(x2) ? Buffer.from(x2) : x2);
      for (let i2 = 0;i2 < columnMap.size; ++i2) {
        output.push(null);
      }
      for (const row of generator(...args)) {
        if (Array.isArray(row)) {
          extractRowArray(row, output, columnMap.size, moduleName);
          yield output;
        } else if (typeof row === "object" && row !== null) {
          extractRowObject(row, output, columnMap, moduleName);
          yield output;
        } else {
          throw new TypeError(`Virtual table module "${moduleName}" yielded something that isn't a valid row object`);
        }
      }
    };
  }
  function extractRowArray(row, output, columnCount, moduleName) {
    if (row.length !== columnCount) {
      throw new TypeError(`Virtual table module "${moduleName}" yielded a row with an incorrect number of columns`);
    }
    const offset = output.length - columnCount;
    for (let i2 = 0;i2 < columnCount; ++i2) {
      output[i2 + offset] = row[i2];
    }
  }
  function extractRowObject(row, output, columnMap, moduleName) {
    let count = 0;
    for (const key of Object.keys(row)) {
      const index = columnMap.get(key);
      if (index === undefined) {
        throw new TypeError(`Virtual table module "${moduleName}" yielded a row with an undeclared column "${key}"`);
      }
      output[index] = row[key];
      count += 1;
    }
    if (count !== columnMap.size) {
      throw new TypeError(`Virtual table module "${moduleName}" yielded a row with missing columns`);
    }
  }
  function inferParameters({ length }) {
    if (!Number.isInteger(length) || length < 0) {
      throw new TypeError("Expected function.length to be a positive integer");
    }
    const params = [];
    for (let i2 = 0;i2 < length; ++i2) {
      params.push(`$${i2 + 1}`);
    }
    return params;
  }
  var { hasOwnProperty } = Object.prototype;
  var { apply } = Function.prototype;
  var GeneratorFunctionPrototype = Object.getPrototypeOf(function* () {});
  var identifier = (str) => `"${str.replace(/"/g, '""')}"`;
  var defer = (x2) => () => x2;
});

// node_modules/better-sqlite3/lib/methods/inspect.js
var require_inspect = __commonJS((exports2, module2) => {
  var DatabaseInspection = function Database() {};
  module2.exports = function inspect(depth, opts) {
    return Object.assign(new DatabaseInspection, this);
  };
});

// node_modules/better-sqlite3/lib/database.js
var require_database = __commonJS((exports2, module2) => {
  var fs = require("fs");
  var path = require("path");
  var util2 = require_util3();
  var SqliteError = require_sqlite_error();
  var DEFAULT_ADDON;
  function Database(filenameGiven, options) {
    if (new.target == null) {
      return new Database(filenameGiven, options);
    }
    let buffer;
    if (Buffer.isBuffer(filenameGiven)) {
      buffer = filenameGiven;
      filenameGiven = ":memory:";
    }
    if (filenameGiven == null)
      filenameGiven = "";
    if (options == null)
      options = {};
    if (typeof filenameGiven !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof options !== "object")
      throw new TypeError("Expected second argument to be an options object");
    if ("readOnly" in options)
      throw new TypeError('Misspelled option "readOnly" should be "readonly"');
    if ("memory" in options)
      throw new TypeError('Option "memory" was removed in v7.0.0 (use ":memory:" filename instead)');
    const filename = filenameGiven.trim();
    const anonymous = filename === "" || filename === ":memory:";
    const readonly = util2.getBooleanOption(options, "readonly");
    const fileMustExist = util2.getBooleanOption(options, "fileMustExist");
    const timeout = "timeout" in options ? options.timeout : 5000;
    const verbose = "verbose" in options ? options.verbose : null;
    const nativeBinding = "nativeBinding" in options ? options.nativeBinding : null;
    if (readonly && anonymous && !buffer)
      throw new TypeError("In-memory/temporary databases cannot be readonly");
    if (!Number.isInteger(timeout) || timeout < 0)
      throw new TypeError('Expected the "timeout" option to be a positive integer');
    if (timeout > 2147483647)
      throw new RangeError('Option "timeout" cannot be greater than 2147483647');
    if (verbose != null && typeof verbose !== "function")
      throw new TypeError('Expected the "verbose" option to be a function');
    if (nativeBinding != null && typeof nativeBinding !== "string" && typeof nativeBinding !== "object")
      throw new TypeError('Expected the "nativeBinding" option to be a string or addon object');
    let addon;
    if (nativeBinding == null) {
      addon = DEFAULT_ADDON || (DEFAULT_ADDON = require_bindings()("better_sqlite3.node"));
    } else if (typeof nativeBinding === "string") {
      const requireFunc = typeof __non_webpack_require__ === "function" ? __non_webpack_require__ : require;
      addon = requireFunc(path.resolve(nativeBinding).replace(/(\.node)?$/, ".node"));
    } else {
      addon = nativeBinding;
    }
    if (!addon.isInitialized) {
      addon.setErrorConstructor(SqliteError);
      addon.isInitialized = true;
    }
    if (!anonymous && !fs.existsSync(path.dirname(filename))) {
      throw new TypeError("Cannot open database because the directory does not exist");
    }
    Object.defineProperties(this, {
      [util2.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },
      ...wrappers.getters
    });
  }
  var wrappers = require_wrappers();
  Database.prototype.prepare = wrappers.prepare;
  Database.prototype.transaction = require_transaction();
  Database.prototype.pragma = require_pragma();
  Database.prototype.backup = require_backup();
  Database.prototype.serialize = require_serialize();
  Database.prototype.function = require_function();
  Database.prototype.aggregate = require_aggregate();
  Database.prototype.table = require_table();
  Database.prototype.loadExtension = wrappers.loadExtension;
  Database.prototype.exec = wrappers.exec;
  Database.prototype.close = wrappers.close;
  Database.prototype.defaultSafeIntegers = wrappers.defaultSafeIntegers;
  Database.prototype.unsafeMode = wrappers.unsafeMode;
  Database.prototype[util2.inspect] = require_inspect();
  module2.exports = Database;
});

// node_modules/better-sqlite3/lib/index.js
var require_lib2 = __commonJS((exports2, module2) => {
  module2.exports = require_database();
  module2.exports.SqliteError = require_sqlite_error();
});

// node_modules/undici/lib/cache/sqlite-cache-store.js
var require_sqlite_cache_store = __commonJS((exports2, module2) => {
  var { Writable } = require("stream");
  var { assertCacheKey, assertCacheValue } = require_cache();
  var DatabaseSync;
  var VERSION = 3;
  var MAX_ENTRY_SIZE = 2 * 1000 * 1000 * 1000;
  module2.exports = class SqliteCacheStore {
    #maxEntrySize = MAX_ENTRY_SIZE;
    #maxCount = Infinity;
    #db;
    #getValuesQuery;
    #updateValueQuery;
    #insertValueQuery;
    #deleteExpiredValuesQuery;
    #deleteByUrlQuery;
    #countEntriesQuery;
    #deleteOldValuesQuery;
    constructor(opts) {
      if (opts) {
        if (typeof opts !== "object") {
          throw new TypeError("SqliteCacheStore options must be an object");
        }
        if (opts.maxEntrySize !== undefined) {
          if (typeof opts.maxEntrySize !== "number" || !Number.isInteger(opts.maxEntrySize) || opts.maxEntrySize < 0) {
            throw new TypeError("SqliteCacheStore options.maxEntrySize must be a non-negative integer");
          }
          if (opts.maxEntrySize > MAX_ENTRY_SIZE) {
            throw new TypeError("SqliteCacheStore options.maxEntrySize must be less than 2gb");
          }
          this.#maxEntrySize = opts.maxEntrySize;
        }
        if (opts.maxCount !== undefined) {
          if (typeof opts.maxCount !== "number" || !Number.isInteger(opts.maxCount) || opts.maxCount < 0) {
            throw new TypeError("SqliteCacheStore options.maxCount must be a non-negative integer");
          }
          this.#maxCount = opts.maxCount;
        }
      }
      if (!DatabaseSync) {
        DatabaseSync = require_lib2();
      }
      this.#db = new DatabaseSync(opts?.location ?? ":memory:");
      this.#db.exec(`
      PRAGMA journal_mode = WAL;
      PRAGMA synchronous = NORMAL;
      PRAGMA temp_store = memory;
      PRAGMA optimize;

      CREATE TABLE IF NOT EXISTS cacheInterceptorV${VERSION} (
        -- Data specific to us
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url TEXT NOT NULL,
        method TEXT NOT NULL,

        -- Data returned to the interceptor
        body BUF NULL,
        deleteAt INTEGER NOT NULL,
        statusCode INTEGER NOT NULL,
        statusMessage TEXT NOT NULL,
        headers TEXT NULL,
        cacheControlDirectives TEXT NULL,
        etag TEXT NULL,
        vary TEXT NULL,
        cachedAt INTEGER NOT NULL,
        staleAt INTEGER NOT NULL
      );

      CREATE INDEX IF NOT EXISTS idx_cacheInterceptorV${VERSION}_getValuesQuery ON cacheInterceptorV${VERSION}(url, method, deleteAt);
      CREATE INDEX IF NOT EXISTS idx_cacheInterceptorV${VERSION}_deleteByUrlQuery ON cacheInterceptorV${VERSION}(deleteAt);
    `);
      this.#getValuesQuery = this.#db.prepare(`
      SELECT
        id,
        body,
        deleteAt,
        statusCode,
        statusMessage,
        headers,
        etag,
        cacheControlDirectives,
        vary,
        cachedAt,
        staleAt
      FROM cacheInterceptorV${VERSION}
      WHERE
        url = ?
        AND method = ?
      ORDER BY
        deleteAt ASC
    `);
      this.#updateValueQuery = this.#db.prepare(`
      UPDATE cacheInterceptorV${VERSION} SET
        body = ?,
        deleteAt = ?,
        statusCode = ?,
        statusMessage = ?,
        headers = ?,
        etag = ?,
        cacheControlDirectives = ?,
        cachedAt = ?,
        staleAt = ?
      WHERE
        id = ?
    `);
      this.#insertValueQuery = this.#db.prepare(`
      INSERT INTO cacheInterceptorV${VERSION} (
        url,
        method,
        body,
        deleteAt,
        statusCode,
        statusMessage,
        headers,
        etag,
        cacheControlDirectives,
        vary,
        cachedAt,
        staleAt
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);
      this.#deleteByUrlQuery = this.#db.prepare(`DELETE FROM cacheInterceptorV${VERSION} WHERE url = ?`);
      this.#countEntriesQuery = this.#db.prepare(`SELECT COUNT(*) AS total FROM cacheInterceptorV${VERSION}`);
      this.#deleteExpiredValuesQuery = this.#db.prepare(`DELETE FROM cacheInterceptorV${VERSION} WHERE deleteAt <= ?`);
      this.#deleteOldValuesQuery = this.#maxCount === Infinity ? null : this.#db.prepare(`
        DELETE FROM cacheInterceptorV${VERSION}
        WHERE id IN (
          SELECT
            id
          FROM cacheInterceptorV${VERSION}
          ORDER BY cachedAt DESC
          LIMIT ?
        )
      `);
    }
    close() {
      this.#db.close();
    }
    get(key) {
      assertCacheKey(key);
      const value = this.#findValue(key);
      return value ? {
        body: value.body ? Buffer.from(value.body.buffer, value.body.byteOffset, value.body.byteLength) : undefined,
        statusCode: value.statusCode,
        statusMessage: value.statusMessage,
        headers: value.headers ? JSON.parse(value.headers) : undefined,
        etag: value.etag ? value.etag : undefined,
        vary: value.vary ? JSON.parse(value.vary) : undefined,
        cacheControlDirectives: value.cacheControlDirectives ? JSON.parse(value.cacheControlDirectives) : undefined,
        cachedAt: value.cachedAt,
        staleAt: value.staleAt,
        deleteAt: value.deleteAt
      } : undefined;
    }
    set(key, value) {
      assertCacheKey(key);
      const url = this.#makeValueUrl(key);
      const body = Array.isArray(value.body) ? Buffer.concat(value.body) : value.body;
      const size = body?.byteLength;
      if (size && size > this.#maxEntrySize) {
        return;
      }
      const existingValue = this.#findValue(key, true);
      if (existingValue) {
        this.#updateValueQuery.run(body, value.deleteAt, value.statusCode, value.statusMessage, value.headers ? JSON.stringify(value.headers) : null, value.etag ? value.etag : null, value.cacheControlDirectives ? JSON.stringify(value.cacheControlDirectives) : null, value.cachedAt, value.staleAt, existingValue.id);
      } else {
        this.#prune();
        this.#insertValueQuery.run(url, key.method, body, value.deleteAt, value.statusCode, value.statusMessage, value.headers ? JSON.stringify(value.headers) : null, value.etag ? value.etag : null, value.cacheControlDirectives ? JSON.stringify(value.cacheControlDirectives) : null, value.vary ? JSON.stringify(value.vary) : null, value.cachedAt, value.staleAt);
      }
    }
    createWriteStream(key, value) {
      assertCacheKey(key);
      assertCacheValue(value);
      let size = 0;
      const body = [];
      const store = this;
      return new Writable({
        decodeStrings: true,
        write(chunk, encoding, callback) {
          size += chunk.byteLength;
          if (size < store.#maxEntrySize) {
            body.push(chunk);
          } else {
            this.destroy();
          }
          callback();
        },
        final(callback) {
          store.set(key, { ...value, body });
          callback();
        }
      });
    }
    delete(key) {
      if (typeof key !== "object") {
        throw new TypeError(`expected key to be object, got ${typeof key}`);
      }
      this.#deleteByUrlQuery.run(this.#makeValueUrl(key));
    }
    #prune() {
      if (Number.isFinite(this.#maxCount) && this.size <= this.#maxCount) {
        return 0;
      }
      {
        const removed = this.#deleteExpiredValuesQuery.run(Date.now()).changes;
        if (removed) {
          return removed;
        }
      }
      {
        const removed = this.#deleteOldValuesQuery?.run(Math.max(Math.floor(this.#maxCount * 0.1), 1)).changes;
        if (removed) {
          return removed;
        }
      }
      return 0;
    }
    get size() {
      const { total } = this.#countEntriesQuery.get();
      return total;
    }
    #makeValueUrl(key) {
      return `${key.origin}/${key.path}`;
    }
    #findValue(key, canBeExpired = false) {
      const url = this.#makeValueUrl(key);
      const { headers, method } = key;
      const values = this.#getValuesQuery.all(url, method);
      if (values.length === 0) {
        return;
      }
      const now = Date.now();
      for (const value of values) {
        if (now >= value.deleteAt && !canBeExpired) {
          return;
        }
        let matches = true;
        if (value.vary) {
          const vary = JSON.parse(value.vary);
          for (const header in vary) {
            if (!headerValueEquals(headers[header], vary[header])) {
              matches = false;
              break;
            }
          }
        }
        if (matches) {
          return value;
        }
      }
      return;
    }
  };
  function headerValueEquals(lhs, rhs) {
    if (lhs == null && rhs == null) {
      return true;
    }
    if (lhs == null && rhs != null || lhs != null && rhs == null) {
      return false;
    }
    if (Array.isArray(lhs) && Array.isArray(rhs)) {
      if (lhs.length !== rhs.length) {
        return false;
      }
      return lhs.every((x2, i2) => x2 === rhs[i2]);
    }
    return lhs === rhs;
  }
});

// node_modules/undici/lib/web/fetch/headers.js
var require_headers = __commonJS((exports2, module2) => {
  var { kConstruct } = require_symbols();
  var { kEnumerableProperty } = require_util();
  var {
    iteratorMixin,
    isValidHeaderName,
    isValidHeaderValue
  } = require_util2();
  var { webidl } = require_webidl();
  var assert = require("node:assert");
  var util2 = require("node:util");
  function isHTTPWhiteSpaceCharCode(code2) {
    return code2 === 10 || code2 === 13 || code2 === 9 || code2 === 32;
  }
  function headerValueNormalize(potentialValue) {
    let i2 = 0;
    let j = potentialValue.length;
    while (j > i2 && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1)))
      --j;
    while (j > i2 && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i2)))
      ++i2;
    return i2 === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i2, j);
  }
  function fill(headers, object) {
    if (Array.isArray(object)) {
      for (let i2 = 0;i2 < object.length; ++i2) {
        const header = object[i2];
        if (header.length !== 2) {
          throw webidl.errors.exception({
            header: "Headers constructor",
            message: `expected name/value pair to be length 2, found ${header.length}.`
          });
        }
        appendHeader(headers, header[0], header[1]);
      }
    } else if (typeof object === "object" && object !== null) {
      const keys = Object.keys(object);
      for (let i2 = 0;i2 < keys.length; ++i2) {
        appendHeader(headers, keys[i2], object[keys[i2]]);
      }
    } else {
      throw webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
    }
  }
  function appendHeader(headers, name, value) {
    value = headerValueNormalize(value);
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: "Headers.append",
        value: name,
        type: "header name"
      });
    } else if (!isValidHeaderValue(value)) {
      throw webidl.errors.invalidArgument({
        prefix: "Headers.append",
        value,
        type: "header value"
      });
    }
    if (getHeadersGuard(headers) === "immutable") {
      throw new TypeError("immutable");
    }
    return getHeadersList(headers).append(name, value, false);
  }
  function headersListSortAndCombine(target) {
    const headersList = getHeadersList(target);
    if (!headersList) {
      return [];
    }
    if (headersList.sortedMap) {
      return headersList.sortedMap;
    }
    const headers = [];
    const names = headersList.toSortedArray();
    const cookies = headersList.cookies;
    if (cookies === null || cookies.length === 1) {
      return headersList.sortedMap = names;
    }
    for (let i2 = 0;i2 < names.length; ++i2) {
      const { 0: name, 1: value } = names[i2];
      if (name === "set-cookie") {
        for (let j = 0;j < cookies.length; ++j) {
          headers.push([name, cookies[j]]);
        }
      } else {
        headers.push([name, value]);
      }
    }
    return headersList.sortedMap = headers;
  }
  function compareHeaderName(a, b) {
    return a[0] < b[0] ? -1 : 1;
  }

  class HeadersList {
    cookies = null;
    sortedMap;
    headersMap;
    constructor(init) {
      if (init instanceof HeadersList) {
        this.headersMap = new Map(init.headersMap);
        this.sortedMap = init.sortedMap;
        this.cookies = init.cookies === null ? null : [...init.cookies];
      } else {
        this.headersMap = new Map(init);
        this.sortedMap = null;
      }
    }
    contains(name, isLowerCase) {
      return this.headersMap.has(isLowerCase ? name : name.toLowerCase());
    }
    clear() {
      this.headersMap.clear();
      this.sortedMap = null;
      this.cookies = null;
    }
    append(name, value, isLowerCase) {
      this.sortedMap = null;
      const lowercaseName = isLowerCase ? name : name.toLowerCase();
      const exists = this.headersMap.get(lowercaseName);
      if (exists) {
        const delimiter = lowercaseName === "cookie" ? "; " : ", ";
        this.headersMap.set(lowercaseName, {
          name: exists.name,
          value: `${exists.value}${delimiter}${value}`
        });
      } else {
        this.headersMap.set(lowercaseName, { name, value });
      }
      if (lowercaseName === "set-cookie") {
        (this.cookies ??= []).push(value);
      }
    }
    set(name, value, isLowerCase) {
      this.sortedMap = null;
      const lowercaseName = isLowerCase ? name : name.toLowerCase();
      if (lowercaseName === "set-cookie") {
        this.cookies = [value];
      }
      this.headersMap.set(lowercaseName, { name, value });
    }
    delete(name, isLowerCase) {
      this.sortedMap = null;
      if (!isLowerCase)
        name = name.toLowerCase();
      if (name === "set-cookie") {
        this.cookies = null;
      }
      this.headersMap.delete(name);
    }
    get(name, isLowerCase) {
      return this.headersMap.get(isLowerCase ? name : name.toLowerCase())?.value ?? null;
    }
    *[Symbol.iterator]() {
      for (const { 0: name, 1: { value } } of this.headersMap) {
        yield [name, value];
      }
    }
    get entries() {
      const headers = {};
      if (this.headersMap.size !== 0) {
        for (const { name, value } of this.headersMap.values()) {
          headers[name] = value;
        }
      }
      return headers;
    }
    rawValues() {
      return this.headersMap.values();
    }
    get entriesList() {
      const headers = [];
      if (this.headersMap.size !== 0) {
        for (const { 0: lowerName, 1: { name, value } } of this.headersMap) {
          if (lowerName === "set-cookie") {
            for (const cookie of this.cookies) {
              headers.push([name, cookie]);
            }
          } else {
            headers.push([name, value]);
          }
        }
      }
      return headers;
    }
    toSortedArray() {
      const size = this.headersMap.size;
      const array = new Array(size);
      if (size <= 32) {
        if (size === 0) {
          return array;
        }
        const iterator = this.headersMap[Symbol.iterator]();
        const firstValue = iterator.next().value;
        array[0] = [firstValue[0], firstValue[1].value];
        assert(firstValue[1].value !== null);
        for (let i2 = 1, j = 0, right = 0, left = 0, pivot = 0, x2, value;i2 < size; ++i2) {
          value = iterator.next().value;
          x2 = array[i2] = [value[0], value[1].value];
          assert(x2[1] !== null);
          left = 0;
          right = i2;
          while (left < right) {
            pivot = left + (right - left >> 1);
            if (array[pivot][0] <= x2[0]) {
              left = pivot + 1;
            } else {
              right = pivot;
            }
          }
          if (i2 !== pivot) {
            j = i2;
            while (j > left) {
              array[j] = array[--j];
            }
            array[left] = x2;
          }
        }
        if (!iterator.next().done) {
          throw new TypeError("Unreachable");
        }
        return array;
      } else {
        let i2 = 0;
        for (const { 0: name, 1: { value } } of this.headersMap) {
          array[i2++] = [name, value];
          assert(value !== null);
        }
        return array.sort(compareHeaderName);
      }
    }
  }

  class Headers2 {
    #guard;
    #headersList;
    constructor(init = undefined) {
      webidl.util.markAsUncloneable(this);
      if (init === kConstruct) {
        return;
      }
      this.#headersList = new HeadersList;
      this.#guard = "none";
      if (init !== undefined) {
        init = webidl.converters.HeadersInit(init, "Headers constructor", "init");
        fill(this, init);
      }
    }
    append(name, value) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 2, "Headers.append");
      const prefix = "Headers.append";
      name = webidl.converters.ByteString(name, prefix, "name");
      value = webidl.converters.ByteString(value, prefix, "value");
      return appendHeader(this, name, value);
    }
    delete(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, "Headers.delete");
      const prefix = "Headers.delete";
      name = webidl.converters.ByteString(name, prefix, "name");
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.delete",
          value: name,
          type: "header name"
        });
      }
      if (this.#guard === "immutable") {
        throw new TypeError("immutable");
      }
      if (!this.#headersList.contains(name, false)) {
        return;
      }
      this.#headersList.delete(name, false);
    }
    get(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, "Headers.get");
      const prefix = "Headers.get";
      name = webidl.converters.ByteString(name, prefix, "name");
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix,
          value: name,
          type: "header name"
        });
      }
      return this.#headersList.get(name, false);
    }
    has(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, "Headers.has");
      const prefix = "Headers.has";
      name = webidl.converters.ByteString(name, prefix, "name");
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix,
          value: name,
          type: "header name"
        });
      }
      return this.#headersList.contains(name, false);
    }
    set(name, value) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 2, "Headers.set");
      const prefix = "Headers.set";
      name = webidl.converters.ByteString(name, prefix, "name");
      value = webidl.converters.ByteString(value, prefix, "value");
      value = headerValueNormalize(value);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix,
          value: name,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value)) {
        throw webidl.errors.invalidArgument({
          prefix,
          value,
          type: "header value"
        });
      }
      if (this.#guard === "immutable") {
        throw new TypeError("immutable");
      }
      this.#headersList.set(name, value, false);
    }
    getSetCookie() {
      webidl.brandCheck(this, Headers2);
      const list = this.#headersList.cookies;
      if (list) {
        return [...list];
      }
      return [];
    }
    [util2.inspect.custom](depth, options) {
      options.depth ??= depth;
      return `Headers ${util2.formatWithOptions(options, this.#headersList.entries)}`;
    }
    static getHeadersGuard(o) {
      return o.#guard;
    }
    static setHeadersGuard(o, guard) {
      o.#guard = guard;
    }
    static getHeadersList(o) {
      return o.#headersList;
    }
    static setHeadersList(target, list) {
      target.#headersList = list;
    }
  }
  var { getHeadersGuard, setHeadersGuard, getHeadersList, setHeadersList } = Headers2;
  Reflect.deleteProperty(Headers2, "getHeadersGuard");
  Reflect.deleteProperty(Headers2, "setHeadersGuard");
  Reflect.deleteProperty(Headers2, "getHeadersList");
  Reflect.deleteProperty(Headers2, "setHeadersList");
  iteratorMixin("Headers", Headers2, headersListSortAndCombine, 0, 1);
  Object.defineProperties(Headers2.prototype, {
    append: kEnumerableProperty,
    delete: kEnumerableProperty,
    get: kEnumerableProperty,
    has: kEnumerableProperty,
    set: kEnumerableProperty,
    getSetCookie: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "Headers",
      configurable: true
    },
    [util2.inspect.custom]: {
      enumerable: false
    }
  });
  webidl.converters.HeadersInit = function(V, prefix, argument) {
    if (webidl.util.Type(V) === webidl.util.Types.OBJECT) {
      const iterator = Reflect.get(V, Symbol.iterator);
      if (!util2.types.isProxy(V) && iterator === Headers2.prototype.entries) {
        try {
          return getHeadersList(V).entriesList;
        } catch {}
      }
      if (typeof iterator === "function") {
        return webidl.converters["sequence<sequence<ByteString>>"](V, prefix, argument, iterator.bind(V));
      }
      return webidl.converters["record<ByteString, ByteString>"](V, prefix, argument);
    }
    throw webidl.errors.conversionFailed({
      prefix: "Headers constructor",
      argument: "Argument 1",
      types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
    });
  };
  module2.exports = {
    fill,
    compareHeaderName,
    Headers: Headers2,
    HeadersList,
    getHeadersGuard,
    setHeadersGuard,
    setHeadersList,
    getHeadersList
  };
});

// node_modules/undici/lib/web/fetch/response.js
var require_response = __commonJS((exports2, module2) => {
  var { Headers: Headers2, HeadersList, fill, getHeadersGuard, setHeadersGuard, setHeadersList } = require_headers();
  var { extractBody, cloneBody, mixinBody, hasFinalizationRegistry, streamRegistry, bodyUnusable } = require_body();
  var util2 = require_util();
  var nodeUtil = require("node:util");
  var { kEnumerableProperty } = util2;
  var {
    isValidReasonPhrase,
    isCancelled,
    isAborted: isAborted2,
    serializeJavascriptValueToJSONString,
    isErrorLike,
    isomorphicEncode,
    environmentSettingsObject: relevantRealm
  } = require_util2();
  var {
    redirectStatusSet,
    nullBodyStatus
  } = require_constants3();
  var { webidl } = require_webidl();
  var { URLSerializer } = require_data_url();
  var { kConstruct } = require_symbols();
  var assert = require("node:assert");
  var { types } = require("node:util");
  var textEncoder = new TextEncoder("utf-8");

  class Response2 {
    #headers;
    #state;
    static error() {
      const responseObject = fromInnerResponse(makeNetworkError(), "immutable");
      return responseObject;
    }
    static json(data, init = undefined) {
      webidl.argumentLengthCheck(arguments, 1, "Response.json");
      if (init !== null) {
        init = webidl.converters.ResponseInit(init);
      }
      const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data));
      const body = extractBody(bytes);
      const responseObject = fromInnerResponse(makeResponse({}), "response");
      initializeResponse(responseObject, init, { body: body[0], type: "application/json" });
      return responseObject;
    }
    static redirect(url, status = 302) {
      webidl.argumentLengthCheck(arguments, 1, "Response.redirect");
      url = webidl.converters.USVString(url);
      status = webidl.converters["unsigned short"](status);
      let parsedURL;
      try {
        parsedURL = new URL(url, relevantRealm.settingsObject.baseUrl);
      } catch (err2) {
        throw new TypeError(`Failed to parse URL from ${url}`, { cause: err2 });
      }
      if (!redirectStatusSet.has(status)) {
        throw new RangeError(`Invalid status code ${status}`);
      }
      const responseObject = fromInnerResponse(makeResponse({}), "immutable");
      responseObject.#state.status = status;
      const value = isomorphicEncode(URLSerializer(parsedURL));
      responseObject.#state.headersList.append("location", value, true);
      return responseObject;
    }
    constructor(body = null, init = undefined) {
      webidl.util.markAsUncloneable(this);
      if (body === kConstruct) {
        return;
      }
      if (body !== null) {
        body = webidl.converters.BodyInit(body);
      }
      init = webidl.converters.ResponseInit(init);
      this.#state = makeResponse({});
      this.#headers = new Headers2(kConstruct);
      setHeadersGuard(this.#headers, "response");
      setHeadersList(this.#headers, this.#state.headersList);
      let bodyWithType = null;
      if (body != null) {
        const [extractedBody, type] = extractBody(body);
        bodyWithType = { body: extractedBody, type };
      }
      initializeResponse(this, init, bodyWithType);
    }
    get type() {
      webidl.brandCheck(this, Response2);
      return this.#state.type;
    }
    get url() {
      webidl.brandCheck(this, Response2);
      const urlList = this.#state.urlList;
      const url = urlList[urlList.length - 1] ?? null;
      if (url === null) {
        return "";
      }
      return URLSerializer(url, true);
    }
    get redirected() {
      webidl.brandCheck(this, Response2);
      return this.#state.urlList.length > 1;
    }
    get status() {
      webidl.brandCheck(this, Response2);
      return this.#state.status;
    }
    get ok() {
      webidl.brandCheck(this, Response2);
      return this.#state.status >= 200 && this.#state.status <= 299;
    }
    get statusText() {
      webidl.brandCheck(this, Response2);
      return this.#state.statusText;
    }
    get headers() {
      webidl.brandCheck(this, Response2);
      return this.#headers;
    }
    get body() {
      webidl.brandCheck(this, Response2);
      return this.#state.body ? this.#state.body.stream : null;
    }
    get bodyUsed() {
      webidl.brandCheck(this, Response2);
      return !!this.#state.body && util2.isDisturbed(this.#state.body.stream);
    }
    clone() {
      webidl.brandCheck(this, Response2);
      if (bodyUnusable(this.#state)) {
        throw webidl.errors.exception({
          header: "Response.clone",
          message: "Body has already been consumed."
        });
      }
      const clonedResponse = cloneResponse(this.#state);
      return fromInnerResponse(clonedResponse, getHeadersGuard(this.#headers));
    }
    [nodeUtil.inspect.custom](depth, options) {
      if (options.depth === null) {
        options.depth = 2;
      }
      options.colors ??= true;
      const properties = {
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        body: this.body,
        bodyUsed: this.bodyUsed,
        ok: this.ok,
        redirected: this.redirected,
        type: this.type,
        url: this.url
      };
      return `Response ${nodeUtil.formatWithOptions(options, properties)}`;
    }
    static getResponseHeaders(response) {
      return response.#headers;
    }
    static setResponseHeaders(response, newHeaders) {
      response.#headers = newHeaders;
    }
    static getResponseState(response) {
      return response.#state;
    }
    static setResponseState(response, newState) {
      response.#state = newState;
    }
  }
  var { getResponseHeaders, setResponseHeaders, getResponseState, setResponseState } = Response2;
  Reflect.deleteProperty(Response2, "getResponseHeaders");
  Reflect.deleteProperty(Response2, "setResponseHeaders");
  Reflect.deleteProperty(Response2, "getResponseState");
  Reflect.deleteProperty(Response2, "setResponseState");
  mixinBody(Response2, getResponseState);
  Object.defineProperties(Response2.prototype, {
    type: kEnumerableProperty,
    url: kEnumerableProperty,
    status: kEnumerableProperty,
    ok: kEnumerableProperty,
    redirected: kEnumerableProperty,
    statusText: kEnumerableProperty,
    headers: kEnumerableProperty,
    clone: kEnumerableProperty,
    body: kEnumerableProperty,
    bodyUsed: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "Response",
      configurable: true
    }
  });
  Object.defineProperties(Response2, {
    json: kEnumerableProperty,
    redirect: kEnumerableProperty,
    error: kEnumerableProperty
  });
  function cloneResponse(response) {
    if (response.internalResponse) {
      return filterResponse(cloneResponse(response.internalResponse), response.type);
    }
    const newResponse = makeResponse({ ...response, body: null });
    if (response.body != null) {
      newResponse.body = cloneBody(newResponse, response.body);
    }
    return newResponse;
  }
  function makeResponse(init) {
    return {
      aborted: false,
      rangeRequested: false,
      timingAllowPassed: false,
      requestIncludesCredentials: false,
      type: "default",
      status: 200,
      timingInfo: null,
      cacheState: "",
      statusText: "",
      ...init,
      headersList: init?.headersList ? new HeadersList(init?.headersList) : new HeadersList,
      urlList: init?.urlList ? [...init.urlList] : []
    };
  }
  function makeNetworkError(reason) {
    const isError = isErrorLike(reason);
    return makeResponse({
      type: "error",
      status: 0,
      error: isError ? reason : new Error(reason ? String(reason) : reason),
      aborted: reason && reason.name === "AbortError"
    });
  }
  function isNetworkError(response) {
    return response.type === "error" && response.status === 0;
  }
  function makeFilteredResponse(response, state) {
    state = {
      internalResponse: response,
      ...state
    };
    return new Proxy(response, {
      get(target, p) {
        return p in state ? state[p] : target[p];
      },
      set(target, p, value) {
        assert(!(p in state));
        target[p] = value;
        return true;
      }
    });
  }
  function filterResponse(response, type) {
    if (type === "basic") {
      return makeFilteredResponse(response, {
        type: "basic",
        headersList: response.headersList
      });
    } else if (type === "cors") {
      return makeFilteredResponse(response, {
        type: "cors",
        headersList: response.headersList
      });
    } else if (type === "opaque") {
      return makeFilteredResponse(response, {
        type: "opaque",
        urlList: Object.freeze([]),
        status: 0,
        statusText: "",
        body: null
      });
    } else if (type === "opaqueredirect") {
      return makeFilteredResponse(response, {
        type: "opaqueredirect",
        status: 0,
        statusText: "",
        headersList: [],
        body: null
      });
    } else {
      assert(false);
    }
  }
  function makeAppropriateNetworkError(fetchParams, err2 = null) {
    assert(isCancelled(fetchParams));
    return isAborted2(fetchParams) ? makeNetworkError(Object.assign(new DOMException("The operation was aborted.", "AbortError"), { cause: err2 })) : makeNetworkError(Object.assign(new DOMException("Request was cancelled."), { cause: err2 }));
  }
  function initializeResponse(response, init, body) {
    if (init.status !== null && (init.status < 200 || init.status > 599)) {
      throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
    }
    if ("statusText" in init && init.statusText != null) {
      if (!isValidReasonPhrase(String(init.statusText))) {
        throw new TypeError("Invalid statusText");
      }
    }
    if ("status" in init && init.status != null) {
      getResponseState(response).status = init.status;
    }
    if ("statusText" in init && init.statusText != null) {
      getResponseState(response).statusText = init.statusText;
    }
    if ("headers" in init && init.headers != null) {
      fill(getResponseHeaders(response), init.headers);
    }
    if (body) {
      if (nullBodyStatus.includes(response.status)) {
        throw webidl.errors.exception({
          header: "Response constructor",
          message: `Invalid response status code ${response.status}`
        });
      }
      getResponseState(response).body = body.body;
      if (body.type != null && !getResponseState(response).headersList.contains("content-type", true)) {
        getResponseState(response).headersList.append("content-type", body.type, true);
      }
    }
  }
  function fromInnerResponse(innerResponse, guard) {
    const response = new Response2(kConstruct);
    setResponseState(response, innerResponse);
    const headers = new Headers2(kConstruct);
    setResponseHeaders(response, headers);
    setHeadersList(headers, innerResponse.headersList);
    setHeadersGuard(headers, guard);
    if (hasFinalizationRegistry && innerResponse.body?.stream) {
      streamRegistry.register(response, new WeakRef(innerResponse.body.stream));
    }
    return response;
  }
  webidl.converters.XMLHttpRequestBodyInit = function(V, prefix, name) {
    if (typeof V === "string") {
      return webidl.converters.USVString(V, prefix, name);
    }
    if (webidl.is.Blob(V)) {
      return V;
    }
    if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {
      return V;
    }
    if (webidl.is.FormData(V)) {
      return V;
    }
    if (webidl.is.URLSearchParams(V)) {
      return V;
    }
    return webidl.converters.DOMString(V, prefix, name);
  };
  webidl.converters.BodyInit = function(V, prefix, argument) {
    if (webidl.is.ReadableStream(V)) {
      return V;
    }
    if (V?.[Symbol.asyncIterator]) {
      return V;
    }
    return webidl.converters.XMLHttpRequestBodyInit(V, prefix, argument);
  };
  webidl.converters.ResponseInit = webidl.dictionaryConverter([
    {
      key: "status",
      converter: webidl.converters["unsigned short"],
      defaultValue: () => 200
    },
    {
      key: "statusText",
      converter: webidl.converters.ByteString,
      defaultValue: () => ""
    },
    {
      key: "headers",
      converter: webidl.converters.HeadersInit
    }
  ]);
  webidl.is.Response = webidl.util.MakeTypeAssertion(Response2);
  module2.exports = {
    isNetworkError,
    makeNetworkError,
    makeResponse,
    makeAppropriateNetworkError,
    filterResponse,
    Response: Response2,
    cloneResponse,
    fromInnerResponse,
    getResponseState
  };
});

// node_modules/undici/lib/web/fetch/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS((exports2, module2) => {
  var { kConnected, kSize } = require_symbols();

  class CompatWeakRef {
    constructor(value) {
      this.value = value;
    }
    deref() {
      return this.value[kConnected] === 0 && this.value[kSize] === 0 ? undefined : this.value;
    }
  }

  class CompatFinalizer {
    constructor(finalizer) {
      this.finalizer = finalizer;
    }
    register(dispatcher, key) {
      if (dispatcher.on) {
        dispatcher.on("disconnect", () => {
          if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
            this.finalizer(key);
          }
        });
      }
    }
    unregister(key) {}
  }
  module2.exports = function() {
    if (process.env.NODE_V8_COVERAGE && process.version.startsWith("v18")) {
      process._rawDebug("Using compatibility WeakRef and FinalizationRegistry");
      return {
        WeakRef: CompatWeakRef,
        FinalizationRegistry: CompatFinalizer
      };
    }
    return { WeakRef, FinalizationRegistry };
  };
});

// node_modules/undici/lib/web/fetch/request.js
var require_request2 = __commonJS((exports2, module2) => {
  var { extractBody, mixinBody, cloneBody, bodyUnusable } = require_body();
  var { Headers: Headers2, fill: fillHeaders, HeadersList, setHeadersGuard, getHeadersGuard, setHeadersList, getHeadersList } = require_headers();
  var { FinalizationRegistry: FinalizationRegistry2 } = require_dispatcher_weakref()();
  var util2 = require_util();
  var nodeUtil = require("node:util");
  var {
    isValidHTTPToken,
    sameOrigin,
    environmentSettingsObject
  } = require_util2();
  var {
    forbiddenMethodsSet,
    corsSafeListedMethodsSet,
    referrerPolicy,
    requestRedirect,
    requestMode,
    requestCredentials,
    requestCache,
    requestDuplex
  } = require_constants3();
  var { kEnumerableProperty, normalizedMethodRecordsBase, normalizedMethodRecords } = util2;
  var { webidl } = require_webidl();
  var { URLSerializer } = require_data_url();
  var { kConstruct } = require_symbols();
  var assert = require("node:assert");
  var { getMaxListeners, setMaxListeners, defaultMaxListeners } = require("node:events");
  var kAbortController = Symbol("abortController");
  var requestFinalizer = new FinalizationRegistry2(({ signal, abort }) => {
    signal.removeEventListener("abort", abort);
  });
  var dependentControllerMap = new WeakMap;
  var abortSignalHasEventHandlerLeakWarning;
  try {
    abortSignalHasEventHandlerLeakWarning = getMaxListeners(new AbortController().signal) > 0;
  } catch {
    abortSignalHasEventHandlerLeakWarning = false;
  }
  function buildAbort(acRef) {
    return abort;
    function abort() {
      const ac = acRef.deref();
      if (ac !== undefined) {
        requestFinalizer.unregister(abort);
        this.removeEventListener("abort", abort);
        ac.abort(this.reason);
        const controllerList = dependentControllerMap.get(ac.signal);
        if (controllerList !== undefined) {
          if (controllerList.size !== 0) {
            for (const ref of controllerList) {
              const ctrl = ref.deref();
              if (ctrl !== undefined) {
                ctrl.abort(this.reason);
              }
            }
            controllerList.clear();
          }
          dependentControllerMap.delete(ac.signal);
        }
      }
    }
  }
  var patchMethodWarning = false;

  class Request {
    #signal;
    #dispatcher;
    #headers;
    #state;
    constructor(input, init = undefined) {
      webidl.util.markAsUncloneable(this);
      if (input === kConstruct) {
        return;
      }
      const prefix = "Request constructor";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      input = webidl.converters.RequestInfo(input, prefix, "input");
      init = webidl.converters.RequestInit(init, prefix, "init");
      let request = null;
      let fallbackMode = null;
      const baseUrl = environmentSettingsObject.settingsObject.baseUrl;
      let signal = null;
      if (typeof input === "string") {
        this.#dispatcher = init.dispatcher;
        let parsedURL;
        try {
          parsedURL = new URL(input, baseUrl);
        } catch (err2) {
          throw new TypeError("Failed to parse URL from " + input, { cause: err2 });
        }
        if (parsedURL.username || parsedURL.password) {
          throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
        }
        request = makeRequest({ urlList: [parsedURL] });
        fallbackMode = "cors";
      } else {
        assert(webidl.is.Request(input));
        request = input.#state;
        signal = input.#signal;
        this.#dispatcher = init.dispatcher || input.#dispatcher;
      }
      const origin = environmentSettingsObject.settingsObject.origin;
      let window2 = "client";
      if (request.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request.window, origin)) {
        window2 = request.window;
      }
      if (init.window != null) {
        throw new TypeError(`'window' option '${window2}' must be null`);
      }
      if ("window" in init) {
        window2 = "no-window";
      }
      request = makeRequest({
        method: request.method,
        headersList: request.headersList,
        unsafeRequest: request.unsafeRequest,
        client: environmentSettingsObject.settingsObject,
        window: window2,
        priority: request.priority,
        origin: request.origin,
        referrer: request.referrer,
        referrerPolicy: request.referrerPolicy,
        mode: request.mode,
        credentials: request.credentials,
        cache: request.cache,
        redirect: request.redirect,
        integrity: request.integrity,
        keepalive: request.keepalive,
        reloadNavigation: request.reloadNavigation,
        historyNavigation: request.historyNavigation,
        urlList: [...request.urlList]
      });
      const initHasKey = Object.keys(init).length !== 0;
      if (initHasKey) {
        if (request.mode === "navigate") {
          request.mode = "same-origin";
        }
        request.reloadNavigation = false;
        request.historyNavigation = false;
        request.origin = "client";
        request.referrer = "client";
        request.referrerPolicy = "";
        request.url = request.urlList[request.urlList.length - 1];
        request.urlList = [request.url];
      }
      if (init.referrer !== undefined) {
        const referrer = init.referrer;
        if (referrer === "") {
          request.referrer = "no-referrer";
        } else {
          let parsedReferrer;
          try {
            parsedReferrer = new URL(referrer, baseUrl);
          } catch (err2) {
            throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err2 });
          }
          if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin(parsedReferrer, environmentSettingsObject.settingsObject.baseUrl)) {
            request.referrer = "client";
          } else {
            request.referrer = parsedReferrer;
          }
        }
      }
      if (init.referrerPolicy !== undefined) {
        request.referrerPolicy = init.referrerPolicy;
      }
      let mode;
      if (init.mode !== undefined) {
        mode = init.mode;
      } else {
        mode = fallbackMode;
      }
      if (mode === "navigate") {
        throw webidl.errors.exception({
          header: "Request constructor",
          message: "invalid request mode navigate."
        });
      }
      if (mode != null) {
        request.mode = mode;
      }
      if (init.credentials !== undefined) {
        request.credentials = init.credentials;
      }
      if (init.cache !== undefined) {
        request.cache = init.cache;
      }
      if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
        throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
      }
      if (init.redirect !== undefined) {
        request.redirect = init.redirect;
      }
      if (init.integrity != null) {
        request.integrity = String(init.integrity);
      }
      if (init.keepalive !== undefined) {
        request.keepalive = Boolean(init.keepalive);
      }
      if (init.method !== undefined) {
        let method = init.method;
        const mayBeNormalized = normalizedMethodRecords[method];
        if (mayBeNormalized !== undefined) {
          request.method = mayBeNormalized;
        } else {
          if (!isValidHTTPToken(method)) {
            throw new TypeError(`'${method}' is not a valid HTTP method.`);
          }
          const upperCase = method.toUpperCase();
          if (forbiddenMethodsSet.has(upperCase)) {
            throw new TypeError(`'${method}' HTTP method is unsupported.`);
          }
          method = normalizedMethodRecordsBase[upperCase] ?? method;
          request.method = method;
        }
        if (!patchMethodWarning && request.method === "patch") {
          process.emitWarning("Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.", {
            code: "UNDICI-FETCH-patch"
          });
          patchMethodWarning = true;
        }
      }
      if (init.signal !== undefined) {
        signal = init.signal;
      }
      this.#state = request;
      const ac = new AbortController;
      this.#signal = ac.signal;
      if (signal != null) {
        if (signal.aborted) {
          ac.abort(signal.reason);
        } else {
          this[kAbortController] = ac;
          const acRef = new WeakRef(ac);
          const abort = buildAbort(acRef);
          if (abortSignalHasEventHandlerLeakWarning && getMaxListeners(signal) === defaultMaxListeners) {
            setMaxListeners(1500, signal);
          }
          util2.addAbortListener(signal, abort);
          requestFinalizer.register(ac, { signal, abort }, abort);
        }
      }
      this.#headers = new Headers2(kConstruct);
      setHeadersList(this.#headers, request.headersList);
      setHeadersGuard(this.#headers, "request");
      if (mode === "no-cors") {
        if (!corsSafeListedMethodsSet.has(request.method)) {
          throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);
        }
        setHeadersGuard(this.#headers, "request-no-cors");
      }
      if (initHasKey) {
        const headersList = getHeadersList(this.#headers);
        const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);
        headersList.clear();
        if (headers instanceof HeadersList) {
          for (const { name, value } of headers.rawValues()) {
            headersList.append(name, value, false);
          }
          headersList.cookies = headers.cookies;
        } else {
          fillHeaders(this.#headers, headers);
        }
      }
      const inputBody = webidl.is.Request(input) ? input.#state.body : null;
      if ((init.body != null || inputBody != null) && (request.method === "GET" || request.method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body.");
      }
      let initBody = null;
      if (init.body != null) {
        const [extractedBody, contentType3] = extractBody(init.body, request.keepalive);
        initBody = extractedBody;
        if (contentType3 && !getHeadersList(this.#headers).contains("content-type", true)) {
          this.#headers.append("content-type", contentType3, true);
        }
      }
      const inputOrInitBody = initBody ?? inputBody;
      if (inputOrInitBody != null && inputOrInitBody.source == null) {
        if (initBody != null && init.duplex == null) {
          throw new TypeError("RequestInit: duplex option is required when sending a body.");
        }
        if (request.mode !== "same-origin" && request.mode !== "cors") {
          throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
        }
        request.useCORSPreflightFlag = true;
      }
      let finalBody = inputOrInitBody;
      if (initBody == null && inputBody != null) {
        if (bodyUnusable(input.#state)) {
          throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
        }
        const identityTransform = new TransformStream;
        inputBody.stream.pipeThrough(identityTransform);
        finalBody = {
          source: inputBody.source,
          length: inputBody.length,
          stream: identityTransform.readable
        };
      }
      this.#state.body = finalBody;
    }
    get method() {
      webidl.brandCheck(this, Request);
      return this.#state.method;
    }
    get url() {
      webidl.brandCheck(this, Request);
      return URLSerializer(this.#state.url);
    }
    get headers() {
      webidl.brandCheck(this, Request);
      return this.#headers;
    }
    get destination() {
      webidl.brandCheck(this, Request);
      return this.#state.destination;
    }
    get referrer() {
      webidl.brandCheck(this, Request);
      if (this.#state.referrer === "no-referrer") {
        return "";
      }
      if (this.#state.referrer === "client") {
        return "about:client";
      }
      return this.#state.referrer.toString();
    }
    get referrerPolicy() {
      webidl.brandCheck(this, Request);
      return this.#state.referrerPolicy;
    }
    get mode() {
      webidl.brandCheck(this, Request);
      return this.#state.mode;
    }
    get credentials() {
      webidl.brandCheck(this, Request);
      return this.#state.credentials;
    }
    get cache() {
      webidl.brandCheck(this, Request);
      return this.#state.cache;
    }
    get redirect() {
      webidl.brandCheck(this, Request);
      return this.#state.redirect;
    }
    get integrity() {
      webidl.brandCheck(this, Request);
      return this.#state.integrity;
    }
    get keepalive() {
      webidl.brandCheck(this, Request);
      return this.#state.keepalive;
    }
    get isReloadNavigation() {
      webidl.brandCheck(this, Request);
      return this.#state.reloadNavigation;
    }
    get isHistoryNavigation() {
      webidl.brandCheck(this, Request);
      return this.#state.historyNavigation;
    }
    get signal() {
      webidl.brandCheck(this, Request);
      return this.#signal;
    }
    get body() {
      webidl.brandCheck(this, Request);
      return this.#state.body ? this.#state.body.stream : null;
    }
    get bodyUsed() {
      webidl.brandCheck(this, Request);
      return !!this.#state.body && util2.isDisturbed(this.#state.body.stream);
    }
    get duplex() {
      webidl.brandCheck(this, Request);
      return "half";
    }
    clone() {
      webidl.brandCheck(this, Request);
      if (bodyUnusable(this.#state)) {
        throw new TypeError("unusable");
      }
      const clonedRequest = cloneRequest(this.#state);
      const ac = new AbortController;
      if (this.signal.aborted) {
        ac.abort(this.signal.reason);
      } else {
        let list = dependentControllerMap.get(this.signal);
        if (list === undefined) {
          list = new Set;
          dependentControllerMap.set(this.signal, list);
        }
        const acRef = new WeakRef(ac);
        list.add(acRef);
        util2.addAbortListener(ac.signal, buildAbort(acRef));
      }
      return fromInnerRequest(clonedRequest, this.#dispatcher, ac.signal, getHeadersGuard(this.#headers));
    }
    [nodeUtil.inspect.custom](depth, options) {
      if (options.depth === null) {
        options.depth = 2;
      }
      options.colors ??= true;
      const properties = {
        method: this.method,
        url: this.url,
        headers: this.headers,
        destination: this.destination,
        referrer: this.referrer,
        referrerPolicy: this.referrerPolicy,
        mode: this.mode,
        credentials: this.credentials,
        cache: this.cache,
        redirect: this.redirect,
        integrity: this.integrity,
        keepalive: this.keepalive,
        isReloadNavigation: this.isReloadNavigation,
        isHistoryNavigation: this.isHistoryNavigation,
        signal: this.signal
      };
      return `Request ${nodeUtil.formatWithOptions(options, properties)}`;
    }
    static setRequestSignal(request, newSignal) {
      request.#signal = newSignal;
      return request;
    }
    static getRequestDispatcher(request) {
      return request.#dispatcher;
    }
    static setRequestDispatcher(request, newDispatcher) {
      request.#dispatcher = newDispatcher;
    }
    static setRequestHeaders(request, newHeaders) {
      request.#headers = newHeaders;
    }
    static getRequestState(request) {
      return request.#state;
    }
    static setRequestState(request, newState) {
      request.#state = newState;
    }
  }
  var { setRequestSignal, getRequestDispatcher, setRequestDispatcher, setRequestHeaders, getRequestState, setRequestState } = Request;
  Reflect.deleteProperty(Request, "setRequestSignal");
  Reflect.deleteProperty(Request, "getRequestDispatcher");
  Reflect.deleteProperty(Request, "setRequestDispatcher");
  Reflect.deleteProperty(Request, "setRequestHeaders");
  Reflect.deleteProperty(Request, "getRequestState");
  Reflect.deleteProperty(Request, "setRequestState");
  mixinBody(Request, getRequestState);
  function makeRequest(init) {
    return {
      method: init.method ?? "GET",
      localURLsOnly: init.localURLsOnly ?? false,
      unsafeRequest: init.unsafeRequest ?? false,
      body: init.body ?? null,
      client: init.client ?? null,
      reservedClient: init.reservedClient ?? null,
      replacesClientId: init.replacesClientId ?? "",
      window: init.window ?? "client",
      keepalive: init.keepalive ?? false,
      serviceWorkers: init.serviceWorkers ?? "all",
      initiator: init.initiator ?? "",
      destination: init.destination ?? "",
      priority: init.priority ?? null,
      origin: init.origin ?? "client",
      policyContainer: init.policyContainer ?? "client",
      referrer: init.referrer ?? "client",
      referrerPolicy: init.referrerPolicy ?? "",
      mode: init.mode ?? "no-cors",
      useCORSPreflightFlag: init.useCORSPreflightFlag ?? false,
      credentials: init.credentials ?? "same-origin",
      useCredentials: init.useCredentials ?? false,
      cache: init.cache ?? "default",
      redirect: init.redirect ?? "follow",
      integrity: init.integrity ?? "",
      cryptoGraphicsNonceMetadata: init.cryptoGraphicsNonceMetadata ?? "",
      parserMetadata: init.parserMetadata ?? "",
      reloadNavigation: init.reloadNavigation ?? false,
      historyNavigation: init.historyNavigation ?? false,
      userActivation: init.userActivation ?? false,
      taintedOrigin: init.taintedOrigin ?? false,
      redirectCount: init.redirectCount ?? 0,
      responseTainting: init.responseTainting ?? "basic",
      preventNoCacheCacheControlHeaderModification: init.preventNoCacheCacheControlHeaderModification ?? false,
      done: init.done ?? false,
      timingAllowFailed: init.timingAllowFailed ?? false,
      urlList: init.urlList,
      url: init.urlList[0],
      headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList
    };
  }
  function cloneRequest(request) {
    const newRequest = makeRequest({ ...request, body: null });
    if (request.body != null) {
      newRequest.body = cloneBody(newRequest, request.body);
    }
    return newRequest;
  }
  function fromInnerRequest(innerRequest, dispatcher, signal, guard) {
    const request = new Request(kConstruct);
    setRequestState(request, innerRequest);
    setRequestDispatcher(request, dispatcher);
    setRequestSignal(request, signal);
    const headers = new Headers2(kConstruct);
    setRequestHeaders(request, headers);
    setHeadersList(headers, innerRequest.headersList);
    setHeadersGuard(headers, guard);
    return request;
  }
  Object.defineProperties(Request.prototype, {
    method: kEnumerableProperty,
    url: kEnumerableProperty,
    headers: kEnumerableProperty,
    redirect: kEnumerableProperty,
    clone: kEnumerableProperty,
    signal: kEnumerableProperty,
    duplex: kEnumerableProperty,
    destination: kEnumerableProperty,
    body: kEnumerableProperty,
    bodyUsed: kEnumerableProperty,
    isHistoryNavigation: kEnumerableProperty,
    isReloadNavigation: kEnumerableProperty,
    keepalive: kEnumerableProperty,
    integrity: kEnumerableProperty,
    cache: kEnumerableProperty,
    credentials: kEnumerableProperty,
    attribute: kEnumerableProperty,
    referrerPolicy: kEnumerableProperty,
    referrer: kEnumerableProperty,
    mode: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "Request",
      configurable: true
    }
  });
  webidl.is.Request = webidl.util.MakeTypeAssertion(Request);
  webidl.converters.RequestInfo = function(V, prefix, argument) {
    if (typeof V === "string") {
      return webidl.converters.USVString(V);
    }
    if (webidl.is.Request(V)) {
      return V;
    }
    return webidl.converters.USVString(V);
  };
  webidl.converters.RequestInit = webidl.dictionaryConverter([
    {
      key: "method",
      converter: webidl.converters.ByteString
    },
    {
      key: "headers",
      converter: webidl.converters.HeadersInit
    },
    {
      key: "body",
      converter: webidl.nullableConverter(webidl.converters.BodyInit)
    },
    {
      key: "referrer",
      converter: webidl.converters.USVString
    },
    {
      key: "referrerPolicy",
      converter: webidl.converters.DOMString,
      allowedValues: referrerPolicy
    },
    {
      key: "mode",
      converter: webidl.converters.DOMString,
      allowedValues: requestMode
    },
    {
      key: "credentials",
      converter: webidl.converters.DOMString,
      allowedValues: requestCredentials
    },
    {
      key: "cache",
      converter: webidl.converters.DOMString,
      allowedValues: requestCache
    },
    {
      key: "redirect",
      converter: webidl.converters.DOMString,
      allowedValues: requestRedirect
    },
    {
      key: "integrity",
      converter: webidl.converters.DOMString
    },
    {
      key: "keepalive",
      converter: webidl.converters.boolean
    },
    {
      key: "signal",
      converter: webidl.nullableConverter((signal) => webidl.converters.AbortSignal(signal, "RequestInit", "signal"))
    },
    {
      key: "window",
      converter: webidl.converters.any
    },
    {
      key: "duplex",
      converter: webidl.converters.DOMString,
      allowedValues: requestDuplex
    },
    {
      key: "dispatcher",
      converter: webidl.converters.any
    }
  ]);
  module2.exports = {
    Request,
    makeRequest,
    fromInnerRequest,
    cloneRequest,
    getRequestDispatcher,
    getRequestState
  };
});

// node_modules/undici/lib/web/fetch/index.js
var require_fetch = __commonJS((exports2, module2) => {
  var {
    makeNetworkError,
    makeAppropriateNetworkError,
    filterResponse,
    makeResponse,
    fromInnerResponse,
    getResponseState
  } = require_response();
  var { HeadersList } = require_headers();
  var { Request, cloneRequest, getRequestDispatcher, getRequestState } = require_request2();
  var zlib = require("node:zlib");
  var {
    bytesMatch,
    makePolicyContainer,
    clonePolicyContainer,
    requestBadPort,
    TAOCheck,
    appendRequestOriginHeader,
    responseLocationURL,
    requestCurrentURL,
    setRequestReferrerPolicyOnRedirect,
    tryUpgradeRequestToAPotentiallyTrustworthyURL,
    createOpaqueTimingInfo,
    appendFetchMetadata,
    corsCheck,
    crossOriginResourcePolicyCheck,
    determineRequestsReferrer,
    coarsenedSharedCurrentTime,
    createDeferredPromise,
    sameOrigin,
    isCancelled,
    isAborted: isAborted2,
    isErrorLike,
    fullyReadBody,
    readableStreamClose,
    isomorphicEncode,
    urlIsLocal,
    urlIsHttpHttpsScheme,
    urlHasHttpsScheme,
    clampAndCoarsenConnectionTimingInfo,
    simpleRangeHeaderValue,
    buildContentRange,
    createInflate,
    extractMimeType
  } = require_util2();
  var assert = require("node:assert");
  var { safelyExtractBody, extractBody } = require_body();
  var {
    redirectStatusSet,
    nullBodyStatus,
    safeMethodsSet,
    requestBodyHeader,
    subresourceSet
  } = require_constants3();
  var EE = require("node:events");
  var { Readable, pipeline, finished, isErrored, isReadable } = require("node:stream");
  var { addAbortListener, bufferToLowerCasedHeaderName } = require_util();
  var { dataURLProcessor, serializeAMimeType, minimizeSupportedMimeType } = require_data_url();
  var { getGlobalDispatcher } = require_global2();
  var { webidl } = require_webidl();
  var { STATUS_CODES } = require("node:http");
  var GET_OR_HEAD = ["GET", "HEAD"];
  var defaultUserAgent = typeof __UNDICI_IS_NODE__ !== "undefined" || typeof esbuildDetection !== "undefined" ? "node" : "undici";
  var resolveObjectURL;

  class Fetch extends EE {
    constructor(dispatcher) {
      super();
      this.dispatcher = dispatcher;
      this.connection = null;
      this.dump = false;
      this.state = "ongoing";
    }
    terminate(reason) {
      if (this.state !== "ongoing") {
        return;
      }
      this.state = "terminated";
      this.connection?.destroy(reason);
      this.emit("terminated", reason);
    }
    abort(error) {
      if (this.state !== "ongoing") {
        return;
      }
      this.state = "aborted";
      if (!error) {
        error = new DOMException("The operation was aborted.", "AbortError");
      }
      this.serializedAbortReason = error;
      this.connection?.destroy(error);
      this.emit("terminated", error);
    }
  }
  function handleFetchDone(response) {
    finalizeAndReportTiming(response, "fetch");
  }
  function fetch2(input, init = undefined) {
    webidl.argumentLengthCheck(arguments, 1, "globalThis.fetch");
    let p = createDeferredPromise();
    let requestObject;
    try {
      requestObject = new Request(input, init);
    } catch (e) {
      p.reject(e);
      return p.promise;
    }
    const request = getRequestState(requestObject);
    if (requestObject.signal.aborted) {
      abortFetch(p, request, null, requestObject.signal.reason);
      return p.promise;
    }
    const globalObject = request.client.globalObject;
    if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") {
      request.serviceWorkers = "none";
    }
    let responseObject = null;
    let locallyAborted = false;
    let controller = null;
    addAbortListener(requestObject.signal, () => {
      locallyAborted = true;
      assert(controller != null);
      controller.abort(requestObject.signal.reason);
      const realResponse = responseObject?.deref();
      abortFetch(p, request, realResponse, requestObject.signal.reason);
    });
    const processResponse = (response) => {
      if (locallyAborted) {
        return;
      }
      if (response.aborted) {
        abortFetch(p, request, responseObject, controller.serializedAbortReason);
        return;
      }
      if (response.type === "error") {
        p.reject(new TypeError("fetch failed", { cause: response.error }));
        return;
      }
      responseObject = new WeakRef(fromInnerResponse(response, "immutable"));
      p.resolve(responseObject.deref());
      p = null;
    };
    controller = fetching({
      request,
      processResponseEndOfBody: handleFetchDone,
      processResponse,
      dispatcher: getRequestDispatcher(requestObject)
    });
    return p.promise;
  }
  function finalizeAndReportTiming(response, initiatorType = "other") {
    if (response.type === "error" && response.aborted) {
      return;
    }
    if (!response.urlList?.length) {
      return;
    }
    const originalURL = response.urlList[0];
    let timingInfo = response.timingInfo;
    let cacheState = response.cacheState;
    if (!urlIsHttpHttpsScheme(originalURL)) {
      return;
    }
    if (timingInfo === null) {
      return;
    }
    if (!response.timingAllowPassed) {
      timingInfo = createOpaqueTimingInfo({
        startTime: timingInfo.startTime
      });
      cacheState = "";
    }
    timingInfo.endTime = coarsenedSharedCurrentTime();
    response.timingInfo = timingInfo;
    markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState, "", response.status);
  }
  var markResourceTiming = performance.markResourceTiming;
  function abortFetch(p, request, responseObject, error) {
    if (p) {
      p.reject(error);
    }
    if (request.body?.stream != null && isReadable(request.body.stream)) {
      request.body.stream.cancel(error).catch((err2) => {
        if (err2.code === "ERR_INVALID_STATE") {
          return;
        }
        throw err2;
      });
    }
    if (responseObject == null) {
      return;
    }
    const response = getResponseState(responseObject);
    if (response.body?.stream != null && isReadable(response.body.stream)) {
      response.body.stream.cancel(error).catch((err2) => {
        if (err2.code === "ERR_INVALID_STATE") {
          return;
        }
        throw err2;
      });
    }
  }
  function fetching({
    request,
    processRequestBodyChunkLength,
    processRequestEndOfBody,
    processResponse,
    processResponseEndOfBody,
    processResponseConsumeBody,
    useParallelQueue = false,
    dispatcher = getGlobalDispatcher()
  }) {
    assert(dispatcher);
    let taskDestination = null;
    let crossOriginIsolatedCapability = false;
    if (request.client != null) {
      taskDestination = request.client.globalObject;
      crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
    }
    const currentTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
    const timingInfo = createOpaqueTimingInfo({
      startTime: currentTime
    });
    const fetchParams = {
      controller: new Fetch(dispatcher),
      request,
      timingInfo,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseConsumeBody,
      processResponseEndOfBody,
      taskDestination,
      crossOriginIsolatedCapability
    };
    assert(!request.body || request.body.stream);
    if (request.window === "client") {
      request.window = request.client?.globalObject?.constructor?.name === "Window" ? request.client : "no-window";
    }
    if (request.origin === "client") {
      request.origin = request.client.origin;
    }
    if (request.policyContainer === "client") {
      if (request.client != null) {
        request.policyContainer = clonePolicyContainer(request.client.policyContainer);
      } else {
        request.policyContainer = makePolicyContainer();
      }
    }
    if (!request.headersList.contains("accept", true)) {
      const value = "*/*";
      request.headersList.append("accept", value, true);
    }
    if (!request.headersList.contains("accept-language", true)) {
      request.headersList.append("accept-language", "*", true);
    }
    if (request.priority === null) {}
    if (subresourceSet.has(request.destination)) {}
    mainFetch(fetchParams).catch((err2) => {
      fetchParams.controller.terminate(err2);
    });
    return fetchParams.controller;
  }
  async function mainFetch(fetchParams, recursive = false) {
    const request = fetchParams.request;
    let response = null;
    if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
      response = makeNetworkError("local URLs only");
    }
    tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
    if (requestBadPort(request) === "blocked") {
      response = makeNetworkError("bad port");
    }
    if (request.referrerPolicy === "") {
      request.referrerPolicy = request.policyContainer.referrerPolicy;
    }
    if (request.referrer !== "no-referrer") {
      request.referrer = determineRequestsReferrer(request);
    }
    if (response === null) {
      const currentURL = requestCurrentURL(request);
      if (sameOrigin(currentURL, request.url) && request.responseTainting === "basic" || currentURL.protocol === "data:" || (request.mode === "navigate" || request.mode === "websocket")) {
        request.responseTainting = "basic";
        response = await schemeFetch(fetchParams);
      } else if (request.mode === "same-origin") {
        response = makeNetworkError('request mode cannot be "same-origin"');
      } else if (request.mode === "no-cors") {
        if (request.redirect !== "follow") {
          response = makeNetworkError('redirect mode cannot be "follow" for "no-cors" request');
        } else {
          request.responseTainting = "opaque";
          response = await schemeFetch(fetchParams);
        }
      } else if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
        response = makeNetworkError("URL scheme must be a HTTP(S) scheme");
      } else {
        request.responseTainting = "cors";
        response = await httpFetch(fetchParams);
      }
    }
    if (recursive) {
      return response;
    }
    if (response.status !== 0 && !response.internalResponse) {
      if (request.responseTainting === "cors") {}
      if (request.responseTainting === "basic") {
        response = filterResponse(response, "basic");
      } else if (request.responseTainting === "cors") {
        response = filterResponse(response, "cors");
      } else if (request.responseTainting === "opaque") {
        response = filterResponse(response, "opaque");
      } else {
        assert(false);
      }
    }
    let internalResponse = response.status === 0 ? response : response.internalResponse;
    if (internalResponse.urlList.length === 0) {
      internalResponse.urlList.push(...request.urlList);
    }
    if (!request.timingAllowFailed) {
      response.timingAllowPassed = true;
    }
    if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains("range", true)) {
      response = internalResponse = makeNetworkError();
    }
    if (response.status !== 0 && (request.method === "HEAD" || request.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
      internalResponse.body = null;
      fetchParams.controller.dump = true;
    }
    if (request.integrity) {
      const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
      if (request.responseTainting === "opaque" || response.body == null) {
        processBodyError(response.error);
        return;
      }
      const processBody = (bytes) => {
        if (!bytesMatch(bytes, request.integrity)) {
          processBodyError("integrity mismatch");
          return;
        }
        response.body = safelyExtractBody(bytes)[0];
        fetchFinale(fetchParams, response);
      };
      await fullyReadBody(response.body, processBody, processBodyError);
    } else {
      fetchFinale(fetchParams, response);
    }
  }
  function schemeFetch(fetchParams) {
    if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
      return Promise.resolve(makeAppropriateNetworkError(fetchParams));
    }
    const { request } = fetchParams;
    const { protocol: scheme } = requestCurrentURL(request);
    switch (scheme) {
      case "about:": {
        return Promise.resolve(makeNetworkError("about scheme is not supported"));
      }
      case "blob:": {
        if (!resolveObjectURL) {
          resolveObjectURL = require("node:buffer").resolveObjectURL;
        }
        const blobURLEntry = requestCurrentURL(request);
        if (blobURLEntry.search.length !== 0) {
          return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
        }
        const blob = resolveObjectURL(blobURLEntry.toString());
        if (request.method !== "GET" || !webidl.is.Blob(blob)) {
          return Promise.resolve(makeNetworkError("invalid method"));
        }
        const response = makeResponse();
        const fullLength = blob.size;
        const serializedFullLength = isomorphicEncode(`${fullLength}`);
        const type = blob.type;
        if (!request.headersList.contains("range", true)) {
          const bodyWithType = extractBody(blob);
          response.statusText = "OK";
          response.body = bodyWithType[0];
          response.headersList.set("content-length", serializedFullLength, true);
          response.headersList.set("content-type", type, true);
        } else {
          response.rangeRequested = true;
          const rangeHeader = request.headersList.get("range", true);
          const rangeValue = simpleRangeHeaderValue(rangeHeader, true);
          if (rangeValue === "failure") {
            return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
          }
          let { rangeStartValue: rangeStart, rangeEndValue: rangeEnd } = rangeValue;
          if (rangeStart === null) {
            rangeStart = fullLength - rangeEnd;
            rangeEnd = rangeStart + rangeEnd - 1;
          } else {
            if (rangeStart >= fullLength) {
              return Promise.resolve(makeNetworkError("Range start is greater than the blob's size."));
            }
            if (rangeEnd === null || rangeEnd >= fullLength) {
              rangeEnd = fullLength - 1;
            }
          }
          const slicedBlob = blob.slice(rangeStart, rangeEnd, type);
          const slicedBodyWithType = extractBody(slicedBlob);
          response.body = slicedBodyWithType[0];
          const serializedSlicedLength = isomorphicEncode(`${slicedBlob.size}`);
          const contentRange = buildContentRange(rangeStart, rangeEnd, fullLength);
          response.status = 206;
          response.statusText = "Partial Content";
          response.headersList.set("content-length", serializedSlicedLength, true);
          response.headersList.set("content-type", type, true);
          response.headersList.set("content-range", contentRange, true);
        }
        return Promise.resolve(response);
      }
      case "data:": {
        const currentURL = requestCurrentURL(request);
        const dataURLStruct = dataURLProcessor(currentURL);
        if (dataURLStruct === "failure") {
          return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
        }
        const mimeType = serializeAMimeType(dataURLStruct.mimeType);
        return Promise.resolve(makeResponse({
          statusText: "OK",
          headersList: [
            ["content-type", { name: "Content-Type", value: mimeType }]
          ],
          body: safelyExtractBody(dataURLStruct.body)[0]
        }));
      }
      case "file:": {
        return Promise.resolve(makeNetworkError("not implemented... yet..."));
      }
      case "http:":
      case "https:": {
        return httpFetch(fetchParams).catch((err2) => makeNetworkError(err2));
      }
      default: {
        return Promise.resolve(makeNetworkError("unknown scheme"));
      }
    }
  }
  function finalizeResponse(fetchParams, response) {
    fetchParams.request.done = true;
    if (fetchParams.processResponseDone != null) {
      queueMicrotask(() => fetchParams.processResponseDone(response));
    }
  }
  function fetchFinale(fetchParams, response) {
    let timingInfo = fetchParams.timingInfo;
    const processResponseEndOfBody = () => {
      const unsafeEndTime = Date.now();
      if (fetchParams.request.destination === "document") {
        fetchParams.controller.fullTimingInfo = timingInfo;
      }
      fetchParams.controller.reportTimingSteps = () => {
        if (!urlIsHttpHttpsScheme(fetchParams.request.url)) {
          return;
        }
        timingInfo.endTime = unsafeEndTime;
        let cacheState = response.cacheState;
        const bodyInfo = response.bodyInfo;
        if (!response.timingAllowPassed) {
          timingInfo = createOpaqueTimingInfo(timingInfo);
          cacheState = "";
        }
        let responseStatus = 0;
        if (fetchParams.request.mode !== "navigator" || !response.hasCrossOriginRedirects) {
          responseStatus = response.status;
          const mimeType = extractMimeType(response.headersList);
          if (mimeType !== "failure") {
            bodyInfo.contentType = minimizeSupportedMimeType(mimeType);
          }
        }
        if (fetchParams.request.initiatorType != null) {
          markResourceTiming(timingInfo, fetchParams.request.url.href, fetchParams.request.initiatorType, globalThis, cacheState, bodyInfo, responseStatus);
        }
      };
      const processResponseEndOfBodyTask = () => {
        fetchParams.request.done = true;
        if (fetchParams.processResponseEndOfBody != null) {
          queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
        }
        if (fetchParams.request.initiatorType != null) {
          fetchParams.controller.reportTimingSteps();
        }
      };
      queueMicrotask(() => processResponseEndOfBodyTask());
    };
    if (fetchParams.processResponse != null) {
      queueMicrotask(() => {
        fetchParams.processResponse(response);
        fetchParams.processResponse = null;
      });
    }
    const internalResponse = response.type === "error" ? response : response.internalResponse ?? response;
    if (internalResponse.body == null) {
      processResponseEndOfBody();
    } else {
      finished(internalResponse.body.stream, () => {
        processResponseEndOfBody();
      });
    }
  }
  async function httpFetch(fetchParams) {
    const request = fetchParams.request;
    let response = null;
    let actualResponse = null;
    const timingInfo = fetchParams.timingInfo;
    if (request.serviceWorkers === "all") {}
    if (response === null) {
      if (request.redirect === "follow") {
        request.serviceWorkers = "none";
      }
      actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
      if (request.responseTainting === "cors" && corsCheck(request, response) === "failure") {
        return makeNetworkError("cors failure");
      }
      if (TAOCheck(request, response) === "failure") {
        request.timingAllowFailed = true;
      }
    }
    if ((request.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === "blocked") {
      return makeNetworkError("blocked");
    }
    if (redirectStatusSet.has(actualResponse.status)) {
      if (request.redirect !== "manual") {
        fetchParams.controller.connection.destroy(undefined, false);
      }
      if (request.redirect === "error") {
        response = makeNetworkError("unexpected redirect");
      } else if (request.redirect === "manual") {
        response = actualResponse;
      } else if (request.redirect === "follow") {
        response = await httpRedirectFetch(fetchParams, response);
      } else {
        assert(false);
      }
    }
    response.timingInfo = timingInfo;
    return response;
  }
  function httpRedirectFetch(fetchParams, response) {
    const request = fetchParams.request;
    const actualResponse = response.internalResponse ? response.internalResponse : response;
    let locationURL;
    try {
      locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash);
      if (locationURL == null) {
        return response;
      }
    } catch (err2) {
      return Promise.resolve(makeNetworkError(err2));
    }
    if (!urlIsHttpHttpsScheme(locationURL)) {
      return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
    }
    if (request.redirectCount === 20) {
      return Promise.resolve(makeNetworkError("redirect count exceeded"));
    }
    request.redirectCount += 1;
    if (request.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {
      return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
    }
    if (request.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
      return Promise.resolve(makeNetworkError('URL cannot contain credentials for request mode "cors"'));
    }
    if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {
      return Promise.resolve(makeNetworkError());
    }
    if ([301, 302].includes(actualResponse.status) && request.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {
      request.method = "GET";
      request.body = null;
      for (const headerName of requestBodyHeader) {
        request.headersList.delete(headerName);
      }
    }
    if (!sameOrigin(requestCurrentURL(request), locationURL)) {
      request.headersList.delete("authorization", true);
      request.headersList.delete("proxy-authorization", true);
      request.headersList.delete("cookie", true);
      request.headersList.delete("host", true);
    }
    if (request.body != null) {
      assert(request.body.source != null);
      request.body = safelyExtractBody(request.body.source)[0];
    }
    const timingInfo = fetchParams.timingInfo;
    timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
    if (timingInfo.redirectStartTime === 0) {
      timingInfo.redirectStartTime = timingInfo.startTime;
    }
    request.urlList.push(locationURL);
    setRequestReferrerPolicyOnRedirect(request, actualResponse);
    return mainFetch(fetchParams, true);
  }
  async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
    const request = fetchParams.request;
    let httpFetchParams = null;
    let httpRequest = null;
    let response = null;
    const httpCache = null;
    const revalidatingFlag = false;
    if (request.window === "no-window" && request.redirect === "error") {
      httpFetchParams = fetchParams;
      httpRequest = request;
    } else {
      httpRequest = cloneRequest(request);
      httpFetchParams = { ...fetchParams };
      httpFetchParams.request = httpRequest;
    }
    const includeCredentials = request.credentials === "include" || request.credentials === "same-origin" && request.responseTainting === "basic";
    const contentLength = httpRequest.body ? httpRequest.body.length : null;
    let contentLengthHeaderValue = null;
    if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
      contentLengthHeaderValue = "0";
    }
    if (contentLength != null) {
      contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
    }
    if (contentLengthHeaderValue != null) {
      httpRequest.headersList.append("content-length", contentLengthHeaderValue, true);
    }
    if (contentLength != null && httpRequest.keepalive) {}
    if (webidl.is.URL(httpRequest.referrer)) {
      httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href), true);
    }
    appendRequestOriginHeader(httpRequest);
    appendFetchMetadata(httpRequest);
    if (!httpRequest.headersList.contains("user-agent", true)) {
      httpRequest.headersList.append("user-agent", defaultUserAgent, true);
    }
    if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since", true) || httpRequest.headersList.contains("if-none-match", true) || httpRequest.headersList.contains("if-unmodified-since", true) || httpRequest.headersList.contains("if-match", true) || httpRequest.headersList.contains("if-range", true))) {
      httpRequest.cache = "no-store";
    }
    if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control", true)) {
      httpRequest.headersList.append("cache-control", "max-age=0", true);
    }
    if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
      if (!httpRequest.headersList.contains("pragma", true)) {
        httpRequest.headersList.append("pragma", "no-cache", true);
      }
      if (!httpRequest.headersList.contains("cache-control", true)) {
        httpRequest.headersList.append("cache-control", "no-cache", true);
      }
    }
    if (httpRequest.headersList.contains("range", true)) {
      httpRequest.headersList.append("accept-encoding", "identity", true);
    }
    if (!httpRequest.headersList.contains("accept-encoding", true)) {
      if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
        httpRequest.headersList.append("accept-encoding", "br, gzip, deflate", true);
      } else {
        httpRequest.headersList.append("accept-encoding", "gzip, deflate", true);
      }
    }
    httpRequest.headersList.delete("host", true);
    if (includeCredentials) {}
    if (httpCache == null) {
      httpRequest.cache = "no-store";
    }
    if (httpRequest.cache !== "no-store" && httpRequest.cache !== "reload") {}
    if (response == null) {
      if (httpRequest.cache === "only-if-cached") {
        return makeNetworkError("only if cached");
      }
      const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
      if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {}
      if (revalidatingFlag && forwardResponse.status === 304) {}
      if (response == null) {
        response = forwardResponse;
      }
    }
    response.urlList = [...httpRequest.urlList];
    if (httpRequest.headersList.contains("range", true)) {
      response.rangeRequested = true;
    }
    response.requestIncludesCredentials = includeCredentials;
    if (response.status === 407) {
      if (request.window === "no-window") {
        return makeNetworkError();
      }
      if (isCancelled(fetchParams)) {
        return makeAppropriateNetworkError(fetchParams);
      }
      return makeNetworkError("proxy authentication required");
    }
    if (response.status === 421 && !isNewConnectionFetch && (request.body == null || request.body.source != null)) {
      if (isCancelled(fetchParams)) {
        return makeAppropriateNetworkError(fetchParams);
      }
      fetchParams.controller.connection.destroy();
      response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
    }
    if (isAuthenticationFetch) {}
    return response;
  }
  async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
    assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
    fetchParams.controller.connection = {
      abort: null,
      destroyed: false,
      destroy(err2, abort = true) {
        if (!this.destroyed) {
          this.destroyed = true;
          if (abort) {
            this.abort?.(err2 ?? new DOMException("The operation was aborted.", "AbortError"));
          }
        }
      }
    };
    const request = fetchParams.request;
    let response = null;
    const timingInfo = fetchParams.timingInfo;
    const httpCache = null;
    if (httpCache == null) {
      request.cache = "no-store";
    }
    const newConnection = forceNewConnection ? "yes" : "no";
    if (request.mode === "websocket") {} else {}
    let requestBody = null;
    if (request.body == null && fetchParams.processRequestEndOfBody) {
      queueMicrotask(() => fetchParams.processRequestEndOfBody());
    } else if (request.body != null) {
      const processBodyChunk = async function* (bytes) {
        if (isCancelled(fetchParams)) {
          return;
        }
        yield bytes;
        fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
      };
      const processEndOfBody = () => {
        if (isCancelled(fetchParams)) {
          return;
        }
        if (fetchParams.processRequestEndOfBody) {
          fetchParams.processRequestEndOfBody();
        }
      };
      const processBodyError = (e) => {
        if (isCancelled(fetchParams)) {
          return;
        }
        if (e.name === "AbortError") {
          fetchParams.controller.abort();
        } else {
          fetchParams.controller.terminate(e);
        }
      };
      requestBody = async function* () {
        try {
          for await (const bytes of request.body.stream) {
            yield* processBodyChunk(bytes);
          }
          processEndOfBody();
        } catch (err2) {
          processBodyError(err2);
        }
      }();
    }
    try {
      const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
      if (socket) {
        response = makeResponse({ status, statusText, headersList, socket });
      } else {
        const iterator = body[Symbol.asyncIterator]();
        fetchParams.controller.next = () => iterator.next();
        response = makeResponse({ status, statusText, headersList });
      }
    } catch (err2) {
      if (err2.name === "AbortError") {
        fetchParams.controller.connection.destroy();
        return makeAppropriateNetworkError(fetchParams, err2);
      }
      return makeNetworkError(err2);
    }
    const pullAlgorithm = () => {
      return fetchParams.controller.resume();
    };
    const cancelAlgorithm = (reason) => {
      if (!isCancelled(fetchParams)) {
        fetchParams.controller.abort(reason);
      }
    };
    const stream = new ReadableStream({
      async start(controller) {
        fetchParams.controller.controller = controller;
      },
      async pull(controller) {
        await pullAlgorithm(controller);
      },
      async cancel(reason) {
        await cancelAlgorithm(reason);
      },
      type: "bytes"
    });
    response.body = { stream, source: null, length: null };
    if (!fetchParams.controller.resume) {
      fetchParams.controller.on("terminated", onAborted);
    }
    fetchParams.controller.resume = async () => {
      while (true) {
        let bytes;
        let isFailure;
        try {
          const { done, value } = await fetchParams.controller.next();
          if (isAborted2(fetchParams)) {
            break;
          }
          bytes = done ? undefined : value;
        } catch (err2) {
          if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
            bytes = undefined;
          } else {
            bytes = err2;
            isFailure = true;
          }
        }
        if (bytes === undefined) {
          readableStreamClose(fetchParams.controller.controller);
          finalizeResponse(fetchParams, response);
          return;
        }
        timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
        if (isFailure) {
          fetchParams.controller.terminate(bytes);
          return;
        }
        const buffer = new Uint8Array(bytes);
        if (buffer.byteLength) {
          fetchParams.controller.controller.enqueue(buffer);
        }
        if (isErrored(stream)) {
          fetchParams.controller.terminate();
          return;
        }
        if (fetchParams.controller.controller.desiredSize <= 0) {
          return;
        }
      }
    };
    function onAborted(reason) {
      if (isAborted2(fetchParams)) {
        response.aborted = true;
        if (isReadable(stream)) {
          fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
        }
      } else {
        if (isReadable(stream)) {
          fetchParams.controller.controller.error(new TypeError("terminated", {
            cause: isErrorLike(reason) ? reason : undefined
          }));
        }
      }
      fetchParams.controller.connection.destroy();
    }
    return response;
    function dispatch({ body }) {
      const url = requestCurrentURL(request);
      const agent = fetchParams.controller.dispatcher;
      return new Promise((resolve, reject) => agent.dispatch({
        path: url.pathname + url.search,
        origin: url.origin,
        method: request.method,
        body: agent.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
        headers: request.headersList.entries,
        maxRedirections: 0,
        upgrade: request.mode === "websocket" ? "websocket" : undefined
      }, {
        body: null,
        abort: null,
        onConnect(abort) {
          const { connection } = fetchParams.controller;
          timingInfo.finalConnectionTimingInfo = clampAndCoarsenConnectionTimingInfo(undefined, timingInfo.postRedirectStartTime, fetchParams.crossOriginIsolatedCapability);
          if (connection.destroyed) {
            abort(new DOMException("The operation was aborted.", "AbortError"));
          } else {
            fetchParams.controller.on("terminated", abort);
            this.abort = connection.abort = abort;
          }
          timingInfo.finalNetworkRequestStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
        },
        onResponseStarted() {
          timingInfo.finalNetworkResponseStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
        },
        onHeaders(status, rawHeaders, resume, statusText) {
          if (status < 200) {
            return;
          }
          let codings = [];
          let location = "";
          const headersList = new HeadersList;
          for (let i2 = 0;i2 < rawHeaders.length; i2 += 2) {
            headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i2]), rawHeaders[i2 + 1].toString("latin1"), true);
          }
          const contentEncoding = headersList.get("content-encoding", true);
          if (contentEncoding) {
            codings = contentEncoding.toLowerCase().split(",").map((x2) => x2.trim());
          }
          location = headersList.get("location", true);
          this.body = new Readable({ read: resume });
          const decoders = [];
          const willFollow = location && request.redirect === "follow" && redirectStatusSet.has(status);
          if (codings.length !== 0 && request.method !== "HEAD" && request.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) {
            for (let i2 = codings.length - 1;i2 >= 0; --i2) {
              const coding = codings[i2];
              if (coding === "x-gzip" || coding === "gzip") {
                decoders.push(zlib.createGunzip({
                  flush: zlib.constants.Z_SYNC_FLUSH,
                  finishFlush: zlib.constants.Z_SYNC_FLUSH
                }));
              } else if (coding === "deflate") {
                decoders.push(createInflate({
                  flush: zlib.constants.Z_SYNC_FLUSH,
                  finishFlush: zlib.constants.Z_SYNC_FLUSH
                }));
              } else if (coding === "br") {
                decoders.push(zlib.createBrotliDecompress({
                  flush: zlib.constants.BROTLI_OPERATION_FLUSH,
                  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH
                }));
              } else {
                decoders.length = 0;
                break;
              }
            }
          }
          const onError = this.onError.bind(this);
          resolve({
            status,
            statusText,
            headersList,
            body: decoders.length ? pipeline(this.body, ...decoders, (err2) => {
              if (err2) {
                this.onError(err2);
              }
            }).on("error", onError) : this.body.on("error", onError)
          });
          return true;
        },
        onData(chunk) {
          if (fetchParams.controller.dump) {
            return;
          }
          const bytes = chunk;
          timingInfo.encodedBodySize += bytes.byteLength;
          return this.body.push(bytes);
        },
        onComplete() {
          if (this.abort) {
            fetchParams.controller.off("terminated", this.abort);
          }
          fetchParams.controller.ended = true;
          this.body.push(null);
        },
        onError(error) {
          if (this.abort) {
            fetchParams.controller.off("terminated", this.abort);
          }
          this.body?.destroy(error);
          fetchParams.controller.terminate(error);
          reject(error);
        },
        onUpgrade(status, rawHeaders, socket) {
          if (status !== 101) {
            return;
          }
          const headersList = new HeadersList;
          for (let i2 = 0;i2 < rawHeaders.length; i2 += 2) {
            headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i2]), rawHeaders[i2 + 1].toString("latin1"), true);
          }
          resolve({
            status,
            statusText: STATUS_CODES[status],
            headersList,
            socket
          });
          return true;
        }
      }));
    }
  }
  module2.exports = {
    fetch: fetch2,
    Fetch,
    fetching,
    finalizeAndReportTiming
  };
});

// node_modules/undici/lib/web/cache/util.js
var require_util4 = __commonJS((exports2, module2) => {
  var assert = require("node:assert");
  var { URLSerializer } = require_data_url();
  var { isValidHeaderName } = require_util2();
  function urlEquals(A, B, excludeFragment = false) {
    const serializedA = URLSerializer(A, excludeFragment);
    const serializedB = URLSerializer(B, excludeFragment);
    return serializedA === serializedB;
  }
  function getFieldValues(header) {
    assert(header !== null);
    const values = [];
    for (let value of header.split(",")) {
      value = value.trim();
      if (isValidHeaderName(value)) {
        values.push(value);
      }
    }
    return values;
  }
  module2.exports = {
    urlEquals,
    getFieldValues
  };
});

// node_modules/undici/lib/web/cache/cache.js
var require_cache3 = __commonJS((exports2, module2) => {
  var { kConstruct } = require_symbols();
  var { urlEquals, getFieldValues } = require_util4();
  var { kEnumerableProperty, isDisturbed } = require_util();
  var { webidl } = require_webidl();
  var { cloneResponse, fromInnerResponse, getResponseState } = require_response();
  var { Request, fromInnerRequest, getRequestState } = require_request2();
  var { fetching } = require_fetch();
  var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util2();
  var assert = require("node:assert");

  class Cache {
    #relevantRequestResponseList;
    constructor() {
      if (arguments[0] !== kConstruct) {
        webidl.illegalConstructor();
      }
      webidl.util.markAsUncloneable(this);
      this.#relevantRequestResponseList = arguments[1];
    }
    async match(request, options = {}) {
      webidl.brandCheck(this, Cache);
      const prefix = "Cache.match";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      request = webidl.converters.RequestInfo(request, prefix, "request");
      options = webidl.converters.CacheQueryOptions(options, prefix, "options");
      const p = this.#internalMatchAll(request, options, 1);
      if (p.length === 0) {
        return;
      }
      return p[0];
    }
    async matchAll(request = undefined, options = {}) {
      webidl.brandCheck(this, Cache);
      const prefix = "Cache.matchAll";
      if (request !== undefined)
        request = webidl.converters.RequestInfo(request, prefix, "request");
      options = webidl.converters.CacheQueryOptions(options, prefix, "options");
      return this.#internalMatchAll(request, options);
    }
    async add(request) {
      webidl.brandCheck(this, Cache);
      const prefix = "Cache.add";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      request = webidl.converters.RequestInfo(request, prefix, "request");
      const requests = [request];
      const responseArrayPromise = this.addAll(requests);
      return await responseArrayPromise;
    }
    async addAll(requests) {
      webidl.brandCheck(this, Cache);
      const prefix = "Cache.addAll";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      const responsePromises = [];
      const requestList = [];
      for (let request of requests) {
        if (request === undefined) {
          throw webidl.errors.conversionFailed({
            prefix,
            argument: "Argument 1",
            types: ["undefined is not allowed"]
          });
        }
        request = webidl.converters.RequestInfo(request);
        if (typeof request === "string") {
          continue;
        }
        const r = getRequestState(request);
        if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") {
          throw webidl.errors.exception({
            header: prefix,
            message: "Expected http/s scheme when method is not GET."
          });
        }
      }
      const fetchControllers = [];
      for (const request of requests) {
        const r = getRequestState(new Request(request));
        if (!urlIsHttpHttpsScheme(r.url)) {
          throw webidl.errors.exception({
            header: prefix,
            message: "Expected http/s scheme."
          });
        }
        r.initiator = "fetch";
        r.destination = "subresource";
        requestList.push(r);
        const responsePromise = createDeferredPromise();
        fetchControllers.push(fetching({
          request: r,
          processResponse(response) {
            if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) {
              responsePromise.reject(webidl.errors.exception({
                header: "Cache.addAll",
                message: "Received an invalid status code or the request failed."
              }));
            } else if (response.headersList.contains("vary")) {
              const fieldValues = getFieldValues(response.headersList.get("vary"));
              for (const fieldValue of fieldValues) {
                if (fieldValue === "*") {
                  responsePromise.reject(webidl.errors.exception({
                    header: "Cache.addAll",
                    message: "invalid vary field value"
                  }));
                  for (const controller of fetchControllers) {
                    controller.abort();
                  }
                  return;
                }
              }
            }
          },
          processResponseEndOfBody(response) {
            if (response.aborted) {
              responsePromise.reject(new DOMException("aborted", "AbortError"));
              return;
            }
            responsePromise.resolve(response);
          }
        }));
        responsePromises.push(responsePromise.promise);
      }
      const p = Promise.all(responsePromises);
      const responses = await p;
      const operations = [];
      let index = 0;
      for (const response of responses) {
        const operation = {
          type: "put",
          request: requestList[index],
          response
        };
        operations.push(operation);
        index++;
      }
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      try {
        this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve(undefined);
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async put(request, response) {
      webidl.brandCheck(this, Cache);
      const prefix = "Cache.put";
      webidl.argumentLengthCheck(arguments, 2, prefix);
      request = webidl.converters.RequestInfo(request, prefix, "request");
      response = webidl.converters.Response(response, prefix, "response");
      let innerRequest = null;
      if (webidl.is.Request(request)) {
        innerRequest = getRequestState(request);
      } else {
        innerRequest = getRequestState(new Request(request));
      }
      if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") {
        throw webidl.errors.exception({
          header: prefix,
          message: "Expected an http/s scheme when method is not GET"
        });
      }
      const innerResponse = getResponseState(response);
      if (innerResponse.status === 206) {
        throw webidl.errors.exception({
          header: prefix,
          message: "Got 206 status"
        });
      }
      if (innerResponse.headersList.contains("vary")) {
        const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
        for (const fieldValue of fieldValues) {
          if (fieldValue === "*") {
            throw webidl.errors.exception({
              header: prefix,
              message: "Got * vary field value"
            });
          }
        }
      }
      if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
        throw webidl.errors.exception({
          header: prefix,
          message: "Response body is locked or disturbed"
        });
      }
      const clonedResponse = cloneResponse(innerResponse);
      const bodyReadPromise = createDeferredPromise();
      if (innerResponse.body != null) {
        const stream = innerResponse.body.stream;
        const reader = stream.getReader();
        readAllBytes(reader, bodyReadPromise.resolve, bodyReadPromise.reject);
      } else {
        bodyReadPromise.resolve(undefined);
      }
      const operations = [];
      const operation = {
        type: "put",
        request: innerRequest,
        response: clonedResponse
      };
      operations.push(operation);
      const bytes = await bodyReadPromise.promise;
      if (clonedResponse.body != null) {
        clonedResponse.body.source = bytes;
      }
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      try {
        this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve();
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async delete(request, options = {}) {
      webidl.brandCheck(this, Cache);
      const prefix = "Cache.delete";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      request = webidl.converters.RequestInfo(request, prefix, "request");
      options = webidl.converters.CacheQueryOptions(options, prefix, "options");
      let r = null;
      if (webidl.is.Request(request)) {
        r = getRequestState(request);
        if (r.method !== "GET" && !options.ignoreMethod) {
          return false;
        }
      } else {
        assert(typeof request === "string");
        r = getRequestState(new Request(request));
      }
      const operations = [];
      const operation = {
        type: "delete",
        request: r,
        options
      };
      operations.push(operation);
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      let requestResponses;
      try {
        requestResponses = this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve(!!requestResponses?.length);
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async keys(request = undefined, options = {}) {
      webidl.brandCheck(this, Cache);
      const prefix = "Cache.keys";
      if (request !== undefined)
        request = webidl.converters.RequestInfo(request, prefix, "request");
      options = webidl.converters.CacheQueryOptions(options, prefix, "options");
      let r = null;
      if (request !== undefined) {
        if (webidl.is.Request(request)) {
          r = getRequestState(request);
          if (r.method !== "GET" && !options.ignoreMethod) {
            return [];
          }
        } else if (typeof request === "string") {
          r = getRequestState(new Request(request));
        }
      }
      const promise = createDeferredPromise();
      const requests = [];
      if (request === undefined) {
        for (const requestResponse of this.#relevantRequestResponseList) {
          requests.push(requestResponse[0]);
        }
      } else {
        const requestResponses = this.#queryCache(r, options);
        for (const requestResponse of requestResponses) {
          requests.push(requestResponse[0]);
        }
      }
      queueMicrotask(() => {
        const requestList = [];
        for (const request2 of requests) {
          const requestObject = fromInnerRequest(request2, undefined, new AbortController().signal, "immutable");
          requestList.push(requestObject);
        }
        promise.resolve(Object.freeze(requestList));
      });
      return promise.promise;
    }
    #batchCacheOperations(operations) {
      const cache = this.#relevantRequestResponseList;
      const backupCache = [...cache];
      const addedItems = [];
      const resultList = [];
      try {
        for (const operation of operations) {
          if (operation.type !== "delete" && operation.type !== "put") {
            throw webidl.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: 'operation type does not match "delete" or "put"'
            });
          }
          if (operation.type === "delete" && operation.response != null) {
            throw webidl.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: "delete operation should not have an associated response"
            });
          }
          if (this.#queryCache(operation.request, operation.options, addedItems).length) {
            throw new DOMException("???", "InvalidStateError");
          }
          let requestResponses;
          if (operation.type === "delete") {
            requestResponses = this.#queryCache(operation.request, operation.options);
            if (requestResponses.length === 0) {
              return [];
            }
            for (const requestResponse of requestResponses) {
              const idx = cache.indexOf(requestResponse);
              assert(idx !== -1);
              cache.splice(idx, 1);
            }
          } else if (operation.type === "put") {
            if (operation.response == null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "put operation should have an associated response"
              });
            }
            const r = operation.request;
            if (!urlIsHttpHttpsScheme(r.url)) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "expected http or https scheme"
              });
            }
            if (r.method !== "GET") {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "not get method"
              });
            }
            if (operation.options != null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "options must not be defined"
              });
            }
            requestResponses = this.#queryCache(operation.request);
            for (const requestResponse of requestResponses) {
              const idx = cache.indexOf(requestResponse);
              assert(idx !== -1);
              cache.splice(idx, 1);
            }
            cache.push([operation.request, operation.response]);
            addedItems.push([operation.request, operation.response]);
          }
          resultList.push([operation.request, operation.response]);
        }
        return resultList;
      } catch (e) {
        this.#relevantRequestResponseList.length = 0;
        this.#relevantRequestResponseList = backupCache;
        throw e;
      }
    }
    #queryCache(requestQuery, options, targetStorage) {
      const resultList = [];
      const storage = targetStorage ?? this.#relevantRequestResponseList;
      for (const requestResponse of storage) {
        const [cachedRequest, cachedResponse] = requestResponse;
        if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
          resultList.push(requestResponse);
        }
      }
      return resultList;
    }
    #requestMatchesCachedItem(requestQuery, request, response = null, options) {
      const queryURL = new URL(requestQuery.url);
      const cachedURL = new URL(request.url);
      if (options?.ignoreSearch) {
        cachedURL.search = "";
        queryURL.search = "";
      }
      if (!urlEquals(queryURL, cachedURL, true)) {
        return false;
      }
      if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) {
        return true;
      }
      const fieldValues = getFieldValues(response.headersList.get("vary"));
      for (const fieldValue of fieldValues) {
        if (fieldValue === "*") {
          return false;
        }
        const requestValue = request.headersList.get(fieldValue);
        const queryValue = requestQuery.headersList.get(fieldValue);
        if (requestValue !== queryValue) {
          return false;
        }
      }
      return true;
    }
    #internalMatchAll(request, options, maxResponses = Infinity) {
      let r = null;
      if (request !== undefined) {
        if (webidl.is.Request(request)) {
          r = getRequestState(request);
          if (r.method !== "GET" && !options.ignoreMethod) {
            return [];
          }
        } else if (typeof request === "string") {
          r = getRequestState(new Request(request));
        }
      }
      const responses = [];
      if (request === undefined) {
        for (const requestResponse of this.#relevantRequestResponseList) {
          responses.push(requestResponse[1]);
        }
      } else {
        const requestResponses = this.#queryCache(r, options);
        for (const requestResponse of requestResponses) {
          responses.push(requestResponse[1]);
        }
      }
      const responseList = [];
      for (const response of responses) {
        const responseObject = fromInnerResponse(response, "immutable");
        responseList.push(responseObject.clone());
        if (responseList.length >= maxResponses) {
          break;
        }
      }
      return Object.freeze(responseList);
    }
  }
  Object.defineProperties(Cache.prototype, {
    [Symbol.toStringTag]: {
      value: "Cache",
      configurable: true
    },
    match: kEnumerableProperty,
    matchAll: kEnumerableProperty,
    add: kEnumerableProperty,
    addAll: kEnumerableProperty,
    put: kEnumerableProperty,
    delete: kEnumerableProperty,
    keys: kEnumerableProperty
  });
  var cacheQueryOptionConverters = [
    {
      key: "ignoreSearch",
      converter: webidl.converters.boolean,
      defaultValue: () => false
    },
    {
      key: "ignoreMethod",
      converter: webidl.converters.boolean,
      defaultValue: () => false
    },
    {
      key: "ignoreVary",
      converter: webidl.converters.boolean,
      defaultValue: () => false
    }
  ];
  webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
  webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
    ...cacheQueryOptionConverters,
    {
      key: "cacheName",
      converter: webidl.converters.DOMString
    }
  ]);
  webidl.converters.Response = webidl.interfaceConverter(webidl.is.Response, "Response");
  webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(webidl.converters.RequestInfo);
  module2.exports = {
    Cache
  };
});

// node_modules/undici/lib/web/cache/cachestorage.js
var require_cachestorage = __commonJS((exports2, module2) => {
  var { Cache } = require_cache3();
  var { webidl } = require_webidl();
  var { kEnumerableProperty } = require_util();
  var { kConstruct } = require_symbols();

  class CacheStorage {
    #caches = new Map;
    constructor() {
      if (arguments[0] !== kConstruct) {
        webidl.illegalConstructor();
      }
      webidl.util.markAsUncloneable(this);
    }
    async match(request, options = {}) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, "CacheStorage.match");
      request = webidl.converters.RequestInfo(request);
      options = webidl.converters.MultiCacheQueryOptions(options);
      if (options.cacheName != null) {
        if (this.#caches.has(options.cacheName)) {
          const cacheList = this.#caches.get(options.cacheName);
          const cache = new Cache(kConstruct, cacheList);
          return await cache.match(request, options);
        }
      } else {
        for (const cacheList of this.#caches.values()) {
          const cache = new Cache(kConstruct, cacheList);
          const response = await cache.match(request, options);
          if (response !== undefined) {
            return response;
          }
        }
      }
    }
    async has(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      const prefix = "CacheStorage.has";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      cacheName = webidl.converters.DOMString(cacheName, prefix, "cacheName");
      return this.#caches.has(cacheName);
    }
    async open(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      const prefix = "CacheStorage.open";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      cacheName = webidl.converters.DOMString(cacheName, prefix, "cacheName");
      if (this.#caches.has(cacheName)) {
        const cache2 = this.#caches.get(cacheName);
        return new Cache(kConstruct, cache2);
      }
      const cache = [];
      this.#caches.set(cacheName, cache);
      return new Cache(kConstruct, cache);
    }
    async delete(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      const prefix = "CacheStorage.delete";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      cacheName = webidl.converters.DOMString(cacheName, prefix, "cacheName");
      return this.#caches.delete(cacheName);
    }
    async keys() {
      webidl.brandCheck(this, CacheStorage);
      const keys = this.#caches.keys();
      return [...keys];
    }
  }
  Object.defineProperties(CacheStorage.prototype, {
    [Symbol.toStringTag]: {
      value: "CacheStorage",
      configurable: true
    },
    match: kEnumerableProperty,
    has: kEnumerableProperty,
    open: kEnumerableProperty,
    delete: kEnumerableProperty,
    keys: kEnumerableProperty
  });
  module2.exports = {
    CacheStorage
  };
});

// node_modules/undici/lib/web/cookies/constants.js
var require_constants4 = __commonJS((exports2, module2) => {
  var maxAttributeValueSize = 1024;
  var maxNameValuePairSize = 4096;
  module2.exports = {
    maxAttributeValueSize,
    maxNameValuePairSize
  };
});

// node_modules/undici/lib/web/cookies/util.js
var require_util5 = __commonJS((exports2, module2) => {
  function isCTLExcludingHtab(value) {
    for (let i2 = 0;i2 < value.length; ++i2) {
      const code2 = value.charCodeAt(i2);
      if (code2 >= 0 && code2 <= 8 || code2 >= 10 && code2 <= 31 || code2 === 127) {
        return true;
      }
    }
    return false;
  }
  function validateCookieName(name) {
    for (let i2 = 0;i2 < name.length; ++i2) {
      const code2 = name.charCodeAt(i2);
      if (code2 < 33 || code2 > 126 || code2 === 34 || code2 === 40 || code2 === 41 || code2 === 60 || code2 === 62 || code2 === 64 || code2 === 44 || code2 === 59 || code2 === 58 || code2 === 92 || code2 === 47 || code2 === 91 || code2 === 93 || code2 === 63 || code2 === 61 || code2 === 123 || code2 === 125) {
        throw new Error("Invalid cookie name");
      }
    }
  }
  function validateCookieValue(value) {
    let len = value.length;
    let i2 = 0;
    if (value[0] === '"') {
      if (len === 1 || value[len - 1] !== '"') {
        throw new Error("Invalid cookie value");
      }
      --len;
      ++i2;
    }
    while (i2 < len) {
      const code2 = value.charCodeAt(i2++);
      if (code2 < 33 || code2 > 126 || code2 === 34 || code2 === 44 || code2 === 59 || code2 === 92) {
        throw new Error("Invalid cookie value");
      }
    }
  }
  function validateCookiePath(path) {
    for (let i2 = 0;i2 < path.length; ++i2) {
      const code2 = path.charCodeAt(i2);
      if (code2 < 32 || code2 === 127 || code2 === 59) {
        throw new Error("Invalid cookie path");
      }
    }
  }
  function validateCookieDomain(domain) {
    if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) {
      throw new Error("Invalid cookie domain");
    }
  }
  var IMFDays = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
  ];
  var IMFMonths = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ];
  var IMFPaddedNumbers = Array(61).fill(0).map((_, i2) => i2.toString().padStart(2, "0"));
  function toIMFDate(date) {
    if (typeof date === "number") {
      date = new Date(date);
    }
    return `${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`;
  }
  function validateCookieMaxAge(maxAge) {
    if (maxAge < 0) {
      throw new Error("Invalid cookie max-age");
    }
  }
  function stringify(cookie) {
    if (cookie.name.length === 0) {
      return null;
    }
    validateCookieName(cookie.name);
    validateCookieValue(cookie.value);
    const out = [`${cookie.name}=${cookie.value}`];
    if (cookie.name.startsWith("__Secure-")) {
      cookie.secure = true;
    }
    if (cookie.name.startsWith("__Host-")) {
      cookie.secure = true;
      cookie.domain = null;
      cookie.path = "/";
    }
    if (cookie.secure) {
      out.push("Secure");
    }
    if (cookie.httpOnly) {
      out.push("HttpOnly");
    }
    if (typeof cookie.maxAge === "number") {
      validateCookieMaxAge(cookie.maxAge);
      out.push(`Max-Age=${cookie.maxAge}`);
    }
    if (cookie.domain) {
      validateCookieDomain(cookie.domain);
      out.push(`Domain=${cookie.domain}`);
    }
    if (cookie.path) {
      validateCookiePath(cookie.path);
      out.push(`Path=${cookie.path}`);
    }
    if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
      out.push(`Expires=${toIMFDate(cookie.expires)}`);
    }
    if (cookie.sameSite) {
      out.push(`SameSite=${cookie.sameSite}`);
    }
    for (const part of cookie.unparsed) {
      if (!part.includes("=")) {
        throw new Error("Invalid unparsed");
      }
      const [key, ...value] = part.split("=");
      out.push(`${key.trim()}=${value.join("=")}`);
    }
    return out.join("; ");
  }
  module2.exports = {
    isCTLExcludingHtab,
    validateCookieName,
    validateCookiePath,
    validateCookieValue,
    toIMFDate,
    stringify
  };
});

// node_modules/undici/lib/web/cookies/parse.js
var require_parse = __commonJS((exports2, module2) => {
  var { maxNameValuePairSize, maxAttributeValueSize } = require_constants4();
  var { isCTLExcludingHtab } = require_util5();
  var { collectASequenceOfCodePointsFast } = require_data_url();
  var assert = require("node:assert");
  var { unescape } = require("node:querystring");
  function parseSetCookie(header) {
    if (isCTLExcludingHtab(header)) {
      return null;
    }
    let nameValuePair = "";
    let unparsedAttributes = "";
    let name = "";
    let value = "";
    if (header.includes(";")) {
      const position = { position: 0 };
      nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
      unparsedAttributes = header.slice(position.position);
    } else {
      nameValuePair = header;
    }
    if (!nameValuePair.includes("=")) {
      value = nameValuePair;
    } else {
      const position = { position: 0 };
      name = collectASequenceOfCodePointsFast("=", nameValuePair, position);
      value = nameValuePair.slice(position.position + 1);
    }
    name = name.trim();
    value = value.trim();
    if (name.length + value.length > maxNameValuePairSize) {
      return null;
    }
    return {
      name,
      value: unescape(value),
      ...parseUnparsedAttributes(unparsedAttributes)
    };
  }
  function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
    if (unparsedAttributes.length === 0) {
      return cookieAttributeList;
    }
    assert(unparsedAttributes[0] === ";");
    unparsedAttributes = unparsedAttributes.slice(1);
    let cookieAv = "";
    if (unparsedAttributes.includes(";")) {
      cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, { position: 0 });
      unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
    } else {
      cookieAv = unparsedAttributes;
      unparsedAttributes = "";
    }
    let attributeName = "";
    let attributeValue = "";
    if (cookieAv.includes("=")) {
      const position = { position: 0 };
      attributeName = collectASequenceOfCodePointsFast("=", cookieAv, position);
      attributeValue = cookieAv.slice(position.position + 1);
    } else {
      attributeName = cookieAv;
    }
    attributeName = attributeName.trim();
    attributeValue = attributeValue.trim();
    if (attributeValue.length > maxAttributeValueSize) {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    }
    const attributeNameLowercase = attributeName.toLowerCase();
    if (attributeNameLowercase === "expires") {
      const expiryTime = new Date(attributeValue);
      cookieAttributeList.expires = expiryTime;
    } else if (attributeNameLowercase === "max-age") {
      const charCode = attributeValue.charCodeAt(0);
      if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      if (!/^\d+$/.test(attributeValue)) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      const deltaSeconds = Number(attributeValue);
      cookieAttributeList.maxAge = deltaSeconds;
    } else if (attributeNameLowercase === "domain") {
      let cookieDomain = attributeValue;
      if (cookieDomain[0] === ".") {
        cookieDomain = cookieDomain.slice(1);
      }
      cookieDomain = cookieDomain.toLowerCase();
      cookieAttributeList.domain = cookieDomain;
    } else if (attributeNameLowercase === "path") {
      let cookiePath = "";
      if (attributeValue.length === 0 || attributeValue[0] !== "/") {
        cookiePath = "/";
      } else {
        cookiePath = attributeValue;
      }
      cookieAttributeList.path = cookiePath;
    } else if (attributeNameLowercase === "secure") {
      cookieAttributeList.secure = true;
    } else if (attributeNameLowercase === "httponly") {
      cookieAttributeList.httpOnly = true;
    } else if (attributeNameLowercase === "samesite") {
      let enforcement = "Default";
      const attributeValueLowercase = attributeValue.toLowerCase();
      if (attributeValueLowercase.includes("none")) {
        enforcement = "None";
      }
      if (attributeValueLowercase.includes("strict")) {
        enforcement = "Strict";
      }
      if (attributeValueLowercase.includes("lax")) {
        enforcement = "Lax";
      }
      cookieAttributeList.sameSite = enforcement;
    } else {
      cookieAttributeList.unparsed ??= [];
      cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
    }
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
  }
  module2.exports = {
    parseSetCookie,
    parseUnparsedAttributes
  };
});

// node_modules/undici/lib/web/cookies/index.js
var require_cookies = __commonJS((exports2, module2) => {
  var { parseSetCookie } = require_parse();
  var { stringify } = require_util5();
  var { webidl } = require_webidl();
  var { Headers: Headers2 } = require_headers();
  var brandChecks = webidl.brandCheckMultiple([Headers2, globalThis.Headers].filter(Boolean));
  function getCookies(headers) {
    webidl.argumentLengthCheck(arguments, 1, "getCookies");
    brandChecks(headers);
    const cookie = headers.get("cookie");
    const out = {};
    if (!cookie) {
      return out;
    }
    for (const piece of cookie.split(";")) {
      const [name, ...value] = piece.split("=");
      out[name.trim()] = value.join("=");
    }
    return out;
  }
  function deleteCookie(headers, name, attributes) {
    brandChecks(headers);
    const prefix = "deleteCookie";
    webidl.argumentLengthCheck(arguments, 2, prefix);
    name = webidl.converters.DOMString(name, prefix, "name");
    attributes = webidl.converters.DeleteCookieAttributes(attributes);
    setCookie(headers, {
      name,
      value: "",
      expires: new Date(0),
      ...attributes
    });
  }
  function getSetCookies(headers) {
    webidl.argumentLengthCheck(arguments, 1, "getSetCookies");
    brandChecks(headers);
    const cookies = headers.getSetCookie();
    if (!cookies) {
      return [];
    }
    return cookies.map((pair) => parseSetCookie(pair));
  }
  function parseCookie(cookie) {
    cookie = webidl.converters.DOMString(cookie);
    return parseSetCookie(cookie);
  }
  function setCookie(headers, cookie) {
    webidl.argumentLengthCheck(arguments, 2, "setCookie");
    brandChecks(headers);
    cookie = webidl.converters.Cookie(cookie);
    const str = stringify(cookie);
    if (str) {
      headers.append("set-cookie", str, true);
    }
  }
  webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "path",
      defaultValue: () => null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "domain",
      defaultValue: () => null
    }
  ]);
  webidl.converters.Cookie = webidl.dictionaryConverter([
    {
      converter: webidl.converters.DOMString,
      key: "name"
    },
    {
      converter: webidl.converters.DOMString,
      key: "value"
    },
    {
      converter: webidl.nullableConverter((value) => {
        if (typeof value === "number") {
          return webidl.converters["unsigned long long"](value);
        }
        return new Date(value);
      }),
      key: "expires",
      defaultValue: () => null
    },
    {
      converter: webidl.nullableConverter(webidl.converters["long long"]),
      key: "maxAge",
      defaultValue: () => null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "domain",
      defaultValue: () => null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "path",
      defaultValue: () => null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.boolean),
      key: "secure",
      defaultValue: () => null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.boolean),
      key: "httpOnly",
      defaultValue: () => null
    },
    {
      converter: webidl.converters.USVString,
      key: "sameSite",
      allowedValues: ["Strict", "Lax", "None"]
    },
    {
      converter: webidl.sequenceConverter(webidl.converters.DOMString),
      key: "unparsed",
      defaultValue: () => new Array(0)
    }
  ]);
  module2.exports = {
    getCookies,
    deleteCookie,
    getSetCookies,
    setCookie,
    parseCookie
  };
});

// node_modules/undici/lib/web/websocket/events.js
var require_events = __commonJS((exports2, module2) => {
  var { webidl } = require_webidl();
  var { kEnumerableProperty } = require_util();
  var { kConstruct } = require_symbols();

  class MessageEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}) {
      if (type === kConstruct) {
        super(arguments[1], arguments[2]);
        webidl.util.markAsUncloneable(this);
        return;
      }
      const prefix = "MessageEvent constructor";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      type = webidl.converters.DOMString(type, prefix, "type");
      eventInitDict = webidl.converters.MessageEventInit(eventInitDict, prefix, "eventInitDict");
      super(type, eventInitDict);
      this.#eventInit = eventInitDict;
      webidl.util.markAsUncloneable(this);
    }
    get data() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.data;
    }
    get origin() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.origin;
    }
    get lastEventId() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.lastEventId;
    }
    get source() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.source;
    }
    get ports() {
      webidl.brandCheck(this, MessageEvent);
      if (!Object.isFrozen(this.#eventInit.ports)) {
        Object.freeze(this.#eventInit.ports);
      }
      return this.#eventInit.ports;
    }
    initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
      webidl.brandCheck(this, MessageEvent);
      webidl.argumentLengthCheck(arguments, 1, "MessageEvent.initMessageEvent");
      return new MessageEvent(type, {
        bubbles,
        cancelable,
        data,
        origin,
        lastEventId,
        source,
        ports
      });
    }
    static createFastMessageEvent(type, init) {
      const messageEvent = new MessageEvent(kConstruct, type, init);
      messageEvent.#eventInit = init;
      messageEvent.#eventInit.data ??= null;
      messageEvent.#eventInit.origin ??= "";
      messageEvent.#eventInit.lastEventId ??= "";
      messageEvent.#eventInit.source ??= null;
      messageEvent.#eventInit.ports ??= [];
      return messageEvent;
    }
  }
  var { createFastMessageEvent } = MessageEvent;
  delete MessageEvent.createFastMessageEvent;

  class CloseEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}) {
      const prefix = "CloseEvent constructor";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      type = webidl.converters.DOMString(type, prefix, "type");
      eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
      super(type, eventInitDict);
      this.#eventInit = eventInitDict;
      webidl.util.markAsUncloneable(this);
    }
    get wasClean() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.wasClean;
    }
    get code() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.code;
    }
    get reason() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.reason;
    }
  }

  class ErrorEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict) {
      const prefix = "ErrorEvent constructor";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      super(type, eventInitDict);
      webidl.util.markAsUncloneable(this);
      type = webidl.converters.DOMString(type, prefix, "type");
      eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
      this.#eventInit = eventInitDict;
    }
    get message() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.message;
    }
    get filename() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.filename;
    }
    get lineno() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.lineno;
    }
    get colno() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.colno;
    }
    get error() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.error;
    }
  }
  Object.defineProperties(MessageEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "MessageEvent",
      configurable: true
    },
    data: kEnumerableProperty,
    origin: kEnumerableProperty,
    lastEventId: kEnumerableProperty,
    source: kEnumerableProperty,
    ports: kEnumerableProperty,
    initMessageEvent: kEnumerableProperty
  });
  Object.defineProperties(CloseEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "CloseEvent",
      configurable: true
    },
    reason: kEnumerableProperty,
    code: kEnumerableProperty,
    wasClean: kEnumerableProperty
  });
  Object.defineProperties(ErrorEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "ErrorEvent",
      configurable: true
    },
    message: kEnumerableProperty,
    filename: kEnumerableProperty,
    lineno: kEnumerableProperty,
    colno: kEnumerableProperty,
    error: kEnumerableProperty
  });
  webidl.converters.MessagePort = webidl.interfaceConverter(webidl.is.MessagePort, "MessagePort");
  webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(webidl.converters.MessagePort);
  var eventInit = [
    {
      key: "bubbles",
      converter: webidl.converters.boolean,
      defaultValue: () => false
    },
    {
      key: "cancelable",
      converter: webidl.converters.boolean,
      defaultValue: () => false
    },
    {
      key: "composed",
      converter: webidl.converters.boolean,
      defaultValue: () => false
    }
  ];
  webidl.converters.MessageEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "data",
      converter: webidl.converters.any,
      defaultValue: () => null
    },
    {
      key: "origin",
      converter: webidl.converters.USVString,
      defaultValue: () => ""
    },
    {
      key: "lastEventId",
      converter: webidl.converters.DOMString,
      defaultValue: () => ""
    },
    {
      key: "source",
      converter: webidl.nullableConverter(webidl.converters.MessagePort),
      defaultValue: () => null
    },
    {
      key: "ports",
      converter: webidl.converters["sequence<MessagePort>"],
      defaultValue: () => new Array(0)
    }
  ]);
  webidl.converters.CloseEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "wasClean",
      converter: webidl.converters.boolean,
      defaultValue: () => false
    },
    {
      key: "code",
      converter: webidl.converters["unsigned short"],
      defaultValue: () => 0
    },
    {
      key: "reason",
      converter: webidl.converters.USVString,
      defaultValue: () => ""
    }
  ]);
  webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "message",
      converter: webidl.converters.DOMString,
      defaultValue: () => ""
    },
    {
      key: "filename",
      converter: webidl.converters.USVString,
      defaultValue: () => ""
    },
    {
      key: "lineno",
      converter: webidl.converters["unsigned long"],
      defaultValue: () => 0
    },
    {
      key: "colno",
      converter: webidl.converters["unsigned long"],
      defaultValue: () => 0
    },
    {
      key: "error",
      converter: webidl.converters.any
    }
  ]);
  module2.exports = {
    MessageEvent,
    CloseEvent,
    ErrorEvent,
    createFastMessageEvent
  };
});

// node_modules/undici/lib/web/websocket/constants.js
var require_constants5 = __commonJS((exports2, module2) => {
  var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
  var staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
  };
  var states = {
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3
  };
  var sentCloseFrameState = {
    SENT: 1,
    RECEIVED: 2
  };
  var opcodes = {
    CONTINUATION: 0,
    TEXT: 1,
    BINARY: 2,
    CLOSE: 8,
    PING: 9,
    PONG: 10
  };
  var maxUnsigned16Bit = 65535;
  var parserStates = {
    INFO: 0,
    PAYLOADLENGTH_16: 2,
    PAYLOADLENGTH_64: 3,
    READ_DATA: 4
  };
  var emptyBuffer = Buffer.allocUnsafe(0);
  var sendHints = {
    text: 1,
    typedArray: 2,
    arrayBuffer: 3,
    blob: 4
  };
  module2.exports = {
    uid,
    sentCloseFrameState,
    staticPropertyDescriptors,
    states,
    opcodes,
    maxUnsigned16Bit,
    parserStates,
    emptyBuffer,
    sendHints
  };
});

// node_modules/undici/lib/web/websocket/util.js
var require_util6 = __commonJS((exports2, module2) => {
  var { states, opcodes } = require_constants5();
  var { isUtf8 } = require("node:buffer");
  var { collectASequenceOfCodePointsFast, removeHTTPWhitespace } = require_data_url();
  function isConnecting(readyState) {
    return readyState === states.CONNECTING;
  }
  function isEstablished(readyState) {
    return readyState === states.OPEN;
  }
  function isClosing(readyState) {
    return readyState === states.CLOSING;
  }
  function isClosed(readyState) {
    return readyState === states.CLOSED;
  }
  function fireEvent(e, target, eventFactory = (type, init) => new Event(type, init), eventInitDict = {}) {
    const event = eventFactory(e, eventInitDict);
    target.dispatchEvent(event);
  }
  function websocketMessageReceived(handler, type, data) {
    handler.onMessage(type, data);
  }
  function toArrayBuffer(buffer) {
    if (buffer.byteLength === buffer.buffer.byteLength) {
      return buffer.buffer;
    }
    return new Uint8Array(buffer).buffer;
  }
  function isValidSubprotocol(protocol) {
    if (protocol.length === 0) {
      return false;
    }
    for (let i2 = 0;i2 < protocol.length; ++i2) {
      const code2 = protocol.charCodeAt(i2);
      if (code2 < 33 || code2 > 126 || code2 === 34 || code2 === 40 || code2 === 41 || code2 === 44 || code2 === 47 || code2 === 58 || code2 === 59 || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 63 || code2 === 64 || code2 === 91 || code2 === 92 || code2 === 93 || code2 === 123 || code2 === 125) {
        return false;
      }
    }
    return true;
  }
  function isValidStatusCode(code2) {
    if (code2 >= 1000 && code2 < 1015) {
      return code2 !== 1004 && code2 !== 1005 && code2 !== 1006;
    }
    return code2 >= 3000 && code2 <= 4999;
  }
  function isControlFrame(opcode) {
    return opcode === opcodes.CLOSE || opcode === opcodes.PING || opcode === opcodes.PONG;
  }
  function isContinuationFrame(opcode) {
    return opcode === opcodes.CONTINUATION;
  }
  function isTextBinaryFrame(opcode) {
    return opcode === opcodes.TEXT || opcode === opcodes.BINARY;
  }
  function isValidOpcode(opcode) {
    return isTextBinaryFrame(opcode) || isContinuationFrame(opcode) || isControlFrame(opcode);
  }
  function parseExtensions(extensions2) {
    const position = { position: 0 };
    const extensionList = new Map;
    while (position.position < extensions2.length) {
      const pair = collectASequenceOfCodePointsFast(";", extensions2, position);
      const [name, value = ""] = pair.split("=", 2);
      extensionList.set(removeHTTPWhitespace(name, true, false), removeHTTPWhitespace(value, false, true));
      position.position++;
    }
    return extensionList;
  }
  function isValidClientWindowBits(value) {
    for (let i2 = 0;i2 < value.length; i2++) {
      const byte = value.charCodeAt(i2);
      if (byte < 48 || byte > 57) {
        return false;
      }
    }
    return true;
  }
  function getURLRecord(url, baseURL) {
    let urlRecord;
    try {
      urlRecord = new URL(url, baseURL);
    } catch (e) {
      throw new DOMException(e, "SyntaxError");
    }
    if (urlRecord.protocol === "http:") {
      urlRecord.protocol = "ws:";
    } else if (urlRecord.protocol === "https:") {
      urlRecord.protocol = "wss:";
    }
    if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
      throw new DOMException("expected a ws: or wss: url", "SyntaxError");
    }
    if (urlRecord.hash.length || urlRecord.href.endsWith("#")) {
      throw new DOMException("hash", "SyntaxError");
    }
    return urlRecord;
  }
  function validateCloseCodeAndReason(code2, reason) {
    if (code2 !== null) {
      if (code2 !== 1000 && (code2 < 3000 || code2 > 4999)) {
        throw new DOMException("invalid code", "InvalidAccessError");
      }
    }
    if (reason !== null) {
      const reasonBytesLength = Buffer.byteLength(reason);
      if (reasonBytesLength > 123) {
        throw new DOMException(`Reason must be less than 123 bytes; received ${reasonBytesLength}`, "SyntaxError");
      }
    }
  }
  var utf8Decode = (() => {
    if (typeof process.versions.icu === "string") {
      const fatalDecoder = new TextDecoder("utf-8", { fatal: true });
      return fatalDecoder.decode.bind(fatalDecoder);
    }
    return function(buffer) {
      if (isUtf8(buffer)) {
        return buffer.toString("utf-8");
      }
      throw new TypeError("Invalid utf-8 received.");
    };
  })();
  module2.exports = {
    isConnecting,
    isEstablished,
    isClosing,
    isClosed,
    fireEvent,
    isValidSubprotocol,
    isValidStatusCode,
    websocketMessageReceived,
    utf8Decode,
    isControlFrame,
    isContinuationFrame,
    isTextBinaryFrame,
    isValidOpcode,
    parseExtensions,
    isValidClientWindowBits,
    toArrayBuffer,
    getURLRecord,
    validateCloseCodeAndReason
  };
});

// node_modules/undici/lib/web/websocket/frame.js
var require_frame = __commonJS((exports2, module2) => {
  var { maxUnsigned16Bit, opcodes } = require_constants5();
  var BUFFER_SIZE = 8 * 1024;
  var crypto2;
  var buffer = null;
  var bufIdx = BUFFER_SIZE;
  try {
    crypto2 = require("node:crypto");
  } catch {
    crypto2 = {
      randomFillSync: function randomFillSync(buffer2, _offset, _size) {
        for (let i2 = 0;i2 < buffer2.length; ++i2) {
          buffer2[i2] = Math.random() * 255 | 0;
        }
        return buffer2;
      }
    };
  }
  function generateMask() {
    if (bufIdx === BUFFER_SIZE) {
      bufIdx = 0;
      crypto2.randomFillSync(buffer ??= Buffer.allocUnsafeSlow(BUFFER_SIZE), 0, BUFFER_SIZE);
    }
    return [buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++]];
  }

  class WebsocketFrameSend {
    constructor(data) {
      this.frameData = data;
    }
    createFrame(opcode) {
      const frameData = this.frameData;
      const maskKey = generateMask();
      const bodyLength = frameData?.byteLength ?? 0;
      let payloadLength = bodyLength;
      let offset = 6;
      if (bodyLength > maxUnsigned16Bit) {
        offset += 8;
        payloadLength = 127;
      } else if (bodyLength > 125) {
        offset += 2;
        payloadLength = 126;
      }
      const buffer2 = Buffer.allocUnsafe(bodyLength + offset);
      buffer2[0] = buffer2[1] = 0;
      buffer2[0] |= 128;
      buffer2[0] = (buffer2[0] & 240) + opcode;
      /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
      buffer2[offset - 4] = maskKey[0];
      buffer2[offset - 3] = maskKey[1];
      buffer2[offset - 2] = maskKey[2];
      buffer2[offset - 1] = maskKey[3];
      buffer2[1] = payloadLength;
      if (payloadLength === 126) {
        buffer2.writeUInt16BE(bodyLength, 2);
      } else if (payloadLength === 127) {
        buffer2[2] = buffer2[3] = 0;
        buffer2.writeUIntBE(bodyLength, 4, 6);
      }
      buffer2[1] |= 128;
      for (let i2 = 0;i2 < bodyLength; ++i2) {
        buffer2[offset + i2] = frameData[i2] ^ maskKey[i2 & 3];
      }
      return buffer2;
    }
    static createFastTextFrame(buffer2) {
      const maskKey = generateMask();
      const bodyLength = buffer2.length;
      for (let i2 = 0;i2 < bodyLength; ++i2) {
        buffer2[i2] ^= maskKey[i2 & 3];
      }
      let payloadLength = bodyLength;
      let offset = 6;
      if (bodyLength > maxUnsigned16Bit) {
        offset += 8;
        payloadLength = 127;
      } else if (bodyLength > 125) {
        offset += 2;
        payloadLength = 126;
      }
      const head = Buffer.allocUnsafeSlow(offset);
      head[0] = 128 | opcodes.TEXT;
      head[1] = payloadLength | 128;
      head[offset - 4] = maskKey[0];
      head[offset - 3] = maskKey[1];
      head[offset - 2] = maskKey[2];
      head[offset - 1] = maskKey[3];
      if (payloadLength === 126) {
        head.writeUInt16BE(bodyLength, 2);
      } else if (payloadLength === 127) {
        head[2] = head[3] = 0;
        head.writeUIntBE(bodyLength, 4, 6);
      }
      return [head, buffer2];
    }
  }
  module2.exports = {
    WebsocketFrameSend
  };
});

// node_modules/undici/lib/web/websocket/connection.js
var require_connection = __commonJS((exports2, module2) => {
  var { uid, states, sentCloseFrameState, emptyBuffer, opcodes } = require_constants5();
  var { parseExtensions, isClosed, isClosing, isEstablished, validateCloseCodeAndReason } = require_util6();
  var { channels } = require_diagnostics();
  var { makeRequest } = require_request2();
  var { fetching } = require_fetch();
  var { Headers: Headers2, getHeadersList } = require_headers();
  var { getDecodeSplit } = require_util2();
  var { WebsocketFrameSend } = require_frame();
  var assert = require("node:assert");
  var crypto2;
  try {
    crypto2 = require("node:crypto");
  } catch {}
  function establishWebSocketConnection(url, protocols, client, handler, options) {
    const requestURL = url;
    requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
    const request = makeRequest({
      urlList: [requestURL],
      client,
      serviceWorkers: "none",
      referrer: "no-referrer",
      mode: "websocket",
      credentials: "include",
      cache: "no-store",
      redirect: "error"
    });
    if (options.headers) {
      const headersList = getHeadersList(new Headers2(options.headers));
      request.headersList = headersList;
    }
    const keyValue = crypto2.randomBytes(16).toString("base64");
    request.headersList.append("sec-websocket-key", keyValue, true);
    request.headersList.append("sec-websocket-version", "13", true);
    for (const protocol of protocols) {
      request.headersList.append("sec-websocket-protocol", protocol, true);
    }
    const permessageDeflate = "permessage-deflate; client_max_window_bits";
    request.headersList.append("sec-websocket-extensions", permessageDeflate, true);
    const controller = fetching({
      request,
      useParallelQueue: true,
      dispatcher: options.dispatcher,
      processResponse(response) {
        if (response.type === "error") {
          handler.readyState = states.CLOSED;
        }
        if (response.type === "error" || response.status !== 101) {
          failWebsocketConnection(handler, 1002, "Received network error or non-101 status code.");
          return;
        }
        if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
          failWebsocketConnection(handler, 1002, "Server did not respond with sent protocols.");
          return;
        }
        if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
          failWebsocketConnection(handler, 1002, 'Server did not set Upgrade header to "websocket".');
          return;
        }
        if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
          failWebsocketConnection(handler, 1002, 'Server did not set Connection header to "upgrade".');
          return;
        }
        const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
        const digest = crypto2.createHash("sha1").update(keyValue + uid).digest("base64");
        if (secWSAccept !== digest) {
          failWebsocketConnection(handler, 1002, "Incorrect hash received in Sec-WebSocket-Accept header.");
          return;
        }
        const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
        let extensions2;
        if (secExtension !== null) {
          extensions2 = parseExtensions(secExtension);
          if (!extensions2.has("permessage-deflate")) {
            failWebsocketConnection(handler, 1002, "Sec-WebSocket-Extensions header does not match.");
            return;
          }
        }
        const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
        if (secProtocol !== null) {
          const requestProtocols = getDecodeSplit("sec-websocket-protocol", request.headersList);
          if (!requestProtocols.includes(secProtocol)) {
            failWebsocketConnection(handler, 1002, "Protocol was not set in the opening handshake.");
            return;
          }
        }
        response.socket.on("data", handler.onSocketData);
        response.socket.on("close", handler.onSocketClose);
        response.socket.on("error", handler.onSocketError);
        if (channels.open.hasSubscribers) {
          channels.open.publish({
            address: response.socket.address(),
            protocol: secProtocol,
            extensions: secExtension
          });
        }
        handler.wasEverConnected = true;
        handler.onConnectionEstablished(response, extensions2);
      }
    });
    return controller;
  }
  function closeWebSocketConnection(object, code2, reason, validate = false) {
    code2 ??= null;
    reason ??= "";
    if (validate)
      validateCloseCodeAndReason(code2, reason);
    if (isClosed(object.readyState) || isClosing(object.readyState)) {} else if (!isEstablished(object.readyState)) {
      failWebsocketConnection(object);
      object.readyState = states.CLOSING;
    } else if (!object.closeState.has(sentCloseFrameState.SENT) && !object.closeState.has(sentCloseFrameState.RECEIVED)) {
      const frame = new WebsocketFrameSend;
      if (reason.length !== 0 && code2 === null) {
        code2 = 1000;
      }
      assert(code2 === null || Number.isInteger(code2));
      if (code2 === null && reason.length === 0) {
        frame.frameData = emptyBuffer;
      } else if (code2 !== null && reason === null) {
        frame.frameData = Buffer.allocUnsafe(2);
        frame.frameData.writeUInt16BE(code2, 0);
      } else if (code2 !== null && reason !== null) {
        frame.frameData = Buffer.allocUnsafe(2 + Buffer.byteLength(reason));
        frame.frameData.writeUInt16BE(code2, 0);
        frame.frameData.write(reason, 2, "utf-8");
      } else {
        frame.frameData = emptyBuffer;
      }
      object.socket.write(frame.createFrame(opcodes.CLOSE));
      object.closeState.add(sentCloseFrameState.SENT);
      object.readyState = states.CLOSING;
    } else {
      object.readyState = states.CLOSING;
    }
  }
  function failWebsocketConnection(handler, code2, reason) {
    if (isEstablished(handler.readyState)) {
      closeWebSocketConnection(handler, code2, reason, false);
    }
    handler.controller.abort();
    if (handler.socket?.destroyed === false) {
      handler.socket.destroy();
    }
    handler.onFail(code2, reason);
  }
  module2.exports = {
    establishWebSocketConnection,
    failWebsocketConnection,
    closeWebSocketConnection
  };
});

// node_modules/undici/lib/web/websocket/permessage-deflate.js
var require_permessage_deflate = __commonJS((exports2, module2) => {
  var { createInflateRaw, Z_DEFAULT_WINDOWBITS } = require("node:zlib");
  var { isValidClientWindowBits } = require_util6();
  var tail = Buffer.from([0, 0, 255, 255]);
  var kBuffer = Symbol("kBuffer");
  var kLength = Symbol("kLength");

  class PerMessageDeflate {
    #inflate;
    #options = {};
    constructor(extensions2) {
      this.#options.serverNoContextTakeover = extensions2.has("server_no_context_takeover");
      this.#options.serverMaxWindowBits = extensions2.get("server_max_window_bits");
    }
    decompress(chunk, fin, callback) {
      if (!this.#inflate) {
        let windowBits = Z_DEFAULT_WINDOWBITS;
        if (this.#options.serverMaxWindowBits) {
          if (!isValidClientWindowBits(this.#options.serverMaxWindowBits)) {
            callback(new Error("Invalid server_max_window_bits"));
            return;
          }
          windowBits = Number.parseInt(this.#options.serverMaxWindowBits);
        }
        this.#inflate = createInflateRaw({ windowBits });
        this.#inflate[kBuffer] = [];
        this.#inflate[kLength] = 0;
        this.#inflate.on("data", (data) => {
          this.#inflate[kBuffer].push(data);
          this.#inflate[kLength] += data.length;
        });
        this.#inflate.on("error", (err2) => {
          this.#inflate = null;
          callback(err2);
        });
      }
      this.#inflate.write(chunk);
      if (fin) {
        this.#inflate.write(tail);
      }
      this.#inflate.flush(() => {
        const full = Buffer.concat(this.#inflate[kBuffer], this.#inflate[kLength]);
        this.#inflate[kBuffer].length = 0;
        this.#inflate[kLength] = 0;
        callback(null, full);
      });
    }
  }
  module2.exports = { PerMessageDeflate };
});

// node_modules/undici/lib/web/websocket/receiver.js
var require_receiver = __commonJS((exports2, module2) => {
  var { Writable } = require("node:stream");
  var assert = require("node:assert");
  var { parserStates, opcodes, states, emptyBuffer, sentCloseFrameState } = require_constants5();
  var { channels } = require_diagnostics();
  var {
    isValidStatusCode,
    isValidOpcode,
    websocketMessageReceived,
    utf8Decode,
    isControlFrame,
    isTextBinaryFrame,
    isContinuationFrame
  } = require_util6();
  var { failWebsocketConnection } = require_connection();
  var { WebsocketFrameSend } = require_frame();
  var { PerMessageDeflate } = require_permessage_deflate();

  class ByteParser extends Writable {
    #buffers = [];
    #fragmentsBytes = 0;
    #byteOffset = 0;
    #loop = false;
    #state = parserStates.INFO;
    #info = {};
    #fragments = [];
    #extensions;
    #handler;
    constructor(handler, extensions2) {
      super();
      this.#handler = handler;
      this.#extensions = extensions2 == null ? new Map : extensions2;
      if (this.#extensions.has("permessage-deflate")) {
        this.#extensions.set("permessage-deflate", new PerMessageDeflate(extensions2));
      }
    }
    _write(chunk, _, callback) {
      this.#buffers.push(chunk);
      this.#byteOffset += chunk.length;
      this.#loop = true;
      this.run(callback);
    }
    run(callback) {
      while (this.#loop) {
        if (this.#state === parserStates.INFO) {
          if (this.#byteOffset < 2) {
            return callback();
          }
          const buffer = this.consume(2);
          const fin = (buffer[0] & 128) !== 0;
          const opcode = buffer[0] & 15;
          const masked = (buffer[1] & 128) === 128;
          const fragmented = !fin && opcode !== opcodes.CONTINUATION;
          const payloadLength = buffer[1] & 127;
          const rsv1 = buffer[0] & 64;
          const rsv2 = buffer[0] & 32;
          const rsv3 = buffer[0] & 16;
          if (!isValidOpcode(opcode)) {
            failWebsocketConnection(this.#handler, 1002, "Invalid opcode received");
            return callback();
          }
          if (masked) {
            failWebsocketConnection(this.#handler, 1002, "Frame cannot be masked");
            return callback();
          }
          if (rsv1 !== 0 && !this.#extensions.has("permessage-deflate")) {
            failWebsocketConnection(this.#handler, 1002, "Expected RSV1 to be clear.");
            return;
          }
          if (rsv2 !== 0 || rsv3 !== 0) {
            failWebsocketConnection(this.#handler, 1002, "RSV1, RSV2, RSV3 must be clear");
            return;
          }
          if (fragmented && !isTextBinaryFrame(opcode)) {
            failWebsocketConnection(this.#handler, 1002, "Invalid frame type was fragmented.");
            return;
          }
          if (isTextBinaryFrame(opcode) && this.#fragments.length > 0) {
            failWebsocketConnection(this.#handler, 1002, "Expected continuation frame");
            return;
          }
          if (this.#info.fragmented && fragmented) {
            failWebsocketConnection(this.#handler, 1002, "Fragmented frame exceeded 125 bytes.");
            return;
          }
          if ((payloadLength > 125 || fragmented) && isControlFrame(opcode)) {
            failWebsocketConnection(this.#handler, 1002, "Control frame either too large or fragmented");
            return;
          }
          if (isContinuationFrame(opcode) && this.#fragments.length === 0 && !this.#info.compressed) {
            failWebsocketConnection(this.#handler, 1002, "Unexpected continuation frame");
            return;
          }
          if (payloadLength <= 125) {
            this.#info.payloadLength = payloadLength;
            this.#state = parserStates.READ_DATA;
          } else if (payloadLength === 126) {
            this.#state = parserStates.PAYLOADLENGTH_16;
          } else if (payloadLength === 127) {
            this.#state = parserStates.PAYLOADLENGTH_64;
          }
          if (isTextBinaryFrame(opcode)) {
            this.#info.binaryType = opcode;
            this.#info.compressed = rsv1 !== 0;
          }
          this.#info.opcode = opcode;
          this.#info.masked = masked;
          this.#info.fin = fin;
          this.#info.fragmented = fragmented;
        } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
          if (this.#byteOffset < 2) {
            return callback();
          }
          const buffer = this.consume(2);
          this.#info.payloadLength = buffer.readUInt16BE(0);
          this.#state = parserStates.READ_DATA;
        } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
          if (this.#byteOffset < 8) {
            return callback();
          }
          const buffer = this.consume(8);
          const upper = buffer.readUInt32BE(0);
          if (upper > 2 ** 31 - 1) {
            failWebsocketConnection(this.#handler, 1009, "Received payload length > 2^31 bytes.");
            return;
          }
          const lower = buffer.readUInt32BE(4);
          this.#info.payloadLength = (upper << 8) + lower;
          this.#state = parserStates.READ_DATA;
        } else if (this.#state === parserStates.READ_DATA) {
          if (this.#byteOffset < this.#info.payloadLength) {
            return callback();
          }
          const body = this.consume(this.#info.payloadLength);
          if (isControlFrame(this.#info.opcode)) {
            this.#loop = this.parseControlFrame(body);
            this.#state = parserStates.INFO;
          } else {
            if (!this.#info.compressed) {
              this.writeFragments(body);
              if (!this.#info.fragmented && this.#info.fin) {
                websocketMessageReceived(this.#handler, this.#info.binaryType, this.consumeFragments());
              }
              this.#state = parserStates.INFO;
            } else {
              this.#extensions.get("permessage-deflate").decompress(body, this.#info.fin, (error, data) => {
                if (error) {
                  failWebsocketConnection(this.#handler, 1007, error.message);
                  return;
                }
                this.writeFragments(data);
                if (!this.#info.fin) {
                  this.#state = parserStates.INFO;
                  this.#loop = true;
                  this.run(callback);
                  return;
                }
                websocketMessageReceived(this.#handler, this.#info.binaryType, this.consumeFragments());
                this.#loop = true;
                this.#state = parserStates.INFO;
                this.run(callback);
              });
              this.#loop = false;
              break;
            }
          }
        }
      }
    }
    consume(n) {
      if (n > this.#byteOffset) {
        throw new Error("Called consume() before buffers satiated.");
      } else if (n === 0) {
        return emptyBuffer;
      }
      this.#byteOffset -= n;
      const first = this.#buffers[0];
      if (first.length > n) {
        this.#buffers[0] = first.subarray(n, first.length);
        return first.subarray(0, n);
      } else if (first.length === n) {
        return this.#buffers.shift();
      } else {
        let offset = 0;
        const buffer = Buffer.allocUnsafeSlow(n);
        while (offset !== n) {
          const next = this.#buffers[0];
          const length = next.length;
          if (length + offset === n) {
            buffer.set(this.#buffers.shift(), offset);
            break;
          } else if (length + offset > n) {
            buffer.set(next.subarray(0, n - offset), offset);
            this.#buffers[0] = next.subarray(n - offset);
            break;
          } else {
            buffer.set(this.#buffers.shift(), offset);
            offset += length;
          }
        }
        return buffer;
      }
    }
    writeFragments(fragment) {
      this.#fragmentsBytes += fragment.length;
      this.#fragments.push(fragment);
    }
    consumeFragments() {
      const fragments = this.#fragments;
      if (fragments.length === 1) {
        this.#fragmentsBytes = 0;
        return fragments.shift();
      }
      let offset = 0;
      const output = Buffer.allocUnsafeSlow(this.#fragmentsBytes);
      for (let i2 = 0;i2 < fragments.length; ++i2) {
        const buffer = fragments[i2];
        output.set(buffer, offset);
        offset += buffer.length;
      }
      this.#fragments = [];
      this.#fragmentsBytes = 0;
      return output;
    }
    parseCloseBody(data) {
      assert(data.length !== 1);
      let code2;
      if (data.length >= 2) {
        code2 = data.readUInt16BE(0);
      }
      if (code2 !== undefined && !isValidStatusCode(code2)) {
        return { code: 1002, reason: "Invalid status code", error: true };
      }
      let reason = data.subarray(2);
      if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
        reason = reason.subarray(3);
      }
      try {
        reason = utf8Decode(reason);
      } catch {
        return { code: 1007, reason: "Invalid UTF-8", error: true };
      }
      return { code: code2, reason, error: false };
    }
    parseControlFrame(body) {
      const { opcode, payloadLength } = this.#info;
      if (opcode === opcodes.CLOSE) {
        if (payloadLength === 1) {
          failWebsocketConnection(this.#handler, 1002, "Received close frame with a 1-byte body.");
          return false;
        }
        this.#info.closeInfo = this.parseCloseBody(body);
        if (this.#info.closeInfo.error) {
          const { code: code2, reason } = this.#info.closeInfo;
          failWebsocketConnection(this.#handler, code2, reason);
          return false;
        }
        if (!this.#handler.closeState.has(sentCloseFrameState.SENT) && !this.#handler.closeState.has(sentCloseFrameState.RECEIVED)) {
          let body2 = emptyBuffer;
          if (this.#info.closeInfo.code) {
            body2 = Buffer.allocUnsafe(2);
            body2.writeUInt16BE(this.#info.closeInfo.code, 0);
          }
          const closeFrame = new WebsocketFrameSend(body2);
          this.#handler.socket.write(closeFrame.createFrame(opcodes.CLOSE));
          this.#handler.closeState.add(sentCloseFrameState.SENT);
        }
        this.#handler.readyState = states.CLOSING;
        this.#handler.closeState.add(sentCloseFrameState.RECEIVED);
        return false;
      } else if (opcode === opcodes.PING) {
        if (!this.#handler.closeState.has(sentCloseFrameState.RECEIVED)) {
          const frame = new WebsocketFrameSend(body);
          this.#handler.socket.write(frame.createFrame(opcodes.PONG));
          if (channels.ping.hasSubscribers) {
            channels.ping.publish({
              payload: body
            });
          }
        }
      } else if (opcode === opcodes.PONG) {
        if (channels.pong.hasSubscribers) {
          channels.pong.publish({
            payload: body
          });
        }
      }
      return true;
    }
    get closingInfo() {
      return this.#info.closeInfo;
    }
  }
  module2.exports = {
    ByteParser
  };
});

// node_modules/undici/lib/web/websocket/sender.js
var require_sender = __commonJS((exports2, module2) => {
  var { WebsocketFrameSend } = require_frame();
  var { opcodes, sendHints } = require_constants5();
  var FixedQueue = require_fixed_queue();

  class SendQueue {
    #queue = new FixedQueue;
    #running = false;
    #socket;
    constructor(socket) {
      this.#socket = socket;
    }
    add(item, cb, hint) {
      if (hint !== sendHints.blob) {
        if (!this.#running) {
          if (hint === sendHints.text) {
            const { 0: head, 1: body } = WebsocketFrameSend.createFastTextFrame(item);
            this.#socket.cork();
            this.#socket.write(head);
            this.#socket.write(body, cb);
            this.#socket.uncork();
          } else {
            this.#socket.write(createFrame(item, hint), cb);
          }
        } else {
          const node2 = {
            promise: null,
            callback: cb,
            frame: createFrame(item, hint)
          };
          this.#queue.push(node2);
        }
        return;
      }
      const node = {
        promise: item.arrayBuffer().then((ab) => {
          node.promise = null;
          node.frame = createFrame(ab, hint);
        }),
        callback: cb,
        frame: null
      };
      this.#queue.push(node);
      if (!this.#running) {
        this.#run();
      }
    }
    async#run() {
      this.#running = true;
      const queue = this.#queue;
      while (!queue.isEmpty()) {
        const node = queue.shift();
        if (node.promise !== null) {
          await node.promise;
        }
        this.#socket.write(node.frame, node.callback);
        node.callback = node.frame = null;
      }
      this.#running = false;
    }
  }
  function createFrame(data, hint) {
    return new WebsocketFrameSend(toBuffer(data, hint)).createFrame(hint === sendHints.text ? opcodes.TEXT : opcodes.BINARY);
  }
  function toBuffer(data, hint) {
    switch (hint) {
      case sendHints.text:
      case sendHints.typedArray:
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
      case sendHints.arrayBuffer:
      case sendHints.blob:
        return new Uint8Array(data);
    }
  }
  module2.exports = { SendQueue };
});

// node_modules/undici/lib/web/websocket/websocket.js
var require_websocket = __commonJS((exports2, module2) => {
  var { webidl } = require_webidl();
  var { URLSerializer } = require_data_url();
  var { environmentSettingsObject } = require_util2();
  var { staticPropertyDescriptors, states, sentCloseFrameState, sendHints, opcodes } = require_constants5();
  var {
    isConnecting,
    isEstablished,
    isClosing,
    isValidSubprotocol,
    fireEvent,
    utf8Decode,
    toArrayBuffer,
    getURLRecord
  } = require_util6();
  var { establishWebSocketConnection, closeWebSocketConnection, failWebsocketConnection } = require_connection();
  var { ByteParser } = require_receiver();
  var { kEnumerableProperty } = require_util();
  var { getGlobalDispatcher } = require_global2();
  var { types } = require("node:util");
  var { ErrorEvent, CloseEvent, createFastMessageEvent } = require_events();
  var { SendQueue } = require_sender();
  var { channels } = require_diagnostics();

  class WebSocket extends EventTarget {
    #events = {
      open: null,
      error: null,
      close: null,
      message: null
    };
    #bufferedAmount = 0;
    #protocol = "";
    #extensions = "";
    #sendQueue;
    #handler = {
      onConnectionEstablished: (response, extensions2) => this.#onConnectionEstablished(response, extensions2),
      onFail: (code2, reason) => this.#onFail(code2, reason),
      onMessage: (opcode, data) => this.#onMessage(opcode, data),
      onParserError: (err2) => failWebsocketConnection(this.#handler, null, err2.message),
      onParserDrain: () => this.#onParserDrain(),
      onSocketData: (chunk) => {
        if (!this.#parser.write(chunk)) {
          this.#handler.socket.pause();
        }
      },
      onSocketError: (err2) => {
        this.#handler.readyState = states.CLOSING;
        if (channels.socketError.hasSubscribers) {
          channels.socketError.publish(err2);
        }
        this.#handler.socket.destroy();
      },
      onSocketClose: () => this.#onSocketClose(),
      readyState: states.CONNECTING,
      socket: null,
      closeState: new Set,
      controller: null,
      wasEverConnected: false
    };
    #url;
    #binaryType;
    #parser;
    constructor(url, protocols = []) {
      super();
      webidl.util.markAsUncloneable(this);
      const prefix = "WebSocket constructor";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols, prefix, "options");
      url = webidl.converters.USVString(url);
      protocols = options.protocols;
      const baseURL = environmentSettingsObject.settingsObject.baseUrl;
      const urlRecord = getURLRecord(url, baseURL);
      if (typeof protocols === "string") {
        protocols = [protocols];
      }
      if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {
        throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      }
      if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {
        throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      }
      this.#url = new URL(urlRecord.href);
      const client = environmentSettingsObject.settingsObject;
      this.#handler.controller = establishWebSocketConnection(urlRecord, protocols, client, this.#handler, options);
      this.#handler.readyState = WebSocket.CONNECTING;
      this.#binaryType = "blob";
    }
    close(code2 = undefined, reason = undefined) {
      webidl.brandCheck(this, WebSocket);
      const prefix = "WebSocket.close";
      if (code2 !== undefined) {
        code2 = webidl.converters["unsigned short"](code2, prefix, "code", { clamp: true });
      }
      if (reason !== undefined) {
        reason = webidl.converters.USVString(reason);
      }
      code2 ??= null;
      reason ??= "";
      closeWebSocketConnection(this.#handler, code2, reason, true);
    }
    send(data) {
      webidl.brandCheck(this, WebSocket);
      const prefix = "WebSocket.send";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      data = webidl.converters.WebSocketSendData(data, prefix, "data");
      if (isConnecting(this.#handler.readyState)) {
        throw new DOMException("Sent before connected.", "InvalidStateError");
      }
      if (!isEstablished(this.#handler.readyState) || isClosing(this.#handler.readyState)) {
        return;
      }
      if (typeof data === "string") {
        const buffer = Buffer.from(data);
        this.#bufferedAmount += buffer.byteLength;
        this.#sendQueue.add(buffer, () => {
          this.#bufferedAmount -= buffer.byteLength;
        }, sendHints.text);
      } else if (types.isArrayBuffer(data)) {
        this.#bufferedAmount += data.byteLength;
        this.#sendQueue.add(data, () => {
          this.#bufferedAmount -= data.byteLength;
        }, sendHints.arrayBuffer);
      } else if (ArrayBuffer.isView(data)) {
        this.#bufferedAmount += data.byteLength;
        this.#sendQueue.add(data, () => {
          this.#bufferedAmount -= data.byteLength;
        }, sendHints.typedArray);
      } else if (webidl.is.Blob(data)) {
        this.#bufferedAmount += data.size;
        this.#sendQueue.add(data, () => {
          this.#bufferedAmount -= data.size;
        }, sendHints.blob);
      }
    }
    get readyState() {
      webidl.brandCheck(this, WebSocket);
      return this.#handler.readyState;
    }
    get bufferedAmount() {
      webidl.brandCheck(this, WebSocket);
      return this.#bufferedAmount;
    }
    get url() {
      webidl.brandCheck(this, WebSocket);
      return URLSerializer(this.#url);
    }
    get extensions() {
      webidl.brandCheck(this, WebSocket);
      return this.#extensions;
    }
    get protocol() {
      webidl.brandCheck(this, WebSocket);
      return this.#protocol;
    }
    get onopen() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.open;
    }
    set onopen(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.open) {
        this.removeEventListener("open", this.#events.open);
      }
      if (typeof fn === "function") {
        this.#events.open = fn;
        this.addEventListener("open", fn);
      } else {
        this.#events.open = null;
      }
    }
    get onerror() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.error;
    }
    set onerror(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.error) {
        this.removeEventListener("error", this.#events.error);
      }
      if (typeof fn === "function") {
        this.#events.error = fn;
        this.addEventListener("error", fn);
      } else {
        this.#events.error = null;
      }
    }
    get onclose() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.close;
    }
    set onclose(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.close) {
        this.removeEventListener("close", this.#events.close);
      }
      if (typeof fn === "function") {
        this.#events.close = fn;
        this.addEventListener("close", fn);
      } else {
        this.#events.close = null;
      }
    }
    get onmessage() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.message;
    }
    set onmessage(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.message) {
        this.removeEventListener("message", this.#events.message);
      }
      if (typeof fn === "function") {
        this.#events.message = fn;
        this.addEventListener("message", fn);
      } else {
        this.#events.message = null;
      }
    }
    get binaryType() {
      webidl.brandCheck(this, WebSocket);
      return this.#binaryType;
    }
    set binaryType(type) {
      webidl.brandCheck(this, WebSocket);
      if (type !== "blob" && type !== "arraybuffer") {
        this.#binaryType = "blob";
      } else {
        this.#binaryType = type;
      }
    }
    #onConnectionEstablished(response, parsedExtensions) {
      this.#handler.socket = response.socket;
      const parser = new ByteParser(this.#handler, parsedExtensions);
      parser.on("drain", () => this.#handler.onParserDrain());
      parser.on("error", (err2) => this.#handler.onParserError(err2));
      this.#parser = parser;
      this.#sendQueue = new SendQueue(response.socket);
      this.#handler.readyState = states.OPEN;
      const extensions2 = response.headersList.get("sec-websocket-extensions");
      if (extensions2 !== null) {
        this.#extensions = extensions2;
      }
      const protocol = response.headersList.get("sec-websocket-protocol");
      if (protocol !== null) {
        this.#protocol = protocol;
      }
      fireEvent("open", this);
    }
    #onFail(code2, reason) {
      if (reason) {
        fireEvent("error", this, (type, init) => new ErrorEvent(type, init), {
          error: new Error(reason),
          message: reason
        });
      }
      if (!this.#handler.wasEverConnected) {
        this.#handler.readyState = states.CLOSED;
        fireEvent("close", this, (type, init) => new CloseEvent(type, init), {
          wasClean: false,
          code: code2,
          reason
        });
      }
    }
    #onMessage(type, data) {
      if (this.#handler.readyState !== states.OPEN) {
        return;
      }
      let dataForEvent;
      if (type === opcodes.TEXT) {
        try {
          dataForEvent = utf8Decode(data);
        } catch {
          failWebsocketConnection(this.#handler, 1007, "Received invalid UTF-8 in text frame.");
          return;
        }
      } else if (type === opcodes.BINARY) {
        if (this.#binaryType === "blob") {
          dataForEvent = new Blob([data]);
        } else {
          dataForEvent = toArrayBuffer(data);
        }
      }
      fireEvent("message", this, createFastMessageEvent, {
        origin: this.#url.origin,
        data: dataForEvent
      });
    }
    #onParserDrain() {
      this.#handler.socket.resume();
    }
    #onSocketClose() {
      const wasClean = this.#handler.closeState.has(sentCloseFrameState.SENT) && this.#handler.closeState.has(sentCloseFrameState.RECEIVED);
      let code2 = 1005;
      let reason = "";
      const result2 = this.#parser.closingInfo;
      if (result2 && !result2.error) {
        code2 = result2.code ?? 1005;
        reason = result2.reason;
      } else if (!this.#handler.closeState.has(sentCloseFrameState.RECEIVED)) {
        code2 = 1006;
      }
      this.#handler.readyState = states.CLOSED;
      fireEvent("close", this, (type, init) => new CloseEvent(type, init), {
        wasClean,
        code: code2,
        reason
      });
      if (channels.close.hasSubscribers) {
        channels.close.publish({
          websocket: this,
          code: code2,
          reason
        });
      }
    }
  }
  WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
  WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
  WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
  WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
  Object.defineProperties(WebSocket.prototype, {
    CONNECTING: staticPropertyDescriptors,
    OPEN: staticPropertyDescriptors,
    CLOSING: staticPropertyDescriptors,
    CLOSED: staticPropertyDescriptors,
    url: kEnumerableProperty,
    readyState: kEnumerableProperty,
    bufferedAmount: kEnumerableProperty,
    onopen: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onclose: kEnumerableProperty,
    close: kEnumerableProperty,
    onmessage: kEnumerableProperty,
    binaryType: kEnumerableProperty,
    send: kEnumerableProperty,
    extensions: kEnumerableProperty,
    protocol: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "WebSocket",
      writable: false,
      enumerable: false,
      configurable: true
    }
  });
  Object.defineProperties(WebSocket, {
    CONNECTING: staticPropertyDescriptors,
    OPEN: staticPropertyDescriptors,
    CLOSING: staticPropertyDescriptors,
    CLOSED: staticPropertyDescriptors
  });
  webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(webidl.converters.DOMString);
  webidl.converters["DOMString or sequence<DOMString>"] = function(V, prefix, argument) {
    if (webidl.util.Type(V) === webidl.util.Types.OBJECT && Symbol.iterator in V) {
      return webidl.converters["sequence<DOMString>"](V);
    }
    return webidl.converters.DOMString(V, prefix, argument);
  };
  webidl.converters.WebSocketInit = webidl.dictionaryConverter([
    {
      key: "protocols",
      converter: webidl.converters["DOMString or sequence<DOMString>"],
      defaultValue: () => new Array(0)
    },
    {
      key: "dispatcher",
      converter: webidl.converters.any,
      defaultValue: () => getGlobalDispatcher()
    },
    {
      key: "headers",
      converter: webidl.nullableConverter(webidl.converters.HeadersInit)
    }
  ]);
  webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
    if (webidl.util.Type(V) === webidl.util.Types.OBJECT && !(Symbol.iterator in V)) {
      return webidl.converters.WebSocketInit(V);
    }
    return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
  };
  webidl.converters.WebSocketSendData = function(V) {
    if (webidl.util.Type(V) === webidl.util.Types.OBJECT) {
      if (webidl.is.Blob(V)) {
        return V;
      }
      if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {
        return V;
      }
    }
    return webidl.converters.USVString(V);
  };
  module2.exports = {
    WebSocket
  };
});

// node_modules/undici/lib/web/websocket/stream/websocketerror.js
var require_websocketerror = __commonJS((exports2, module2) => {
  var { webidl } = require_webidl();
  var { validateCloseCodeAndReason } = require_util6();
  var { kConstruct } = require_symbols();
  var { kEnumerableProperty } = require_util();

  class WebSocketError extends DOMException {
    #closeCode;
    #reason;
    constructor(message = "", init = undefined) {
      message = webidl.converters.DOMString(message, "WebSocketError", "message");
      super(message, "WebSocketError");
      if (init === kConstruct) {
        return;
      } else if (init !== null) {
        init = webidl.converters.WebSocketCloseInfo(init);
      }
      let code2 = init.closeCode ?? null;
      const reason = init.reason ?? "";
      validateCloseCodeAndReason(code2, reason);
      if (reason.length !== 0 && code2 === null) {
        code2 = 1000;
      }
      this.#closeCode = code2;
      this.#reason = reason;
    }
    get closeCode() {
      return this.#closeCode;
    }
    get reason() {
      return this.#reason;
    }
    static createUnvalidatedWebSocketError(message, code2, reason) {
      const error = new WebSocketError(message, kConstruct);
      error.#closeCode = code2;
      error.#reason = reason;
      return error;
    }
  }
  var { createUnvalidatedWebSocketError } = WebSocketError;
  delete WebSocketError.createUnvalidatedWebSocketError;
  Object.defineProperties(WebSocketError.prototype, {
    closeCode: kEnumerableProperty,
    reason: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "WebSocketError",
      writable: false,
      enumerable: false,
      configurable: true
    }
  });
  webidl.is.WebSocketError = webidl.util.MakeTypeAssertion(WebSocketError);
  module2.exports = { WebSocketError, createUnvalidatedWebSocketError };
});

// node_modules/undici/lib/web/websocket/stream/websocketstream.js
var require_websocketstream = __commonJS((exports2, module2) => {
  var { createDeferredPromise, environmentSettingsObject } = require_util2();
  var { states, opcodes, sentCloseFrameState } = require_constants5();
  var { webidl } = require_webidl();
  var { getURLRecord, isValidSubprotocol, isEstablished, utf8Decode } = require_util6();
  var { establishWebSocketConnection, failWebsocketConnection, closeWebSocketConnection } = require_connection();
  var { types } = require("node:util");
  var { channels } = require_diagnostics();
  var { WebsocketFrameSend } = require_frame();
  var { ByteParser } = require_receiver();
  var { WebSocketError, createUnvalidatedWebSocketError } = require_websocketerror();
  var { utf8DecodeBytes } = require_util2();
  var { kEnumerableProperty } = require_util();
  var emittedExperimentalWarning = false;

  class WebSocketStream {
    #url;
    #openedPromise;
    #closedPromise;
    #readableStream;
    #readableStreamController;
    #writableStream;
    #handshakeAborted = false;
    #handler = {
      onConnectionEstablished: (response, extensions2) => this.#onConnectionEstablished(response, extensions2),
      onFail: (_code, _reason) => {},
      onMessage: (opcode, data) => this.#onMessage(opcode, data),
      onParserError: (err2) => failWebsocketConnection(this.#handler, null, err2.message),
      onParserDrain: () => this.#handler.socket.resume(),
      onSocketData: (chunk) => {
        if (!this.#parser.write(chunk)) {
          this.#handler.socket.pause();
        }
      },
      onSocketError: (err2) => {
        this.#handler.readyState = states.CLOSING;
        if (channels.socketError.hasSubscribers) {
          channels.socketError.publish(err2);
        }
        this.#handler.socket.destroy();
      },
      onSocketClose: () => this.#onSocketClose(),
      readyState: states.CONNECTING,
      socket: null,
      closeState: new Set,
      controller: null,
      wasEverConnected: false
    };
    #parser;
    constructor(url, options = undefined) {
      if (!emittedExperimentalWarning) {
        process.emitWarning("WebSocketStream is experimental! Expect it to change at any time.", {
          code: "UNDICI-WSS"
        });
        emittedExperimentalWarning = true;
      }
      webidl.argumentLengthCheck(arguments, 1, "WebSocket");
      url = webidl.converters.USVString(url);
      if (options !== null) {
        options = webidl.converters.WebSocketStreamOptions(options);
      }
      const baseURL = environmentSettingsObject.settingsObject.baseUrl;
      const urlRecord = getURLRecord(url, baseURL);
      const protocols = options.protocols;
      if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {
        throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      }
      if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {
        throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      }
      this.#url = urlRecord.toString();
      this.#openedPromise = createDeferredPromise();
      this.#closedPromise = createDeferredPromise();
      if (options.signal != null) {
        const signal = options.signal;
        if (signal.aborted) {
          this.#openedPromise.reject(signal.reason);
          this.#closedPromise.reject(signal.reason);
          return;
        }
        signal.addEventListener("abort", () => {
          if (!isEstablished(this.#handler.readyState)) {
            failWebsocketConnection(this.#handler);
            this.#handler.readyState = states.CLOSING;
            this.#openedPromise.reject(signal.reason);
            this.#closedPromise.reject(signal.reason);
            this.#handshakeAborted = true;
          }
        }, { once: true });
      }
      const client = environmentSettingsObject.settingsObject;
      this.#handler.controller = establishWebSocketConnection(urlRecord, protocols, client, this.#handler, options);
    }
    get url() {
      return this.#url.toString();
    }
    get opened() {
      return this.#openedPromise.promise;
    }
    get closed() {
      return this.#closedPromise.promise;
    }
    close(closeInfo = undefined) {
      if (closeInfo !== null) {
        closeInfo = webidl.converters.WebSocketCloseInfo(closeInfo);
      }
      const code2 = closeInfo.closeCode ?? null;
      const reason = closeInfo.reason;
      closeWebSocketConnection(this.#handler, code2, reason, true);
    }
    #write(chunk) {
      const promise = createDeferredPromise();
      let data = null;
      let opcode = null;
      if (ArrayBuffer.isView(chunk) || types.isArrayBuffer(chunk)) {
        data = new Uint8Array(ArrayBuffer.isView(chunk) ? new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength) : chunk);
        opcode = opcodes.BINARY;
      } else {
        let string;
        try {
          string = webidl.converters.DOMString(chunk);
        } catch (e) {
          promise.reject(e);
          return;
        }
        data = new TextEncoder().encode(string);
        opcode = opcodes.TEXT;
      }
      if (!this.#handler.closeState.has(sentCloseFrameState.SENT) && !this.#handler.closeState.has(sentCloseFrameState.RECEIVED)) {
        const frame = new WebsocketFrameSend(data);
        this.#handler.socket.write(frame.createFrame(opcode), () => {
          promise.resolve(undefined);
        });
      }
      return promise;
    }
    #onConnectionEstablished(response, parsedExtensions) {
      this.#handler.socket = response.socket;
      const parser = new ByteParser(this.#handler, parsedExtensions);
      parser.on("drain", () => this.#handler.onParserDrain());
      parser.on("error", (err2) => this.#handler.onParserError(err2));
      this.#parser = parser;
      this.#handler.readyState = states.OPEN;
      const extensions2 = parsedExtensions ?? "";
      const protocol = response.headersList.get("sec-websocket-protocol") ?? "";
      const readable = new ReadableStream({
        start: (controller) => {
          this.#readableStreamController = controller;
        },
        pull(controller) {
          let chunk;
          while (controller.desiredSize > 0 && (chunk = response.socket.read()) !== null) {
            controller.enqueue(chunk);
          }
        },
        cancel: (reason) => this.#cancel(reason)
      });
      const writable = new WritableStream({
        write: (chunk) => this.#write(chunk),
        close: () => closeWebSocketConnection(this.#handler, null, null),
        abort: (reason) => this.#closeUsingReason(reason)
      });
      this.#readableStream = readable;
      this.#writableStream = writable;
      this.#openedPromise.resolve({
        extensions: extensions2,
        protocol,
        readable,
        writable
      });
    }
    #onMessage(type, data) {
      if (this.#handler.readyState !== states.OPEN) {
        return;
      }
      let chunk;
      if (type === opcodes.TEXT) {
        try {
          chunk = utf8Decode(data);
        } catch {
          failWebsocketConnection(this.#handler, "Received invalid UTF-8 in text frame.");
          return;
        }
      } else if (type === opcodes.BINARY) {
        chunk = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
      }
      this.#readableStreamController.enqueue(chunk);
    }
    #onSocketClose() {
      const wasClean = this.#handler.closeState.has(sentCloseFrameState.SENT) && this.#handler.closeState.has(sentCloseFrameState.RECEIVED);
      this.#handler.readyState = states.CLOSED;
      if (this.#handshakeAborted) {
        return;
      }
      if (!this.#handler.wasEverConnected) {
        this.#openedPromise.reject(new WebSocketError("Socket never opened"));
      }
      const result2 = this.#parser.closingInfo;
      let code2 = result2?.code ?? 1005;
      if (!this.#handler.closeState.has(sentCloseFrameState.SENT) && !this.#handler.closeState.has(sentCloseFrameState.RECEIVED)) {
        code2 = 1006;
      }
      const reason = result2?.reason == null ? "" : utf8DecodeBytes(Buffer.from(result2.reason));
      if (wasClean) {
        this.#readableStream.cancel().catch(() => {});
        if (!this.#writableStream.locked) {
          this.#writableStream.abort(new DOMException("A closed WebSocketStream cannot be written to", "InvalidStateError"));
        }
        this.#closedPromise.resolve({
          closeCode: code2,
          reason
        });
      } else {
        const error = createUnvalidatedWebSocketError("unclean close", code2, reason);
        this.#readableStreamController.error(error);
        this.#writableStream.abort(error);
        this.#closedPromise.reject(error);
      }
    }
    #closeUsingReason(reason) {
      let code2 = null;
      let reasonString = "";
      if (webidl.is.WebSocketError(reason)) {
        code2 = reason.closeCode;
        reasonString = reason.reason;
      }
      closeWebSocketConnection(this.#handler, code2, reasonString);
    }
    #cancel(reason) {
      this.#closeUsingReason(reason);
    }
  }
  Object.defineProperties(WebSocketStream.prototype, {
    url: kEnumerableProperty,
    opened: kEnumerableProperty,
    closed: kEnumerableProperty,
    close: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "WebSocketStream",
      writable: false,
      enumerable: false,
      configurable: true
    }
  });
  webidl.converters.WebSocketStreamOptions = webidl.dictionaryConverter([
    {
      key: "protocols",
      converter: webidl.sequenceConverter(webidl.converters.USVString),
      defaultValue: () => []
    },
    {
      key: "signal",
      converter: webidl.nullableConverter(webidl.converters.AbortSignal),
      defaultValue: () => null
    }
  ]);
  webidl.converters.WebSocketCloseInfo = webidl.dictionaryConverter([
    {
      key: "closeCode",
      converter: (V) => webidl.converters["unsigned short"](V, { enforceRange: true })
    },
    {
      key: "reason",
      converter: webidl.converters.USVString,
      defaultValue: () => ""
    }
  ]);
  module2.exports = { WebSocketStream };
});

// node_modules/undici/lib/web/eventsource/util.js
var require_util7 = __commonJS((exports2, module2) => {
  function isValidLastEventId(value) {
    return value.indexOf("\x00") === -1;
  }
  function isASCIINumber(value) {
    if (value.length === 0)
      return false;
    for (let i2 = 0;i2 < value.length; i2++) {
      if (value.charCodeAt(i2) < 48 || value.charCodeAt(i2) > 57)
        return false;
    }
    return true;
  }
  function delay(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms).unref();
    });
  }
  module2.exports = {
    isValidLastEventId,
    isASCIINumber,
    delay
  };
});

// node_modules/undici/lib/web/eventsource/eventsource-stream.js
var require_eventsource_stream = __commonJS((exports2, module2) => {
  var { Transform } = require("node:stream");
  var { isASCIINumber, isValidLastEventId } = require_util7();
  var BOM = [239, 187, 191];
  var LF = 10;
  var CR = 13;
  var COLON = 58;
  var SPACE2 = 32;

  class EventSourceStream extends Transform {
    state;
    checkBOM = true;
    crlfCheck = false;
    eventEndCheck = false;
    buffer = null;
    pos = 0;
    event = {
      data: undefined,
      event: undefined,
      id: undefined,
      retry: undefined
    };
    constructor(options = {}) {
      options.readableObjectMode = true;
      super(options);
      this.state = options.eventSourceSettings || {};
      if (options.push) {
        this.push = options.push;
      }
    }
    _transform(chunk, _encoding, callback) {
      if (chunk.length === 0) {
        callback();
        return;
      }
      if (this.buffer) {
        this.buffer = Buffer.concat([this.buffer, chunk]);
      } else {
        this.buffer = chunk;
      }
      if (this.checkBOM) {
        switch (this.buffer.length) {
          case 1:
            if (this.buffer[0] === BOM[0]) {
              callback();
              return;
            }
            this.checkBOM = false;
            callback();
            return;
          case 2:
            if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1]) {
              callback();
              return;
            }
            this.checkBOM = false;
            break;
          case 3:
            if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {
              this.buffer = Buffer.alloc(0);
              this.checkBOM = false;
              callback();
              return;
            }
            this.checkBOM = false;
            break;
          default:
            if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {
              this.buffer = this.buffer.subarray(3);
            }
            this.checkBOM = false;
            break;
        }
      }
      while (this.pos < this.buffer.length) {
        if (this.eventEndCheck) {
          if (this.crlfCheck) {
            if (this.buffer[this.pos] === LF) {
              this.buffer = this.buffer.subarray(this.pos + 1);
              this.pos = 0;
              this.crlfCheck = false;
              continue;
            }
            this.crlfCheck = false;
          }
          if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {
            if (this.buffer[this.pos] === CR) {
              this.crlfCheck = true;
            }
            this.buffer = this.buffer.subarray(this.pos + 1);
            this.pos = 0;
            if (this.event.data !== undefined || this.event.event || this.event.id || this.event.retry) {
              this.processEvent(this.event);
            }
            this.clearEvent();
            continue;
          }
          this.eventEndCheck = false;
          continue;
        }
        if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {
          if (this.buffer[this.pos] === CR) {
            this.crlfCheck = true;
          }
          this.parseLine(this.buffer.subarray(0, this.pos), this.event);
          this.buffer = this.buffer.subarray(this.pos + 1);
          this.pos = 0;
          this.eventEndCheck = true;
          continue;
        }
        this.pos++;
      }
      callback();
    }
    parseLine(line, event) {
      if (line.length === 0) {
        return;
      }
      const colonPosition = line.indexOf(COLON);
      if (colonPosition === 0) {
        return;
      }
      let field = "";
      let value = "";
      if (colonPosition !== -1) {
        field = line.subarray(0, colonPosition).toString("utf8");
        let valueStart = colonPosition + 1;
        if (line[valueStart] === SPACE2) {
          ++valueStart;
        }
        value = line.subarray(valueStart).toString("utf8");
      } else {
        field = line.toString("utf8");
        value = "";
      }
      switch (field) {
        case "data":
          if (event[field] === undefined) {
            event[field] = value;
          } else {
            event[field] += `
${value}`;
          }
          break;
        case "retry":
          if (isASCIINumber(value)) {
            event[field] = value;
          }
          break;
        case "id":
          if (isValidLastEventId(value)) {
            event[field] = value;
          }
          break;
        case "event":
          if (value.length > 0) {
            event[field] = value;
          }
          break;
      }
    }
    processEvent(event) {
      if (event.retry && isASCIINumber(event.retry)) {
        this.state.reconnectionTime = parseInt(event.retry, 10);
      }
      if (event.id && isValidLastEventId(event.id)) {
        this.state.lastEventId = event.id;
      }
      if (event.data !== undefined) {
        this.push({
          type: event.event || "message",
          options: {
            data: event.data,
            lastEventId: this.state.lastEventId,
            origin: this.state.origin
          }
        });
      }
    }
    clearEvent() {
      this.event = {
        data: undefined,
        event: undefined,
        id: undefined,
        retry: undefined
      };
    }
  }
  module2.exports = {
    EventSourceStream
  };
});

// node_modules/undici/lib/web/eventsource/eventsource.js
var require_eventsource = __commonJS((exports2, module2) => {
  var { pipeline } = require("node:stream");
  var { fetching } = require_fetch();
  var { makeRequest } = require_request2();
  var { webidl } = require_webidl();
  var { EventSourceStream } = require_eventsource_stream();
  var { parseMIMEType } = require_data_url();
  var { createFastMessageEvent } = require_events();
  var { isNetworkError } = require_response();
  var { delay } = require_util7();
  var { kEnumerableProperty } = require_util();
  var { environmentSettingsObject } = require_util2();
  var experimentalWarned = false;
  var defaultReconnectionTime = 3000;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSED = 2;
  var ANONYMOUS = "anonymous";
  var USE_CREDENTIALS = "use-credentials";

  class EventSource extends EventTarget {
    #events = {
      open: null,
      error: null,
      message: null
    };
    #url;
    #withCredentials = false;
    #readyState = CONNECTING;
    #request = null;
    #controller = null;
    #dispatcher;
    #state;
    constructor(url, eventSourceInitDict = {}) {
      super();
      webidl.util.markAsUncloneable(this);
      const prefix = "EventSource constructor";
      webidl.argumentLengthCheck(arguments, 1, prefix);
      if (!experimentalWarned) {
        experimentalWarned = true;
        process.emitWarning("EventSource is experimental, expect them to change at any time.", {
          code: "UNDICI-ES"
        });
      }
      url = webidl.converters.USVString(url);
      eventSourceInitDict = webidl.converters.EventSourceInitDict(eventSourceInitDict, prefix, "eventSourceInitDict");
      this.#dispatcher = eventSourceInitDict.dispatcher;
      this.#state = {
        lastEventId: "",
        reconnectionTime: defaultReconnectionTime
      };
      const settings = environmentSettingsObject;
      let urlRecord;
      try {
        urlRecord = new URL(url, settings.settingsObject.baseUrl);
        this.#state.origin = urlRecord.origin;
      } catch (e) {
        throw new DOMException(e, "SyntaxError");
      }
      this.#url = urlRecord.href;
      let corsAttributeState = ANONYMOUS;
      if (eventSourceInitDict.withCredentials === true) {
        corsAttributeState = USE_CREDENTIALS;
        this.#withCredentials = true;
      }
      const initRequest = {
        redirect: "follow",
        keepalive: true,
        mode: "cors",
        credentials: corsAttributeState === "anonymous" ? "same-origin" : "omit",
        referrer: "no-referrer"
      };
      initRequest.client = environmentSettingsObject.settingsObject;
      initRequest.headersList = [["accept", { name: "accept", value: "text/event-stream" }]];
      initRequest.cache = "no-store";
      initRequest.initiator = "other";
      initRequest.urlList = [new URL(this.#url)];
      this.#request = makeRequest(initRequest);
      this.#connect();
    }
    get readyState() {
      return this.#readyState;
    }
    get url() {
      return this.#url;
    }
    get withCredentials() {
      return this.#withCredentials;
    }
    #connect() {
      if (this.#readyState === CLOSED)
        return;
      this.#readyState = CONNECTING;
      const fetchParams = {
        request: this.#request,
        dispatcher: this.#dispatcher
      };
      const processEventSourceEndOfBody = (response) => {
        if (isNetworkError(response)) {
          this.dispatchEvent(new Event("error"));
          this.close();
        }
        this.#reconnect();
      };
      fetchParams.processResponseEndOfBody = processEventSourceEndOfBody;
      fetchParams.processResponse = (response) => {
        if (isNetworkError(response)) {
          if (response.aborted) {
            this.close();
            this.dispatchEvent(new Event("error"));
            return;
          } else {
            this.#reconnect();
            return;
          }
        }
        const contentType3 = response.headersList.get("content-type", true);
        const mimeType = contentType3 !== null ? parseMIMEType(contentType3) : "failure";
        const contentTypeValid = mimeType !== "failure" && mimeType.essence === "text/event-stream";
        if (response.status !== 200 || contentTypeValid === false) {
          this.close();
          this.dispatchEvent(new Event("error"));
          return;
        }
        this.#readyState = OPEN;
        this.dispatchEvent(new Event("open"));
        this.#state.origin = response.urlList[response.urlList.length - 1].origin;
        const eventSourceStream = new EventSourceStream({
          eventSourceSettings: this.#state,
          push: (event) => {
            this.dispatchEvent(createFastMessageEvent(event.type, event.options));
          }
        });
        pipeline(response.body.stream, eventSourceStream, (error) => {
          if (error?.aborted === false) {
            this.close();
            this.dispatchEvent(new Event("error"));
          }
        });
      };
      this.#controller = fetching(fetchParams);
    }
    async#reconnect() {
      if (this.#readyState === CLOSED)
        return;
      this.#readyState = CONNECTING;
      this.dispatchEvent(new Event("error"));
      await delay(this.#state.reconnectionTime);
      if (this.#readyState !== CONNECTING)
        return;
      if (this.#state.lastEventId.length) {
        this.#request.headersList.set("last-event-id", this.#state.lastEventId, true);
      }
      this.#connect();
    }
    close() {
      webidl.brandCheck(this, EventSource);
      if (this.#readyState === CLOSED)
        return;
      this.#readyState = CLOSED;
      this.#controller.abort();
      this.#request = null;
    }
    get onopen() {
      return this.#events.open;
    }
    set onopen(fn) {
      if (this.#events.open) {
        this.removeEventListener("open", this.#events.open);
      }
      if (typeof fn === "function") {
        this.#events.open = fn;
        this.addEventListener("open", fn);
      } else {
        this.#events.open = null;
      }
    }
    get onmessage() {
      return this.#events.message;
    }
    set onmessage(fn) {
      if (this.#events.message) {
        this.removeEventListener("message", this.#events.message);
      }
      if (typeof fn === "function") {
        this.#events.message = fn;
        this.addEventListener("message", fn);
      } else {
        this.#events.message = null;
      }
    }
    get onerror() {
      return this.#events.error;
    }
    set onerror(fn) {
      if (this.#events.error) {
        this.removeEventListener("error", this.#events.error);
      }
      if (typeof fn === "function") {
        this.#events.error = fn;
        this.addEventListener("error", fn);
      } else {
        this.#events.error = null;
      }
    }
  }
  var constantsPropertyDescriptors = {
    CONNECTING: {
      __proto__: null,
      configurable: false,
      enumerable: true,
      value: CONNECTING,
      writable: false
    },
    OPEN: {
      __proto__: null,
      configurable: false,
      enumerable: true,
      value: OPEN,
      writable: false
    },
    CLOSED: {
      __proto__: null,
      configurable: false,
      enumerable: true,
      value: CLOSED,
      writable: false
    }
  };
  Object.defineProperties(EventSource, constantsPropertyDescriptors);
  Object.defineProperties(EventSource.prototype, constantsPropertyDescriptors);
  Object.defineProperties(EventSource.prototype, {
    close: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onmessage: kEnumerableProperty,
    onopen: kEnumerableProperty,
    readyState: kEnumerableProperty,
    url: kEnumerableProperty,
    withCredentials: kEnumerableProperty
  });
  webidl.converters.EventSourceInitDict = webidl.dictionaryConverter([
    {
      key: "withCredentials",
      converter: webidl.converters.boolean,
      defaultValue: () => false
    },
    {
      key: "dispatcher",
      converter: webidl.converters.any
    }
  ]);
  module2.exports = {
    EventSource,
    defaultReconnectionTime
  };
});

// node_modules/undici/index.js
var require_undici = __commonJS((exports2, module2) => {
  var Client2 = require_client();
  var Dispatcher = require_dispatcher();
  var Pool = require_pool();
  var BalancedPool = require_balanced_pool();
  var Agent = require_agent();
  var ProxyAgent = require_proxy_agent();
  var EnvHttpProxyAgent = require_env_http_proxy_agent();
  var RetryAgent = require_retry_agent();
  var H2CClient = require_h2c_client();
  var errors = require_errors();
  var util2 = require_util();
  var { InvalidArgumentError } = errors;
  var api = require_api();
  var buildConnector = require_connect();
  var MockClient = require_mock_client();
  var { MockCallHistory, MockCallHistoryLog } = require_mock_call_history();
  var MockAgent = require_mock_agent();
  var MockPool = require_mock_pool();
  var mockErrors = require_mock_errors();
  var RetryHandler = require_retry_handler();
  var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();
  var DecoratorHandler = require_decorator_handler();
  var RedirectHandler = require_redirect_handler();
  Object.assign(Dispatcher.prototype, api);
  module2.exports.Dispatcher = Dispatcher;
  module2.exports.Client = Client2;
  module2.exports.Pool = Pool;
  module2.exports.BalancedPool = BalancedPool;
  module2.exports.Agent = Agent;
  module2.exports.ProxyAgent = ProxyAgent;
  module2.exports.EnvHttpProxyAgent = EnvHttpProxyAgent;
  module2.exports.RetryAgent = RetryAgent;
  module2.exports.H2CClient = H2CClient;
  module2.exports.RetryHandler = RetryHandler;
  module2.exports.DecoratorHandler = DecoratorHandler;
  module2.exports.RedirectHandler = RedirectHandler;
  module2.exports.interceptors = {
    redirect: require_redirect(),
    responseError: require_response_error(),
    retry: require_retry(),
    dump: require_dump(),
    dns: require_dns(),
    cache: require_cache2()
  };
  module2.exports.cacheStores = {
    MemoryCacheStore: require_memory_cache_store()
  };
  var SqliteCacheStore = require_sqlite_cache_store();
  module2.exports.cacheStores.SqliteCacheStore = SqliteCacheStore;
  module2.exports.buildConnector = buildConnector;
  module2.exports.errors = errors;
  module2.exports.util = {
    parseHeaders: util2.parseHeaders,
    headerNameToString: util2.headerNameToString
  };
  function makeDispatcher(fn) {
    return (url, opts, handler) => {
      if (typeof opts === "function") {
        handler = opts;
        opts = null;
      }
      if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) {
        throw new InvalidArgumentError("invalid url");
      }
      if (opts != null && typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (opts && opts.path != null) {
        if (typeof opts.path !== "string") {
          throw new InvalidArgumentError("invalid opts.path");
        }
        let path = opts.path;
        if (!opts.path.startsWith("/")) {
          path = `/${path}`;
        }
        url = new URL(util2.parseOrigin(url).origin + path);
      } else {
        if (!opts) {
          opts = typeof url === "object" ? url : {};
        }
        url = util2.parseURL(url);
      }
      const { agent, dispatcher = getGlobalDispatcher() } = opts;
      if (agent) {
        throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
      }
      return fn.call(dispatcher, {
        ...opts,
        origin: url.origin,
        path: url.search ? `${url.pathname}${url.search}` : url.pathname,
        method: opts.method || (opts.body ? "PUT" : "GET")
      }, handler);
    };
  }
  module2.exports.setGlobalDispatcher = setGlobalDispatcher;
  module2.exports.getGlobalDispatcher = getGlobalDispatcher;
  var fetchImpl = require_fetch().fetch;
  module2.exports.fetch = async function fetch(init, options = undefined) {
    try {
      return await fetchImpl(init, options);
    } catch (err2) {
      if (err2 && typeof err2 === "object") {
        Error.captureStackTrace(err2);
      }
      throw err2;
    }
  };
  module2.exports.Headers = require_headers().Headers;
  module2.exports.Response = require_response().Response;
  module2.exports.Request = require_request2().Request;
  module2.exports.FormData = require_formdata().FormData;
  var { setGlobalOrigin, getGlobalOrigin } = require_global();
  module2.exports.setGlobalOrigin = setGlobalOrigin;
  module2.exports.getGlobalOrigin = getGlobalOrigin;
  var { CacheStorage } = require_cachestorage();
  var { kConstruct } = require_symbols();
  module2.exports.caches = new CacheStorage(kConstruct);
  var { deleteCookie, getCookies, getSetCookies, setCookie, parseCookie } = require_cookies();
  module2.exports.deleteCookie = deleteCookie;
  module2.exports.getCookies = getCookies;
  module2.exports.getSetCookies = getSetCookies;
  module2.exports.setCookie = setCookie;
  module2.exports.parseCookie = parseCookie;
  var { parseMIMEType, serializeAMimeType } = require_data_url();
  module2.exports.parseMIMEType = parseMIMEType;
  module2.exports.serializeAMimeType = serializeAMimeType;
  var { CloseEvent, ErrorEvent, MessageEvent } = require_events();
  module2.exports.WebSocket = require_websocket().WebSocket;
  module2.exports.CloseEvent = CloseEvent;
  module2.exports.ErrorEvent = ErrorEvent;
  module2.exports.MessageEvent = MessageEvent;
  module2.exports.WebSocketStream = require_websocketstream().WebSocketStream;
  module2.exports.WebSocketError = require_websocketerror().WebSocketError;
  module2.exports.request = makeDispatcher(api.request);
  module2.exports.stream = makeDispatcher(api.stream);
  module2.exports.pipeline = makeDispatcher(api.pipeline);
  module2.exports.connect = makeDispatcher(api.connect);
  module2.exports.upgrade = makeDispatcher(api.upgrade);
  module2.exports.MockClient = MockClient;
  module2.exports.MockCallHistory = MockCallHistory;
  module2.exports.MockCallHistoryLog = MockCallHistoryLog;
  module2.exports.MockPool = MockPool;
  module2.exports.MockAgent = MockAgent;
  module2.exports.mockErrors = mockErrors;
  var { EventSource } = require_eventsource();
  module2.exports.EventSource = EventSource;
});

// node_modules/uri-templates/uri-templates.js
var require_uri_templates = __commonJS((exports2, module2) => {
  (function(global2, factory) {
    if (typeof define === "function" && define.amd) {
      define("uri-templates", [], factory);
    } else if (typeof module2 !== "undefined" && module2.exports) {
      module2.exports = factory();
    } else {
      global2.UriTemplate = factory();
    }
  })(exports2, function() {
    var uriTemplateGlobalModifiers = {
      "+": true,
      "#": true,
      ".": true,
      "/": true,
      ";": true,
      "?": true,
      "&": true
    };
    var uriTemplateSuffices = {
      "*": true
    };
    var urlEscapedChars = /[:/&?#]/;
    function notReallyPercentEncode(string) {
      return encodeURI(string).replace(/%25[0-9][0-9]/g, function(doubleEncoded) {
        return "%" + doubleEncoded.substring(3);
      });
    }
    function isPercentEncoded(string) {
      string = string.replace(/%../g, "");
      return encodeURIComponent(string) === string;
    }
    function uriTemplateSubstitution(spec) {
      var modifier = "";
      if (uriTemplateGlobalModifiers[spec.charAt(0)]) {
        modifier = spec.charAt(0);
        spec = spec.substring(1);
      }
      var separator = "";
      var prefix = "";
      var shouldEscape = true;
      var showVariables = false;
      var trimEmptyString = false;
      if (modifier == "+") {
        shouldEscape = false;
      } else if (modifier == ".") {
        prefix = ".";
        separator = ".";
      } else if (modifier == "/") {
        prefix = "/";
        separator = "/";
      } else if (modifier == "#") {
        prefix = "#";
        shouldEscape = false;
      } else if (modifier == ";") {
        prefix = ";";
        separator = ";", showVariables = true;
        trimEmptyString = true;
      } else if (modifier == "?") {
        prefix = "?";
        separator = "&", showVariables = true;
      } else if (modifier == "&") {
        prefix = "&";
        separator = "&", showVariables = true;
      }
      var varNames = [];
      var varList = spec.split(",");
      var varSpecs = [];
      var varSpecMap = {};
      for (var i2 = 0;i2 < varList.length; i2++) {
        var varName = varList[i2];
        var truncate = null;
        if (varName.indexOf(":") != -1) {
          var parts = varName.split(":");
          varName = parts[0];
          truncate = parseInt(parts[1]);
        }
        var suffices = {};
        while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {
          suffices[varName.charAt(varName.length - 1)] = true;
          varName = varName.substring(0, varName.length - 1);
        }
        var varSpec = {
          truncate,
          name: varName,
          suffices
        };
        varSpecs.push(varSpec);
        varSpecMap[varName] = varSpec;
        varNames.push(varName);
      }
      var subFunction = function(valueFunction) {
        var result2 = "";
        var startIndex = 0;
        for (var i3 = 0;i3 < varSpecs.length; i3++) {
          var varSpec2 = varSpecs[i3];
          var value = valueFunction(varSpec2.name);
          if (value == null || Array.isArray(value) && value.length == 0 || typeof value == "object" && Object.keys(value).length == 0) {
            startIndex++;
            continue;
          }
          if (i3 == startIndex) {
            result2 += prefix;
          } else {
            result2 += separator || ",";
          }
          if (Array.isArray(value)) {
            if (showVariables) {
              result2 += varSpec2.name + "=";
            }
            for (var j = 0;j < value.length; j++) {
              if (j > 0) {
                result2 += varSpec2.suffices["*"] ? separator || "," : ",";
                if (varSpec2.suffices["*"] && showVariables) {
                  result2 += varSpec2.name + "=";
                }
              }
              result2 += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);
            }
          } else if (typeof value == "object") {
            if (showVariables && !varSpec2.suffices["*"]) {
              result2 += varSpec2.name + "=";
            }
            var first = true;
            for (var key in value) {
              if (!first) {
                result2 += varSpec2.suffices["*"] ? separator || "," : ",";
              }
              first = false;
              result2 += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);
              result2 += varSpec2.suffices["*"] ? "=" : ",";
              result2 += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);
            }
          } else {
            if (showVariables) {
              result2 += varSpec2.name;
              if (!trimEmptyString || value != "") {
                result2 += "=";
              }
            }
            if (varSpec2.truncate != null) {
              value = value.substring(0, varSpec2.truncate);
            }
            result2 += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21") : notReallyPercentEncode(value);
          }
        }
        return result2;
      };
      var guessFunction = function(stringValue, resultObj, strict) {
        if (prefix) {
          stringValue = stringValue.substring(prefix.length);
        }
        if (varSpecs.length == 1 && varSpecs[0].suffices["*"]) {
          var varSpec2 = varSpecs[0];
          var varName2 = varSpec2.name;
          var arrayValue = varSpec2.suffices["*"] ? stringValue.split(separator || ",") : [stringValue];
          var hasEquals = shouldEscape && stringValue.indexOf("=") != -1;
          for (var i3 = 1;i3 < arrayValue.length; i3++) {
            var stringValue = arrayValue[i3];
            if (hasEquals && stringValue.indexOf("=") == -1) {
              arrayValue[i3 - 1] += (separator || ",") + stringValue;
              arrayValue.splice(i3, 1);
              i3--;
            }
          }
          for (var i3 = 0;i3 < arrayValue.length; i3++) {
            var stringValue = arrayValue[i3];
            if (shouldEscape && stringValue.indexOf("=") != -1) {
              hasEquals = true;
            }
            var innerArrayValue = stringValue.split(",");
            if (innerArrayValue.length == 1) {
              arrayValue[i3] = innerArrayValue[0];
            } else {
              arrayValue[i3] = innerArrayValue;
            }
          }
          if (showVariables || hasEquals) {
            var objectValue = resultObj[varName2] || {};
            for (var j = 0;j < arrayValue.length; j++) {
              var innerValue = stringValue;
              if (showVariables && !innerValue) {
                continue;
              }
              if (typeof arrayValue[j] == "string") {
                var stringValue = arrayValue[j];
                var innerVarName = stringValue.split("=", 1)[0];
                var stringValue = stringValue.substring(innerVarName.length + 1);
                if (shouldEscape) {
                  if (strict && !isPercentEncoded(stringValue)) {
                    return;
                  }
                  stringValue = decodeURIComponent(stringValue);
                }
                innerValue = stringValue;
              } else {
                var stringValue = arrayValue[j][0];
                var innerVarName = stringValue.split("=", 1)[0];
                var stringValue = stringValue.substring(innerVarName.length + 1);
                if (shouldEscape) {
                  if (strict && !isPercentEncoded(stringValue)) {
                    return;
                  }
                  stringValue = decodeURIComponent(stringValue);
                }
                arrayValue[j][0] = stringValue;
                innerValue = arrayValue[j];
              }
              if (shouldEscape) {
                if (strict && !isPercentEncoded(innerVarName)) {
                  return;
                }
                innerVarName = decodeURIComponent(innerVarName);
              }
              if (objectValue[innerVarName] !== undefined) {
                if (Array.isArray(objectValue[innerVarName])) {
                  objectValue[innerVarName].push(innerValue);
                } else {
                  objectValue[innerVarName] = [objectValue[innerVarName], innerValue];
                }
              } else {
                objectValue[innerVarName] = innerValue;
              }
            }
            if (Object.keys(objectValue).length == 1 && objectValue[varName2] !== undefined) {
              resultObj[varName2] = objectValue[varName2];
            } else {
              resultObj[varName2] = objectValue;
            }
          } else {
            if (shouldEscape) {
              for (var j = 0;j < arrayValue.length; j++) {
                var innerArrayValue = arrayValue[j];
                if (Array.isArray(innerArrayValue)) {
                  for (var k = 0;k < innerArrayValue.length; k++) {
                    if (strict && !isPercentEncoded(innerArrayValue[k])) {
                      return;
                    }
                    innerArrayValue[k] = decodeURIComponent(innerArrayValue[k]);
                  }
                } else {
                  if (strict && !isPercentEncoded(innerArrayValue)) {
                    return;
                  }
                  arrayValue[j] = decodeURIComponent(innerArrayValue);
                }
              }
            }
            if (resultObj[varName2] !== undefined) {
              if (Array.isArray(resultObj[varName2])) {
                resultObj[varName2] = resultObj[varName2].concat(arrayValue);
              } else {
                resultObj[varName2] = [resultObj[varName2]].concat(arrayValue);
              }
            } else {
              if (arrayValue.length == 1 && !varSpec2.suffices["*"]) {
                resultObj[varName2] = arrayValue[0];
              } else {
                resultObj[varName2] = arrayValue;
              }
            }
          }
        } else {
          var arrayValue = varSpecs.length == 1 ? [stringValue] : stringValue.split(separator || ",");
          var specIndexMap = {};
          for (var i3 = 0;i3 < arrayValue.length; i3++) {
            var firstStarred = 0;
            for (;firstStarred < varSpecs.length - 1 && firstStarred < i3; firstStarred++) {
              if (varSpecs[firstStarred].suffices["*"]) {
                break;
              }
            }
            if (firstStarred == i3) {
              specIndexMap[i3] = i3;
              continue;
            } else {
              for (var lastStarred = varSpecs.length - 1;lastStarred > 0 && varSpecs.length - lastStarred < arrayValue.length - i3; lastStarred--) {
                if (varSpecs[lastStarred].suffices["*"]) {
                  break;
                }
              }
              if (varSpecs.length - lastStarred == arrayValue.length - i3) {
                specIndexMap[i3] = lastStarred;
                continue;
              }
            }
            specIndexMap[i3] = firstStarred;
          }
          for (var i3 = 0;i3 < arrayValue.length; i3++) {
            var stringValue = arrayValue[i3];
            if (!stringValue && showVariables) {
              continue;
            }
            var innerArrayValue = stringValue.split(",");
            var hasEquals = false;
            if (showVariables) {
              var stringValue = innerArrayValue[0];
              var varName2 = stringValue.split("=", 1)[0];
              var stringValue = stringValue.substring(varName2.length + 1);
              innerArrayValue[0] = stringValue;
              var varSpec2 = varSpecMap[varName2] || varSpecs[0];
            } else {
              var varSpec2 = varSpecs[specIndexMap[i3]];
              var varName2 = varSpec2.name;
            }
            for (var j = 0;j < innerArrayValue.length; j++) {
              if (shouldEscape) {
                if (strict && !isPercentEncoded(innerArrayValue[j])) {
                  return;
                }
                innerArrayValue[j] = decodeURIComponent(innerArrayValue[j]);
              }
            }
            if ((showVariables || varSpec2.suffices["*"]) && resultObj[varName2] !== undefined) {
              if (Array.isArray(resultObj[varName2])) {
                resultObj[varName2] = resultObj[varName2].concat(innerArrayValue);
              } else {
                resultObj[varName2] = [resultObj[varName2]].concat(innerArrayValue);
              }
            } else {
              if (innerArrayValue.length == 1 && !varSpec2.suffices["*"]) {
                resultObj[varName2] = innerArrayValue[0];
              } else {
                resultObj[varName2] = innerArrayValue;
              }
            }
          }
        }
        return 1;
      };
      return {
        varNames,
        prefix,
        substitution: subFunction,
        unSubstitution: guessFunction
      };
    }
    function UriTemplate(template) {
      if (!(this instanceof UriTemplate)) {
        return new UriTemplate(template);
      }
      var parts = template.split("{");
      var textParts = [parts.shift()];
      var prefixes = [];
      var substitutions = [];
      var unSubstitutions = [];
      var varNames = [];
      while (parts.length > 0) {
        var part = parts.shift();
        var spec = part.split("}")[0];
        var remainder = part.substring(spec.length + 1);
        var funcs = uriTemplateSubstitution(spec);
        substitutions.push(funcs.substitution);
        unSubstitutions.push(funcs.unSubstitution);
        prefixes.push(funcs.prefix);
        textParts.push(remainder);
        varNames = varNames.concat(funcs.varNames);
      }
      this.fill = function(valueFunction) {
        if (valueFunction && typeof valueFunction !== "function") {
          var value = valueFunction;
          valueFunction = function(varName) {
            return value[varName];
          };
        }
        var result2 = textParts[0];
        for (var i2 = 0;i2 < substitutions.length; i2++) {
          var substitution = substitutions[i2];
          result2 += substitution(valueFunction);
          result2 += textParts[i2 + 1];
        }
        return result2;
      };
      this.fromUri = function(substituted, options) {
        options = options || {};
        var result2 = {};
        for (var i2 = 0;i2 < textParts.length; i2++) {
          var part2 = textParts[i2];
          if (substituted.substring(0, part2.length) !== part2) {
            return;
          }
          substituted = substituted.substring(part2.length);
          if (i2 >= textParts.length - 1) {
            if (substituted == "") {
              break;
            } else {
              return;
            }
          }
          var prefix = prefixes[i2];
          if (prefix && substituted.substring(0, prefix.length) !== prefix) {
            continue;
          }
          var nextPart = textParts[i2 + 1];
          var offset = i2;
          while (true) {
            if (offset == textParts.length - 2) {
              var endPart = substituted.substring(substituted.length - nextPart.length);
              if (endPart !== nextPart) {
                return;
              }
              var stringValue = substituted.substring(0, substituted.length - nextPart.length);
              substituted = endPart;
            } else if (nextPart) {
              var nextPartPos = substituted.indexOf(nextPart);
              var stringValue = substituted.substring(0, nextPartPos);
              substituted = substituted.substring(nextPartPos);
            } else if (prefixes[offset + 1]) {
              var nextPartPos = substituted.indexOf(prefixes[offset + 1]);
              if (nextPartPos === -1)
                nextPartPos = substituted.length;
              var stringValue = substituted.substring(0, nextPartPos);
              substituted = substituted.substring(nextPartPos);
            } else if (textParts.length > offset + 2) {
              offset++;
              nextPart = textParts[offset + 1];
              continue;
            } else {
              var stringValue = substituted;
              substituted = "";
            }
            break;
          }
          if (!unSubstitutions[i2](stringValue, result2, options.strict)) {
            return;
          }
        }
        return result2;
      };
      this.varNames = varNames;
      this.template = template;
    }
    UriTemplate.prototype = {
      toString: function() {
        return this.template;
      },
      fillFromObject: function(obj) {
        return this.fill(obj);
      },
      test: function(uri, options) {
        return !!this.fromUri(uri, options);
      }
    };
    return UriTemplate;
  });
});

// node_modules/xsschema/dist/arktype-C-GObzDh.js
var exports_arktype_C_GObzDh = {};
__export(exports_arktype_C_GObzDh, {
  getToJsonSchemaFn: () => getToJsonSchemaFn
});
var getToJsonSchemaFn = async () => (schema) => schema.toJsonSchema();
var init_arktype_C_GObzDh = () => {};

// node_modules/effect/dist/esm/Function.js
var exports_Function = {};
__export(exports_Function, {
  untupled: () => untupled,
  unsafeCoerce: () => unsafeCoerce,
  tupled: () => tupled,
  satisfies: () => satisfies,
  pipe: () => pipe,
  isFunction: () => isFunction,
  identity: () => identity,
  hole: () => hole,
  flow: () => flow,
  flip: () => flip,
  dual: () => dual,
  constant: () => constant,
  constVoid: () => constVoid,
  constUndefined: () => constUndefined,
  constTrue: () => constTrue,
  constNull: () => constNull,
  constFalse: () => constFalse,
  compose: () => compose,
  apply: () => apply,
  absurd: () => absurd,
  SK: () => SK
});
function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {
  switch (arguments.length) {
    case 1:
      return a;
    case 2:
      return ab(a);
    case 3:
      return bc(ab(a));
    case 4:
      return cd(bc(ab(a)));
    case 5:
      return de(cd(bc(ab(a))));
    case 6:
      return ef(de(cd(bc(ab(a)))));
    case 7:
      return fg(ef(de(cd(bc(ab(a))))));
    case 8:
      return gh(fg(ef(de(cd(bc(ab(a)))))));
    case 9:
      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
    default: {
      let ret = arguments[0];
      for (let i2 = 1;i2 < arguments.length; i2++) {
        ret = arguments[i2](ret);
      }
      return ret;
    }
  }
}
function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
  switch (arguments.length) {
    case 1:
      return ab;
    case 2:
      return function() {
        return bc(ab.apply(this, arguments));
      };
    case 3:
      return function() {
        return cd(bc(ab.apply(this, arguments)));
      };
    case 4:
      return function() {
        return de(cd(bc(ab.apply(this, arguments))));
      };
    case 5:
      return function() {
        return ef(de(cd(bc(ab.apply(this, arguments)))));
      };
    case 6:
      return function() {
        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
      };
    case 7:
      return function() {
        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
      };
    case 8:
      return function() {
        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
      };
    case 9:
      return function() {
        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
      };
  }
  return;
}
var isFunction = (input) => typeof input === "function", dual = function(arity, body) {
  if (typeof arity === "function") {
    return function() {
      if (arity(arguments)) {
        return body.apply(this, arguments);
      }
      return (self) => body(self, ...arguments);
    };
  }
  switch (arity) {
    case 0:
    case 1:
      throw new RangeError(`Invalid arity ${arity}`);
    case 2:
      return function(a, b) {
        if (arguments.length >= 2) {
          return body(a, b);
        }
        return function(self) {
          return body(self, a);
        };
      };
    case 3:
      return function(a, b, c) {
        if (arguments.length >= 3) {
          return body(a, b, c);
        }
        return function(self) {
          return body(self, a, b);
        };
      };
    case 4:
      return function(a, b, c, d) {
        if (arguments.length >= 4) {
          return body(a, b, c, d);
        }
        return function(self) {
          return body(self, a, b, c);
        };
      };
    case 5:
      return function(a, b, c, d, e) {
        if (arguments.length >= 5) {
          return body(a, b, c, d, e);
        }
        return function(self) {
          return body(self, a, b, c, d);
        };
      };
    default:
      return function() {
        if (arguments.length >= arity) {
          return body.apply(this, arguments);
        }
        const args = arguments;
        return function(self) {
          return body(self, ...args);
        };
      };
  }
}, apply = (a) => (self) => self(a), identity = (a) => a, satisfies = () => (b) => b, unsafeCoerce, constant = (value) => () => value, constTrue, constFalse, constNull, constUndefined, constVoid, flip = (f) => (...b) => (...a) => f(...a)(...b), compose, absurd = (_) => {
  throw new Error("Called `absurd` function which should be uncallable");
}, tupled = (f) => (a) => f(...a), untupled = (f) => (...a) => f(a), hole, SK = (_, b) => b;
var init_Function = __esm(() => {
  unsafeCoerce = identity;
  constTrue = /* @__PURE__ */ constant(true);
  constFalse = /* @__PURE__ */ constant(false);
  constNull = /* @__PURE__ */ constant(null);
  constUndefined = /* @__PURE__ */ constant(undefined);
  constVoid = constUndefined;
  compose = /* @__PURE__ */ dual(2, (ab, bc) => (a) => bc(ab(a)));
  hole = /* @__PURE__ */ unsafeCoerce(absurd);
});

// node_modules/effect/dist/esm/Equivalence.js
var exports_Equivalence = {};
__export(exports_Equivalence, {
  tuple: () => tuple,
  symbol: () => symbol,
  struct: () => struct,
  string: () => string,
  strict: () => strict,
  productMany: () => productMany,
  product: () => product,
  number: () => number,
  mapInput: () => mapInput,
  make: () => make,
  combineMany: () => combineMany,
  combineAll: () => combineAll,
  combine: () => combine,
  boolean: () => boolean,
  bigint: () => bigint,
  array: () => array,
  all: () => all,
  Date: () => Date2
});
var make = (isEquivalent) => (self, that) => self === that || isEquivalent(self, that), isStrictEquivalent = (x2, y) => x2 === y, strict = () => isStrictEquivalent, string, number, boolean, bigint, symbol, combine, combineMany, isAlwaysEquivalent = (_x, _y) => true, combineAll = (collection) => combineMany(isAlwaysEquivalent, collection), mapInput, Date2, product, all = (collection) => {
  return make((x2, y) => {
    const len = Math.min(x2.length, y.length);
    let collectionLength = 0;
    for (const equivalence of collection) {
      if (collectionLength >= len) {
        break;
      }
      if (!equivalence(x2[collectionLength], y[collectionLength])) {
        return false;
      }
      collectionLength++;
    }
    return true;
  });
}, productMany = (self, collection) => {
  const equivalence = all(collection);
  return make((x2, y) => !self(x2[0], y[0]) ? false : equivalence(x2.slice(1), y.slice(1)));
}, tuple = (...elements) => all(elements), array = (item) => make((self, that) => {
  if (self.length !== that.length) {
    return false;
  }
  for (let i2 = 0;i2 < self.length; i2++) {
    const isEq = item(self[i2], that[i2]);
    if (!isEq) {
      return false;
    }
  }
  return true;
}), struct = (fields) => {
  const keys = Object.keys(fields);
  return make((self, that) => {
    for (const key of keys) {
      if (!fields[key](self[key], that[key])) {
        return false;
      }
    }
    return true;
  });
};
var init_Equivalence = __esm(() => {
  init_Function();
  string = /* @__PURE__ */ strict();
  number = /* @__PURE__ */ strict();
  boolean = /* @__PURE__ */ strict();
  bigint = /* @__PURE__ */ strict();
  symbol = /* @__PURE__ */ strict();
  combine = /* @__PURE__ */ dual(2, (self, that) => make((x2, y) => self(x2, y) && that(x2, y)));
  combineMany = /* @__PURE__ */ dual(2, (self, collection) => make((x2, y) => {
    if (!self(x2, y)) {
      return false;
    }
    for (const equivalence of collection) {
      if (!equivalence(x2, y)) {
        return false;
      }
    }
    return true;
  }));
  mapInput = /* @__PURE__ */ dual(2, (self, f) => make((x2, y) => self(f(x2), f(y))));
  Date2 = /* @__PURE__ */ mapInput(number, (date) => date.getTime());
  product = /* @__PURE__ */ dual(2, (self, that) => make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb)));
});

// node_modules/effect/dist/esm/internal/doNotation.js
var let_ = (map) => dual(3, (self, name, f) => map(self, (a) => Object.assign({}, a, {
  [name]: f(a)
}))), bindTo = (map) => dual(2, (self, name) => map(self, (a) => ({
  [name]: a
}))), bind = (map, flatMap) => dual(3, (self, name, f) => flatMap(self, (a) => map(f(a), (b) => Object.assign({}, a, {
  [name]: b
}))));
var init_doNotation = __esm(() => {
  init_Function();
});

// node_modules/effect/dist/esm/internal/version.js
var moduleVersion = "3.14.14", getCurrentVersion = () => moduleVersion, setCurrentVersion = (version) => {
  moduleVersion = version;
};

// node_modules/effect/dist/esm/GlobalValue.js
var exports_GlobalValue = {};
__export(exports_GlobalValue, {
  globalValue: () => globalValue
});
var globalStoreId, globalStore, globalValue = (id, compute) => {
  if (!globalStore) {
    globalThis[globalStoreId] ??= new Map;
    globalStore = globalThis[globalStoreId];
  }
  if (!globalStore.has(id)) {
    globalStore.set(id, compute());
  }
  return globalStore.get(id);
};
var init_GlobalValue = __esm(() => {
  globalStoreId = `effect/GlobalValue/globalStoreId/${/* @__PURE__ */ getCurrentVersion()}`;
});

// node_modules/effect/dist/esm/Predicate.js
var exports_Predicate = {};
__export(exports_Predicate, {
  xor: () => xor,
  tuple: () => tuple2,
  struct: () => struct2,
  some: () => some,
  productMany: () => productMany2,
  product: () => product2,
  or: () => or,
  not: () => not,
  nor: () => nor,
  nand: () => nand,
  mapInput: () => mapInput2,
  isUnknown: () => isUnknown,
  isUndefined: () => isUndefined,
  isUint8Array: () => isUint8Array,
  isTupleOfAtLeast: () => isTupleOfAtLeast,
  isTupleOf: () => isTupleOf,
  isTruthy: () => isTruthy,
  isTagged: () => isTagged,
  isSymbol: () => isSymbol,
  isString: () => isString2,
  isSet: () => isSet,
  isRegExp: () => isRegExp,
  isRecordOrArray: () => isRecordOrArray,
  isRecord: () => isRecord,
  isReadonlyRecord: () => isReadonlyRecord,
  isPropertyKey: () => isPropertyKey,
  isPromiseLike: () => isPromiseLike,
  isPromise: () => isPromise,
  isObject: () => isObject2,
  isNumber: () => isNumber2,
  isNullable: () => isNullable,
  isNull: () => isNull,
  isNotUndefined: () => isNotUndefined,
  isNotNullable: () => isNotNullable,
  isNotNull: () => isNotNull,
  isNever: () => isNever,
  isMap: () => isMap,
  isIterable: () => isIterable,
  isFunction: () => isFunction2,
  isError: () => isError,
  isDate: () => isDate,
  isBoolean: () => isBoolean2,
  isBigInt: () => isBigInt,
  implies: () => implies,
  hasProperty: () => hasProperty,
  every: () => every,
  eqv: () => eqv,
  compose: () => compose2,
  and: () => and,
  all: () => all2
});
var mapInput2, isTupleOf, isTupleOfAtLeast, isTruthy = (input) => !!input, isSet = (input) => input instanceof Set, isMap = (input) => input instanceof Map, isString2 = (input) => typeof input === "string", isNumber2 = (input) => typeof input === "number", isBoolean2 = (input) => typeof input === "boolean", isBigInt = (input) => typeof input === "bigint", isSymbol = (input) => typeof input === "symbol", isPropertyKey = (u) => isString2(u) || isNumber2(u) || isSymbol(u), isFunction2, isUndefined = (input) => input === undefined, isNotUndefined = (input) => input !== undefined, isNull = (input) => input === null, isNotNull = (input) => input !== null, isNever = (_) => false, isUnknown = (_) => true, isRecordOrArray = (input) => typeof input === "object" && input !== null, isObject2 = (input) => isRecordOrArray(input) || isFunction2(input), hasProperty, isTagged, isNullable = (input) => input === null || input === undefined, isNotNullable = (input) => input !== null && input !== undefined, isError = (input) => input instanceof Error, isUint8Array = (input) => input instanceof Uint8Array, isDate = (input) => input instanceof Date, isIterable = (input) => hasProperty(input, Symbol.iterator), isRecord = (input) => isRecordOrArray(input) && !Array.isArray(input), isReadonlyRecord, isPromise = (input) => hasProperty(input, "then") && ("catch" in input) && isFunction2(input.then) && isFunction2(input.catch), isPromiseLike = (input) => hasProperty(input, "then") && isFunction2(input.then), isRegExp = (input) => input instanceof RegExp, compose2, product2 = (self, that) => ([a, b]) => self(a) && that(b), all2 = (collection) => {
  return (as) => {
    let collectionIndex = 0;
    for (const p of collection) {
      if (collectionIndex >= as.length) {
        break;
      }
      if (p(as[collectionIndex]) === false) {
        return false;
      }
      collectionIndex++;
    }
    return true;
  };
}, productMany2 = (self, collection) => {
  const rest = all2(collection);
  return ([head, ...tail]) => self(head) === false ? false : rest(tail);
}, tuple2 = (...elements) => all2(elements), struct2 = (fields) => {
  const keys = Object.keys(fields);
  return (a) => {
    for (const key of keys) {
      if (!fields[key](a[key])) {
        return false;
      }
    }
    return true;
  };
}, not = (self) => (a) => !self(a), or, and, xor, eqv, implies, nor, nand, every = (collection) => (a) => {
  for (const p of collection) {
    if (!p(a)) {
      return false;
    }
  }
  return true;
}, some = (collection) => (a) => {
  for (const p of collection) {
    if (p(a)) {
      return true;
    }
  }
  return false;
};
var init_Predicate = __esm(() => {
  init_Function();
  mapInput2 = /* @__PURE__ */ dual(2, (self, f) => (b) => self(f(b)));
  isTupleOf = /* @__PURE__ */ dual(2, (self, n) => self.length === n);
  isTupleOfAtLeast = /* @__PURE__ */ dual(2, (self, n) => self.length >= n);
  isFunction2 = isFunction;
  hasProperty = /* @__PURE__ */ dual(2, (self, property) => isObject2(self) && (property in self));
  isTagged = /* @__PURE__ */ dual(2, (self, tag) => hasProperty(self, "_tag") && self["_tag"] === tag);
  isReadonlyRecord = isRecord;
  compose2 = /* @__PURE__ */ dual(2, (ab, bc) => (a) => ab(a) && bc(a));
  or = /* @__PURE__ */ dual(2, (self, that) => (a) => self(a) || that(a));
  and = /* @__PURE__ */ dual(2, (self, that) => (a) => self(a) && that(a));
  xor = /* @__PURE__ */ dual(2, (self, that) => (a) => self(a) !== that(a));
  eqv = /* @__PURE__ */ dual(2, (self, that) => (a) => self(a) === that(a));
  implies = /* @__PURE__ */ dual(2, (antecedent, consequent) => (a) => antecedent(a) ? consequent(a) : true);
  nor = /* @__PURE__ */ dual(2, (self, that) => (a) => !(self(a) || that(a)));
  nand = /* @__PURE__ */ dual(2, (self, that) => (a) => !(self(a) && that(a)));
});

// node_modules/effect/dist/esm/internal/errors.js
var getBugErrorMessage = (message) => `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`;

// node_modules/effect/dist/esm/Utils.js
var exports_Utils = {};
__export(exports_Utils, {
  yieldWrapGet: () => yieldWrapGet,
  structuralRegionState: () => structuralRegionState,
  structuralRegion: () => structuralRegion,
  makeGenKind: () => makeGenKind,
  isGeneratorFunction: () => isGeneratorFunction,
  isGenKind: () => isGenKind,
  internalCall: () => internalCall,
  adapter: () => adapter,
  YieldWrapTypeId: () => YieldWrapTypeId,
  YieldWrap: () => YieldWrap,
  SingleShotGen: () => SingleShotGen,
  PCGRandom: () => PCGRandom,
  GenKindTypeId: () => GenKindTypeId,
  GenKindImpl: () => GenKindImpl
});

class PCGRandom {
  _state;
  constructor(seedHi, seedLo, incHi, incLo) {
    if (isNullable(seedLo) && isNullable(seedHi)) {
      seedLo = Math.random() * 4294967295 >>> 0;
      seedHi = 0;
    } else if (isNullable(seedLo)) {
      seedLo = seedHi;
      seedHi = 0;
    }
    if (isNullable(incLo) && isNullable(incHi)) {
      incLo = this._state ? this._state[3] : defaultIncLo;
      incHi = this._state ? this._state[2] : defaultIncHi;
    } else if (isNullable(incLo)) {
      incLo = incHi;
      incHi = 0;
    }
    this._state = new Int32Array([0, 0, incHi >>> 0, ((incLo || 0) | 1) >>> 0]);
    this._next();
    add64(this._state, this._state[0], this._state[1], seedHi >>> 0, seedLo >>> 0);
    this._next();
    return this;
  }
  getState() {
    return [this._state[0], this._state[1], this._state[2], this._state[3]];
  }
  setState(state) {
    this._state[0] = state[0];
    this._state[1] = state[1];
    this._state[2] = state[2];
    this._state[3] = state[3] | 1;
  }
  integer(max2) {
    return Math.round(this.number() * Number.MAX_SAFE_INTEGER) % max2;
  }
  number() {
    const hi = (this._next() & 67108863) * 1;
    const lo = (this._next() & 134217727) * 1;
    return (hi * BIT_27 + lo) / BIT_53;
  }
  _next() {
    const oldHi = this._state[0] >>> 0;
    const oldLo = this._state[1] >>> 0;
    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO);
    add64(this._state, this._state[0], this._state[1], this._state[2], this._state[3]);
    let xsHi = oldHi >>> 18;
    let xsLo = (oldLo >>> 18 | oldHi << 14) >>> 0;
    xsHi = (xsHi ^ oldHi) >>> 0;
    xsLo = (xsLo ^ oldLo) >>> 0;
    const xorshifted = (xsLo >>> 27 | xsHi << 5) >>> 0;
    const rot = oldHi >>> 27;
    const rot2 = (-rot >>> 0 & 31) >>> 0;
    return (xorshifted >>> rot | xorshifted << rot2) >>> 0;
  }
}
function mul64(out, aHi, aLo, bHi, bLo) {
  let c1 = (aLo >>> 16) * (bLo & 65535) >>> 0;
  let c0 = (aLo & 65535) * (bLo >>> 16) >>> 0;
  let lo = (aLo & 65535) * (bLo & 65535) >>> 0;
  let hi = (aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16)) >>> 0;
  c0 = c0 << 16 >>> 0;
  lo = lo + c0 >>> 0;
  if (lo >>> 0 < c0 >>> 0) {
    hi = hi + 1 >>> 0;
  }
  c1 = c1 << 16 >>> 0;
  lo = lo + c1 >>> 0;
  if (lo >>> 0 < c1 >>> 0) {
    hi = hi + 1 >>> 0;
  }
  hi = hi + Math.imul(aLo, bHi) >>> 0;
  hi = hi + Math.imul(aHi, bLo) >>> 0;
  out[0] = hi;
  out[1] = lo;
}
function add64(out, aHi, aLo, bHi, bLo) {
  let hi = aHi + bHi >>> 0;
  const lo = aLo + bLo >>> 0;
  if (lo >>> 0 < aLo >>> 0) {
    hi = hi + 1 | 0;
  }
  out[0] = hi;
  out[1] = lo;
}
function yieldWrapGet(self) {
  if (typeof self === "object" && self !== null && YieldWrapTypeId in self) {
    return self[YieldWrapTypeId]();
  }
  throw new Error(getBugErrorMessage("yieldWrapGet"));
}
var GenKindTypeId, isGenKind = (u) => isObject2(u) && (GenKindTypeId in u), GenKindImpl, SingleShotGen, makeGenKind = (kind) => new GenKindImpl(kind), adapter = () => function() {
  let x2 = arguments[0];
  for (let i2 = 1;i2 < arguments.length; i2++) {
    x2 = arguments[i2](x2);
  }
  return new GenKindImpl(x2);
}, defaultIncHi = 335903614, defaultIncLo = 4150755663, MUL_HI, MUL_LO, BIT_53 = 9007199254740992, BIT_27 = 134217728, YieldWrapTypeId, YieldWrap, structuralRegionState, structuralRegion = (body, tester) => {
  const current = structuralRegionState.enabled;
  const currentTester = structuralRegionState.tester;
  structuralRegionState.enabled = true;
  if (tester) {
    structuralRegionState.tester = tester;
  }
  try {
    return body();
  } finally {
    structuralRegionState.enabled = current;
    structuralRegionState.tester = currentTester;
  }
}, tracingFunction = (name) => {
  const wrap = {
    [name](body) {
      return body();
    }
  };
  return function(fn) {
    return wrap[name](fn);
  };
}, internalCall, genConstructor, isGeneratorFunction = (u) => isObject2(u) && u.constructor === genConstructor;
var init_Utils = __esm(() => {
  init_Function();
  init_GlobalValue();
  init_Predicate();
  GenKindTypeId = /* @__PURE__ */ Symbol.for("effect/Gen/GenKind");
  GenKindImpl = class GenKindImpl {
    value;
    constructor(value) {
      this.value = value;
    }
    get _F() {
      return identity;
    }
    get _R() {
      return (_) => _;
    }
    get _O() {
      return (_) => _;
    }
    get _E() {
      return (_) => _;
    }
    [GenKindTypeId] = GenKindTypeId;
    [Symbol.iterator]() {
      return new SingleShotGen(this);
    }
  };
  SingleShotGen = class SingleShotGen {
    self;
    called = false;
    constructor(self) {
      this.self = self;
    }
    next(a) {
      return this.called ? {
        value: a,
        done: true
      } : (this.called = true, {
        value: this.self,
        done: false
      });
    }
    return(a) {
      return {
        value: a,
        done: true
      };
    }
    throw(e) {
      throw e;
    }
    [Symbol.iterator]() {
      return new SingleShotGen(this.self);
    }
  };
  MUL_HI = 1481765933 >>> 0;
  MUL_LO = 1284865837 >>> 0;
  YieldWrapTypeId = /* @__PURE__ */ Symbol.for("effect/Utils/YieldWrap");
  YieldWrap = class YieldWrap {
    #value;
    constructor(value) {
      this.#value = value;
    }
    [YieldWrapTypeId]() {
      return this.#value;
    }
  };
  structuralRegionState = /* @__PURE__ */ globalValue("effect/Utils/isStructuralRegion", () => ({
    enabled: false,
    tester: undefined
  }));
  internalCall = /* @__PURE__ */ tracingFunction("effect_internal_function");
  genConstructor = function* () {}.constructor;
});

// node_modules/effect/dist/esm/Hash.js
var exports_Hash = {};
__export(exports_Hash, {
  symbol: () => symbol2,
  structureKeys: () => structureKeys,
  structure: () => structure,
  string: () => string2,
  random: () => random,
  optimize: () => optimize,
  number: () => number2,
  isHash: () => isHash,
  hash: () => hash,
  combine: () => combine2,
  cached: () => cached,
  array: () => array2
});
var randomHashCache, symbol2, hash = (self) => {
  if (structuralRegionState.enabled === true) {
    return 0;
  }
  switch (typeof self) {
    case "number":
      return number2(self);
    case "bigint":
      return string2(self.toString(10));
    case "boolean":
      return string2(String(self));
    case "symbol":
      return string2(String(self));
    case "string":
      return string2(self);
    case "undefined":
      return string2("undefined");
    case "function":
    case "object": {
      if (self === null) {
        return string2("null");
      } else if (self instanceof Date) {
        return hash(self.toISOString());
      } else if (self instanceof URL) {
        return hash(self.href);
      } else if (isHash(self)) {
        return self[symbol2]();
      } else {
        return random(self);
      }
    }
    default:
      throw new Error(`BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`);
  }
}, random = (self) => {
  if (!randomHashCache.has(self)) {
    randomHashCache.set(self, number2(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)));
  }
  return randomHashCache.get(self);
}, combine2 = (b) => (self) => self * 53 ^ b, optimize = (n) => n & 3221225471 | n >>> 1 & 1073741824, isHash = (u) => hasProperty(u, symbol2), number2 = (n) => {
  if (n !== n || n === Infinity) {
    return 0;
  }
  let h = n | 0;
  if (h !== n) {
    h ^= n * 4294967295;
  }
  while (n > 4294967295) {
    h ^= n /= 4294967295;
  }
  return optimize(h);
}, string2 = (str) => {
  let h = 5381, i2 = str.length;
  while (i2) {
    h = h * 33 ^ str.charCodeAt(--i2);
  }
  return optimize(h);
}, structureKeys = (o, keys) => {
  let h = 12289;
  for (let i2 = 0;i2 < keys.length; i2++) {
    h ^= pipe(string2(keys[i2]), combine2(hash(o[keys[i2]])));
  }
  return optimize(h);
}, structure = (o) => structureKeys(o, Object.keys(o)), array2 = (arr) => {
  let h = 6151;
  for (let i2 = 0;i2 < arr.length; i2++) {
    h = pipe(h, combine2(hash(arr[i2])));
  }
  return optimize(h);
}, cached = function() {
  if (arguments.length === 1) {
    const self2 = arguments[0];
    return function(hash3) {
      Object.defineProperty(self2, symbol2, {
        value() {
          return hash3;
        },
        enumerable: false
      });
      return hash3;
    };
  }
  const self = arguments[0];
  const hash2 = arguments[1];
  Object.defineProperty(self, symbol2, {
    value() {
      return hash2;
    },
    enumerable: false
  });
  return hash2;
};
var init_Hash = __esm(() => {
  init_Function();
  init_GlobalValue();
  init_Predicate();
  init_Utils();
  randomHashCache = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Hash/randomHashCache"), () => new WeakMap);
  symbol2 = /* @__PURE__ */ Symbol.for("effect/Hash");
});

// node_modules/effect/dist/esm/Equal.js
var exports_Equal = {};
__export(exports_Equal, {
  symbol: () => symbol3,
  isEqual: () => isEqual,
  equivalence: () => equivalence,
  equals: () => equals
});
function equals() {
  if (arguments.length === 1) {
    return (self) => compareBoth(self, arguments[0]);
  }
  return compareBoth(arguments[0], arguments[1]);
}
function compareBoth(self, that) {
  if (self === that) {
    return true;
  }
  const selfType = typeof self;
  if (selfType !== typeof that) {
    return false;
  }
  if (selfType === "object" || selfType === "function") {
    if (self !== null && that !== null) {
      if (isEqual(self) && isEqual(that)) {
        if (hash(self) === hash(that) && self[symbol3](that)) {
          return true;
        } else {
          return structuralRegionState.enabled && structuralRegionState.tester ? structuralRegionState.tester(self, that) : false;
        }
      } else if (self instanceof Date && that instanceof Date) {
        return self.toISOString() === that.toISOString();
      } else if (self instanceof URL && that instanceof URL) {
        return self.href === that.href;
      }
    }
    if (structuralRegionState.enabled) {
      if (Array.isArray(self) && Array.isArray(that)) {
        return self.length === that.length && self.every((v, i2) => compareBoth(v, that[i2]));
      }
      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {
        const keysSelf = Object.keys(self);
        const keysThat = Object.keys(that);
        if (keysSelf.length === keysThat.length) {
          for (const key of keysSelf) {
            if (!((key in that) && compareBoth(self[key], that[key]))) {
              return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false;
            }
          }
          return true;
        }
      }
      return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false;
    }
  }
  return structuralRegionState.enabled && structuralRegionState.tester ? structuralRegionState.tester(self, that) : false;
}
var symbol3, isEqual = (u) => hasProperty(u, symbol3), equivalence = () => equals;
var init_Equal = __esm(() => {
  init_Hash();
  init_Predicate();
  init_Utils();
  symbol3 = /* @__PURE__ */ Symbol.for("effect/Equal");
});

// node_modules/effect/dist/esm/Inspectable.js
var exports_Inspectable = {};
__export(exports_Inspectable, {
  withRedactableContext: () => withRedactableContext,
  toStringUnknown: () => toStringUnknown,
  toJSON: () => toJSON,
  symbolRedactable: () => symbolRedactable,
  stringifyCircular: () => stringifyCircular,
  redact: () => redact,
  isRedactable: () => isRedactable,
  format: () => format2,
  NodeInspectSymbol: () => NodeInspectSymbol,
  Class: () => Class,
  BaseProto: () => BaseProto
});
var NodeInspectSymbol, toJSON = (x2) => {
  try {
    if (hasProperty(x2, "toJSON") && isFunction2(x2["toJSON"]) && x2["toJSON"].length === 0) {
      return x2.toJSON();
    } else if (Array.isArray(x2)) {
      return x2.map(toJSON);
    }
  } catch (_) {
    return {};
  }
  return redact(x2);
}, format2 = (x2) => JSON.stringify(x2, null, 2), BaseProto, Class, toStringUnknown = (u, whitespace = 2) => {
  if (typeof u === "string") {
    return u;
  }
  try {
    return typeof u === "object" ? stringifyCircular(u, whitespace) : String(u);
  } catch (_) {
    return String(u);
  }
}, stringifyCircular = (obj, whitespace) => {
  let cache = [];
  const retVal = JSON.stringify(obj, (_key, value) => typeof value === "object" && value !== null ? cache.includes(value) ? undefined : cache.push(value) && (redactableState.fiberRefs !== undefined && isRedactable(value) ? value[symbolRedactable](redactableState.fiberRefs) : value) : value, whitespace);
  cache = undefined;
  return retVal;
}, symbolRedactable, isRedactable = (u) => typeof u === "object" && u !== null && (symbolRedactable in u), redactableState, withRedactableContext = (context, f) => {
  const prev = redactableState.fiberRefs;
  redactableState.fiberRefs = context;
  try {
    return f();
  } finally {
    redactableState.fiberRefs = prev;
  }
}, redact = (u) => {
  if (isRedactable(u) && redactableState.fiberRefs !== undefined) {
    return u[symbolRedactable](redactableState.fiberRefs);
  }
  return u;
};
var init_Inspectable = __esm(() => {
  init_GlobalValue();
  init_Predicate();
  NodeInspectSymbol = /* @__PURE__ */ Symbol.for("nodejs.util.inspect.custom");
  BaseProto = {
    toJSON() {
      return toJSON(this);
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    toString() {
      return format2(this.toJSON());
    }
  };
  Class = class Class {
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
    toString() {
      return format2(this.toJSON());
    }
  };
  symbolRedactable = /* @__PURE__ */ Symbol.for("effect/Inspectable/Redactable");
  redactableState = /* @__PURE__ */ globalValue("effect/Inspectable/redactableState", () => ({
    fiberRefs: undefined
  }));
});

// node_modules/effect/dist/esm/Pipeable.js
var exports_Pipeable = {};
__export(exports_Pipeable, {
  pipeArguments: () => pipeArguments
});
var pipeArguments = (self, args) => {
  switch (args.length) {
    case 0:
      return self;
    case 1:
      return args[0](self);
    case 2:
      return args[1](args[0](self));
    case 3:
      return args[2](args[1](args[0](self)));
    case 4:
      return args[3](args[2](args[1](args[0](self))));
    case 5:
      return args[4](args[3](args[2](args[1](args[0](self)))));
    case 6:
      return args[5](args[4](args[3](args[2](args[1](args[0](self))))));
    case 7:
      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))));
    case 8:
      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))));
    case 9:
      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))));
    default: {
      let ret = self;
      for (let i2 = 0, len = args.length;i2 < len; i2++) {
        ret = args[i2](ret);
      }
      return ret;
    }
  }
};

// node_modules/effect/dist/esm/internal/opCodes/effect.js
var OP_ASYNC = "Async", OP_COMMIT = "Commit", OP_FAILURE = "Failure", OP_ON_FAILURE = "OnFailure", OP_ON_SUCCESS = "OnSuccess", OP_ON_SUCCESS_AND_FAILURE = "OnSuccessAndFailure", OP_SUCCESS = "Success", OP_SYNC = "Sync", OP_TAG = "Tag", OP_UPDATE_RUNTIME_FLAGS = "UpdateRuntimeFlags", OP_WHILE = "While", OP_ITERATOR = "Iterator", OP_WITH_RUNTIME = "WithRuntime", OP_YIELD = "Yield", OP_REVERT_FLAGS = "RevertFlags";

// node_modules/effect/dist/esm/internal/effectable.js
var EffectTypeId, StreamTypeId, SinkTypeId, ChannelTypeId, effectVariance, sinkVariance, channelVariance, EffectPrototype, StructuralPrototype, CommitPrototype, StructuralCommitPrototype, Base, StructuralBase;
var init_effectable = __esm(() => {
  init_Equal();
  init_Hash();
  init_Utils();
  EffectTypeId = /* @__PURE__ */ Symbol.for("effect/Effect");
  StreamTypeId = /* @__PURE__ */ Symbol.for("effect/Stream");
  SinkTypeId = /* @__PURE__ */ Symbol.for("effect/Sink");
  ChannelTypeId = /* @__PURE__ */ Symbol.for("effect/Channel");
  effectVariance = {
    _R: (_) => _,
    _E: (_) => _,
    _A: (_) => _,
    _V: /* @__PURE__ */ getCurrentVersion()
  };
  sinkVariance = {
    _A: (_) => _,
    _In: (_) => _,
    _L: (_) => _,
    _E: (_) => _,
    _R: (_) => _
  };
  channelVariance = {
    _Env: (_) => _,
    _InErr: (_) => _,
    _InElem: (_) => _,
    _InDone: (_) => _,
    _OutErr: (_) => _,
    _OutElem: (_) => _,
    _OutDone: (_) => _
  };
  EffectPrototype = {
    [EffectTypeId]: effectVariance,
    [StreamTypeId]: effectVariance,
    [SinkTypeId]: sinkVariance,
    [ChannelTypeId]: channelVariance,
    [symbol3](that) {
      return this === that;
    },
    [symbol2]() {
      return cached(this, random(this));
    },
    [Symbol.iterator]() {
      return new SingleShotGen(new YieldWrap(this));
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  StructuralPrototype = {
    [symbol2]() {
      return cached(this, structure(this));
    },
    [symbol3](that) {
      const selfKeys = Object.keys(this);
      const thatKeys = Object.keys(that);
      if (selfKeys.length !== thatKeys.length) {
        return false;
      }
      for (const key of selfKeys) {
        if (!((key in that) && equals(this[key], that[key]))) {
          return false;
        }
      }
      return true;
    }
  };
  CommitPrototype = {
    ...EffectPrototype,
    _op: OP_COMMIT
  };
  StructuralCommitPrototype = {
    ...CommitPrototype,
    ...StructuralPrototype
  };
  Base = /* @__PURE__ */ function() {
    function Base2() {}
    Base2.prototype = CommitPrototype;
    return Base2;
  }();
  StructuralBase = /* @__PURE__ */ function() {
    function Base2() {}
    Base2.prototype = StructuralCommitPrototype;
    return Base2;
  }();
});

// node_modules/effect/dist/esm/internal/option.js
var TypeId, CommonProto, SomeProto, NoneHash, NoneProto, isOption = (input) => hasProperty(input, TypeId), isNone = (fa) => fa._tag === "None", isSome = (fa) => fa._tag === "Some", none, some2 = (value) => {
  const a = Object.create(SomeProto);
  a.value = value;
  return a;
};
var init_option = __esm(() => {
  init_Equal();
  init_Hash();
  init_Inspectable();
  init_Predicate();
  init_effectable();
  TypeId = /* @__PURE__ */ Symbol.for("effect/Option");
  CommonProto = {
    ...EffectPrototype,
    [TypeId]: {
      _A: (_) => _
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    toString() {
      return format2(this.toJSON());
    }
  };
  SomeProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(CommonProto), {
    _tag: "Some",
    _op: "Some",
    [symbol3](that) {
      return isOption(that) && isSome(that) && equals(this.value, that.value);
    },
    [symbol2]() {
      return cached(this, combine2(hash(this._tag))(hash(this.value)));
    },
    toJSON() {
      return {
        _id: "Option",
        _tag: this._tag,
        value: toJSON(this.value)
      };
    }
  });
  NoneHash = /* @__PURE__ */ hash("None");
  NoneProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(CommonProto), {
    _tag: "None",
    _op: "None",
    [symbol3](that) {
      return isOption(that) && isNone(that);
    },
    [symbol2]() {
      return NoneHash;
    },
    toJSON() {
      return {
        _id: "Option",
        _tag: this._tag
      };
    }
  });
  none = /* @__PURE__ */ Object.create(NoneProto);
});

// node_modules/effect/dist/esm/internal/either.js
var TypeId2, CommonProto2, RightProto, LeftProto, isEither = (input) => hasProperty(input, TypeId2), isLeft = (ma) => ma._tag === "Left", isRight = (ma) => ma._tag === "Right", left = (left2) => {
  const a = Object.create(LeftProto);
  a.left = left2;
  return a;
}, right = (right2) => {
  const a = Object.create(RightProto);
  a.right = right2;
  return a;
}, getLeft = (self) => isRight(self) ? none : some2(self.left), getRight = (self) => isLeft(self) ? none : some2(self.right), fromOption;
var init_either = __esm(() => {
  init_Equal();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Predicate();
  init_effectable();
  init_option();
  TypeId2 = /* @__PURE__ */ Symbol.for("effect/Either");
  CommonProto2 = {
    ...EffectPrototype,
    [TypeId2]: {
      _R: (_) => _
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    toString() {
      return format2(this.toJSON());
    }
  };
  RightProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(CommonProto2), {
    _tag: "Right",
    _op: "Right",
    [symbol3](that) {
      return isEither(that) && isRight(that) && equals(this.right, that.right);
    },
    [symbol2]() {
      return combine2(hash(this._tag))(hash(this.right));
    },
    toJSON() {
      return {
        _id: "Either",
        _tag: this._tag,
        right: toJSON(this.right)
      };
    }
  });
  LeftProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(CommonProto2), {
    _tag: "Left",
    _op: "Left",
    [symbol3](that) {
      return isEither(that) && isLeft(that) && equals(this.left, that.left);
    },
    [symbol2]() {
      return combine2(hash(this._tag))(hash(this.left));
    },
    toJSON() {
      return {
        _id: "Either",
        _tag: this._tag,
        left: toJSON(this.left)
      };
    }
  });
  fromOption = /* @__PURE__ */ dual(2, (self, onNone) => isNone(self) ? left(onNone()) : right(self.value));
});

// node_modules/effect/dist/esm/Either.js
var exports_Either = {};
__export(exports_Either, {
  zipWith: () => zipWith,
  void: () => void_,
  try: () => try_,
  transposeOption: () => transposeOption,
  right: () => right2,
  orElse: () => orElse,
  merge: () => merge,
  match: () => match,
  mapLeft: () => mapLeft,
  mapBoth: () => mapBoth,
  map: () => map,
  liftPredicate: () => liftPredicate,
  let: () => let_2,
  left: () => left2,
  isRight: () => isRight2,
  isLeft: () => isLeft2,
  isEither: () => isEither2,
  getRight: () => getRight2,
  getOrUndefined: () => getOrUndefined,
  getOrThrowWith: () => getOrThrowWith,
  getOrThrow: () => getOrThrow,
  getOrNull: () => getOrNull,
  getOrElse: () => getOrElse,
  getLeft: () => getLeft2,
  getEquivalence: () => getEquivalence,
  gen: () => gen,
  fromOption: () => fromOption2,
  fromNullable: () => fromNullable,
  flip: () => flip2,
  flatMap: () => flatMap,
  filterOrLeft: () => filterOrLeft,
  bindTo: () => bindTo2,
  bind: () => bind2,
  ap: () => ap,
  andThen: () => andThen,
  all: () => all3,
  TypeId: () => TypeId3,
  Do: () => Do
});
var TypeId3, right2, void_, left2, fromNullable, fromOption2, try_ = (evaluate) => {
  if (isFunction2(evaluate)) {
    try {
      return right2(evaluate());
    } catch (e) {
      return left2(e);
    }
  } else {
    try {
      return right2(evaluate.try());
    } catch (e) {
      return left2(evaluate.catch(e));
    }
  }
}, isEither2, isLeft2, isRight2, getRight2, getLeft2, getEquivalence = ({
  left: left3,
  right: right3
}) => make((x2, y) => isLeft2(x2) ? isLeft2(y) && left3(x2.left, y.left) : isRight2(y) && right3(x2.right, y.right)), mapBoth, mapLeft, map, match, liftPredicate, filterOrLeft, merge, getOrElse, getOrNull, getOrUndefined, getOrThrowWith, getOrThrow, orElse, flatMap, andThen, zipWith, ap, all3 = (input) => {
  if (Symbol.iterator in input) {
    const out2 = [];
    for (const e of input) {
      if (isLeft2(e)) {
        return e;
      }
      out2.push(e.right);
    }
    return right2(out2);
  }
  const out = {};
  for (const key of Object.keys(input)) {
    const e = input[key];
    if (isLeft2(e)) {
      return e;
    }
    out[key] = e.right;
  }
  return right2(out);
}, flip2 = (self) => isLeft2(self) ? right2(self.left) : left2(self.right), adapter2, gen = (...args) => {
  const f = args.length === 1 ? args[0] : args[1].bind(args[0]);
  const iterator = f(adapter2);
  let state = iterator.next();
  while (!state.done) {
    const current = isGenKind(state.value) ? state.value.value : yieldWrapGet(state.value);
    if (isLeft2(current)) {
      return current;
    }
    state = iterator.next(current.right);
  }
  return right2(state.value);
}, Do, bind2, bindTo2, let_2, transposeOption = (self) => {
  return isNone(self) ? right2(none) : map(self.value, some2);
};
var init_Either = __esm(() => {
  init_Equivalence();
  init_Function();
  init_doNotation();
  init_either();
  init_option();
  init_Predicate();
  init_Utils();
  TypeId3 = TypeId2;
  right2 = right;
  void_ = /* @__PURE__ */ right2(undefined);
  left2 = left;
  fromNullable = /* @__PURE__ */ dual(2, (self, onNullable) => self == null ? left2(onNullable(self)) : right2(self));
  fromOption2 = fromOption;
  isEither2 = isEither;
  isLeft2 = isLeft;
  isRight2 = isRight;
  getRight2 = getRight;
  getLeft2 = getLeft;
  mapBoth = /* @__PURE__ */ dual(2, (self, {
    onLeft,
    onRight
  }) => isLeft2(self) ? left2(onLeft(self.left)) : right2(onRight(self.right)));
  mapLeft = /* @__PURE__ */ dual(2, (self, f) => isLeft2(self) ? left2(f(self.left)) : right2(self.right));
  map = /* @__PURE__ */ dual(2, (self, f) => isRight2(self) ? right2(f(self.right)) : left2(self.left));
  match = /* @__PURE__ */ dual(2, (self, {
    onLeft,
    onRight
  }) => isLeft2(self) ? onLeft(self.left) : onRight(self.right));
  liftPredicate = /* @__PURE__ */ dual(3, (a, predicate, orLeftWith) => predicate(a) ? right2(a) : left2(orLeftWith(a)));
  filterOrLeft = /* @__PURE__ */ dual(3, (self, predicate, orLeftWith) => flatMap(self, (r) => predicate(r) ? right2(r) : left2(orLeftWith(r))));
  merge = /* @__PURE__ */ match({
    onLeft: identity,
    onRight: identity
  });
  getOrElse = /* @__PURE__ */ dual(2, (self, onLeft) => isLeft2(self) ? onLeft(self.left) : self.right);
  getOrNull = /* @__PURE__ */ getOrElse(constNull);
  getOrUndefined = /* @__PURE__ */ getOrElse(constUndefined);
  getOrThrowWith = /* @__PURE__ */ dual(2, (self, onLeft) => {
    if (isRight2(self)) {
      return self.right;
    }
    throw onLeft(self.left);
  });
  getOrThrow = /* @__PURE__ */ getOrThrowWith(() => new Error("getOrThrow called on a Left"));
  orElse = /* @__PURE__ */ dual(2, (self, that) => isLeft2(self) ? that(self.left) : right2(self.right));
  flatMap = /* @__PURE__ */ dual(2, (self, f) => isLeft2(self) ? left2(self.left) : f(self.right));
  andThen = /* @__PURE__ */ dual(2, (self, f) => flatMap(self, (a) => {
    const b = isFunction2(f) ? f(a) : f;
    return isEither2(b) ? b : right2(b);
  }));
  zipWith = /* @__PURE__ */ dual(3, (self, that, f) => flatMap(self, (r) => map(that, (r2) => f(r, r2))));
  ap = /* @__PURE__ */ dual(2, (self, that) => zipWith(self, that, (f, a) => f(a)));
  adapter2 = /* @__PURE__ */ adapter();
  Do = /* @__PURE__ */ right2({});
  bind2 = /* @__PURE__ */ bind(map, flatMap);
  bindTo2 = /* @__PURE__ */ bindTo(map);
  let_2 = /* @__PURE__ */ let_(map);
});

// node_modules/effect/dist/esm/internal/array.js
var isNonEmptyArray = (self) => self.length > 0;

// node_modules/effect/dist/esm/Order.js
var exports_Order = {};
__export(exports_Order, {
  tuple: () => tuple3,
  struct: () => struct3,
  string: () => string3,
  reverse: () => reverse,
  productMany: () => productMany3,
  product: () => product3,
  number: () => number3,
  min: () => min,
  max: () => max2,
  mapInput: () => mapInput3,
  make: () => make2,
  lessThanOrEqualTo: () => lessThanOrEqualTo,
  lessThan: () => lessThan,
  greaterThanOrEqualTo: () => greaterThanOrEqualTo,
  greaterThan: () => greaterThan,
  empty: () => empty,
  combineMany: () => combineMany2,
  combineAll: () => combineAll2,
  combine: () => combine3,
  clamp: () => clamp,
  boolean: () => boolean2,
  bigint: () => bigint2,
  between: () => between,
  array: () => array3,
  all: () => all4,
  Date: () => Date3
});
var make2 = (compare) => (self, that) => self === that ? 0 : compare(self, that), string3, number3, boolean2, bigint2, reverse = (O) => make2((self, that) => O(that, self)), combine3, combineMany2, empty = () => make2(() => 0), combineAll2 = (collection) => combineMany2(empty(), collection), mapInput3, Date3, product3, all4 = (collection) => {
  return make2((x2, y) => {
    const len = Math.min(x2.length, y.length);
    let collectionLength = 0;
    for (const O of collection) {
      if (collectionLength >= len) {
        break;
      }
      const o = O(x2[collectionLength], y[collectionLength]);
      if (o !== 0) {
        return o;
      }
      collectionLength++;
    }
    return 0;
  });
}, productMany3, tuple3 = (...elements) => all4(elements), array3 = (O) => make2((self, that) => {
  const aLen = self.length;
  const bLen = that.length;
  const len = Math.min(aLen, bLen);
  for (let i2 = 0;i2 < len; i2++) {
    const o = O(self[i2], that[i2]);
    if (o !== 0) {
      return o;
    }
  }
  return number3(aLen, bLen);
}), struct3 = (fields) => {
  const keys = Object.keys(fields);
  return make2((self, that) => {
    for (const key of keys) {
      const o = fields[key](self[key], that[key]);
      if (o !== 0) {
        return o;
      }
    }
    return 0;
  });
}, lessThan = (O) => dual(2, (self, that) => O(self, that) === -1), greaterThan = (O) => dual(2, (self, that) => O(self, that) === 1), lessThanOrEqualTo = (O) => dual(2, (self, that) => O(self, that) !== 1), greaterThanOrEqualTo = (O) => dual(2, (self, that) => O(self, that) !== -1), min = (O) => dual(2, (self, that) => self === that || O(self, that) < 1 ? self : that), max2 = (O) => dual(2, (self, that) => self === that || O(self, that) > -1 ? self : that), clamp = (O) => dual(2, (self, options) => min(O)(options.maximum, max2(O)(options.minimum, self))), between = (O) => dual(2, (self, options) => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum));
var init_Order = __esm(() => {
  init_Function();
  string3 = /* @__PURE__ */ make2((self, that) => self < that ? -1 : 1);
  number3 = /* @__PURE__ */ make2((self, that) => self < that ? -1 : 1);
  boolean2 = /* @__PURE__ */ make2((self, that) => self < that ? -1 : 1);
  bigint2 = /* @__PURE__ */ make2((self, that) => self < that ? -1 : 1);
  combine3 = /* @__PURE__ */ dual(2, (self, that) => make2((a1, a2) => {
    const out = self(a1, a2);
    if (out !== 0) {
      return out;
    }
    return that(a1, a2);
  }));
  combineMany2 = /* @__PURE__ */ dual(2, (self, collection) => make2((a1, a2) => {
    let out = self(a1, a2);
    if (out !== 0) {
      return out;
    }
    for (const O of collection) {
      out = O(a1, a2);
      if (out !== 0) {
        return out;
      }
    }
    return out;
  }));
  mapInput3 = /* @__PURE__ */ dual(2, (self, f) => make2((b1, b2) => self(f(b1), f(b2))));
  Date3 = /* @__PURE__ */ mapInput3(number3, (date) => date.getTime());
  product3 = /* @__PURE__ */ dual(2, (self, that) => make2(([xa, xb], [ya, yb]) => {
    const o = self(xa, ya);
    return o !== 0 ? o : that(xb, yb);
  }));
  productMany3 = /* @__PURE__ */ dual(2, (self, collection) => {
    const O = all4(collection);
    return make2((x2, y) => {
      const o = self(x2[0], y[0]);
      return o !== 0 ? o : O(x2.slice(1), y.slice(1));
    });
  });
});

// node_modules/effect/dist/esm/Option.js
var exports_Option = {};
__export(exports_Option, {
  zipWith: () => zipWith2,
  zipRight: () => zipRight,
  zipLeft: () => zipLeft,
  void: () => void_2,
  toRefinement: () => toRefinement,
  toArray: () => toArray,
  tap: () => tap,
  some: () => some3,
  reduceCompact: () => reduceCompact,
  productMany: () => productMany4,
  product: () => product4,
  partitionMap: () => partitionMap,
  orElseSome: () => orElseSome,
  orElseEither: () => orElseEither,
  orElse: () => orElse2,
  none: () => none2,
  mergeWith: () => mergeWith,
  match: () => match2,
  map: () => map2,
  liftThrowable: () => liftThrowable,
  liftPredicate: () => liftPredicate2,
  liftNullable: () => liftNullable,
  lift2: () => lift2,
  let: () => let_3,
  isSome: () => isSome2,
  isOption: () => isOption2,
  isNone: () => isNone2,
  getRight: () => getRight3,
  getOrder: () => getOrder,
  getOrUndefined: () => getOrUndefined2,
  getOrThrowWith: () => getOrThrowWith2,
  getOrThrow: () => getOrThrow2,
  getOrNull: () => getOrNull2,
  getOrElse: () => getOrElse2,
  getLeft: () => getLeft3,
  getEquivalence: () => getEquivalence2,
  gen: () => gen2,
  fromNullable: () => fromNullable2,
  fromIterable: () => fromIterable,
  flatten: () => flatten,
  flatMapNullable: () => flatMapNullable,
  flatMap: () => flatMap2,
  firstSomeOf: () => firstSomeOf,
  filterMap: () => filterMap,
  filter: () => filter,
  exists: () => exists,
  containsWith: () => containsWith,
  contains: () => contains,
  composeK: () => composeK,
  bindTo: () => bindTo3,
  bind: () => bind3,
  asVoid: () => asVoid,
  as: () => as,
  ap: () => ap2,
  andThen: () => andThen2,
  all: () => all5,
  TypeId: () => TypeId4,
  Do: () => Do2
});
var TypeId4, none2 = () => none, some3, isOption2, isNone2, isSome2, match2, toRefinement = (f) => (a) => isSome2(f(a)), fromIterable = (collection) => {
  for (const a of collection) {
    return some3(a);
  }
  return none2();
}, getRight3, getLeft3, getOrElse2, orElse2, orElseSome, orElseEither, firstSomeOf = (collection) => {
  let out = none2();
  for (out of collection) {
    if (isSome2(out)) {
      return out;
    }
  }
  return out;
}, fromNullable2 = (nullableValue) => nullableValue == null ? none2() : some3(nullableValue), liftNullable = (f) => (...a) => fromNullable2(f(...a)), getOrNull2, getOrUndefined2, liftThrowable = (f) => (...a) => {
  try {
    return some3(f(...a));
  } catch (e) {
    return none2();
  }
}, getOrThrowWith2, getOrThrow2, map2, as, asVoid, void_2, flatMap2, andThen2, flatMapNullable, flatten, zipRight, zipLeft, composeK, tap, product4 = (self, that) => isSome2(self) && isSome2(that) ? some3([self.value, that.value]) : none2(), productMany4 = (self, collection) => {
  if (isNone2(self)) {
    return none2();
  }
  const out = [self.value];
  for (const o of collection) {
    if (isNone2(o)) {
      return none2();
    }
    out.push(o.value);
  }
  return some3(out);
}, all5 = (input) => {
  if (Symbol.iterator in input) {
    const out2 = [];
    for (const o of input) {
      if (isNone2(o)) {
        return none2();
      }
      out2.push(o.value);
    }
    return some3(out2);
  }
  const out = {};
  for (const key of Object.keys(input)) {
    const o = input[key];
    if (isNone2(o)) {
      return none2();
    }
    out[key] = o.value;
  }
  return some3(out);
}, zipWith2, ap2, reduceCompact, toArray = (self) => isNone2(self) ? [] : [self.value], partitionMap, filterMap, filter, getEquivalence2 = (isEquivalent) => make((x2, y) => isNone2(x2) ? isNone2(y) : isNone2(y) ? false : isEquivalent(x2.value, y.value)), getOrder = (O) => make2((self, that) => isSome2(self) ? isSome2(that) ? O(self.value, that.value) : 1 : -1), lift2 = (f) => dual(2, (self, that) => zipWith2(self, that, f)), liftPredicate2, containsWith = (isEquivalent) => dual(2, (self, a) => isNone2(self) ? false : isEquivalent(self.value, a)), _equivalence, contains, exists, bindTo3, let_3, bind3, Do2, adapter3, gen2 = (...args) => {
  const f = args.length === 1 ? args[0] : args[1].bind(args[0]);
  const iterator = f(adapter3);
  let state = iterator.next();
  while (!state.done) {
    const current = isGenKind(state.value) ? state.value.value : yieldWrapGet(state.value);
    if (isNone2(current)) {
      return current;
    }
    state = iterator.next(current.value);
  }
  return some3(state.value);
}, mergeWith = (f) => (o1, o2) => {
  if (isNone2(o1)) {
    return o2;
  } else if (isNone2(o2)) {
    return o1;
  }
  return some3(f(o1.value, o2.value));
};
var init_Option = __esm(() => {
  init_Equal();
  init_Equivalence();
  init_Function();
  init_doNotation();
  init_either();
  init_option();
  init_Order();
  init_Utils();
  TypeId4 = /* @__PURE__ */ Symbol.for("effect/Option");
  some3 = some2;
  isOption2 = isOption;
  isNone2 = isNone;
  isSome2 = isSome;
  match2 = /* @__PURE__ */ dual(2, (self, {
    onNone,
    onSome
  }) => isNone2(self) ? onNone() : onSome(self.value));
  getRight3 = getRight;
  getLeft3 = getLeft;
  getOrElse2 = /* @__PURE__ */ dual(2, (self, onNone) => isNone2(self) ? onNone() : self.value);
  orElse2 = /* @__PURE__ */ dual(2, (self, that) => isNone2(self) ? that() : self);
  orElseSome = /* @__PURE__ */ dual(2, (self, onNone) => isNone2(self) ? some3(onNone()) : self);
  orElseEither = /* @__PURE__ */ dual(2, (self, that) => isNone2(self) ? map2(that(), right) : map2(self, left));
  getOrNull2 = /* @__PURE__ */ getOrElse2(constNull);
  getOrUndefined2 = /* @__PURE__ */ getOrElse2(constUndefined);
  getOrThrowWith2 = /* @__PURE__ */ dual(2, (self, onNone) => {
    if (isSome2(self)) {
      return self.value;
    }
    throw onNone();
  });
  getOrThrow2 = /* @__PURE__ */ getOrThrowWith2(() => new Error("getOrThrow called on a None"));
  map2 = /* @__PURE__ */ dual(2, (self, f) => isNone2(self) ? none2() : some3(f(self.value)));
  as = /* @__PURE__ */ dual(2, (self, b) => map2(self, () => b));
  asVoid = /* @__PURE__ */ as(undefined);
  void_2 = /* @__PURE__ */ some3(undefined);
  flatMap2 = /* @__PURE__ */ dual(2, (self, f) => isNone2(self) ? none2() : f(self.value));
  andThen2 = /* @__PURE__ */ dual(2, (self, f) => flatMap2(self, (a) => {
    const b = isFunction(f) ? f(a) : f;
    return isOption2(b) ? b : some3(b);
  }));
  flatMapNullable = /* @__PURE__ */ dual(2, (self, f) => isNone2(self) ? none2() : fromNullable2(f(self.value)));
  flatten = /* @__PURE__ */ flatMap2(identity);
  zipRight = /* @__PURE__ */ dual(2, (self, that) => flatMap2(self, () => that));
  zipLeft = /* @__PURE__ */ dual(2, (self, that) => tap(self, () => that));
  composeK = /* @__PURE__ */ dual(2, (afb, bfc) => (a) => flatMap2(afb(a), bfc));
  tap = /* @__PURE__ */ dual(2, (self, f) => flatMap2(self, (a) => map2(f(a), () => a)));
  zipWith2 = /* @__PURE__ */ dual(3, (self, that, f) => map2(product4(self, that), ([a, b]) => f(a, b)));
  ap2 = /* @__PURE__ */ dual(2, (self, that) => zipWith2(self, that, (f, a) => f(a)));
  reduceCompact = /* @__PURE__ */ dual(3, (self, b, f) => {
    let out = b;
    for (const oa of self) {
      if (isSome2(oa)) {
        out = f(out, oa.value);
      }
    }
    return out;
  });
  partitionMap = /* @__PURE__ */ dual(2, (self, f) => {
    if (isNone2(self)) {
      return [none2(), none2()];
    }
    const e = f(self.value);
    return isLeft(e) ? [some3(e.left), none2()] : [none2(), some3(e.right)];
  });
  filterMap = flatMap2;
  filter = /* @__PURE__ */ dual(2, (self, predicate) => filterMap(self, (b) => predicate(b) ? some2(b) : none));
  liftPredicate2 = /* @__PURE__ */ dual(2, (b, predicate) => predicate(b) ? some3(b) : none2());
  _equivalence = /* @__PURE__ */ equivalence();
  contains = /* @__PURE__ */ containsWith(_equivalence);
  exists = /* @__PURE__ */ dual(2, (self, refinement) => isNone2(self) ? false : refinement(self.value));
  bindTo3 = /* @__PURE__ */ bindTo(map2);
  let_3 = /* @__PURE__ */ let_(map2);
  bind3 = /* @__PURE__ */ bind(map2, flatMap2);
  Do2 = /* @__PURE__ */ some3({});
  adapter3 = /* @__PURE__ */ adapter();
});

// node_modules/effect/dist/esm/Tuple.js
var exports_Tuple = {};
__export(exports_Tuple, {
  swap: () => swap,
  mapSecond: () => mapSecond,
  mapFirst: () => mapFirst,
  mapBoth: () => mapBoth2,
  map: () => map3,
  make: () => make3,
  isTupleOfAtLeast: () => isTupleOfAtLeast,
  isTupleOf: () => isTupleOf,
  getSecond: () => getSecond,
  getOrder: () => getOrder2,
  getFirst: () => getFirst,
  getEquivalence: () => getEquivalence3,
  at: () => at,
  appendElement: () => appendElement
});
var make3 = (...elements) => elements, getFirst = (self) => self[0], getSecond = (self) => self[1], map3, mapBoth2, mapFirst, mapSecond, swap = (self) => [self[1], self[0]], getEquivalence3, getOrder2, appendElement, at;
var init_Tuple = __esm(() => {
  init_Equivalence();
  init_Function();
  init_Order();
  init_Predicate();
  map3 = /* @__PURE__ */ dual(2, (self, fn) => self.map((element) => fn(element)));
  mapBoth2 = /* @__PURE__ */ dual(2, (self, {
    onFirst,
    onSecond
  }) => [onFirst(self[0]), onSecond(self[1])]);
  mapFirst = /* @__PURE__ */ dual(2, (self, f) => [f(self[0]), self[1]]);
  mapSecond = /* @__PURE__ */ dual(2, (self, f) => [self[0], f(self[1])]);
  getEquivalence3 = tuple;
  getOrder2 = tuple3;
  appendElement = /* @__PURE__ */ dual(2, (self, that) => [...self, that]);
  at = /* @__PURE__ */ dual(2, (self, index) => self[index]);
});

// node_modules/effect/dist/esm/Iterable.js
var exports_Iterable = {};
__export(exports_Iterable, {
  zipWith: () => zipWith3,
  zip: () => zip,
  unsafeHead: () => unsafeHead,
  unfold: () => unfold,
  takeWhile: () => takeWhile,
  take: () => take,
  some: () => some4,
  size: () => size,
  scan: () => scan,
  replicate: () => replicate,
  reduce: () => reduce,
  range: () => range,
  prependAll: () => prependAll,
  prepend: () => prepend,
  of: () => of,
  map: () => map4,
  makeBy: () => makeBy,
  isEmpty: () => isEmpty,
  intersperse: () => intersperse,
  head: () => head,
  groupWith: () => groupWith,
  groupBy: () => groupBy,
  group: () => group,
  getSomes: () => getSomes,
  getRights: () => getRights,
  getLefts: () => getLefts,
  fromRecord: () => fromRecord,
  forEach: () => forEach,
  flatten: () => flatten2,
  flatMapNullable: () => flatMapNullable2,
  flatMap: () => flatMap3,
  findLast: () => findLast,
  findFirst: () => findFirst,
  filterMapWhile: () => filterMapWhile,
  filterMap: () => filterMap2,
  filter: () => filter2,
  empty: () => empty2,
  drop: () => drop,
  dedupeAdjacentWith: () => dedupeAdjacentWith,
  dedupeAdjacent: () => dedupeAdjacent,
  containsWith: () => containsWith2,
  contains: () => contains2,
  chunksOf: () => chunksOf,
  cartesianWith: () => cartesianWith,
  cartesian: () => cartesian,
  appendAll: () => appendAll,
  append: () => append
});
var makeBy = (f, options) => {
  const max3 = options?.length !== undefined ? Math.max(1, Math.floor(options.length)) : Infinity;
  return {
    [Symbol.iterator]() {
      let i2 = 0;
      return {
        next() {
          if (i2 < max3) {
            return {
              value: f(i2++),
              done: false
            };
          }
          return {
            done: true,
            value: undefined
          };
        }
      };
    }
  };
}, range = (start, end) => {
  if (end === undefined) {
    return makeBy((i2) => start + i2);
  }
  return makeBy((i2) => start + i2, {
    length: start <= end ? end - start + 1 : 1
  });
}, replicate, fromRecord = (self) => ({
  *[Symbol.iterator]() {
    for (const key in self) {
      if (Object.prototype.hasOwnProperty.call(self, key)) {
        yield [key, self[key]];
      }
    }
  }
}), prepend, prependAll, append, appendAll, scan, isEmpty = (self) => {
  const iterator = self[Symbol.iterator]();
  return iterator.next().done === true;
}, size = (self) => {
  const iterator = self[Symbol.iterator]();
  let count = 0;
  while (!iterator.next().done) {
    count++;
  }
  return count;
}, head = (self) => {
  const iterator = self[Symbol.iterator]();
  const result2 = iterator.next();
  return result2.done ? none2() : some3(result2.value);
}, unsafeHead = (self) => {
  const iterator = self[Symbol.iterator]();
  const result2 = iterator.next();
  if (result2.done)
    throw new Error("unsafeHead: empty iterable");
  return result2.value;
}, take, takeWhile, drop, findFirst, findLast, zip, zipWith3, intersperse, containsWith2 = (isEquivalent) => dual(2, (self, a) => {
  for (const i2 of self) {
    if (isEquivalent(a, i2)) {
      return true;
    }
  }
  return false;
}), _equivalence2, contains2, chunksOf, groupWith, group, groupBy, constEmpty, constEmptyIterator, empty2 = () => constEmpty, of = (a) => [a], map4, flatMap3, flatten2 = (self) => ({
  [Symbol.iterator]() {
    const outerIterator = self[Symbol.iterator]();
    let innerIterator;
    function next() {
      if (innerIterator === undefined) {
        const next2 = outerIterator.next();
        if (next2.done) {
          return next2;
        }
        innerIterator = next2.value[Symbol.iterator]();
      }
      const result2 = innerIterator.next();
      if (result2.done) {
        innerIterator = undefined;
        return next();
      }
      return result2;
    }
    return {
      next
    };
  }
}), filterMap2, filterMapWhile, getSomes, getLefts = (self) => filterMap2(self, getLeft2), getRights = (self) => filterMap2(self, getRight2), filter2, flatMapNullable2, some4, unfold = (b, f) => ({
  [Symbol.iterator]() {
    let next = b;
    return {
      next() {
        const o = f(next);
        if (isNone2(o)) {
          return {
            done: true,
            value: undefined
          };
        }
        const [a, b2] = o.value;
        next = b2;
        return {
          done: false,
          value: a
        };
      }
    };
  }
}), forEach, reduce, dedupeAdjacentWith, dedupeAdjacent, cartesianWith, cartesian;
var init_Iterable = __esm(() => {
  init_Either();
  init_Equal();
  init_Function();
  init_Option();
  init_Predicate();
  init_Tuple();
  replicate = /* @__PURE__ */ dual(2, (a, n) => makeBy(() => a, {
    length: n
  }));
  prepend = /* @__PURE__ */ dual(2, (self, head) => prependAll(self, [head]));
  prependAll = /* @__PURE__ */ dual(2, (self, that) => appendAll(that, self));
  append = /* @__PURE__ */ dual(2, (self, last) => appendAll(self, [last]));
  appendAll = /* @__PURE__ */ dual(2, (self, that) => ({
    [Symbol.iterator]() {
      const iterA = self[Symbol.iterator]();
      let doneA = false;
      let iterB;
      return {
        next() {
          if (!doneA) {
            const r = iterA.next();
            if (r.done) {
              doneA = true;
              iterB = that[Symbol.iterator]();
              return iterB.next();
            }
            return r;
          }
          return iterB.next();
        }
      };
    }
  }));
  scan = /* @__PURE__ */ dual(3, (self, b, f) => ({
    [Symbol.iterator]() {
      let acc = b;
      let iterator;
      function next() {
        if (iterator === undefined) {
          iterator = self[Symbol.iterator]();
          return {
            done: false,
            value: acc
          };
        }
        const result2 = iterator.next();
        if (result2.done) {
          return result2;
        }
        acc = f(acc, result2.value);
        return {
          done: false,
          value: acc
        };
      }
      return {
        next
      };
    }
  }));
  take = /* @__PURE__ */ dual(2, (self, n) => ({
    [Symbol.iterator]() {
      let i2 = 0;
      const iterator = self[Symbol.iterator]();
      return {
        next() {
          if (i2 < n) {
            i2++;
            return iterator.next();
          }
          return {
            done: true,
            value: undefined
          };
        }
      };
    }
  }));
  takeWhile = /* @__PURE__ */ dual(2, (self, predicate) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let i2 = 0;
      return {
        next() {
          const result2 = iterator.next();
          if (result2.done || !predicate(result2.value, i2++)) {
            return {
              done: true,
              value: undefined
            };
          }
          return result2;
        }
      };
    }
  }));
  drop = /* @__PURE__ */ dual(2, (self, n) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let i2 = 0;
      return {
        next() {
          while (i2 < n) {
            const result2 = iterator.next();
            if (result2.done) {
              return {
                done: true,
                value: undefined
              };
            }
            i2++;
          }
          return iterator.next();
        }
      };
    }
  }));
  findFirst = /* @__PURE__ */ dual(2, (self, f) => {
    let i2 = 0;
    for (const a of self) {
      const o = f(a, i2);
      if (isBoolean2(o)) {
        if (o) {
          return some3(a);
        }
      } else {
        if (isSome2(o)) {
          return o;
        }
      }
      i2++;
    }
    return none2();
  });
  findLast = /* @__PURE__ */ dual(2, (self, f) => {
    let i2 = 0;
    let last = none2();
    for (const a of self) {
      const o = f(a, i2);
      if (isBoolean2(o)) {
        if (o) {
          last = some3(a);
        }
      } else {
        if (isSome2(o)) {
          last = o;
        }
      }
      i2++;
    }
    return last;
  });
  zip = /* @__PURE__ */ dual(2, (self, that) => zipWith3(self, that, make3));
  zipWith3 = /* @__PURE__ */ dual(3, (self, that, f) => ({
    [Symbol.iterator]() {
      const selfIterator = self[Symbol.iterator]();
      const thatIterator = that[Symbol.iterator]();
      return {
        next() {
          const selfResult = selfIterator.next();
          const thatResult = thatIterator.next();
          if (selfResult.done || thatResult.done) {
            return {
              done: true,
              value: undefined
            };
          }
          return {
            done: false,
            value: f(selfResult.value, thatResult.value)
          };
        }
      };
    }
  }));
  intersperse = /* @__PURE__ */ dual(2, (self, middle) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let next = iterator.next();
      let emitted = false;
      return {
        next() {
          if (next.done) {
            return next;
          } else if (emitted) {
            emitted = false;
            return {
              done: false,
              value: middle
            };
          }
          emitted = true;
          const result2 = next;
          next = iterator.next();
          return result2;
        }
      };
    }
  }));
  _equivalence2 = /* @__PURE__ */ equivalence();
  contains2 = /* @__PURE__ */ containsWith2(_equivalence2);
  chunksOf = /* @__PURE__ */ dual(2, (self, n) => {
    const safeN = Math.max(1, Math.floor(n));
    return {
      [Symbol.iterator]() {
        let iterator = self[Symbol.iterator]();
        return {
          next() {
            if (iterator === undefined) {
              return {
                done: true,
                value: undefined
              };
            }
            const chunk = [];
            for (let i2 = 0;i2 < safeN; i2++) {
              const result2 = iterator.next();
              if (result2.done) {
                iterator = undefined;
                return chunk.length === 0 ? {
                  done: true,
                  value: undefined
                } : {
                  done: false,
                  value: chunk
                };
              }
              chunk.push(result2.value);
            }
            return {
              done: false,
              value: chunk
            };
          }
        };
      }
    };
  });
  groupWith = /* @__PURE__ */ dual(2, (self, isEquivalent) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let nextResult;
      return {
        next() {
          let result2;
          if (nextResult !== undefined) {
            if (nextResult.done) {
              return {
                done: true,
                value: undefined
              };
            }
            result2 = nextResult;
            nextResult = undefined;
          } else {
            result2 = iterator.next();
            if (result2.done) {
              return {
                done: true,
                value: undefined
              };
            }
          }
          const chunk = [result2.value];
          while (true) {
            const next = iterator.next();
            if (next.done || !isEquivalent(result2.value, next.value)) {
              nextResult = next;
              return {
                done: false,
                value: chunk
              };
            }
            chunk.push(next.value);
          }
        }
      };
    }
  }));
  group = /* @__PURE__ */ groupWith(/* @__PURE__ */ equivalence());
  groupBy = /* @__PURE__ */ dual(2, (self, f) => {
    const out = {};
    for (const a of self) {
      const k = f(a);
      if (Object.prototype.hasOwnProperty.call(out, k)) {
        out[k].push(a);
      } else {
        out[k] = [a];
      }
    }
    return out;
  });
  constEmpty = {
    [Symbol.iterator]() {
      return constEmptyIterator;
    }
  };
  constEmptyIterator = {
    next() {
      return {
        done: true,
        value: undefined
      };
    }
  };
  map4 = /* @__PURE__ */ dual(2, (self, f) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let i2 = 0;
      return {
        next() {
          const result2 = iterator.next();
          if (result2.done) {
            return {
              done: true,
              value: undefined
            };
          }
          return {
            done: false,
            value: f(result2.value, i2++)
          };
        }
      };
    }
  }));
  flatMap3 = /* @__PURE__ */ dual(2, (self, f) => flatten2(map4(self, f)));
  filterMap2 = /* @__PURE__ */ dual(2, (self, f) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let i2 = 0;
      return {
        next() {
          let result2 = iterator.next();
          while (!result2.done) {
            const b = f(result2.value, i2++);
            if (isSome2(b)) {
              return {
                done: false,
                value: b.value
              };
            }
            result2 = iterator.next();
          }
          return {
            done: true,
            value: undefined
          };
        }
      };
    }
  }));
  filterMapWhile = /* @__PURE__ */ dual(2, (self, f) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let i2 = 0;
      return {
        next() {
          const result2 = iterator.next();
          if (result2.done) {
            return {
              done: true,
              value: undefined
            };
          }
          const b = f(result2.value, i2++);
          if (isSome2(b)) {
            return {
              done: false,
              value: b.value
            };
          }
          return {
            done: true,
            value: undefined
          };
        }
      };
    }
  }));
  getSomes = /* @__PURE__ */ filterMap2(identity);
  filter2 = /* @__PURE__ */ dual(2, (self, predicate) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let i2 = 0;
      return {
        next() {
          let result2 = iterator.next();
          while (!result2.done) {
            if (predicate(result2.value, i2++)) {
              return {
                done: false,
                value: result2.value
              };
            }
            result2 = iterator.next();
          }
          return {
            done: true,
            value: undefined
          };
        }
      };
    }
  }));
  flatMapNullable2 = /* @__PURE__ */ dual(2, (self, f) => filterMap2(self, (a) => {
    const b = f(a);
    return b == null ? none2() : some3(b);
  }));
  some4 = /* @__PURE__ */ dual(2, (self, predicate) => {
    let i2 = 0;
    for (const a of self) {
      if (predicate(a, i2++)) {
        return true;
      }
    }
    return false;
  });
  forEach = /* @__PURE__ */ dual(2, (self, f) => {
    let i2 = 0;
    for (const a of self) {
      f(a, i2++);
    }
  });
  reduce = /* @__PURE__ */ dual(3, (self, b, f) => {
    if (Array.isArray(self)) {
      return self.reduce(f, b);
    }
    let i2 = 0;
    let result2 = b;
    for (const n of self) {
      result2 = f(result2, n, i2++);
    }
    return result2;
  });
  dedupeAdjacentWith = /* @__PURE__ */ dual(2, (self, isEquivalent) => ({
    [Symbol.iterator]() {
      const iterator = self[Symbol.iterator]();
      let first = true;
      let last;
      function next() {
        const result2 = iterator.next();
        if (result2.done) {
          return {
            done: true,
            value: undefined
          };
        }
        if (first) {
          first = false;
          last = result2.value;
          return result2;
        }
        const current = result2.value;
        if (isEquivalent(last, current)) {
          return next();
        }
        last = current;
        return result2;
      }
      return {
        next
      };
    }
  }));
  dedupeAdjacent = /* @__PURE__ */ dedupeAdjacentWith(/* @__PURE__ */ equivalence());
  cartesianWith = /* @__PURE__ */ dual(3, (self, that, f) => flatMap3(self, (a) => map4(that, (b) => f(a, b))));
  cartesian = /* @__PURE__ */ dual(2, (self, that) => cartesianWith(self, that, (a, b) => [a, b]));
});

// node_modules/effect/dist/esm/Record.js
var exports_Record = {};
__export(exports_Record, {
  values: () => values,
  union: () => union,
  toEntries: () => toEntries,
  some: () => some5,
  size: () => size2,
  singleton: () => singleton,
  set: () => set,
  separate: () => separate,
  replaceOption: () => replaceOption,
  replace: () => replace,
  remove: () => remove,
  reduce: () => reduce2,
  pop: () => pop,
  partitionMap: () => partitionMap2,
  partition: () => partition,
  modifyOption: () => modifyOption,
  modify: () => modify,
  mapKeys: () => mapKeys,
  mapEntries: () => mapEntries,
  map: () => map5,
  keys: () => keys,
  isSubrecordBy: () => isSubrecordBy,
  isSubrecord: () => isSubrecord,
  isEmptyRecord: () => isEmptyRecord,
  isEmptyReadonlyRecord: () => isEmptyReadonlyRecord,
  intersection: () => intersection,
  has: () => has,
  getSomes: () => getSomes2,
  getRights: () => getRights2,
  getLefts: () => getLefts2,
  getEquivalence: () => getEquivalence4,
  get: () => get2,
  fromIterableWith: () => fromIterableWith,
  fromIterableBy: () => fromIterableBy,
  fromEntries: () => fromEntries,
  filterMap: () => filterMap3,
  filter: () => filter3,
  every: () => every2,
  empty: () => empty3,
  difference: () => difference,
  collect: () => collect
});
var empty3 = () => ({}), isEmptyRecord = (self) => keys(self).length === 0, isEmptyReadonlyRecord, fromIterableWith, fromIterableBy = (items, f) => fromIterableWith(items, (a) => [f(a), a]), fromEntries, collect, toEntries, size2 = (self) => keys(self).length, has, get2, modify, modifyOption, replaceOption, remove, pop, map5, mapKeys, mapEntries, filterMap3, filter3, getSomes2, getLefts2 = (self) => {
  const out = empty3();
  for (const key of keys(self)) {
    const value = self[key];
    if (isLeft2(value)) {
      out[key] = value.left;
    }
  }
  return out;
}, getRights2 = (self) => {
  const out = empty3();
  for (const key of keys(self)) {
    const value = self[key];
    if (isRight2(value)) {
      out[key] = value.right;
    }
  }
  return out;
}, partitionMap2, separate, partition, keys = (self) => Object.keys(self), values = (self) => collect(self, (_, a) => a), set, replace, isSubrecordBy = (equivalence2) => dual(2, (self, that) => {
  for (const key of keys(self)) {
    if (!has(that, key) || !equivalence2(self[key], that[key])) {
      return false;
    }
  }
  return true;
}), isSubrecord, reduce2, every2, some5, union, intersection, difference, getEquivalence4 = (equivalence2) => {
  const is = isSubrecordBy(equivalence2);
  return (self, that) => is(self, that) && is(that, self);
}, singleton = (key, value) => ({
  [key]: value
});
var init_Record = __esm(() => {
  init_Either();
  init_Equal();
  init_Function();
  init_Option();
  isEmptyReadonlyRecord = isEmptyRecord;
  fromIterableWith = /* @__PURE__ */ dual(2, (self, f) => {
    const out = empty3();
    for (const a of self) {
      const [k, b] = f(a);
      out[k] = b;
    }
    return out;
  });
  fromEntries = Object.fromEntries;
  collect = /* @__PURE__ */ dual(2, (self, f) => {
    const out = [];
    for (const key of keys(self)) {
      out.push(f(key, self[key]));
    }
    return out;
  });
  toEntries = /* @__PURE__ */ collect((key, value) => [key, value]);
  has = /* @__PURE__ */ dual(2, (self, key) => Object.prototype.hasOwnProperty.call(self, key));
  get2 = /* @__PURE__ */ dual(2, (self, key) => has(self, key) ? some3(self[key]) : none2());
  modify = /* @__PURE__ */ dual(3, (self, key, f) => {
    if (!has(self, key)) {
      return {
        ...self
      };
    }
    return {
      ...self,
      [key]: f(self[key])
    };
  });
  modifyOption = /* @__PURE__ */ dual(3, (self, key, f) => {
    if (!has(self, key)) {
      return none2();
    }
    return some3({
      ...self,
      [key]: f(self[key])
    });
  });
  replaceOption = /* @__PURE__ */ dual(3, (self, key, b) => modifyOption(self, key, () => b));
  remove = /* @__PURE__ */ dual(2, (self, key) => {
    if (!has(self, key)) {
      return {
        ...self
      };
    }
    const out = {
      ...self
    };
    delete out[key];
    return out;
  });
  pop = /* @__PURE__ */ dual(2, (self, key) => has(self, key) ? some3([self[key], remove(self, key)]) : none2());
  map5 = /* @__PURE__ */ dual(2, (self, f) => {
    const out = {
      ...self
    };
    for (const key of keys(self)) {
      out[key] = f(self[key], key);
    }
    return out;
  });
  mapKeys = /* @__PURE__ */ dual(2, (self, f) => {
    const out = {};
    for (const key of keys(self)) {
      const a = self[key];
      out[f(key, a)] = a;
    }
    return out;
  });
  mapEntries = /* @__PURE__ */ dual(2, (self, f) => {
    const out = {};
    for (const key of keys(self)) {
      const [k, b] = f(self[key], key);
      out[k] = b;
    }
    return out;
  });
  filterMap3 = /* @__PURE__ */ dual(2, (self, f) => {
    const out = empty3();
    for (const key of keys(self)) {
      const o = f(self[key], key);
      if (isSome2(o)) {
        out[key] = o.value;
      }
    }
    return out;
  });
  filter3 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const out = empty3();
    for (const key of keys(self)) {
      if (predicate(self[key], key)) {
        out[key] = self[key];
      }
    }
    return out;
  });
  getSomes2 = /* @__PURE__ */ filterMap3(identity);
  partitionMap2 = /* @__PURE__ */ dual(2, (self, f) => {
    const left3 = empty3();
    const right3 = empty3();
    for (const key of keys(self)) {
      const e = f(self[key], key);
      if (isLeft2(e)) {
        left3[key] = e.left;
      } else {
        right3[key] = e.right;
      }
    }
    return [left3, right3];
  });
  separate = /* @__PURE__ */ partitionMap2(identity);
  partition = /* @__PURE__ */ dual(2, (self, predicate) => {
    const left3 = empty3();
    const right3 = empty3();
    for (const key of keys(self)) {
      if (predicate(self[key], key)) {
        right3[key] = self[key];
      } else {
        left3[key] = self[key];
      }
    }
    return [left3, right3];
  });
  set = /* @__PURE__ */ dual(3, (self, key, value) => {
    return {
      ...self,
      [key]: value
    };
  });
  replace = /* @__PURE__ */ dual(3, (self, key, value) => {
    if (has(self, key)) {
      return {
        ...self,
        [key]: value
      };
    }
    return {
      ...self
    };
  });
  isSubrecord = /* @__PURE__ */ isSubrecordBy(/* @__PURE__ */ equivalence());
  reduce2 = /* @__PURE__ */ dual(3, (self, zero, f) => {
    let out = zero;
    for (const key of keys(self)) {
      out = f(out, self[key], key);
    }
    return out;
  });
  every2 = /* @__PURE__ */ dual(2, (self, refinement) => {
    for (const key of keys(self)) {
      if (!refinement(self[key], key)) {
        return false;
      }
    }
    return true;
  });
  some5 = /* @__PURE__ */ dual(2, (self, predicate) => {
    for (const key of keys(self)) {
      if (predicate(self[key], key)) {
        return true;
      }
    }
    return false;
  });
  union = /* @__PURE__ */ dual(3, (self, that, combine4) => {
    if (isEmptyRecord(self)) {
      return {
        ...that
      };
    }
    if (isEmptyRecord(that)) {
      return {
        ...self
      };
    }
    const out = empty3();
    for (const key of keys(self)) {
      if (has(that, key)) {
        out[key] = combine4(self[key], that[key]);
      } else {
        out[key] = self[key];
      }
    }
    for (const key of keys(that)) {
      if (!has(out, key)) {
        out[key] = that[key];
      }
    }
    return out;
  });
  intersection = /* @__PURE__ */ dual(3, (self, that, combine4) => {
    const out = empty3();
    if (isEmptyRecord(self) || isEmptyRecord(that)) {
      return out;
    }
    for (const key of keys(self)) {
      if (has(that, key)) {
        out[key] = combine4(self[key], that[key]);
      }
    }
    return out;
  });
  difference = /* @__PURE__ */ dual(2, (self, that) => {
    if (isEmptyRecord(self)) {
      return {
        ...that
      };
    }
    if (isEmptyRecord(that)) {
      return {
        ...self
      };
    }
    const out = {};
    for (const key of keys(self)) {
      if (!has(that, key)) {
        out[key] = self[key];
      }
    }
    for (const key of keys(that)) {
      if (!has(self, key)) {
        out[key] = that[key];
      }
    }
    return out;
  });
});

// node_modules/effect/dist/esm/Array.js
var exports_Array = {};
__export(exports_Array, {
  zipWith: () => zipWith4,
  zip: () => zip2,
  window: () => window2,
  unzip: () => unzip,
  unsafeGet: () => unsafeGet,
  unprepend: () => unprepend,
  unionWith: () => unionWith,
  union: () => union2,
  unfold: () => unfold2,
  unappend: () => unappend,
  takeWhile: () => takeWhile2,
  takeRight: () => takeRight,
  take: () => take2,
  tailNonEmpty: () => tailNonEmpty,
  tail: () => tail,
  splitWhere: () => splitWhere,
  splitNonEmptyAt: () => splitNonEmptyAt,
  splitAt: () => splitAt,
  split: () => split,
  span: () => span,
  sortWith: () => sortWith,
  sortBy: () => sortBy,
  sort: () => sort,
  some: () => some6,
  setNonEmptyLast: () => setNonEmptyLast,
  setNonEmptyHead: () => setNonEmptyHead,
  separate: () => separate2,
  scanRight: () => scanRight,
  scan: () => scan2,
  rotate: () => rotate,
  reverse: () => reverse2,
  replicate: () => replicate2,
  replaceOption: () => replaceOption2,
  replace: () => replace2,
  remove: () => remove2,
  reduceRight: () => reduceRight,
  reduce: () => reduce3,
  range: () => range2,
  prependAll: () => prependAll2,
  prepend: () => prepend2,
  partitionMap: () => partitionMap3,
  partition: () => partition2,
  pad: () => pad,
  of: () => of2,
  modifyOption: () => modifyOption2,
  modifyNonEmptyLast: () => modifyNonEmptyLast,
  modifyNonEmptyHead: () => modifyNonEmptyHead,
  modify: () => modify2,
  min: () => min2,
  max: () => max3,
  matchRight: () => matchRight,
  matchLeft: () => matchLeft,
  match: () => match3,
  mapAccum: () => mapAccum,
  map: () => map6,
  makeBy: () => makeBy2,
  make: () => make4,
  liftPredicate: () => liftPredicate3,
  liftOption: () => liftOption,
  liftNullable: () => liftNullable2,
  liftEither: () => liftEither,
  let: () => let_4,
  length: () => length,
  lastNonEmpty: () => lastNonEmpty,
  last: () => last,
  join: () => join,
  isNonEmptyReadonlyArray: () => isNonEmptyReadonlyArray,
  isNonEmptyArray: () => isNonEmptyArray2,
  isEmptyReadonlyArray: () => isEmptyReadonlyArray,
  isEmptyArray: () => isEmptyArray,
  isArray: () => isArray2,
  intersperse: () => intersperse2,
  intersectionWith: () => intersectionWith,
  intersection: () => intersection2,
  insertAt: () => insertAt,
  initNonEmpty: () => initNonEmpty,
  init: () => init,
  headNonEmpty: () => headNonEmpty,
  head: () => head2,
  groupWith: () => groupWith2,
  groupBy: () => groupBy2,
  group: () => group2,
  getSomes: () => getSomes3,
  getRights: () => getRights3,
  getOrder: () => getOrder3,
  getLefts: () => getLefts3,
  getEquivalence: () => getEquivalence5,
  get: () => get3,
  fromRecord: () => fromRecord2,
  fromOption: () => fromOption3,
  fromNullable: () => fromNullable3,
  fromIterable: () => fromIterable2,
  forEach: () => forEach2,
  flatten: () => flatten3,
  flatMapNullable: () => flatMapNullable3,
  flatMap: () => flatMap4,
  findLastIndex: () => findLastIndex,
  findLast: () => findLast2,
  findFirstIndex: () => findFirstIndex,
  findFirst: () => findFirst2,
  filterMapWhile: () => filterMapWhile2,
  filterMap: () => filterMap4,
  filter: () => filter4,
  extend: () => extend,
  every: () => every3,
  ensure: () => ensure,
  empty: () => empty4,
  dropWhile: () => dropWhile,
  dropRight: () => dropRight,
  drop: () => drop2,
  differenceWith: () => differenceWith,
  difference: () => difference2,
  dedupeWith: () => dedupeWith,
  dedupeAdjacentWith: () => dedupeAdjacentWith2,
  dedupeAdjacent: () => dedupeAdjacent2,
  dedupe: () => dedupe,
  copy: () => copy,
  containsWith: () => containsWith3,
  contains: () => contains3,
  chunksOf: () => chunksOf2,
  chop: () => chop,
  cartesianWith: () => cartesianWith2,
  cartesian: () => cartesian2,
  bindTo: () => bindTo4,
  bind: () => bind4,
  appendAll: () => appendAll2,
  append: () => append2,
  allocate: () => allocate,
  Do: () => Do3
});
var make4 = (...elements) => elements, allocate = (n) => new Array(n), makeBy2, range2 = (start, end) => start <= end ? makeBy2(end - start + 1, (i2) => start + i2) : [start], replicate2, fromIterable2 = (collection) => Array.isArray(collection) ? collection : Array.from(collection), ensure = (self) => Array.isArray(self) ? self : [self], fromRecord2, fromOption3, match3, matchLeft, matchRight, prepend2, prependAll2, append2, appendAll2, scan2, scanRight, isArray2, isEmptyArray = (self) => self.length === 0, isEmptyReadonlyArray, isNonEmptyArray2, isNonEmptyReadonlyArray, length = (self) => self.length, isOutOfBounds = (i2, as2) => i2 < 0 || i2 >= as2.length, clamp2 = (i2, as2) => Math.floor(Math.min(Math.max(0, i2), as2.length)), get3, unsafeGet, unprepend = (self) => [headNonEmpty(self), tailNonEmpty(self)], unappend = (self) => [initNonEmpty(self), lastNonEmpty(self)], head2, headNonEmpty, last = (self) => isNonEmptyReadonlyArray(self) ? some3(lastNonEmpty(self)) : none2(), lastNonEmpty = (self) => self[self.length - 1], tail = (self) => {
  const input = fromIterable2(self);
  return isNonEmptyReadonlyArray(input) ? some3(tailNonEmpty(input)) : none2();
}, tailNonEmpty = (self) => self.slice(1), init = (self) => {
  const input = fromIterable2(self);
  return isNonEmptyReadonlyArray(input) ? some3(initNonEmpty(input)) : none2();
}, initNonEmpty = (self) => self.slice(0, -1), take2, takeRight, takeWhile2, spanIndex = (self, predicate) => {
  let i2 = 0;
  for (const a of self) {
    if (!predicate(a, i2)) {
      break;
    }
    i2++;
  }
  return i2;
}, span, drop2, dropRight, dropWhile, findFirstIndex, findLastIndex, findFirst2, findLast2, insertAt, replace2, replaceOption2, modify2, modifyOption2, remove2, reverse2 = (self) => Array.from(self).reverse(), sort, sortWith, sortBy = (...orders) => {
  const sortByAll = sort(combineAll2(orders));
  return (self) => {
    const input = fromIterable2(self);
    if (isNonEmptyReadonlyArray(input)) {
      return sortByAll(input);
    }
    return [];
  };
}, zip2, zipWith4, unzip = (self) => {
  const input = fromIterable2(self);
  if (isNonEmptyReadonlyArray(input)) {
    const fa = [input[0][0]];
    const fb = [input[0][1]];
    for (let i2 = 1;i2 < input.length; i2++) {
      fa[i2] = input[i2][0];
      fb[i2] = input[i2][1];
    }
    return [fa, fb];
  }
  return [[], []];
}, intersperse2, modifyNonEmptyHead, setNonEmptyHead, modifyNonEmptyLast, setNonEmptyLast, rotate, containsWith3 = (isEquivalent) => dual(2, (self, a) => {
  for (const i2 of self) {
    if (isEquivalent(a, i2)) {
      return true;
    }
  }
  return false;
}), _equivalence3, contains3, chop, splitAt, splitNonEmptyAt, split, splitWhere, copy = (self) => self.slice(), pad, chunksOf2, window2, groupWith2, group2, groupBy2, unionWith, union2, intersectionWith = (isEquivalent) => {
  const has2 = containsWith3(isEquivalent);
  return dual(2, (self, that) => fromIterable2(self).filter((a) => has2(that, a)));
}, intersection2, differenceWith = (isEquivalent) => {
  const has2 = containsWith3(isEquivalent);
  return dual(2, (self, that) => fromIterable2(self).filter((a) => !has2(that, a)));
}, difference2, empty4 = () => [], of2 = (a) => [a], map6, flatMap4, flatten3, filterMap4, filterMapWhile2, partitionMap3, getSomes3, getLefts3 = (self) => {
  const out = [];
  for (const a of self) {
    if (isLeft2(a)) {
      out.push(a.left);
    }
  }
  return out;
}, getRights3 = (self) => {
  const out = [];
  for (const a of self) {
    if (isRight2(a)) {
      out.push(a.right);
    }
  }
  return out;
}, filter4, partition2, separate2, reduce3, reduceRight, liftPredicate3 = (predicate) => (b) => predicate(b) ? [b] : [], liftOption = (f) => (...a) => fromOption3(f(...a)), fromNullable3 = (a) => a == null ? empty4() : [a], liftNullable2 = (f) => (...a) => fromNullable3(f(...a)), flatMapNullable3, liftEither = (f) => (...a) => {
  const e = f(...a);
  return isLeft2(e) ? [] : [e.right];
}, every3, some6, extend, min2, max3, unfold2 = (b, f) => {
  const out = [];
  let next = b;
  let o;
  while (isSome2(o = f(next))) {
    const [a, b2] = o.value;
    out.push(a);
    next = b2;
  }
  return out;
}, getOrder3, getEquivalence5, forEach2, dedupeWith, dedupe = (self) => dedupeWith(self, equivalence()), dedupeAdjacentWith2, dedupeAdjacent2, join, mapAccum, cartesianWith2, cartesian2, Do3, bind4, bindTo4, let_4;
var init_Array = __esm(() => {
  init_Either();
  init_Equal();
  init_Equivalence();
  init_Function();
  init_doNotation();
  init_Iterable();
  init_Option();
  init_Order();
  init_Predicate();
  init_Record();
  init_Tuple();
  makeBy2 = /* @__PURE__ */ dual(2, (n, f) => {
    const max3 = Math.max(1, Math.floor(n));
    const out = new Array(max3);
    for (let i2 = 0;i2 < max3; i2++) {
      out[i2] = f(i2);
    }
    return out;
  });
  replicate2 = /* @__PURE__ */ dual(2, (a, n) => makeBy2(n, () => a));
  fromRecord2 = toEntries;
  fromOption3 = toArray;
  match3 = /* @__PURE__ */ dual(2, (self, {
    onEmpty,
    onNonEmpty
  }) => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty());
  matchLeft = /* @__PURE__ */ dual(2, (self, {
    onEmpty,
    onNonEmpty
  }) => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty());
  matchRight = /* @__PURE__ */ dual(2, (self, {
    onEmpty,
    onNonEmpty
  }) => isNonEmptyReadonlyArray(self) ? onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) : onEmpty());
  prepend2 = /* @__PURE__ */ dual(2, (self, head2) => [head2, ...self]);
  prependAll2 = /* @__PURE__ */ dual(2, (self, that) => fromIterable2(that).concat(fromIterable2(self)));
  append2 = /* @__PURE__ */ dual(2, (self, last) => [...self, last]);
  appendAll2 = /* @__PURE__ */ dual(2, (self, that) => fromIterable2(self).concat(fromIterable2(that)));
  scan2 = /* @__PURE__ */ dual(3, (self, b, f) => {
    const out = [b];
    let i2 = 0;
    for (const a of self) {
      out[i2 + 1] = f(out[i2], a);
      i2++;
    }
    return out;
  });
  scanRight = /* @__PURE__ */ dual(3, (self, b, f) => {
    const input = fromIterable2(self);
    const out = new Array(input.length + 1);
    out[input.length] = b;
    for (let i2 = input.length - 1;i2 >= 0; i2--) {
      out[i2] = f(out[i2 + 1], input[i2]);
    }
    return out;
  });
  isArray2 = Array.isArray;
  isEmptyReadonlyArray = isEmptyArray;
  isNonEmptyArray2 = isNonEmptyArray;
  isNonEmptyReadonlyArray = isNonEmptyArray;
  get3 = /* @__PURE__ */ dual(2, (self, index) => {
    const i2 = Math.floor(index);
    return isOutOfBounds(i2, self) ? none2() : some3(self[i2]);
  });
  unsafeGet = /* @__PURE__ */ dual(2, (self, index) => {
    const i2 = Math.floor(index);
    if (isOutOfBounds(i2, self)) {
      throw new Error(`Index ${i2} out of bounds`);
    }
    return self[i2];
  });
  head2 = /* @__PURE__ */ get3(0);
  headNonEmpty = /* @__PURE__ */ unsafeGet(0);
  take2 = /* @__PURE__ */ dual(2, (self, n) => {
    const input = fromIterable2(self);
    return input.slice(0, clamp2(n, input));
  });
  takeRight = /* @__PURE__ */ dual(2, (self, n) => {
    const input = fromIterable2(self);
    const i2 = clamp2(n, input);
    return i2 === 0 ? [] : input.slice(-i2);
  });
  takeWhile2 = /* @__PURE__ */ dual(2, (self, predicate) => {
    let i2 = 0;
    const out = [];
    for (const a of self) {
      if (!predicate(a, i2)) {
        break;
      }
      out.push(a);
      i2++;
    }
    return out;
  });
  span = /* @__PURE__ */ dual(2, (self, predicate) => splitAt(self, spanIndex(self, predicate)));
  drop2 = /* @__PURE__ */ dual(2, (self, n) => {
    const input = fromIterable2(self);
    return input.slice(clamp2(n, input), input.length);
  });
  dropRight = /* @__PURE__ */ dual(2, (self, n) => {
    const input = fromIterable2(self);
    return input.slice(0, input.length - clamp2(n, input));
  });
  dropWhile = /* @__PURE__ */ dual(2, (self, predicate) => fromIterable2(self).slice(spanIndex(self, predicate)));
  findFirstIndex = /* @__PURE__ */ dual(2, (self, predicate) => {
    let i2 = 0;
    for (const a of self) {
      if (predicate(a, i2)) {
        return some3(i2);
      }
      i2++;
    }
    return none2();
  });
  findLastIndex = /* @__PURE__ */ dual(2, (self, predicate) => {
    const input = fromIterable2(self);
    for (let i2 = input.length - 1;i2 >= 0; i2--) {
      if (predicate(input[i2], i2)) {
        return some3(i2);
      }
    }
    return none2();
  });
  findFirst2 = findFirst;
  findLast2 = /* @__PURE__ */ dual(2, (self, f) => {
    const input = fromIterable2(self);
    for (let i2 = input.length - 1;i2 >= 0; i2--) {
      const a = input[i2];
      const o = f(a, i2);
      if (isBoolean2(o)) {
        if (o) {
          return some3(a);
        }
      } else {
        if (isSome2(o)) {
          return o;
        }
      }
    }
    return none2();
  });
  insertAt = /* @__PURE__ */ dual(3, (self, i2, b) => {
    const out = Array.from(self);
    if (i2 < 0 || i2 > out.length) {
      return none2();
    }
    out.splice(i2, 0, b);
    return some3(out);
  });
  replace2 = /* @__PURE__ */ dual(3, (self, i2, b) => modify2(self, i2, () => b));
  replaceOption2 = /* @__PURE__ */ dual(3, (self, i2, b) => modifyOption2(self, i2, () => b));
  modify2 = /* @__PURE__ */ dual(3, (self, i2, f) => getOrElse2(modifyOption2(self, i2, f), () => Array.from(self)));
  modifyOption2 = /* @__PURE__ */ dual(3, (self, i2, f) => {
    const arr = Array.from(self);
    if (isOutOfBounds(i2, arr)) {
      return none2();
    }
    const out = arr;
    const b = f(arr[i2]);
    out[i2] = b;
    return some3(out);
  });
  remove2 = /* @__PURE__ */ dual(2, (self, i2) => {
    const out = Array.from(self);
    if (isOutOfBounds(i2, out)) {
      return out;
    }
    out.splice(i2, 1);
    return out;
  });
  sort = /* @__PURE__ */ dual(2, (self, O) => {
    const out = Array.from(self);
    out.sort(O);
    return out;
  });
  sortWith = /* @__PURE__ */ dual(3, (self, f, order) => Array.from(self).map((a) => [a, f(a)]).sort(([, a], [, b]) => order(a, b)).map(([_]) => _));
  zip2 = /* @__PURE__ */ dual(2, (self, that) => zipWith4(self, that, make3));
  zipWith4 = /* @__PURE__ */ dual(3, (self, that, f) => {
    const as2 = fromIterable2(self);
    const bs = fromIterable2(that);
    if (isNonEmptyReadonlyArray(as2) && isNonEmptyReadonlyArray(bs)) {
      const out = [f(headNonEmpty(as2), headNonEmpty(bs))];
      const len = Math.min(as2.length, bs.length);
      for (let i2 = 1;i2 < len; i2++) {
        out[i2] = f(as2[i2], bs[i2]);
      }
      return out;
    }
    return [];
  });
  intersperse2 = /* @__PURE__ */ dual(2, (self, middle) => {
    const input = fromIterable2(self);
    if (isNonEmptyReadonlyArray(input)) {
      const out = [headNonEmpty(input)];
      const tail2 = tailNonEmpty(input);
      for (let i2 = 0;i2 < tail2.length; i2++) {
        if (i2 < tail2.length) {
          out.push(middle);
        }
        out.push(tail2[i2]);
      }
      return out;
    }
    return [];
  });
  modifyNonEmptyHead = /* @__PURE__ */ dual(2, (self, f) => [f(headNonEmpty(self)), ...tailNonEmpty(self)]);
  setNonEmptyHead = /* @__PURE__ */ dual(2, (self, b) => modifyNonEmptyHead(self, () => b));
  modifyNonEmptyLast = /* @__PURE__ */ dual(2, (self, f) => append2(initNonEmpty(self), f(lastNonEmpty(self))));
  setNonEmptyLast = /* @__PURE__ */ dual(2, (self, b) => modifyNonEmptyLast(self, () => b));
  rotate = /* @__PURE__ */ dual(2, (self, n) => {
    const input = fromIterable2(self);
    if (isNonEmptyReadonlyArray(input)) {
      const len = input.length;
      const m = Math.round(n) % len;
      if (isOutOfBounds(Math.abs(m), input) || m === 0) {
        return copy(input);
      }
      if (m < 0) {
        const [f, s] = splitNonEmptyAt(input, -m);
        return appendAll2(s, f);
      } else {
        return rotate(self, m - len);
      }
    }
    return [];
  });
  _equivalence3 = /* @__PURE__ */ equivalence();
  contains3 = /* @__PURE__ */ containsWith3(_equivalence3);
  chop = /* @__PURE__ */ dual(2, (self, f) => {
    const input = fromIterable2(self);
    if (isNonEmptyReadonlyArray(input)) {
      const [b, rest] = f(input);
      const out = [b];
      let next = rest;
      while (isNonEmptyArray(next)) {
        const [b2, rest2] = f(next);
        out.push(b2);
        next = rest2;
      }
      return out;
    }
    return [];
  });
  splitAt = /* @__PURE__ */ dual(2, (self, n) => {
    const input = Array.from(self);
    const _n = Math.floor(n);
    if (isNonEmptyReadonlyArray(input)) {
      if (_n >= 1) {
        return splitNonEmptyAt(input, _n);
      }
      return [[], input];
    }
    return [input, []];
  });
  splitNonEmptyAt = /* @__PURE__ */ dual(2, (self, n) => {
    const _n = Math.max(1, Math.floor(n));
    return _n >= self.length ? [copy(self), []] : [prepend2(self.slice(1, _n), headNonEmpty(self)), self.slice(_n)];
  });
  split = /* @__PURE__ */ dual(2, (self, n) => {
    const input = fromIterable2(self);
    return chunksOf2(input, Math.ceil(input.length / Math.floor(n)));
  });
  splitWhere = /* @__PURE__ */ dual(2, (self, predicate) => span(self, (a, i2) => !predicate(a, i2)));
  pad = /* @__PURE__ */ dual(3, (self, n, fill) => {
    if (self.length >= n) {
      return take2(self, n);
    }
    return appendAll2(self, makeBy2(n - self.length, () => fill));
  });
  chunksOf2 = /* @__PURE__ */ dual(2, (self, n) => {
    const input = fromIterable2(self);
    if (isNonEmptyReadonlyArray(input)) {
      return chop(input, splitNonEmptyAt(n));
    }
    return [];
  });
  window2 = /* @__PURE__ */ dual(2, (self, n) => {
    const input = fromIterable2(self);
    if (n > 0 && isNonEmptyReadonlyArray(input)) {
      return Array.from({
        length: input.length - (n - 1)
      }, (_, index) => input.slice(index, index + n));
    }
    return [];
  });
  groupWith2 = /* @__PURE__ */ dual(2, (self, isEquivalent) => chop(self, (as2) => {
    const h = headNonEmpty(as2);
    const out = [h];
    let i2 = 1;
    for (;i2 < as2.length; i2++) {
      const a = as2[i2];
      if (isEquivalent(a, h)) {
        out.push(a);
      } else {
        break;
      }
    }
    return [out, as2.slice(i2)];
  }));
  group2 = /* @__PURE__ */ groupWith2(/* @__PURE__ */ equivalence());
  groupBy2 = /* @__PURE__ */ dual(2, (self, f) => {
    const out = {};
    for (const a of self) {
      const k = f(a);
      if (Object.prototype.hasOwnProperty.call(out, k)) {
        out[k].push(a);
      } else {
        out[k] = [a];
      }
    }
    return out;
  });
  unionWith = /* @__PURE__ */ dual(3, (self, that, isEquivalent) => {
    const a = fromIterable2(self);
    const b = fromIterable2(that);
    if (isNonEmptyReadonlyArray(a)) {
      if (isNonEmptyReadonlyArray(b)) {
        const dedupe = dedupeWith(isEquivalent);
        return dedupe(appendAll2(a, b));
      }
      return a;
    }
    return b;
  });
  union2 = /* @__PURE__ */ dual(2, (self, that) => unionWith(self, that, _equivalence3));
  intersection2 = /* @__PURE__ */ intersectionWith(_equivalence3);
  difference2 = /* @__PURE__ */ differenceWith(_equivalence3);
  map6 = /* @__PURE__ */ dual(2, (self, f) => self.map(f));
  flatMap4 = /* @__PURE__ */ dual(2, (self, f) => {
    if (isEmptyReadonlyArray(self)) {
      return [];
    }
    const out = [];
    for (let i2 = 0;i2 < self.length; i2++) {
      const inner = f(self[i2], i2);
      for (let j = 0;j < inner.length; j++) {
        out.push(inner[j]);
      }
    }
    return out;
  });
  flatten3 = /* @__PURE__ */ flatMap4(identity);
  filterMap4 = /* @__PURE__ */ dual(2, (self, f) => {
    const as2 = fromIterable2(self);
    const out = [];
    for (let i2 = 0;i2 < as2.length; i2++) {
      const o = f(as2[i2], i2);
      if (isSome2(o)) {
        out.push(o.value);
      }
    }
    return out;
  });
  filterMapWhile2 = /* @__PURE__ */ dual(2, (self, f) => {
    let i2 = 0;
    const out = [];
    for (const a of self) {
      const b = f(a, i2);
      if (isSome2(b)) {
        out.push(b.value);
      } else {
        break;
      }
      i2++;
    }
    return out;
  });
  partitionMap3 = /* @__PURE__ */ dual(2, (self, f) => {
    const left3 = [];
    const right3 = [];
    const as2 = fromIterable2(self);
    for (let i2 = 0;i2 < as2.length; i2++) {
      const e = f(as2[i2], i2);
      if (isLeft2(e)) {
        left3.push(e.left);
      } else {
        right3.push(e.right);
      }
    }
    return [left3, right3];
  });
  getSomes3 = /* @__PURE__ */ filterMap4(identity);
  filter4 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const as2 = fromIterable2(self);
    const out = [];
    for (let i2 = 0;i2 < as2.length; i2++) {
      if (predicate(as2[i2], i2)) {
        out.push(as2[i2]);
      }
    }
    return out;
  });
  partition2 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const left3 = [];
    const right3 = [];
    const as2 = fromIterable2(self);
    for (let i2 = 0;i2 < as2.length; i2++) {
      if (predicate(as2[i2], i2)) {
        right3.push(as2[i2]);
      } else {
        left3.push(as2[i2]);
      }
    }
    return [left3, right3];
  });
  separate2 = /* @__PURE__ */ partitionMap3(identity);
  reduce3 = /* @__PURE__ */ dual(3, (self, b, f) => fromIterable2(self).reduce((b2, a, i2) => f(b2, a, i2), b));
  reduceRight = /* @__PURE__ */ dual(3, (self, b, f) => fromIterable2(self).reduceRight((b2, a, i2) => f(b2, a, i2), b));
  flatMapNullable3 = /* @__PURE__ */ dual(2, (self, f) => flatMap4(self, (a) => fromNullable3(f(a))));
  every3 = /* @__PURE__ */ dual(2, (self, refinement) => self.every(refinement));
  some6 = /* @__PURE__ */ dual(2, (self, predicate) => self.some(predicate));
  extend = /* @__PURE__ */ dual(2, (self, f) => self.map((_, i2, as2) => f(as2.slice(i2))));
  min2 = /* @__PURE__ */ dual(2, (self, O) => self.reduce(min(O)));
  max3 = /* @__PURE__ */ dual(2, (self, O) => self.reduce(max2(O)));
  getOrder3 = array3;
  getEquivalence5 = array;
  forEach2 = /* @__PURE__ */ dual(2, (self, f) => fromIterable2(self).forEach((a, i2) => f(a, i2)));
  dedupeWith = /* @__PURE__ */ dual(2, (self, isEquivalent) => {
    const input = fromIterable2(self);
    if (isNonEmptyReadonlyArray(input)) {
      const out = [headNonEmpty(input)];
      const rest = tailNonEmpty(input);
      for (const r of rest) {
        if (out.every((a) => !isEquivalent(r, a))) {
          out.push(r);
        }
      }
      return out;
    }
    return [];
  });
  dedupeAdjacentWith2 = /* @__PURE__ */ dual(2, (self, isEquivalent) => {
    const out = [];
    let lastA = none2();
    for (const a of self) {
      if (isNone2(lastA) || !isEquivalent(a, lastA.value)) {
        out.push(a);
        lastA = some3(a);
      }
    }
    return out;
  });
  dedupeAdjacent2 = /* @__PURE__ */ dedupeAdjacentWith2(/* @__PURE__ */ equivalence());
  join = /* @__PURE__ */ dual(2, (self, sep) => fromIterable2(self).join(sep));
  mapAccum = /* @__PURE__ */ dual(3, (self, s, f) => {
    let i2 = 0;
    let s1 = s;
    const out = [];
    for (const a of self) {
      const r = f(s1, a, i2);
      s1 = r[0];
      out.push(r[1]);
      i2++;
    }
    return [s1, out];
  });
  cartesianWith2 = /* @__PURE__ */ dual(3, (self, that, f) => flatMap4(self, (a) => map6(that, (b) => f(a, b))));
  cartesian2 = /* @__PURE__ */ dual(2, (self, that) => cartesianWith2(self, that, (a, b) => [a, b]));
  Do3 = /* @__PURE__ */ of2({});
  bind4 = /* @__PURE__ */ bind(map6, flatMap4);
  bindTo4 = /* @__PURE__ */ bindTo(map6);
  let_4 = /* @__PURE__ */ let_(map6);
});

// node_modules/fast-check/lib/esm/check/precondition/PreconditionFailure.js
var PreconditionFailure;
var init_PreconditionFailure = __esm(() => {
  PreconditionFailure = class PreconditionFailure extends Error {
    constructor(interruptExecution = false) {
      super();
      this.interruptExecution = interruptExecution;
      this.footprint = PreconditionFailure.SharedFootPrint;
    }
    static isFailure(err2) {
      return err2 != null && err2.footprint === PreconditionFailure.SharedFootPrint;
    }
  };
  PreconditionFailure.SharedFootPrint = Symbol.for("fast-check/PreconditionFailure");
});

// node_modules/fast-check/lib/esm/check/precondition/Pre.js
function pre(expectTruthy) {
  if (!expectTruthy) {
    throw new PreconditionFailure;
  }
}
var init_Pre = __esm(() => {
  init_PreconditionFailure();
});

// node_modules/fast-check/lib/esm/stream/StreamHelpers.js
function nilHelper() {
  return Nil.nil;
}
function* mapHelper(g, f) {
  for (const v of g) {
    yield f(v);
  }
}
function* flatMapHelper(g, f) {
  for (const v of g) {
    yield* f(v);
  }
}
function* filterHelper(g, f) {
  for (const v of g) {
    if (f(v)) {
      yield v;
    }
  }
}
function* takeNHelper(g, n) {
  for (let i2 = 0;i2 < n; ++i2) {
    const cur = g.next();
    if (cur.done) {
      break;
    }
    yield cur.value;
  }
}
function* takeWhileHelper(g, f) {
  let cur = g.next();
  while (!cur.done && f(cur.value)) {
    yield cur.value;
    cur = g.next();
  }
}
function* joinHelper(g, others) {
  for (let cur = g.next();!cur.done; cur = g.next()) {
    yield cur.value;
  }
  for (const s of others) {
    for (let cur = s.next();!cur.done; cur = s.next()) {
      yield cur.value;
    }
  }
}
var Nil;
var init_StreamHelpers = __esm(() => {
  Nil = class Nil {
    [Symbol.iterator]() {
      return this;
    }
    next(value) {
      return { value, done: true };
    }
  };
  Nil.nil = new Nil;
});

// node_modules/fast-check/lib/esm/stream/Stream.js
function stream(g) {
  return new Stream(g);
}
var safeSymbolIterator, Stream;
var init_Stream = __esm(() => {
  init_StreamHelpers();
  safeSymbolIterator = Symbol.iterator;
  Stream = class Stream {
    static nil() {
      return new Stream(nilHelper());
    }
    static of(...elements) {
      return new Stream(elements[safeSymbolIterator]());
    }
    constructor(g) {
      this.g = g;
    }
    next() {
      return this.g.next();
    }
    [Symbol.iterator]() {
      return this.g;
    }
    map(f) {
      return new Stream(mapHelper(this.g, f));
    }
    flatMap(f) {
      return new Stream(flatMapHelper(this.g, f));
    }
    dropWhile(f) {
      let foundEligible = false;
      function* helper(v) {
        if (foundEligible || !f(v)) {
          foundEligible = true;
          yield v;
        }
      }
      return this.flatMap(helper);
    }
    drop(n) {
      if (n <= 0) {
        return this;
      }
      let idx = 0;
      function helper() {
        return idx++ < n;
      }
      return this.dropWhile(helper);
    }
    takeWhile(f) {
      return new Stream(takeWhileHelper(this.g, f));
    }
    take(n) {
      return new Stream(takeNHelper(this.g, n));
    }
    filter(f) {
      return new Stream(filterHelper(this.g, f));
    }
    every(f) {
      for (const v of this.g) {
        if (!f(v)) {
          return false;
        }
      }
      return true;
    }
    has(f) {
      for (const v of this.g) {
        if (f(v)) {
          return [true, v];
        }
      }
      return [false, null];
    }
    join(...others) {
      return new Stream(joinHelper(this.g, others));
    }
    getNthOrLast(nth) {
      let remaining = nth;
      let last2 = null;
      for (const v of this.g) {
        if (remaining-- === 0)
          return v;
        last2 = v;
      }
      return last2;
    }
  };
});

// node_modules/fast-check/lib/esm/check/symbols.js
function hasCloneMethod(instance) {
  return instance !== null && (typeof instance === "object" || typeof instance === "function") && cloneMethod in instance && typeof instance[cloneMethod] === "function";
}
function cloneIfNeeded(instance) {
  return hasCloneMethod(instance) ? instance[cloneMethod]() : instance;
}
var cloneMethod;
var init_symbols = __esm(() => {
  cloneMethod = Symbol.for("fast-check/cloneMethod");
});

// node_modules/fast-check/lib/esm/check/arbitrary/definition/Value.js
class Value {
  constructor(value_, context, customGetValue = undefined) {
    this.value_ = value_;
    this.context = context;
    this.hasToBeCloned = customGetValue !== undefined || hasCloneMethod(value_);
    this.readOnce = false;
    if (this.hasToBeCloned) {
      safeObjectDefineProperty(this, "value", { get: customGetValue !== undefined ? customGetValue : this.getValue });
    } else {
      this.value = value_;
    }
  }
  getValue() {
    if (this.hasToBeCloned) {
      if (!this.readOnce) {
        this.readOnce = true;
        return this.value_;
      }
      return this.value_[cloneMethod]();
    }
    return this.value_;
  }
}
var safeObjectDefineProperty;
var init_Value = __esm(() => {
  init_symbols();
  safeObjectDefineProperty = Object.defineProperty;
});

// node_modules/fast-check/lib/esm/check/arbitrary/definition/Arbitrary.js
class Arbitrary {
  filter(refinement) {
    return new FilterArbitrary(this, refinement);
  }
  map(mapper, unmapper) {
    return new MapArbitrary(this, mapper, unmapper);
  }
  chain(chainer) {
    return new ChainArbitrary(this, chainer);
  }
  noShrink() {
    return new NoShrinkArbitrary(this);
  }
  noBias() {
    return new NoBiasArbitrary(this);
  }
}
function isArbitrary(instance) {
  return typeof instance === "object" && instance !== null && "generate" in instance && "shrink" in instance && "canShrinkWithoutContext" in instance;
}
function assertIsArbitrary(instance) {
  if (!isArbitrary(instance)) {
    throw new Error("Unexpected value received: not an instance of Arbitrary");
  }
}
var safeObjectAssign, ChainArbitrary, MapArbitrary, FilterArbitrary, NoShrinkArbitrary, NoBiasArbitrary;
var init_Arbitrary = __esm(() => {
  init_Stream();
  init_symbols();
  init_Value();
  safeObjectAssign = Object.assign;
  ChainArbitrary = class ChainArbitrary extends Arbitrary {
    constructor(arb, chainer) {
      super();
      this.arb = arb;
      this.chainer = chainer;
    }
    generate(mrng, biasFactor) {
      const clonedMrng = mrng.clone();
      const src = this.arb.generate(mrng, biasFactor);
      return this.valueChainer(src, mrng, clonedMrng, biasFactor);
    }
    canShrinkWithoutContext(value) {
      return false;
    }
    shrink(value, context) {
      if (this.isSafeContext(context)) {
        return (!context.stoppedForOriginal ? this.arb.shrink(context.originalValue, context.originalContext).map((v) => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias)) : Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map((dst) => {
          const newContext = safeObjectAssign(safeObjectAssign({}, context), {
            chainedContext: dst.context,
            stoppedForOriginal: true
          });
          return new Value(dst.value_, newContext);
        }));
      }
      return Stream.nil();
    }
    valueChainer(v, generateMrng, clonedMrng, biasFactor) {
      const chainedArbitrary = this.chainer(v.value_);
      const dst = chainedArbitrary.generate(generateMrng, biasFactor);
      const context = {
        originalBias: biasFactor,
        originalValue: v.value_,
        originalContext: v.context,
        stoppedForOriginal: false,
        chainedArbitrary,
        chainedContext: dst.context,
        clonedMrng
      };
      return new Value(dst.value_, context);
    }
    isSafeContext(context) {
      return context != null && typeof context === "object" && "originalBias" in context && "originalValue" in context && "originalContext" in context && "stoppedForOriginal" in context && "chainedArbitrary" in context && "chainedContext" in context && "clonedMrng" in context;
    }
  };
  MapArbitrary = class MapArbitrary extends Arbitrary {
    constructor(arb, mapper, unmapper) {
      super();
      this.arb = arb;
      this.mapper = mapper;
      this.unmapper = unmapper;
      this.bindValueMapper = (v) => this.valueMapper(v);
    }
    generate(mrng, biasFactor) {
      const g = this.arb.generate(mrng, biasFactor);
      return this.valueMapper(g);
    }
    canShrinkWithoutContext(value) {
      if (this.unmapper !== undefined) {
        try {
          const unmapped = this.unmapper(value);
          return this.arb.canShrinkWithoutContext(unmapped);
        } catch (_err) {
          return false;
        }
      }
      return false;
    }
    shrink(value, context) {
      if (this.isSafeContext(context)) {
        return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);
      }
      if (this.unmapper !== undefined) {
        const unmapped = this.unmapper(value);
        return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);
      }
      return Stream.nil();
    }
    mapperWithCloneIfNeeded(v) {
      const sourceValue = v.value;
      const mappedValue = this.mapper(sourceValue);
      if (v.hasToBeCloned && (typeof mappedValue === "object" && mappedValue !== null || typeof mappedValue === "function") && Object.isExtensible(mappedValue) && !hasCloneMethod(mappedValue)) {
        Object.defineProperty(mappedValue, cloneMethod, { get: () => () => this.mapperWithCloneIfNeeded(v)[0] });
      }
      return [mappedValue, sourceValue];
    }
    valueMapper(v) {
      const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);
      const context = { originalValue: sourceValue, originalContext: v.context };
      return new Value(mappedValue, context);
    }
    isSafeContext(context) {
      return context != null && typeof context === "object" && "originalValue" in context && "originalContext" in context;
    }
  };
  FilterArbitrary = class FilterArbitrary extends Arbitrary {
    constructor(arb, refinement) {
      super();
      this.arb = arb;
      this.refinement = refinement;
      this.bindRefinementOnValue = (v) => this.refinementOnValue(v);
    }
    generate(mrng, biasFactor) {
      while (true) {
        const g = this.arb.generate(mrng, biasFactor);
        if (this.refinementOnValue(g)) {
          return g;
        }
      }
    }
    canShrinkWithoutContext(value) {
      return this.arb.canShrinkWithoutContext(value) && this.refinement(value);
    }
    shrink(value, context) {
      return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);
    }
    refinementOnValue(v) {
      return this.refinement(v.value);
    }
  };
  NoShrinkArbitrary = class NoShrinkArbitrary extends Arbitrary {
    constructor(arb) {
      super();
      this.arb = arb;
    }
    generate(mrng, biasFactor) {
      return this.arb.generate(mrng, biasFactor);
    }
    canShrinkWithoutContext(value) {
      return this.arb.canShrinkWithoutContext(value);
    }
    shrink(_value, _context) {
      return Stream.nil();
    }
    noShrink() {
      return this;
    }
  };
  NoBiasArbitrary = class NoBiasArbitrary extends Arbitrary {
    constructor(arb) {
      super();
      this.arb = arb;
    }
    generate(mrng, _biasFactor) {
      return this.arb.generate(mrng, undefined);
    }
    canShrinkWithoutContext(value) {
      return this.arb.canShrinkWithoutContext(value);
    }
    shrink(value, context) {
      return this.arb.shrink(value, context);
    }
    noBias() {
      return this;
    }
  };
});

// node_modules/fast-check/lib/esm/utils/apply.js
function safeExtractApply(f) {
  try {
    return f.apply;
  } catch (err2) {
    return;
  }
}
function safeApplyHacky(f, instance, args) {
  const ff = f;
  ff[ApplySymbol] = untouchedApply;
  const out = ff[ApplySymbol](instance, args);
  delete ff[ApplySymbol];
  return out;
}
function safeApply(f, instance, args) {
  if (safeExtractApply(f) === untouchedApply) {
    return f.apply(instance, args);
  }
  return safeApplyHacky(f, instance, args);
}
var untouchedApply, ApplySymbol;
var init_apply = __esm(() => {
  untouchedApply = Function.prototype.apply;
  ApplySymbol = Symbol("apply");
});

// node_modules/fast-check/lib/esm/utils/globals.js
function extractForEach(instance) {
  try {
    return instance.forEach;
  } catch (err2) {
    return;
  }
}
function extractIndexOf(instance) {
  try {
    return instance.indexOf;
  } catch (err2) {
    return;
  }
}
function extractJoin(instance) {
  try {
    return instance.join;
  } catch (err2) {
    return;
  }
}
function extractMap(instance) {
  try {
    return instance.map;
  } catch (err2) {
    return;
  }
}
function extractFilter(instance) {
  try {
    return instance.filter;
  } catch (err2) {
    return;
  }
}
function extractPush(instance) {
  try {
    return instance.push;
  } catch (err2) {
    return;
  }
}
function extractPop(instance) {
  try {
    return instance.pop;
  } catch (err2) {
    return;
  }
}
function extractSplice(instance) {
  try {
    return instance.splice;
  } catch (err2) {
    return;
  }
}
function extractSlice(instance) {
  try {
    return instance.slice;
  } catch (err2) {
    return;
  }
}
function extractSort(instance) {
  try {
    return instance.sort;
  } catch (err2) {
    return;
  }
}
function extractEvery(instance) {
  try {
    return instance.every;
  } catch (err2) {
    return;
  }
}
function safeForEach(instance, fn) {
  if (extractForEach(instance) === untouchedForEach) {
    return instance.forEach(fn);
  }
  return safeApply(untouchedForEach, instance, [fn]);
}
function safeIndexOf(instance, ...args) {
  if (extractIndexOf(instance) === untouchedIndexOf) {
    return instance.indexOf(...args);
  }
  return safeApply(untouchedIndexOf, instance, args);
}
function safeJoin(instance, ...args) {
  if (extractJoin(instance) === untouchedJoin) {
    return instance.join(...args);
  }
  return safeApply(untouchedJoin, instance, args);
}
function safeMap(instance, fn) {
  if (extractMap(instance) === untouchedMap) {
    return instance.map(fn);
  }
  return safeApply(untouchedMap, instance, [fn]);
}
function safeFilter(instance, predicate) {
  if (extractFilter(instance) === untouchedFilter) {
    return instance.filter(predicate);
  }
  return safeApply(untouchedFilter, instance, [predicate]);
}
function safePush(instance, ...args) {
  if (extractPush(instance) === untouchedPush) {
    return instance.push(...args);
  }
  return safeApply(untouchedPush, instance, args);
}
function safePop(instance) {
  if (extractPop(instance) === untouchedPop) {
    return instance.pop();
  }
  return safeApply(untouchedPop, instance, []);
}
function safeSplice(instance, ...args) {
  if (extractSplice(instance) === untouchedSplice) {
    return instance.splice(...args);
  }
  return safeApply(untouchedSplice, instance, args);
}
function safeSlice(instance, ...args) {
  if (extractSlice(instance) === untouchedSlice) {
    return instance.slice(...args);
  }
  return safeApply(untouchedSlice, instance, args);
}
function safeSort(instance, ...args) {
  if (extractSort(instance) === untouchedSort) {
    return instance.sort(...args);
  }
  return safeApply(untouchedSort, instance, args);
}
function safeEvery(instance, ...args) {
  if (extractEvery(instance) === untouchedEvery) {
    return instance.every(...args);
  }
  return safeApply(untouchedEvery, instance, args);
}
function extractGetTime(instance) {
  try {
    return instance.getTime;
  } catch (err2) {
    return;
  }
}
function extractToISOString(instance) {
  try {
    return instance.toISOString;
  } catch (err2) {
    return;
  }
}
function safeGetTime(instance) {
  if (extractGetTime(instance) === untouchedGetTime) {
    return instance.getTime();
  }
  return safeApply(untouchedGetTime, instance, []);
}
function safeToISOString(instance) {
  if (extractToISOString(instance) === untouchedToISOString) {
    return instance.toISOString();
  }
  return safeApply(untouchedToISOString, instance, []);
}
function extractAdd(instance) {
  try {
    return instance.add;
  } catch (err2) {
    return;
  }
}
function extractHas(instance) {
  try {
    return instance.has;
  } catch (err2) {
    return;
  }
}
function safeAdd(instance, value) {
  if (extractAdd(instance) === untouchedAdd) {
    return instance.add(value);
  }
  return safeApply(untouchedAdd, instance, [value]);
}
function safeHas(instance, value) {
  if (extractHas(instance) === untouchedHas) {
    return instance.has(value);
  }
  return safeApply(untouchedHas, instance, [value]);
}
function extractSet(instance) {
  try {
    return instance.set;
  } catch (err2) {
    return;
  }
}
function extractGet(instance) {
  try {
    return instance.get;
  } catch (err2) {
    return;
  }
}
function safeSet(instance, key, value) {
  if (extractSet(instance) === untouchedSet) {
    return instance.set(key, value);
  }
  return safeApply(untouchedSet, instance, [key, value]);
}
function safeGet(instance, key) {
  if (extractGet(instance) === untouchedGet) {
    return instance.get(key);
  }
  return safeApply(untouchedGet, instance, [key]);
}
function extractMapSet(instance) {
  try {
    return instance.set;
  } catch (err2) {
    return;
  }
}
function extractMapGet(instance) {
  try {
    return instance.get;
  } catch (err2) {
    return;
  }
}
function safeMapSet(instance, key, value) {
  if (extractMapSet(instance) === untouchedMapSet) {
    return instance.set(key, value);
  }
  return safeApply(untouchedMapSet, instance, [key, value]);
}
function safeMapGet(instance, key) {
  if (extractMapGet(instance) === untouchedMapGet) {
    return instance.get(key);
  }
  return safeApply(untouchedMapGet, instance, [key]);
}
function extractSplit(instance) {
  try {
    return instance.split;
  } catch (err2) {
    return;
  }
}
function extractStartsWith(instance) {
  try {
    return instance.startsWith;
  } catch (err2) {
    return;
  }
}
function extractEndsWith(instance) {
  try {
    return instance.endsWith;
  } catch (err2) {
    return;
  }
}
function extractSubstring(instance) {
  try {
    return instance.substring;
  } catch (err2) {
    return;
  }
}
function extractToLowerCase(instance) {
  try {
    return instance.toLowerCase;
  } catch (err2) {
    return;
  }
}
function extractToUpperCase(instance) {
  try {
    return instance.toUpperCase;
  } catch (err2) {
    return;
  }
}
function extractPadStart(instance) {
  try {
    return instance.padStart;
  } catch (err2) {
    return;
  }
}
function extractCharCodeAt(instance) {
  try {
    return instance.charCodeAt;
  } catch (err2) {
    return;
  }
}
function extractNormalize(instance) {
  try {
    return instance.normalize;
  } catch (err2) {
    return;
  }
}
function extractReplace(instance) {
  try {
    return instance.replace;
  } catch (err2) {
    return;
  }
}
function safeSplit(instance, ...args) {
  if (extractSplit(instance) === untouchedSplit) {
    return instance.split(...args);
  }
  return safeApply(untouchedSplit, instance, args);
}
function safeStartsWith(instance, ...args) {
  if (extractStartsWith(instance) === untouchedStartsWith) {
    return instance.startsWith(...args);
  }
  return safeApply(untouchedStartsWith, instance, args);
}
function safeEndsWith(instance, ...args) {
  if (extractEndsWith(instance) === untouchedEndsWith) {
    return instance.endsWith(...args);
  }
  return safeApply(untouchedEndsWith, instance, args);
}
function safeSubstring(instance, ...args) {
  if (extractSubstring(instance) === untouchedSubstring) {
    return instance.substring(...args);
  }
  return safeApply(untouchedSubstring, instance, args);
}
function safeToLowerCase(instance) {
  if (extractToLowerCase(instance) === untouchedToLowerCase) {
    return instance.toLowerCase();
  }
  return safeApply(untouchedToLowerCase, instance, []);
}
function safeToUpperCase(instance) {
  if (extractToUpperCase(instance) === untouchedToUpperCase) {
    return instance.toUpperCase();
  }
  return safeApply(untouchedToUpperCase, instance, []);
}
function safePadStart(instance, ...args) {
  if (extractPadStart(instance) === untouchedPadStart) {
    return instance.padStart(...args);
  }
  return safeApply(untouchedPadStart, instance, args);
}
function safeCharCodeAt(instance, index) {
  if (extractCharCodeAt(instance) === untouchedCharCodeAt) {
    return instance.charCodeAt(index);
  }
  return safeApply(untouchedCharCodeAt, instance, [index]);
}
function safeNormalize(instance, form) {
  if (extractNormalize(instance) === untouchedNormalize) {
    return instance.normalize(form);
  }
  return safeApply(untouchedNormalize, instance, [form]);
}
function safeReplace(instance, pattern, replacement) {
  if (extractReplace(instance) === untouchedReplace) {
    return instance.replace(pattern, replacement);
  }
  return safeApply(untouchedReplace, instance, [pattern, replacement]);
}
function extractNumberToString(instance) {
  try {
    return instance.toString;
  } catch (err2) {
    return;
  }
}
function safeNumberToString(instance, ...args) {
  if (extractNumberToString(instance) === untouchedNumberToString) {
    return instance.toString(...args);
  }
  return safeApply(untouchedNumberToString, instance, args);
}
function safeHasOwnProperty(instance, v) {
  return safeApply(untouchedHasOwnProperty, instance, [v]);
}
function safeToString(instance) {
  return safeApply(untouchedToString, instance, []);
}
var SArray, SBigInt, SBigInt64Array, SBigUint64Array, SBoolean, SDate, SError, SFloat32Array, SFloat64Array, SInt8Array, SInt16Array, SInt32Array, SNumber, SString, SSet, SUint8Array, SUint8ClampedArray, SUint16Array, SUint32Array, SencodeURIComponent, SMap, SSymbol, untouchedForEach, untouchedIndexOf, untouchedJoin, untouchedMap, untouchedFilter, untouchedPush, untouchedPop, untouchedSplice, untouchedSlice, untouchedSort, untouchedEvery, untouchedGetTime, untouchedToISOString, untouchedAdd, untouchedHas, untouchedSet, untouchedGet, untouchedMapSet, untouchedMapGet, untouchedSplit, untouchedStartsWith, untouchedEndsWith, untouchedSubstring, untouchedToLowerCase, untouchedToUpperCase, untouchedPadStart, untouchedCharCodeAt, untouchedNormalize, untouchedReplace, untouchedNumberToString, untouchedHasOwnProperty, untouchedToString;
var init_globals = __esm(() => {
  init_apply();
  SArray = typeof Array !== "undefined" ? Array : undefined;
  SBigInt = typeof BigInt !== "undefined" ? BigInt : undefined;
  SBigInt64Array = typeof BigInt64Array !== "undefined" ? BigInt64Array : undefined;
  SBigUint64Array = typeof BigUint64Array !== "undefined" ? BigUint64Array : undefined;
  SBoolean = typeof Boolean !== "undefined" ? Boolean : undefined;
  SDate = typeof Date !== "undefined" ? Date : undefined;
  SError = typeof Error !== "undefined" ? Error : undefined;
  SFloat32Array = typeof Float32Array !== "undefined" ? Float32Array : undefined;
  SFloat64Array = typeof Float64Array !== "undefined" ? Float64Array : undefined;
  SInt8Array = typeof Int8Array !== "undefined" ? Int8Array : undefined;
  SInt16Array = typeof Int16Array !== "undefined" ? Int16Array : undefined;
  SInt32Array = typeof Int32Array !== "undefined" ? Int32Array : undefined;
  SNumber = typeof Number !== "undefined" ? Number : undefined;
  SString = typeof String !== "undefined" ? String : undefined;
  SSet = typeof Set !== "undefined" ? Set : undefined;
  SUint8Array = typeof Uint8Array !== "undefined" ? Uint8Array : undefined;
  SUint8ClampedArray = typeof Uint8ClampedArray !== "undefined" ? Uint8ClampedArray : undefined;
  SUint16Array = typeof Uint16Array !== "undefined" ? Uint16Array : undefined;
  SUint32Array = typeof Uint32Array !== "undefined" ? Uint32Array : undefined;
  SencodeURIComponent = typeof encodeURIComponent !== "undefined" ? encodeURIComponent : undefined;
  SMap = Map;
  SSymbol = Symbol;
  untouchedForEach = Array.prototype.forEach;
  untouchedIndexOf = Array.prototype.indexOf;
  untouchedJoin = Array.prototype.join;
  untouchedMap = Array.prototype.map;
  untouchedFilter = Array.prototype.filter;
  untouchedPush = Array.prototype.push;
  untouchedPop = Array.prototype.pop;
  untouchedSplice = Array.prototype.splice;
  untouchedSlice = Array.prototype.slice;
  untouchedSort = Array.prototype.sort;
  untouchedEvery = Array.prototype.every;
  untouchedGetTime = Date.prototype.getTime;
  untouchedToISOString = Date.prototype.toISOString;
  untouchedAdd = Set.prototype.add;
  untouchedHas = Set.prototype.has;
  untouchedSet = WeakMap.prototype.set;
  untouchedGet = WeakMap.prototype.get;
  untouchedMapSet = Map.prototype.set;
  untouchedMapGet = Map.prototype.get;
  untouchedSplit = String.prototype.split;
  untouchedStartsWith = String.prototype.startsWith;
  untouchedEndsWith = String.prototype.endsWith;
  untouchedSubstring = String.prototype.substring;
  untouchedToLowerCase = String.prototype.toLowerCase;
  untouchedToUpperCase = String.prototype.toUpperCase;
  untouchedPadStart = String.prototype.padStart;
  untouchedCharCodeAt = String.prototype.charCodeAt;
  untouchedNormalize = String.prototype.normalize;
  untouchedReplace = String.prototype.replace;
  untouchedNumberToString = Number.prototype.toString;
  untouchedHasOwnProperty = Object.prototype.hasOwnProperty;
  untouchedToString = Object.prototype.toString;
});

// node_modules/fast-check/lib/esm/stream/LazyIterableIterator.js
function makeLazy(producer) {
  return new LazyIterableIterator(producer);
}
var LazyIterableIterator;
var init_LazyIterableIterator = __esm(() => {
  LazyIterableIterator = class LazyIterableIterator {
    constructor(producer) {
      this.producer = producer;
    }
    [Symbol.iterator]() {
      if (this.it === undefined) {
        this.it = this.producer();
      }
      return this.it;
    }
    next() {
      if (this.it === undefined) {
        this.it = this.producer();
      }
      return this.it.next();
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/TupleArbitrary.js
function tupleMakeItCloneable(vs, values2) {
  return safeObjectDefineProperty2(vs, cloneMethod, {
    value: () => {
      const cloned = [];
      for (let idx = 0;idx !== values2.length; ++idx) {
        safePush(cloned, values2[idx].value);
      }
      tupleMakeItCloneable(cloned, values2);
      return cloned;
    }
  });
}
function tupleWrapper(values2) {
  let cloneable = false;
  const vs = [];
  const ctxs = [];
  for (let idx = 0;idx !== values2.length; ++idx) {
    const v = values2[idx];
    cloneable = cloneable || v.hasToBeCloned;
    safePush(vs, v.value);
    safePush(ctxs, v.context);
  }
  if (cloneable) {
    tupleMakeItCloneable(vs, values2);
  }
  return new Value(vs, ctxs);
}
function tupleShrink(arbs, value, context) {
  const shrinks = [];
  const safeContext = safeArrayIsArray(context) ? context : [];
  for (let idx = 0;idx !== arbs.length; ++idx) {
    safePush(shrinks, makeLazy(() => arbs[idx].shrink(value[idx], safeContext[idx]).map((v) => {
      const nextValues = safeMap(value, (v2, idx2) => new Value(cloneIfNeeded(v2), safeContext[idx2]));
      return [...safeSlice(nextValues, 0, idx), v, ...safeSlice(nextValues, idx + 1)];
    }).map(tupleWrapper)));
  }
  return Stream.nil().join(...shrinks);
}
var safeArrayIsArray, safeObjectDefineProperty2, TupleArbitrary;
var init_TupleArbitrary = __esm(() => {
  init_Stream();
  init_symbols();
  init_Arbitrary();
  init_Value();
  init_globals();
  init_LazyIterableIterator();
  safeArrayIsArray = Array.isArray;
  safeObjectDefineProperty2 = Object.defineProperty;
  TupleArbitrary = class TupleArbitrary extends Arbitrary {
    constructor(arbs) {
      super();
      this.arbs = arbs;
      for (let idx = 0;idx !== arbs.length; ++idx) {
        const arb = arbs[idx];
        if (arb == null || arb.generate == null)
          throw new Error(`Invalid parameter encountered at index ${idx}: expecting an Arbitrary`);
      }
    }
    generate(mrng, biasFactor) {
      const mapped = [];
      for (let idx = 0;idx !== this.arbs.length; ++idx) {
        safePush(mapped, this.arbs[idx].generate(mrng, biasFactor));
      }
      return tupleWrapper(mapped);
    }
    canShrinkWithoutContext(value) {
      if (!safeArrayIsArray(value) || value.length !== this.arbs.length) {
        return false;
      }
      for (let index = 0;index !== this.arbs.length; ++index) {
        if (!this.arbs[index].canShrinkWithoutContext(value[index])) {
          return false;
        }
      }
      return true;
    }
    shrink(value, context) {
      return tupleShrink(this.arbs, value, context);
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/tuple.js
function tuple4(...arbs) {
  return new TupleArbitrary(arbs);
}
var init_tuple = __esm(() => {
  init_TupleArbitrary();
});

// node_modules/fast-check/lib/esm/check/property/IRawProperty.js
function runIdToFrequency(runId) {
  return 2 + ~~(safeMathLog(runId + 1) * 0.4342944819032518);
}
var safeMathLog;
var init_IRawProperty = __esm(() => {
  safeMathLog = Math.log;
});

// node_modules/fast-check/lib/esm/check/runner/configuration/GlobalParameters.js
function configureGlobal(parameters) {
  globalParameters = parameters;
}
function readConfigureGlobal() {
  return globalParameters;
}
function resetConfigureGlobal() {
  globalParameters = {};
}
var globalParameters;
var init_GlobalParameters = __esm(() => {
  globalParameters = {};
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/NoUndefinedAsContext.js
function noUndefinedAsContext(value) {
  if (value.context !== undefined) {
    return value;
  }
  if (value.hasToBeCloned) {
    return new Value(value.value_, UndefinedContextPlaceholder, () => value.value);
  }
  return new Value(value.value_, UndefinedContextPlaceholder);
}
var UndefinedContextPlaceholder;
var init_NoUndefinedAsContext = __esm(() => {
  init_Value();
  UndefinedContextPlaceholder = Symbol("UndefinedContextPlaceholder");
});

// node_modules/fast-check/lib/esm/check/property/AsyncProperty.generic.js
class AsyncProperty {
  constructor(arb, predicate) {
    this.arb = arb;
    this.predicate = predicate;
    const { asyncBeforeEach, asyncAfterEach, beforeEach, afterEach } = readConfigureGlobal() || {};
    if (asyncBeforeEach !== undefined && beforeEach !== undefined) {
      throw SError(`Global "asyncBeforeEach" and "beforeEach" parameters can't be set at the same time when running async properties`);
    }
    if (asyncAfterEach !== undefined && afterEach !== undefined) {
      throw SError(`Global "asyncAfterEach" and "afterEach" parameters can't be set at the same time when running async properties`);
    }
    this.beforeEachHook = asyncBeforeEach || beforeEach || AsyncProperty.dummyHook;
    this.afterEachHook = asyncAfterEach || afterEach || AsyncProperty.dummyHook;
  }
  isAsync() {
    return true;
  }
  generate(mrng, runId) {
    const value = this.arb.generate(mrng, runId != null ? runIdToFrequency(runId) : undefined);
    return noUndefinedAsContext(value);
  }
  shrink(value) {
    if (value.context === undefined && !this.arb.canShrinkWithoutContext(value.value_)) {
      return Stream.nil();
    }
    const safeContext = value.context !== UndefinedContextPlaceholder ? value.context : undefined;
    return this.arb.shrink(value.value_, safeContext).map(noUndefinedAsContext);
  }
  async runBeforeEach() {
    await this.beforeEachHook();
  }
  async runAfterEach() {
    await this.afterEachHook();
  }
  async run(v, dontRunHook) {
    if (!dontRunHook) {
      await this.beforeEachHook();
    }
    try {
      const output = await this.predicate(v);
      return output == null || output === true ? null : {
        error: new SError("Property failed by returning false"),
        errorMessage: "Error: Property failed by returning false"
      };
    } catch (err2) {
      if (PreconditionFailure.isFailure(err2))
        return err2;
      if (err2 instanceof SError && err2.stack) {
        return { error: err2, errorMessage: err2.stack };
      }
      return { error: err2, errorMessage: SString(err2) };
    } finally {
      if (!dontRunHook) {
        await this.afterEachHook();
      }
    }
  }
  beforeEach(hookFunction) {
    const previousBeforeEachHook = this.beforeEachHook;
    this.beforeEachHook = () => hookFunction(previousBeforeEachHook);
    return this;
  }
  afterEach(hookFunction) {
    const previousAfterEachHook = this.afterEachHook;
    this.afterEachHook = () => hookFunction(previousAfterEachHook);
    return this;
  }
}
var init_AsyncProperty_generic = __esm(() => {
  init_PreconditionFailure();
  init_IRawProperty();
  init_GlobalParameters();
  init_Stream();
  init_NoUndefinedAsContext();
  init_globals();
  AsyncProperty.dummyHook = () => {};
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/AlwaysShrinkableArbitrary.js
var AlwaysShrinkableArbitrary;
var init_AlwaysShrinkableArbitrary = __esm(() => {
  init_Arbitrary();
  init_Stream();
  init_NoUndefinedAsContext();
  AlwaysShrinkableArbitrary = class AlwaysShrinkableArbitrary extends Arbitrary {
    constructor(arb) {
      super();
      this.arb = arb;
    }
    generate(mrng, biasFactor) {
      const value = this.arb.generate(mrng, biasFactor);
      return noUndefinedAsContext(value);
    }
    canShrinkWithoutContext(value) {
      return true;
    }
    shrink(value, context) {
      if (context === undefined && !this.arb.canShrinkWithoutContext(value)) {
        return Stream.nil();
      }
      const safeContext = context !== UndefinedContextPlaceholder ? context : undefined;
      return this.arb.shrink(value, safeContext).map(noUndefinedAsContext);
    }
  };
});

// node_modules/fast-check/lib/esm/check/property/AsyncProperty.js
function asyncProperty(...args) {
  if (args.length < 2) {
    throw new Error("asyncProperty expects at least two parameters");
  }
  const arbs = safeSlice(args, 0, args.length - 1);
  const p = args[args.length - 1];
  safeForEach(arbs, assertIsArbitrary);
  const mappedArbs = safeMap(arbs, (arb) => new AlwaysShrinkableArbitrary(arb));
  return new AsyncProperty(tuple4(...mappedArbs), (t) => p(...t));
}
var init_AsyncProperty = __esm(() => {
  init_Arbitrary();
  init_tuple();
  init_AsyncProperty_generic();
  init_AlwaysShrinkableArbitrary();
  init_globals();
});

// node_modules/fast-check/lib/esm/check/property/Property.generic.js
class Property {
  constructor(arb, predicate) {
    this.arb = arb;
    this.predicate = predicate;
    const { beforeEach = Property.dummyHook, afterEach = Property.dummyHook, asyncBeforeEach, asyncAfterEach } = readConfigureGlobal() || {};
    if (asyncBeforeEach !== undefined) {
      throw SError(`"asyncBeforeEach" can't be set when running synchronous properties`);
    }
    if (asyncAfterEach !== undefined) {
      throw SError(`"asyncAfterEach" can't be set when running synchronous properties`);
    }
    this.beforeEachHook = beforeEach;
    this.afterEachHook = afterEach;
  }
  isAsync() {
    return false;
  }
  generate(mrng, runId) {
    const value = this.arb.generate(mrng, runId != null ? runIdToFrequency(runId) : undefined);
    return noUndefinedAsContext(value);
  }
  shrink(value) {
    if (value.context === undefined && !this.arb.canShrinkWithoutContext(value.value_)) {
      return Stream.nil();
    }
    const safeContext = value.context !== UndefinedContextPlaceholder ? value.context : undefined;
    return this.arb.shrink(value.value_, safeContext).map(noUndefinedAsContext);
  }
  runBeforeEach() {
    this.beforeEachHook();
  }
  runAfterEach() {
    this.afterEachHook();
  }
  run(v, dontRunHook) {
    if (!dontRunHook) {
      this.beforeEachHook();
    }
    try {
      const output = this.predicate(v);
      return output == null || output === true ? null : {
        error: new SError("Property failed by returning false"),
        errorMessage: "Error: Property failed by returning false"
      };
    } catch (err2) {
      if (PreconditionFailure.isFailure(err2))
        return err2;
      if (err2 instanceof SError && err2.stack) {
        return { error: err2, errorMessage: err2.stack };
      }
      return { error: err2, errorMessage: SString(err2) };
    } finally {
      if (!dontRunHook) {
        this.afterEachHook();
      }
    }
  }
  beforeEach(hookFunction) {
    const previousBeforeEachHook = this.beforeEachHook;
    this.beforeEachHook = () => hookFunction(previousBeforeEachHook);
    return this;
  }
  afterEach(hookFunction) {
    const previousAfterEachHook = this.afterEachHook;
    this.afterEachHook = () => hookFunction(previousAfterEachHook);
    return this;
  }
}
var init_Property_generic = __esm(() => {
  init_PreconditionFailure();
  init_IRawProperty();
  init_GlobalParameters();
  init_Stream();
  init_NoUndefinedAsContext();
  init_globals();
  Property.dummyHook = () => {};
});

// node_modules/fast-check/lib/esm/check/property/Property.js
function property(...args) {
  if (args.length < 2) {
    throw new Error("property expects at least two parameters");
  }
  const arbs = safeSlice(args, 0, args.length - 1);
  const p = args[args.length - 1];
  safeForEach(arbs, assertIsArbitrary);
  const mappedArbs = safeMap(arbs, (arb) => new AlwaysShrinkableArbitrary(arb));
  return new Property(tuple4(...mappedArbs), (t) => p(...t));
}
var init_Property = __esm(() => {
  init_Arbitrary();
  init_tuple();
  init_Property_generic();
  init_AlwaysShrinkableArbitrary();
  init_globals();
});

// node_modules/pure-rand/lib/esm/generator/RandomGenerator.js
function unsafeGenerateN(rng, num) {
  var out = [];
  for (var idx = 0;idx != num; ++idx) {
    out.push(rng.unsafeNext());
  }
  return out;
}
function generateN(rng, num) {
  var nextRng = rng.clone();
  var out = unsafeGenerateN(nextRng, num);
  return [out, nextRng];
}
function unsafeSkipN(rng, num) {
  for (var idx = 0;idx != num; ++idx) {
    rng.unsafeNext();
  }
}
function skipN(rng, num) {
  var nextRng = rng.clone();
  unsafeSkipN(nextRng, num);
  return nextRng;
}

// node_modules/pure-rand/lib/esm/generator/LinearCongruential.js
function fromState(state) {
  var valid = state.length === 1;
  if (!valid) {
    throw new Error("The state must have been produced by a congruential32 RandomGenerator");
  }
  return new LinearCongruential32(state[0]);
}
var MULTIPLIER = 214013, INCREMENT = 2531011, MASK = 4294967295, MASK_2, computeNextSeed = function(seed) {
  return seed * MULTIPLIER + INCREMENT & MASK;
}, computeValueFromNextSeed = function(nextseed) {
  return (nextseed & MASK_2) >> 16;
}, LinearCongruential32, congruential32;
var init_LinearCongruential = __esm(() => {
  MASK_2 = (1 << 31) - 1;
  LinearCongruential32 = function() {
    function LinearCongruential322(seed) {
      this.seed = seed;
    }
    LinearCongruential322.prototype.clone = function() {
      return new LinearCongruential322(this.seed);
    };
    LinearCongruential322.prototype.next = function() {
      var nextRng = new LinearCongruential322(this.seed);
      var out = nextRng.unsafeNext();
      return [out, nextRng];
    };
    LinearCongruential322.prototype.unsafeNext = function() {
      var s1 = computeNextSeed(this.seed);
      var v1 = computeValueFromNextSeed(s1);
      var s2 = computeNextSeed(s1);
      var v2 = computeValueFromNextSeed(s2);
      this.seed = computeNextSeed(s2);
      var v3 = computeValueFromNextSeed(this.seed);
      var vnext = v3 + (v2 + (v1 << 15) << 15);
      return vnext | 0;
    };
    LinearCongruential322.prototype.getState = function() {
      return [this.seed];
    };
    return LinearCongruential322;
  }();
  congruential32 = Object.assign(function(seed) {
    return new LinearCongruential32(seed);
  }, { fromState });
});

// node_modules/pure-rand/lib/esm/generator/MersenneTwister.js
function fromState2(state) {
  return MersenneTwister.fromState(state);
}
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i2 = m.call(o), r, ar = [], e;
  try {
    while ((n === undefined || n-- > 0) && !(r = i2.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i2["return"]))
        m.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}, __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l = from.length, ar;i2 < l; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}, MersenneTwister, MersenneTwister_default;
var init_MersenneTwister = __esm(() => {
  MersenneTwister = function() {
    function MersenneTwister2(states, index) {
      this.states = states;
      this.index = index;
    }
    MersenneTwister2.twist = function(prev) {
      var mt = prev.slice();
      for (var idx = 0;idx !== MersenneTwister2.N - MersenneTwister2.M; ++idx) {
        var y_1 = (mt[idx] & MersenneTwister2.MASK_UPPER) + (mt[idx + 1] & MersenneTwister2.MASK_LOWER);
        mt[idx] = mt[idx + MersenneTwister2.M] ^ y_1 >>> 1 ^ -(y_1 & 1) & MersenneTwister2.A;
      }
      for (var idx = MersenneTwister2.N - MersenneTwister2.M;idx !== MersenneTwister2.N - 1; ++idx) {
        var y_2 = (mt[idx] & MersenneTwister2.MASK_UPPER) + (mt[idx + 1] & MersenneTwister2.MASK_LOWER);
        mt[idx] = mt[idx + MersenneTwister2.M - MersenneTwister2.N] ^ y_2 >>> 1 ^ -(y_2 & 1) & MersenneTwister2.A;
      }
      var y = (mt[MersenneTwister2.N - 1] & MersenneTwister2.MASK_UPPER) + (mt[0] & MersenneTwister2.MASK_LOWER);
      mt[MersenneTwister2.N - 1] = mt[MersenneTwister2.M - 1] ^ y >>> 1 ^ -(y & 1) & MersenneTwister2.A;
      return mt;
    };
    MersenneTwister2.seeded = function(seed) {
      var out = Array(MersenneTwister2.N);
      out[0] = seed;
      for (var idx = 1;idx !== MersenneTwister2.N; ++idx) {
        var xored = out[idx - 1] ^ out[idx - 1] >>> 30;
        out[idx] = Math.imul(MersenneTwister2.F, xored) + idx | 0;
      }
      return out;
    };
    MersenneTwister2.from = function(seed) {
      return new MersenneTwister2(MersenneTwister2.twist(MersenneTwister2.seeded(seed)), 0);
    };
    MersenneTwister2.prototype.clone = function() {
      return new MersenneTwister2(this.states, this.index);
    };
    MersenneTwister2.prototype.next = function() {
      var nextRng = new MersenneTwister2(this.states, this.index);
      var out = nextRng.unsafeNext();
      return [out, nextRng];
    };
    MersenneTwister2.prototype.unsafeNext = function() {
      var y = this.states[this.index];
      y ^= this.states[this.index] >>> MersenneTwister2.U;
      y ^= y << MersenneTwister2.S & MersenneTwister2.B;
      y ^= y << MersenneTwister2.T & MersenneTwister2.C;
      y ^= y >>> MersenneTwister2.L;
      if (++this.index >= MersenneTwister2.N) {
        this.states = MersenneTwister2.twist(this.states);
        this.index = 0;
      }
      return y;
    };
    MersenneTwister2.prototype.getState = function() {
      return __spreadArray([this.index], __read(this.states), false);
    };
    MersenneTwister2.fromState = function(state) {
      var valid = state.length === MersenneTwister2.N + 1 && state[0] >= 0 && state[0] < MersenneTwister2.N;
      if (!valid) {
        throw new Error("The state must have been produced by a mersenne RandomGenerator");
      }
      return new MersenneTwister2(state.slice(1), state[0]);
    };
    MersenneTwister2.N = 624;
    MersenneTwister2.M = 397;
    MersenneTwister2.R = 31;
    MersenneTwister2.A = 2567483615;
    MersenneTwister2.F = 1812433253;
    MersenneTwister2.U = 11;
    MersenneTwister2.S = 7;
    MersenneTwister2.B = 2636928640;
    MersenneTwister2.T = 15;
    MersenneTwister2.C = 4022730752;
    MersenneTwister2.L = 18;
    MersenneTwister2.MASK_LOWER = Math.pow(2, MersenneTwister2.R) - 1;
    MersenneTwister2.MASK_UPPER = Math.pow(2, MersenneTwister2.R);
    return MersenneTwister2;
  }();
  MersenneTwister_default = Object.assign(function(seed) {
    return MersenneTwister.from(seed);
  }, { fromState: fromState2 });
});

// node_modules/pure-rand/lib/esm/generator/XorShift.js
function fromState3(state) {
  var valid = state.length === 4;
  if (!valid) {
    throw new Error("The state must have been produced by a xorshift128plus RandomGenerator");
  }
  return new XorShift128Plus(state[0], state[1], state[2], state[3]);
}
var XorShift128Plus, xorshift128plus;
var init_XorShift = __esm(() => {
  XorShift128Plus = function() {
    function XorShift128Plus2(s01, s00, s11, s10) {
      this.s01 = s01;
      this.s00 = s00;
      this.s11 = s11;
      this.s10 = s10;
    }
    XorShift128Plus2.prototype.clone = function() {
      return new XorShift128Plus2(this.s01, this.s00, this.s11, this.s10);
    };
    XorShift128Plus2.prototype.next = function() {
      var nextRng = new XorShift128Plus2(this.s01, this.s00, this.s11, this.s10);
      var out = nextRng.unsafeNext();
      return [out, nextRng];
    };
    XorShift128Plus2.prototype.unsafeNext = function() {
      var a0 = this.s00 ^ this.s00 << 23;
      var a1 = this.s01 ^ (this.s01 << 23 | this.s00 >>> 9);
      var b0 = a0 ^ this.s10 ^ (a0 >>> 18 | a1 << 14) ^ (this.s10 >>> 5 | this.s11 << 27);
      var b1 = a1 ^ this.s11 ^ a1 >>> 18 ^ this.s11 >>> 5;
      var out = this.s00 + this.s10 | 0;
      this.s01 = this.s11;
      this.s00 = this.s10;
      this.s11 = b1;
      this.s10 = b0;
      return out;
    };
    XorShift128Plus2.prototype.jump = function() {
      var nextRng = new XorShift128Plus2(this.s01, this.s00, this.s11, this.s10);
      nextRng.unsafeJump();
      return nextRng;
    };
    XorShift128Plus2.prototype.unsafeJump = function() {
      var ns01 = 0;
      var ns00 = 0;
      var ns11 = 0;
      var ns10 = 0;
      var jump = [1667051007, 2321340297, 1548169110, 304075285];
      for (var i2 = 0;i2 !== 4; ++i2) {
        for (var mask = 1;mask; mask <<= 1) {
          if (jump[i2] & mask) {
            ns01 ^= this.s01;
            ns00 ^= this.s00;
            ns11 ^= this.s11;
            ns10 ^= this.s10;
          }
          this.unsafeNext();
        }
      }
      this.s01 = ns01;
      this.s00 = ns00;
      this.s11 = ns11;
      this.s10 = ns10;
    };
    XorShift128Plus2.prototype.getState = function() {
      return [this.s01, this.s00, this.s11, this.s10];
    };
    return XorShift128Plus2;
  }();
  xorshift128plus = Object.assign(function(seed) {
    return new XorShift128Plus(-1, ~seed, seed | 0, 0);
  }, { fromState: fromState3 });
});

// node_modules/pure-rand/lib/esm/generator/XoroShiro.js
function fromState4(state) {
  var valid = state.length === 4;
  if (!valid) {
    throw new Error("The state must have been produced by a xoroshiro128plus RandomGenerator");
  }
  return new XoroShiro128Plus(state[0], state[1], state[2], state[3]);
}
var XoroShiro128Plus, xoroshiro128plus;
var init_XoroShiro = __esm(() => {
  XoroShiro128Plus = function() {
    function XoroShiro128Plus2(s01, s00, s11, s10) {
      this.s01 = s01;
      this.s00 = s00;
      this.s11 = s11;
      this.s10 = s10;
    }
    XoroShiro128Plus2.prototype.clone = function() {
      return new XoroShiro128Plus2(this.s01, this.s00, this.s11, this.s10);
    };
    XoroShiro128Plus2.prototype.next = function() {
      var nextRng = new XoroShiro128Plus2(this.s01, this.s00, this.s11, this.s10);
      var out = nextRng.unsafeNext();
      return [out, nextRng];
    };
    XoroShiro128Plus2.prototype.unsafeNext = function() {
      var out = this.s00 + this.s10 | 0;
      var a0 = this.s10 ^ this.s00;
      var a1 = this.s11 ^ this.s01;
      var s00 = this.s00;
      var s01 = this.s01;
      this.s00 = s00 << 24 ^ s01 >>> 8 ^ a0 ^ a0 << 16;
      this.s01 = s01 << 24 ^ s00 >>> 8 ^ a1 ^ (a1 << 16 | a0 >>> 16);
      this.s10 = a1 << 5 ^ a0 >>> 27;
      this.s11 = a0 << 5 ^ a1 >>> 27;
      return out;
    };
    XoroShiro128Plus2.prototype.jump = function() {
      var nextRng = new XoroShiro128Plus2(this.s01, this.s00, this.s11, this.s10);
      nextRng.unsafeJump();
      return nextRng;
    };
    XoroShiro128Plus2.prototype.unsafeJump = function() {
      var ns01 = 0;
      var ns00 = 0;
      var ns11 = 0;
      var ns10 = 0;
      var jump = [3639956645, 3750757012, 1261568508, 386426335];
      for (var i2 = 0;i2 !== 4; ++i2) {
        for (var mask = 1;mask; mask <<= 1) {
          if (jump[i2] & mask) {
            ns01 ^= this.s01;
            ns00 ^= this.s00;
            ns11 ^= this.s11;
            ns10 ^= this.s10;
          }
          this.unsafeNext();
        }
      }
      this.s01 = ns01;
      this.s00 = ns00;
      this.s11 = ns11;
      this.s10 = ns10;
    };
    XoroShiro128Plus2.prototype.getState = function() {
      return [this.s01, this.s00, this.s11, this.s10];
    };
    return XoroShiro128Plus2;
  }();
  xoroshiro128plus = Object.assign(function(seed) {
    return new XoroShiro128Plus(-1, ~seed, seed | 0, 0);
  }, { fromState: fromState4 });
});

// node_modules/pure-rand/lib/esm/distribution/internals/ArrayInt.js
function addArrayIntToNew(arrayIntA, arrayIntB) {
  if (arrayIntA.sign !== arrayIntB.sign) {
    return substractArrayIntToNew(arrayIntA, { sign: -arrayIntB.sign, data: arrayIntB.data });
  }
  var data = [];
  var reminder = 0;
  var dataA = arrayIntA.data;
  var dataB = arrayIntB.data;
  for (var indexA = dataA.length - 1, indexB = dataB.length - 1;indexA >= 0 || indexB >= 0; --indexA, --indexB) {
    var vA = indexA >= 0 ? dataA[indexA] : 0;
    var vB = indexB >= 0 ? dataB[indexB] : 0;
    var current = vA + vB + reminder;
    data.push(current >>> 0);
    reminder = ~~(current / 4294967296);
  }
  if (reminder !== 0) {
    data.push(reminder);
  }
  return { sign: arrayIntA.sign, data: data.reverse() };
}
function addOneToPositiveArrayInt(arrayInt) {
  arrayInt.sign = 1;
  var data = arrayInt.data;
  for (var index = data.length - 1;index >= 0; --index) {
    if (data[index] === 4294967295) {
      data[index] = 0;
    } else {
      data[index] += 1;
      return arrayInt;
    }
  }
  data.unshift(1);
  return arrayInt;
}
function isStrictlySmaller(dataA, dataB) {
  var maxLength = Math.max(dataA.length, dataB.length);
  for (var index = 0;index < maxLength; ++index) {
    var indexA = index + dataA.length - maxLength;
    var indexB = index + dataB.length - maxLength;
    var vA = indexA >= 0 ? dataA[indexA] : 0;
    var vB = indexB >= 0 ? dataB[indexB] : 0;
    if (vA < vB)
      return true;
    if (vA > vB)
      return false;
  }
  return false;
}
function substractArrayIntToNew(arrayIntA, arrayIntB) {
  if (arrayIntA.sign !== arrayIntB.sign) {
    return addArrayIntToNew(arrayIntA, { sign: -arrayIntB.sign, data: arrayIntB.data });
  }
  var dataA = arrayIntA.data;
  var dataB = arrayIntB.data;
  if (isStrictlySmaller(dataA, dataB)) {
    var out = substractArrayIntToNew(arrayIntB, arrayIntA);
    out.sign = -out.sign;
    return out;
  }
  var data = [];
  var reminder = 0;
  for (var indexA = dataA.length - 1, indexB = dataB.length - 1;indexA >= 0 || indexB >= 0; --indexA, --indexB) {
    var vA = indexA >= 0 ? dataA[indexA] : 0;
    var vB = indexB >= 0 ? dataB[indexB] : 0;
    var current = vA - vB - reminder;
    data.push(current >>> 0);
    reminder = current < 0 ? 1 : 0;
  }
  return { sign: arrayIntA.sign, data: data.reverse() };
}
function trimArrayIntInplace(arrayInt) {
  var data = arrayInt.data;
  var firstNonZero = 0;
  for (;firstNonZero !== data.length && data[firstNonZero] === 0; ++firstNonZero) {}
  if (firstNonZero === data.length) {
    arrayInt.sign = 1;
    arrayInt.data = [0];
    return arrayInt;
  }
  data.splice(0, firstNonZero);
  return arrayInt;
}
function fromNumberToArrayInt64(out, n) {
  if (n < 0) {
    var posN = -n;
    out.sign = -1;
    out.data[0] = ~~(posN / 4294967296);
    out.data[1] = posN >>> 0;
  } else {
    out.sign = 1;
    out.data[0] = ~~(n / 4294967296);
    out.data[1] = n >>> 0;
  }
  return out;
}
function substractArrayInt64(out, arrayIntA, arrayIntB) {
  var lowA = arrayIntA.data[1];
  var highA = arrayIntA.data[0];
  var signA = arrayIntA.sign;
  var lowB = arrayIntB.data[1];
  var highB = arrayIntB.data[0];
  var signB = arrayIntB.sign;
  out.sign = 1;
  if (signA === 1 && signB === -1) {
    var low_1 = lowA + lowB;
    var high = highA + highB + (low_1 > 4294967295 ? 1 : 0);
    out.data[0] = high >>> 0;
    out.data[1] = low_1 >>> 0;
    return out;
  }
  var lowFirst = lowA;
  var highFirst = highA;
  var lowSecond = lowB;
  var highSecond = highB;
  if (signA === -1) {
    lowFirst = lowB;
    highFirst = highB;
    lowSecond = lowA;
    highSecond = highA;
  }
  var reminderLow = 0;
  var low = lowFirst - lowSecond;
  if (low < 0) {
    reminderLow = 1;
    low = low >>> 0;
  }
  out.data[0] = highFirst - highSecond - reminderLow;
  out.data[1] = low;
  return out;
}

// node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformIntDistributionInternal.js
function unsafeUniformIntDistributionInternal(rangeSize, rng) {
  var MaxAllowed = rangeSize > 2 ? ~~(4294967296 / rangeSize) * rangeSize : 4294967296;
  var deltaV = rng.unsafeNext() + 2147483648;
  while (deltaV >= MaxAllowed) {
    deltaV = rng.unsafeNext() + 2147483648;
  }
  return deltaV % rangeSize;
}

// node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformArrayIntDistributionInternal.js
function unsafeUniformArrayIntDistributionInternal(out, rangeSize, rng) {
  var rangeLength = rangeSize.length;
  while (true) {
    for (var index = 0;index !== rangeLength; ++index) {
      var indexRangeSize = index === 0 ? rangeSize[0] + 1 : 4294967296;
      var g = unsafeUniformIntDistributionInternal(indexRangeSize, rng);
      out[index] = g;
    }
    for (var index = 0;index !== rangeLength; ++index) {
      var current = out[index];
      var currentInRange = rangeSize[index];
      if (current < currentInRange) {
        return out;
      } else if (current > currentInRange) {
        break;
      }
    }
  }
}
var init_UnsafeUniformArrayIntDistributionInternal = () => {};

// node_modules/pure-rand/lib/esm/distribution/UnsafeUniformArrayIntDistribution.js
function unsafeUniformArrayIntDistribution(from, to, rng) {
  var rangeSize = trimArrayIntInplace(addOneToPositiveArrayInt(substractArrayIntToNew(to, from)));
  var emptyArrayIntData = rangeSize.data.slice(0);
  var g = unsafeUniformArrayIntDistributionInternal(emptyArrayIntData, rangeSize.data, rng);
  return trimArrayIntInplace(addArrayIntToNew({ sign: 1, data: g }, from));
}
var init_UnsafeUniformArrayIntDistribution = __esm(() => {
  init_UnsafeUniformArrayIntDistributionInternal();
});

// node_modules/pure-rand/lib/esm/distribution/UniformArrayIntDistribution.js
function uniformArrayIntDistribution(from, to, rng) {
  if (rng != null) {
    var nextRng = rng.clone();
    return [unsafeUniformArrayIntDistribution(from, to, nextRng), nextRng];
  }
  return function(rng2) {
    var nextRng2 = rng2.clone();
    return [unsafeUniformArrayIntDistribution(from, to, nextRng2), nextRng2];
  };
}
var init_UniformArrayIntDistribution = __esm(() => {
  init_UnsafeUniformArrayIntDistribution();
});

// node_modules/pure-rand/lib/esm/distribution/UnsafeUniformBigIntDistribution.js
function unsafeUniformBigIntDistribution(from, to, rng) {
  var diff = to - from + SBigInt2(1);
  var MinRng = SBigInt2(-2147483648);
  var NumValues = SBigInt2(4294967296);
  var FinalNumValues = NumValues;
  var NumIterations = 1;
  while (FinalNumValues < diff) {
    FinalNumValues *= NumValues;
    ++NumIterations;
  }
  var MaxAcceptedRandom = FinalNumValues - FinalNumValues % diff;
  while (true) {
    var value = SBigInt2(0);
    for (var num = 0;num !== NumIterations; ++num) {
      var out = rng.unsafeNext();
      value = NumValues * value + (SBigInt2(out) - MinRng);
    }
    if (value < MaxAcceptedRandom) {
      var inDiff = value % diff;
      return inDiff + from;
    }
  }
}
var SBigInt2;
var init_UnsafeUniformBigIntDistribution = __esm(() => {
  SBigInt2 = typeof BigInt !== "undefined" ? BigInt : undefined;
});

// node_modules/pure-rand/lib/esm/distribution/UniformBigIntDistribution.js
function uniformBigIntDistribution(from, to, rng) {
  if (rng != null) {
    var nextRng = rng.clone();
    return [unsafeUniformBigIntDistribution(from, to, nextRng), nextRng];
  }
  return function(rng2) {
    var nextRng2 = rng2.clone();
    return [unsafeUniformBigIntDistribution(from, to, nextRng2), nextRng2];
  };
}
var init_UniformBigIntDistribution = __esm(() => {
  init_UnsafeUniformBigIntDistribution();
});

// node_modules/pure-rand/lib/esm/distribution/UnsafeUniformIntDistribution.js
function uniformLargeIntInternal(from, to, rangeSize, rng) {
  var rangeSizeArrayIntValue = rangeSize <= safeNumberMaxSafeInteger ? fromNumberToArrayInt64(sharedC, rangeSize) : substractArrayInt64(sharedC, fromNumberToArrayInt64(sharedA, to), fromNumberToArrayInt64(sharedB, from));
  if (rangeSizeArrayIntValue.data[1] === 4294967295) {
    rangeSizeArrayIntValue.data[0] += 1;
    rangeSizeArrayIntValue.data[1] = 0;
  } else {
    rangeSizeArrayIntValue.data[1] += 1;
  }
  unsafeUniformArrayIntDistributionInternal(sharedData, rangeSizeArrayIntValue.data, rng);
  return sharedData[0] * 4294967296 + sharedData[1] + from;
}
function unsafeUniformIntDistribution(from, to, rng) {
  var rangeSize = to - from;
  if (rangeSize <= 4294967295) {
    var g = unsafeUniformIntDistributionInternal(rangeSize + 1, rng);
    return g + from;
  }
  return uniformLargeIntInternal(from, to, rangeSize, rng);
}
var safeNumberMaxSafeInteger, sharedA, sharedB, sharedC, sharedData;
var init_UnsafeUniformIntDistribution = __esm(() => {
  init_UnsafeUniformArrayIntDistributionInternal();
  safeNumberMaxSafeInteger = Number.MAX_SAFE_INTEGER;
  sharedA = { sign: 1, data: [0, 0] };
  sharedB = { sign: 1, data: [0, 0] };
  sharedC = { sign: 1, data: [0, 0] };
  sharedData = [0, 0];
});

// node_modules/pure-rand/lib/esm/distribution/UniformIntDistribution.js
function uniformIntDistribution(from, to, rng) {
  if (rng != null) {
    var nextRng = rng.clone();
    return [unsafeUniformIntDistribution(from, to, nextRng), nextRng];
  }
  return function(rng2) {
    var nextRng2 = rng2.clone();
    return [unsafeUniformIntDistribution(from, to, nextRng2), nextRng2];
  };
}
var init_UniformIntDistribution = __esm(() => {
  init_UnsafeUniformIntDistribution();
});

// node_modules/pure-rand/lib/esm/pure-rand-default.js
var exports_pure_rand_default = {};
__export(exports_pure_rand_default, {
  xorshift128plus: () => xorshift128plus,
  xoroshiro128plus: () => xoroshiro128plus,
  unsafeUniformIntDistribution: () => unsafeUniformIntDistribution,
  unsafeUniformBigIntDistribution: () => unsafeUniformBigIntDistribution,
  unsafeUniformArrayIntDistribution: () => unsafeUniformArrayIntDistribution,
  unsafeSkipN: () => unsafeSkipN,
  unsafeGenerateN: () => unsafeGenerateN,
  uniformIntDistribution: () => uniformIntDistribution,
  uniformBigIntDistribution: () => uniformBigIntDistribution,
  uniformArrayIntDistribution: () => uniformArrayIntDistribution,
  skipN: () => skipN,
  mersenne: () => MersenneTwister_default,
  generateN: () => generateN,
  congruential32: () => congruential32,
  __version: () => __version,
  __type: () => __type,
  __commitHash: () => __commitHash
});
var __type = "module", __version = "6.1.0", __commitHash = "a413dd2b721516be2ef29adffb515c5ae67bfbad";
var init_pure_rand_default = __esm(() => {
  init_LinearCongruential();
  init_MersenneTwister();
  init_XorShift();
  init_XoroShiro();
  init_UniformArrayIntDistribution();
  init_UniformBigIntDistribution();
  init_UniformIntDistribution();
  init_UnsafeUniformArrayIntDistribution();
  init_UnsafeUniformBigIntDistribution();
  init_UnsafeUniformIntDistribution();
});

// node_modules/pure-rand/lib/esm/pure-rand.js
var pure_rand_default2;
var init_pure_rand = __esm(() => {
  init_pure_rand_default();
  init_pure_rand_default();
  pure_rand_default2 = exports_pure_rand_default;
});

// node_modules/fast-check/lib/esm/check/runner/configuration/VerbosityLevel.js
var VerbosityLevel;
var init_VerbosityLevel = __esm(() => {
  (function(VerbosityLevel2) {
    VerbosityLevel2[VerbosityLevel2["None"] = 0] = "None";
    VerbosityLevel2[VerbosityLevel2["Verbose"] = 1] = "Verbose";
    VerbosityLevel2[VerbosityLevel2["VeryVerbose"] = 2] = "VeryVerbose";
  })(VerbosityLevel || (VerbosityLevel = {}));
});

// node_modules/fast-check/lib/esm/check/runner/configuration/QualifiedParameters.js
class QualifiedParameters {
  constructor(op) {
    const p = op || {};
    this.seed = QualifiedParameters.readSeed(p);
    this.randomType = QualifiedParameters.readRandomType(p);
    this.numRuns = QualifiedParameters.readNumRuns(p);
    this.verbose = QualifiedParameters.readVerbose(p);
    this.maxSkipsPerRun = QualifiedParameters.readOrDefault(p, "maxSkipsPerRun", 100);
    this.timeout = QualifiedParameters.safeTimeout(QualifiedParameters.readOrDefault(p, "timeout", null));
    this.skipAllAfterTimeLimit = QualifiedParameters.safeTimeout(QualifiedParameters.readOrDefault(p, "skipAllAfterTimeLimit", null));
    this.interruptAfterTimeLimit = QualifiedParameters.safeTimeout(QualifiedParameters.readOrDefault(p, "interruptAfterTimeLimit", null));
    this.markInterruptAsFailure = QualifiedParameters.readBoolean(p, "markInterruptAsFailure");
    this.skipEqualValues = QualifiedParameters.readBoolean(p, "skipEqualValues");
    this.ignoreEqualValues = QualifiedParameters.readBoolean(p, "ignoreEqualValues");
    this.logger = QualifiedParameters.readOrDefault(p, "logger", (v) => {
      console.log(v);
    });
    this.path = QualifiedParameters.readOrDefault(p, "path", "");
    this.unbiased = QualifiedParameters.readBoolean(p, "unbiased");
    this.examples = QualifiedParameters.readOrDefault(p, "examples", []);
    this.endOnFailure = QualifiedParameters.readBoolean(p, "endOnFailure");
    this.reporter = QualifiedParameters.readOrDefault(p, "reporter", null);
    this.asyncReporter = QualifiedParameters.readOrDefault(p, "asyncReporter", null);
    this.errorWithCause = QualifiedParameters.readBoolean(p, "errorWithCause");
  }
  toParameters() {
    const orUndefined = (value) => value !== null ? value : undefined;
    const parameters = {
      seed: this.seed,
      randomType: this.randomType,
      numRuns: this.numRuns,
      maxSkipsPerRun: this.maxSkipsPerRun,
      timeout: orUndefined(this.timeout),
      skipAllAfterTimeLimit: orUndefined(this.skipAllAfterTimeLimit),
      interruptAfterTimeLimit: orUndefined(this.interruptAfterTimeLimit),
      markInterruptAsFailure: this.markInterruptAsFailure,
      skipEqualValues: this.skipEqualValues,
      ignoreEqualValues: this.ignoreEqualValues,
      path: this.path,
      logger: this.logger,
      unbiased: this.unbiased,
      verbose: this.verbose,
      examples: this.examples,
      endOnFailure: this.endOnFailure,
      reporter: orUndefined(this.reporter),
      asyncReporter: orUndefined(this.asyncReporter),
      errorWithCause: this.errorWithCause
    };
    return parameters;
  }
  static read(op) {
    return new QualifiedParameters(op);
  }
}
var safeDateNow, safeMathMin, safeMathRandom;
var init_QualifiedParameters = __esm(() => {
  init_pure_rand();
  init_VerbosityLevel();
  safeDateNow = Date.now;
  safeMathMin = Math.min;
  safeMathRandom = Math.random;
  QualifiedParameters.createQualifiedRandomGenerator = (random2) => {
    return (seed) => {
      const rng = random2(seed);
      if (rng.unsafeJump === undefined) {
        rng.unsafeJump = () => unsafeSkipN(rng, 42);
      }
      return rng;
    };
  };
  QualifiedParameters.readSeed = (p) => {
    if (p.seed == null)
      return safeDateNow() ^ safeMathRandom() * 4294967296;
    const seed32 = p.seed | 0;
    if (p.seed === seed32)
      return seed32;
    const gap = p.seed - seed32;
    return seed32 ^ gap * 4294967296;
  };
  QualifiedParameters.readRandomType = (p) => {
    if (p.randomType == null)
      return pure_rand_default2.xorshift128plus;
    if (typeof p.randomType === "string") {
      switch (p.randomType) {
        case "mersenne":
          return QualifiedParameters.createQualifiedRandomGenerator(pure_rand_default2.mersenne);
        case "congruential":
        case "congruential32":
          return QualifiedParameters.createQualifiedRandomGenerator(pure_rand_default2.congruential32);
        case "xorshift128plus":
          return pure_rand_default2.xorshift128plus;
        case "xoroshiro128plus":
          return pure_rand_default2.xoroshiro128plus;
        default:
          throw new Error(`Invalid random specified: '${p.randomType}'`);
      }
    }
    const mrng = p.randomType(0);
    if ("min" in mrng && mrng.min !== -2147483648) {
      throw new Error(`Invalid random number generator: min must equal -0x80000000, got ${String(mrng.min)}`);
    }
    if ("max" in mrng && mrng.max !== 2147483647) {
      throw new Error(`Invalid random number generator: max must equal 0x7fffffff, got ${String(mrng.max)}`);
    }
    if ("unsafeJump" in mrng) {
      return p.randomType;
    }
    return QualifiedParameters.createQualifiedRandomGenerator(p.randomType);
  };
  QualifiedParameters.readNumRuns = (p) => {
    const defaultValue = 100;
    if (p.numRuns != null)
      return p.numRuns;
    if (p.num_runs != null)
      return p.num_runs;
    return defaultValue;
  };
  QualifiedParameters.readVerbose = (p) => {
    if (p.verbose == null)
      return VerbosityLevel.None;
    if (typeof p.verbose === "boolean") {
      return p.verbose === true ? VerbosityLevel.Verbose : VerbosityLevel.None;
    }
    if (p.verbose <= VerbosityLevel.None) {
      return VerbosityLevel.None;
    }
    if (p.verbose >= VerbosityLevel.VeryVerbose) {
      return VerbosityLevel.VeryVerbose;
    }
    return p.verbose | 0;
  };
  QualifiedParameters.readBoolean = (p, key) => p[key] === true;
  QualifiedParameters.readOrDefault = (p, key, defaultValue) => {
    const value = p[key];
    return value != null ? value : defaultValue;
  };
  QualifiedParameters.safeTimeout = (value) => {
    if (value === null) {
      return null;
    }
    return safeMathMin(value, 2147483647);
  };
});

// node_modules/fast-check/lib/esm/check/property/SkipAfterProperty.js
function interruptAfter(timeMs, setTimeoutSafe, clearTimeoutSafe) {
  let timeoutHandle = null;
  const promise = new Promise((resolve) => {
    timeoutHandle = setTimeoutSafe(() => {
      const preconditionFailure = new PreconditionFailure(true);
      resolve(preconditionFailure);
    }, timeMs);
  });
  return {
    clear: () => clearTimeoutSafe(timeoutHandle),
    promise
  };
}

class SkipAfterProperty {
  constructor(property2, getTime, timeLimit, interruptExecution, setTimeoutSafe, clearTimeoutSafe) {
    this.property = property2;
    this.getTime = getTime;
    this.interruptExecution = interruptExecution;
    this.setTimeoutSafe = setTimeoutSafe;
    this.clearTimeoutSafe = clearTimeoutSafe;
    this.skipAfterTime = this.getTime() + timeLimit;
    if (this.property.runBeforeEach !== undefined && this.property.runAfterEach !== undefined) {
      this.runBeforeEach = () => this.property.runBeforeEach();
      this.runAfterEach = () => this.property.runAfterEach();
    }
  }
  isAsync() {
    return this.property.isAsync();
  }
  generate(mrng, runId) {
    return this.property.generate(mrng, runId);
  }
  shrink(value) {
    return this.property.shrink(value);
  }
  run(v, dontRunHook) {
    const remainingTime = this.skipAfterTime - this.getTime();
    if (remainingTime <= 0) {
      const preconditionFailure = new PreconditionFailure(this.interruptExecution);
      if (this.isAsync()) {
        return Promise.resolve(preconditionFailure);
      } else {
        return preconditionFailure;
      }
    }
    if (this.interruptExecution && this.isAsync()) {
      const t = interruptAfter(remainingTime, this.setTimeoutSafe, this.clearTimeoutSafe);
      const propRun = Promise.race([this.property.run(v, dontRunHook), t.promise]);
      propRun.then(t.clear, t.clear);
      return propRun;
    }
    return this.property.run(v, dontRunHook);
  }
}
var init_SkipAfterProperty = __esm(() => {
  init_PreconditionFailure();
});

// node_modules/fast-check/lib/esm/check/property/TimeoutProperty.js
class TimeoutProperty {
  constructor(property2, timeMs, setTimeoutSafe, clearTimeoutSafe) {
    this.property = property2;
    this.timeMs = timeMs;
    this.setTimeoutSafe = setTimeoutSafe;
    this.clearTimeoutSafe = clearTimeoutSafe;
    if (this.property.runBeforeEach !== undefined && this.property.runAfterEach !== undefined) {
      this.runBeforeEach = () => Promise.resolve(this.property.runBeforeEach());
      this.runAfterEach = () => Promise.resolve(this.property.runAfterEach());
    }
  }
  isAsync() {
    return true;
  }
  generate(mrng, runId) {
    return this.property.generate(mrng, runId);
  }
  shrink(value) {
    return this.property.shrink(value);
  }
  async run(v, dontRunHook) {
    const t = timeoutAfter(this.timeMs, this.setTimeoutSafe, this.clearTimeoutSafe);
    const propRun = Promise.race([this.property.run(v, dontRunHook), t.promise]);
    propRun.then(t.clear, t.clear);
    return propRun;
  }
}
var timeoutAfter = (timeMs, setTimeoutSafe, clearTimeoutSafe) => {
  let timeoutHandle = null;
  const promise = new Promise((resolve) => {
    timeoutHandle = setTimeoutSafe(() => {
      resolve({
        error: new SError(`Property timeout: exceeded limit of ${timeMs} milliseconds`),
        errorMessage: `Property timeout: exceeded limit of ${timeMs} milliseconds`
      });
    }, timeMs);
  });
  return {
    clear: () => clearTimeoutSafe(timeoutHandle),
    promise
  };
};
var init_TimeoutProperty = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/check/property/UnbiasedProperty.js
class UnbiasedProperty {
  constructor(property2) {
    this.property = property2;
    if (this.property.runBeforeEach !== undefined && this.property.runAfterEach !== undefined) {
      this.runBeforeEach = () => this.property.runBeforeEach();
      this.runAfterEach = () => this.property.runAfterEach();
    }
  }
  isAsync() {
    return this.property.isAsync();
  }
  generate(mrng, _runId) {
    return this.property.generate(mrng, undefined);
  }
  shrink(value) {
    return this.property.shrink(value);
  }
  run(v, dontRunHook) {
    return this.property.run(v, dontRunHook);
  }
}

// node_modules/fast-check/lib/esm/utils/stringify.js
function hasToStringMethod(instance) {
  return instance !== null && (typeof instance === "object" || typeof instance === "function") && toStringMethod in instance && typeof instance[toStringMethod] === "function";
}
function hasAsyncToStringMethod(instance) {
  return instance !== null && (typeof instance === "object" || typeof instance === "function") && asyncToStringMethod in instance && typeof instance[asyncToStringMethod] === "function";
}
function getSymbolDescription(s) {
  if (s.description !== undefined)
    return s.description;
  const m = findSymbolNameRegex.exec(SString(s));
  return m && m[1].length ? m[1] : null;
}
function stringifyNumber(numValue) {
  switch (numValue) {
    case 0:
      return 1 / numValue === safeNegativeInfinity ? "-0" : "0";
    case safeNegativeInfinity:
      return "Number.NEGATIVE_INFINITY";
    case safePositiveInfinity:
      return "Number.POSITIVE_INFINITY";
    default:
      return numValue === numValue ? SString(numValue) : "Number.NaN";
  }
}
function isSparseArray(arr) {
  let previousNumberedIndex = -1;
  for (const index in arr) {
    const numberedIndex = Number(index);
    if (numberedIndex !== previousNumberedIndex + 1)
      return true;
    previousNumberedIndex = numberedIndex;
  }
  return previousNumberedIndex + 1 !== arr.length;
}
function stringifyInternal(value, previousValues, getAsyncContent) {
  const currentValues = [...previousValues, value];
  if (typeof value === "object") {
    if (safeIndexOf(previousValues, value) !== -1) {
      return "[cyclic]";
    }
  }
  if (hasAsyncToStringMethod(value)) {
    const content = getAsyncContent(value);
    if (content.state === "fulfilled") {
      return content.value;
    }
  }
  if (hasToStringMethod(value)) {
    try {
      return value[toStringMethod]();
    } catch (err2) {}
  }
  switch (safeToString(value)) {
    case "[object Array]": {
      const arr = value;
      if (arr.length >= 50 && isSparseArray(arr)) {
        const assignments = [];
        for (const index in arr) {
          if (!safeNumberIsNaN(Number(index)))
            safePush(assignments, `${index}:${stringifyInternal(arr[index], currentValues, getAsyncContent)}`);
        }
        return assignments.length !== 0 ? `Object.assign(Array(${arr.length}),{${safeJoin(assignments, ",")}})` : `Array(${arr.length})`;
      }
      const stringifiedArray = safeJoin(safeMap(arr, (v) => stringifyInternal(v, currentValues, getAsyncContent)), ",");
      return arr.length === 0 || arr.length - 1 in arr ? `[${stringifiedArray}]` : `[${stringifiedArray},]`;
    }
    case "[object BigInt]":
      return `${value}n`;
    case "[object Boolean]": {
      const unboxedToString = value == true ? "true" : "false";
      return typeof value === "boolean" ? unboxedToString : `new Boolean(${unboxedToString})`;
    }
    case "[object Date]": {
      const d = value;
      return safeNumberIsNaN(safeGetTime(d)) ? `new Date(NaN)` : `new Date(${safeJsonStringify(safeToISOString(d))})`;
    }
    case "[object Map]":
      return `new Map(${stringifyInternal(Array.from(value), currentValues, getAsyncContent)})`;
    case "[object Null]":
      return `null`;
    case "[object Number]":
      return typeof value === "number" ? stringifyNumber(value) : `new Number(${stringifyNumber(Number(value))})`;
    case "[object Object]": {
      try {
        const toStringAccessor = value.toString;
        if (typeof toStringAccessor === "function" && toStringAccessor !== Object.prototype.toString) {
          return value.toString();
        }
      } catch (err2) {
        return "[object Object]";
      }
      const mapper = (k) => `${k === "__proto__" ? '["__proto__"]' : typeof k === "symbol" ? `[${stringifyInternal(k, currentValues, getAsyncContent)}]` : safeJsonStringify(k)}:${stringifyInternal(value[k], currentValues, getAsyncContent)}`;
      const stringifiedProperties = [
        ...safeMap(safeObjectKeys(value), mapper),
        ...safeMap(safeFilter(safeObjectGetOwnPropertySymbols(value), (s) => {
          const descriptor = safeObjectGetOwnPropertyDescriptor(value, s);
          return descriptor && descriptor.enumerable;
        }), mapper)
      ];
      const rawRepr = "{" + safeJoin(stringifiedProperties, ",") + "}";
      if (safeObjectGetPrototypeOf(value) === null) {
        return rawRepr === "{}" ? "Object.create(null)" : `Object.assign(Object.create(null),${rawRepr})`;
      }
      return rawRepr;
    }
    case "[object Set]":
      return `new Set(${stringifyInternal(Array.from(value), currentValues, getAsyncContent)})`;
    case "[object String]":
      return typeof value === "string" ? safeJsonStringify(value) : `new String(${safeJsonStringify(value)})`;
    case "[object Symbol]": {
      const s = value;
      if (SSymbol.keyFor(s) !== undefined) {
        return `Symbol.for(${safeJsonStringify(SSymbol.keyFor(s))})`;
      }
      const desc = getSymbolDescription(s);
      if (desc === null) {
        return "Symbol()";
      }
      const knownSymbol = desc.startsWith("Symbol.") && SSymbol[desc.substring(7)];
      return s === knownSymbol ? desc : `Symbol(${safeJsonStringify(desc)})`;
    }
    case "[object Promise]": {
      const promiseContent = getAsyncContent(value);
      switch (promiseContent.state) {
        case "fulfilled":
          return `Promise.resolve(${stringifyInternal(promiseContent.value, currentValues, getAsyncContent)})`;
        case "rejected":
          return `Promise.reject(${stringifyInternal(promiseContent.value, currentValues, getAsyncContent)})`;
        case "pending":
          return `new Promise(() => {/*pending*/})`;
        case "unknown":
        default:
          return `new Promise(() => {/*unknown*/})`;
      }
    }
    case "[object Error]":
      if (value instanceof Error) {
        return `new Error(${stringifyInternal(value.message, currentValues, getAsyncContent)})`;
      }
      break;
    case "[object Undefined]":
      return `undefined`;
    case "[object Int8Array]":
    case "[object Uint8Array]":
    case "[object Uint8ClampedArray]":
    case "[object Int16Array]":
    case "[object Uint16Array]":
    case "[object Int32Array]":
    case "[object Uint32Array]":
    case "[object Float32Array]":
    case "[object Float64Array]":
    case "[object BigInt64Array]":
    case "[object BigUint64Array]": {
      if (typeof safeBufferIsBuffer === "function" && safeBufferIsBuffer(value)) {
        return `Buffer.from(${stringifyInternal(safeArrayFrom(value.values()), currentValues, getAsyncContent)})`;
      }
      const valuePrototype = safeObjectGetPrototypeOf(value);
      const className = valuePrototype && valuePrototype.constructor && valuePrototype.constructor.name;
      if (typeof className === "string") {
        const typedArray = value;
        const valuesFromTypedArr = typedArray.values();
        return `${className}.from(${stringifyInternal(safeArrayFrom(valuesFromTypedArr), currentValues, getAsyncContent)})`;
      }
      break;
    }
  }
  try {
    return value.toString();
  } catch (_a2) {
    return safeToString(value);
  }
}
function stringify(value) {
  return stringifyInternal(value, [], () => ({ state: "unknown", value: undefined }));
}
function possiblyAsyncStringify(value) {
  const stillPendingMarker = SSymbol();
  const pendingPromisesForCache = [];
  const cache = new SMap;
  function createDelay0() {
    let handleId = null;
    const cancel = () => {
      if (handleId !== null) {
        clearTimeout(handleId);
      }
    };
    const delay = new Promise((resolve) => {
      handleId = setTimeout(() => {
        handleId = null;
        resolve(stillPendingMarker);
      }, 0);
    });
    return { delay, cancel };
  }
  const unknownState = { state: "unknown", value: undefined };
  const getAsyncContent = function getAsyncContent(data) {
    const cacheKey = data;
    if (cache.has(cacheKey)) {
      return cache.get(cacheKey);
    }
    const delay0 = createDelay0();
    const p = asyncToStringMethod in data ? Promise.resolve().then(() => data[asyncToStringMethod]()) : data;
    p.catch(() => {});
    pendingPromisesForCache.push(Promise.race([p, delay0.delay]).then((successValue) => {
      if (successValue === stillPendingMarker)
        cache.set(cacheKey, { state: "pending", value: undefined });
      else
        cache.set(cacheKey, { state: "fulfilled", value: successValue });
      delay0.cancel();
    }, (errorValue) => {
      cache.set(cacheKey, { state: "rejected", value: errorValue });
      delay0.cancel();
    }));
    cache.set(cacheKey, unknownState);
    return unknownState;
  };
  function loop() {
    const stringifiedValue = stringifyInternal(value, [], getAsyncContent);
    if (pendingPromisesForCache.length === 0) {
      return stringifiedValue;
    }
    return Promise.all(pendingPromisesForCache.splice(0)).then(loop);
  }
  return loop();
}
async function asyncStringify(value) {
  return Promise.resolve(possiblyAsyncStringify(value));
}
var safeArrayFrom, safeBufferIsBuffer, safeJsonStringify, safeNumberIsNaN, safeObjectKeys, safeObjectGetOwnPropertySymbols, safeObjectGetOwnPropertyDescriptor, safeObjectGetPrototypeOf, safeNegativeInfinity, safePositiveInfinity, toStringMethod, asyncToStringMethod, findSymbolNameRegex;
var init_stringify = __esm(() => {
  init_globals();
  safeArrayFrom = Array.from;
  safeBufferIsBuffer = typeof Buffer !== "undefined" ? Buffer.isBuffer : undefined;
  safeJsonStringify = JSON.stringify;
  safeNumberIsNaN = Number.isNaN;
  safeObjectKeys = Object.keys;
  safeObjectGetOwnPropertySymbols = Object.getOwnPropertySymbols;
  safeObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  safeObjectGetPrototypeOf = Object.getPrototypeOf;
  safeNegativeInfinity = Number.NEGATIVE_INFINITY;
  safePositiveInfinity = Number.POSITIVE_INFINITY;
  toStringMethod = Symbol.for("fast-check/toStringMethod");
  asyncToStringMethod = Symbol.for("fast-check/asyncToStringMethod");
  findSymbolNameRegex = /^Symbol\((.*)\)$/;
});

// node_modules/fast-check/lib/esm/check/property/IgnoreEqualValuesProperty.js
function fromSyncCached(cachedValue) {
  return cachedValue === null ? new PreconditionFailure : cachedValue;
}
function fromCached(...data) {
  if (data[1])
    return data[0].then(fromSyncCached);
  return fromSyncCached(data[0]);
}
function fromCachedUnsafe(cachedValue, isAsync2) {
  return fromCached(cachedValue, isAsync2);
}

class IgnoreEqualValuesProperty {
  constructor(property2, skipRuns) {
    this.property = property2;
    this.skipRuns = skipRuns;
    this.coveredCases = new Map;
    if (this.property.runBeforeEach !== undefined && this.property.runAfterEach !== undefined) {
      this.runBeforeEach = () => this.property.runBeforeEach();
      this.runAfterEach = () => this.property.runAfterEach();
    }
  }
  isAsync() {
    return this.property.isAsync();
  }
  generate(mrng, runId) {
    return this.property.generate(mrng, runId);
  }
  shrink(value) {
    return this.property.shrink(value);
  }
  run(v, dontRunHook) {
    const stringifiedValue = stringify(v);
    if (this.coveredCases.has(stringifiedValue)) {
      const lastOutput = this.coveredCases.get(stringifiedValue);
      if (!this.skipRuns) {
        return lastOutput;
      }
      return fromCachedUnsafe(lastOutput, this.property.isAsync());
    }
    const out = this.property.run(v, dontRunHook);
    this.coveredCases.set(stringifiedValue, out);
    return out;
  }
}
var init_IgnoreEqualValuesProperty = __esm(() => {
  init_stringify();
  init_PreconditionFailure();
});

// node_modules/fast-check/lib/esm/check/runner/DecorateProperty.js
function decorateProperty(rawProperty, qParams) {
  let prop = rawProperty;
  if (rawProperty.isAsync() && qParams.timeout != null) {
    prop = new TimeoutProperty(prop, qParams.timeout, safeSetTimeout, safeClearTimeout);
  }
  if (qParams.unbiased) {
    prop = new UnbiasedProperty(prop);
  }
  if (qParams.skipAllAfterTimeLimit != null) {
    prop = new SkipAfterProperty(prop, safeDateNow2, qParams.skipAllAfterTimeLimit, false, safeSetTimeout, safeClearTimeout);
  }
  if (qParams.interruptAfterTimeLimit != null) {
    prop = new SkipAfterProperty(prop, safeDateNow2, qParams.interruptAfterTimeLimit, true, safeSetTimeout, safeClearTimeout);
  }
  if (qParams.skipEqualValues) {
    prop = new IgnoreEqualValuesProperty(prop, true);
  }
  if (qParams.ignoreEqualValues) {
    prop = new IgnoreEqualValuesProperty(prop, false);
  }
  return prop;
}
var safeDateNow2, safeSetTimeout, safeClearTimeout;
var init_DecorateProperty = __esm(() => {
  init_SkipAfterProperty();
  init_TimeoutProperty();
  init_IgnoreEqualValuesProperty();
  safeDateNow2 = Date.now;
  safeSetTimeout = setTimeout;
  safeClearTimeout = clearTimeout;
});

// node_modules/fast-check/lib/esm/check/runner/reporter/ExecutionStatus.js
var ExecutionStatus;
var init_ExecutionStatus = __esm(() => {
  (function(ExecutionStatus2) {
    ExecutionStatus2[ExecutionStatus2["Success"] = 0] = "Success";
    ExecutionStatus2[ExecutionStatus2["Skipped"] = -1] = "Skipped";
    ExecutionStatus2[ExecutionStatus2["Failure"] = 1] = "Failure";
  })(ExecutionStatus || (ExecutionStatus = {}));
});

// node_modules/fast-check/lib/esm/check/runner/reporter/RunExecution.js
class RunExecution {
  constructor(verbosity, interruptedAsFailure) {
    this.verbosity = verbosity;
    this.interruptedAsFailure = interruptedAsFailure;
    this.isSuccess = () => this.pathToFailure == null;
    this.firstFailure = () => this.pathToFailure ? +safeSplit(this.pathToFailure, ":")[0] : -1;
    this.numShrinks = () => this.pathToFailure ? safeSplit(this.pathToFailure, ":").length - 1 : 0;
    this.rootExecutionTrees = [];
    this.currentLevelExecutionTrees = this.rootExecutionTrees;
    this.failure = null;
    this.numSkips = 0;
    this.numSuccesses = 0;
    this.interrupted = false;
  }
  appendExecutionTree(status, value) {
    const currentTree = { status, value, children: [] };
    this.currentLevelExecutionTrees.push(currentTree);
    return currentTree;
  }
  fail(value, id, failure) {
    if (this.verbosity >= VerbosityLevel.Verbose) {
      const currentTree = this.appendExecutionTree(ExecutionStatus.Failure, value);
      this.currentLevelExecutionTrees = currentTree.children;
    }
    if (this.pathToFailure == null)
      this.pathToFailure = `${id}`;
    else
      this.pathToFailure += `:${id}`;
    this.value = value;
    this.failure = failure;
  }
  skip(value) {
    if (this.verbosity >= VerbosityLevel.VeryVerbose) {
      this.appendExecutionTree(ExecutionStatus.Skipped, value);
    }
    if (this.pathToFailure == null) {
      ++this.numSkips;
    }
  }
  success(value) {
    if (this.verbosity >= VerbosityLevel.VeryVerbose) {
      this.appendExecutionTree(ExecutionStatus.Success, value);
    }
    if (this.pathToFailure == null) {
      ++this.numSuccesses;
    }
  }
  interrupt() {
    this.interrupted = true;
  }
  extractFailures() {
    if (this.isSuccess()) {
      return [];
    }
    const failures = [];
    let cursor = this.rootExecutionTrees;
    while (cursor.length > 0 && cursor[cursor.length - 1].status === ExecutionStatus.Failure) {
      const failureTree = cursor[cursor.length - 1];
      failures.push(failureTree.value);
      cursor = failureTree.children;
    }
    return failures;
  }
  toRunDetails(seed, basePath, maxSkips, qParams) {
    if (!this.isSuccess()) {
      return {
        failed: true,
        interrupted: this.interrupted,
        numRuns: this.firstFailure() + 1 - this.numSkips,
        numSkips: this.numSkips,
        numShrinks: this.numShrinks(),
        seed,
        counterexample: this.value,
        counterexamplePath: RunExecution.mergePaths(basePath, this.pathToFailure),
        error: this.failure.errorMessage,
        errorInstance: this.failure.error,
        failures: this.extractFailures(),
        executionSummary: this.rootExecutionTrees,
        verbose: this.verbosity,
        runConfiguration: qParams.toParameters()
      };
    }
    const considerInterruptedAsFailure = this.interruptedAsFailure || this.numSuccesses === 0;
    const failed = this.numSkips > maxSkips || this.interrupted && considerInterruptedAsFailure;
    const out = {
      failed,
      interrupted: this.interrupted,
      numRuns: this.numSuccesses,
      numSkips: this.numSkips,
      numShrinks: 0,
      seed,
      counterexample: null,
      counterexamplePath: null,
      error: null,
      errorInstance: null,
      failures: [],
      executionSummary: this.rootExecutionTrees,
      verbose: this.verbosity,
      runConfiguration: qParams.toParameters()
    };
    return out;
  }
}
var init_RunExecution = __esm(() => {
  init_VerbosityLevel();
  init_ExecutionStatus();
  init_globals();
  RunExecution.mergePaths = (offsetPath, path) => {
    if (offsetPath.length === 0)
      return path;
    const offsetItems = offsetPath.split(":");
    const remainingItems = path.split(":");
    const middle = +offsetItems[offsetItems.length - 1] + +remainingItems[0];
    return [...offsetItems.slice(0, offsetItems.length - 1), `${middle}`, ...remainingItems.slice(1)].join(":");
  };
});

// node_modules/fast-check/lib/esm/check/runner/RunnerIterator.js
var RunnerIterator;
var init_RunnerIterator = __esm(() => {
  init_PreconditionFailure();
  init_RunExecution();
  RunnerIterator = class RunnerIterator {
    constructor(sourceValues, shrink, verbose, interruptedAsFailure) {
      this.sourceValues = sourceValues;
      this.shrink = shrink;
      this.runExecution = new RunExecution(verbose, interruptedAsFailure);
      this.currentIdx = -1;
      this.nextValues = sourceValues;
    }
    [Symbol.iterator]() {
      return this;
    }
    next() {
      const nextValue = this.nextValues.next();
      if (nextValue.done || this.runExecution.interrupted) {
        return { done: true, value: undefined };
      }
      this.currentValue = nextValue.value;
      ++this.currentIdx;
      return { done: false, value: nextValue.value.value_ };
    }
    handleResult(result2) {
      if (result2 != null && typeof result2 === "object" && !PreconditionFailure.isFailure(result2)) {
        this.runExecution.fail(this.currentValue.value_, this.currentIdx, result2);
        this.currentIdx = -1;
        this.nextValues = this.shrink(this.currentValue);
      } else if (result2 != null) {
        if (!result2.interruptExecution) {
          this.runExecution.skip(this.currentValue.value_);
          this.sourceValues.skippedOne();
        } else {
          this.runExecution.interrupt();
        }
      } else {
        this.runExecution.success(this.currentValue.value_);
      }
    }
  };
});

// node_modules/fast-check/lib/esm/check/runner/SourceValuesIterator.js
var SourceValuesIterator;
var init_SourceValuesIterator = __esm(() => {
  SourceValuesIterator = class SourceValuesIterator {
    constructor(initialValues, maxInitialIterations, remainingSkips) {
      this.initialValues = initialValues;
      this.maxInitialIterations = maxInitialIterations;
      this.remainingSkips = remainingSkips;
    }
    [Symbol.iterator]() {
      return this;
    }
    next() {
      if (--this.maxInitialIterations !== -1 && this.remainingSkips >= 0) {
        const n = this.initialValues.next();
        if (!n.done)
          return { value: n.value, done: false };
      }
      return { value: undefined, done: true };
    }
    skippedOne() {
      --this.remainingSkips;
      ++this.maxInitialIterations;
    }
  };
});

// node_modules/fast-check/lib/esm/random/generator/Random.js
class Random {
  constructor(sourceRng) {
    this.internalRng = sourceRng.clone();
  }
  clone() {
    return new Random(this.internalRng);
  }
  next(bits2) {
    return unsafeUniformIntDistribution(0, (1 << bits2) - 1, this.internalRng);
  }
  nextBoolean() {
    return unsafeUniformIntDistribution(0, 1, this.internalRng) == 1;
  }
  nextInt(min3, max4) {
    return unsafeUniformIntDistribution(min3 == null ? Random.MIN_INT : min3, max4 == null ? Random.MAX_INT : max4, this.internalRng);
  }
  nextBigInt(min3, max4) {
    return unsafeUniformBigIntDistribution(min3, max4, this.internalRng);
  }
  nextArrayInt(min3, max4) {
    return unsafeUniformArrayIntDistribution(min3, max4, this.internalRng);
  }
  nextDouble() {
    const a = this.next(26);
    const b = this.next(27);
    return (a * Random.DBL_FACTOR + b) * Random.DBL_DIVISOR;
  }
  getState() {
    if ("getState" in this.internalRng && typeof this.internalRng.getState === "function") {
      return this.internalRng.getState();
    }
    return;
  }
}
var init_Random = __esm(() => {
  init_pure_rand();
  Random.MIN_INT = 2147483648 | 0;
  Random.MAX_INT = 2147483647 | 0;
  Random.DBL_FACTOR = Math.pow(2, 27);
  Random.DBL_DIVISOR = Math.pow(2, -53);
});

// node_modules/fast-check/lib/esm/check/runner/Tosser.js
function tossNext(generator, rng, index) {
  rng.unsafeJump();
  return generator.generate(new Random(rng), index);
}
function* toss(generator, seed, random2, examples) {
  for (let idx = 0;idx !== examples.length; ++idx) {
    yield new Value(examples[idx], undefined);
  }
  for (let idx = 0, rng = random2(seed);; ++idx) {
    yield tossNext(generator, rng, idx);
  }
}
function lazyGenerate(generator, rng, idx) {
  return () => generator.generate(new Random(rng), idx);
}
function* lazyToss(generator, seed, random2, examples) {
  yield* safeMap(examples, (e) => () => new Value(e, undefined));
  let idx = 0;
  let rng = random2(seed);
  for (;; ) {
    rng = rng.jump ? rng.jump() : skipN(rng, 42);
    yield lazyGenerate(generator, rng, idx++);
  }
}
var init_Tosser = __esm(() => {
  init_pure_rand();
  init_Random();
  init_Value();
  init_globals();
});

// node_modules/fast-check/lib/esm/check/runner/utils/PathWalker.js
function produce(producer) {
  return producer();
}
function pathWalk(path, initialProducers, shrink) {
  const producers = initialProducers;
  const segments = path.split(":").map((text) => +text);
  if (segments.length === 0) {
    return producers.map(produce);
  }
  if (!segments.every((v) => !Number.isNaN(v))) {
    throw new Error(`Unable to replay, got invalid path=${path}`);
  }
  let values2 = producers.drop(segments[0]).map(produce);
  for (const s of segments.slice(1)) {
    const valueToShrink = values2.getNthOrLast(0);
    if (valueToShrink === null) {
      throw new Error(`Unable to replay, got wrong path=${path}`);
    }
    values2 = shrink(valueToShrink).drop(s);
  }
  return values2;
}

// node_modules/fast-check/lib/esm/check/runner/utils/RunDetailsFormatter.js
function formatHints(hints) {
  if (hints.length === 1) {
    return `Hint: ${hints[0]}`;
  }
  return hints.map((h, idx) => `Hint (${idx + 1}): ${h}`).join(`
`);
}
function formatFailures(failures, stringifyOne) {
  return `Encountered failures were:
- ${failures.map(stringifyOne).join(`
- `)}`;
}
function formatExecutionSummary(executionTrees, stringifyOne) {
  const summaryLines = [];
  const remainingTreesAndDepth = [];
  for (const tree of executionTrees.slice().reverse()) {
    remainingTreesAndDepth.push({ depth: 1, tree });
  }
  while (remainingTreesAndDepth.length !== 0) {
    const currentTreeAndDepth = remainingTreesAndDepth.pop();
    const currentTree = currentTreeAndDepth.tree;
    const currentDepth = currentTreeAndDepth.depth;
    const statusIcon = currentTree.status === ExecutionStatus.Success ? "\x1B[32m√\x1B[0m" : currentTree.status === ExecutionStatus.Failure ? "\x1B[31m×\x1B[0m" : "\x1B[33m!\x1B[0m";
    const leftPadding = Array(currentDepth).join(". ");
    summaryLines.push(`${leftPadding}${statusIcon} ${stringifyOne(currentTree.value)}`);
    for (const tree of currentTree.children.slice().reverse()) {
      remainingTreesAndDepth.push({ depth: currentDepth + 1, tree });
    }
  }
  return `Execution summary:
${summaryLines.join(`
`)}`;
}
function preFormatTooManySkipped(out, stringifyOne) {
  const message = `Failed to run property, too many pre-condition failures encountered
{ seed: ${out.seed} }

Ran ${out.numRuns} time(s)
Skipped ${out.numSkips} time(s)`;
  let details = null;
  const hints = [
    "Try to reduce the number of rejected values by combining map, flatMap and built-in arbitraries",
    "Increase failure tolerance by setting maxSkipsPerRun to an higher value"
  ];
  if (out.verbose >= VerbosityLevel.VeryVerbose) {
    details = formatExecutionSummary(out.executionSummary, stringifyOne);
  } else {
    safePush(hints, "Enable verbose mode at level VeryVerbose in order to check all generated values and their associated status");
  }
  return { message, details, hints };
}
function preFormatFailure(out, stringifyOne) {
  const noErrorInMessage = out.runConfiguration.errorWithCause;
  const messageErrorPart = noErrorInMessage ? "" : `
Got ${safeReplace(out.error, /^Error: /, "error: ")}`;
  const message = `Property failed after ${out.numRuns} tests
{ seed: ${out.seed}, path: "${out.counterexamplePath}", endOnFailure: true }
Counterexample: ${stringifyOne(out.counterexample)}
Shrunk ${out.numShrinks} time(s)${messageErrorPart}`;
  let details = null;
  const hints = [];
  if (out.verbose >= VerbosityLevel.VeryVerbose) {
    details = formatExecutionSummary(out.executionSummary, stringifyOne);
  } else if (out.verbose === VerbosityLevel.Verbose) {
    details = formatFailures(out.failures, stringifyOne);
  } else {
    safePush(hints, "Enable verbose mode in order to have the list of all failing values encountered during the run");
  }
  return { message, details, hints };
}
function preFormatEarlyInterrupted(out, stringifyOne) {
  const message = `Property interrupted after ${out.numRuns} tests
{ seed: ${out.seed} }`;
  let details = null;
  const hints = [];
  if (out.verbose >= VerbosityLevel.VeryVerbose) {
    details = formatExecutionSummary(out.executionSummary, stringifyOne);
  } else {
    safePush(hints, "Enable verbose mode at level VeryVerbose in order to check all generated values and their associated status");
  }
  return { message, details, hints };
}
function defaultReportMessageInternal(out, stringifyOne) {
  if (!out.failed)
    return;
  const { message, details, hints } = out.counterexamplePath === null ? out.interrupted ? preFormatEarlyInterrupted(out, stringifyOne) : preFormatTooManySkipped(out, stringifyOne) : preFormatFailure(out, stringifyOne);
  let errorMessage = message;
  if (details != null)
    errorMessage += `

${details}`;
  if (hints.length > 0)
    errorMessage += `

${formatHints(hints)}`;
  return errorMessage;
}
function defaultReportMessage(out) {
  return defaultReportMessageInternal(out, stringify);
}
async function asyncDefaultReportMessage(out) {
  const pendingStringifieds = [];
  function stringifyOne(value) {
    const stringified = possiblyAsyncStringify(value);
    if (typeof stringified === "string") {
      return stringified;
    }
    pendingStringifieds.push(Promise.all([value, stringified]));
    return "…";
  }
  const firstTryMessage = defaultReportMessageInternal(out, stringifyOne);
  if (pendingStringifieds.length === 0) {
    return firstTryMessage;
  }
  const registeredValues = new SMap(await Promise.all(pendingStringifieds));
  function stringifySecond(value) {
    const asyncStringifiedIfRegistered = safeMapGet(registeredValues, value);
    if (asyncStringifiedIfRegistered !== undefined) {
      return asyncStringifiedIfRegistered;
    }
    return stringify(value);
  }
  return defaultReportMessageInternal(out, stringifySecond);
}
function buildError(errorMessage, out) {
  if (!out.runConfiguration.errorWithCause) {
    throw new SError(errorMessage);
  }
  const ErrorWithCause = SError;
  const error = new ErrorWithCause(errorMessage, { cause: out.errorInstance });
  if (!("cause" in error)) {
    safeObjectAssign2(error, { cause: out.errorInstance });
  }
  return error;
}
function throwIfFailed(out) {
  if (!out.failed)
    return;
  throw buildError(defaultReportMessage(out), out);
}
async function asyncThrowIfFailed(out) {
  if (!out.failed)
    return;
  throw buildError(await asyncDefaultReportMessage(out), out);
}
function reportRunDetails(out) {
  if (out.runConfiguration.asyncReporter)
    return out.runConfiguration.asyncReporter(out);
  else if (out.runConfiguration.reporter)
    return out.runConfiguration.reporter(out);
  else
    return throwIfFailed(out);
}
async function asyncReportRunDetails(out) {
  if (out.runConfiguration.asyncReporter)
    return out.runConfiguration.asyncReporter(out);
  else if (out.runConfiguration.reporter)
    return out.runConfiguration.reporter(out);
  else
    return asyncThrowIfFailed(out);
}
var safeObjectAssign2;
var init_RunDetailsFormatter = __esm(() => {
  init_globals();
  init_stringify();
  init_VerbosityLevel();
  init_ExecutionStatus();
  safeObjectAssign2 = Object.assign;
});

// node_modules/fast-check/lib/esm/check/runner/Runner.js
function runIt(property2, shrink, sourceValues, verbose, interruptedAsFailure) {
  const isModernProperty = property2.runBeforeEach !== undefined && property2.runAfterEach !== undefined;
  const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);
  for (const v of runner) {
    if (isModernProperty) {
      property2.runBeforeEach();
    }
    const out = property2.run(v, isModernProperty);
    if (isModernProperty) {
      property2.runAfterEach();
    }
    runner.handleResult(out);
  }
  return runner.runExecution;
}
async function asyncRunIt(property2, shrink, sourceValues, verbose, interruptedAsFailure) {
  const isModernProperty = property2.runBeforeEach !== undefined && property2.runAfterEach !== undefined;
  const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);
  for (const v of runner) {
    if (isModernProperty) {
      await property2.runBeforeEach();
    }
    const out = await property2.run(v, isModernProperty);
    if (isModernProperty) {
      await property2.runAfterEach();
    }
    runner.handleResult(out);
  }
  return runner.runExecution;
}
function check(rawProperty, params) {
  if (rawProperty == null || rawProperty.generate == null)
    throw new Error("Invalid property encountered, please use a valid property");
  if (rawProperty.run == null)
    throw new Error("Invalid property encountered, please use a valid property not an arbitrary");
  const qParams = QualifiedParameters.read(safeObjectAssign3(safeObjectAssign3({}, readConfigureGlobal()), params));
  if (qParams.reporter !== null && qParams.asyncReporter !== null)
    throw new Error("Invalid parameters encountered, reporter and asyncReporter cannot be specified together");
  if (qParams.asyncReporter !== null && !rawProperty.isAsync())
    throw new Error("Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified");
  const property2 = decorateProperty(rawProperty, qParams);
  const maxInitialIterations = qParams.path.length === 0 || qParams.path.indexOf(":") === -1 ? qParams.numRuns : -1;
  const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;
  const shrink = (...args) => property2.shrink(...args);
  const initialValues = qParams.path.length === 0 ? toss(property2, qParams.seed, qParams.randomType, qParams.examples) : pathWalk(qParams.path, stream(lazyToss(property2, qParams.seed, qParams.randomType, qParams.examples)), shrink);
  const sourceValues = new SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);
  const finalShrink = !qParams.endOnFailure ? shrink : Stream.nil;
  return property2.isAsync() ? asyncRunIt(property2, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then((e) => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams)) : runIt(property2, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);
}
function assert(property2, params) {
  const out = check(property2, params);
  if (property2.isAsync())
    return out.then(asyncReportRunDetails);
  else
    reportRunDetails(out);
}
var safeObjectAssign3;
var init_Runner = __esm(() => {
  init_Stream();
  init_GlobalParameters();
  init_QualifiedParameters();
  init_DecorateProperty();
  init_RunnerIterator();
  init_SourceValuesIterator();
  init_Tosser();
  init_RunDetailsFormatter();
  safeObjectAssign3 = Object.assign;
});

// node_modules/fast-check/lib/esm/check/runner/Sampler.js
function toProperty(generator, qParams) {
  const prop = !Object.prototype.hasOwnProperty.call(generator, "isAsync") ? new Property(generator, () => true) : generator;
  return qParams.unbiased === true ? new UnbiasedProperty(prop) : prop;
}
function streamSample(generator, params) {
  const extendedParams = typeof params === "number" ? Object.assign(Object.assign({}, readConfigureGlobal()), { numRuns: params }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);
  const qParams = QualifiedParameters.read(extendedParams);
  const nextProperty = toProperty(generator, qParams);
  const shrink = nextProperty.shrink.bind(nextProperty);
  const tossedValues = qParams.path.length === 0 ? stream(toss(nextProperty, qParams.seed, qParams.randomType, qParams.examples)) : pathWalk(qParams.path, stream(lazyToss(nextProperty, qParams.seed, qParams.randomType, qParams.examples)), shrink);
  return tossedValues.take(qParams.numRuns).map((s) => s.value_);
}
function sample(generator, params) {
  return [...streamSample(generator, params)];
}
function round2(n) {
  return (Math.round(n * 100) / 100).toFixed(2);
}
function statistics(generator, classify, params) {
  const extendedParams = typeof params === "number" ? Object.assign(Object.assign({}, readConfigureGlobal()), { numRuns: params }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);
  const qParams = QualifiedParameters.read(extendedParams);
  const recorded = {};
  for (const g of streamSample(generator, params)) {
    const out = classify(g);
    const categories = Array.isArray(out) ? out : [out];
    for (const c of categories) {
      recorded[c] = (recorded[c] || 0) + 1;
    }
  }
  const data = Object.entries(recorded).sort((a, b) => b[1] - a[1]).map((i2) => [i2[0], `${round2(i2[1] * 100 / qParams.numRuns)}%`]);
  const longestName = data.map((i2) => i2[0].length).reduce((p, c) => Math.max(p, c), 0);
  const longestPercent = data.map((i2) => i2[1].length).reduce((p, c) => Math.max(p, c), 0);
  for (const item of data) {
    qParams.logger(`${item[0].padEnd(longestName, ".")}..${item[1].padStart(longestPercent, ".")}`);
  }
}
var init_Sampler = __esm(() => {
  init_Stream();
  init_Property_generic();
  init_GlobalParameters();
  init_QualifiedParameters();
  init_Tosser();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/GeneratorValueBuilder.js
function buildGeneratorValue(mrng, biasFactor, computePreBuiltValues, arbitraryCache) {
  const preBuiltValues = computePreBuiltValues();
  let localMrng = mrng.clone();
  const context = { mrng: mrng.clone(), biasFactor, history: [] };
  const valueFunction = (arb) => {
    const preBuiltValue = preBuiltValues[context.history.length];
    if (preBuiltValue !== undefined && preBuiltValue.arb === arb) {
      const value2 = preBuiltValue.value;
      safePush(context.history, { arb, value: value2, context: preBuiltValue.context, mrng: preBuiltValue.mrng });
      localMrng = preBuiltValue.mrng.clone();
      return value2;
    }
    const g = arb.generate(localMrng, biasFactor);
    safePush(context.history, { arb, value: g.value_, context: g.context, mrng: localMrng.clone() });
    return g.value;
  };
  const memoedValueFunction = (arb, ...args) => {
    return valueFunction(arbitraryCache(arb, args));
  };
  const valueMethods = {
    values() {
      return safeMap(context.history, (c) => c.value);
    },
    [cloneMethod]() {
      return buildGeneratorValue(mrng, biasFactor, computePreBuiltValues, arbitraryCache).value;
    },
    [toStringMethod]() {
      return stringify(safeMap(context.history, (c) => c.value));
    }
  };
  const value = safeObjectAssign4(memoedValueFunction, valueMethods);
  return new Value(value, context);
}
var safeObjectAssign4;
var init_GeneratorValueBuilder = __esm(() => {
  init_Value();
  init_symbols();
  init_globals();
  init_stringify();
  safeObjectAssign4 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/StableArbitraryGeneratorCache.js
function buildStableArbitraryGeneratorCache(isEqual2) {
  const previousCallsPerBuilder = new SMap;
  return function stableArbitraryGeneratorCache(builder, args) {
    const entriesForBuilder = safeMapGet(previousCallsPerBuilder, builder);
    if (entriesForBuilder === undefined) {
      const newValue2 = builder(...args);
      safeMapSet(previousCallsPerBuilder, builder, [{ args, value: newValue2 }]);
      return newValue2;
    }
    const safeEntriesForBuilder = entriesForBuilder;
    for (const entry of safeEntriesForBuilder) {
      if (isEqual2(args, entry.args)) {
        return entry.value;
      }
    }
    const newValue = builder(...args);
    safePush(safeEntriesForBuilder, { args, value: newValue });
    return newValue;
  };
}
function naiveIsEqual(v1, v2) {
  if (v1 !== null && typeof v1 === "object" && v2 !== null && typeof v2 === "object") {
    if (safeArrayIsArray2(v1)) {
      if (!safeArrayIsArray2(v2))
        return false;
      if (v1.length !== v2.length)
        return false;
    } else if (safeArrayIsArray2(v2)) {
      return false;
    }
    if (safeObjectKeys2(v1).length !== safeObjectKeys2(v2).length) {
      return false;
    }
    for (const index in v1) {
      if (!(index in v2)) {
        return false;
      }
      if (!naiveIsEqual(v1[index], v2[index])) {
        return false;
      }
    }
    return true;
  } else {
    return safeObjectIs(v1, v2);
  }
}
var safeArrayIsArray2, safeObjectKeys2, safeObjectIs;
var init_StableArbitraryGeneratorCache = __esm(() => {
  init_globals();
  safeArrayIsArray2 = Array.isArray;
  safeObjectKeys2 = Object.keys;
  safeObjectIs = Object.is;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/GeneratorArbitrary.js
var GeneratorArbitrary;
var init_GeneratorArbitrary = __esm(() => {
  init_Arbitrary();
  init_Stream();
  init_globals();
  init_GeneratorValueBuilder();
  init_StableArbitraryGeneratorCache();
  init_TupleArbitrary();
  GeneratorArbitrary = class GeneratorArbitrary extends Arbitrary {
    constructor() {
      super(...arguments);
      this.arbitraryCache = buildStableArbitraryGeneratorCache(naiveIsEqual);
    }
    generate(mrng, biasFactor) {
      return buildGeneratorValue(mrng, biasFactor, () => [], this.arbitraryCache);
    }
    canShrinkWithoutContext(value) {
      return false;
    }
    shrink(_value, context) {
      if (context === undefined) {
        return Stream.nil();
      }
      const safeContext = context;
      const mrng = safeContext.mrng;
      const biasFactor = safeContext.biasFactor;
      const history = safeContext.history;
      return tupleShrink(history.map((c) => c.arb), history.map((c) => c.value), history.map((c) => c.context)).map((shrink) => {
        function computePreBuiltValues() {
          const subValues = shrink.value;
          const subContexts = shrink.context;
          return safeMap(history, (entry, index) => ({
            arb: entry.arb,
            value: subValues[index],
            context: subContexts[index],
            mrng: entry.mrng
          }));
        }
        return buildGeneratorValue(mrng, biasFactor, computePreBuiltValues, this.arbitraryCache);
      });
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/gen.js
function gen3() {
  return new GeneratorArbitrary;
}
var init_gen = __esm(() => {
  init_GeneratorArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/BiasNumericRange.js
function integerLogLike(v) {
  return safeMathFloor(safeMathLog2(v) / safeMathLog2(2));
}
function bigIntLogLike(v) {
  if (v === SBigInt(0))
    return SBigInt(0);
  return SBigInt(SString(v).length);
}
function biasNumericRange(min3, max4, logLike) {
  if (min3 === max4) {
    return [{ min: min3, max: max4 }];
  }
  if (min3 < 0 && max4 > 0) {
    const logMin = logLike(-min3);
    const logMax = logLike(max4);
    return [
      { min: -logMin, max: logMax },
      { min: max4 - logMax, max: max4 },
      { min: min3, max: min3 + logMin }
    ];
  }
  const logGap = logLike(max4 - min3);
  const arbCloseToMin = { min: min3, max: min3 + logGap };
  const arbCloseToMax = { min: max4 - logGap, max: max4 };
  return min3 < 0 ? [arbCloseToMax, arbCloseToMin] : [arbCloseToMin, arbCloseToMax];
}
var safeMathFloor, safeMathLog2;
var init_BiasNumericRange = __esm(() => {
  init_globals();
  safeMathFloor = Math.floor;
  safeMathLog2 = Math.log;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ShrinkInteger.js
function halvePosInteger(n) {
  return safeMathFloor2(n / 2);
}
function halveNegInteger(n) {
  return safeMathCeil(n / 2);
}
function shrinkInteger(current, target, tryTargetAsap) {
  const realGap = current - target;
  function* shrinkDecr() {
    let previous = tryTargetAsap ? undefined : target;
    const gap = tryTargetAsap ? realGap : halvePosInteger(realGap);
    for (let toremove = gap;toremove > 0; toremove = halvePosInteger(toremove)) {
      const next = toremove === realGap ? target : current - toremove;
      yield new Value(next, previous);
      previous = next;
    }
  }
  function* shrinkIncr() {
    let previous = tryTargetAsap ? undefined : target;
    const gap = tryTargetAsap ? realGap : halveNegInteger(realGap);
    for (let toremove = gap;toremove < 0; toremove = halveNegInteger(toremove)) {
      const next = toremove === realGap ? target : current - toremove;
      yield new Value(next, previous);
      previous = next;
    }
  }
  return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());
}
var safeMathCeil, safeMathFloor2;
var init_ShrinkInteger = __esm(() => {
  init_Value();
  init_Stream();
  safeMathCeil = Math.ceil;
  safeMathFloor2 = Math.floor;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/IntegerArbitrary.js
var safeMathSign, safeNumberIsInteger, safeObjectIs2, IntegerArbitrary;
var init_IntegerArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  init_Stream();
  init_BiasNumericRange();
  init_ShrinkInteger();
  safeMathSign = Math.sign;
  safeNumberIsInteger = Number.isInteger;
  safeObjectIs2 = Object.is;
  IntegerArbitrary = class IntegerArbitrary extends Arbitrary {
    constructor(min3, max4) {
      super();
      this.min = min3;
      this.max = max4;
    }
    generate(mrng, biasFactor) {
      const range3 = this.computeGenerateRange(mrng, biasFactor);
      return new Value(mrng.nextInt(range3.min, range3.max), undefined);
    }
    canShrinkWithoutContext(value) {
      return typeof value === "number" && safeNumberIsInteger(value) && !safeObjectIs2(value, -0) && this.min <= value && value <= this.max;
    }
    shrink(current, context) {
      if (!IntegerArbitrary.isValidContext(current, context)) {
        const target = this.defaultTarget();
        return shrinkInteger(current, target, true);
      }
      if (this.isLastChanceTry(current, context)) {
        return Stream.of(new Value(context, undefined));
      }
      return shrinkInteger(current, context, false);
    }
    defaultTarget() {
      if (this.min <= 0 && this.max >= 0) {
        return 0;
      }
      return this.min < 0 ? this.max : this.min;
    }
    computeGenerateRange(mrng, biasFactor) {
      if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {
        return { min: this.min, max: this.max };
      }
      const ranges = biasNumericRange(this.min, this.max, integerLogLike);
      if (ranges.length === 1) {
        return ranges[0];
      }
      const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);
      return id < 0 ? ranges[0] : ranges[id + 1];
    }
    isLastChanceTry(current, context) {
      if (current > 0)
        return current === context + 1 && current > this.min;
      if (current < 0)
        return current === context - 1 && current < this.max;
      return false;
    }
    static isValidContext(current, context) {
      if (context === undefined) {
        return false;
      }
      if (typeof context !== "number") {
        throw new Error(`Invalid context type passed to IntegerArbitrary (#1)`);
      }
      if (context !== 0 && safeMathSign(current) !== safeMathSign(context)) {
        throw new Error(`Invalid context value passed to IntegerArbitrary (#2)`);
      }
      return true;
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/integer.js
function buildCompleteIntegerConstraints(constraints) {
  const min3 = constraints.min !== undefined ? constraints.min : -2147483648;
  const max4 = constraints.max !== undefined ? constraints.max : 2147483647;
  return { min: min3, max: max4 };
}
function integer(constraints = {}) {
  const fullConstraints = buildCompleteIntegerConstraints(constraints);
  if (fullConstraints.min > fullConstraints.max) {
    throw new Error("fc.integer maximum value should be equal or greater than the minimum one");
  }
  if (!safeNumberIsInteger2(fullConstraints.min)) {
    throw new Error("fc.integer minimum value should be an integer");
  }
  if (!safeNumberIsInteger2(fullConstraints.max)) {
    throw new Error("fc.integer maximum value should be an integer");
  }
  return new IntegerArbitrary(fullConstraints.min, fullConstraints.max);
}
var safeNumberIsInteger2;
var init_integer = __esm(() => {
  init_IntegerArbitrary();
  safeNumberIsInteger2 = Number.isInteger;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/DepthContext.js
function getDepthContextFor(contextMeta) {
  if (contextMeta === undefined) {
    return { depth: 0 };
  }
  if (typeof contextMeta !== "string") {
    return contextMeta;
  }
  const cachedContext = safeMapGet(depthContextCache, contextMeta);
  if (cachedContext !== undefined) {
    return cachedContext;
  }
  const context = { depth: 0 };
  safeMapSet(depthContextCache, contextMeta, context);
  return context;
}
function createDepthIdentifier() {
  const identifier = { depth: 0 };
  return identifier;
}
var depthContextCache;
var init_DepthContext = __esm(() => {
  init_globals();
  depthContextCache = new Map;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/implementations/NoopSlicedGenerator.js
class NoopSlicedGenerator {
  constructor(arb, mrng, biasFactor) {
    this.arb = arb;
    this.mrng = mrng;
    this.biasFactor = biasFactor;
  }
  attemptExact() {
    return;
  }
  next() {
    return this.arb.generate(this.mrng, this.biasFactor);
  }
}

// node_modules/fast-check/lib/esm/arbitrary/_internals/implementations/SlicedBasedGenerator.js
class SlicedBasedGenerator {
  constructor(arb, mrng, slices, biasFactor) {
    this.arb = arb;
    this.mrng = mrng;
    this.slices = slices;
    this.biasFactor = biasFactor;
    this.activeSliceIndex = 0;
    this.nextIndexInSlice = 0;
    this.lastIndexInSlice = -1;
  }
  attemptExact(targetLength) {
    if (targetLength !== 0 && this.mrng.nextInt(1, this.biasFactor) === 1) {
      const eligibleIndices = [];
      for (let index = 0;index !== this.slices.length; ++index) {
        const slice = this.slices[index];
        if (slice.length === targetLength) {
          safePush(eligibleIndices, index);
        }
      }
      if (eligibleIndices.length === 0) {
        return;
      }
      this.activeSliceIndex = eligibleIndices[this.mrng.nextInt(0, eligibleIndices.length - 1)];
      this.nextIndexInSlice = 0;
      this.lastIndexInSlice = targetLength - 1;
    }
  }
  next() {
    if (this.nextIndexInSlice <= this.lastIndexInSlice) {
      return new Value(this.slices[this.activeSliceIndex][this.nextIndexInSlice++], undefined);
    }
    if (this.mrng.nextInt(1, this.biasFactor) !== 1) {
      return this.arb.generate(this.mrng, this.biasFactor);
    }
    this.activeSliceIndex = this.mrng.nextInt(0, this.slices.length - 1);
    const slice = this.slices[this.activeSliceIndex];
    if (this.mrng.nextInt(1, this.biasFactor) !== 1) {
      this.nextIndexInSlice = 1;
      this.lastIndexInSlice = slice.length - 1;
      return new Value(slice[0], undefined);
    }
    const rangeBoundaryA = this.mrng.nextInt(0, slice.length - 1);
    const rangeBoundaryB = this.mrng.nextInt(0, slice.length - 1);
    this.nextIndexInSlice = safeMathMin2(rangeBoundaryA, rangeBoundaryB);
    this.lastIndexInSlice = safeMathMax(rangeBoundaryA, rangeBoundaryB);
    return new Value(slice[this.nextIndexInSlice++], undefined);
  }
}
var safeMathMin2, safeMathMax;
var init_SlicedBasedGenerator = __esm(() => {
  init_Value();
  init_globals();
  safeMathMin2 = Math.min;
  safeMathMax = Math.max;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/BuildSlicedGenerator.js
function buildSlicedGenerator(arb, mrng, slices, biasFactor) {
  if (biasFactor === undefined || slices.length === 0 || mrng.nextInt(1, biasFactor) !== 1) {
    return new NoopSlicedGenerator(arb, mrng, biasFactor);
  }
  return new SlicedBasedGenerator(arb, mrng, slices, biasFactor);
}
var init_BuildSlicedGenerator = __esm(() => {
  init_SlicedBasedGenerator();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/ArrayArbitrary.js
function biasedMaxLength(minLength, maxLength) {
  if (minLength === maxLength) {
    return minLength;
  }
  return minLength + safeMathFloor3(safeMathLog3(maxLength - minLength) / safeMathLog3(2));
}
var safeMathFloor3, safeMathLog3, safeMathMax2, safeArrayIsArray3, ArrayArbitrary;
var init_ArrayArbitrary = __esm(() => {
  init_Stream();
  init_symbols();
  init_integer();
  init_LazyIterableIterator();
  init_Arbitrary();
  init_Value();
  init_DepthContext();
  init_BuildSlicedGenerator();
  init_globals();
  safeMathFloor3 = Math.floor;
  safeMathLog3 = Math.log;
  safeMathMax2 = Math.max;
  safeArrayIsArray3 = Array.isArray;
  ArrayArbitrary = class ArrayArbitrary extends Arbitrary {
    constructor(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, customSlices) {
      super();
      this.arb = arb;
      this.minLength = minLength;
      this.maxGeneratedLength = maxGeneratedLength;
      this.maxLength = maxLength;
      this.setBuilder = setBuilder;
      this.customSlices = customSlices;
      this.lengthArb = integer({ min: minLength, max: maxGeneratedLength });
      this.depthContext = getDepthContextFor(depthIdentifier);
    }
    preFilter(tab) {
      if (this.setBuilder === undefined) {
        return tab;
      }
      const s = this.setBuilder();
      for (let index = 0;index !== tab.length; ++index) {
        s.tryAdd(tab[index]);
      }
      return s.getData();
    }
    static makeItCloneable(vs, shrinkables) {
      vs[cloneMethod] = () => {
        const cloned = [];
        for (let idx = 0;idx !== shrinkables.length; ++idx) {
          safePush(cloned, shrinkables[idx].value);
        }
        this.makeItCloneable(cloned, shrinkables);
        return cloned;
      };
      return vs;
    }
    generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {
      let numSkippedInRow = 0;
      const s = setBuilder();
      const slicedGenerator = buildSlicedGenerator(this.arb, mrng, this.customSlices, biasFactorItems);
      while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {
        const current = slicedGenerator.next();
        if (s.tryAdd(current)) {
          numSkippedInRow = 0;
        } else {
          numSkippedInRow += 1;
        }
      }
      return s.getData();
    }
    safeGenerateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {
      const depthImpact = safeMathMax2(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));
      this.depthContext.depth += depthImpact;
      try {
        return this.generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems);
      } finally {
        this.depthContext.depth -= depthImpact;
      }
    }
    generateNItems(N, mrng, biasFactorItems) {
      const items = [];
      const slicedGenerator = buildSlicedGenerator(this.arb, mrng, this.customSlices, biasFactorItems);
      slicedGenerator.attemptExact(N);
      for (let index = 0;index !== N; ++index) {
        const current = slicedGenerator.next();
        safePush(items, current);
      }
      return items;
    }
    safeGenerateNItems(N, mrng, biasFactorItems) {
      const depthImpact = safeMathMax2(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));
      this.depthContext.depth += depthImpact;
      try {
        return this.generateNItems(N, mrng, biasFactorItems);
      } finally {
        this.depthContext.depth -= depthImpact;
      }
    }
    wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {
      const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;
      let cloneable = false;
      const vs = [];
      const itemsContexts = [];
      for (let idx = 0;idx !== items.length; ++idx) {
        const s = items[idx];
        cloneable = cloneable || s.hasToBeCloned;
        safePush(vs, s.value);
        safePush(itemsContexts, s.context);
      }
      if (cloneable) {
        ArrayArbitrary.makeItCloneable(vs, items);
      }
      const context = {
        shrunkOnce,
        lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined ? itemsRawLengthContext : undefined,
        itemsContexts,
        startIndex
      };
      return new Value(vs, context);
    }
    generate(mrng, biasFactor) {
      const biasMeta = this.applyBias(mrng, biasFactor);
      const targetSize = biasMeta.size;
      const items = this.setBuilder !== undefined ? this.safeGenerateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems) : this.safeGenerateNItems(targetSize, mrng, biasMeta.biasFactorItems);
      return this.wrapper(items, false, undefined, 0);
    }
    applyBias(mrng, biasFactor) {
      if (biasFactor === undefined) {
        return { size: this.lengthArb.generate(mrng, undefined).value };
      }
      if (this.minLength === this.maxGeneratedLength) {
        return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };
      }
      if (mrng.nextInt(1, biasFactor) !== 1) {
        return { size: this.lengthArb.generate(mrng, undefined).value };
      }
      if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {
        return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };
      }
      const maxBiasedLength = biasedMaxLength(this.minLength, this.maxGeneratedLength);
      const targetSizeValue = integer({ min: this.minLength, max: maxBiasedLength }).generate(mrng, undefined);
      return { size: targetSizeValue.value, biasFactorItems: biasFactor };
    }
    canShrinkWithoutContext(value) {
      if (!safeArrayIsArray3(value) || this.minLength > value.length || value.length > this.maxLength) {
        return false;
      }
      for (let index = 0;index !== value.length; ++index) {
        if (!(index in value)) {
          return false;
        }
        if (!this.arb.canShrinkWithoutContext(value[index])) {
          return false;
        }
      }
      const filtered = this.preFilter(safeMap(value, (item) => new Value(item, undefined)));
      return filtered.length === value.length;
    }
    shrinkItemByItem(value, safeContext, endIndex) {
      const shrinks = [];
      for (let index = safeContext.startIndex;index < endIndex; ++index) {
        safePush(shrinks, makeLazy(() => this.arb.shrink(value[index], safeContext.itemsContexts[index]).map((v) => {
          const beforeCurrent = safeMap(safeSlice(value, 0, index), (v2, i2) => new Value(cloneIfNeeded(v2), safeContext.itemsContexts[i2]));
          const afterCurrent = safeMap(safeSlice(value, index + 1), (v2, i2) => new Value(cloneIfNeeded(v2), safeContext.itemsContexts[i2 + index + 1]));
          return [
            [...beforeCurrent, v, ...afterCurrent],
            undefined,
            index
          ];
        })));
      }
      return Stream.nil().join(...shrinks);
    }
    shrinkImpl(value, context) {
      if (value.length === 0) {
        return Stream.nil();
      }
      const safeContext = context !== undefined ? context : { shrunkOnce: false, lengthContext: undefined, itemsContexts: [], startIndex: 0 };
      return this.lengthArb.shrink(value.length, safeContext.lengthContext).drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0).map((lengthValue) => {
        const sliceStart = value.length - lengthValue.value;
        return [
          safeMap(safeSlice(value, sliceStart), (v, index) => new Value(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])),
          lengthValue.context,
          0
        ];
      }).join(makeLazy(() => value.length > this.minLength ? this.shrinkItemByItem(value, safeContext, 1) : this.shrinkItemByItem(value, safeContext, value.length))).join(value.length > this.minLength ? makeLazy(() => {
        const subContext = {
          shrunkOnce: false,
          lengthContext: undefined,
          itemsContexts: safeSlice(safeContext.itemsContexts, 1),
          startIndex: 0
        };
        return this.shrinkImpl(safeSlice(value, 1), subContext).filter((v) => this.minLength <= v[0].length + 1).map((v) => {
          return [[new Value(cloneIfNeeded(value[0]), safeContext.itemsContexts[0]), ...v[0]], undefined, 0];
        });
      }) : Stream.nil());
    }
    shrink(value, context) {
      return this.shrinkImpl(value, context).map((contextualValue) => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/MaxLengthFromMinLength.js
function maxLengthFromMinLength(minLength, size3) {
  switch (size3) {
    case "xsmall":
      return safeMathFloor4(1.1 * minLength) + 1;
    case "small":
      return 2 * minLength + 10;
    case "medium":
      return 11 * minLength + 100;
    case "large":
      return 101 * minLength + 1000;
    case "xlarge":
      return 1001 * minLength + 1e4;
    default:
      throw new Error(`Unable to compute lengths based on received size: ${size3}`);
  }
}
function relativeSizeToSize(size3, defaultSize) {
  const sizeInRelative = safeIndexOf(orderedRelativeSize, size3);
  if (sizeInRelative === -1) {
    return size3;
  }
  const defaultSizeInSize = safeIndexOf(orderedSize, defaultSize);
  if (defaultSizeInSize === -1) {
    throw new Error(`Unable to offset size based on the unknown defaulted one: ${defaultSize}`);
  }
  const resultingSizeInSize = defaultSizeInSize + sizeInRelative - 4;
  return resultingSizeInSize < 0 ? orderedSize[0] : resultingSizeInSize >= orderedSize.length ? orderedSize[orderedSize.length - 1] : orderedSize[resultingSizeInSize];
}
function maxGeneratedLengthFromSizeForArbitrary(size3, minLength, maxLength, specifiedMaxLength) {
  const { baseSize: defaultSize = DefaultSize, defaultSizeToMaxWhenMaxSpecified } = readConfigureGlobal() || {};
  const definedSize = size3 !== undefined ? size3 : specifiedMaxLength && defaultSizeToMaxWhenMaxSpecified ? "max" : defaultSize;
  if (definedSize === "max") {
    return maxLength;
  }
  const finalSize = relativeSizeToSize(definedSize, defaultSize);
  return safeMathMin3(maxLengthFromMinLength(minLength, finalSize), maxLength);
}
function depthBiasFromSizeForArbitrary(depthSizeOrSize, specifiedMaxDepth) {
  if (typeof depthSizeOrSize === "number") {
    return 1 / depthSizeOrSize;
  }
  const { baseSize: defaultSize = DefaultSize, defaultSizeToMaxWhenMaxSpecified } = readConfigureGlobal() || {};
  const definedSize = depthSizeOrSize !== undefined ? depthSizeOrSize : specifiedMaxDepth && defaultSizeToMaxWhenMaxSpecified ? "max" : defaultSize;
  if (definedSize === "max") {
    return 0;
  }
  const finalSize = relativeSizeToSize(definedSize, defaultSize);
  switch (finalSize) {
    case "xsmall":
      return 1;
    case "small":
      return 0.5;
    case "medium":
      return 0.25;
    case "large":
      return 0.125;
    case "xlarge":
      return 0.0625;
  }
}
function resolveSize(size3) {
  const { baseSize: defaultSize = DefaultSize } = readConfigureGlobal() || {};
  if (size3 === undefined) {
    return defaultSize;
  }
  return relativeSizeToSize(size3, defaultSize);
}
var safeMathFloor4, safeMathMin3, MaxLengthUpperBound = 2147483647, orderedSize, orderedRelativeSize, DefaultSize = "small";
var init_MaxLengthFromMinLength = __esm(() => {
  init_GlobalParameters();
  init_globals();
  safeMathFloor4 = Math.floor;
  safeMathMin3 = Math.min;
  orderedSize = ["xsmall", "small", "medium", "large", "xlarge"];
  orderedRelativeSize = ["-4", "-3", "-2", "-1", "=", "+1", "+2", "+3", "+4"];
});

// node_modules/fast-check/lib/esm/arbitrary/array.js
function array4(arb, constraints = {}) {
  const size3 = constraints.size;
  const minLength = constraints.minLength || 0;
  const maxLengthOrUnset = constraints.maxLength;
  const depthIdentifier = constraints.depthIdentifier;
  const maxLength = maxLengthOrUnset !== undefined ? maxLengthOrUnset : MaxLengthUpperBound;
  const specifiedMaxLength = maxLengthOrUnset !== undefined;
  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(size3, minLength, maxLength, specifiedMaxLength);
  const customSlices = constraints.experimentalCustomSlices || [];
  return new ArrayArbitrary(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, undefined, customSlices);
}
var init_array = __esm(() => {
  init_ArrayArbitrary();
  init_MaxLengthFromMinLength();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ShrinkBigInt.js
function halveBigInt(n) {
  return n / SBigInt(2);
}
function shrinkBigInt(current, target, tryTargetAsap) {
  const realGap = current - target;
  function* shrinkDecr() {
    let previous = tryTargetAsap ? undefined : target;
    const gap = tryTargetAsap ? realGap : halveBigInt(realGap);
    for (let toremove = gap;toremove > 0; toremove = halveBigInt(toremove)) {
      const next = current - toremove;
      yield new Value(next, previous);
      previous = next;
    }
  }
  function* shrinkIncr() {
    let previous = tryTargetAsap ? undefined : target;
    const gap = tryTargetAsap ? realGap : halveBigInt(realGap);
    for (let toremove = gap;toremove < 0; toremove = halveBigInt(toremove)) {
      const next = current - toremove;
      yield new Value(next, previous);
      previous = next;
    }
  }
  return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());
}
var init_ShrinkBigInt = __esm(() => {
  init_Stream();
  init_Value();
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/BigIntArbitrary.js
var BigIntArbitrary;
var init_BigIntArbitrary = __esm(() => {
  init_Stream();
  init_Arbitrary();
  init_Value();
  init_BiasNumericRange();
  init_ShrinkBigInt();
  init_globals();
  BigIntArbitrary = class BigIntArbitrary extends Arbitrary {
    constructor(min3, max4) {
      super();
      this.min = min3;
      this.max = max4;
    }
    generate(mrng, biasFactor) {
      const range3 = this.computeGenerateRange(mrng, biasFactor);
      return new Value(mrng.nextBigInt(range3.min, range3.max), undefined);
    }
    computeGenerateRange(mrng, biasFactor) {
      if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {
        return { min: this.min, max: this.max };
      }
      const ranges = biasNumericRange(this.min, this.max, bigIntLogLike);
      if (ranges.length === 1) {
        return ranges[0];
      }
      const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);
      return id < 0 ? ranges[0] : ranges[id + 1];
    }
    canShrinkWithoutContext(value) {
      return typeof value === "bigint" && this.min <= value && value <= this.max;
    }
    shrink(current, context) {
      if (!BigIntArbitrary.isValidContext(current, context)) {
        const target = this.defaultTarget();
        return shrinkBigInt(current, target, true);
      }
      if (this.isLastChanceTry(current, context)) {
        return Stream.of(new Value(context, undefined));
      }
      return shrinkBigInt(current, context, false);
    }
    defaultTarget() {
      if (this.min <= 0 && this.max >= 0) {
        return SBigInt(0);
      }
      return this.min < 0 ? this.max : this.min;
    }
    isLastChanceTry(current, context) {
      if (current > 0)
        return current === context + SBigInt(1) && current > this.min;
      if (current < 0)
        return current === context - SBigInt(1) && current < this.max;
      return false;
    }
    static isValidContext(current, context) {
      if (context === undefined) {
        return false;
      }
      if (typeof context !== "bigint") {
        throw new Error(`Invalid context type passed to BigIntArbitrary (#1)`);
      }
      const differentSigns = current > 0 && context < 0 || current < 0 && context > 0;
      if (context !== SBigInt(0) && differentSigns) {
        throw new Error(`Invalid context value passed to BigIntArbitrary (#2)`);
      }
      return true;
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/bigInt.js
function buildCompleteBigIntConstraints(constraints) {
  const DefaultPow = 256;
  const DefaultMin = SBigInt(-1) << SBigInt(DefaultPow - 1);
  const DefaultMax = (SBigInt(1) << SBigInt(DefaultPow - 1)) - SBigInt(1);
  const min3 = constraints.min;
  const max4 = constraints.max;
  return {
    min: min3 !== undefined ? min3 : DefaultMin - (max4 !== undefined && max4 < SBigInt(0) ? max4 * max4 : SBigInt(0)),
    max: max4 !== undefined ? max4 : DefaultMax + (min3 !== undefined && min3 > SBigInt(0) ? min3 * min3 : SBigInt(0))
  };
}
function extractBigIntConstraints(args) {
  if (args[0] === undefined) {
    return {};
  }
  if (args[1] === undefined) {
    const constraints = args[0];
    return constraints;
  }
  return { min: args[0], max: args[1] };
}
function bigInt(...args) {
  const constraints = buildCompleteBigIntConstraints(extractBigIntConstraints(args));
  if (constraints.min > constraints.max) {
    throw new Error("fc.bigInt expects max to be greater than or equal to min");
  }
  return new BigIntArbitrary(constraints.min, constraints.max);
}
var init_bigInt = __esm(() => {
  init_globals();
  init_BigIntArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/bigIntN.js
function bigIntN(n) {
  if (n < 1) {
    throw new Error("fc.bigIntN expects requested number of bits to be superior or equal to 1");
  }
  const min3 = SBigInt(-1) << SBigInt(n - 1);
  const max4 = (SBigInt(1) << SBigInt(n - 1)) - SBigInt(1);
  return new BigIntArbitrary(min3, max4);
}
var init_bigIntN = __esm(() => {
  init_globals();
  init_BigIntArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/bigUint.js
function computeDefaultMax() {
  return (SBigInt(1) << SBigInt(256)) - SBigInt(1);
}
function bigUint(constraints) {
  const requestedMax = typeof constraints === "object" ? constraints.max : constraints;
  const max4 = requestedMax !== undefined ? requestedMax : computeDefaultMax();
  if (max4 < 0) {
    throw new Error("fc.bigUint expects max to be greater than or equal to zero");
  }
  return new BigIntArbitrary(SBigInt(0), max4);
}
var init_bigUint = __esm(() => {
  init_globals();
  init_BigIntArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/bigUintN.js
function bigUintN(n) {
  if (n < 0) {
    throw new Error("fc.bigUintN expects requested number of bits to be superior or equal to 0");
  }
  const min3 = SBigInt(0);
  const max4 = (SBigInt(1) << SBigInt(n)) - SBigInt(1);
  return new BigIntArbitrary(min3, max4);
}
var init_bigUintN = __esm(() => {
  init_globals();
  init_BigIntArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/noBias.js
function noBias(arb) {
  return arb.noBias();
}

// node_modules/fast-check/lib/esm/arbitrary/boolean.js
function booleanMapper(v) {
  return v === 1;
}
function booleanUnmapper(v) {
  if (typeof v !== "boolean")
    throw new Error("Unsupported input type");
  return v === true ? 1 : 0;
}
function boolean3() {
  return noBias(integer({ min: 0, max: 1 }).map(booleanMapper, booleanUnmapper));
}
var init_boolean = __esm(() => {
  init_integer();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/ConstantArbitrary.js
class FastConstantValuesLookup {
  constructor(values2) {
    this.values = values2;
    this.fastValues = new SSet(this.values);
    let hasMinusZero = false;
    let hasPlusZero = false;
    if (safeHas(this.fastValues, 0)) {
      for (let idx = 0;idx !== this.values.length; ++idx) {
        const value = this.values[idx];
        hasMinusZero = hasMinusZero || safeObjectIs3(value, -0);
        hasPlusZero = hasPlusZero || safeObjectIs3(value, 0);
      }
    }
    this.hasMinusZero = hasMinusZero;
    this.hasPlusZero = hasPlusZero;
  }
  has(value) {
    if (value === 0) {
      if (safeObjectIs3(value, 0)) {
        return this.hasPlusZero;
      }
      return this.hasMinusZero;
    }
    return safeHas(this.fastValues, value);
  }
}
var safeObjectIs3, ConstantArbitrary;
var init_ConstantArbitrary = __esm(() => {
  init_Stream();
  init_Arbitrary();
  init_Value();
  init_symbols();
  init_globals();
  safeObjectIs3 = Object.is;
  ConstantArbitrary = class ConstantArbitrary extends Arbitrary {
    constructor(values2) {
      super();
      this.values = values2;
    }
    generate(mrng, _biasFactor) {
      const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);
      const value = this.values[idx];
      if (!hasCloneMethod(value)) {
        return new Value(value, idx);
      }
      return new Value(value, idx, () => value[cloneMethod]());
    }
    canShrinkWithoutContext(value) {
      if (this.values.length === 1) {
        return safeObjectIs3(this.values[0], value);
      }
      if (this.fastValues === undefined) {
        this.fastValues = new FastConstantValuesLookup(this.values);
      }
      return this.fastValues.has(value);
    }
    shrink(value, context) {
      if (context === 0 || safeObjectIs3(value, this.values[0])) {
        return Stream.nil();
      }
      return Stream.of(new Value(this.values[0], 0));
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/constantFrom.js
function constantFrom(...values2) {
  if (values2.length === 0) {
    throw new Error("fc.constantFrom expects at least one parameter");
  }
  return new ConstantArbitrary(values2);
}
var init_constantFrom = __esm(() => {
  init_ConstantArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/falsy.js
function falsy(constraints) {
  if (!constraints || !constraints.withBigInt) {
    return constantFrom(false, null, undefined, 0, "", NaN);
  }
  return constantFrom(false, null, undefined, 0, "", NaN, SBigInt(0));
}
var init_falsy = __esm(() => {
  init_globals();
  init_constantFrom();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/IndexToCharString.js
function indexToCharStringUnmapper(c) {
  if (typeof c !== "string") {
    throw new Error("Cannot unmap non-string");
  }
  if (c.length === 0 || c.length > 2) {
    throw new Error("Cannot unmap string with more or less than one character");
  }
  const c1 = safeCharCodeAt(c, 0);
  if (c.length === 1) {
    return c1;
  }
  const c2 = safeCharCodeAt(c, 1);
  if (c1 < 55296 || c1 > 56319 || c2 < 56320 || c2 > 57343) {
    throw new Error("Cannot unmap invalid surrogate pairs");
  }
  return c.codePointAt(0);
}
var indexToCharStringMapper;
var init_IndexToCharString = __esm(() => {
  init_globals();
  indexToCharStringMapper = String.fromCodePoint;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/CharacterArbitraryBuilder.js
function buildCharacterArbitrary(min3, max4, mapToCode, unmapFromCode) {
  return integer({ min: min3, max: max4 }).map((n) => indexToCharStringMapper(mapToCode(n)), (c) => unmapFromCode(indexToCharStringUnmapper(c)));
}
var init_CharacterArbitraryBuilder = __esm(() => {
  init_integer();
  init_IndexToCharString();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/IndexToPrintableIndex.js
function indexToPrintableIndexMapper(v) {
  if (v < 95)
    return v + 32;
  if (v <= 126)
    return v - 95;
  return v;
}
function indexToPrintableIndexUnmapper(v) {
  if (v >= 32 && v <= 126)
    return v - 32;
  if (v >= 0 && v <= 31)
    return v + 95;
  return v;
}

// node_modules/fast-check/lib/esm/arbitrary/ascii.js
function ascii() {
  return buildCharacterArbitrary(0, 127, indexToPrintableIndexMapper, indexToPrintableIndexUnmapper);
}
var init_ascii = __esm(() => {
  init_CharacterArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/base64.js
function base64Mapper(v) {
  if (v < 26)
    return v + 65;
  if (v < 52)
    return v + 97 - 26;
  if (v < 62)
    return v + 48 - 52;
  return v === 62 ? 43 : 47;
}
function base64Unmapper(v) {
  if (v >= 65 && v <= 90)
    return v - 65;
  if (v >= 97 && v <= 122)
    return v - 97 + 26;
  if (v >= 48 && v <= 57)
    return v - 48 + 52;
  return v === 43 ? 62 : v === 47 ? 63 : -1;
}
function base64() {
  return buildCharacterArbitrary(0, 63, base64Mapper, base64Unmapper);
}
var init_base64 = __esm(() => {
  init_CharacterArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/char.js
function identity2(v) {
  return v;
}
function char() {
  return buildCharacterArbitrary(32, 126, identity2, identity2);
}
var init_char = __esm(() => {
  init_CharacterArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/char16bits.js
function char16bits() {
  return buildCharacterArbitrary(0, 65535, indexToPrintableIndexMapper, indexToPrintableIndexUnmapper);
}
var init_char16bits = __esm(() => {
  init_CharacterArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/fullUnicode.js
function unicodeMapper(v) {
  if (v < 55296)
    return indexToPrintableIndexMapper(v);
  return v + gapSize;
}
function unicodeUnmapper(v) {
  if (v < 55296)
    return indexToPrintableIndexUnmapper(v);
  if (v <= 57343)
    return -1;
  return v - gapSize;
}
function fullUnicode() {
  return buildCharacterArbitrary(0, 1114111 - gapSize, unicodeMapper, unicodeUnmapper);
}
var gapSize;
var init_fullUnicode = __esm(() => {
  init_CharacterArbitraryBuilder();
  gapSize = 57343 + 1 - 55296;
});

// node_modules/fast-check/lib/esm/arbitrary/hexa.js
function hexaMapper(v) {
  return v < 10 ? v + 48 : v + 97 - 10;
}
function hexaUnmapper(v) {
  return v < 58 ? v - 48 : v >= 97 && v < 103 ? v - 97 + 10 : -1;
}
function hexa() {
  return buildCharacterArbitrary(0, 15, hexaMapper, hexaUnmapper);
}
var init_hexa = __esm(() => {
  init_CharacterArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/unicode.js
function unicodeMapper2(v) {
  if (v < 55296)
    return indexToPrintableIndexMapper(v);
  return v + gapSize2;
}
function unicodeUnmapper2(v) {
  if (v < 55296)
    return indexToPrintableIndexUnmapper(v);
  if (v <= 57343)
    return -1;
  return v - gapSize2;
}
function unicode() {
  return buildCharacterArbitrary(0, 65535 - gapSize2, unicodeMapper2, unicodeUnmapper2);
}
var gapSize2;
var init_unicode = __esm(() => {
  init_CharacterArbitraryBuilder();
  gapSize2 = 57343 + 1 - 55296;
});

// node_modules/fast-check/lib/esm/arbitrary/constant.js
function constant2(value) {
  return new ConstantArbitrary([value]);
}
var init_constant = __esm(() => {
  init_ConstantArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/context.js
function context() {
  return constant2(new ContextImplem);
}
var ContextImplem;
var init_context = __esm(() => {
  init_symbols();
  init_constant();
  ContextImplem = class ContextImplem {
    constructor() {
      this.receivedLogs = [];
    }
    log(data) {
      this.receivedLogs.push(data);
    }
    size() {
      return this.receivedLogs.length;
    }
    toString() {
      return JSON.stringify({ logs: this.receivedLogs });
    }
    [cloneMethod]() {
      return new ContextImplem;
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/TimeToDate.js
function timeToDateMapper(time) {
  return new SDate(time);
}
function timeToDateUnmapper(value) {
  if (!(value instanceof SDate) || value.constructor !== SDate) {
    throw new SError("Not a valid value for date unmapper");
  }
  return safeGetTime(value);
}
function timeToDateMapperWithNaN(valueForNaN) {
  return (time) => {
    return time === valueForNaN ? new SDate(safeNaN) : timeToDateMapper(time);
  };
}
function timeToDateUnmapperWithNaN(valueForNaN) {
  return (value) => {
    const time = timeToDateUnmapper(value);
    return safeNumberIsNaN2(time) ? valueForNaN : time;
  };
}
var safeNaN, safeNumberIsNaN2;
var init_TimeToDate = __esm(() => {
  init_globals();
  safeNaN = Number.NaN;
  safeNumberIsNaN2 = Number.isNaN;
});

// node_modules/fast-check/lib/esm/arbitrary/date.js
function date(constraints = {}) {
  const intMin = constraints.min !== undefined ? safeGetTime(constraints.min) : -8640000000000000;
  const intMax = constraints.max !== undefined ? safeGetTime(constraints.max) : 8640000000000000;
  const noInvalidDate = constraints.noInvalidDate === undefined || constraints.noInvalidDate;
  if (safeNumberIsNaN3(intMin))
    throw new Error("fc.date min must be valid instance of Date");
  if (safeNumberIsNaN3(intMax))
    throw new Error("fc.date max must be valid instance of Date");
  if (intMin > intMax)
    throw new Error("fc.date max must be greater or equal to min");
  if (noInvalidDate) {
    return integer({ min: intMin, max: intMax }).map(timeToDateMapper, timeToDateUnmapper);
  }
  const valueForNaN = intMax + 1;
  return integer({ min: intMin, max: intMax + 1 }).map(timeToDateMapperWithNaN(valueForNaN), timeToDateUnmapperWithNaN(valueForNaN));
}
var safeNumberIsNaN3;
var init_date = __esm(() => {
  init_globals();
  init_integer();
  init_TimeToDate();
  safeNumberIsNaN3 = Number.isNaN;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/CloneArbitrary.js
var safeSymbolIterator2, safeIsArray, safeObjectIs4, CloneArbitrary;
var init_CloneArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  init_symbols();
  init_Stream();
  init_globals();
  safeSymbolIterator2 = Symbol.iterator;
  safeIsArray = Array.isArray;
  safeObjectIs4 = Object.is;
  CloneArbitrary = class CloneArbitrary extends Arbitrary {
    constructor(arb, numValues) {
      super();
      this.arb = arb;
      this.numValues = numValues;
    }
    generate(mrng, biasFactor) {
      const items = [];
      if (this.numValues <= 0) {
        return this.wrapper(items);
      }
      for (let idx = 0;idx !== this.numValues - 1; ++idx) {
        safePush(items, this.arb.generate(mrng.clone(), biasFactor));
      }
      safePush(items, this.arb.generate(mrng, biasFactor));
      return this.wrapper(items);
    }
    canShrinkWithoutContext(value) {
      if (!safeIsArray(value) || value.length !== this.numValues) {
        return false;
      }
      if (value.length === 0) {
        return true;
      }
      for (let index = 1;index < value.length; ++index) {
        if (!safeObjectIs4(value[0], value[index])) {
          return false;
        }
      }
      return this.arb.canShrinkWithoutContext(value[0]);
    }
    shrink(value, context2) {
      if (value.length === 0) {
        return Stream.nil();
      }
      return new Stream(this.shrinkImpl(value, context2 !== undefined ? context2 : [])).map((v) => this.wrapper(v));
    }
    *shrinkImpl(value, contexts) {
      const its = safeMap(value, (v, idx) => this.arb.shrink(v, contexts[idx])[safeSymbolIterator2]());
      let cur = safeMap(its, (it) => it.next());
      while (!cur[0].done) {
        yield safeMap(cur, (c) => c.value);
        cur = safeMap(its, (it) => it.next());
      }
    }
    static makeItCloneable(vs, shrinkables) {
      vs[cloneMethod] = () => {
        const cloned = [];
        for (let idx = 0;idx !== shrinkables.length; ++idx) {
          safePush(cloned, shrinkables[idx].value);
        }
        this.makeItCloneable(cloned, shrinkables);
        return cloned;
      };
      return vs;
    }
    wrapper(items) {
      let cloneable = false;
      const vs = [];
      const contexts = [];
      for (let idx = 0;idx !== items.length; ++idx) {
        const s = items[idx];
        cloneable = cloneable || s.hasToBeCloned;
        safePush(vs, s.value);
        safePush(contexts, s.context);
      }
      if (cloneable) {
        CloneArbitrary.makeItCloneable(vs, items);
      }
      return new Value(vs, contexts);
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/clone.js
function clone(arb, numValues) {
  return new CloneArbitrary(arb, numValues);
}
var init_clone = __esm(() => {
  init_CloneArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/CustomEqualSet.js
class CustomEqualSet {
  constructor(isEqual2) {
    this.isEqual = isEqual2;
    this.data = [];
  }
  tryAdd(value) {
    for (let idx = 0;idx !== this.data.length; ++idx) {
      if (this.isEqual(this.data[idx], value)) {
        return false;
      }
    }
    safePush(this.data, value);
    return true;
  }
  size() {
    return this.data.length;
  }
  getData() {
    return this.data;
  }
}
var init_CustomEqualSet = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/StrictlyEqualSet.js
class StrictlyEqualSet {
  constructor(selector) {
    this.selector = selector;
    this.selectedItemsExceptNaN = new SSet;
    this.data = [];
  }
  tryAdd(value) {
    const selected = this.selector(value);
    if (safeNumberIsNaN4(selected)) {
      safePush(this.data, value);
      return true;
    }
    const sizeBefore = this.selectedItemsExceptNaN.size;
    safeAdd(this.selectedItemsExceptNaN, selected);
    if (sizeBefore !== this.selectedItemsExceptNaN.size) {
      safePush(this.data, value);
      return true;
    }
    return false;
  }
  size() {
    return this.data.length;
  }
  getData() {
    return this.data;
  }
}
var safeNumberIsNaN4;
var init_StrictlyEqualSet = __esm(() => {
  init_globals();
  safeNumberIsNaN4 = Number.isNaN;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/SameValueSet.js
class SameValueSet {
  constructor(selector) {
    this.selector = selector;
    this.selectedItemsExceptMinusZero = new SSet;
    this.data = [];
    this.hasMinusZero = false;
  }
  tryAdd(value) {
    const selected = this.selector(value);
    if (safeObjectIs5(selected, -0)) {
      if (this.hasMinusZero) {
        return false;
      }
      safePush(this.data, value);
      this.hasMinusZero = true;
      return true;
    }
    const sizeBefore = this.selectedItemsExceptMinusZero.size;
    safeAdd(this.selectedItemsExceptMinusZero, selected);
    if (sizeBefore !== this.selectedItemsExceptMinusZero.size) {
      safePush(this.data, value);
      return true;
    }
    return false;
  }
  size() {
    return this.data.length;
  }
  getData() {
    return this.data;
  }
}
var safeObjectIs5;
var init_SameValueSet = __esm(() => {
  init_globals();
  safeObjectIs5 = Object.is;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/SameValueZeroSet.js
class SameValueZeroSet {
  constructor(selector) {
    this.selector = selector;
    this.selectedItems = new SSet;
    this.data = [];
  }
  tryAdd(value) {
    const selected = this.selector(value);
    const sizeBefore = this.selectedItems.size;
    safeAdd(this.selectedItems, selected);
    if (sizeBefore !== this.selectedItems.size) {
      safePush(this.data, value);
      return true;
    }
    return false;
  }
  size() {
    return this.data.length;
  }
  getData() {
    return this.data;
  }
}
var init_SameValueZeroSet = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/uniqueArray.js
function buildUniqueArraySetBuilder(constraints) {
  if (typeof constraints.comparator === "function") {
    if (constraints.selector === undefined) {
      const comparator2 = constraints.comparator;
      const isEqualForBuilder2 = (nextA, nextB) => comparator2(nextA.value_, nextB.value_);
      return () => new CustomEqualSet(isEqualForBuilder2);
    }
    const comparator = constraints.comparator;
    const selector2 = constraints.selector;
    const refinedSelector2 = (next) => selector2(next.value_);
    const isEqualForBuilder = (nextA, nextB) => comparator(refinedSelector2(nextA), refinedSelector2(nextB));
    return () => new CustomEqualSet(isEqualForBuilder);
  }
  const selector = constraints.selector || ((v) => v);
  const refinedSelector = (next) => selector(next.value_);
  switch (constraints.comparator) {
    case "IsStrictlyEqual":
      return () => new StrictlyEqualSet(refinedSelector);
    case "SameValueZero":
      return () => new SameValueZeroSet(refinedSelector);
    case "SameValue":
    case undefined:
      return () => new SameValueSet(refinedSelector);
  }
}
function uniqueArray(arb, constraints = {}) {
  const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;
  const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;
  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(constraints.size, minLength, maxLength, constraints.maxLength !== undefined);
  const depthIdentifier = constraints.depthIdentifier;
  const setBuilder = buildUniqueArraySetBuilder(constraints);
  const arrayArb = new ArrayArbitrary(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, []);
  if (minLength === 0)
    return arrayArb;
  return arrayArb.filter((tab) => tab.length >= minLength);
}
var init_uniqueArray = __esm(() => {
  init_ArrayArbitrary();
  init_MaxLengthFromMinLength();
  init_CustomEqualSet();
  init_StrictlyEqualSet();
  init_SameValueSet();
  init_SameValueZeroSet();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/KeyValuePairsToObject.js
function keyValuePairsToObjectMapper(definition) {
  const obj = definition[1] ? safeObjectCreate(null) : {};
  for (const keyValue of definition[0]) {
    safeObjectDefineProperty3(obj, keyValue[0], {
      enumerable: true,
      configurable: true,
      writable: true,
      value: keyValue[1]
    });
  }
  return obj;
}
function buildIsValidPropertyNameFilter(obj) {
  return function isValidPropertyNameFilter(key) {
    const descriptor = safeObjectGetOwnPropertyDescriptor2(obj, key);
    return descriptor !== undefined && !!descriptor.configurable && !!descriptor.enumerable && !!descriptor.writable && descriptor.get === undefined && descriptor.set === undefined;
  };
}
function keyValuePairsToObjectUnmapper(value) {
  if (typeof value !== "object" || value === null) {
    throw new SError("Incompatible instance received: should be a non-null object");
  }
  const hasNullPrototype = safeObjectGetPrototypeOf2(value) === null;
  const hasObjectPrototype = "constructor" in value && value.constructor === Object;
  if (!hasNullPrototype && !hasObjectPrototype) {
    throw new SError("Incompatible instance received: should be of exact type Object");
  }
  if (safeObjectGetOwnPropertySymbols2(value).length > 0) {
    throw new SError("Incompatible instance received: should contain symbols");
  }
  if (!safeEvery(safeObjectGetOwnPropertyNames(value), buildIsValidPropertyNameFilter(value))) {
    throw new SError("Incompatible instance received: should contain only c/e/w properties without get/set");
  }
  return [safeObjectEntries(value), hasNullPrototype];
}
var safeObjectCreate, safeObjectDefineProperty3, safeObjectGetOwnPropertyDescriptor2, safeObjectGetPrototypeOf2, safeObjectGetOwnPropertySymbols2, safeObjectGetOwnPropertyNames, safeObjectEntries;
var init_KeyValuePairsToObject = __esm(() => {
  init_globals();
  safeObjectCreate = Object.create;
  safeObjectDefineProperty3 = Object.defineProperty;
  safeObjectGetOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor;
  safeObjectGetPrototypeOf2 = Object.getPrototypeOf;
  safeObjectGetOwnPropertySymbols2 = Object.getOwnPropertySymbols;
  safeObjectGetOwnPropertyNames = Object.getOwnPropertyNames;
  safeObjectEntries = Object.entries;
});

// node_modules/fast-check/lib/esm/arbitrary/dictionary.js
function dictionaryKeyExtractor(entry) {
  return entry[0];
}
function dictionary(keyArb, valueArb, constraints = {}) {
  const noNullPrototype = constraints.noNullPrototype !== false;
  return tuple4(uniqueArray(tuple4(keyArb, valueArb), {
    minLength: constraints.minKeys,
    maxLength: constraints.maxKeys,
    size: constraints.size,
    selector: dictionaryKeyExtractor,
    depthIdentifier: constraints.depthIdentifier
  }), noNullPrototype ? constant2(false) : boolean3()).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper);
}
var init_dictionary = __esm(() => {
  init_tuple();
  init_uniqueArray();
  init_KeyValuePairsToObject();
  init_constant();
  init_boolean();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/FrequencyArbitrary.js
var safePositiveInfinity2, safeMaxSafeInteger, safeNumberIsInteger3, safeMathFloor5, safeMathPow, safeMathMin4, FrequencyArbitrary;
var init_FrequencyArbitrary = __esm(() => {
  init_Stream();
  init_Arbitrary();
  init_Value();
  init_DepthContext();
  init_MaxLengthFromMinLength();
  init_globals();
  safePositiveInfinity2 = Number.POSITIVE_INFINITY;
  safeMaxSafeInteger = Number.MAX_SAFE_INTEGER;
  safeNumberIsInteger3 = Number.isInteger;
  safeMathFloor5 = Math.floor;
  safeMathPow = Math.pow;
  safeMathMin4 = Math.min;
  FrequencyArbitrary = class FrequencyArbitrary extends Arbitrary {
    static from(warbs, constraints, label) {
      if (warbs.length === 0) {
        throw new Error(`${label} expects at least one weighted arbitrary`);
      }
      let totalWeight = 0;
      for (let idx = 0;idx !== warbs.length; ++idx) {
        const currentArbitrary = warbs[idx].arbitrary;
        if (currentArbitrary === undefined) {
          throw new Error(`${label} expects arbitraries to be specified`);
        }
        const currentWeight = warbs[idx].weight;
        totalWeight += currentWeight;
        if (!safeNumberIsInteger3(currentWeight)) {
          throw new Error(`${label} expects weights to be integer values`);
        }
        if (currentWeight < 0) {
          throw new Error(`${label} expects weights to be superior or equal to 0`);
        }
      }
      if (totalWeight <= 0) {
        throw new Error(`${label} expects the sum of weights to be strictly superior to 0`);
      }
      const sanitizedConstraints = {
        depthBias: depthBiasFromSizeForArbitrary(constraints.depthSize, constraints.maxDepth !== undefined),
        maxDepth: constraints.maxDepth != null ? constraints.maxDepth : safePositiveInfinity2,
        withCrossShrink: !!constraints.withCrossShrink
      };
      return new FrequencyArbitrary(warbs, sanitizedConstraints, getDepthContextFor(constraints.depthIdentifier));
    }
    constructor(warbs, constraints, context2) {
      super();
      this.warbs = warbs;
      this.constraints = constraints;
      this.context = context2;
      let currentWeight = 0;
      this.cumulatedWeights = [];
      for (let idx = 0;idx !== warbs.length; ++idx) {
        currentWeight += warbs[idx].weight;
        safePush(this.cumulatedWeights, currentWeight);
      }
      this.totalWeight = currentWeight;
    }
    generate(mrng, biasFactor) {
      if (this.mustGenerateFirst()) {
        return this.safeGenerateForIndex(mrng, 0, biasFactor);
      }
      const selected = mrng.nextInt(this.computeNegDepthBenefit(), this.totalWeight - 1);
      for (let idx = 0;idx !== this.cumulatedWeights.length; ++idx) {
        if (selected < this.cumulatedWeights[idx]) {
          return this.safeGenerateForIndex(mrng, idx, biasFactor);
        }
      }
      throw new Error(`Unable to generate from fc.frequency`);
    }
    canShrinkWithoutContext(value) {
      return this.canShrinkWithoutContextIndex(value) !== -1;
    }
    shrink(value, context2) {
      if (context2 !== undefined) {
        const safeContext = context2;
        const selectedIndex = safeContext.selectedIndex;
        const originalBias = safeContext.originalBias;
        const originalArbitrary = this.warbs[selectedIndex].arbitrary;
        const originalShrinks = originalArbitrary.shrink(value, safeContext.originalContext).map((v) => this.mapIntoValue(selectedIndex, v, null, originalBias));
        if (safeContext.clonedMrngForFallbackFirst !== null) {
          if (safeContext.cachedGeneratedForFirst === undefined) {
            safeContext.cachedGeneratedForFirst = this.safeGenerateForIndex(safeContext.clonedMrngForFallbackFirst, 0, originalBias);
          }
          const valueFromFirst = safeContext.cachedGeneratedForFirst;
          return Stream.of(valueFromFirst).join(originalShrinks);
        }
        return originalShrinks;
      }
      const potentialSelectedIndex = this.canShrinkWithoutContextIndex(value);
      if (potentialSelectedIndex === -1) {
        return Stream.nil();
      }
      return this.defaultShrinkForFirst(potentialSelectedIndex).join(this.warbs[potentialSelectedIndex].arbitrary.shrink(value, undefined).map((v) => this.mapIntoValue(potentialSelectedIndex, v, null, undefined)));
    }
    defaultShrinkForFirst(selectedIndex) {
      ++this.context.depth;
      try {
        if (!this.mustFallbackToFirstInShrink(selectedIndex) || this.warbs[0].fallbackValue === undefined) {
          return Stream.nil();
        }
      } finally {
        --this.context.depth;
      }
      const rawShrinkValue = new Value(this.warbs[0].fallbackValue.default, undefined);
      return Stream.of(this.mapIntoValue(0, rawShrinkValue, null, undefined));
    }
    canShrinkWithoutContextIndex(value) {
      if (this.mustGenerateFirst()) {
        return this.warbs[0].arbitrary.canShrinkWithoutContext(value) ? 0 : -1;
      }
      try {
        ++this.context.depth;
        for (let idx = 0;idx !== this.warbs.length; ++idx) {
          const warb = this.warbs[idx];
          if (warb.weight !== 0 && warb.arbitrary.canShrinkWithoutContext(value)) {
            return idx;
          }
        }
        return -1;
      } finally {
        --this.context.depth;
      }
    }
    mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor) {
      const context2 = {
        selectedIndex: idx,
        originalBias: biasFactor,
        originalContext: value.context,
        clonedMrngForFallbackFirst
      };
      return new Value(value.value, context2);
    }
    safeGenerateForIndex(mrng, idx, biasFactor) {
      ++this.context.depth;
      try {
        const value = this.warbs[idx].arbitrary.generate(mrng, biasFactor);
        const clonedMrngForFallbackFirst = this.mustFallbackToFirstInShrink(idx) ? mrng.clone() : null;
        return this.mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor);
      } finally {
        --this.context.depth;
      }
    }
    mustGenerateFirst() {
      return this.constraints.maxDepth <= this.context.depth;
    }
    mustFallbackToFirstInShrink(idx) {
      return idx !== 0 && this.constraints.withCrossShrink && this.warbs[0].weight !== 0;
    }
    computeNegDepthBenefit() {
      const depthBias = this.constraints.depthBias;
      if (depthBias <= 0 || this.warbs[0].weight === 0) {
        return 0;
      }
      const depthBenefit = safeMathFloor5(safeMathPow(1 + depthBias, this.context.depth)) - 1;
      return -safeMathMin4(this.totalWeight * depthBenefit, safeMaxSafeInteger) || 0;
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/oneof.js
function isOneOfContraints(param) {
  return param != null && typeof param === "object" && !("generate" in param) && !("arbitrary" in param) && !("weight" in param);
}
function toWeightedArbitrary(maybeWeightedArbitrary) {
  if (isArbitrary(maybeWeightedArbitrary)) {
    return { arbitrary: maybeWeightedArbitrary, weight: 1 };
  }
  return maybeWeightedArbitrary;
}
function oneof(...args) {
  const constraints = args[0];
  if (isOneOfContraints(constraints)) {
    const weightedArbs2 = safeMap(safeSlice(args, 1), toWeightedArbitrary);
    return FrequencyArbitrary.from(weightedArbs2, constraints, "fc.oneof");
  }
  const weightedArbs = safeMap(args, toWeightedArbitrary);
  return FrequencyArbitrary.from(weightedArbs, {}, "fc.oneof");
}
var init_oneof = __esm(() => {
  init_Arbitrary();
  init_globals();
  init_FrequencyArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/nat.js
function nat(arg) {
  const max4 = typeof arg === "number" ? arg : arg && arg.max !== undefined ? arg.max : 2147483647;
  if (max4 < 0) {
    throw new Error("fc.nat value should be greater than or equal to 0");
  }
  if (!safeNumberIsInteger4(max4)) {
    throw new Error("fc.nat maximum value should be an integer");
  }
  return new IntegerArbitrary(0, max4);
}
var safeNumberIsInteger4;
var init_nat = __esm(() => {
  init_IntegerArbitrary();
  safeNumberIsInteger4 = Number.isInteger;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/IndexToMappedConstant.js
function buildDichotomyEntries(entries) {
  let currentFrom = 0;
  const dichotomyEntries = [];
  for (const entry of entries) {
    const from = currentFrom;
    currentFrom = from + entry.num;
    const to = currentFrom - 1;
    dichotomyEntries.push({ from, to, entry });
  }
  return dichotomyEntries;
}
function findDichotomyEntry(dichotomyEntries, choiceIndex) {
  let min3 = 0;
  let max4 = dichotomyEntries.length;
  while (max4 - min3 > 1) {
    const mid = ~~((min3 + max4) / 2);
    if (choiceIndex < dichotomyEntries[mid].from) {
      max4 = mid;
    } else {
      min3 = mid;
    }
  }
  return dichotomyEntries[min3];
}
function indexToMappedConstantMapperFor(entries) {
  const dichotomyEntries = buildDichotomyEntries(entries);
  return function indexToMappedConstantMapper(choiceIndex) {
    const dichotomyEntry = findDichotomyEntry(dichotomyEntries, choiceIndex);
    return dichotomyEntry.entry.build(choiceIndex - dichotomyEntry.from);
  };
}
function buildReverseMapping(entries) {
  const reverseMapping = { mapping: new SMap, negativeZeroIndex: undefined };
  let choiceIndex = 0;
  for (let entryIdx = 0;entryIdx !== entries.length; ++entryIdx) {
    const entry = entries[entryIdx];
    for (let idxInEntry = 0;idxInEntry !== entry.num; ++idxInEntry) {
      const value = entry.build(idxInEntry);
      if (value === 0 && 1 / value === SNumber.NEGATIVE_INFINITY) {
        reverseMapping.negativeZeroIndex = choiceIndex;
      } else {
        safeMapSet(reverseMapping.mapping, value, choiceIndex);
      }
      ++choiceIndex;
    }
  }
  return reverseMapping;
}
function indexToMappedConstantUnmapperFor(entries) {
  let reverseMapping = null;
  return function indexToMappedConstantUnmapper(value) {
    if (reverseMapping === null) {
      reverseMapping = buildReverseMapping(entries);
    }
    const choiceIndex = safeObjectIs6(value, -0) ? reverseMapping.negativeZeroIndex : safeMapGet(reverseMapping.mapping, value);
    if (choiceIndex === undefined) {
      throw new SError("Unknown value encountered cannot be built using this mapToConstant");
    }
    return choiceIndex;
  };
}
var safeObjectIs6;
var init_IndexToMappedConstant = __esm(() => {
  init_globals();
  safeObjectIs6 = Object.is;
});

// node_modules/fast-check/lib/esm/arbitrary/mapToConstant.js
function computeNumChoices(options) {
  if (options.length === 0)
    throw new SError(`fc.mapToConstant expects at least one option`);
  let numChoices = 0;
  for (let idx = 0;idx !== options.length; ++idx) {
    if (options[idx].num < 0)
      throw new SError(`fc.mapToConstant expects all options to have a number of entries greater or equal to zero`);
    numChoices += options[idx].num;
  }
  if (numChoices === 0)
    throw new SError(`fc.mapToConstant expects at least one choice among options`);
  return numChoices;
}
function mapToConstant(...entries) {
  const numChoices = computeNumChoices(entries);
  return nat({ max: numChoices - 1 }).map(indexToMappedConstantMapperFor(entries), indexToMappedConstantUnmapperFor(entries));
}
var init_mapToConstant = __esm(() => {
  init_nat();
  init_IndexToMappedConstant();
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/CharacterRangeArbitraryBuilder.js
function percentCharArbMapper(c) {
  const encoded = SencodeURIComponent(c);
  return c !== encoded ? encoded : `%${safeNumberToString(safeCharCodeAt(c, 0), 16)}`;
}
function percentCharArbUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Unsupported");
  }
  const decoded = decodeURIComponent(value);
  return decoded;
}
function getOrCreateLowerAlphaArbitrary() {
  if (lowerAlphaArbitrary === undefined) {
    lowerAlphaArbitrary = mapToConstant(lowerCaseMapper);
  }
  return lowerAlphaArbitrary;
}
function getOrCreateLowerAlphaNumericArbitrary(others) {
  if (lowerAlphaNumericArbitraries === undefined) {
    lowerAlphaNumericArbitraries = new SMap2;
  }
  let match4 = safeMapGet(lowerAlphaNumericArbitraries, others);
  if (match4 === undefined) {
    match4 = mapToConstant(lowerCaseMapper, numericMapper, {
      num: others.length,
      build: (v) => others[v]
    });
    safeMapSet(lowerAlphaNumericArbitraries, others, match4);
  }
  return match4;
}
function buildAlphaNumericArbitrary(others) {
  return mapToConstant(lowerCaseMapper, upperCaseMapper, numericMapper, {
    num: others.length,
    build: (v) => others[v]
  });
}
function getOrCreateAlphaNumericPercentArbitrary(others) {
  if (alphaNumericPercentArbitraries === undefined) {
    alphaNumericPercentArbitraries = new SMap2;
  }
  let match4 = safeMapGet(alphaNumericPercentArbitraries, others);
  if (match4 === undefined) {
    match4 = oneof({ weight: 10, arbitrary: buildAlphaNumericArbitrary(others) }, { weight: 1, arbitrary: percentCharArb });
    safeMapSet(alphaNumericPercentArbitraries, others, match4);
  }
  return match4;
}
var SMap2, safeStringFromCharCode, lowerCaseMapper, upperCaseMapper, numericMapper, percentCharArb, lowerAlphaArbitrary = undefined, lowerAlphaNumericArbitraries = undefined, alphaNumericPercentArbitraries = undefined;
var init_CharacterRangeArbitraryBuilder = __esm(() => {
  init_fullUnicode();
  init_oneof();
  init_mapToConstant();
  init_globals();
  SMap2 = Map;
  safeStringFromCharCode = String.fromCharCode;
  lowerCaseMapper = { num: 26, build: (v) => safeStringFromCharCode(v + 97) };
  upperCaseMapper = { num: 26, build: (v) => safeStringFromCharCode(v + 65) };
  numericMapper = { num: 10, build: (v) => safeStringFromCharCode(v + 48) };
  percentCharArb = fullUnicode().map(percentCharArbMapper, percentCharArbUnmapper);
});

// node_modules/fast-check/lib/esm/arbitrary/option.js
function option(arb, constraints = {}) {
  const freq = constraints.freq == null ? 5 : constraints.freq;
  const nilValue = safeHasOwnProperty(constraints, "nil") ? constraints.nil : null;
  const nilArb = constant2(nilValue);
  const weightedArbs = [
    { arbitrary: nilArb, weight: 1, fallbackValue: { default: nilValue } },
    { arbitrary: arb, weight: freq }
  ];
  const frequencyConstraints = {
    withCrossShrink: true,
    depthSize: constraints.depthSize,
    maxDepth: constraints.maxDepth,
    depthIdentifier: constraints.depthIdentifier
  };
  return FrequencyArbitrary.from(weightedArbs, frequencyConstraints, "fc.option");
}
var init_option2 = __esm(() => {
  init_constant();
  init_FrequencyArbitrary();
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/TokenizeString.js
function tokenizeString(patternsArb, value, minLength, maxLength) {
  if (value.length === 0) {
    if (minLength > 0) {
      return;
    }
    return [];
  }
  if (maxLength <= 0) {
    return;
  }
  const stack = [{ endIndexChunks: 0, nextStartIndex: 1, chunks: [] }];
  while (stack.length > 0) {
    const last2 = safePop(stack);
    for (let index = last2.nextStartIndex;index <= value.length; ++index) {
      const chunk = safeSubstring(value, last2.endIndexChunks, index);
      if (patternsArb.canShrinkWithoutContext(chunk)) {
        const newChunks = [...last2.chunks, chunk];
        if (index === value.length) {
          if (newChunks.length < minLength) {
            break;
          }
          return newChunks;
        }
        safePush(stack, { endIndexChunks: last2.endIndexChunks, nextStartIndex: index + 1, chunks: last2.chunks });
        if (newChunks.length < maxLength) {
          safePush(stack, { endIndexChunks: index, nextStartIndex: index + 1, chunks: newChunks });
        }
        break;
      }
    }
  }
  return;
}
var init_TokenizeString = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/PatternsToString.js
function patternsToStringMapper(tab) {
  return safeJoin(tab, "");
}
function minLengthFrom(constraints) {
  return constraints.minLength !== undefined ? constraints.minLength : 0;
}
function maxLengthFrom(constraints) {
  return constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;
}
function patternsToStringUnmapperIsValidLength(tokens, constraints) {
  return minLengthFrom(constraints) <= tokens.length && tokens.length <= maxLengthFrom(constraints);
}
function patternsToStringUnmapperFor(patternsArb, constraints) {
  return function patternsToStringUnmapper(value) {
    if (typeof value !== "string") {
      throw new SError("Unsupported value");
    }
    const tokens = tokenizeString(patternsArb, value, minLengthFrom(constraints), maxLengthFrom(constraints));
    if (tokens === undefined) {
      throw new SError("Unable to unmap received string");
    }
    return tokens;
  };
}
var init_PatternsToString = __esm(() => {
  init_MaxLengthFromMinLength();
  init_globals();
  init_TokenizeString();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/SlicesForStringBuilder.js
function computeCandidateStringLegacy(dangerous, charArbitrary, stringSplitter) {
  let candidate;
  try {
    candidate = stringSplitter(dangerous);
  } catch (err2) {
    return;
  }
  for (const entry of candidate) {
    if (!charArbitrary.canShrinkWithoutContext(entry)) {
      return;
    }
  }
  return candidate;
}
function createSlicesForStringLegacy(charArbitrary, stringSplitter) {
  const slicesForString = [];
  for (const dangerous of dangerousStrings) {
    const candidate = computeCandidateStringLegacy(dangerous, charArbitrary, stringSplitter);
    if (candidate !== undefined) {
      safePush(slicesForString, candidate);
    }
  }
  return slicesForString;
}
function createSlicesForStringNoConstraints(charArbitrary) {
  const slicesForString = [];
  for (const dangerous of dangerousStrings) {
    const candidate = tokenizeString(charArbitrary, dangerous, 0, MaxLengthUpperBound);
    if (candidate !== undefined) {
      safePush(slicesForString, candidate);
    }
  }
  return slicesForString;
}
function createSlicesForString(charArbitrary, constraints) {
  let slices = safeGet(slicesPerArbitrary, charArbitrary);
  if (slices === undefined) {
    slices = createSlicesForStringNoConstraints(charArbitrary);
    safeSet(slicesPerArbitrary, charArbitrary, slices);
  }
  const slicesForConstraints = [];
  for (const slice of slices) {
    if (patternsToStringUnmapperIsValidLength(slice, constraints)) {
      safePush(slicesForConstraints, slice);
    }
  }
  return slicesForConstraints;
}
var dangerousStrings, slicesPerArbitrary;
var init_SlicesForStringBuilder = __esm(() => {
  init_globals();
  init_PatternsToString();
  init_MaxLengthFromMinLength();
  init_TokenizeString();
  dangerousStrings = [
    "__defineGetter__",
    "__defineSetter__",
    "__lookupGetter__",
    "__lookupSetter__",
    "__proto__",
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf",
    "apply",
    "arguments",
    "bind",
    "call",
    "caller",
    "length",
    "name",
    "prototype",
    "key",
    "ref"
  ];
  slicesPerArbitrary = new WeakMap;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/data/GraphemeRanges.js
var asciiAlphabetRanges, fullAlphabetRanges, autonomousGraphemeRanges, autonomousDecomposableGraphemeRanges;
var init_GraphemeRanges = __esm(() => {
  asciiAlphabetRanges = [[0, 127]];
  fullAlphabetRanges = [
    [0, 55295],
    [57344, 1114111]
  ];
  autonomousGraphemeRanges = [
    [32, 126],
    [160, 172],
    [174, 767],
    [880, 887],
    [890, 895],
    [900, 906],
    [908],
    [910, 929],
    [931, 1154],
    [1162, 1327],
    [1329, 1366],
    [1369, 1418],
    [1421, 1423],
    [1470],
    [1472],
    [1475],
    [1478],
    [1488, 1514],
    [1519, 1524],
    [1542, 1551],
    [1563],
    [1565, 1610],
    [1632, 1647],
    [1649, 1749],
    [1758],
    [1765, 1766],
    [1769],
    [1774, 1805],
    [1808],
    [1810, 1839],
    [1869, 1957],
    [1969],
    [1984, 2026],
    [2036, 2042],
    [2046, 2069],
    [2074],
    [2084],
    [2088],
    [2096, 2110],
    [2112, 2136],
    [2142],
    [2144, 2154],
    [2160, 2190],
    [2208, 2249],
    [2308, 2361],
    [2365],
    [2384],
    [2392, 2401],
    [2404, 2432],
    [2437, 2444],
    [2447, 2448],
    [2451, 2472],
    [2474, 2480],
    [2482],
    [2486, 2489],
    [2493],
    [2510],
    [2524, 2525],
    [2527, 2529],
    [2534, 2557],
    [2565, 2570],
    [2575, 2576],
    [2579, 2600],
    [2602, 2608],
    [2610, 2611],
    [2613, 2614],
    [2616, 2617],
    [2649, 2652],
    [2654],
    [2662, 2671],
    [2674, 2676],
    [2678],
    [2693, 2701],
    [2703, 2705],
    [2707, 2728],
    [2730, 2736],
    [2738, 2739],
    [2741, 2745],
    [2749],
    [2768],
    [2784, 2785],
    [2790, 2801],
    [2809],
    [2821, 2828],
    [2831, 2832],
    [2835, 2856],
    [2858, 2864],
    [2866, 2867],
    [2869, 2873],
    [2877],
    [2908, 2909],
    [2911, 2913],
    [2918, 2935],
    [2947],
    [2949, 2954],
    [2958, 2960],
    [2962, 2965],
    [2969, 2970],
    [2972],
    [2974, 2975],
    [2979, 2980],
    [2984, 2986],
    [2990, 3001],
    [3024],
    [3046, 3066],
    [3077, 3084],
    [3086, 3088],
    [3090, 3112],
    [3114, 3129],
    [3133],
    [3160, 3162],
    [3165],
    [3168, 3169],
    [3174, 3183],
    [3191, 3200],
    [3204, 3212],
    [3214, 3216],
    [3218, 3240],
    [3242, 3251],
    [3253, 3257],
    [3261],
    [3293, 3294],
    [3296, 3297],
    [3302, 3311],
    [3313, 3314],
    [3332, 3340],
    [3342, 3344],
    [3346, 3386],
    [3389],
    [3407],
    [3412, 3414],
    [3416, 3425],
    [3430, 3455],
    [3461, 3478],
    [3482, 3505],
    [3507, 3515],
    [3517],
    [3520, 3526],
    [3558, 3567],
    [3572],
    [3585, 3632],
    [3634],
    [3647, 3654],
    [3663, 3675],
    [3713, 3714],
    [3716],
    [3718, 3722],
    [3724, 3747],
    [3749],
    [3751, 3760],
    [3762],
    [3773],
    [3776, 3780],
    [3782],
    [3792, 3801],
    [3804, 3807],
    [3840, 3863],
    [3866, 3892],
    [3894],
    [3896],
    [3898, 3901],
    [3904, 3911],
    [3913, 3948],
    [3973],
    [3976, 3980],
    [4030, 4037],
    [4039, 4044],
    [4046, 4058],
    [4096, 4138],
    [4159, 4181],
    [4186, 4189],
    [4193],
    [4197, 4198],
    [4206, 4208],
    [4213, 4225],
    [4238],
    [4240, 4249],
    [4254, 4293],
    [4295],
    [4301],
    [4304, 4351],
    [4608, 4680],
    [4682, 4685],
    [4688, 4694],
    [4696],
    [4698, 4701],
    [4704, 4744],
    [4746, 4749],
    [4752, 4784],
    [4786, 4789],
    [4792, 4798],
    [4800],
    [4802, 4805],
    [4808, 4822],
    [4824, 4880],
    [4882, 4885],
    [4888, 4954],
    [4960, 4988],
    [4992, 5017],
    [5024, 5109],
    [5112, 5117],
    [5120, 5788],
    [5792, 5880],
    [5888, 5905],
    [5919, 5937],
    [5941, 5942],
    [5952, 5969],
    [5984, 5996],
    [5998, 6000],
    [6016, 6067],
    [6100, 6108],
    [6112, 6121],
    [6128, 6137],
    [6144, 6154],
    [6160, 6169],
    [6176, 6264],
    [6272, 6276],
    [6279, 6312],
    [6314],
    [6320, 6389],
    [6400, 6430],
    [6464],
    [6468, 6509],
    [6512, 6516],
    [6528, 6571],
    [6576, 6601],
    [6608, 6618],
    [6622, 6678],
    [6686, 6740],
    [6784, 6793],
    [6800, 6809],
    [6816, 6829],
    [6917, 6963],
    [6981, 6988],
    [6992, 7018],
    [7028, 7038],
    [7043, 7072],
    [7086, 7141],
    [7164, 7203],
    [7227, 7241],
    [7245, 7304],
    [7312, 7354],
    [7357, 7367],
    [7379],
    [7401, 7404],
    [7406, 7411],
    [7413, 7414],
    [7418],
    [7424, 7615],
    [7680, 7957],
    [7960, 7965],
    [7968, 8005],
    [8008, 8013],
    [8016, 8023],
    [8025],
    [8027],
    [8029],
    [8031, 8061],
    [8064, 8116],
    [8118, 8132],
    [8134, 8147],
    [8150, 8155],
    [8157, 8175],
    [8178, 8180],
    [8182, 8190],
    [8192, 8202],
    [8208, 8233],
    [8239, 8287],
    [8304, 8305],
    [8308, 8334],
    [8336, 8348],
    [8352, 8384],
    [8448, 8587],
    [8592, 9254],
    [9280, 9290],
    [9312, 11123],
    [11126, 11157],
    [11159, 11502],
    [11506, 11507],
    [11513, 11557],
    [11559],
    [11565],
    [11568, 11623],
    [11631, 11632],
    [11648, 11670],
    [11680, 11686],
    [11688, 11694],
    [11696, 11702],
    [11704, 11710],
    [11712, 11718],
    [11720, 11726],
    [11728, 11734],
    [11736, 11742],
    [11776, 11869],
    [11904, 11929],
    [11931, 12019],
    [12032, 12245],
    [12272, 12329],
    [12336, 12351],
    [12353, 12438],
    [12443, 12543],
    [12549, 12591],
    [12593, 12686],
    [12688, 12771],
    [12783, 12830],
    [12832, 13312],
    [19903, 19968],
    [40959, 42124],
    [42128, 42182],
    [42192, 42539],
    [42560, 42606],
    [42611],
    [42622, 42653],
    [42656, 42735],
    [42738, 42743],
    [42752, 42954],
    [42960, 42961],
    [42963],
    [42965, 42969],
    [42994, 43009],
    [43011, 43013],
    [43015, 43018],
    [43020, 43042],
    [43048, 43051],
    [43056, 43065],
    [43072, 43127],
    [43138, 43187],
    [43214, 43225],
    [43250, 43262],
    [43264, 43301],
    [43310, 43334],
    [43359],
    [43396, 43442],
    [43457, 43469],
    [43471, 43481],
    [43486, 43492],
    [43494, 43518],
    [43520, 43560],
    [43584, 43586],
    [43588, 43595],
    [43600, 43609],
    [43612, 43642],
    [43646, 43695],
    [43697],
    [43701, 43702],
    [43705, 43709],
    [43712],
    [43714],
    [43739, 43754],
    [43760, 43764],
    [43777, 43782],
    [43785, 43790],
    [43793, 43798],
    [43808, 43814],
    [43816, 43822],
    [43824, 43883],
    [43888, 44002],
    [44011],
    [44016, 44025],
    [44032],
    [55203],
    [63744, 64109],
    [64112, 64217],
    [64256, 64262],
    [64275, 64279],
    [64285],
    [64287, 64310],
    [64312, 64316],
    [64318],
    [64320, 64321],
    [64323, 64324],
    [64326, 64450],
    [64467, 64911],
    [64914, 64967],
    [64975],
    [65008, 65023],
    [65040, 65049],
    [65072, 65106],
    [65108, 65126],
    [65128, 65131],
    [65136, 65140],
    [65142, 65276],
    [65281, 65437],
    [65440, 65470],
    [65474, 65479],
    [65482, 65487],
    [65490, 65495],
    [65498, 65500],
    [65504, 65510],
    [65512, 65518],
    [65532, 65533],
    [65536, 65547],
    [65549, 65574],
    [65576, 65594],
    [65596, 65597],
    [65599, 65613],
    [65616, 65629],
    [65664, 65786],
    [65792, 65794],
    [65799, 65843],
    [65847, 65934],
    [65936, 65948],
    [65952],
    [66000, 66044],
    [66176, 66204],
    [66208, 66256],
    [66273, 66299],
    [66304, 66339],
    [66349, 66378],
    [66384, 66421],
    [66432, 66461],
    [66463, 66499],
    [66504, 66517],
    [66560, 66717],
    [66720, 66729],
    [66736, 66771],
    [66776, 66811],
    [66816, 66855],
    [66864, 66915],
    [66927, 66938],
    [66940, 66954],
    [66956, 66962],
    [66964, 66965],
    [66967, 66977],
    [66979, 66993],
    [66995, 67001],
    [67003, 67004],
    [67072, 67382],
    [67392, 67413],
    [67424, 67431],
    [67456, 67461],
    [67463, 67504],
    [67506, 67514],
    [67584, 67589],
    [67592],
    [67594, 67637],
    [67639, 67640],
    [67644],
    [67647, 67669],
    [67671, 67742],
    [67751, 67759],
    [67808, 67826],
    [67828, 67829],
    [67835, 67867],
    [67871, 67897],
    [67903],
    [67968, 68023],
    [68028, 68047],
    [68050, 68096],
    [68112, 68115],
    [68117, 68119],
    [68121, 68149],
    [68160, 68168],
    [68176, 68184],
    [68192, 68255],
    [68288, 68324],
    [68331, 68342],
    [68352, 68405],
    [68409, 68437],
    [68440, 68466],
    [68472, 68497],
    [68505, 68508],
    [68521, 68527],
    [68608, 68680],
    [68736, 68786],
    [68800, 68850],
    [68858, 68899],
    [68912, 68921],
    [69216, 69246],
    [69248, 69289],
    [69293],
    [69296, 69297],
    [69376, 69415],
    [69424, 69445],
    [69457, 69465],
    [69488, 69505],
    [69510, 69513],
    [69552, 69579],
    [69600, 69622],
    [69635, 69687],
    [69703, 69709],
    [69714, 69743],
    [69745, 69746],
    [69749],
    [69763, 69807],
    [69819, 69820],
    [69822, 69825],
    [69840, 69864],
    [69872, 69881],
    [69891, 69926],
    [69942, 69956],
    [69959],
    [69968, 70002],
    [70004, 70006],
    [70019, 70066],
    [70081],
    [70084, 70088],
    [70093],
    [70096, 70111],
    [70113, 70132],
    [70144, 70161],
    [70163, 70187],
    [70200, 70205],
    [70207, 70208],
    [70272, 70278],
    [70280],
    [70282, 70285],
    [70287, 70301],
    [70303, 70313],
    [70320, 70366],
    [70384, 70393],
    [70405, 70412],
    [70415, 70416],
    [70419, 70440],
    [70442, 70448],
    [70450, 70451],
    [70453, 70457],
    [70461],
    [70480],
    [70493, 70497],
    [70656, 70708],
    [70727, 70747],
    [70749],
    [70751, 70753],
    [70784, 70831],
    [70852, 70855],
    [70864, 70873],
    [71040, 71086],
    [71105, 71131],
    [71168, 71215],
    [71233, 71236],
    [71248, 71257],
    [71264, 71276],
    [71296, 71338],
    [71352, 71353],
    [71360, 71369],
    [71424, 71450],
    [71472, 71494],
    [71680, 71723],
    [71739],
    [71840, 71922],
    [71935, 71942],
    [71945],
    [71948, 71955],
    [71957, 71958],
    [71960, 71983],
    [72004, 72006],
    [72016, 72025],
    [72096, 72103],
    [72106, 72144],
    [72161, 72163],
    [72192],
    [72203, 72242],
    [72255, 72262],
    [72272],
    [72284, 72323],
    [72346, 72354],
    [72368, 72440],
    [72448, 72457],
    [72704, 72712],
    [72714, 72750],
    [72768, 72773],
    [72784, 72812],
    [72816, 72847],
    [72960, 72966],
    [72968, 72969],
    [72971, 73008],
    [73040, 73049],
    [73056, 73061],
    [73063, 73064],
    [73066, 73097],
    [73112],
    [73120, 73129],
    [73440, 73458],
    [73463, 73464],
    [73476, 73488],
    [73490, 73523],
    [73539, 73561],
    [73648],
    [73664, 73713],
    [73727, 74649],
    [74752, 74862],
    [74864, 74868],
    [74880, 75075],
    [77712, 77810],
    [77824, 78895],
    [78913, 78918],
    [82944, 83526],
    [92160, 92728],
    [92736, 92766],
    [92768, 92777],
    [92782, 92862],
    [92864, 92873],
    [92880, 92909],
    [92917],
    [92928, 92975],
    [92983, 92997],
    [93008, 93017],
    [93019, 93025],
    [93027, 93047],
    [93053, 93071],
    [93760, 93850],
    [93952, 94026],
    [94032],
    [94099, 94111],
    [94176, 94179],
    [94208],
    [100343],
    [100352, 101589],
    [101632],
    [101640],
    [110576, 110579],
    [110581, 110587],
    [110589, 110590],
    [110592, 110882],
    [110898],
    [110928, 110930],
    [110933],
    [110948, 110951],
    [110960, 111355],
    [113664, 113770],
    [113776, 113788],
    [113792, 113800],
    [113808, 113817],
    [113820],
    [113823],
    [118608, 118723],
    [118784, 119029],
    [119040, 119078],
    [119081, 119140],
    [119146, 119148],
    [119171, 119172],
    [119180, 119209],
    [119214, 119274],
    [119296, 119361],
    [119365],
    [119488, 119507],
    [119520, 119539],
    [119552, 119638],
    [119648, 119672],
    [119808, 119892],
    [119894, 119964],
    [119966, 119967],
    [119970],
    [119973, 119974],
    [119977, 119980],
    [119982, 119993],
    [119995],
    [119997, 120003],
    [120005, 120069],
    [120071, 120074],
    [120077, 120084],
    [120086, 120092],
    [120094, 120121],
    [120123, 120126],
    [120128, 120132],
    [120134],
    [120138, 120144],
    [120146, 120485],
    [120488, 120779],
    [120782, 121343],
    [121399, 121402],
    [121453, 121460],
    [121462, 121475],
    [121477, 121483],
    [122624, 122654],
    [122661, 122666],
    [122928, 122989],
    [123136, 123180],
    [123191, 123197],
    [123200, 123209],
    [123214, 123215],
    [123536, 123565],
    [123584, 123627],
    [123632, 123641],
    [123647],
    [124112, 124139],
    [124144, 124153],
    [124896, 124902],
    [124904, 124907],
    [124909, 124910],
    [124912, 124926],
    [124928, 125124],
    [125127, 125135],
    [125184, 125251],
    [125259],
    [125264, 125273],
    [125278, 125279],
    [126065, 126132],
    [126209, 126269],
    [126464, 126467],
    [126469, 126495],
    [126497, 126498],
    [126500],
    [126503],
    [126505, 126514],
    [126516, 126519],
    [126521],
    [126523],
    [126530],
    [126535],
    [126537],
    [126539],
    [126541, 126543],
    [126545, 126546],
    [126548],
    [126551],
    [126553],
    [126555],
    [126557],
    [126559],
    [126561, 126562],
    [126564],
    [126567, 126570],
    [126572, 126578],
    [126580, 126583],
    [126585, 126588],
    [126590],
    [126592, 126601],
    [126603, 126619],
    [126625, 126627],
    [126629, 126633],
    [126635, 126651],
    [126704, 126705],
    [126976, 127019],
    [127024, 127123],
    [127136, 127150],
    [127153, 127167],
    [127169, 127183],
    [127185, 127221],
    [127232, 127405],
    [127488, 127490],
    [127504, 127547],
    [127552, 127560],
    [127568, 127569],
    [127584, 127589],
    [127744, 127994],
    [128000, 128727],
    [128732, 128748],
    [128752, 128764],
    [128768, 128886],
    [128891, 128985],
    [128992, 129003],
    [129008],
    [129024, 129035],
    [129040, 129095],
    [129104, 129113],
    [129120, 129159],
    [129168, 129197],
    [129200, 129201],
    [129280, 129619],
    [129632, 129645],
    [129648, 129660],
    [129664, 129672],
    [129680, 129725],
    [129727, 129733],
    [129742, 129755],
    [129760, 129768],
    [129776, 129784],
    [129792, 129938],
    [129940, 129994],
    [130032, 130041],
    [131072],
    [173791],
    [173824],
    [177977],
    [177984],
    [178205],
    [178208],
    [183969],
    [183984],
    [191456],
    [191472],
    [192093],
    [194560, 195101],
    [196608],
    [201546],
    [201552],
    [205743]
  ];
  autonomousDecomposableGraphemeRanges = [
    [192, 197],
    [199, 207],
    [209, 214],
    [217, 221],
    [224, 229],
    [231, 239],
    [241, 246],
    [249, 253],
    [255, 271],
    [274, 293],
    [296, 304],
    [308, 311],
    [313, 318],
    [323, 328],
    [332, 337],
    [340, 357],
    [360, 382],
    [416, 417],
    [431, 432],
    [461, 476],
    [478, 483],
    [486, 496],
    [500, 501],
    [504, 539],
    [542, 543],
    [550, 563],
    [901, 902],
    [904, 906],
    [908],
    [910, 912],
    [938, 944],
    [970, 974],
    [979, 980],
    [1024, 1025],
    [1027],
    [1031],
    [1036, 1038],
    [1049],
    [1081],
    [1104, 1105],
    [1107],
    [1111],
    [1116, 1118],
    [1142, 1143],
    [1217, 1218],
    [1232, 1235],
    [1238, 1239],
    [1242, 1247],
    [1250, 1255],
    [1258, 1269],
    [1272, 1273],
    [1570, 1574],
    [1728],
    [1730],
    [1747],
    [2345],
    [2353],
    [2356],
    [2392, 2399],
    [2524, 2525],
    [2527],
    [2611],
    [2614],
    [2649, 2651],
    [2654],
    [2908, 2909],
    [2964],
    [3907],
    [3917],
    [3922],
    [3927],
    [3932],
    [3945],
    [4134],
    [6918],
    [6920],
    [6922],
    [6924],
    [6926],
    [6930],
    [7680, 7833],
    [7835],
    [7840, 7929],
    [7936, 7957],
    [7960, 7965],
    [7968, 8005],
    [8008, 8013],
    [8016, 8023],
    [8025],
    [8027],
    [8029],
    [8031, 8048],
    [8050],
    [8052],
    [8054],
    [8056],
    [8058],
    [8060],
    [8064, 8116],
    [8118, 8122],
    [8124],
    [8129, 8132],
    [8134, 8136],
    [8138],
    [8140, 8146],
    [8150, 8154],
    [8157, 8162],
    [8164, 8170],
    [8172, 8173],
    [8178, 8180],
    [8182, 8184],
    [8186],
    [8188],
    [8602, 8603],
    [8622],
    [8653, 8655],
    [8708],
    [8713],
    [8716],
    [8740],
    [8742],
    [8769],
    [8772],
    [8775],
    [8777],
    [8800],
    [8802],
    [8813, 8817],
    [8820, 8821],
    [8824, 8825],
    [8832, 8833],
    [8836, 8837],
    [8840, 8841],
    [8876, 8879],
    [8928, 8931],
    [8938, 8941],
    [10972],
    [12364],
    [12366],
    [12368],
    [12370],
    [12372],
    [12374],
    [12376],
    [12378],
    [12380],
    [12382],
    [12384],
    [12386],
    [12389],
    [12391],
    [12393],
    [12400, 12401],
    [12403, 12404],
    [12406, 12407],
    [12409, 12410],
    [12412, 12413],
    [12436],
    [12446],
    [12460],
    [12462],
    [12464],
    [12466],
    [12468],
    [12470],
    [12472],
    [12474],
    [12476],
    [12478],
    [12480],
    [12482],
    [12485],
    [12487],
    [12489],
    [12496, 12497],
    [12499, 12500],
    [12502, 12503],
    [12505, 12506],
    [12508, 12509],
    [12532],
    [12535, 12538],
    [12542],
    [44032],
    [55203],
    [64285],
    [64287],
    [64298, 64310],
    [64312, 64316],
    [64318],
    [64320, 64321],
    [64323, 64324],
    [64326, 64334],
    [69786],
    [69788],
    [69803],
    [119134, 119140],
    [119227, 119232]
  ];
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/GraphemeRangesHelpers.js
function convertGraphemeRangeToMapToConstantEntry(range3) {
  if (range3.length === 1) {
    const codePointString = safeStringFromCodePoint(range3[0]);
    return { num: 1, build: () => codePointString };
  }
  const rangeStart = range3[0];
  return { num: range3[1] - range3[0] + 1, build: (idInGroup) => safeStringFromCodePoint(rangeStart + idInGroup) };
}
function intersectGraphemeRanges(rangesA, rangesB) {
  const mergedRanges = [];
  let cursorA = 0;
  let cursorB = 0;
  while (cursorA < rangesA.length && cursorB < rangesB.length) {
    const rangeA = rangesA[cursorA];
    const rangeAMin = rangeA[0];
    const rangeAMax = rangeA.length === 1 ? rangeA[0] : rangeA[1];
    const rangeB = rangesB[cursorB];
    const rangeBMin = rangeB[0];
    const rangeBMax = rangeB.length === 1 ? rangeB[0] : rangeB[1];
    if (rangeAMax < rangeBMin) {
      cursorA += 1;
    } else if (rangeBMax < rangeAMin) {
      cursorB += 1;
    } else {
      let min3 = safeMathMax3(rangeAMin, rangeBMin);
      const max4 = safeMathMin5(rangeAMax, rangeBMax);
      if (mergedRanges.length >= 1) {
        const lastMergedRange = mergedRanges[mergedRanges.length - 1];
        const lastMergedRangeMax = lastMergedRange.length === 1 ? lastMergedRange[0] : lastMergedRange[1];
        if (lastMergedRangeMax + 1 === min3) {
          min3 = lastMergedRange[0];
          safePop(mergedRanges);
        }
      }
      safePush(mergedRanges, min3 === max4 ? [min3] : [min3, max4]);
      if (rangeAMax <= max4) {
        cursorA += 1;
      }
      if (rangeBMax <= max4) {
        cursorB += 1;
      }
    }
  }
  return mergedRanges;
}
var safeStringFromCodePoint, safeMathMin5, safeMathMax3;
var init_GraphemeRangesHelpers = __esm(() => {
  init_globals();
  safeStringFromCodePoint = String.fromCodePoint;
  safeMathMin5 = Math.min;
  safeMathMax3 = Math.max;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/StringUnitArbitrary.js
function getAlphabetRanges(alphabet) {
  switch (alphabet) {
    case "full":
      return fullAlphabetRanges;
    case "ascii":
      return asciiAlphabetRanges;
  }
}
function getOrCreateStringUnitInstance(type, alphabet) {
  const key = `${type}:${alphabet}`;
  const registered = registeredStringUnitInstancesMap[key];
  if (registered !== undefined) {
    return registered;
  }
  const alphabetRanges = getAlphabetRanges(alphabet);
  const ranges = type === "binary" ? alphabetRanges : intersectGraphemeRanges(alphabetRanges, autonomousGraphemeRanges);
  const entries = [];
  for (const range3 of ranges) {
    safePush(entries, convertGraphemeRangeToMapToConstantEntry(range3));
  }
  if (type === "grapheme") {
    const decomposedRanges = intersectGraphemeRanges(alphabetRanges, autonomousDecomposableGraphemeRanges);
    for (const range3 of decomposedRanges) {
      const rawEntry = convertGraphemeRangeToMapToConstantEntry(range3);
      safePush(entries, {
        num: rawEntry.num,
        build: (idInGroup) => safeNormalize(rawEntry.build(idInGroup), "NFD")
      });
    }
  }
  const stringUnitInstance = mapToConstant(...entries);
  registeredStringUnitInstancesMap[key] = stringUnitInstance;
  return stringUnitInstance;
}
function stringUnit(type, alphabet) {
  return getOrCreateStringUnitInstance(type, alphabet);
}
var registeredStringUnitInstancesMap;
var init_StringUnitArbitrary = __esm(() => {
  init_globals();
  init_mapToConstant();
  init_GraphemeRanges();
  init_GraphemeRangesHelpers();
  registeredStringUnitInstancesMap = Object.create(null);
});

// node_modules/fast-check/lib/esm/arbitrary/string.js
function extractUnitArbitrary(constraints) {
  if (typeof constraints.unit === "object") {
    return constraints.unit;
  }
  switch (constraints.unit) {
    case "grapheme":
      return stringUnit("grapheme", "full");
    case "grapheme-composite":
      return stringUnit("composite", "full");
    case "grapheme-ascii":
    case undefined:
      return stringUnit("grapheme", "ascii");
    case "binary":
      return stringUnit("binary", "full");
    case "binary-ascii":
      return stringUnit("binary", "ascii");
  }
}
function string4(constraints = {}) {
  const charArbitrary = extractUnitArbitrary(constraints);
  const unmapper = patternsToStringUnmapperFor(charArbitrary, constraints);
  const experimentalCustomSlices = createSlicesForString(charArbitrary, constraints);
  const enrichedConstraints = safeObjectAssign5(safeObjectAssign5({}, constraints), {
    experimentalCustomSlices
  });
  return array4(charArbitrary, enrichedConstraints).map(patternsToStringMapper, unmapper);
}
var safeObjectAssign5;
var init_string = __esm(() => {
  init_array();
  init_SlicesForStringBuilder();
  init_StringUnitArbitrary();
  init_PatternsToString();
  safeObjectAssign5 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/InvalidSubdomainLabelFiIter.js
function filterInvalidSubdomainLabel(subdomainLabel) {
  if (subdomainLabel.length > 63) {
    return false;
  }
  return subdomainLabel.length < 4 || subdomainLabel[0] !== "x" || subdomainLabel[1] !== "n" || subdomainLabel[2] !== "-" || subdomainLabel[3] !== "-";
}

// node_modules/fast-check/lib/esm/arbitrary/_internals/AdapterArbitrary.js
function toAdapterValue(rawValue, adapter4) {
  const adapted = adapter4(rawValue.value_);
  if (!adapted.adapted) {
    return rawValue;
  }
  return new Value(adapted.value, AdaptedValue);
}
function adapter4(sourceArb, adapter5) {
  return new AdapterArbitrary(sourceArb, adapter5);
}
var AdaptedValue, AdapterArbitrary;
var init_AdapterArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  init_Stream();
  AdaptedValue = Symbol("adapted-value");
  AdapterArbitrary = class AdapterArbitrary extends Arbitrary {
    constructor(sourceArb, adapter4) {
      super();
      this.sourceArb = sourceArb;
      this.adapter = adapter4;
      this.adaptValue = (rawValue) => toAdapterValue(rawValue, adapter4);
    }
    generate(mrng, biasFactor) {
      const rawValue = this.sourceArb.generate(mrng, biasFactor);
      return this.adaptValue(rawValue);
    }
    canShrinkWithoutContext(value) {
      return this.sourceArb.canShrinkWithoutContext(value) && !this.adapter(value).adapted;
    }
    shrink(value, context2) {
      if (context2 === AdaptedValue) {
        if (!this.sourceArb.canShrinkWithoutContext(value)) {
          return Stream.nil();
        }
        return this.sourceArb.shrink(value, undefined).map(this.adaptValue);
      }
      return this.sourceArb.shrink(value, context2).map(this.adaptValue);
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/domain.js
function toSubdomainLabelMapper([f, d]) {
  return d === null ? f : `${f}${d[0]}${d[1]}`;
}
function toSubdomainLabelUnmapper(value) {
  if (typeof value !== "string" || value.length === 0) {
    throw new Error("Unsupported");
  }
  if (value.length === 1) {
    return [value[0], null];
  }
  return [value[0], [safeSubstring(value, 1, value.length - 1), value[value.length - 1]]];
}
function subdomainLabel(size3) {
  const alphaNumericArb = getOrCreateLowerAlphaNumericArbitrary("");
  const alphaNumericHyphenArb = getOrCreateLowerAlphaNumericArbitrary("-");
  return tuple4(alphaNumericArb, option(tuple4(string4({ unit: alphaNumericHyphenArb, size: size3, maxLength: 61 }), alphaNumericArb))).map(toSubdomainLabelMapper, toSubdomainLabelUnmapper).filter(filterInvalidSubdomainLabel);
}
function labelsMapper(elements) {
  return `${safeJoin(elements[0], ".")}.${elements[1]}`;
}
function labelsUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Unsupported type");
  }
  const lastDotIndex = value.lastIndexOf(".");
  return [safeSplit(safeSubstring(value, 0, lastDotIndex), "."), safeSubstring(value, lastDotIndex + 1)];
}
function labelsAdapter(labels) {
  const [subDomains, suffix] = labels;
  let lengthNotIncludingIndex = suffix.length;
  for (let index = 0;index !== subDomains.length; ++index) {
    lengthNotIncludingIndex += 1 + subDomains[index].length;
    if (lengthNotIncludingIndex > 255) {
      return { adapted: true, value: [safeSlice(subDomains, 0, index), suffix] };
    }
  }
  return { adapted: false, value: labels };
}
function domain(constraints = {}) {
  const resolvedSize = resolveSize(constraints.size);
  const resolvedSizeMinusOne = relativeSizeToSize("-1", resolvedSize);
  const lowerAlphaArb = getOrCreateLowerAlphaArbitrary();
  const publicSuffixArb = string4({ unit: lowerAlphaArb, minLength: 2, maxLength: 63, size: resolvedSizeMinusOne });
  return adapter4(tuple4(array4(subdomainLabel(resolvedSize), { size: resolvedSizeMinusOne, minLength: 1, maxLength: 127 }), publicSuffixArb), labelsAdapter).map(labelsMapper, labelsUnmapper);
}
var init_domain = __esm(() => {
  init_array();
  init_CharacterRangeArbitraryBuilder();
  init_option2();
  init_string();
  init_tuple();
  init_MaxLengthFromMinLength();
  init_AdapterArbitrary();
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/emailAddress.js
function dotAdapter(a) {
  let currentLength = a[0].length;
  for (let index = 1;index !== a.length; ++index) {
    currentLength += 1 + a[index].length;
    if (currentLength > 64) {
      return { adapted: true, value: safeSlice(a, 0, index) };
    }
  }
  return { adapted: false, value: a };
}
function dotMapper(a) {
  return safeJoin(a, ".");
}
function dotUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Unsupported");
  }
  return safeSplit(value, ".");
}
function atMapper(data) {
  return `${data[0]}@${data[1]}`;
}
function atUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Unsupported");
  }
  return safeSplit(value, "@", 2);
}
function emailAddress(constraints = {}) {
  const atextArb = getOrCreateLowerAlphaNumericArbitrary("!#$%&'*+-/=?^_`{|}~");
  const localPartArb = adapter4(array4(string4({
    unit: atextArb,
    minLength: 1,
    maxLength: 64,
    size: constraints.size
  }), { minLength: 1, maxLength: 32, size: constraints.size }), dotAdapter).map(dotMapper, dotUnmapper);
  return tuple4(localPartArb, domain({ size: constraints.size })).map(atMapper, atUnmapper);
}
var init_emailAddress = __esm(() => {
  init_array();
  init_CharacterRangeArbitraryBuilder();
  init_domain();
  init_string();
  init_tuple();
  init_AdapterArbitrary();
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ArrayInt64.js
function isZero64(a) {
  return a.data[0] === 0 && a.data[1] === 0;
}
function isStrictlyNegative64(a) {
  return a.sign === -1 && !isZero64(a);
}
function isStrictlyPositive64(a) {
  return a.sign === 1 && !isZero64(a);
}
function isEqual64(a, b) {
  if (a.data[0] === b.data[0] && a.data[1] === b.data[1]) {
    return a.sign === b.sign || a.data[0] === 0 && a.data[1] === 0;
  }
  return false;
}
function isStrictlySmaller64Internal(a, b) {
  return a[0] < b[0] || a[0] === b[0] && a[1] < b[1];
}
function isStrictlySmaller64(a, b) {
  if (a.sign === b.sign) {
    return a.sign === 1 ? isStrictlySmaller64Internal(a.data, b.data) : isStrictlySmaller64Internal(b.data, a.data);
  }
  return a.sign === -1 && (!isZero64(a) || !isZero64(b));
}
function clone64(a) {
  return { sign: a.sign, data: [a.data[0], a.data[1]] };
}
function substract64DataInternal(a, b) {
  let reminderLow = 0;
  let low = a[1] - b[1];
  if (low < 0) {
    reminderLow = 1;
    low = low >>> 0;
  }
  return [a[0] - b[0] - reminderLow, low];
}
function substract64Internal(a, b) {
  if (a.sign === 1 && b.sign === -1) {
    const low = a.data[1] + b.data[1];
    const high = a.data[0] + b.data[0] + (low > 4294967295 ? 1 : 0);
    return { sign: 1, data: [high >>> 0, low >>> 0] };
  }
  return {
    sign: 1,
    data: a.sign === 1 ? substract64DataInternal(a.data, b.data) : substract64DataInternal(b.data, a.data)
  };
}
function substract64(arrayIntA, arrayIntB) {
  if (isStrictlySmaller64(arrayIntA, arrayIntB)) {
    const out = substract64Internal(arrayIntB, arrayIntA);
    out.sign = -1;
    return out;
  }
  return substract64Internal(arrayIntA, arrayIntB);
}
function negative64(arrayIntA) {
  return {
    sign: -arrayIntA.sign,
    data: [arrayIntA.data[0], arrayIntA.data[1]]
  };
}
function add642(arrayIntA, arrayIntB) {
  if (isZero64(arrayIntB)) {
    if (isZero64(arrayIntA)) {
      return clone64(Zero64);
    }
    return clone64(arrayIntA);
  }
  return substract64(arrayIntA, negative64(arrayIntB));
}
function halve64(a) {
  return {
    sign: a.sign,
    data: [Math.floor(a.data[0] / 2), (a.data[0] % 2 === 1 ? 2147483648 : 0) + Math.floor(a.data[1] / 2)]
  };
}
function logLike64(a) {
  return {
    sign: a.sign,
    data: [0, Math.floor(Math.log(a.data[0] * 4294967296 + a.data[1]) / Math.log(2))]
  };
}
var Zero64, Unit64;
var init_ArrayInt64 = __esm(() => {
  Zero64 = { sign: 1, data: [0, 0] };
  Unit64 = { sign: 1, data: [0, 1] };
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/ArrayInt64Arbitrary.js
function arrayInt64(min3, max4) {
  const arb = new ArrayInt64Arbitrary(min3, max4);
  return arb;
}
var ArrayInt64Arbitrary;
var init_ArrayInt64Arbitrary = __esm(() => {
  init_Stream();
  init_Arbitrary();
  init_Value();
  init_ArrayInt64();
  ArrayInt64Arbitrary = class ArrayInt64Arbitrary extends Arbitrary {
    constructor(min3, max4) {
      super();
      this.min = min3;
      this.max = max4;
      this.biasedRanges = null;
    }
    generate(mrng, biasFactor) {
      const range3 = this.computeGenerateRange(mrng, biasFactor);
      const uncheckedValue = mrng.nextArrayInt(range3.min, range3.max);
      if (uncheckedValue.data.length === 1) {
        uncheckedValue.data.unshift(0);
      }
      return new Value(uncheckedValue, undefined);
    }
    computeGenerateRange(mrng, biasFactor) {
      if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {
        return { min: this.min, max: this.max };
      }
      const ranges = this.retrieveBiasedRanges();
      if (ranges.length === 1) {
        return ranges[0];
      }
      const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);
      return id < 0 ? ranges[0] : ranges[id + 1];
    }
    canShrinkWithoutContext(value) {
      const unsafeValue = value;
      return typeof value === "object" && value !== null && (unsafeValue.sign === -1 || unsafeValue.sign === 1) && Array.isArray(unsafeValue.data) && unsafeValue.data.length === 2 && (isStrictlySmaller64(this.min, unsafeValue) && isStrictlySmaller64(unsafeValue, this.max) || isEqual64(this.min, unsafeValue) || isEqual64(this.max, unsafeValue));
    }
    shrinkArrayInt64(value, target, tryTargetAsap) {
      const realGap = substract64(value, target);
      function* shrinkGen() {
        let previous = tryTargetAsap ? undefined : target;
        const gap = tryTargetAsap ? realGap : halve64(realGap);
        for (let toremove = gap;!isZero64(toremove); toremove = halve64(toremove)) {
          const next = substract64(value, toremove);
          yield new Value(next, previous);
          previous = next;
        }
      }
      return stream(shrinkGen());
    }
    shrink(current, context2) {
      if (!ArrayInt64Arbitrary.isValidContext(current, context2)) {
        const target = this.defaultTarget();
        return this.shrinkArrayInt64(current, target, true);
      }
      if (this.isLastChanceTry(current, context2)) {
        return Stream.of(new Value(context2, undefined));
      }
      return this.shrinkArrayInt64(current, context2, false);
    }
    defaultTarget() {
      if (!isStrictlyPositive64(this.min) && !isStrictlyNegative64(this.max)) {
        return Zero64;
      }
      return isStrictlyNegative64(this.min) ? this.max : this.min;
    }
    isLastChanceTry(current, context2) {
      if (isZero64(current)) {
        return false;
      }
      if (current.sign === 1) {
        return isEqual64(current, add642(context2, Unit64)) && isStrictlyPositive64(substract64(current, this.min));
      } else {
        return isEqual64(current, substract64(context2, Unit64)) && isStrictlyNegative64(substract64(current, this.max));
      }
    }
    static isValidContext(_current, context2) {
      if (context2 === undefined) {
        return false;
      }
      if (typeof context2 !== "object" || context2 === null || !("sign" in context2) || !("data" in context2)) {
        throw new Error(`Invalid context type passed to ArrayInt64Arbitrary (#1)`);
      }
      return true;
    }
    retrieveBiasedRanges() {
      if (this.biasedRanges != null) {
        return this.biasedRanges;
      }
      if (isEqual64(this.min, this.max)) {
        this.biasedRanges = [{ min: this.min, max: this.max }];
        return this.biasedRanges;
      }
      const minStrictlySmallerZero = isStrictlyNegative64(this.min);
      const maxStrictlyGreaterZero = isStrictlyPositive64(this.max);
      if (minStrictlySmallerZero && maxStrictlyGreaterZero) {
        const logMin = logLike64(this.min);
        const logMax = logLike64(this.max);
        this.biasedRanges = [
          { min: logMin, max: logMax },
          { min: substract64(this.max, logMax), max: this.max },
          { min: this.min, max: substract64(this.min, logMin) }
        ];
      } else {
        const logGap = logLike64(substract64(this.max, this.min));
        const arbCloseToMin = { min: this.min, max: add642(this.min, logGap) };
        const arbCloseToMax = { min: substract64(this.max, logGap), max: this.max };
        this.biasedRanges = minStrictlySmallerZero ? [arbCloseToMax, arbCloseToMin] : [arbCloseToMin, arbCloseToMax];
      }
      return this.biasedRanges;
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/DoubleHelpers.js
function bitCastDoubleToUInt64(f) {
  f64[0] = f;
  return [u32[1], u32[0]];
}
function decomposeDouble(d) {
  const { 0: hi, 1: lo } = bitCastDoubleToUInt64(d);
  const signBit = hi >>> 31;
  const exponentBits = hi >>> 20 & 2047;
  const significandBits = (hi & 1048575) * 4294967296 + lo;
  const exponent = exponentBits === 0 ? -1022 : exponentBits - 1023;
  let significand = exponentBits === 0 ? 0 : 1;
  significand += significandBits / 2 ** 52;
  significand *= signBit === 0 ? 1 : -1;
  return { exponent, significand };
}
function positiveNumberToInt64(n) {
  return [~~(n / 4294967296), n >>> 0];
}
function indexInDoubleFromDecomp(exponent, significand) {
  if (exponent === -1022) {
    const rescaledSignificand2 = significand * 2 ** 52;
    return positiveNumberToInt64(rescaledSignificand2);
  }
  const rescaledSignificand = (significand - 1) * 2 ** 52;
  const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;
  const index = positiveNumberToInt64(rescaledSignificand);
  index[0] += exponentOnlyHigh;
  return index;
}
function doubleToIndex(d) {
  if (d === safePositiveInfinity3) {
    return clone64(INDEX_POSITIVE_INFINITY);
  }
  if (d === safeNegativeInfinity2) {
    return clone64(INDEX_NEGATIVE_INFINITY);
  }
  const decomp = decomposeDouble(d);
  const exponent = decomp.exponent;
  const significand = decomp.significand;
  if (d > 0 || d === 0 && 1 / d === safePositiveInfinity3) {
    return { sign: 1, data: indexInDoubleFromDecomp(exponent, significand) };
  } else {
    const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);
    if (indexOpposite[1] === 4294967295) {
      indexOpposite[0] += 1;
      indexOpposite[1] = 0;
    } else {
      indexOpposite[1] += 1;
    }
    return { sign: -1, data: indexOpposite };
  }
}
function indexToDouble(index) {
  if (index.sign === -1) {
    const indexOpposite = { sign: 1, data: [index.data[0], index.data[1]] };
    if (indexOpposite.data[1] === 0) {
      indexOpposite.data[0] -= 1;
      indexOpposite.data[1] = 4294967295;
    } else {
      indexOpposite.data[1] -= 1;
    }
    return -indexToDouble(indexOpposite);
  }
  if (isEqual64(index, INDEX_POSITIVE_INFINITY)) {
    return safePositiveInfinity3;
  }
  if (index.data[0] < 2097152) {
    return (index.data[0] * 4294967296 + index.data[1]) * 2 ** -1074;
  }
  const postIndexHigh = index.data[0] - 2097152;
  const exponent = -1021 + (postIndexHigh >> 20);
  const significand = 1 + ((postIndexHigh & 1048575) * 2 ** 32 + index.data[1]) * safeEpsilon;
  return significand * 2 ** exponent;
}
var safeNegativeInfinity2, safePositiveInfinity3, safeEpsilon, INDEX_POSITIVE_INFINITY, INDEX_NEGATIVE_INFINITY, f64, u32;
var init_DoubleHelpers = __esm(() => {
  init_ArrayInt64();
  safeNegativeInfinity2 = Number.NEGATIVE_INFINITY;
  safePositiveInfinity3 = Number.POSITIVE_INFINITY;
  safeEpsilon = Number.EPSILON;
  INDEX_POSITIVE_INFINITY = { sign: 1, data: [2146435072, 0] };
  INDEX_NEGATIVE_INFINITY = { sign: -1, data: [2146435072, 1] };
  f64 = new Float64Array(1);
  u32 = new Uint32Array(f64.buffer, f64.byteOffset);
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/FloatingOnlyHelpers.js
function refineConstraintsForFloatingOnly(constraints, maxValue, maxNonIntegerValue, onlyIntegersAfterThisValue) {
  const { noDefaultInfinity = false, minExcluded = false, maxExcluded = false, min: min3 = noDefaultInfinity ? -maxValue : safeNegativeInfinity3, max: max4 = noDefaultInfinity ? maxValue : safePositiveInfinity4 } = constraints;
  const effectiveMin = minExcluded ? min3 < -maxNonIntegerValue ? -onlyIntegersAfterThisValue : Math.max(min3, -maxNonIntegerValue) : min3 === safeNegativeInfinity3 ? Math.max(min3, -onlyIntegersAfterThisValue) : Math.max(min3, -maxNonIntegerValue);
  const effectiveMax = maxExcluded ? max4 > maxNonIntegerValue ? onlyIntegersAfterThisValue : Math.min(max4, maxNonIntegerValue) : max4 === safePositiveInfinity4 ? Math.min(max4, onlyIntegersAfterThisValue) : Math.min(max4, maxNonIntegerValue);
  const fullConstraints = {
    noDefaultInfinity: false,
    minExcluded: minExcluded || (min3 !== safeNegativeInfinity3 || minExcluded) && safeNumberIsInteger5(effectiveMin),
    maxExcluded: maxExcluded || (max4 !== safePositiveInfinity4 || maxExcluded) && safeNumberIsInteger5(effectiveMax),
    min: safeObjectIs7(effectiveMin, -0) ? 0 : effectiveMin,
    max: safeObjectIs7(effectiveMax, 0) ? -0 : effectiveMax,
    noNaN: constraints.noNaN || false
  };
  return fullConstraints;
}
var safeNumberIsInteger5, safeObjectIs7, safeNegativeInfinity3, safePositiveInfinity4;
var init_FloatingOnlyHelpers = __esm(() => {
  safeNumberIsInteger5 = Number.isInteger;
  safeObjectIs7 = Object.is;
  safeNegativeInfinity3 = Number.NEGATIVE_INFINITY;
  safePositiveInfinity4 = Number.POSITIVE_INFINITY;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/DoubleOnlyHelpers.js
function refineConstraintsForDoubleOnly(constraints) {
  return refineConstraintsForFloatingOnly(constraints, safeMaxValue, maxNonIntegerValue, onlyIntegersAfterThisValue);
}
function doubleOnlyMapper(value) {
  return value === onlyIntegersAfterThisValue ? safePositiveInfinity5 : value === -onlyIntegersAfterThisValue ? safeNegativeInfinity4 : value;
}
function doubleOnlyUnmapper(value) {
  if (typeof value !== "number")
    throw new Error("Unsupported type");
  return value === safePositiveInfinity5 ? onlyIntegersAfterThisValue : value === safeNegativeInfinity4 ? -onlyIntegersAfterThisValue : value;
}
var safeNegativeInfinity4, safePositiveInfinity5, safeMaxValue, maxNonIntegerValue = 4503599627370495.5, onlyIntegersAfterThisValue = 4503599627370496;
var init_DoubleOnlyHelpers = __esm(() => {
  init_FloatingOnlyHelpers();
  safeNegativeInfinity4 = Number.NEGATIVE_INFINITY;
  safePositiveInfinity5 = Number.POSITIVE_INFINITY;
  safeMaxValue = Number.MAX_VALUE;
});

// node_modules/fast-check/lib/esm/arbitrary/double.js
function safeDoubleToIndex(d, constraintsLabel) {
  if (safeNumberIsNaN5(d)) {
    throw new Error("fc.double constraints." + constraintsLabel + " must be a 64-bit float");
  }
  return doubleToIndex(d);
}
function unmapperDoubleToIndex(value) {
  if (typeof value !== "number")
    throw new Error("Unsupported type");
  return doubleToIndex(value);
}
function numberIsNotInteger(value) {
  return !safeNumberIsInteger6(value);
}
function anyDouble(constraints) {
  const { noDefaultInfinity = false, noNaN = false, minExcluded = false, maxExcluded = false, min: min3 = noDefaultInfinity ? -safeMaxValue2 : safeNegativeInfinity5, max: max4 = noDefaultInfinity ? safeMaxValue2 : safePositiveInfinity6 } = constraints;
  const minIndexRaw = safeDoubleToIndex(min3, "min");
  const minIndex = minExcluded ? add642(minIndexRaw, Unit64) : minIndexRaw;
  const maxIndexRaw = safeDoubleToIndex(max4, "max");
  const maxIndex = maxExcluded ? substract64(maxIndexRaw, Unit64) : maxIndexRaw;
  if (isStrictlySmaller64(maxIndex, minIndex)) {
    throw new Error("fc.double constraints.min must be smaller or equal to constraints.max");
  }
  if (noNaN) {
    return arrayInt64(minIndex, maxIndex).map(indexToDouble, unmapperDoubleToIndex);
  }
  const positiveMaxIdx = isStrictlyPositive64(maxIndex);
  const minIndexWithNaN = positiveMaxIdx ? minIndex : substract64(minIndex, Unit64);
  const maxIndexWithNaN = positiveMaxIdx ? add642(maxIndex, Unit64) : maxIndex;
  return arrayInt64(minIndexWithNaN, maxIndexWithNaN).map((index) => {
    if (isStrictlySmaller64(maxIndex, index) || isStrictlySmaller64(index, minIndex))
      return safeNaN2;
    else
      return indexToDouble(index);
  }, (value) => {
    if (typeof value !== "number")
      throw new Error("Unsupported type");
    if (safeNumberIsNaN5(value))
      return !isEqual64(maxIndex, maxIndexWithNaN) ? maxIndexWithNaN : minIndexWithNaN;
    return doubleToIndex(value);
  });
}
function double(constraints = {}) {
  if (!constraints.noInteger) {
    return anyDouble(constraints);
  }
  return anyDouble(refineConstraintsForDoubleOnly(constraints)).map(doubleOnlyMapper, doubleOnlyUnmapper).filter(numberIsNotInteger);
}
var safeNumberIsInteger6, safeNumberIsNaN5, safeNegativeInfinity5, safePositiveInfinity6, safeMaxValue2, safeNaN2;
var init_double = __esm(() => {
  init_ArrayInt64();
  init_ArrayInt64Arbitrary();
  init_DoubleHelpers();
  init_DoubleOnlyHelpers();
  safeNumberIsInteger6 = Number.isInteger;
  safeNumberIsNaN5 = Number.isNaN;
  safeNegativeInfinity5 = Number.NEGATIVE_INFINITY;
  safePositiveInfinity6 = Number.POSITIVE_INFINITY;
  safeMaxValue2 = Number.MAX_VALUE;
  safeNaN2 = Number.NaN;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/FloatHelpers.js
function bitCastFloatToUInt32(f) {
  f32[0] = f;
  return u322[0];
}
function decomposeFloat(f) {
  const bits2 = bitCastFloatToUInt32(f);
  const signBit = bits2 >>> 31;
  const exponentBits = bits2 >>> 23 & 255;
  const significandBits = bits2 & 8388607;
  const exponent = exponentBits === 0 ? -126 : exponentBits - 127;
  let significand = exponentBits === 0 ? 0 : 1;
  significand += significandBits / 2 ** 23;
  significand *= signBit === 0 ? 1 : -1;
  return { exponent, significand };
}
function indexInFloatFromDecomp(exponent, significand) {
  if (exponent === -126) {
    return significand * 8388608;
  }
  return (exponent + 127) * 8388608 + (significand - 1) * 8388608;
}
function floatToIndex(f) {
  if (f === safePositiveInfinity7) {
    return INDEX_POSITIVE_INFINITY2;
  }
  if (f === safeNegativeInfinity6) {
    return INDEX_NEGATIVE_INFINITY2;
  }
  const decomp = decomposeFloat(f);
  const exponent = decomp.exponent;
  const significand = decomp.significand;
  if (f > 0 || f === 0 && 1 / f === safePositiveInfinity7) {
    return indexInFloatFromDecomp(exponent, significand);
  } else {
    return -indexInFloatFromDecomp(exponent, -significand) - 1;
  }
}
function indexToFloat(index) {
  if (index < 0) {
    return -indexToFloat(-index - 1);
  }
  if (index === INDEX_POSITIVE_INFINITY2) {
    return safePositiveInfinity7;
  }
  if (index < 16777216) {
    return index * 2 ** -149;
  }
  const postIndex = index - 16777216;
  const exponent = -125 + (postIndex >> 23);
  const significand = 1 + (postIndex & 8388607) / 8388608;
  return significand * 2 ** exponent;
}
var safeNegativeInfinity6, safePositiveInfinity7, MIN_VALUE_32, MAX_VALUE_32, EPSILON_32, INDEX_POSITIVE_INFINITY2 = 2139095040, INDEX_NEGATIVE_INFINITY2 = -2139095041, f32, u322;
var init_FloatHelpers = __esm(() => {
  safeNegativeInfinity6 = Number.NEGATIVE_INFINITY;
  safePositiveInfinity7 = Number.POSITIVE_INFINITY;
  MIN_VALUE_32 = 2 ** -126 * 2 ** -23;
  MAX_VALUE_32 = 2 ** 127 * (1 + (2 ** 23 - 1) / 2 ** 23);
  EPSILON_32 = 2 ** -23;
  f32 = new Float32Array(1);
  u322 = new Uint32Array(f32.buffer, f32.byteOffset);
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/FloatOnlyHelpers.js
function refineConstraintsForFloatOnly(constraints) {
  return refineConstraintsForFloatingOnly(constraints, safeMaxValue3, maxNonIntegerValue2, onlyIntegersAfterThisValue2);
}
function floatOnlyMapper(value) {
  return value === onlyIntegersAfterThisValue2 ? safePositiveInfinity8 : value === -onlyIntegersAfterThisValue2 ? safeNegativeInfinity7 : value;
}
function floatOnlyUnmapper(value) {
  if (typeof value !== "number")
    throw new Error("Unsupported type");
  return value === safePositiveInfinity8 ? onlyIntegersAfterThisValue2 : value === safeNegativeInfinity7 ? -onlyIntegersAfterThisValue2 : value;
}
var safeNegativeInfinity7, safePositiveInfinity8, safeMaxValue3, maxNonIntegerValue2 = 8388607.5, onlyIntegersAfterThisValue2 = 8388608;
var init_FloatOnlyHelpers = __esm(() => {
  init_FloatHelpers();
  init_FloatingOnlyHelpers();
  safeNegativeInfinity7 = Number.NEGATIVE_INFINITY;
  safePositiveInfinity8 = Number.POSITIVE_INFINITY;
  safeMaxValue3 = MAX_VALUE_32;
});

// node_modules/fast-check/lib/esm/arbitrary/float.js
function safeFloatToIndex(f, constraintsLabel) {
  const conversionTrick = "you can convert any double to a 32-bit float by using `Math.fround(myDouble)`";
  const errorMessage = "fc.float constraints." + constraintsLabel + " must be a 32-bit float - " + conversionTrick;
  if (safeNumberIsNaN6(f) || safeMathFround(f) !== f) {
    throw new Error(errorMessage);
  }
  return floatToIndex(f);
}
function unmapperFloatToIndex(value) {
  if (typeof value !== "number")
    throw new Error("Unsupported type");
  return floatToIndex(value);
}
function numberIsNotInteger2(value) {
  return !safeNumberIsInteger7(value);
}
function anyFloat(constraints) {
  const { noDefaultInfinity = false, noNaN = false, minExcluded = false, maxExcluded = false, min: min3 = noDefaultInfinity ? -MAX_VALUE_32 : safeNegativeInfinity8, max: max4 = noDefaultInfinity ? MAX_VALUE_32 : safePositiveInfinity9 } = constraints;
  const minIndexRaw = safeFloatToIndex(min3, "min");
  const minIndex = minExcluded ? minIndexRaw + 1 : minIndexRaw;
  const maxIndexRaw = safeFloatToIndex(max4, "max");
  const maxIndex = maxExcluded ? maxIndexRaw - 1 : maxIndexRaw;
  if (minIndex > maxIndex) {
    throw new Error("fc.float constraints.min must be smaller or equal to constraints.max");
  }
  if (noNaN) {
    return integer({ min: minIndex, max: maxIndex }).map(indexToFloat, unmapperFloatToIndex);
  }
  const minIndexWithNaN = maxIndex > 0 ? minIndex : minIndex - 1;
  const maxIndexWithNaN = maxIndex > 0 ? maxIndex + 1 : maxIndex;
  return integer({ min: minIndexWithNaN, max: maxIndexWithNaN }).map((index) => {
    if (index > maxIndex || index < minIndex)
      return safeNaN3;
    else
      return indexToFloat(index);
  }, (value) => {
    if (typeof value !== "number")
      throw new Error("Unsupported type");
    if (safeNumberIsNaN6(value))
      return maxIndex !== maxIndexWithNaN ? maxIndexWithNaN : minIndexWithNaN;
    return floatToIndex(value);
  });
}
function float(constraints = {}) {
  if (!constraints.noInteger) {
    return anyFloat(constraints);
  }
  return anyFloat(refineConstraintsForFloatOnly(constraints)).map(floatOnlyMapper, floatOnlyUnmapper).filter(numberIsNotInteger2);
}
var safeNumberIsInteger7, safeNumberIsNaN6, safeMathFround, safeNegativeInfinity8, safePositiveInfinity9, safeNaN3;
var init_float = __esm(() => {
  init_integer();
  init_FloatHelpers();
  init_FloatOnlyHelpers();
  safeNumberIsInteger7 = Number.isInteger;
  safeNumberIsNaN6 = Number.isNaN;
  safeMathFround = Math.fround;
  safeNegativeInfinity8 = Number.NEGATIVE_INFINITY;
  safePositiveInfinity9 = Number.POSITIVE_INFINITY;
  safeNaN3 = Number.NaN;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/TextEscaper.js
function escapeForTemplateString(originalText) {
  return originalText.replace(/([$`\\])/g, "\\$1").replace(/\r/g, "\\r");
}
function escapeForMultilineComments(originalText) {
  return originalText.replace(/\*\//g, "*\\/");
}

// node_modules/fast-check/lib/esm/utils/hash.js
function hash2(repr) {
  let crc = 4294967295;
  for (let idx = 0;idx < repr.length; ++idx) {
    const c = safeCharCodeAt(repr, idx);
    if (c < 128) {
      crc = crc32Table[crc & 255 ^ c] ^ crc >> 8;
    } else if (c < 2048) {
      crc = crc32Table[crc & 255 ^ (192 | c >> 6 & 31)] ^ crc >> 8;
      crc = crc32Table[crc & 255 ^ (128 | c & 63)] ^ crc >> 8;
    } else if (c >= 55296 && c < 57344) {
      const cNext = safeCharCodeAt(repr, ++idx);
      if (c >= 56320 || cNext < 56320 || cNext > 57343 || Number.isNaN(cNext)) {
        idx -= 1;
        crc = crc32Table[crc & 255 ^ 239] ^ crc >> 8;
        crc = crc32Table[crc & 255 ^ 191] ^ crc >> 8;
        crc = crc32Table[crc & 255 ^ 189] ^ crc >> 8;
      } else {
        const c1 = (c & 1023) + 64;
        const c2 = cNext & 1023;
        crc = crc32Table[crc & 255 ^ (240 | c1 >> 8 & 7)] ^ crc >> 8;
        crc = crc32Table[crc & 255 ^ (128 | c1 >> 2 & 63)] ^ crc >> 8;
        crc = crc32Table[crc & 255 ^ (128 | c2 >> 6 & 15 | (c1 & 3) << 4)] ^ crc >> 8;
        crc = crc32Table[crc & 255 ^ (128 | c2 & 63)] ^ crc >> 8;
      }
    } else {
      crc = crc32Table[crc & 255 ^ (224 | c >> 12 & 15)] ^ crc >> 8;
      crc = crc32Table[crc & 255 ^ (128 | c >> 6 & 63)] ^ crc >> 8;
      crc = crc32Table[crc & 255 ^ (128 | c & 63)] ^ crc >> 8;
    }
  }
  return (crc | 0) + 2147483648;
}
var crc32Table;
var init_hash = __esm(() => {
  init_globals();
  crc32Table = [
    0,
    1996959894,
    3993919788,
    2567524794,
    124634137,
    1886057615,
    3915621685,
    2657392035,
    249268274,
    2044508324,
    3772115230,
    2547177864,
    162941995,
    2125561021,
    3887607047,
    2428444049,
    498536548,
    1789927666,
    4089016648,
    2227061214,
    450548861,
    1843258603,
    4107580753,
    2211677639,
    325883990,
    1684777152,
    4251122042,
    2321926636,
    335633487,
    1661365465,
    4195302755,
    2366115317,
    997073096,
    1281953886,
    3579855332,
    2724688242,
    1006888145,
    1258607687,
    3524101629,
    2768942443,
    901097722,
    1119000684,
    3686517206,
    2898065728,
    853044451,
    1172266101,
    3705015759,
    2882616665,
    651767980,
    1373503546,
    3369554304,
    3218104598,
    565507253,
    1454621731,
    3485111705,
    3099436303,
    671266974,
    1594198024,
    3322730930,
    2970347812,
    795835527,
    1483230225,
    3244367275,
    3060149565,
    1994146192,
    31158534,
    2563907772,
    4023717930,
    1907459465,
    112637215,
    2680153253,
    3904427059,
    2013776290,
    251722036,
    2517215374,
    3775830040,
    2137656763,
    141376813,
    2439277719,
    3865271297,
    1802195444,
    476864866,
    2238001368,
    4066508878,
    1812370925,
    453092731,
    2181625025,
    4111451223,
    1706088902,
    314042704,
    2344532202,
    4240017532,
    1658658271,
    366619977,
    2362670323,
    4224994405,
    1303535960,
    984961486,
    2747007092,
    3569037538,
    1256170817,
    1037604311,
    2765210733,
    3554079995,
    1131014506,
    879679996,
    2909243462,
    3663771856,
    1141124467,
    855842277,
    2852801631,
    3708648649,
    1342533948,
    654459306,
    3188396048,
    3373015174,
    1466479909,
    544179635,
    3110523913,
    3462522015,
    1591671054,
    702138776,
    2966460450,
    3352799412,
    1504918807,
    783551873,
    3082640443,
    3233442989,
    3988292384,
    2596254646,
    62317068,
    1957810842,
    3939845945,
    2647816111,
    81470997,
    1943803523,
    3814918930,
    2489596804,
    225274430,
    2053790376,
    3826175755,
    2466906013,
    167816743,
    2097651377,
    4027552580,
    2265490386,
    503444072,
    1762050814,
    4150417245,
    2154129355,
    426522225,
    1852507879,
    4275313526,
    2312317920,
    282753626,
    1742555852,
    4189708143,
    2394877945,
    397917763,
    1622183637,
    3604390888,
    2714866558,
    953729732,
    1340076626,
    3518719985,
    2797360999,
    1068828381,
    1219638859,
    3624741850,
    2936675148,
    906185462,
    1090812512,
    3747672003,
    2825379669,
    829329135,
    1181335161,
    3412177804,
    3160834842,
    628085408,
    1382605366,
    3423369109,
    3138078467,
    570562233,
    1426400815,
    3317316542,
    2998733608,
    733239954,
    1555261956,
    3268935591,
    3050360625,
    752459403,
    1541320221,
    2607071920,
    3965973030,
    1969922972,
    40735498,
    2617837225,
    3943577151,
    1913087877,
    83908371,
    2512341634,
    3803740692,
    2075208622,
    213261112,
    2463272603,
    3855990285,
    2094854071,
    198958881,
    2262029012,
    4057260610,
    1759359992,
    534414190,
    2176718541,
    4139329115,
    1873836001,
    414664567,
    2282248934,
    4279200368,
    1711684554,
    285281116,
    2405801727,
    4167216745,
    1634467795,
    376229701,
    2685067896,
    3608007406,
    1308918612,
    956543938,
    2808555105,
    3495958263,
    1231636301,
    1047427035,
    2932959818,
    3654703836,
    1088359270,
    936918000,
    2847714899,
    3736837829,
    1202900863,
    817233897,
    3183342108,
    3401237130,
    1404277552,
    615818150,
    3134207493,
    3453421203,
    1423857449,
    601450431,
    3009837614,
    3294710456,
    1567103746,
    711928724,
    3020668471,
    3272380065,
    1510334235,
    755167117
  ];
});

// node_modules/fast-check/lib/esm/arbitrary/noShrink.js
function noShrink(arb) {
  return arb.noShrink();
}

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/CompareFunctionArbitraryBuilder.js
function buildCompareFunctionArbitrary(cmp) {
  return tuple4(noShrink(integer()), noShrink(integer({ min: 1, max: 4294967295 }))).map(([seed, hashEnvSize]) => {
    const producer = () => {
      const recorded = {};
      const f = (a, b) => {
        const reprA = stringify(a);
        const reprB = stringify(b);
        const hA = hash2(`${seed}${reprA}`) % hashEnvSize;
        const hB = hash2(`${seed}${reprB}`) % hashEnvSize;
        const val = cmp(hA, hB);
        recorded[`[${reprA},${reprB}]`] = val;
        return val;
      };
      return safeObjectAssign6(f, {
        toString: () => {
          const seenValues = safeObjectKeys3(recorded).sort().map((k) => `${k} => ${stringify(recorded[k])}`).map((line) => `/* ${escapeForMultilineComments(line)} */`);
          return `function(a, b) {
  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `
  ${safeJoin(seenValues, `
  `)}` : ""}
  const cmp = ${cmp};
  const hA = hash('${seed}' + stringify(a)) % ${hashEnvSize};
  const hB = hash('${seed}' + stringify(b)) % ${hashEnvSize};
  return cmp(hA, hB);
}`;
        },
        [cloneMethod]: producer
      });
    };
    return producer();
  });
}
var safeObjectAssign6, safeObjectKeys3;
var init_CompareFunctionArbitraryBuilder = __esm(() => {
  init_symbols();
  init_hash();
  init_stringify();
  init_integer();
  init_tuple();
  init_globals();
  safeObjectAssign6 = Object.assign;
  safeObjectKeys3 = Object.keys;
});

// node_modules/fast-check/lib/esm/arbitrary/compareBooleanFunc.js
function compareBooleanFunc() {
  return buildCompareFunctionArbitrary(safeObjectAssign7((hA, hB) => hA < hB, {
    toString() {
      return "(hA, hB) => hA < hB";
    }
  }));
}
var safeObjectAssign7;
var init_compareBooleanFunc = __esm(() => {
  init_CompareFunctionArbitraryBuilder();
  safeObjectAssign7 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/compareFunc.js
function compareFunc() {
  return buildCompareFunctionArbitrary(safeObjectAssign8((hA, hB) => hA - hB, {
    toString() {
      return "(hA, hB) => hA - hB";
    }
  }));
}
var safeObjectAssign8;
var init_compareFunc = __esm(() => {
  init_CompareFunctionArbitraryBuilder();
  safeObjectAssign8 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/func.js
function func(arb) {
  return tuple4(array4(arb, { minLength: 1 }), noShrink(integer())).map(([outs, seed]) => {
    const producer = () => {
      const recorded = {};
      const f = (...args) => {
        const repr = stringify(args);
        const val = outs[hash2(`${seed}${repr}`) % outs.length];
        recorded[repr] = val;
        return hasCloneMethod(val) ? val[cloneMethod]() : val;
      };
      function prettyPrint(stringifiedOuts) {
        const seenValues = safeMap(safeMap(safeSort(safeObjectKeys4(recorded)), (k) => `${k} => ${stringify(recorded[k])}`), (line) => `/* ${escapeForMultilineComments(line)} */`);
        return `function(...args) {
  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `
  ${seenValues.join(`
  `)}` : ""}
  const outs = ${stringifiedOuts};
  return outs[hash('${seed}' + stringify(args)) % outs.length];
}`;
      }
      return safeObjectDefineProperties(f, {
        toString: { value: () => prettyPrint(stringify(outs)) },
        [toStringMethod]: { value: () => prettyPrint(stringify(outs)) },
        [asyncToStringMethod]: { value: async () => prettyPrint(await asyncStringify(outs)) },
        [cloneMethod]: { value: producer, configurable: true }
      });
    };
    return producer();
  });
}
var safeObjectDefineProperties, safeObjectKeys4;
var init_func = __esm(() => {
  init_hash();
  init_stringify();
  init_symbols();
  init_array();
  init_integer();
  init_tuple();
  init_globals();
  safeObjectDefineProperties = Object.defineProperties;
  safeObjectKeys4 = Object.keys;
});

// node_modules/fast-check/lib/esm/arbitrary/maxSafeInteger.js
function maxSafeInteger() {
  return new IntegerArbitrary(safeMinSafeInteger, safeMaxSafeInteger2);
}
var safeMinSafeInteger, safeMaxSafeInteger2;
var init_maxSafeInteger = __esm(() => {
  init_IntegerArbitrary();
  safeMinSafeInteger = Number.MIN_SAFE_INTEGER;
  safeMaxSafeInteger2 = Number.MAX_SAFE_INTEGER;
});

// node_modules/fast-check/lib/esm/arbitrary/maxSafeNat.js
function maxSafeNat() {
  return new IntegerArbitrary(0, safeMaxSafeInteger3);
}
var safeMaxSafeInteger3;
var init_maxSafeNat = __esm(() => {
  init_IntegerArbitrary();
  safeMaxSafeInteger3 = Number.MAX_SAFE_INTEGER;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/NatToStringifiedNat.js
function natToStringifiedNatMapper(options) {
  const [style, v] = options;
  switch (style) {
    case "oct":
      return `0${safeNumberToString(v, 8)}`;
    case "hex":
      return `0x${safeNumberToString(v, 16)}`;
    case "dec":
    default:
      return `${v}`;
  }
}
function tryParseStringifiedNat(stringValue, radix) {
  const parsedNat = safeNumberParseInt(stringValue, radix);
  if (safeNumberToString(parsedNat, radix) !== stringValue) {
    throw new Error("Invalid value");
  }
  return parsedNat;
}
function natToStringifiedNatUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Invalid type");
  }
  if (value.length >= 2 && value[0] === "0") {
    if (value[1] === "x") {
      return ["hex", tryParseStringifiedNat(safeSubstring(value, 2), 16)];
    }
    return ["oct", tryParseStringifiedNat(safeSubstring(value, 1), 8)];
  }
  return ["dec", tryParseStringifiedNat(value, 10)];
}
var safeNumberParseInt;
var init_NatToStringifiedNat = __esm(() => {
  init_globals();
  safeNumberParseInt = Number.parseInt;
});

// node_modules/fast-check/lib/esm/arbitrary/ipV4.js
function dotJoinerMapper(data) {
  return safeJoin(data, ".");
}
function dotJoinerUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Invalid type");
  }
  return safeMap(safeSplit(value, "."), (v) => tryParseStringifiedNat(v, 10));
}
function ipV4() {
  return tuple4(nat(255), nat(255), nat(255), nat(255)).map(dotJoinerMapper, dotJoinerUnmapper);
}
var init_ipV4 = __esm(() => {
  init_globals();
  init_nat();
  init_tuple();
  init_NatToStringifiedNat();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/StringifiedNatArbitraryBuilder.js
function buildStringifiedNatArbitrary(maxValue) {
  return tuple4(constantFrom("dec", "oct", "hex"), nat(maxValue)).map(natToStringifiedNatMapper, natToStringifiedNatUnmapper);
}
var init_StringifiedNatArbitraryBuilder = __esm(() => {
  init_constantFrom();
  init_nat();
  init_tuple();
  init_NatToStringifiedNat();
});

// node_modules/fast-check/lib/esm/arbitrary/ipV4Extended.js
function dotJoinerMapper2(data) {
  return safeJoin(data, ".");
}
function dotJoinerUnmapper2(value) {
  if (typeof value !== "string") {
    throw new Error("Invalid type");
  }
  return safeSplit(value, ".");
}
function ipV4Extended() {
  return oneof(tuple4(buildStringifiedNatArbitrary(255), buildStringifiedNatArbitrary(255), buildStringifiedNatArbitrary(255), buildStringifiedNatArbitrary(255)).map(dotJoinerMapper2, dotJoinerUnmapper2), tuple4(buildStringifiedNatArbitrary(255), buildStringifiedNatArbitrary(255), buildStringifiedNatArbitrary(65535)).map(dotJoinerMapper2, dotJoinerUnmapper2), tuple4(buildStringifiedNatArbitrary(255), buildStringifiedNatArbitrary(16777215)).map(dotJoinerMapper2, dotJoinerUnmapper2), buildStringifiedNatArbitrary(4294967295));
}
var init_ipV4Extended = __esm(() => {
  init_globals();
  init_oneof();
  init_tuple();
  init_StringifiedNatArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/CodePointsToString.js
function codePointsToStringMapper(tab) {
  return safeJoin(tab, "");
}
function codePointsToStringUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Cannot unmap the passed value");
  }
  return [...value];
}
var init_CodePointsToString = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/hexaString.js
function hexaString(constraints = {}) {
  const charArbitrary = hexa();
  const experimentalCustomSlices = createSlicesForStringLegacy(charArbitrary, codePointsToStringUnmapper);
  const enrichedConstraints = safeObjectAssign9(safeObjectAssign9({}, constraints), {
    experimentalCustomSlices
  });
  return array4(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper);
}
var safeObjectAssign9;
var init_hexaString = __esm(() => {
  init_array();
  init_hexa();
  init_CodePointsToString();
  init_SlicesForStringBuilder();
  safeObjectAssign9 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/EntitiesToIPv6.js
function readBh(value) {
  if (value.length === 0)
    return [];
  else
    return safeSplit(value, ":");
}
function extractEhAndL(value) {
  const valueSplits = safeSplit(value, ":");
  if (valueSplits.length >= 2 && valueSplits[valueSplits.length - 1].length <= 4) {
    return [
      safeSlice(valueSplits, 0, valueSplits.length - 2),
      `${valueSplits[valueSplits.length - 2]}:${valueSplits[valueSplits.length - 1]}`
    ];
  }
  return [safeSlice(valueSplits, 0, valueSplits.length - 1), valueSplits[valueSplits.length - 1]];
}
function fullySpecifiedMapper(data) {
  return `${safeJoin(data[0], ":")}:${data[1]}`;
}
function fullySpecifiedUnmapper(value) {
  if (typeof value !== "string")
    throw new Error("Invalid type");
  return extractEhAndL(value);
}
function onlyTrailingMapper(data) {
  return `::${safeJoin(data[0], ":")}:${data[1]}`;
}
function onlyTrailingUnmapper(value) {
  if (typeof value !== "string")
    throw new Error("Invalid type");
  if (!safeStartsWith(value, "::"))
    throw new Error("Invalid value");
  return extractEhAndL(safeSubstring(value, 2));
}
function multiTrailingMapper(data) {
  return `${safeJoin(data[0], ":")}::${safeJoin(data[1], ":")}:${data[2]}`;
}
function multiTrailingUnmapper(value) {
  if (typeof value !== "string")
    throw new Error("Invalid type");
  const [bhString, trailingString] = safeSplit(value, "::", 2);
  const [eh, l] = extractEhAndL(trailingString);
  return [readBh(bhString), eh, l];
}
function multiTrailingMapperOne(data) {
  return multiTrailingMapper([data[0], [data[1]], data[2]]);
}
function multiTrailingUnmapperOne(value) {
  const out = multiTrailingUnmapper(value);
  return [out[0], safeJoin(out[1], ":"), out[2]];
}
function singleTrailingMapper(data) {
  return `${safeJoin(data[0], ":")}::${data[1]}`;
}
function singleTrailingUnmapper(value) {
  if (typeof value !== "string")
    throw new Error("Invalid type");
  const [bhString, trailing] = safeSplit(value, "::", 2);
  return [readBh(bhString), trailing];
}
function noTrailingMapper(data) {
  return `${safeJoin(data[0], ":")}::`;
}
function noTrailingUnmapper(value) {
  if (typeof value !== "string")
    throw new Error("Invalid type");
  if (!safeEndsWith(value, "::"))
    throw new Error("Invalid value");
  return [readBh(safeSubstring(value, 0, value.length - 2))];
}
var init_EntitiesToIPv6 = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/ipV6.js
function h16sTol32Mapper([a, b]) {
  return `${a}:${b}`;
}
function h16sTol32Unmapper(value) {
  if (typeof value !== "string")
    throw new Error("Invalid type");
  if (!value.includes(":"))
    throw new Error("Invalid value");
  return value.split(":", 2);
}
function ipV6() {
  const h16Arb = hexaString({ minLength: 1, maxLength: 4, size: "max" });
  const ls32Arb = oneof(tuple4(h16Arb, h16Arb).map(h16sTol32Mapper, h16sTol32Unmapper), ipV4());
  return oneof(tuple4(array4(h16Arb, { minLength: 6, maxLength: 6, size: "max" }), ls32Arb).map(fullySpecifiedMapper, fullySpecifiedUnmapper), tuple4(array4(h16Arb, { minLength: 5, maxLength: 5, size: "max" }), ls32Arb).map(onlyTrailingMapper, onlyTrailingUnmapper), tuple4(array4(h16Arb, { minLength: 0, maxLength: 1, size: "max" }), array4(h16Arb, { minLength: 4, maxLength: 4, size: "max" }), ls32Arb).map(multiTrailingMapper, multiTrailingUnmapper), tuple4(array4(h16Arb, { minLength: 0, maxLength: 2, size: "max" }), array4(h16Arb, { minLength: 3, maxLength: 3, size: "max" }), ls32Arb).map(multiTrailingMapper, multiTrailingUnmapper), tuple4(array4(h16Arb, { minLength: 0, maxLength: 3, size: "max" }), array4(h16Arb, { minLength: 2, maxLength: 2, size: "max" }), ls32Arb).map(multiTrailingMapper, multiTrailingUnmapper), tuple4(array4(h16Arb, { minLength: 0, maxLength: 4, size: "max" }), h16Arb, ls32Arb).map(multiTrailingMapperOne, multiTrailingUnmapperOne), tuple4(array4(h16Arb, { minLength: 0, maxLength: 5, size: "max" }), ls32Arb).map(singleTrailingMapper, singleTrailingUnmapper), tuple4(array4(h16Arb, { minLength: 0, maxLength: 6, size: "max" }), h16Arb).map(singleTrailingMapper, singleTrailingUnmapper), tuple4(array4(h16Arb, { minLength: 0, maxLength: 7, size: "max" })).map(noTrailingMapper, noTrailingUnmapper));
}
var init_ipV6 = __esm(() => {
  init_array();
  init_oneof();
  init_hexaString();
  init_tuple();
  init_ipV4();
  init_EntitiesToIPv6();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/LazyArbitrary.js
var LazyArbitrary;
var init_LazyArbitrary = __esm(() => {
  init_Arbitrary();
  LazyArbitrary = class LazyArbitrary extends Arbitrary {
    constructor(name) {
      super();
      this.name = name;
      this.underlying = null;
    }
    generate(mrng, biasFactor) {
      if (!this.underlying) {
        throw new Error(`Lazy arbitrary ${JSON.stringify(this.name)} not correctly initialized`);
      }
      return this.underlying.generate(mrng, biasFactor);
    }
    canShrinkWithoutContext(value) {
      if (!this.underlying) {
        throw new Error(`Lazy arbitrary ${JSON.stringify(this.name)} not correctly initialized`);
      }
      return this.underlying.canShrinkWithoutContext(value);
    }
    shrink(value, context2) {
      if (!this.underlying) {
        throw new Error(`Lazy arbitrary ${JSON.stringify(this.name)} not correctly initialized`);
      }
      return this.underlying.shrink(value, context2);
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/letrec.js
function letrec(builder) {
  const lazyArbs = safeObjectCreate2(null);
  const tie = (key) => {
    if (!safeHasOwnProperty(lazyArbs, key)) {
      lazyArbs[key] = new LazyArbitrary(String(key));
    }
    return lazyArbs[key];
  };
  const strictArbs = builder(tie);
  for (const key in strictArbs) {
    if (!safeHasOwnProperty(strictArbs, key)) {
      continue;
    }
    const lazyAtKey = lazyArbs[key];
    const lazyArb = lazyAtKey !== undefined ? lazyAtKey : new LazyArbitrary(key);
    lazyArb.underlying = strictArbs[key];
    lazyArbs[key] = lazyArb;
  }
  return strictArbs;
}
var safeObjectCreate2;
var init_letrec = __esm(() => {
  init_LazyArbitrary();
  init_globals();
  safeObjectCreate2 = Object.create;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/WordsToLorem.js
function wordsToJoinedStringMapper(words) {
  return safeJoin(safeMap(words, (w) => w[w.length - 1] === "," ? safeSubstring(w, 0, w.length - 1) : w), " ");
}
function wordsToJoinedStringUnmapperFor(wordsArbitrary) {
  return function wordsToJoinedStringUnmapper(value) {
    if (typeof value !== "string") {
      throw new Error("Unsupported type");
    }
    const words = [];
    for (const candidate of safeSplit(value, " ")) {
      if (wordsArbitrary.canShrinkWithoutContext(candidate))
        safePush(words, candidate);
      else if (wordsArbitrary.canShrinkWithoutContext(candidate + ","))
        safePush(words, candidate + ",");
      else
        throw new Error("Unsupported word");
    }
    return words;
  };
}
function wordsToSentenceMapper(words) {
  let sentence = safeJoin(words, " ");
  if (sentence[sentence.length - 1] === ",") {
    sentence = safeSubstring(sentence, 0, sentence.length - 1);
  }
  return safeToUpperCase(sentence[0]) + safeSubstring(sentence, 1) + ".";
}
function wordsToSentenceUnmapperFor(wordsArbitrary) {
  return function wordsToSentenceUnmapper(value) {
    if (typeof value !== "string") {
      throw new Error("Unsupported type");
    }
    if (value.length < 2 || value[value.length - 1] !== "." || value[value.length - 2] === "," || safeToUpperCase(safeToLowerCase(value[0])) !== value[0]) {
      throw new Error("Unsupported value");
    }
    const adaptedValue = safeToLowerCase(value[0]) + safeSubstring(value, 1, value.length - 1);
    const words = [];
    const candidates = safeSplit(adaptedValue, " ");
    for (let idx = 0;idx !== candidates.length; ++idx) {
      const candidate = candidates[idx];
      if (wordsArbitrary.canShrinkWithoutContext(candidate))
        safePush(words, candidate);
      else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ","))
        safePush(words, candidate + ",");
      else
        throw new Error("Unsupported word");
    }
    return words;
  };
}
function sentencesToParagraphMapper(sentences) {
  return safeJoin(sentences, " ");
}
function sentencesToParagraphUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Unsupported type");
  }
  const sentences = safeSplit(value, ". ");
  for (let idx = 0;idx < sentences.length - 1; ++idx) {
    sentences[idx] += ".";
  }
  return sentences;
}
var init_WordsToLorem = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/lorem.js
function loremWord() {
  return oneof(h("non", 6), h("adipiscing", 5), h("ligula", 5), h("enim", 5), h("pellentesque", 5), h("in", 5), h("augue", 5), h("et", 5), h("nulla", 5), h("lorem", 4), h("sit", 4), h("sed", 4), h("diam", 4), h("fermentum", 4), h("ut", 4), h("eu", 4), h("aliquam", 4), h("mauris", 4), h("vitae", 4), h("felis", 4), h("ipsum", 3), h("dolor", 3), h("amet,", 3), h("elit", 3), h("euismod", 3), h("mi", 3), h("orci", 3), h("erat", 3), h("praesent", 3), h("egestas", 3), h("leo", 3), h("vel", 3), h("sapien", 3), h("integer", 3), h("curabitur", 3), h("convallis", 3), h("purus", 3), h("risus", 2), h("suspendisse", 2), h("lectus", 2), h("nec,", 2), h("ultricies", 2), h("sed,", 2), h("cras", 2), h("elementum", 2), h("ultrices", 2), h("maecenas", 2), h("massa,", 2), h("varius", 2), h("a,", 2), h("semper", 2), h("proin", 2), h("nec", 2), h("nisl", 2), h("amet", 2), h("duis", 2), h("congue", 2), h("libero", 2), h("vestibulum", 2), h("pede", 2), h("blandit", 2), h("sodales", 2), h("ante", 2), h("nibh", 2), h("ac", 2), h("aenean", 2), h("massa", 2), h("suscipit", 2), h("sollicitudin", 2), h("fusce", 2), h("tempus", 2), h("aliquam,", 2), h("nunc", 2), h("ullamcorper", 2), h("rhoncus", 2), h("metus", 2), h("faucibus,", 2), h("justo", 2), h("magna", 2), h("at", 2), h("tincidunt", 2), h("consectetur", 1), h("tortor,", 1), h("dignissim", 1), h("congue,", 1), h("non,", 1), h("porttitor,", 1), h("nonummy", 1), h("molestie,", 1), h("est", 1), h("eleifend", 1), h("mi,", 1), h("arcu", 1), h("scelerisque", 1), h("vitae,", 1), h("consequat", 1), h("in,", 1), h("pretium", 1), h("volutpat", 1), h("pharetra", 1), h("tempor", 1), h("bibendum", 1), h("odio", 1), h("dui", 1), h("primis", 1), h("faucibus", 1), h("luctus", 1), h("posuere", 1), h("cubilia", 1), h("curae,", 1), h("hendrerit", 1), h("velit", 1), h("mauris,", 1), h("gravida", 1), h("ornare", 1), h("ut,", 1), h("pulvinar", 1), h("varius,", 1), h("turpis", 1), h("nibh,", 1), h("eros", 1), h("id", 1), h("aliquet", 1), h("quis", 1), h("lobortis", 1), h("consectetuer", 1), h("morbi", 1), h("vehicula", 1), h("tortor", 1), h("tellus,", 1), h("id,", 1), h("eu,", 1), h("quam", 1), h("feugiat,", 1), h("posuere,", 1), h("iaculis", 1), h("lectus,", 1), h("tristique", 1), h("mollis,", 1), h("nisl,", 1), h("vulputate", 1), h("sem", 1), h("vivamus", 1), h("placerat", 1), h("imperdiet", 1), h("cursus", 1), h("rutrum", 1), h("iaculis,", 1), h("augue,", 1), h("lacus", 1));
}
function lorem(constraints = {}) {
  const { maxCount, mode = "words", size: size3 } = constraints;
  if (maxCount !== undefined && maxCount < 1) {
    throw new Error(`lorem has to produce at least one word/sentence`);
  }
  const wordArbitrary = loremWord();
  if (mode === "sentences") {
    const sentence = array4(wordArbitrary, { minLength: 1, size: "small" }).map(wordsToSentenceMapper, wordsToSentenceUnmapperFor(wordArbitrary));
    return array4(sentence, { minLength: 1, maxLength: maxCount, size: size3 }).map(sentencesToParagraphMapper, sentencesToParagraphUnmapper);
  } else {
    return array4(wordArbitrary, { minLength: 1, maxLength: maxCount, size: size3 }).map(wordsToJoinedStringMapper, wordsToJoinedStringUnmapperFor(wordArbitrary));
  }
}
var h = (v, w) => {
  return { arbitrary: constant2(v), weight: w };
};
var init_lorem = __esm(() => {
  init_array();
  init_constant();
  init_oneof();
  init_WordsToLorem();
});

// node_modules/fast-check/lib/esm/arbitrary/memo.js
function memo(builder) {
  const previous = {};
  return (maxDepth) => {
    const n = maxDepth !== undefined ? maxDepth : contextRemainingDepth;
    if (!safeHasOwnProperty(previous, n)) {
      const prev = contextRemainingDepth;
      contextRemainingDepth = n - 1;
      previous[n] = builder(n);
      contextRemainingDepth = prev;
    }
    return previous[n];
  };
}
var contextRemainingDepth = 10;
var init_memo = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ToggleFlags.js
function countToggledBits(n) {
  let count = 0;
  while (n > SBigInt(0)) {
    if (n & SBigInt(1))
      ++count;
    n >>= SBigInt(1);
  }
  return count;
}
function computeNextFlags(flags, nextSize) {
  const allowedMask = (SBigInt(1) << SBigInt(nextSize)) - SBigInt(1);
  const preservedFlags = flags & allowedMask;
  let numMissingFlags = countToggledBits(flags - preservedFlags);
  let nFlags = preservedFlags;
  for (let mask = SBigInt(1);mask <= allowedMask && numMissingFlags !== 0; mask <<= SBigInt(1)) {
    if (!(nFlags & mask)) {
      nFlags |= mask;
      --numMissingFlags;
    }
  }
  return nFlags;
}
function computeTogglePositions(chars, toggleCase) {
  const positions = [];
  for (let idx = chars.length - 1;idx !== -1; --idx) {
    if (toggleCase(chars[idx]) !== chars[idx])
      safePush(positions, idx);
  }
  return positions;
}
function computeFlagsFromChars(untoggledChars, toggledChars, togglePositions) {
  let flags = SBigInt(0);
  for (let idx = 0, mask = SBigInt(1);idx !== togglePositions.length; ++idx, mask <<= SBigInt(1)) {
    if (untoggledChars[togglePositions[idx]] !== toggledChars[togglePositions[idx]]) {
      flags |= mask;
    }
  }
  return flags;
}
function applyFlagsOnChars(chars, flags, togglePositions, toggleCase) {
  for (let idx = 0, mask = SBigInt(1);idx !== togglePositions.length; ++idx, mask <<= SBigInt(1)) {
    if (flags & mask)
      chars[togglePositions[idx]] = toggleCase(chars[togglePositions[idx]]);
  }
}
var init_ToggleFlags = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/MixedCaseArbitrary.js
var MixedCaseArbitrary;
var init_MixedCaseArbitrary = __esm(() => {
  init_bigUintN();
  init_Arbitrary();
  init_Value();
  init_LazyIterableIterator();
  init_ToggleFlags();
  init_globals();
  init_globals();
  MixedCaseArbitrary = class MixedCaseArbitrary extends Arbitrary {
    constructor(stringArb, toggleCase, untoggleAll) {
      super();
      this.stringArb = stringArb;
      this.toggleCase = toggleCase;
      this.untoggleAll = untoggleAll;
    }
    buildContextFor(rawStringValue, flagsValue) {
      return {
        rawString: rawStringValue.value,
        rawStringContext: rawStringValue.context,
        flags: flagsValue.value,
        flagsContext: flagsValue.context
      };
    }
    generate(mrng, biasFactor) {
      const rawStringValue = this.stringArb.generate(mrng, biasFactor);
      const chars = [...rawStringValue.value];
      const togglePositions = computeTogglePositions(chars, this.toggleCase);
      const flagsArb = bigUintN(togglePositions.length);
      const flagsValue = flagsArb.generate(mrng, undefined);
      applyFlagsOnChars(chars, flagsValue.value, togglePositions, this.toggleCase);
      return new Value(safeJoin(chars, ""), this.buildContextFor(rawStringValue, flagsValue));
    }
    canShrinkWithoutContext(value) {
      if (typeof value !== "string") {
        return false;
      }
      return this.untoggleAll !== undefined ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value)) : this.stringArb.canShrinkWithoutContext(value);
    }
    shrink(value, context2) {
      let contextSafe;
      if (context2 !== undefined) {
        contextSafe = context2;
      } else {
        if (this.untoggleAll !== undefined) {
          const untoggledValue = this.untoggleAll(value);
          const valueChars = [...value];
          const untoggledValueChars = [...untoggledValue];
          const togglePositions = computeTogglePositions(untoggledValueChars, this.toggleCase);
          contextSafe = {
            rawString: untoggledValue,
            rawStringContext: undefined,
            flags: computeFlagsFromChars(untoggledValueChars, valueChars, togglePositions),
            flagsContext: undefined
          };
        } else {
          contextSafe = {
            rawString: value,
            rawStringContext: undefined,
            flags: SBigInt(0),
            flagsContext: undefined
          };
        }
      }
      const rawString = contextSafe.rawString;
      const flags = contextSafe.flags;
      return this.stringArb.shrink(rawString, contextSafe.rawStringContext).map((nRawStringValue) => {
        const nChars = [...nRawStringValue.value];
        const nTogglePositions = computeTogglePositions(nChars, this.toggleCase);
        const nFlags = computeNextFlags(flags, nTogglePositions.length);
        applyFlagsOnChars(nChars, nFlags, nTogglePositions, this.toggleCase);
        return new Value(safeJoin(nChars, ""), this.buildContextFor(nRawStringValue, new Value(nFlags, undefined)));
      }).join(makeLazy(() => {
        const chars = [...rawString];
        const togglePositions = computeTogglePositions(chars, this.toggleCase);
        return bigUintN(togglePositions.length).shrink(flags, contextSafe.flagsContext).map((nFlagsValue) => {
          const nChars = safeSlice(chars);
          applyFlagsOnChars(nChars, nFlagsValue.value, togglePositions, this.toggleCase);
          return new Value(safeJoin(nChars, ""), this.buildContextFor(new Value(rawString, contextSafe.rawStringContext), nFlagsValue));
        });
      }));
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/mixedCase.js
function defaultToggleCase(rawChar) {
  const upper = safeToUpperCase(rawChar);
  if (upper !== rawChar)
    return upper;
  return safeToLowerCase(rawChar);
}
function mixedCase(stringArb, constraints) {
  if (typeof SBigInt === "undefined") {
    throw new SError(`mixedCase requires BigInt support`);
  }
  const toggleCase = constraints && constraints.toggleCase || defaultToggleCase;
  const untoggleAll = constraints && constraints.untoggleAll;
  return new MixedCaseArbitrary(stringArb, toggleCase, untoggleAll);
}
var init_mixedCase = __esm(() => {
  init_globals();
  init_MixedCaseArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/float32Array.js
function toTypedMapper(data) {
  return SFloat32Array.from(data);
}
function fromTypedUnmapper(value) {
  if (!(value instanceof SFloat32Array))
    throw new Error("Unexpected type");
  return [...value];
}
function float32Array(constraints = {}) {
  return array4(float(constraints), constraints).map(toTypedMapper, fromTypedUnmapper);
}
var init_float32Array = __esm(() => {
  init_float();
  init_array();
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/float64Array.js
function toTypedMapper2(data) {
  return SFloat64Array.from(data);
}
function fromTypedUnmapper2(value) {
  if (!(value instanceof SFloat64Array))
    throw new Error("Unexpected type");
  return [...value];
}
function float64Array(constraints = {}) {
  return array4(double(constraints), constraints).map(toTypedMapper2, fromTypedUnmapper2);
}
var init_float64Array = __esm(() => {
  init_double();
  init_array();
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/TypedIntArrayArbitraryBuilder.js
function typedIntArrayArbitraryArbitraryBuilder(constraints, defaultMin, defaultMax, TypedArrayClass, arbitraryBuilder) {
  const generatorName = TypedArrayClass.name;
  const { min: min3 = defaultMin, max: max4 = defaultMax } = constraints, arrayConstraints = __rest(constraints, ["min", "max"]);
  if (min3 > max4) {
    throw new Error(`Invalid range passed to ${generatorName}: min must be lower than or equal to max`);
  }
  if (min3 < defaultMin) {
    throw new Error(`Invalid min value passed to ${generatorName}: min must be greater than or equal to ${defaultMin}`);
  }
  if (max4 > defaultMax) {
    throw new Error(`Invalid max value passed to ${generatorName}: max must be lower than or equal to ${defaultMax}`);
  }
  return array4(arbitraryBuilder({ min: min3, max: max4 }), arrayConstraints).map((data) => TypedArrayClass.from(data), (value) => {
    if (!(value instanceof TypedArrayClass))
      throw new Error("Invalid type");
    return [...value];
  });
}
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s);i2 < p.length; i2++) {
      if (e.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i2]))
        t[p[i2]] = s[p[i2]];
    }
  return t;
};
var init_TypedIntArrayArbitraryBuilder = __esm(() => {
  init_array();
});

// node_modules/fast-check/lib/esm/arbitrary/int16Array.js
function int16Array(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, -32768, 32767, SInt16Array, integer);
}
var init_int16Array = __esm(() => {
  init_globals();
  init_integer();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/int32Array.js
function int32Array(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, -2147483648, 2147483647, SInt32Array, integer);
}
var init_int32Array = __esm(() => {
  init_globals();
  init_integer();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/int8Array.js
function int8Array(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, -128, 127, SInt8Array, integer);
}
var init_int8Array = __esm(() => {
  init_globals();
  init_integer();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/uint16Array.js
function uint16Array(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, 0, 65535, SUint16Array, integer);
}
var init_uint16Array = __esm(() => {
  init_globals();
  init_integer();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/uint32Array.js
function uint32Array(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, 0, 4294967295, SUint32Array, integer);
}
var init_uint32Array = __esm(() => {
  init_globals();
  init_integer();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/uint8Array.js
function uint8Array(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, 0, 255, SUint8Array, integer);
}
var init_uint8Array = __esm(() => {
  init_globals();
  init_integer();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/uint8ClampedArray.js
function uint8ClampedArray(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, 0, 255, SUint8ClampedArray, integer);
}
var init_uint8ClampedArray = __esm(() => {
  init_globals();
  init_integer();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/WithShrinkFromOtherArbitrary.js
function isSafeContext(context2) {
  return context2 !== undefined;
}
function toGeneratorValue(value) {
  if (value.hasToBeCloned) {
    return new Value(value.value_, { generatorContext: value.context }, () => value.value);
  }
  return new Value(value.value_, { generatorContext: value.context });
}
function toShrinkerValue(value) {
  if (value.hasToBeCloned) {
    return new Value(value.value_, { shrinkerContext: value.context }, () => value.value);
  }
  return new Value(value.value_, { shrinkerContext: value.context });
}
var WithShrinkFromOtherArbitrary;
var init_WithShrinkFromOtherArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  WithShrinkFromOtherArbitrary = class WithShrinkFromOtherArbitrary extends Arbitrary {
    constructor(generatorArbitrary, shrinkerArbitrary) {
      super();
      this.generatorArbitrary = generatorArbitrary;
      this.shrinkerArbitrary = shrinkerArbitrary;
    }
    generate(mrng, biasFactor) {
      return toGeneratorValue(this.generatorArbitrary.generate(mrng, biasFactor));
    }
    canShrinkWithoutContext(value) {
      return this.shrinkerArbitrary.canShrinkWithoutContext(value);
    }
    shrink(value, context2) {
      if (!isSafeContext(context2)) {
        return this.shrinkerArbitrary.shrink(value, undefined).map(toShrinkerValue);
      }
      if ("generatorContext" in context2) {
        return this.generatorArbitrary.shrink(value, context2.generatorContext).map(toGeneratorValue);
      }
      return this.shrinkerArbitrary.shrink(value, context2.shrinkerContext).map(toShrinkerValue);
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/RestrictedIntegerArbitraryBuilder.js
function restrictedIntegerArbitraryBuilder(min3, maxGenerated, max4) {
  const generatorArbitrary = integer({ min: min3, max: maxGenerated });
  if (maxGenerated === max4) {
    return generatorArbitrary;
  }
  const shrinkerArbitrary = integer({ min: min3, max: max4 });
  return new WithShrinkFromOtherArbitrary(generatorArbitrary, shrinkerArbitrary);
}
var init_RestrictedIntegerArbitraryBuilder = __esm(() => {
  init_integer();
  init_WithShrinkFromOtherArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/sparseArray.js
function extractMaxIndex(indexesAndValues) {
  let maxIndex = -1;
  for (let index = 0;index !== indexesAndValues.length; ++index) {
    maxIndex = safeMathMax4(maxIndex, indexesAndValues[index][0]);
  }
  return maxIndex;
}
function arrayFromItems(length2, indexesAndValues) {
  const array5 = SArray(length2);
  for (let index = 0;index !== indexesAndValues.length; ++index) {
    const it = indexesAndValues[index];
    if (it[0] < length2)
      array5[it[0]] = it[1];
  }
  return array5;
}
function sparseArray(arb, constraints = {}) {
  const { size: size3, minNumElements = 0, maxLength = MaxLengthUpperBound, maxNumElements = maxLength, noTrailingHole, depthIdentifier } = constraints;
  const maxGeneratedNumElements = maxGeneratedLengthFromSizeForArbitrary(size3, minNumElements, maxNumElements, constraints.maxNumElements !== undefined);
  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(size3, maxGeneratedNumElements, maxLength, constraints.maxLength !== undefined);
  if (minNumElements > maxLength) {
    throw new Error(`The minimal number of non-hole elements cannot be higher than the maximal length of the array`);
  }
  if (minNumElements > maxNumElements) {
    throw new Error(`The minimal number of non-hole elements cannot be higher than the maximal number of non-holes`);
  }
  const resultedMaxNumElements = safeMathMin6(maxNumElements, maxLength);
  const resultedSizeMaxNumElements = constraints.maxNumElements !== undefined || size3 !== undefined ? size3 : "=";
  const maxGeneratedIndexAuthorized = safeMathMax4(maxGeneratedLength - 1, 0);
  const maxIndexAuthorized = safeMathMax4(maxLength - 1, 0);
  const sparseArrayNoTrailingHole = uniqueArray(tuple4(restrictedIntegerArbitraryBuilder(0, maxGeneratedIndexAuthorized, maxIndexAuthorized), arb), {
    size: resultedSizeMaxNumElements,
    minLength: minNumElements,
    maxLength: resultedMaxNumElements,
    selector: (item) => item[0],
    depthIdentifier
  }).map((items) => {
    const lastIndex = extractMaxIndex(items);
    return arrayFromItems(lastIndex + 1, items);
  }, (value) => {
    if (!safeArrayIsArray4(value)) {
      throw new Error("Not supported entry type");
    }
    if (noTrailingHole && value.length !== 0 && !(value.length - 1 in value)) {
      throw new Error("No trailing hole");
    }
    return safeMap(safeObjectEntries2(value), (entry) => [Number(entry[0]), entry[1]]);
  });
  if (noTrailingHole || maxLength === minNumElements) {
    return sparseArrayNoTrailingHole;
  }
  return tuple4(sparseArrayNoTrailingHole, restrictedIntegerArbitraryBuilder(minNumElements, maxGeneratedLength, maxLength)).map((data) => {
    const sparse = data[0];
    const targetLength = data[1];
    if (sparse.length >= targetLength) {
      return sparse;
    }
    const longerSparse = safeSlice(sparse);
    longerSparse.length = targetLength;
    return longerSparse;
  }, (value) => {
    if (!safeArrayIsArray4(value)) {
      throw new Error("Not supported entry type");
    }
    return [value, value.length];
  });
}
var safeMathMin6, safeMathMax4, safeArrayIsArray4, safeObjectEntries2;
var init_sparseArray = __esm(() => {
  init_globals();
  init_tuple();
  init_uniqueArray();
  init_RestrictedIntegerArbitraryBuilder();
  init_MaxLengthFromMinLength();
  safeMathMin6 = Math.min;
  safeMathMax4 = Math.max;
  safeArrayIsArray4 = SArray.isArray;
  safeObjectEntries2 = Object.entries;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/ArrayToMap.js
function arrayToMapMapper(data) {
  return new Map(data);
}
function arrayToMapUnmapper(value) {
  if (typeof value !== "object" || value === null) {
    throw new Error("Incompatible instance received: should be a non-null object");
  }
  if (!("constructor" in value) || value.constructor !== Map) {
    throw new Error("Incompatible instance received: should be of exact type Map");
  }
  return Array.from(value);
}

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/ArrayToSet.js
function arrayToSetMapper(data) {
  return new Set(data);
}
function arrayToSetUnmapper(value) {
  if (typeof value !== "object" || value === null) {
    throw new Error("Incompatible instance received: should be a non-null object");
  }
  if (!("constructor" in value) || value.constructor !== Set) {
    throw new Error("Incompatible instance received: should be of exact type Set");
  }
  return Array.from(value);
}

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/AnyArbitraryBuilder.js
function mapOf(ka, va, maxKeys, size3, depthIdentifier) {
  return uniqueArray(tuple4(ka, va), {
    maxLength: maxKeys,
    size: size3,
    comparator: "SameValueZero",
    selector: (t) => t[0],
    depthIdentifier
  }).map(arrayToMapMapper, arrayToMapUnmapper);
}
function dictOf(ka, va, maxKeys, size3, depthIdentifier, withNullPrototype) {
  return dictionary(ka, va, {
    maxKeys,
    noNullPrototype: !withNullPrototype,
    size: size3,
    depthIdentifier
  });
}
function setOf(va, maxKeys, size3, depthIdentifier) {
  return uniqueArray(va, { maxLength: maxKeys, size: size3, comparator: "SameValueZero", depthIdentifier }).map(arrayToSetMapper, arrayToSetUnmapper);
}
function typedArray(constraints) {
  return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));
}
function anyArbitraryBuilder(constraints) {
  const arbitrariesForBase = constraints.values;
  const depthSize = constraints.depthSize;
  const depthIdentifier = createDepthIdentifier();
  const maxDepth = constraints.maxDepth;
  const maxKeys = constraints.maxKeys;
  const size3 = constraints.size;
  const baseArb = oneof(...arbitrariesForBase, ...constraints.withBigInt ? [bigInt()] : [], ...constraints.withDate ? [date()] : []);
  return letrec((tie) => ({
    anything: oneof({ maxDepth, depthSize, depthIdentifier }, baseArb, tie("array"), tie("object"), ...constraints.withMap ? [tie("map")] : [], ...constraints.withSet ? [tie("set")] : [], ...constraints.withObjectString ? [tie("anything").map((o) => stringify(o))] : [], ...constraints.withTypedArray ? [typedArray({ maxLength: maxKeys, size: size3 })] : [], ...constraints.withSparseArray ? [sparseArray(tie("anything"), { maxNumElements: maxKeys, size: size3, depthIdentifier })] : []),
    keys: constraints.withObjectString ? oneof({ arbitrary: constraints.key, weight: 10 }, { arbitrary: tie("anything").map((o) => stringify(o)), weight: 1 }) : constraints.key,
    array: array4(tie("anything"), { maxLength: maxKeys, size: size3, depthIdentifier }),
    set: setOf(tie("anything"), maxKeys, size3, depthIdentifier),
    map: oneof(mapOf(tie("keys"), tie("anything"), maxKeys, size3, depthIdentifier), mapOf(tie("anything"), tie("anything"), maxKeys, size3, depthIdentifier)),
    object: dictOf(tie("keys"), tie("anything"), maxKeys, size3, depthIdentifier, constraints.withNullPrototype)
  })).anything;
}
var init_AnyArbitraryBuilder = __esm(() => {
  init_stringify();
  init_array();
  init_oneof();
  init_tuple();
  init_bigInt();
  init_date();
  init_float32Array();
  init_float64Array();
  init_int16Array();
  init_int32Array();
  init_int8Array();
  init_uint16Array();
  init_uint32Array();
  init_uint8Array();
  init_uint8ClampedArray();
  init_sparseArray();
  init_letrec();
  init_uniqueArray();
  init_DepthContext();
  init_dictionary();
});

// node_modules/fast-check/lib/esm/arbitrary/fullUnicodeString.js
function fullUnicodeString(constraints = {}) {
  const charArbitrary = fullUnicode();
  const experimentalCustomSlices = createSlicesForStringLegacy(charArbitrary, codePointsToStringUnmapper);
  const enrichedConstraints = safeObjectAssign10(safeObjectAssign10({}, constraints), {
    experimentalCustomSlices
  });
  return array4(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper);
}
var safeObjectAssign10;
var init_fullUnicodeString = __esm(() => {
  init_array();
  init_fullUnicode();
  init_CodePointsToString();
  init_SlicesForStringBuilder();
  safeObjectAssign10 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/UnboxedToBoxed.js
function unboxedToBoxedMapper(value) {
  switch (typeof value) {
    case "boolean":
      return new SBoolean(value);
    case "number":
      return new SNumber(value);
    case "string":
      return new SString(value);
    default:
      return value;
  }
}
function unboxedToBoxedUnmapper(value) {
  if (typeof value !== "object" || value === null || !("constructor" in value)) {
    return value;
  }
  return value.constructor === SBoolean || value.constructor === SNumber || value.constructor === SString ? value.valueOf() : value;
}
var init_UnboxedToBoxed = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/BoxedArbitraryBuilder.js
function boxedArbitraryBuilder(arb) {
  return arb.map(unboxedToBoxedMapper, unboxedToBoxedUnmapper);
}
var init_BoxedArbitraryBuilder = __esm(() => {
  init_UnboxedToBoxed();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/QualifiedObjectConstraints.js
function defaultValues(constraints, stringArbitrary) {
  return [
    boolean3(),
    maxSafeInteger(),
    double(),
    stringArbitrary(constraints),
    oneof(stringArbitrary(constraints), constant2(null), constant2(undefined))
  ];
}
function boxArbitraries(arbs) {
  return arbs.map((arb) => boxedArbitraryBuilder(arb));
}
function boxArbitrariesIfNeeded(arbs, boxEnabled) {
  return boxEnabled ? boxArbitraries(arbs).concat(arbs) : arbs;
}
function toQualifiedObjectConstraints(settings = {}) {
  function orDefault(optionalValue, defaultValue) {
    return optionalValue !== undefined ? optionalValue : defaultValue;
  }
  const stringArbitrary = "stringUnit" in settings ? string4 : settings.withUnicodeString ? fullUnicodeString : string4;
  const valueConstraints = { size: settings.size, unit: settings.stringUnit };
  return {
    key: orDefault(settings.key, stringArbitrary(valueConstraints)),
    values: boxArbitrariesIfNeeded(orDefault(settings.values, defaultValues(valueConstraints, stringArbitrary)), orDefault(settings.withBoxedValues, false)),
    depthSize: settings.depthSize,
    maxDepth: settings.maxDepth,
    maxKeys: settings.maxKeys,
    size: settings.size,
    withSet: orDefault(settings.withSet, false),
    withMap: orDefault(settings.withMap, false),
    withObjectString: orDefault(settings.withObjectString, false),
    withNullPrototype: orDefault(settings.withNullPrototype, false),
    withBigInt: orDefault(settings.withBigInt, false),
    withDate: orDefault(settings.withDate, false),
    withTypedArray: orDefault(settings.withTypedArray, false),
    withSparseArray: orDefault(settings.withSparseArray, false)
  };
}
var init_QualifiedObjectConstraints = __esm(() => {
  init_boolean();
  init_constant();
  init_double();
  init_fullUnicodeString();
  init_maxSafeInteger();
  init_oneof();
  init_string();
  init_BoxedArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/object.js
function objectInternal(constraints) {
  return dictionary(constraints.key, anyArbitraryBuilder(constraints), {
    maxKeys: constraints.maxKeys,
    noNullPrototype: !constraints.withNullPrototype,
    size: constraints.size
  });
}
function object(constraints) {
  return objectInternal(toQualifiedObjectConstraints(constraints));
}
var init_object = __esm(() => {
  init_dictionary();
  init_AnyArbitraryBuilder();
  init_QualifiedObjectConstraints();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/JsonConstraintsBuilder.js
function jsonConstraintsBuilder(stringArbitrary, constraints) {
  const { depthSize, maxDepth } = constraints;
  const key = stringArbitrary;
  const values2 = [
    boolean3(),
    double({ noDefaultInfinity: true, noNaN: true }),
    stringArbitrary,
    constant2(null)
  ];
  return { key, values: values2, depthSize, maxDepth };
}
var init_JsonConstraintsBuilder = __esm(() => {
  init_boolean();
  init_constant();
  init_double();
});

// node_modules/fast-check/lib/esm/arbitrary/anything.js
function anything(constraints) {
  return anyArbitraryBuilder(toQualifiedObjectConstraints(constraints));
}
var init_anything = __esm(() => {
  init_AnyArbitraryBuilder();
  init_QualifiedObjectConstraints();
});

// node_modules/fast-check/lib/esm/arbitrary/jsonValue.js
function jsonValue(constraints = {}) {
  const noUnicodeString = constraints.noUnicodeString === undefined || constraints.noUnicodeString === true;
  const stringArbitrary = "stringUnit" in constraints ? string4({ unit: constraints.stringUnit }) : noUnicodeString ? string4() : fullUnicodeString();
  return anything(jsonConstraintsBuilder(stringArbitrary, constraints));
}
var init_jsonValue = __esm(() => {
  init_string();
  init_JsonConstraintsBuilder();
  init_anything();
  init_fullUnicodeString();
});

// node_modules/fast-check/lib/esm/arbitrary/json.js
function json(constraints = {}) {
  const arb = jsonValue(constraints);
  return arb.map(JSON.stringify);
}
var init_json = __esm(() => {
  init_jsonValue();
});

// node_modules/fast-check/lib/esm/arbitrary/unicodeString.js
function unicodeString(constraints = {}) {
  const charArbitrary = unicode();
  const experimentalCustomSlices = createSlicesForStringLegacy(charArbitrary, codePointsToStringUnmapper);
  const enrichedConstraints = safeObjectAssign11(safeObjectAssign11({}, constraints), {
    experimentalCustomSlices
  });
  return array4(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper);
}
var safeObjectAssign11;
var init_unicodeString = __esm(() => {
  init_array();
  init_unicode();
  init_CodePointsToString();
  init_SlicesForStringBuilder();
  safeObjectAssign11 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/unicodeJsonValue.js
function unicodeJsonValue(constraints = {}) {
  return anything(jsonConstraintsBuilder(unicodeString(), constraints));
}
var init_unicodeJsonValue = __esm(() => {
  init_unicodeString();
  init_JsonConstraintsBuilder();
  init_anything();
});

// node_modules/fast-check/lib/esm/arbitrary/unicodeJson.js
function unicodeJson(constraints = {}) {
  const arb = unicodeJsonValue(constraints);
  return arb.map(JSON.stringify);
}
var init_unicodeJson = __esm(() => {
  init_unicodeJsonValue();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/EnumerableKeysExtractor.js
function extractEnumerableKeys(instance) {
  const keys2 = safeObjectKeys5(instance);
  const symbols = safeObjectGetOwnPropertySymbols3(instance);
  for (let index = 0;index !== symbols.length; ++index) {
    const symbol4 = symbols[index];
    const descriptor = safeObjectGetOwnPropertyDescriptor3(instance, symbol4);
    if (descriptor && descriptor.enumerable) {
      keys2.push(symbol4);
    }
  }
  return keys2;
}
var safeObjectKeys5, safeObjectGetOwnPropertySymbols3, safeObjectGetOwnPropertyDescriptor3;
var init_EnumerableKeysExtractor = __esm(() => {
  safeObjectKeys5 = Object.keys;
  safeObjectGetOwnPropertySymbols3 = Object.getOwnPropertySymbols;
  safeObjectGetOwnPropertyDescriptor3 = Object.getOwnPropertyDescriptor;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/ValuesAndSeparateKeysToObject.js
function buildValuesAndSeparateKeysToObjectMapper(keys2, noKeyValue) {
  return function valuesAndSeparateKeysToObjectMapper(definition) {
    const obj = definition[1] ? safeObjectCreate3(null) : {};
    for (let idx = 0;idx !== keys2.length; ++idx) {
      const valueWrapper = definition[0][idx];
      if (valueWrapper !== noKeyValue) {
        safeObjectDefineProperty4(obj, keys2[idx], {
          value: valueWrapper,
          configurable: true,
          enumerable: true,
          writable: true
        });
      }
    }
    return obj;
  };
}
function buildValuesAndSeparateKeysToObjectUnmapper(keys2, noKeyValue) {
  return function valuesAndSeparateKeysToObjectUnmapper(value) {
    if (typeof value !== "object" || value === null) {
      throw new Error("Incompatible instance received: should be a non-null object");
    }
    const hasNullPrototype = Object.getPrototypeOf(value) === null;
    const hasObjectPrototype = "constructor" in value && value.constructor === Object;
    if (!hasNullPrototype && !hasObjectPrototype) {
      throw new Error("Incompatible instance received: should be of exact type Object");
    }
    let extractedPropertiesCount = 0;
    const extractedValues = [];
    for (let idx = 0;idx !== keys2.length; ++idx) {
      const descriptor = safeObjectGetOwnPropertyDescriptor4(value, keys2[idx]);
      if (descriptor !== undefined) {
        if (!descriptor.configurable || !descriptor.enumerable || !descriptor.writable) {
          throw new Error("Incompatible instance received: should contain only c/e/w properties");
        }
        if (descriptor.get !== undefined || descriptor.set !== undefined) {
          throw new Error("Incompatible instance received: should contain only no get/set properties");
        }
        ++extractedPropertiesCount;
        safePush(extractedValues, descriptor.value);
      } else {
        safePush(extractedValues, noKeyValue);
      }
    }
    const namePropertiesCount = safeObjectGetOwnPropertyNames2(value).length;
    const symbolPropertiesCount = safeObjectGetOwnPropertySymbols4(value).length;
    if (extractedPropertiesCount !== namePropertiesCount + symbolPropertiesCount) {
      throw new Error("Incompatible instance received: should not contain extra properties");
    }
    return [extractedValues, hasNullPrototype];
  };
}
var safeObjectCreate3, safeObjectDefineProperty4, safeObjectGetOwnPropertyDescriptor4, safeObjectGetOwnPropertyNames2, safeObjectGetOwnPropertySymbols4;
var init_ValuesAndSeparateKeysToObject = __esm(() => {
  init_globals();
  safeObjectCreate3 = Object.create;
  safeObjectDefineProperty4 = Object.defineProperty;
  safeObjectGetOwnPropertyDescriptor4 = Object.getOwnPropertyDescriptor;
  safeObjectGetOwnPropertyNames2 = Object.getOwnPropertyNames;
  safeObjectGetOwnPropertySymbols4 = Object.getOwnPropertySymbols;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/PartialRecordArbitraryBuilder.js
function buildPartialRecordArbitrary(recordModel, requiredKeys, noNullPrototype) {
  const keys2 = extractEnumerableKeys(recordModel);
  const arbs = [];
  for (let index = 0;index !== keys2.length; ++index) {
    const k = keys2[index];
    const requiredArbitrary = recordModel[k];
    if (requiredKeys === undefined || safeIndexOf(requiredKeys, k) !== -1) {
      safePush(arbs, requiredArbitrary);
    } else {
      safePush(arbs, option(requiredArbitrary, { nil: noKeyValue }));
    }
  }
  return tuple4(tuple4(...arbs), noNullPrototype ? constant2(false) : boolean3()).map(buildValuesAndSeparateKeysToObjectMapper(keys2, noKeyValue), buildValuesAndSeparateKeysToObjectUnmapper(keys2, noKeyValue));
}
var noKeyValue;
var init_PartialRecordArbitraryBuilder = __esm(() => {
  init_globals();
  init_boolean();
  init_constant();
  init_option2();
  init_tuple();
  init_EnumerableKeysExtractor();
  init_ValuesAndSeparateKeysToObject();
  noKeyValue = Symbol("no-key");
});

// node_modules/fast-check/lib/esm/arbitrary/record.js
function record(recordModel, constraints) {
  const noNullPrototype = constraints === undefined || constraints.noNullPrototype === undefined || constraints.noNullPrototype;
  if (constraints == null) {
    return buildPartialRecordArbitrary(recordModel, undefined, noNullPrototype);
  }
  if ("withDeletedKeys" in constraints && "requiredKeys" in constraints) {
    throw new Error(`requiredKeys and withDeletedKeys cannot be used together in fc.record`);
  }
  const requireDeletedKeys = "requiredKeys" in constraints && constraints.requiredKeys !== undefined || "withDeletedKeys" in constraints && !!constraints.withDeletedKeys;
  if (!requireDeletedKeys) {
    return buildPartialRecordArbitrary(recordModel, undefined, noNullPrototype);
  }
  const requiredKeys = ("requiredKeys" in constraints ? constraints.requiredKeys : undefined) || [];
  for (let idx = 0;idx !== requiredKeys.length; ++idx) {
    const descriptor = Object.getOwnPropertyDescriptor(recordModel, requiredKeys[idx]);
    if (descriptor === undefined) {
      throw new Error(`requiredKeys cannot reference keys that have not been defined in recordModel`);
    }
    if (!descriptor.enumerable) {
      throw new Error(`requiredKeys cannot reference keys that have are enumerable in recordModel`);
    }
  }
  return buildPartialRecordArbitrary(recordModel, requiredKeys, noNullPrototype);
}
var init_record = __esm(() => {
  init_PartialRecordArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/StreamArbitrary.js
function prettyPrint(seenValuesStrings) {
  return `Stream(${safeJoin(seenValuesStrings, ",")}…)`;
}
var safeObjectDefineProperties2, StreamArbitrary;
var init_StreamArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  init_symbols();
  init_Stream();
  init_globals();
  init_stringify();
  safeObjectDefineProperties2 = Object.defineProperties;
  StreamArbitrary = class StreamArbitrary extends Arbitrary {
    constructor(arb) {
      super();
      this.arb = arb;
    }
    generate(mrng, biasFactor) {
      const appliedBiasFactor = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? biasFactor : undefined;
      const enrichedProducer = () => {
        const seenValues = [];
        const g = function* (arb, clonedMrng) {
          while (true) {
            const value = arb.generate(clonedMrng, appliedBiasFactor).value;
            safePush(seenValues, value);
            yield value;
          }
        };
        const s = new Stream(g(this.arb, mrng.clone()));
        return safeObjectDefineProperties2(s, {
          toString: { value: () => prettyPrint(seenValues.map(stringify)) },
          [toStringMethod]: { value: () => prettyPrint(seenValues.map(stringify)) },
          [asyncToStringMethod]: { value: async () => prettyPrint(await Promise.all(seenValues.map(asyncStringify))) },
          [cloneMethod]: { value: enrichedProducer, enumerable: true }
        });
      };
      return new Value(enrichedProducer(), undefined);
    }
    canShrinkWithoutContext(value) {
      return false;
    }
    shrink(_value, _context) {
      return Stream.nil();
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/infiniteStream.js
function infiniteStream(arb) {
  return new StreamArbitrary(arb);
}
var init_infiniteStream = __esm(() => {
  init_StreamArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/asciiString.js
function asciiString(constraints = {}) {
  const charArbitrary = ascii();
  const experimentalCustomSlices = createSlicesForStringLegacy(charArbitrary, codePointsToStringUnmapper);
  const enrichedConstraints = safeObjectAssign12(safeObjectAssign12({}, constraints), {
    experimentalCustomSlices
  });
  return array4(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper);
}
var safeObjectAssign12;
var init_asciiString = __esm(() => {
  init_array();
  init_ascii();
  init_CodePointsToString();
  init_SlicesForStringBuilder();
  safeObjectAssign12 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/StringToBase64.js
function stringToBase64Mapper(s) {
  switch (s.length % 4) {
    case 0:
      return s;
    case 3:
      return `${s}=`;
    case 2:
      return `${s}==`;
    default:
      return safeSubstring(s, 1);
  }
}
function stringToBase64Unmapper(value) {
  if (typeof value !== "string" || value.length % 4 !== 0) {
    throw new Error("Invalid string received");
  }
  const lastTrailingIndex = value.indexOf("=");
  if (lastTrailingIndex === -1) {
    return value;
  }
  const numTrailings = value.length - lastTrailingIndex;
  if (numTrailings > 2) {
    throw new Error("Cannot unmap the passed value");
  }
  return safeSubstring(value, 0, lastTrailingIndex);
}
var init_StringToBase64 = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/base64String.js
function base64String(constraints = {}) {
  const { minLength: unscaledMinLength = 0, maxLength: unscaledMaxLength = MaxLengthUpperBound, size: size3 } = constraints;
  const minLength = unscaledMinLength + 3 - (unscaledMinLength + 3) % 4;
  const maxLength = unscaledMaxLength - unscaledMaxLength % 4;
  const requestedSize = constraints.maxLength === undefined && size3 === undefined ? "=" : size3;
  if (minLength > maxLength)
    throw new Error("Minimal length should be inferior or equal to maximal length");
  if (minLength % 4 !== 0)
    throw new Error("Minimal length of base64 strings must be a multiple of 4");
  if (maxLength % 4 !== 0)
    throw new Error("Maximal length of base64 strings must be a multiple of 4");
  const charArbitrary = base64();
  const experimentalCustomSlices = createSlicesForStringLegacy(charArbitrary, codePointsToStringUnmapper);
  const enrichedConstraints = {
    minLength,
    maxLength,
    size: requestedSize,
    experimentalCustomSlices
  };
  return array4(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper).map(stringToBase64Mapper, stringToBase64Unmapper);
}
var init_base64String = __esm(() => {
  init_array();
  init_base64();
  init_MaxLengthFromMinLength();
  init_CodePointsToString();
  init_StringToBase64();
  init_SlicesForStringBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/CharsToString.js
function charsToStringMapper(tab) {
  return safeJoin(tab, "");
}
function charsToStringUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Cannot unmap the passed value");
  }
  return safeSplit(value, "");
}
var init_CharsToString = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/string16bits.js
function string16bits(constraints = {}) {
  const charArbitrary = char16bits();
  const experimentalCustomSlices = createSlicesForStringLegacy(charArbitrary, charsToStringUnmapper);
  const enrichedConstraints = safeObjectAssign13(safeObjectAssign13({}, constraints), {
    experimentalCustomSlices
  });
  return array4(charArbitrary, enrichedConstraints).map(charsToStringMapper, charsToStringUnmapper);
}
var safeObjectAssign13;
var init_string16bits = __esm(() => {
  init_array();
  init_char16bits();
  init_CharsToString();
  init_SlicesForStringBuilder();
  safeObjectAssign13 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/stringOf.js
function stringOf(charArb, constraints = {}) {
  const unmapper = patternsToStringUnmapperFor(charArb, constraints);
  const experimentalCustomSlices = createSlicesForStringLegacy(charArb, unmapper);
  const enrichedConstraints = safeObjectAssign14(safeObjectAssign14({}, constraints), {
    experimentalCustomSlices
  });
  return array4(charArb, enrichedConstraints).map(patternsToStringMapper, unmapper);
}
var safeObjectAssign14;
var init_stringOf = __esm(() => {
  init_array();
  init_PatternsToString();
  init_SlicesForStringBuilder();
  safeObjectAssign14 = Object.assign;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/IsSubarrayOf.js
function isSubarrayOf(source, small) {
  const countMap = new SMap;
  let countMinusZero = 0;
  for (const sourceEntry of source) {
    if (safeObjectIs8(sourceEntry, -0)) {
      ++countMinusZero;
    } else {
      const oldCount = safeMapGet(countMap, sourceEntry) || 0;
      safeMapSet(countMap, sourceEntry, oldCount + 1);
    }
  }
  for (let index = 0;index !== small.length; ++index) {
    if (!(index in small)) {
      return false;
    }
    const smallEntry = small[index];
    if (safeObjectIs8(smallEntry, -0)) {
      if (countMinusZero === 0)
        return false;
      --countMinusZero;
    } else {
      const oldCount = safeMapGet(countMap, smallEntry) || 0;
      if (oldCount === 0)
        return false;
      safeMapSet(countMap, smallEntry, oldCount - 1);
    }
  }
  return true;
}
var safeObjectIs8;
var init_IsSubarrayOf = __esm(() => {
  init_globals();
  safeObjectIs8 = Object.is;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/SubarrayArbitrary.js
var safeMathFloor6, safeMathLog4, safeArrayIsArray5, SubarrayArbitrary;
var init_SubarrayArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  init_LazyIterableIterator();
  init_Stream();
  init_globals();
  init_IsSubarrayOf();
  init_IntegerArbitrary();
  safeMathFloor6 = Math.floor;
  safeMathLog4 = Math.log;
  safeArrayIsArray5 = Array.isArray;
  SubarrayArbitrary = class SubarrayArbitrary extends Arbitrary {
    constructor(originalArray, isOrdered, minLength, maxLength) {
      super();
      this.originalArray = originalArray;
      this.isOrdered = isOrdered;
      this.minLength = minLength;
      this.maxLength = maxLength;
      if (minLength < 0 || minLength > originalArray.length)
        throw new Error("fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array");
      if (maxLength < 0 || maxLength > originalArray.length)
        throw new Error("fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array");
      if (minLength > maxLength)
        throw new Error("fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length");
      this.lengthArb = new IntegerArbitrary(minLength, maxLength);
      this.biasedLengthArb = minLength !== maxLength ? new IntegerArbitrary(minLength, minLength + safeMathFloor6(safeMathLog4(maxLength - minLength) / safeMathLog4(2))) : this.lengthArb;
    }
    generate(mrng, biasFactor) {
      const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;
      const size3 = lengthArb.generate(mrng, undefined);
      const sizeValue = size3.value;
      const remainingElements = safeMap(this.originalArray, (_v, idx) => idx);
      const ids = [];
      for (let index = 0;index !== sizeValue; ++index) {
        const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);
        safePush(ids, remainingElements[selectedIdIndex]);
        safeSplice(remainingElements, selectedIdIndex, 1);
      }
      if (this.isOrdered) {
        safeSort(ids, (a, b) => a - b);
      }
      return new Value(safeMap(ids, (i2) => this.originalArray[i2]), size3.context);
    }
    canShrinkWithoutContext(value) {
      if (!safeArrayIsArray5(value)) {
        return false;
      }
      if (!this.lengthArb.canShrinkWithoutContext(value.length)) {
        return false;
      }
      return isSubarrayOf(this.originalArray, value);
    }
    shrink(value, context2) {
      if (value.length === 0) {
        return Stream.nil();
      }
      return this.lengthArb.shrink(value.length, context2).map((newSize) => {
        return new Value(safeSlice(value, value.length - newSize.value), newSize.context);
      }).join(value.length > this.minLength ? makeLazy(() => this.shrink(safeSlice(value, 1), undefined).filter((newValue) => this.minLength <= newValue.value.length + 1).map((newValue) => new Value([value[0], ...newValue.value], undefined))) : Stream.nil());
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/subarray.js
function subarray(originalArray, constraints = {}) {
  const { minLength = 0, maxLength = originalArray.length } = constraints;
  return new SubarrayArbitrary(originalArray, true, minLength, maxLength);
}
var init_subarray = __esm(() => {
  init_SubarrayArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/shuffledSubarray.js
function shuffledSubarray(originalArray, constraints = {}) {
  const { minLength = 0, maxLength = originalArray.length } = constraints;
  return new SubarrayArbitrary(originalArray, false, minLength, maxLength);
}
var init_shuffledSubarray = __esm(() => {
  init_SubarrayArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/UintToBase32String.js
function encodeSymbol(symbol4) {
  return symbol4 < 10 ? SString(symbol4) : encodeSymbolLookupTable[symbol4];
}
function pad2(value, paddingLength) {
  let extraPadding = "";
  while (value.length + extraPadding.length < paddingLength) {
    extraPadding += "0";
  }
  return extraPadding + value;
}
function smallUintToBase32StringMapper(num) {
  let base32Str = "";
  for (let remaining = num;remaining !== 0; ) {
    const next = remaining >> 5;
    const current = remaining - (next << 5);
    base32Str = encodeSymbol(current) + base32Str;
    remaining = next;
  }
  return base32Str;
}
function uintToBase32StringMapper(num, paddingLength) {
  const head3 = ~~(num / 1073741824);
  const tail2 = num & 1073741823;
  return pad2(smallUintToBase32StringMapper(head3), paddingLength - 6) + pad2(smallUintToBase32StringMapper(tail2), 6);
}
function paddedUintToBase32StringMapper(paddingLength) {
  return function padded(num) {
    return uintToBase32StringMapper(num, paddingLength);
  };
}
function uintToBase32StringUnmapper(value) {
  if (typeof value !== "string") {
    throw new SError("Unsupported type");
  }
  let accumulated = 0;
  let power = 1;
  for (let index = value.length - 1;index >= 0; --index) {
    const char2 = value[index];
    const numericForChar = decodeSymbolLookupTable[char2];
    if (numericForChar === undefined) {
      throw new SError("Unsupported type");
    }
    accumulated += numericForChar * power;
    power *= 32;
  }
  return accumulated;
}
var encodeSymbolLookupTable, decodeSymbolLookupTable;
var init_UintToBase32String = __esm(() => {
  init_globals();
  encodeSymbolLookupTable = {
    10: "A",
    11: "B",
    12: "C",
    13: "D",
    14: "E",
    15: "F",
    16: "G",
    17: "H",
    18: "J",
    19: "K",
    20: "M",
    21: "N",
    22: "P",
    23: "Q",
    24: "R",
    25: "S",
    26: "T",
    27: "V",
    28: "W",
    29: "X",
    30: "Y",
    31: "Z"
  };
  decodeSymbolLookupTable = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    G: 16,
    H: 17,
    J: 18,
    K: 19,
    M: 20,
    N: 21,
    P: 22,
    Q: 23,
    R: 24,
    S: 25,
    T: 26,
    V: 27,
    W: 28,
    X: 29,
    Y: 30,
    Z: 31
  };
});

// node_modules/fast-check/lib/esm/arbitrary/ulid.js
function ulidMapper(parts) {
  return padded10Mapper(parts[0]) + padded8Mapper(parts[1]) + padded8Mapper(parts[2]);
}
function ulidUnmapper(value) {
  if (typeof value !== "string" || value.length !== 26) {
    throw new Error("Unsupported type");
  }
  return [
    uintToBase32StringUnmapper(value.slice(0, 10)),
    uintToBase32StringUnmapper(value.slice(10, 18)),
    uintToBase32StringUnmapper(value.slice(18))
  ];
}
function ulid() {
  const timestampPartArbitrary = integer({ min: 0, max: 281474976710655 });
  const randomnessPartOneArbitrary = integer({ min: 0, max: 1099511627775 });
  const randomnessPartTwoArbitrary = integer({ min: 0, max: 1099511627775 });
  return tuple4(timestampPartArbitrary, randomnessPartOneArbitrary, randomnessPartTwoArbitrary).map(ulidMapper, ulidUnmapper);
}
var padded10Mapper, padded8Mapper;
var init_ulid = __esm(() => {
  init_tuple();
  init_integer();
  init_UintToBase32String();
  padded10Mapper = paddedUintToBase32StringMapper(10);
  padded8Mapper = paddedUintToBase32StringMapper(8);
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/NumberToPaddedEight.js
function numberToPaddedEightMapper(n) {
  return safePadStart(safeNumberToString(n, 16), 8, "0");
}
function numberToPaddedEightUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Unsupported type");
  }
  if (value.length !== 8) {
    throw new Error("Unsupported value: invalid length");
  }
  const n = parseInt(value, 16);
  if (value !== numberToPaddedEightMapper(n)) {
    throw new Error("Unsupported value: invalid content");
  }
  return n;
}
var init_NumberToPaddedEight = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/PaddedNumberArbitraryBuilder.js
function buildPaddedNumberArbitrary(min3, max4) {
  return integer({ min: min3, max: max4 }).map(numberToPaddedEightMapper, numberToPaddedEightUnmapper);
}
var init_PaddedNumberArbitraryBuilder = __esm(() => {
  init_integer();
  init_NumberToPaddedEight();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/PaddedEightsToUuid.js
function paddedEightsToUuidMapper(t) {
  return `${t[0]}-${safeSubstring(t[1], 4)}-${safeSubstring(t[1], 0, 4)}-${safeSubstring(t[2], 0, 4)}-${safeSubstring(t[2], 4)}${t[3]}`;
}
function paddedEightsToUuidUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Unsupported type");
  }
  const m = UuidRegex.exec(value);
  if (m === null) {
    throw new Error("Unsupported type");
  }
  return [m[1], m[3] + m[2], m[4] + safeSubstring(m[5], 0, 4), safeSubstring(m[5], 4)];
}
var UuidRegex;
var init_PaddedEightsToUuid = __esm(() => {
  init_globals();
  UuidRegex = /^([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})$/;
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/VersionsApplierForUuid.js
function buildVersionsAppliersForUuid(versions) {
  const mapping = {};
  const reversedMapping = {};
  for (let index = 0;index !== versions.length; ++index) {
    const from = quickNumberToHexaString[index];
    const to = quickNumberToHexaString[versions[index]];
    mapping[from] = to;
    reversedMapping[to] = from;
  }
  function versionsApplierMapper(value) {
    return mapping[value[0]] + safeSubstring(value, 1);
  }
  function versionsApplierUnmapper(value) {
    if (typeof value !== "string") {
      throw new SError("Cannot produce non-string values");
    }
    const rev2 = reversedMapping[value[0]];
    if (rev2 === undefined) {
      throw new SError("Cannot produce strings not starting by the version in hexa code");
    }
    return rev2 + safeSubstring(value, 1);
  }
  return { versionsApplierMapper, versionsApplierUnmapper };
}
var quickNumberToHexaString = "0123456789abcdef";
var init_VersionsApplierForUuid = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/uuid.js
function assertValidVersions(versions) {
  const found = {};
  for (const version of versions) {
    if (found[version]) {
      throw new SError(`Version ${version} has been requested at least twice for uuid`);
    }
    found[version] = true;
    if (version < 1 || version > 15) {
      throw new SError(`Version must be a value in [1-15] for uuid, but received ${version}`);
    }
    if (~~version !== version) {
      throw new SError(`Version must be an integer value for uuid, but received ${version}`);
    }
  }
  if (versions.length === 0) {
    throw new SError(`Must provide at least one version for uuid`);
  }
}
function uuid(constraints = {}) {
  const padded = buildPaddedNumberArbitrary(0, 4294967295);
  const version = constraints.version !== undefined ? typeof constraints.version === "number" ? [constraints.version] : constraints.version : [1, 2, 3, 4, 5];
  assertValidVersions(version);
  const { versionsApplierMapper, versionsApplierUnmapper } = buildVersionsAppliersForUuid(version);
  const secondPadded = buildPaddedNumberArbitrary(0, 268435456 * version.length - 1).map(versionsApplierMapper, versionsApplierUnmapper);
  const thirdPadded = buildPaddedNumberArbitrary(2147483648, 3221225471);
  return tuple4(padded, secondPadded, thirdPadded, padded).map(paddedEightsToUuidMapper, paddedEightsToUuidUnmapper);
}
var init_uuid = __esm(() => {
  init_tuple();
  init_PaddedNumberArbitraryBuilder();
  init_PaddedEightsToUuid();
  init_globals();
  init_VersionsApplierForUuid();
});

// node_modules/fast-check/lib/esm/arbitrary/uuidV.js
function uuidV(versionNumber) {
  const padded = buildPaddedNumberArbitrary(0, 4294967295);
  const offsetSecond = versionNumber * 268435456;
  const secondPadded = buildPaddedNumberArbitrary(offsetSecond, offsetSecond + 268435455);
  const thirdPadded = buildPaddedNumberArbitrary(2147483648, 3221225471);
  return tuple4(padded, secondPadded, thirdPadded, padded).map(paddedEightsToUuidMapper, paddedEightsToUuidUnmapper);
}
var init_uuidV = __esm(() => {
  init_tuple();
  init_PaddedNumberArbitraryBuilder();
  init_PaddedEightsToUuid();
});

// node_modules/fast-check/lib/esm/arbitrary/webAuthority.js
function hostUserInfo(size3) {
  return string4({ unit: getOrCreateAlphaNumericPercentArbitrary("-._~!$&'()*+,;=:"), size: size3 });
}
function userHostPortMapper([u, h2, p]) {
  return (u === null ? "" : `${u}@`) + h2 + (p === null ? "" : `:${p}`);
}
function userHostPortUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Unsupported");
  }
  const atPosition = value.indexOf("@");
  const user = atPosition !== -1 ? value.substring(0, atPosition) : null;
  const portRegex = /:(\d+)$/;
  const m = portRegex.exec(value);
  const port = m !== null ? Number(m[1]) : null;
  const host = m !== null ? value.substring(atPosition + 1, value.length - m[1].length - 1) : value.substring(atPosition + 1);
  return [user, host, port];
}
function bracketedMapper(s) {
  return `[${s}]`;
}
function bracketedUnmapper(value) {
  if (typeof value !== "string" || value[0] !== "[" || value[value.length - 1] !== "]") {
    throw new Error("Unsupported");
  }
  return value.substring(1, value.length - 1);
}
function webAuthority(constraints) {
  const c = constraints || {};
  const size3 = c.size;
  const hostnameArbs = [
    domain({ size: size3 }),
    ...c.withIPv4 === true ? [ipV4()] : [],
    ...c.withIPv6 === true ? [ipV6().map(bracketedMapper, bracketedUnmapper)] : [],
    ...c.withIPv4Extended === true ? [ipV4Extended()] : []
  ];
  return tuple4(c.withUserInfo === true ? option(hostUserInfo(size3)) : constant2(null), oneof(...hostnameArbs), c.withPort === true ? option(nat(65535)) : constant2(null)).map(userHostPortMapper, userHostPortUnmapper);
}
var init_webAuthority = __esm(() => {
  init_CharacterRangeArbitraryBuilder();
  init_constant();
  init_domain();
  init_ipV4();
  init_ipV4Extended();
  init_ipV6();
  init_nat();
  init_oneof();
  init_option2();
  init_string();
  init_tuple();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/UriQueryOrFragmentArbitraryBuilder.js
function buildUriQueryOrFragmentArbitrary(size3) {
  return string4({ unit: getOrCreateAlphaNumericPercentArbitrary("-._~!$&'()*+,;=:@/?"), size: size3 });
}
var init_UriQueryOrFragmentArbitraryBuilder = __esm(() => {
  init_CharacterRangeArbitraryBuilder();
  init_string();
});

// node_modules/fast-check/lib/esm/arbitrary/webFragments.js
function webFragments(constraints = {}) {
  return buildUriQueryOrFragmentArbitrary(constraints.size);
}
var init_webFragments = __esm(() => {
  init_UriQueryOrFragmentArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/webSegment.js
function webSegment(constraints = {}) {
  return string4({ unit: getOrCreateAlphaNumericPercentArbitrary("-._~!$&'()*+,;=:@"), size: constraints.size });
}
var init_webSegment = __esm(() => {
  init_CharacterRangeArbitraryBuilder();
  init_string();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/SegmentsToPath.js
function segmentsToPathMapper(segments) {
  return safeJoin(safeMap(segments, (v) => `/${v}`), "");
}
function segmentsToPathUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Incompatible value received: type");
  }
  if (value.length !== 0 && value[0] !== "/") {
    throw new Error("Incompatible value received: start");
  }
  return safeSplice(safeSplit(value, "/"), 1);
}
var init_SegmentsToPath = __esm(() => {
  init_globals();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/builders/UriPathArbitraryBuilder.js
function sqrtSize(size3) {
  switch (size3) {
    case "xsmall":
      return ["xsmall", "xsmall"];
    case "small":
      return ["small", "xsmall"];
    case "medium":
      return ["small", "small"];
    case "large":
      return ["medium", "small"];
    case "xlarge":
      return ["medium", "medium"];
  }
}
function buildUriPathArbitraryInternal(segmentSize, numSegmentSize) {
  return array4(webSegment({ size: segmentSize }), { size: numSegmentSize }).map(segmentsToPathMapper, segmentsToPathUnmapper);
}
function buildUriPathArbitrary(resolvedSize) {
  const [segmentSize, numSegmentSize] = sqrtSize(resolvedSize);
  if (segmentSize === numSegmentSize) {
    return buildUriPathArbitraryInternal(segmentSize, numSegmentSize);
  }
  return oneof(buildUriPathArbitraryInternal(segmentSize, numSegmentSize), buildUriPathArbitraryInternal(numSegmentSize, segmentSize));
}
var init_UriPathArbitraryBuilder = __esm(() => {
  init_webSegment();
  init_array();
  init_SegmentsToPath();
  init_oneof();
});

// node_modules/fast-check/lib/esm/arbitrary/webPath.js
function webPath(constraints) {
  const c = constraints || {};
  const resolvedSize = resolveSize(c.size);
  return buildUriPathArbitrary(resolvedSize);
}
var init_webPath = __esm(() => {
  init_MaxLengthFromMinLength();
  init_UriPathArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/webQueryParameters.js
function webQueryParameters(constraints = {}) {
  return buildUriQueryOrFragmentArbitrary(constraints.size);
}
var init_webQueryParameters = __esm(() => {
  init_UriQueryOrFragmentArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/PartsToUrl.js
function partsToUrlMapper(data) {
  const [scheme, authority, path] = data;
  const query = data[3] === null ? "" : `?${data[3]}`;
  const fragments = data[4] === null ? "" : `#${data[4]}`;
  return `${scheme}://${authority}${path}${query}${fragments}`;
}
function partsToUrlUnmapper(value) {
  if (typeof value !== "string") {
    throw new Error("Incompatible value received: type");
  }
  const m = UrlSplitRegex.exec(value);
  if (m === null) {
    throw new Error("Incompatible value received");
  }
  const scheme = m[1];
  const authority = m[2];
  const path = m[3];
  const query = m[4];
  const fragments = m[5];
  return [
    scheme,
    authority,
    path,
    query !== undefined ? query.substring(1) : null,
    fragments !== undefined ? fragments.substring(1) : null
  ];
}
var UrlSplitRegex;
var init_PartsToUrl = __esm(() => {
  UrlSplitRegex = /^([[A-Za-z][A-Za-z0-9+.-]*):\/\/([^/?#]*)([^?#]*)(\?[A-Za-z0-9\-._~!$&'()*+,;=:@/?%]*)?(#[A-Za-z0-9\-._~!$&'()*+,;=:@/?%]*)?$/;
});

// node_modules/fast-check/lib/esm/arbitrary/webUrl.js
function webUrl(constraints) {
  const c = constraints || {};
  const resolvedSize = resolveSize(c.size);
  const resolvedAuthoritySettingsSize = c.authoritySettings !== undefined && c.authoritySettings.size !== undefined ? relativeSizeToSize(c.authoritySettings.size, resolvedSize) : resolvedSize;
  const resolvedAuthoritySettings = safeObjectAssign15(safeObjectAssign15({}, c.authoritySettings), {
    size: resolvedAuthoritySettingsSize
  });
  const validSchemes = c.validSchemes || ["http", "https"];
  const schemeArb = constantFrom(...validSchemes);
  const authorityArb = webAuthority(resolvedAuthoritySettings);
  return tuple4(schemeArb, authorityArb, webPath({ size: resolvedSize }), c.withQueryParameters === true ? option(webQueryParameters({ size: resolvedSize })) : constant2(null), c.withFragments === true ? option(webFragments({ size: resolvedSize })) : constant2(null)).map(partsToUrlMapper, partsToUrlUnmapper);
}
var safeObjectAssign15;
var init_webUrl = __esm(() => {
  init_constantFrom();
  init_constant();
  init_option2();
  init_tuple();
  init_webQueryParameters();
  init_webFragments();
  init_webAuthority();
  init_PartsToUrl();
  init_MaxLengthFromMinLength();
  init_webPath();
  safeObjectAssign15 = Object.assign;
});

// node_modules/fast-check/lib/esm/check/model/commands/CommandsIterable.js
var CommandsIterable;
var init_CommandsIterable = __esm(() => {
  init_symbols();
  CommandsIterable = class CommandsIterable {
    constructor(commands, metadataForReplay) {
      this.commands = commands;
      this.metadataForReplay = metadataForReplay;
    }
    [Symbol.iterator]() {
      return this.commands[Symbol.iterator]();
    }
    [cloneMethod]() {
      return new CommandsIterable(this.commands.map((c) => c.clone()), this.metadataForReplay);
    }
    toString() {
      const serializedCommands = this.commands.filter((c) => c.hasRan).map((c) => c.toString()).join(",");
      const metadata = this.metadataForReplay();
      return metadata.length !== 0 ? `${serializedCommands} /*${metadata}*/` : serializedCommands;
    }
  };
});

// node_modules/fast-check/lib/esm/check/model/commands/CommandWrapper.js
class CommandWrapper {
  constructor(cmd) {
    this.cmd = cmd;
    this.hasRan = false;
    if (hasToStringMethod(cmd)) {
      const method = cmd[toStringMethod];
      this[toStringMethod] = function toStringMethod() {
        return method.call(cmd);
      };
    }
    if (hasAsyncToStringMethod(cmd)) {
      const method = cmd[asyncToStringMethod];
      this[asyncToStringMethod] = function asyncToStringMethod() {
        return method.call(cmd);
      };
    }
  }
  check(m) {
    return this.cmd.check(m);
  }
  run(m, r) {
    this.hasRan = true;
    return this.cmd.run(m, r);
  }
  clone() {
    if (hasCloneMethod(this.cmd))
      return new CommandWrapper(this.cmd[cloneMethod]());
    return new CommandWrapper(this.cmd);
  }
  toString() {
    return this.cmd.toString();
  }
}
var init_CommandWrapper = __esm(() => {
  init_stringify();
  init_symbols();
});

// node_modules/fast-check/lib/esm/check/model/ReplayPath.js
class ReplayPath {
  static parse(replayPathStr) {
    const [serializedCount, serializedChanges] = replayPathStr.split(":");
    const counts = this.parseCounts(serializedCount);
    const changes = this.parseChanges(serializedChanges);
    return this.parseOccurences(counts, changes);
  }
  static stringify(replayPath) {
    const occurences = this.countOccurences(replayPath);
    const serializedCount = this.stringifyCounts(occurences);
    const serializedChanges = this.stringifyChanges(occurences);
    return `${serializedCount}:${serializedChanges}`;
  }
  static intToB64(n) {
    if (n < 26)
      return String.fromCharCode(n + 65);
    if (n < 52)
      return String.fromCharCode(n + 97 - 26);
    if (n < 62)
      return String.fromCharCode(n + 48 - 52);
    return String.fromCharCode(n === 62 ? 43 : 47);
  }
  static b64ToInt(c) {
    if (c >= "a")
      return c.charCodeAt(0) - 97 + 26;
    if (c >= "A")
      return c.charCodeAt(0) - 65;
    if (c >= "0")
      return c.charCodeAt(0) - 48 + 52;
    return c === "+" ? 62 : 63;
  }
  static countOccurences(replayPath) {
    return replayPath.reduce((counts, cur) => {
      if (counts.length === 0 || counts[counts.length - 1].count === 64 || counts[counts.length - 1].value !== cur)
        counts.push({ value: cur, count: 1 });
      else
        counts[counts.length - 1].count += 1;
      return counts;
    }, []);
  }
  static parseOccurences(counts, changes) {
    const replayPath = [];
    for (let idx = 0;idx !== counts.length; ++idx) {
      const count = counts[idx];
      const value = changes[idx];
      for (let num = 0;num !== count; ++num)
        replayPath.push(value);
    }
    return replayPath;
  }
  static stringifyChanges(occurences) {
    let serializedChanges = "";
    for (let idx = 0;idx < occurences.length; idx += 6) {
      const changesInt = occurences.slice(idx, idx + 6).reduceRight((prev, cur) => prev * 2 + (cur.value ? 1 : 0), 0);
      serializedChanges += this.intToB64(changesInt);
    }
    return serializedChanges;
  }
  static parseChanges(serializedChanges) {
    const changesInt = serializedChanges.split("").map((c) => this.b64ToInt(c));
    const changes = [];
    for (let idx = 0;idx !== changesInt.length; ++idx) {
      let current = changesInt[idx];
      for (let n = 0;n !== 6; ++n, current >>= 1) {
        changes.push(current % 2 === 1);
      }
    }
    return changes;
  }
  static stringifyCounts(occurences) {
    return occurences.map(({ count }) => this.intToB64(count - 1)).join("");
  }
  static parseCounts(serializedCount) {
    return serializedCount.split("").map((c) => this.b64ToInt(c) + 1);
  }
}

// node_modules/fast-check/lib/esm/arbitrary/_internals/CommandsArbitrary.js
var CommandsArbitrary;
var init_CommandsArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  init_CommandsIterable();
  init_CommandWrapper();
  init_LazyIterableIterator();
  init_Stream();
  init_oneof();
  init_RestrictedIntegerArbitraryBuilder();
  CommandsArbitrary = class CommandsArbitrary extends Arbitrary {
    constructor(commandArbs, maxGeneratedCommands, maxCommands, sourceReplayPath, disableReplayLog) {
      super();
      this.sourceReplayPath = sourceReplayPath;
      this.disableReplayLog = disableReplayLog;
      this.oneCommandArb = oneof(...commandArbs).map((c) => new CommandWrapper(c));
      this.lengthArb = restrictedIntegerArbitraryBuilder(0, maxGeneratedCommands, maxCommands);
      this.replayPath = [];
      this.replayPathPosition = 0;
    }
    metadataForReplay() {
      return this.disableReplayLog ? "" : `replayPath=${JSON.stringify(ReplayPath.stringify(this.replayPath))}`;
    }
    buildValueFor(items, shrunkOnce) {
      const commands = items.map((item) => item.value_);
      const context2 = { shrunkOnce, items };
      return new Value(new CommandsIterable(commands, () => this.metadataForReplay()), context2);
    }
    generate(mrng) {
      const size3 = this.lengthArb.generate(mrng, undefined);
      const sizeValue = size3.value;
      const items = Array(sizeValue);
      for (let idx = 0;idx !== sizeValue; ++idx) {
        const item = this.oneCommandArb.generate(mrng, undefined);
        items[idx] = item;
      }
      this.replayPathPosition = 0;
      return this.buildValueFor(items, false);
    }
    canShrinkWithoutContext(value) {
      return false;
    }
    filterOnExecution(itemsRaw) {
      const items = [];
      for (const c of itemsRaw) {
        if (c.value_.hasRan) {
          this.replayPath.push(true);
          items.push(c);
        } else
          this.replayPath.push(false);
      }
      return items;
    }
    filterOnReplay(itemsRaw) {
      return itemsRaw.filter((c, idx) => {
        const state = this.replayPath[this.replayPathPosition + idx];
        if (state === undefined)
          throw new Error(`Too short replayPath`);
        if (!state && c.value_.hasRan)
          throw new Error(`Mismatch between replayPath and real execution`);
        return state;
      });
    }
    filterForShrinkImpl(itemsRaw) {
      if (this.replayPathPosition === 0) {
        this.replayPath = this.sourceReplayPath !== null ? ReplayPath.parse(this.sourceReplayPath) : [];
      }
      const items = this.replayPathPosition < this.replayPath.length ? this.filterOnReplay(itemsRaw) : this.filterOnExecution(itemsRaw);
      this.replayPathPosition += itemsRaw.length;
      return items;
    }
    shrink(_value, context2) {
      if (context2 === undefined) {
        return Stream.nil();
      }
      const safeContext = context2;
      const shrunkOnce = safeContext.shrunkOnce;
      const itemsRaw = safeContext.items;
      const items = this.filterForShrinkImpl(itemsRaw);
      if (items.length === 0) {
        return Stream.nil();
      }
      const rootShrink = shrunkOnce ? Stream.nil() : new Stream([[]][Symbol.iterator]());
      const nextShrinks = [];
      for (let numToKeep = 0;numToKeep !== items.length; ++numToKeep) {
        nextShrinks.push(makeLazy(() => {
          const fixedStart = items.slice(0, numToKeep);
          return this.lengthArb.shrink(items.length - 1 - numToKeep, undefined).map((l) => fixedStart.concat(items.slice(items.length - (l.value + 1))));
        }));
      }
      for (let itemAt = 0;itemAt !== items.length; ++itemAt) {
        nextShrinks.push(makeLazy(() => this.oneCommandArb.shrink(items[itemAt].value_, items[itemAt].context).map((v) => items.slice(0, itemAt).concat([v], items.slice(itemAt + 1)))));
      }
      return rootShrink.join(...nextShrinks).map((shrinkables) => {
        return this.buildValueFor(shrinkables.map((c) => new Value(c.value_.clone(), c.context)), true);
      });
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/commands.js
function commands(commandArbs, constraints = {}) {
  const { size: size3, maxCommands = MaxLengthUpperBound, disableReplayLog = false, replayPath = null } = constraints;
  const specifiedMaxCommands = constraints.maxCommands !== undefined;
  const maxGeneratedCommands = maxGeneratedLengthFromSizeForArbitrary(size3, 0, maxCommands, specifiedMaxCommands);
  return new CommandsArbitrary(commandArbs, maxGeneratedCommands, maxCommands, replayPath, disableReplayLog);
}
var init_commands = __esm(() => {
  init_CommandsArbitrary();
  init_MaxLengthFromMinLength();
});

// node_modules/fast-check/lib/esm/check/model/commands/ScheduledCommand.js
class ScheduledCommand {
  constructor(s, cmd) {
    this.s = s;
    this.cmd = cmd;
  }
  async check(m) {
    let error = null;
    let checkPassed = false;
    const status = await this.s.scheduleSequence([
      {
        label: `check@${this.cmd.toString()}`,
        builder: async () => {
          try {
            checkPassed = await Promise.resolve(this.cmd.check(m));
          } catch (err2) {
            error = err2;
            throw err2;
          }
        }
      }
    ]).task;
    if (status.faulty) {
      throw error;
    }
    return checkPassed;
  }
  async run(m, r) {
    let error = null;
    const status = await this.s.scheduleSequence([
      {
        label: `run@${this.cmd.toString()}`,
        builder: async () => {
          try {
            await this.cmd.run(m, r);
          } catch (err2) {
            error = err2;
            throw err2;
          }
        }
      }
    ]).task;
    if (status.faulty) {
      throw error;
    }
  }
}
var scheduleCommands = function* (s, cmds) {
  for (const cmd of cmds) {
    yield new ScheduledCommand(s, cmd);
  }
};

// node_modules/fast-check/lib/esm/check/model/ModelRunner.js
function modelRun(s, cmds) {
  internalModelRun(s, cmds);
}
async function asyncModelRun(s, cmds) {
  await internalAsyncModelRun(s, cmds);
}
async function scheduledModelRun(scheduler, s, cmds) {
  const scheduledCommands = scheduleCommands(scheduler, cmds);
  const out = internalAsyncModelRun(s, scheduledCommands, scheduler.schedule(Promise.resolve(), "startModel"));
  await scheduler.waitFor(out);
  await scheduler.waitAll();
}
var genericModelRun = (s, cmds, initialValue, runCmd, then) => {
  return s.then((o) => {
    const { model, real } = o;
    let state = initialValue;
    for (const c of cmds) {
      state = then(state, () => {
        return runCmd(c, model, real);
      });
    }
    return state;
  });
}, internalModelRun = (s, cmds) => {
  const then = (_p, c) => c();
  const setupProducer = {
    then: (fun) => {
      fun(s());
      return;
    }
  };
  const runSync = (cmd, m, r) => {
    if (cmd.check(m))
      cmd.run(m, r);
    return;
  };
  return genericModelRun(setupProducer, cmds, undefined, runSync, then);
}, isAsyncSetup = (s) => {
  return typeof s.then === "function";
}, internalAsyncModelRun = async (s, cmds, defaultPromise = Promise.resolve()) => {
  const then = (p, c) => p.then(c);
  const setupProducer = {
    then: (fun) => {
      const out = s();
      if (isAsyncSetup(out))
        return out.then(fun);
      else
        return fun(out);
    }
  };
  const runAsync = async (cmd, m, r) => {
    if (await cmd.check(m))
      await cmd.run(m, r);
  };
  return await genericModelRun(setupProducer, cmds, defaultPromise, runAsync, then);
};
var init_ModelRunner = () => {};

// node_modules/fast-check/lib/esm/arbitrary/_internals/implementations/SchedulerImplem.js
var defaultSchedulerAct = (f) => f(), SchedulerImplem;
var init_SchedulerImplem = __esm(() => {
  init_symbols();
  init_stringify();
  SchedulerImplem = class SchedulerImplem {
    constructor(act, taskSelector) {
      this.act = act;
      this.taskSelector = taskSelector;
      this.lastTaskId = 0;
      this.sourceTaskSelector = taskSelector.clone();
      this.scheduledTasks = [];
      this.triggeredTasks = [];
      this.scheduledWatchers = [];
    }
    static buildLog(reportItem) {
      return `[task\${${reportItem.taskId}}] ${reportItem.label.length !== 0 ? `${reportItem.schedulingType}::${reportItem.label}` : reportItem.schedulingType} ${reportItem.status}${reportItem.outputValue !== undefined ? ` with value ${escapeForTemplateString(reportItem.outputValue)}` : ""}`;
    }
    log(schedulingType, taskId, label, metadata, status, data) {
      this.triggeredTasks.push({
        status,
        schedulingType,
        taskId,
        label,
        metadata,
        outputValue: data !== undefined ? stringify(data) : undefined
      });
    }
    scheduleInternal(schedulingType, label, task, metadata, customAct, thenTaskToBeAwaited) {
      let trigger = null;
      const taskId = ++this.lastTaskId;
      const scheduledPromise = new Promise((resolve, reject) => {
        trigger = () => {
          (thenTaskToBeAwaited ? task.then(() => thenTaskToBeAwaited()) : task).then((data) => {
            this.log(schedulingType, taskId, label, metadata, "resolved", data);
            return resolve(data);
          }, (err2) => {
            this.log(schedulingType, taskId, label, metadata, "rejected", err2);
            return reject(err2);
          });
        };
      });
      this.scheduledTasks.push({
        original: task,
        scheduled: scheduledPromise,
        trigger,
        schedulingType,
        taskId,
        label,
        metadata,
        customAct
      });
      if (this.scheduledWatchers.length !== 0) {
        this.scheduledWatchers[0]();
      }
      return scheduledPromise;
    }
    schedule(task, label, metadata, customAct) {
      return this.scheduleInternal("promise", label || "", task, metadata, customAct || defaultSchedulerAct);
    }
    scheduleFunction(asyncFunction, customAct) {
      return (...args) => this.scheduleInternal("function", `${asyncFunction.name}(${args.map(stringify).join(",")})`, asyncFunction(...args), undefined, customAct || defaultSchedulerAct);
    }
    scheduleSequence(sequenceBuilders, customAct) {
      const status = { done: false, faulty: false };
      const dummyResolvedPromise = { then: (f) => f() };
      let resolveSequenceTask = () => {};
      const sequenceTask = new Promise((resolve) => resolveSequenceTask = resolve);
      sequenceBuilders.reduce((previouslyScheduled, item) => {
        const [builder, label, metadata] = typeof item === "function" ? [item, item.name, undefined] : [item.builder, item.label, item.metadata];
        return previouslyScheduled.then(() => {
          const scheduled = this.scheduleInternal("sequence", label, dummyResolvedPromise, metadata, customAct || defaultSchedulerAct, () => builder());
          scheduled.catch(() => {
            status.faulty = true;
            resolveSequenceTask();
          });
          return scheduled;
        });
      }, dummyResolvedPromise).then(() => {
        status.done = true;
        resolveSequenceTask();
      }, () => {});
      return Object.assign(status, {
        task: Promise.resolve(sequenceTask).then(() => {
          return { done: status.done, faulty: status.faulty };
        })
      });
    }
    count() {
      return this.scheduledTasks.length;
    }
    internalWaitOne() {
      if (this.scheduledTasks.length === 0) {
        throw new Error("No task scheduled");
      }
      const taskIndex = this.taskSelector.nextTaskIndex(this.scheduledTasks);
      const [scheduledTask] = this.scheduledTasks.splice(taskIndex, 1);
      return scheduledTask.customAct(async () => {
        scheduledTask.trigger();
        try {
          await scheduledTask.scheduled;
        } catch (_err) {}
      });
    }
    async waitOne(customAct) {
      const waitAct = customAct || defaultSchedulerAct;
      await this.act(() => waitAct(async () => await this.internalWaitOne()));
    }
    async waitAll(customAct) {
      while (this.scheduledTasks.length > 0) {
        await this.waitOne(customAct);
      }
    }
    async waitFor(unscheduledTask, customAct) {
      let taskResolved = false;
      let awaiterPromise = null;
      const awaiter = async () => {
        while (!taskResolved && this.scheduledTasks.length > 0) {
          await this.waitOne(customAct);
        }
        awaiterPromise = null;
      };
      const handleNotified = () => {
        if (awaiterPromise !== null) {
          return;
        }
        awaiterPromise = Promise.resolve().then(awaiter);
      };
      const clearAndReplaceWatcher = () => {
        const handleNotifiedIndex = this.scheduledWatchers.indexOf(handleNotified);
        if (handleNotifiedIndex !== -1) {
          this.scheduledWatchers.splice(handleNotifiedIndex, 1);
        }
        if (handleNotifiedIndex === 0 && this.scheduledWatchers.length !== 0) {
          this.scheduledWatchers[0]();
        }
      };
      const rewrappedTask = unscheduledTask.then((ret) => {
        taskResolved = true;
        if (awaiterPromise === null) {
          clearAndReplaceWatcher();
          return ret;
        }
        return awaiterPromise.then(() => {
          clearAndReplaceWatcher();
          return ret;
        });
      }, (err2) => {
        taskResolved = true;
        if (awaiterPromise === null) {
          clearAndReplaceWatcher();
          throw err2;
        }
        return awaiterPromise.then(() => {
          clearAndReplaceWatcher();
          throw err2;
        });
      });
      if (this.scheduledTasks.length > 0 && this.scheduledWatchers.length === 0) {
        handleNotified();
      }
      this.scheduledWatchers.push(handleNotified);
      return rewrappedTask;
    }
    report() {
      return [
        ...this.triggeredTasks,
        ...this.scheduledTasks.map((t) => ({
          status: "pending",
          schedulingType: t.schedulingType,
          taskId: t.taskId,
          label: t.label,
          metadata: t.metadata
        }))
      ];
    }
    toString() {
      return "schedulerFor()`\n" + this.report().map(SchedulerImplem.buildLog).map((log) => `-> ${log}`).join(`
`) + "`";
    }
    [cloneMethod]() {
      return new SchedulerImplem(this.act, this.sourceTaskSelector);
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/BuildSchedulerFor.js
function buildNextTaskIndex(ordering) {
  let numTasks = 0;
  return {
    clone: () => buildNextTaskIndex(ordering),
    nextTaskIndex: (scheduledTasks) => {
      if (ordering.length <= numTasks) {
        throw new Error(`Invalid schedulerFor defined: too many tasks have been scheduled`);
      }
      const taskIndex = scheduledTasks.findIndex((t) => t.taskId === ordering[numTasks]);
      if (taskIndex === -1) {
        throw new Error(`Invalid schedulerFor defined: unable to find next task`);
      }
      ++numTasks;
      return taskIndex;
    }
  };
}
function buildSchedulerFor(act, ordering) {
  return new SchedulerImplem(act, buildNextTaskIndex(ordering));
}
var init_BuildSchedulerFor = __esm(() => {
  init_SchedulerImplem();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/SchedulerArbitrary.js
function buildNextTaskIndex2(mrng) {
  const clonedMrng = mrng.clone();
  return {
    clone: () => buildNextTaskIndex2(clonedMrng),
    nextTaskIndex: (scheduledTasks) => {
      return mrng.nextInt(0, scheduledTasks.length - 1);
    }
  };
}
var SchedulerArbitrary;
var init_SchedulerArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  init_Stream();
  init_SchedulerImplem();
  SchedulerArbitrary = class SchedulerArbitrary extends Arbitrary {
    constructor(act) {
      super();
      this.act = act;
    }
    generate(mrng, _biasFactor) {
      return new Value(new SchedulerImplem(this.act, buildNextTaskIndex2(mrng.clone())), undefined);
    }
    canShrinkWithoutContext(value) {
      return false;
    }
    shrink(_value, _context) {
      return Stream.nil();
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/scheduler.js
function scheduler(constraints) {
  const { act = (f) => f() } = constraints || {};
  return new SchedulerArbitrary(act);
}
function schedulerFor(customOrderingOrConstraints, constraintsOrUndefined) {
  const { act = (f) => f() } = Array.isArray(customOrderingOrConstraints) ? constraintsOrUndefined || {} : customOrderingOrConstraints || {};
  if (Array.isArray(customOrderingOrConstraints)) {
    return buildSchedulerFor(act, customOrderingOrConstraints);
  }
  return function(_strs, ...ordering) {
    return buildSchedulerFor(act, ordering);
  };
}
var init_scheduler = __esm(() => {
  init_BuildSchedulerFor();
  init_SchedulerArbitrary();
});

// node_modules/fast-check/lib/esm/arbitrary/bigInt64Array.js
function bigInt64Array(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, SBigInt("-9223372036854775808"), SBigInt("9223372036854775807"), SBigInt64Array, bigInt);
}
var init_bigInt64Array = __esm(() => {
  init_globals();
  init_bigInt();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/bigUint64Array.js
function bigUint64Array(constraints = {}) {
  return typedIntArrayArbitraryArbitraryBuilder(constraints, SBigInt(0), SBigInt("18446744073709551615"), SBigUint64Array, bigInt);
}
var init_bigUint64Array = __esm(() => {
  init_globals();
  init_bigInt();
  init_TypedIntArrayArbitraryBuilder();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/SanitizeRegexAst.js
function raiseUnsupportedASTNode(astNode) {
  return new Error(`Unsupported AST node! Received: ${stringify(astNode)}`);
}
function addMissingDotStarTraversalAddMissing(astNode, isFirst, isLast) {
  if (!isFirst && !isLast) {
    return astNode;
  }
  const traversalResults = { hasStart: false, hasEnd: false };
  const revampedNode = addMissingDotStarTraversal(astNode, isFirst, isLast, traversalResults);
  const missingStart = isFirst && !traversalResults.hasStart;
  const missingEnd = isLast && !traversalResults.hasEnd;
  if (!missingStart && !missingEnd) {
    return revampedNode;
  }
  const expressions = [];
  if (missingStart) {
    expressions.push({ type: "Assertion", kind: "^" });
    expressions.push({
      type: "Repetition",
      quantifier: { type: "Quantifier", kind: "*", greedy: true },
      expression: { type: "Char", kind: "meta", symbol: ".", value: ".", codePoint: Number.NaN }
    });
  }
  expressions.push(revampedNode);
  if (missingEnd) {
    expressions.push({
      type: "Repetition",
      quantifier: { type: "Quantifier", kind: "*", greedy: true },
      expression: { type: "Char", kind: "meta", symbol: ".", value: ".", codePoint: Number.NaN }
    });
    expressions.push({ type: "Assertion", kind: "$" });
  }
  return { type: "Group", capturing: false, expression: { type: "Alternative", expressions } };
}
function addMissingDotStarTraversal(astNode, isFirst, isLast, traversalResults) {
  switch (astNode.type) {
    case "Char":
      return astNode;
    case "Repetition":
      return astNode;
    case "Quantifier":
      throw new Error(`Wrongly defined AST tree, Quantifier nodes not supposed to be scanned!`);
    case "Alternative":
      traversalResults.hasStart = true;
      traversalResults.hasEnd = true;
      return Object.assign(Object.assign({}, astNode), { expressions: astNode.expressions.map((node, index) => addMissingDotStarTraversalAddMissing(node, isFirst && index === 0, isLast && index === astNode.expressions.length - 1)) });
    case "CharacterClass":
      return astNode;
    case "ClassRange":
      return astNode;
    case "Group": {
      return Object.assign(Object.assign({}, astNode), { expression: addMissingDotStarTraversal(astNode.expression, isFirst, isLast, traversalResults) });
    }
    case "Disjunction": {
      traversalResults.hasStart = true;
      traversalResults.hasEnd = true;
      return Object.assign(Object.assign({}, astNode), { left: astNode.left !== null ? addMissingDotStarTraversalAddMissing(astNode.left, isFirst, isLast) : null, right: astNode.right !== null ? addMissingDotStarTraversalAddMissing(astNode.right, isFirst, isLast) : null });
    }
    case "Assertion": {
      if (astNode.kind === "^" || astNode.kind === "Lookahead") {
        traversalResults.hasStart = true;
        return astNode;
      } else if (astNode.kind === "$" || astNode.kind === "Lookbehind") {
        traversalResults.hasEnd = true;
        return astNode;
      } else {
        throw new Error(`Assertions of kind ${astNode.kind} not implemented yet!`);
      }
    }
    case "Backreference":
      return astNode;
    default:
      throw raiseUnsupportedASTNode(astNode);
  }
}
function addMissingDotStar(astNode) {
  return addMissingDotStarTraversalAddMissing(astNode, true, true);
}
var init_SanitizeRegexAst = __esm(() => {
  init_stringify();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ReadRegex.js
function charSizeAt(text, pos) {
  return text[pos] >= "\uD800" && text[pos] <= "\uDBFF" && text[pos + 1] >= "\uDC00" && text[pos + 1] <= "\uDFFF" ? 2 : 1;
}
function isHexaDigit(char2) {
  return char2 >= "0" && char2 <= "9" || char2 >= "a" && char2 <= "f" || char2 >= "A" && char2 <= "F";
}
function isDigit(char2) {
  return char2 >= "0" && char2 <= "9";
}
function squaredBracketBlockContentEndFrom(text, from) {
  for (let index = from;index !== text.length; ++index) {
    const char2 = text[index];
    if (char2 === "\\") {
      index += 1;
    } else if (char2 === "]") {
      return index;
    }
  }
  throw new Error(`Missing closing ']'`);
}
function parenthesisBlockContentEndFrom(text, from) {
  let numExtraOpened = 0;
  for (let index = from;index !== text.length; ++index) {
    const char2 = text[index];
    if (char2 === "\\") {
      index += 1;
    } else if (char2 === ")") {
      if (numExtraOpened === 0) {
        return index;
      }
      numExtraOpened -= 1;
    } else if (char2 === "[") {
      index = squaredBracketBlockContentEndFrom(text, index);
    } else if (char2 === "(") {
      numExtraOpened += 1;
    }
  }
  throw new Error(`Missing closing ')'`);
}
function curlyBracketBlockContentEndFrom(text, from) {
  let foundComma = false;
  for (let index = from;index !== text.length; ++index) {
    const char2 = text[index];
    if (isDigit(char2)) {} else if (from === index) {
      return -1;
    } else if (char2 === ",") {
      if (foundComma) {
        return -1;
      }
      foundComma = true;
    } else if (char2 === "}") {
      return index;
    } else {
      return -1;
    }
  }
  return -1;
}
function blockEndFrom(text, from, unicodeMode, mode) {
  switch (text[from]) {
    case "[": {
      if (mode === TokenizerBlockMode.Character) {
        return from + 1;
      }
      return squaredBracketBlockContentEndFrom(text, from + 1) + 1;
    }
    case "{": {
      if (mode === TokenizerBlockMode.Character) {
        return from + 1;
      }
      const foundEnd = curlyBracketBlockContentEndFrom(text, from + 1);
      if (foundEnd === -1) {
        return from + 1;
      }
      return foundEnd + 1;
    }
    case "(": {
      if (mode === TokenizerBlockMode.Character) {
        return from + 1;
      }
      return parenthesisBlockContentEndFrom(text, from + 1) + 1;
    }
    case "]":
    case "}":
    case ")":
      return from + 1;
    case "\\": {
      const next1 = text[from + 1];
      switch (next1) {
        case "x":
          if (isHexaDigit(text[from + 2]) && isHexaDigit(text[from + 3])) {
            return from + 4;
          }
          throw new Error(`Unexpected token '${text.substring(from, from + 4)}' found`);
        case "u":
          if (text[from + 2] === "{") {
            if (!unicodeMode) {
              return from + 2;
            }
            if (text[from + 4] === "}") {
              if (isHexaDigit(text[from + 3])) {
                return from + 5;
              }
              throw new Error(`Unexpected token '${text.substring(from, from + 5)}' found`);
            }
            if (text[from + 5] === "}") {
              if (isHexaDigit(text[from + 3]) && isHexaDigit(text[from + 4])) {
                return from + 6;
              }
              throw new Error(`Unexpected token '${text.substring(from, from + 6)}' found`);
            }
            if (text[from + 6] === "}") {
              if (isHexaDigit(text[from + 3]) && isHexaDigit(text[from + 4]) && isHexaDigit(text[from + 5])) {
                return from + 7;
              }
              throw new Error(`Unexpected token '${text.substring(from, from + 7)}' found`);
            }
            if (text[from + 7] === "}") {
              if (isHexaDigit(text[from + 3]) && isHexaDigit(text[from + 4]) && isHexaDigit(text[from + 5]) && isHexaDigit(text[from + 6])) {
                return from + 8;
              }
              throw new Error(`Unexpected token '${text.substring(from, from + 8)}' found`);
            }
            if (text[from + 8] === "}" && isHexaDigit(text[from + 3]) && isHexaDigit(text[from + 4]) && isHexaDigit(text[from + 5]) && isHexaDigit(text[from + 6]) && isHexaDigit(text[from + 7])) {
              return from + 9;
            }
            throw new Error(`Unexpected token '${text.substring(from, from + 9)}' found`);
          }
          if (isHexaDigit(text[from + 2]) && isHexaDigit(text[from + 3]) && isHexaDigit(text[from + 4]) && isHexaDigit(text[from + 5])) {
            return from + 6;
          }
          throw new Error(`Unexpected token '${text.substring(from, from + 6)}' found`);
        case "p":
        case "P": {
          if (!unicodeMode) {
            return from + 2;
          }
          let subIndex = from + 2;
          for (;subIndex < text.length && text[subIndex] !== "}"; subIndex += text[subIndex] === "\\" ? 2 : 1) {}
          if (text[subIndex] !== "}") {
            throw new Error(`Invalid \\P definition`);
          }
          return subIndex + 1;
        }
        case "k": {
          let subIndex = from + 2;
          for (;subIndex < text.length && text[subIndex] !== ">"; ++subIndex) {}
          if (text[subIndex] !== ">") {
            if (!unicodeMode) {
              return from + 2;
            }
            throw new Error(`Invalid \\k definition`);
          }
          return subIndex + 1;
        }
        default: {
          if (isDigit(next1)) {
            const maxIndex = unicodeMode ? text.length : Math.min(from + 4, text.length);
            let subIndex = from + 2;
            for (;subIndex < maxIndex && isDigit(text[subIndex]); ++subIndex) {}
            return subIndex;
          }
          const charSize = unicodeMode ? charSizeAt(text, from + 1) : 1;
          return from + charSize + 1;
        }
      }
    }
    default: {
      const charSize = unicodeMode ? charSizeAt(text, from) : 1;
      return from + charSize;
    }
  }
}
function readFrom(text, from, unicodeMode, mode) {
  const to = blockEndFrom(text, from, unicodeMode, mode);
  return text.substring(from, to);
}
var TokenizerBlockMode;
var init_ReadRegex = __esm(() => {
  (function(TokenizerBlockMode2) {
    TokenizerBlockMode2[TokenizerBlockMode2["Full"] = 0] = "Full";
    TokenizerBlockMode2[TokenizerBlockMode2["Character"] = 1] = "Character";
  })(TokenizerBlockMode || (TokenizerBlockMode = {}));
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/TokenizeRegex.js
function safePop2(tokens) {
  const previous = tokens.pop();
  if (previous === undefined) {
    throw new Error("Unable to extract token preceeding the currently parsed one");
  }
  return previous;
}
function isDigit2(char2) {
  return char2 >= "0" && char2 <= "9";
}
function simpleChar(char2, escaped) {
  return {
    type: "Char",
    kind: "simple",
    symbol: char2,
    value: char2,
    codePoint: char2.codePointAt(0) || -1,
    escaped
  };
}
function metaEscapedChar(block, symbol4) {
  return {
    type: "Char",
    kind: "meta",
    symbol: symbol4,
    value: block,
    codePoint: symbol4.codePointAt(0) || -1
  };
}
function toSingleToken(tokens, allowEmpty) {
  if (tokens.length > 1) {
    return {
      type: "Alternative",
      expressions: tokens
    };
  }
  if (!allowEmpty && tokens.length === 0) {
    throw new Error(`Unsupported no token`);
  }
  return tokens[0];
}
function blockToCharToken(block) {
  if (block[0] === "\\") {
    const next = block[1];
    switch (next) {
      case "x": {
        const allDigits = block.substring(2);
        const codePoint = Number.parseInt(allDigits, 16);
        const symbol4 = safeStringFromCodePoint2(codePoint);
        return { type: "Char", kind: "hex", symbol: symbol4, value: block, codePoint };
      }
      case "u": {
        if (block === "\\u") {
          return simpleChar("u", true);
        }
        const allDigits = block[2] === "{" ? block.substring(3, block.length - 1) : block.substring(2);
        const codePoint = Number.parseInt(allDigits, 16);
        const symbol4 = safeStringFromCodePoint2(codePoint);
        return { type: "Char", kind: "unicode", symbol: symbol4, value: block, codePoint };
      }
      case "0": {
        return metaEscapedChar(block, "\x00");
      }
      case "n": {
        return metaEscapedChar(block, `
`);
      }
      case "f": {
        return metaEscapedChar(block, "\f");
      }
      case "r": {
        return metaEscapedChar(block, "\r");
      }
      case "t": {
        return metaEscapedChar(block, "\t");
      }
      case "v": {
        return metaEscapedChar(block, "\v");
      }
      case "w":
      case "W":
      case "d":
      case "D":
      case "s":
      case "S":
      case "b":
      case "B": {
        return { type: "Char", kind: "meta", symbol: undefined, value: block, codePoint: Number.NaN };
      }
      default: {
        if (isDigit2(next)) {
          const allDigits = block.substring(1);
          const codePoint = Number(allDigits);
          const symbol4 = safeStringFromCodePoint2(codePoint);
          return { type: "Char", kind: "decimal", symbol: symbol4, value: block, codePoint };
        }
        if (block.length > 2 && (next === "p" || next === "P")) {
          throw new Error(`UnicodeProperty not implemented yet!`);
        }
        const char2 = block.substring(1);
        return simpleChar(char2, true);
      }
    }
  }
  return simpleChar(block);
}
function pushTokens(tokens, regexSource, unicodeMode, groups) {
  let disjunctions = null;
  for (let index = 0, block = readFrom(regexSource, index, unicodeMode, TokenizerBlockMode.Full);index !== regexSource.length; index += block.length, block = readFrom(regexSource, index, unicodeMode, TokenizerBlockMode.Full)) {
    const firstInBlock = block[0];
    switch (firstInBlock) {
      case "|": {
        if (disjunctions === null) {
          disjunctions = [];
        }
        disjunctions.push(toSingleToken(tokens.splice(0), true) || null);
        break;
      }
      case ".": {
        tokens.push({ type: "Char", kind: "meta", symbol: block, value: block, codePoint: Number.NaN });
        break;
      }
      case "*":
      case "+": {
        const previous = safePop2(tokens);
        tokens.push({
          type: "Repetition",
          expression: previous,
          quantifier: { type: "Quantifier", kind: firstInBlock, greedy: true }
        });
        break;
      }
      case "?": {
        const previous = safePop2(tokens);
        if (previous.type === "Repetition") {
          previous.quantifier.greedy = false;
          tokens.push(previous);
        } else {
          tokens.push({
            type: "Repetition",
            expression: previous,
            quantifier: { type: "Quantifier", kind: firstInBlock, greedy: true }
          });
        }
        break;
      }
      case "{": {
        if (block === "{") {
          tokens.push(simpleChar(block));
          break;
        }
        const previous = safePop2(tokens);
        const quantifierText = block.substring(1, block.length - 1);
        const quantifierTokens = quantifierText.split(",");
        const from = Number(quantifierTokens[0]);
        const to = quantifierTokens.length === 1 ? from : quantifierTokens[1].length !== 0 ? Number(quantifierTokens[1]) : undefined;
        tokens.push({
          type: "Repetition",
          expression: previous,
          quantifier: { type: "Quantifier", kind: "Range", greedy: true, from, to }
        });
        break;
      }
      case "[": {
        const blockContent = block.substring(1, block.length - 1);
        const subTokens = [];
        let negative = undefined;
        let previousWasSimpleDash = false;
        for (let subIndex = 0, subBlock = readFrom(blockContent, subIndex, unicodeMode, TokenizerBlockMode.Character);subIndex !== blockContent.length; subIndex += subBlock.length, subBlock = readFrom(blockContent, subIndex, unicodeMode, TokenizerBlockMode.Character)) {
          if (subIndex === 0 && subBlock === "^") {
            negative = true;
            continue;
          }
          const newToken = blockToCharToken(subBlock);
          if (subBlock === "-") {
            subTokens.push(newToken);
            previousWasSimpleDash = true;
          } else {
            const operand1Token = subTokens.length >= 2 ? subTokens[subTokens.length - 2] : undefined;
            if (previousWasSimpleDash && operand1Token !== undefined && operand1Token.type === "Char") {
              subTokens.pop();
              subTokens.pop();
              subTokens.push({ type: "ClassRange", from: operand1Token, to: newToken });
            } else {
              subTokens.push(newToken);
            }
            previousWasSimpleDash = false;
          }
        }
        tokens.push({ type: "CharacterClass", expressions: subTokens, negative });
        break;
      }
      case "(": {
        const blockContent = block.substring(1, block.length - 1);
        const subTokens = [];
        if (blockContent[0] === "?") {
          if (blockContent[1] === ":") {
            pushTokens(subTokens, blockContent.substring(2), unicodeMode, groups);
            tokens.push({
              type: "Group",
              capturing: false,
              expression: toSingleToken(subTokens)
            });
          } else if (blockContent[1] === "=" || blockContent[1] === "!") {
            pushTokens(subTokens, blockContent.substring(2), unicodeMode, groups);
            tokens.push({
              type: "Assertion",
              kind: "Lookahead",
              negative: blockContent[1] === "!" ? true : undefined,
              assertion: toSingleToken(subTokens)
            });
          } else if (blockContent[1] === "<" && (blockContent[2] === "=" || blockContent[2] === "!")) {
            pushTokens(subTokens, blockContent.substring(3), unicodeMode, groups);
            tokens.push({
              type: "Assertion",
              kind: "Lookbehind",
              negative: blockContent[2] === "!" ? true : undefined,
              assertion: toSingleToken(subTokens)
            });
          } else {
            const chunks = blockContent.split(">");
            if (chunks.length < 2 || chunks[0][1] !== "<") {
              throw new Error(`Unsupported regex content found at ${JSON.stringify(block)}`);
            }
            const groupIndex = ++groups.lastIndex;
            const nameRaw = chunks[0].substring(2);
            groups.named.set(nameRaw, groupIndex);
            pushTokens(subTokens, chunks.slice(1).join(">"), unicodeMode, groups);
            tokens.push({
              type: "Group",
              capturing: true,
              nameRaw,
              name: nameRaw,
              number: groupIndex,
              expression: toSingleToken(subTokens)
            });
          }
        } else {
          const groupIndex = ++groups.lastIndex;
          pushTokens(subTokens, blockContent, unicodeMode, groups);
          tokens.push({
            type: "Group",
            capturing: true,
            number: groupIndex,
            expression: toSingleToken(subTokens)
          });
        }
        break;
      }
      default: {
        if (block === "^") {
          tokens.push({ type: "Assertion", kind: block });
        } else if (block === "$") {
          tokens.push({ type: "Assertion", kind: block });
        } else if (block[0] === "\\" && isDigit2(block[1])) {
          const reference = Number(block.substring(1));
          if (unicodeMode || reference <= groups.lastIndex) {
            tokens.push({ type: "Backreference", kind: "number", number: reference, reference });
          } else {
            tokens.push(blockToCharToken(block));
          }
        } else if (block[0] === "\\" && block[1] === "k" && block.length !== 2) {
          const referenceRaw = block.substring(3, block.length - 1);
          tokens.push({
            type: "Backreference",
            kind: "name",
            number: groups.named.get(referenceRaw) || 0,
            referenceRaw,
            reference: referenceRaw
          });
        } else {
          tokens.push(blockToCharToken(block));
        }
        break;
      }
    }
  }
  if (disjunctions !== null) {
    disjunctions.push(toSingleToken(tokens.splice(0), true) || null);
    let currentDisjunction = {
      type: "Disjunction",
      left: disjunctions[0],
      right: disjunctions[1]
    };
    for (let index = 2;index < disjunctions.length; ++index) {
      currentDisjunction = {
        type: "Disjunction",
        left: currentDisjunction,
        right: disjunctions[index]
      };
    }
    tokens.push(currentDisjunction);
  }
}
function tokenizeRegex(regex) {
  const unicodeMode = safeIndexOf([...regex.flags], "u") !== -1;
  const regexSource = regex.source;
  const tokens = [];
  pushTokens(tokens, regexSource, unicodeMode, { lastIndex: 0, named: new Map });
  return toSingleToken(tokens);
}
var safeStringFromCodePoint2;
var init_TokenizeRegex = __esm(() => {
  init_globals();
  init_ReadRegex();
  safeStringFromCodePoint2 = String.fromCodePoint;
});

// node_modules/fast-check/lib/esm/arbitrary/stringMatching.js
function raiseUnsupportedASTNode2(astNode) {
  return new SError(`Unsupported AST node! Received: ${stringify(astNode)}`);
}
function toMatchingArbitrary(astNode, constraints, flags) {
  switch (astNode.type) {
    case "Char": {
      if (astNode.kind === "meta") {
        switch (astNode.value) {
          case "\\w": {
            return constantFrom(...wordChars);
          }
          case "\\W": {
            return defaultChar.filter((c) => safeIndexOf(wordChars, c) === -1);
          }
          case "\\d": {
            return constantFrom(...digitChars);
          }
          case "\\D": {
            return defaultChar.filter((c) => safeIndexOf(digitChars, c) === -1);
          }
          case "\\s": {
            return constantFrom(...spaceChars);
          }
          case "\\S": {
            return defaultChar.filter((c) => safeIndexOf(spaceChars, c) === -1);
          }
          case "\\b":
          case "\\B": {
            throw new SError(`Meta character ${astNode.value} not implemented yet!`);
          }
          case ".": {
            const forbiddenChars = flags.dotAll ? terminatorChars : newLineAndTerminatorChars;
            return defaultChar.filter((c) => safeIndexOf(forbiddenChars, c) === -1);
          }
        }
      }
      if (astNode.symbol === undefined) {
        throw new SError(`Unexpected undefined symbol received for non-meta Char! Received: ${stringify(astNode)}`);
      }
      return constant2(astNode.symbol);
    }
    case "Repetition": {
      const node = toMatchingArbitrary(astNode.expression, constraints, flags);
      switch (astNode.quantifier.kind) {
        case "*": {
          return stringOf(node, constraints);
        }
        case "+": {
          return stringOf(node, Object.assign(Object.assign({}, constraints), { minLength: 1 }));
        }
        case "?": {
          return stringOf(node, Object.assign(Object.assign({}, constraints), { minLength: 0, maxLength: 1 }));
        }
        case "Range": {
          return stringOf(node, Object.assign(Object.assign({}, constraints), { minLength: astNode.quantifier.from, maxLength: astNode.quantifier.to }));
        }
        default: {
          throw raiseUnsupportedASTNode2(astNode.quantifier);
        }
      }
    }
    case "Quantifier": {
      throw new SError(`Wrongly defined AST tree, Quantifier nodes not supposed to be scanned!`);
    }
    case "Alternative": {
      return tuple4(...safeMap(astNode.expressions, (n) => toMatchingArbitrary(n, constraints, flags))).map((vs) => safeJoin(vs, ""));
    }
    case "CharacterClass":
      if (astNode.negative) {
        const childrenArbitraries = safeMap(astNode.expressions, (n) => toMatchingArbitrary(n, constraints, flags));
        return defaultChar.filter((c) => safeEvery(childrenArbitraries, (arb) => !arb.canShrinkWithoutContext(c)));
      }
      return oneof(...safeMap(astNode.expressions, (n) => toMatchingArbitrary(n, constraints, flags)));
    case "ClassRange": {
      const min3 = astNode.from.codePoint;
      const max4 = astNode.to.codePoint;
      return integer({ min: min3, max: max4 }).map((n) => safeStringFromCodePoint3(n), (c) => {
        if (typeof c !== "string")
          throw new SError("Invalid type");
        if ([...c].length !== 1)
          throw new SError("Invalid length");
        return safeCharCodeAt(c, 0);
      });
    }
    case "Group": {
      return toMatchingArbitrary(astNode.expression, constraints, flags);
    }
    case "Disjunction": {
      const left3 = astNode.left !== null ? toMatchingArbitrary(astNode.left, constraints, flags) : constant2("");
      const right3 = astNode.right !== null ? toMatchingArbitrary(astNode.right, constraints, flags) : constant2("");
      return oneof(left3, right3);
    }
    case "Assertion": {
      if (astNode.kind === "^" || astNode.kind === "$") {
        if (flags.multiline) {
          if (astNode.kind === "^") {
            return oneof(constant2(""), tuple4(stringOf(defaultChar), constantFrom(...newLineChars)).map((t) => `${t[0]}${t[1]}`, (value) => {
              if (typeof value !== "string" || value.length === 0)
                throw new SError("Invalid type");
              return [safeSubstring(value, 0, value.length - 1), value[value.length - 1]];
            }));
          } else {
            return oneof(constant2(""), tuple4(constantFrom(...newLineChars), stringOf(defaultChar)).map((t) => `${t[0]}${t[1]}`, (value) => {
              if (typeof value !== "string" || value.length === 0)
                throw new SError("Invalid type");
              return [value[0], safeSubstring(value, 1)];
            }));
          }
        }
        return constant2("");
      }
      throw new SError(`Assertions of kind ${astNode.kind} not implemented yet!`);
    }
    case "Backreference": {
      throw new SError(`Backreference nodes not implemented yet!`);
    }
    default: {
      throw raiseUnsupportedASTNode2(astNode);
    }
  }
}
function stringMatching(regex, constraints = {}) {
  for (const flag of regex.flags) {
    if (flag !== "d" && flag !== "g" && flag !== "m" && flag !== "s" && flag !== "u") {
      throw new SError(`Unable to use "stringMatching" against a regex using the flag ${flag}`);
    }
  }
  const sanitizedConstraints = { size: constraints.size };
  const flags = { multiline: regex.multiline, dotAll: regex.dotAll };
  const regexRootToken = addMissingDotStar(tokenizeRegex(regex));
  return toMatchingArbitrary(regexRootToken, sanitizedConstraints, flags);
}
var safeStringFromCodePoint3, wordChars, digitChars, spaceChars, newLineChars, terminatorChars, newLineAndTerminatorChars, defaultChar;
var init_stringMatching = __esm(() => {
  init_globals();
  init_stringify();
  init_SanitizeRegexAst();
  init_TokenizeRegex();
  init_char();
  init_constant();
  init_constantFrom();
  init_integer();
  init_oneof();
  init_stringOf();
  init_tuple();
  safeStringFromCodePoint3 = String.fromCodePoint;
  wordChars = [..."abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"];
  digitChars = [..."0123456789"];
  spaceChars = [...` 	\r
\v\f`];
  newLineChars = [...`\r
`];
  terminatorChars = [..."\x1E\x15"];
  newLineAndTerminatorChars = [...newLineChars, ...terminatorChars];
  defaultChar = char();
});

// node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ZipIterableIterators.js
function initZippedValues(its) {
  const vs = [];
  for (let index = 0;index !== its.length; ++index) {
    vs.push(its[index].next());
  }
  return vs;
}
function nextZippedValues(its, vs) {
  for (let index = 0;index !== its.length; ++index) {
    vs[index] = its[index].next();
  }
}
function isDoneZippedValues(vs) {
  for (let index = 0;index !== vs.length; ++index) {
    if (vs[index].done) {
      return true;
    }
  }
  return false;
}
function* zipIterableIterators(...its) {
  const vs = initZippedValues(its);
  while (!isDoneZippedValues(vs)) {
    yield vs.map((v) => v.value);
    nextZippedValues(its, vs);
  }
}

// node_modules/fast-check/lib/esm/arbitrary/_internals/LimitedShrinkArbitrary.js
function* iotaFrom(startValue) {
  let value = startValue;
  while (true) {
    yield value;
    ++value;
  }
}
var LimitedShrinkArbitrary;
var init_LimitedShrinkArbitrary = __esm(() => {
  init_Arbitrary();
  init_Value();
  init_Stream();
  LimitedShrinkArbitrary = class LimitedShrinkArbitrary extends Arbitrary {
    constructor(arb, maxShrinks) {
      super();
      this.arb = arb;
      this.maxShrinks = maxShrinks;
    }
    generate(mrng, biasFactor) {
      const value = this.arb.generate(mrng, biasFactor);
      return this.valueMapper(value, 0);
    }
    canShrinkWithoutContext(value) {
      return this.arb.canShrinkWithoutContext(value);
    }
    shrink(value, context2) {
      if (this.isSafeContext(context2)) {
        return this.safeShrink(value, context2.originalContext, context2.length);
      }
      return this.safeShrink(value, undefined, 0);
    }
    safeShrink(value, originalContext, currentLength) {
      const remaining = this.maxShrinks - currentLength;
      if (remaining <= 0) {
        return Stream.nil();
      }
      return new Stream(zipIterableIterators(this.arb.shrink(value, originalContext), iotaFrom(currentLength + 1))).take(remaining).map((valueAndLength) => this.valueMapper(valueAndLength[0], valueAndLength[1]));
    }
    valueMapper(v, newLength) {
      const context2 = { originalContext: v.context, length: newLength };
      return new Value(v.value, context2);
    }
    isSafeContext(context2) {
      return context2 != null && typeof context2 === "object" && "originalContext" in context2 && "length" in context2;
    }
  };
});

// node_modules/fast-check/lib/esm/arbitrary/limitShrink.js
function limitShrink(arbitrary, maxShrinks) {
  return new LimitedShrinkArbitrary(arbitrary, maxShrinks);
}
var init_limitShrink = __esm(() => {
  init_LimitedShrinkArbitrary();
});

// node_modules/fast-check/lib/esm/fast-check-default.js
var __type2 = "module", __version2 = "3.23.2", __commitHash2 = "a4a600eaa08c833707067a877db144289a724b91";
var init_fast_check_default = __esm(() => {
  init_Pre();
  init_AsyncProperty();
  init_Property();
  init_Runner();
  init_Sampler();
  init_gen();
  init_array();
  init_bigInt();
  init_bigIntN();
  init_bigUint();
  init_bigUintN();
  init_boolean();
  init_falsy();
  init_ascii();
  init_base64();
  init_char();
  init_char16bits();
  init_fullUnicode();
  init_hexa();
  init_unicode();
  init_constant();
  init_constantFrom();
  init_context();
  init_date();
  init_clone();
  init_dictionary();
  init_emailAddress();
  init_double();
  init_float();
  init_compareBooleanFunc();
  init_compareFunc();
  init_func();
  init_domain();
  init_integer();
  init_maxSafeInteger();
  init_maxSafeNat();
  init_nat();
  init_ipV4();
  init_ipV4Extended();
  init_ipV6();
  init_letrec();
  init_lorem();
  init_mapToConstant();
  init_memo();
  init_mixedCase();
  init_object();
  init_json();
  init_anything();
  init_unicodeJsonValue();
  init_jsonValue();
  init_unicodeJson();
  init_oneof();
  init_option2();
  init_record();
  init_uniqueArray();
  init_infiniteStream();
  init_asciiString();
  init_base64String();
  init_fullUnicodeString();
  init_hexaString();
  init_string();
  init_string16bits();
  init_stringOf();
  init_unicodeString();
  init_subarray();
  init_shuffledSubarray();
  init_tuple();
  init_ulid();
  init_uuid();
  init_uuidV();
  init_webAuthority();
  init_webFragments();
  init_webPath();
  init_webQueryParameters();
  init_webSegment();
  init_webUrl();
  init_commands();
  init_ModelRunner();
  init_Random();
  init_GlobalParameters();
  init_VerbosityLevel();
  init_ExecutionStatus();
  init_symbols();
  init_Stream();
  init_hash();
  init_stringify();
  init_scheduler();
  init_RunDetailsFormatter();
  init_PreconditionFailure();
  init_int8Array();
  init_int16Array();
  init_int32Array();
  init_uint8Array();
  init_uint8ClampedArray();
  init_uint16Array();
  init_uint32Array();
  init_float32Array();
  init_float64Array();
  init_sparseArray();
  init_Arbitrary();
  init_Value();
  init_DepthContext();
  init_bigInt64Array();
  init_bigUint64Array();
  init_stringMatching();
  init_limitShrink();
});

// node_modules/fast-check/lib/esm/fast-check.js
var init_fast_check = __esm(() => {
  init_fast_check_default();
});

// node_modules/effect/dist/esm/FastCheck.js
var exports_FastCheck = {};
__export(exports_FastCheck, {
  webUrl: () => webUrl,
  webSegment: () => webSegment,
  webQueryParameters: () => webQueryParameters,
  webPath: () => webPath,
  webFragments: () => webFragments,
  webAuthority: () => webAuthority,
  uuidV: () => uuidV,
  uuid: () => uuid,
  uniqueArray: () => uniqueArray,
  unicodeString: () => unicodeString,
  unicodeJsonValue: () => unicodeJsonValue,
  unicodeJson: () => unicodeJson,
  unicode: () => unicode,
  ulid: () => ulid,
  uint8ClampedArray: () => uint8ClampedArray,
  uint8Array: () => uint8Array,
  uint32Array: () => uint32Array,
  uint16Array: () => uint16Array,
  tuple: () => tuple4,
  toStringMethod: () => toStringMethod,
  subarray: () => subarray,
  stringify: () => stringify,
  stringOf: () => stringOf,
  stringMatching: () => stringMatching,
  string16bits: () => string16bits,
  string: () => string4,
  stream: () => stream,
  statistics: () => statistics,
  sparseArray: () => sparseArray,
  shuffledSubarray: () => shuffledSubarray,
  schedulerFor: () => schedulerFor,
  scheduler: () => scheduler,
  scheduledModelRun: () => scheduledModelRun,
  sample: () => sample,
  resetConfigureGlobal: () => resetConfigureGlobal,
  record: () => record,
  readConfigureGlobal: () => readConfigureGlobal,
  property: () => property,
  pre: () => pre,
  option: () => option,
  oneof: () => oneof,
  object: () => object,
  noShrink: () => noShrink,
  noBias: () => noBias,
  nat: () => nat,
  modelRun: () => modelRun,
  mixedCase: () => mixedCase,
  memo: () => memo,
  maxSafeNat: () => maxSafeNat,
  maxSafeInteger: () => maxSafeInteger,
  mapToConstant: () => mapToConstant,
  lorem: () => lorem,
  limitShrink: () => limitShrink,
  letrec: () => letrec,
  jsonValue: () => jsonValue,
  json: () => json,
  ipV6: () => ipV6,
  ipV4Extended: () => ipV4Extended,
  ipV4: () => ipV4,
  integer: () => integer,
  int8Array: () => int8Array,
  int32Array: () => int32Array,
  int16Array: () => int16Array,
  infiniteStream: () => infiniteStream,
  hexaString: () => hexaString,
  hexa: () => hexa,
  hash: () => hash2,
  hasToStringMethod: () => hasToStringMethod,
  hasCloneMethod: () => hasCloneMethod,
  hasAsyncToStringMethod: () => hasAsyncToStringMethod,
  getDepthContextFor: () => getDepthContextFor,
  gen: () => gen3,
  func: () => func,
  fullUnicodeString: () => fullUnicodeString,
  fullUnicode: () => fullUnicode,
  float64Array: () => float64Array,
  float32Array: () => float32Array,
  float: () => float,
  falsy: () => falsy,
  emailAddress: () => emailAddress,
  double: () => double,
  domain: () => domain,
  dictionary: () => dictionary,
  defaultReportMessage: () => defaultReportMessage,
  date: () => date,
  createDepthIdentifier: () => createDepthIdentifier,
  context: () => context,
  constantFrom: () => constantFrom,
  constant: () => constant2,
  configureGlobal: () => configureGlobal,
  compareFunc: () => compareFunc,
  compareBooleanFunc: () => compareBooleanFunc,
  commands: () => commands,
  cloneMethod: () => cloneMethod,
  cloneIfNeeded: () => cloneIfNeeded,
  clone: () => clone,
  check: () => check,
  char16bits: () => char16bits,
  char: () => char,
  boolean: () => boolean3,
  bigUintN: () => bigUintN,
  bigUint64Array: () => bigUint64Array,
  bigUint: () => bigUint,
  bigIntN: () => bigIntN,
  bigInt64Array: () => bigInt64Array,
  bigInt: () => bigInt,
  base64String: () => base64String,
  base64: () => base64,
  asyncToStringMethod: () => asyncToStringMethod,
  asyncStringify: () => asyncStringify,
  asyncProperty: () => asyncProperty,
  asyncModelRun: () => asyncModelRun,
  asyncDefaultReportMessage: () => asyncDefaultReportMessage,
  assert: () => assert,
  asciiString: () => asciiString,
  ascii: () => ascii,
  array: () => array4,
  anything: () => anything,
  __version: () => __version2,
  __type: () => __type2,
  __commitHash: () => __commitHash2,
  VerbosityLevel: () => VerbosityLevel,
  Value: () => Value,
  Stream: () => Stream,
  Random: () => Random,
  PreconditionFailure: () => PreconditionFailure,
  ExecutionStatus: () => ExecutionStatus,
  Arbitrary: () => Arbitrary
});
var init_FastCheck = __esm(() => {
  init_fast_check();
});

// node_modules/effect/dist/esm/internal/schema/util.js
var getKeysForIndexSignature = (input, parameter) => {
  switch (parameter._tag) {
    case "StringKeyword":
    case "TemplateLiteral":
      return Object.keys(input);
    case "SymbolKeyword":
      return Object.getOwnPropertySymbols(input);
    case "Refinement":
      return getKeysForIndexSignature(input, parameter.from);
  }
}, ownKeys = (o) => Object.keys(o).concat(Object.getOwnPropertySymbols(o)), memoizeThunk = (f) => {
  let done = false;
  let a;
  return () => {
    if (done) {
      return a;
    }
    a = f();
    done = true;
    return a;
  };
}, formatDate = (date2) => {
  try {
    return date2.toISOString();
  } catch (e) {
    return String(date2);
  }
}, formatUnknown = (u, checkCircular = true) => {
  if (Array.isArray(u)) {
    return `[${u.map((i2) => formatUnknown(i2, checkCircular)).join(",")}]`;
  }
  if (isDate(u)) {
    return formatDate(u);
  }
  if (hasProperty(u, "toString") && isFunction2(u["toString"]) && u["toString"] !== Object.prototype.toString) {
    return u["toString"]();
  }
  if (isString2(u)) {
    return JSON.stringify(u);
  }
  if (isNumber2(u) || u == null || isBoolean2(u) || isSymbol(u)) {
    return String(u);
  }
  if (isBigInt(u)) {
    return String(u) + "n";
  }
  if (isIterable(u)) {
    return `${u.constructor.name}(${formatUnknown(Array.from(u), checkCircular)})`;
  }
  try {
    if (checkCircular) {
      JSON.stringify(u);
    }
    const pojo = `{${ownKeys(u).map((k) => `${isString2(k) ? JSON.stringify(k) : String(k)}:${formatUnknown(u[k], false)}`).join(",")}}`;
    const name = u.constructor.name;
    return u.constructor !== Object.prototype.constructor ? `${name}(${pojo})` : pojo;
  } catch (e) {
    return "<circular structure>";
  }
}, formatPropertyKey = (name) => typeof name === "string" ? JSON.stringify(name) : String(name), isNonEmpty = (x2) => Array.isArray(x2), isSingle = (x2) => !Array.isArray(x2), formatPathKey = (key) => `[${formatPropertyKey(key)}]`, formatPath = (path) => isNonEmpty(path) ? path.map(formatPathKey).join("") : formatPathKey(path);
var init_util = __esm(() => {
  init_Predicate();
});

// node_modules/effect/dist/esm/internal/schema/errors.js
var getErrorMessage = (reason, details, path, ast) => {
  let out = reason;
  if (path && isNonEmptyReadonlyArray(path)) {
    out += `
at path: ${formatPath(path)}`;
  }
  if (details !== undefined) {
    out += `
details: ${details}`;
  }
  if (ast) {
    out += `
schema (${ast._tag}): ${ast}`;
  }
  return out;
}, getInvalidArgumentErrorMessage = (details) => getErrorMessage("Invalid Argument", details), getUnsupportedSchemaErrorMessage = (details, path, ast) => getErrorMessage("Unsupported schema", details, path, ast), getMissingAnnotationErrorMessage = (details, path, ast) => getErrorMessage("Missing annotation", details, path, ast), getArbitraryMissingAnnotationErrorMessage = (path, ast) => getMissingAnnotationErrorMessage(`Generating an Arbitrary for this schema requires an "arbitrary" annotation`, path, ast), getArbitraryEmptyEnumErrorMessage = (path) => getErrorMessage("Empty Enums schema", "Generating an Arbitrary for this schema requires at least one enum", path), getEquivalenceUnsupportedErrorMessage = (ast, path) => getUnsupportedSchemaErrorMessage("Cannot build an Equivalence", path, ast), getJSONSchemaMissingAnnotationErrorMessage = (path, ast) => getMissingAnnotationErrorMessage(`Generating a JSON Schema for this schema requires a "jsonSchema" annotation`, path, ast), getJSONSchemaMissingIdentifierAnnotationErrorMessage = (path, ast) => getMissingAnnotationErrorMessage(`Generating a JSON Schema for this schema requires an "identifier" annotation`, path, ast), getJSONSchemaUnsupportedPostRestElementsErrorMessage = (path) => getErrorMessage("Generating a JSON Schema for post-rest elements is not currently supported. You're welcome to contribute by submitting a Pull Request", undefined, path), getJSONSchemaUnsupportedKeyErrorMessage = (key, path) => getErrorMessage("Unsupported key", `Cannot encode ${formatPropertyKey(key)} key to JSON Schema`, path), getPrettyMissingAnnotationErrorMessage = (path, ast) => getMissingAnnotationErrorMessage(`Generating a Pretty for this schema requires a "pretty" annotation`, path, ast), getPrettyNeverErrorMessage = "Cannot pretty print a `never` value", getPrettyNoMatchingSchemaErrorMessage = (actual, path, ast) => getErrorMessage("Unexpected Error", `Cannot find a matching schema for ${formatUnknown(actual)}`, path, ast), getSchemaExtendErrorMessage = (x2, y, path) => getErrorMessage("Unsupported schema or overlapping types", `cannot extend ${x2} with ${y}`, path), getSchemaUnsupportedLiteralSpanErrorMessage = (ast) => getErrorMessage("Unsupported template literal span", undefined, undefined, ast), getASTUnsupportedSchemaErrorMessage = (ast) => getUnsupportedSchemaErrorMessage(undefined, undefined, ast), getASTUnsupportedKeySchemaErrorMessage = (ast) => getErrorMessage("Unsupported key schema", undefined, undefined, ast), getASTUnsupportedLiteralErrorMessage = (literal) => getErrorMessage("Unsupported literal", `literal value: ${formatUnknown(literal)}`), getASTDuplicateIndexSignatureErrorMessage = (type) => getErrorMessage("Duplicate index signature", `${type} index signature`), getASTIndexSignatureParameterErrorMessage, getASTRequiredElementFollowinAnOptionalElementErrorMessage, getASTDuplicatePropertySignatureTransformationErrorMessage = (key) => getErrorMessage("Duplicate property signature transformation", `Duplicate key ${formatUnknown(key)}`), getASTUnsupportedRenameSchemaErrorMessage = (ast) => getUnsupportedSchemaErrorMessage(undefined, undefined, ast), getASTDuplicatePropertySignatureErrorMessage = (key) => getErrorMessage("Duplicate property signature", `Duplicate key ${formatUnknown(key)}`);
var init_errors = __esm(() => {
  init_Array();
  init_util();
  getASTIndexSignatureParameterErrorMessage = /* @__PURE__ */ getErrorMessage("Unsupported index signature parameter", "An index signature parameter type must be `string`, `symbol`, a template literal type or a refinement of the previous types");
  getASTRequiredElementFollowinAnOptionalElementErrorMessage = /* @__PURE__ */ getErrorMessage("Invalid element", "A required element cannot follow an optional element. ts(1257)");
});

// node_modules/effect/dist/esm/internal/schema/schemaId.js
var DateFromSelfSchemaId, GreaterThanSchemaId, GreaterThanOrEqualToSchemaId, LessThanSchemaId, LessThanOrEqualToSchemaId, IntSchemaId, NonNaNSchemaId, FiniteSchemaId, JsonNumberSchemaId, BetweenSchemaId, GreaterThanBigintSchemaId, GreaterThanOrEqualToBigIntSchemaId, LessThanBigIntSchemaId, LessThanOrEqualToBigIntSchemaId, BetweenBigintSchemaId, MinLengthSchemaId, MaxLengthSchemaId, LengthSchemaId, MinItemsSchemaId, MaxItemsSchemaId, ItemsCountSchemaId;
var init_schemaId = __esm(() => {
  DateFromSelfSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/DateFromSelf");
  GreaterThanSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/GreaterThan");
  GreaterThanOrEqualToSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/GreaterThanOrEqualTo");
  LessThanSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/LessThan");
  LessThanOrEqualToSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/LessThanOrEqualTo");
  IntSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Int");
  NonNaNSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/NonNaN");
  FiniteSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Finite");
  JsonNumberSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/JsonNumber");
  BetweenSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Between");
  GreaterThanBigintSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/GreaterThanBigint");
  GreaterThanOrEqualToBigIntSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/GreaterThanOrEqualToBigint");
  LessThanBigIntSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/LessThanBigint");
  LessThanOrEqualToBigIntSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/LessThanOrEqualToBigint");
  BetweenBigintSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/BetweenBigint");
  MinLengthSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/MinLength");
  MaxLengthSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/MaxLength");
  LengthSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Length");
  MinItemsSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/MinItems");
  MaxItemsSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/MaxItems");
  ItemsCountSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/ItemsCount");
});

// node_modules/effect/dist/esm/Number.js
var exports_Number = {};
__export(exports_Number, {
  unsafeDivide: () => unsafeDivide,
  sumAll: () => sumAll,
  sum: () => sum,
  subtract: () => subtract,
  sign: () => sign,
  round: () => round,
  remainder: () => remainder,
  parse: () => parse2,
  nextPow2: () => nextPow2,
  negate: () => negate,
  multiplyAll: () => multiplyAll,
  multiply: () => multiply,
  min: () => min3,
  max: () => max4,
  lessThanOrEqualTo: () => lessThanOrEqualTo2,
  lessThan: () => lessThan2,
  isNumber: () => isNumber3,
  increment: () => increment,
  greaterThanOrEqualTo: () => greaterThanOrEqualTo2,
  greaterThan: () => greaterThan2,
  divide: () => divide,
  decrement: () => decrement,
  clamp: () => clamp3,
  between: () => between2,
  Order: () => Order,
  Equivalence: () => Equivalence
});
var isNumber3, negate = (n) => multiply(n, -1), sum, sumAll = (collection) => reduce(collection, 0, sum), subtract, multiply, multiplyAll = (collection) => {
  let out = 1;
  for (const n of collection) {
    if (n === 0) {
      return 0;
    }
    out *= n;
  }
  return out;
}, divide, unsafeDivide, increment = (n) => sum(n, 1), decrement = (n) => subtract(n, 1), Equivalence, Order, lessThan2, lessThanOrEqualTo2, greaterThan2, greaterThanOrEqualTo2, between2, clamp3, min3, max4, sign = (n) => Order(n, 0), remainder, nextPow2 = (n) => {
  const nextPow = Math.ceil(Math.log(n) / Math.log(2));
  return Math.max(Math.pow(2, nextPow), 2);
}, parse2 = (s) => {
  if (s === "NaN") {
    return some2(NaN);
  }
  if (s === "Infinity") {
    return some2(Infinity);
  }
  if (s === "-Infinity") {
    return some2(-Infinity);
  }
  if (s.trim() === "") {
    return none;
  }
  const n = Number(s);
  return Number.isNaN(n) ? none : some2(n);
}, round;
var init_Number = __esm(() => {
  init_Equivalence();
  init_Function();
  init_option();
  init_Iterable();
  init_Order();
  init_Predicate();
  isNumber3 = isNumber2;
  sum = /* @__PURE__ */ dual(2, (self, that) => self + that);
  subtract = /* @__PURE__ */ dual(2, (minuend, subtrahend) => minuend - subtrahend);
  multiply = /* @__PURE__ */ dual(2, (multiplier, multiplicand) => multiplier * multiplicand);
  divide = /* @__PURE__ */ dual(2, (dividend, divisor) => divisor === 0 ? none : some2(dividend / divisor));
  unsafeDivide = /* @__PURE__ */ dual(2, (dividend, divisor) => dividend / divisor);
  Equivalence = number;
  Order = number3;
  lessThan2 = /* @__PURE__ */ lessThan(Order);
  lessThanOrEqualTo2 = /* @__PURE__ */ lessThanOrEqualTo(Order);
  greaterThan2 = /* @__PURE__ */ greaterThan(Order);
  greaterThanOrEqualTo2 = /* @__PURE__ */ greaterThanOrEqualTo(Order);
  between2 = /* @__PURE__ */ between(Order);
  clamp3 = /* @__PURE__ */ clamp(Order);
  min3 = /* @__PURE__ */ min(Order);
  max4 = /* @__PURE__ */ max2(Order);
  remainder = /* @__PURE__ */ dual(2, (dividend, divisor) => {
    const selfDecCount = (dividend.toString().split(".")[1] || "").length;
    const divisorDecCount = (divisor.toString().split(".")[1] || "").length;
    const decCount = selfDecCount > divisorDecCount ? selfDecCount : divisorDecCount;
    const selfInt = parseInt(dividend.toFixed(decCount).replace(".", ""));
    const divisorInt = parseInt(divisor.toFixed(decCount).replace(".", ""));
    return selfInt % divisorInt / Math.pow(10, decCount);
  });
  round = /* @__PURE__ */ dual(2, (self, precision) => {
    const factor = Math.pow(10, precision);
    return Math.round(self * factor) / factor;
  });
});

// node_modules/effect/dist/esm/RegExp.js
var exports_RegExp = {};
__export(exports_RegExp, {
  isRegExp: () => isRegExp2,
  escape: () => escape
});
var isRegExp2, escape = (string5) => string5.replace(/[/\\^$*+?.()|[\]{}]/g, "\\$&");
var init_RegExp = __esm(() => {
  init_Predicate();
  isRegExp2 = isRegExp;
});

// node_modules/effect/dist/esm/SchemaAST.js
var exports_SchemaAST = {};
__export(exports_SchemaAST, {
  voidKeyword: () => voidKeyword,
  unknownKeyword: () => unknownKeyword,
  unify: () => unify,
  undefinedKeyword: () => undefinedKeyword,
  typeAST: () => typeAST,
  symbolKeyword: () => symbolKeyword,
  stringKeyword: () => stringKeyword,
  required: () => required,
  rename: () => rename,
  record: () => record2,
  pruneUndefined: () => pruneUndefined,
  pickAnnotations: () => pickAnnotations,
  pick: () => pick,
  partial: () => partial,
  orUndefined: () => orUndefined,
  omitAnnotations: () => omitAnnotations,
  omit: () => omit,
  objectKeyword: () => objectKeyword,
  numberKeyword: () => numberKeyword,
  null: () => $null,
  neverKeyword: () => neverKeyword,
  mutable: () => mutable,
  mapMembers: () => mapMembers,
  keyof: () => keyof,
  isVoidKeyword: () => isVoidKeyword,
  isUnknownKeyword: () => isUnknownKeyword,
  isUniqueSymbol: () => isUniqueSymbol,
  isUnion: () => isUnion,
  isUndefinedKeyword: () => isUndefinedKeyword,
  isTypeLiteralTransformation: () => isTypeLiteralTransformation,
  isTypeLiteral: () => isTypeLiteral,
  isTupleType: () => isTupleType,
  isTransformation: () => isTransformation,
  isTemplateLiteral: () => isTemplateLiteral,
  isSymbolKeyword: () => isSymbolKeyword,
  isSuspend: () => isSuspend,
  isStringKeyword: () => isStringKeyword,
  isRefinement: () => isRefinement,
  isParameter: () => isParameter,
  isObjectKeyword: () => isObjectKeyword,
  isNumberKeyword: () => isNumberKeyword,
  isNeverKeyword: () => isNeverKeyword,
  isMembers: () => isMembers,
  isLiteral: () => isLiteral,
  isFinalTransformation: () => isFinalTransformation,
  isEnums: () => isEnums,
  isDeclaration: () => isDeclaration,
  isComposeTransformation: () => isComposeTransformation,
  isBooleanKeyword: () => isBooleanKeyword,
  isBigIntKeyword: () => isBigIntKeyword,
  isAnyKeyword: () => isAnyKeyword,
  hasStableFilter: () => hasStableFilter,
  getTransformationFrom: () => getTransformationFrom,
  getTitleAnnotation: () => getTitleAnnotation,
  getTemplateLiteralRegExp: () => getTemplateLiteralRegExp,
  getTemplateLiteralCapturingRegExp: () => getTemplateLiteralCapturingRegExp,
  getSurrogateAnnotation: () => getSurrogateAnnotation,
  getSchemaIdAnnotation: () => getSchemaIdAnnotation,
  getPropertySignatures: () => getPropertySignatures,
  getPropertyKeyIndexedAccess: () => getPropertyKeyIndexedAccess,
  getParseOptionsAnnotation: () => getParseOptionsAnnotation,
  getParseIssueTitleAnnotation: () => getParseIssueTitleAnnotation,
  getNumberIndexedAccess: () => getNumberIndexedAccess,
  getMissingMessageAnnotation: () => getMissingMessageAnnotation,
  getMessageAnnotation: () => getMessageAnnotation,
  getJSONSchemaAnnotation: () => getJSONSchemaAnnotation,
  getJSONIdentifierAnnotation: () => getJSONIdentifierAnnotation,
  getJSONIdentifier: () => getJSONIdentifier,
  getIdentifierAnnotation: () => getIdentifierAnnotation,
  getExamplesAnnotation: () => getExamplesAnnotation,
  getEncodedParameter: () => getEncodedParameter,
  getDocumentationAnnotation: () => getDocumentationAnnotation,
  getDescriptionAnnotation: () => getDescriptionAnnotation,
  getDefaultAnnotation: () => getDefaultAnnotation,
  getDecodingFallbackAnnotation: () => getDecodingFallbackAnnotation,
  getConcurrencyAnnotation: () => getConcurrencyAnnotation,
  getCompiler: () => getCompiler,
  getBrandAnnotation: () => getBrandAnnotation,
  getBatchingAnnotation: () => getBatchingAnnotation,
  getAutoTitleAnnotation: () => getAutoTitleAnnotation,
  getAnnotation: () => getAnnotation,
  flatten: () => flatten4,
  equals: () => equals2,
  encodedBoundAST: () => encodedBoundAST,
  encodedAST: () => encodedAST,
  defaultParseOption: () => defaultParseOption,
  composeTransformation: () => composeTransformation,
  compose: () => compose3,
  booleanKeyword: () => booleanKeyword,
  bigIntKeyword: () => bigIntKeyword,
  anyKeyword: () => anyKeyword,
  annotations: () => annotations,
  VoidKeyword: () => VoidKeyword,
  UnknownKeyword: () => UnknownKeyword,
  UniqueSymbol: () => UniqueSymbol,
  Union: () => Union,
  UndefinedKeyword: () => UndefinedKeyword,
  TypeLiteralTransformation: () => TypeLiteralTransformation,
  TypeLiteral: () => TypeLiteral,
  Type: () => Type,
  TupleType: () => TupleType,
  Transformation: () => Transformation,
  TitleAnnotationId: () => TitleAnnotationId,
  TemplateLiteralSpan: () => TemplateLiteralSpan,
  TemplateLiteral: () => TemplateLiteral,
  SymbolKeyword: () => SymbolKeyword,
  Suspend: () => Suspend,
  SurrogateAnnotationId: () => SurrogateAnnotationId,
  StringKeyword: () => StringKeyword,
  StableFilterAnnotationId: () => StableFilterAnnotationId,
  SchemaIdAnnotationId: () => SchemaIdAnnotationId,
  Refinement: () => Refinement,
  PropertySignatureTransformation: () => PropertySignatureTransformation,
  PropertySignature: () => PropertySignature,
  PrettyAnnotationId: () => PrettyAnnotationId,
  ParseOptionsAnnotationId: () => ParseOptionsAnnotationId,
  ParseJsonSchemaId: () => ParseJsonSchemaId,
  ParseIssueTitleAnnotationId: () => ParseIssueTitleAnnotationId,
  OptionalType: () => OptionalType,
  ObjectKeyword: () => ObjectKeyword,
  NumberKeyword: () => NumberKeyword,
  NeverKeyword: () => NeverKeyword,
  MissingMessageAnnotationId: () => MissingMessageAnnotationId,
  MessageAnnotationId: () => MessageAnnotationId,
  Literal: () => Literal,
  JSONSchemaAnnotationId: () => JSONSchemaAnnotationId,
  JSONIdentifierAnnotationId: () => JSONIdentifierAnnotationId,
  IndexSignature: () => IndexSignature,
  IdentifierAnnotationId: () => IdentifierAnnotationId,
  FinalTransformation: () => FinalTransformation,
  ExamplesAnnotationId: () => ExamplesAnnotationId,
  EquivalenceAnnotationId: () => EquivalenceAnnotationId,
  Enums: () => Enums,
  DocumentationAnnotationId: () => DocumentationAnnotationId,
  DescriptionAnnotationId: () => DescriptionAnnotationId,
  DefaultAnnotationId: () => DefaultAnnotationId,
  DecodingFallbackAnnotationId: () => DecodingFallbackAnnotationId,
  Declaration: () => Declaration,
  ConcurrencyAnnotationId: () => ConcurrencyAnnotationId,
  ComposeTransformation: () => ComposeTransformation,
  BrandAnnotationId: () => BrandAnnotationId,
  BooleanKeyword: () => BooleanKeyword,
  BigIntKeyword: () => BigIntKeyword,
  BatchingAnnotationId: () => BatchingAnnotationId,
  AutoTitleAnnotationId: () => AutoTitleAnnotationId,
  ArbitraryAnnotationId: () => ArbitraryAnnotationId,
  AnyKeyword: () => AnyKeyword
});

class Declaration {
  typeParameters;
  decodeUnknown;
  encodeUnknown;
  annotations;
  _tag = "Declaration";
  constructor(typeParameters, decodeUnknown, encodeUnknown, annotations = {}) {
    this.typeParameters = typeParameters;
    this.decodeUnknown = decodeUnknown;
    this.encodeUnknown = encodeUnknown;
    this.annotations = annotations;
  }
  toString() {
    return getOrElse2(getExpected(this), () => "<declaration schema>");
  }
  toJSON() {
    return {
      _tag: this._tag,
      typeParameters: this.typeParameters.map((ast) => ast.toJSON()),
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class Literal {
  literal;
  annotations;
  _tag = "Literal";
  constructor(literal, annotations = {}) {
    this.literal = literal;
    this.annotations = annotations;
  }
  toString() {
    return getOrElse2(getExpected(this), () => formatUnknown(this.literal));
  }
  toJSON() {
    return {
      _tag: this._tag,
      literal: isBigInt(this.literal) ? String(this.literal) : this.literal,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class UniqueSymbol {
  symbol;
  annotations;
  _tag = "UniqueSymbol";
  constructor(symbol4, annotations = {}) {
    this.symbol = symbol4;
    this.annotations = annotations;
  }
  toString() {
    return getOrElse2(getExpected(this), () => formatUnknown(this.symbol));
  }
  toJSON() {
    return {
      _tag: this._tag,
      symbol: String(this.symbol),
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class UndefinedKeyword {
  annotations;
  _tag = "UndefinedKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class VoidKeyword {
  annotations;
  _tag = "VoidKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class NeverKeyword {
  annotations;
  _tag = "NeverKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class UnknownKeyword {
  annotations;
  _tag = "UnknownKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class AnyKeyword {
  annotations;
  _tag = "AnyKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class StringKeyword {
  annotations;
  _tag = "StringKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class NumberKeyword {
  annotations;
  _tag = "NumberKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class BooleanKeyword {
  annotations;
  _tag = "BooleanKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class BigIntKeyword {
  annotations;
  _tag = "BigIntKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class SymbolKeyword {
  annotations;
  _tag = "SymbolKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class ObjectKeyword {
  annotations;
  _tag = "ObjectKeyword";
  constructor(annotations = {}) {
    this.annotations = annotations;
  }
  toString() {
    return formatKeyword(this);
  }
  toJSON() {
    return {
      _tag: this._tag,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class Enums {
  enums;
  annotations;
  _tag = "Enums";
  constructor(enums, annotations = {}) {
    this.enums = enums;
    this.annotations = annotations;
  }
  toString() {
    return getOrElse2(getExpected(this), () => `<enum ${this.enums.length} value(s): ${this.enums.map(([_, value]) => JSON.stringify(value)).join(" | ")}>`);
  }
  toJSON() {
    return {
      _tag: this._tag,
      enums: this.enums,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class TemplateLiteralSpan {
  literal;
  type;
  constructor(type, literal) {
    this.literal = literal;
    if (isTemplateLiteralSpanType(type)) {
      this.type = type;
    } else {
      throw new Error(getSchemaUnsupportedLiteralSpanErrorMessage(type));
    }
  }
  toString() {
    return templateLiteralSpanTypeToString(this.type) + this.literal;
  }
  toJSON() {
    return {
      type: this.type.toJSON(),
      literal: this.literal
    };
  }
}

class TemplateLiteral {
  head;
  spans;
  annotations;
  _tag = "TemplateLiteral";
  constructor(head3, spans, annotations = {}) {
    this.head = head3;
    this.spans = spans;
    this.annotations = annotations;
  }
  toString() {
    return getOrElse2(getExpected(this), () => formatTemplateLiteral(this));
  }
  toJSON() {
    return {
      _tag: this._tag,
      head: this.head,
      spans: this.spans.map((span2) => span2.toJSON()),
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class Type {
  type;
  annotations;
  constructor(type, annotations = {}) {
    this.type = type;
    this.annotations = annotations;
  }
  toJSON() {
    return {
      type: this.type.toJSON(),
      annotations: toJSONAnnotations(this.annotations)
    };
  }
  toString() {
    return String(this.type);
  }
}

class TupleType {
  elements;
  rest;
  isReadonly;
  annotations;
  _tag = "TupleType";
  constructor(elements, rest, isReadonly, annotations = {}) {
    this.elements = elements;
    this.rest = rest;
    this.isReadonly = isReadonly;
    this.annotations = annotations;
    let hasOptionalElement = false;
    let hasIllegalRequiredElement = false;
    for (const e of elements) {
      if (e.isOptional) {
        hasOptionalElement = true;
      } else if (hasOptionalElement) {
        hasIllegalRequiredElement = true;
        break;
      }
    }
    if (hasIllegalRequiredElement || hasOptionalElement && rest.length > 1) {
      throw new Error(getASTRequiredElementFollowinAnOptionalElementErrorMessage);
    }
  }
  toString() {
    return getOrElse2(getExpected(this), () => formatTuple(this));
  }
  toJSON() {
    return {
      _tag: this._tag,
      elements: this.elements.map((e) => e.toJSON()),
      rest: this.rest.map((ast) => ast.toJSON()),
      isReadonly: this.isReadonly,
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class IndexSignature {
  type;
  isReadonly;
  parameter;
  constructor(parameter, type, isReadonly) {
    this.type = type;
    this.isReadonly = isReadonly;
    if (isParameter(parameter)) {
      this.parameter = parameter;
    } else {
      throw new Error(getASTIndexSignatureParameterErrorMessage);
    }
  }
  toString() {
    return (this.isReadonly ? "readonly " : "") + `[x: ${this.parameter}]: ${this.type}`;
  }
  toJSON() {
    return {
      parameter: this.parameter.toJSON(),
      type: this.type.toJSON(),
      isReadonly: this.isReadonly
    };
  }
}

class TypeLiteral {
  annotations;
  _tag = "TypeLiteral";
  propertySignatures;
  indexSignatures;
  constructor(propertySignatures, indexSignatures, annotations = {}) {
    this.annotations = annotations;
    const keys2 = {};
    for (let i2 = 0;i2 < propertySignatures.length; i2++) {
      const name = propertySignatures[i2].name;
      if (Object.prototype.hasOwnProperty.call(keys2, name)) {
        throw new Error(getASTDuplicatePropertySignatureErrorMessage(name));
      }
      keys2[name] = null;
    }
    const parameters = {
      string: false,
      symbol: false
    };
    for (let i2 = 0;i2 < indexSignatures.length; i2++) {
      const encodedParameter = getEncodedParameter(indexSignatures[i2].parameter);
      if (isStringKeyword(encodedParameter)) {
        if (parameters.string) {
          throw new Error(getASTDuplicateIndexSignatureErrorMessage("string"));
        }
        parameters.string = true;
      } else if (isSymbolKeyword(encodedParameter)) {
        if (parameters.symbol) {
          throw new Error(getASTDuplicateIndexSignatureErrorMessage("symbol"));
        }
        parameters.symbol = true;
      }
    }
    this.propertySignatures = propertySignatures;
    this.indexSignatures = indexSignatures;
  }
  toString() {
    return getOrElse2(getExpected(this), () => formatTypeLiteral(this));
  }
  toJSON() {
    return {
      _tag: this._tag,
      propertySignatures: this.propertySignatures.map((ps) => ps.toJSON()),
      indexSignatures: this.indexSignatures.map((ps) => ps.toJSON()),
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class Union {
  types;
  annotations;
  static make = (types, annotations) => {
    return isMembers(types) ? new Union(types, annotations) : types.length === 1 ? types[0] : neverKeyword;
  };
  static unify = (candidates, annotations) => {
    return Union.make(unify(flatten4(candidates)), annotations);
  };
  _tag = "Union";
  constructor(types, annotations = {}) {
    this.types = types;
    this.annotations = annotations;
  }
  toString() {
    return getOrElse2(getExpected(this), () => this.types.map(String).join(" | "));
  }
  toJSON() {
    return {
      _tag: this._tag,
      types: this.types.map((ast) => ast.toJSON()),
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class Suspend {
  f;
  annotations;
  _tag = "Suspend";
  constructor(f, annotations = {}) {
    this.f = f;
    this.annotations = annotations;
    this.f = memoizeThunk(f);
  }
  toString() {
    return getExpected(this).pipe(orElse2(() => flatMap2(liftThrowable(this.f)(), (ast) => getExpected(ast))), getOrElse2(() => "<suspended schema>"));
  }
  toJSON() {
    const ast = this.f();
    let out = toJSONMemoMap.get(ast);
    if (out) {
      return out;
    }
    toJSONMemoMap.set(ast, {
      _tag: this._tag
    });
    out = {
      _tag: this._tag,
      ast: ast.toJSON(),
      annotations: toJSONAnnotations(this.annotations)
    };
    toJSONMemoMap.set(ast, out);
    return out;
  }
}

class Refinement {
  from;
  filter;
  annotations;
  _tag = "Refinement";
  constructor(from, filter5, annotations = {}) {
    this.from = from;
    this.filter = filter5;
    this.annotations = annotations;
  }
  toString() {
    return getIdentifierAnnotation(this).pipe(getOrElse2(() => match2(getOrElseExpected(this), {
      onNone: () => `{ ${this.from} | filter }`,
      onSome: (expected) => isRefinement(this.from) ? String(this.from) + " & " + expected : expected
    })));
  }
  toJSON() {
    return {
      _tag: this._tag,
      from: this.from.toJSON(),
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class Transformation {
  from;
  to;
  transformation;
  annotations;
  _tag = "Transformation";
  constructor(from, to, transformation, annotations = {}) {
    this.from = from;
    this.to = to;
    this.transformation = transformation;
    this.annotations = annotations;
  }
  toString() {
    return getOrElse2(getExpected(this), () => `(${String(this.from)} <-> ${String(this.to)})`);
  }
  toJSON() {
    return {
      _tag: this._tag,
      from: this.from.toJSON(),
      to: this.to.toJSON(),
      annotations: toJSONAnnotations(this.annotations)
    };
  }
}

class FinalTransformation {
  decode;
  encode;
  _tag = "FinalTransformation";
  constructor(decode, encode) {
    this.decode = decode;
    this.encode = encode;
  }
}

class ComposeTransformation {
  _tag = "ComposeTransformation";
}

class PropertySignatureTransformation {
  from;
  to;
  decode;
  encode;
  constructor(from, to, decode, encode) {
    this.from = from;
    this.to = to;
    this.decode = decode;
    this.encode = encode;
  }
}

class TypeLiteralTransformation {
  propertySignatureTransformations;
  _tag = "TypeLiteralTransformation";
  constructor(propertySignatureTransformations) {
    this.propertySignatureTransformations = propertySignatureTransformations;
    const fromKeys = {};
    const toKeys = {};
    for (const pst of propertySignatureTransformations) {
      const from = pst.from;
      if (fromKeys[from]) {
        throw new Error(getASTDuplicatePropertySignatureTransformationErrorMessage(from));
      }
      fromKeys[from] = true;
      const to = pst.to;
      if (toKeys[to]) {
        throw new Error(getASTDuplicatePropertySignatureTransformationErrorMessage(to));
      }
      toKeys[to] = true;
    }
  }
}
function changeMap(as2, f) {
  let changed = false;
  const out = allocate(as2.length);
  for (let i2 = 0;i2 < as2.length; i2++) {
    const a = as2[i2];
    const fa = f(a);
    if (fa !== a) {
      changed = true;
    }
    out[i2] = fa;
  }
  return changed ? out : as2;
}
function getBrands(ast) {
  return match2(getBrandAnnotation(ast), {
    onNone: () => "",
    onSome: (brands) => brands.map((brand) => ` & Brand<${formatUnknown(brand)}>`).join("")
  });
}
var BrandAnnotationId, SchemaIdAnnotationId, MessageAnnotationId, MissingMessageAnnotationId, IdentifierAnnotationId, TitleAnnotationId, AutoTitleAnnotationId, DescriptionAnnotationId, ExamplesAnnotationId, DefaultAnnotationId, JSONSchemaAnnotationId, ArbitraryAnnotationId, PrettyAnnotationId, EquivalenceAnnotationId, DocumentationAnnotationId, ConcurrencyAnnotationId, BatchingAnnotationId, ParseIssueTitleAnnotationId, ParseOptionsAnnotationId, DecodingFallbackAnnotationId, SurrogateAnnotationId, StableFilterAnnotationId, getAnnotation, getBrandAnnotation, getSchemaIdAnnotation, getMessageAnnotation, getMissingMessageAnnotation, getTitleAnnotation, getAutoTitleAnnotation, getIdentifierAnnotation, getDescriptionAnnotation, getExamplesAnnotation, getDefaultAnnotation, getJSONSchemaAnnotation, getDocumentationAnnotation, getConcurrencyAnnotation, getBatchingAnnotation, getParseIssueTitleAnnotation, getParseOptionsAnnotation, getDecodingFallbackAnnotation, getSurrogateAnnotation, getStableFilterAnnotation, hasStableFilter = (annotated) => exists(getStableFilterAnnotation(annotated), (b) => b === true), JSONIdentifierAnnotationId, getJSONIdentifierAnnotation, getJSONIdentifier = (annotated) => orElse2(getJSONIdentifierAnnotation(annotated), () => getIdentifierAnnotation(annotated)), ParseJsonSchemaId, createASTGuard = (tag) => (ast) => ast._tag === tag, isDeclaration, isLiteral, $null, isUniqueSymbol, undefinedKeyword, isUndefinedKeyword, voidKeyword, isVoidKeyword, neverKeyword, isNeverKeyword, unknownKeyword, isUnknownKeyword, anyKeyword, isAnyKeyword, stringKeyword, isStringKeyword, numberKeyword, isNumberKeyword, booleanKeyword, isBooleanKeyword, bigIntKeyword, isBigIntKeyword, symbolKeyword, isSymbolKeyword, objectKeyword, isObjectKeyword, isEnums, isTemplateLiteralSpanType = (ast) => {
  switch (ast._tag) {
    case "Literal":
    case "NumberKeyword":
    case "StringKeyword":
    case "TemplateLiteral":
      return true;
    case "Union":
      return ast.types.every(isTemplateLiteralSpanType);
  }
  return false;
}, templateLiteralSpanUnionTypeToString = (type) => {
  switch (type._tag) {
    case "Literal":
      return JSON.stringify(String(type.literal));
    case "StringKeyword":
      return "string";
    case "NumberKeyword":
      return "number";
    case "TemplateLiteral":
      return String(type);
    case "Union":
      return type.types.map(templateLiteralSpanUnionTypeToString).join(" | ");
  }
}, templateLiteralSpanTypeToString = (type) => {
  switch (type._tag) {
    case "Literal":
      return String(type.literal);
    case "StringKeyword":
      return "${string}";
    case "NumberKeyword":
      return "${number}";
    case "TemplateLiteral":
      return "${" + String(type) + "}";
    case "Union":
      return "${" + type.types.map(templateLiteralSpanUnionTypeToString).join(" | ") + "}";
  }
}, formatTemplateLiteral = (ast) => "`" + ast.head + ast.spans.map(String).join("") + "`", isTemplateLiteral, OptionalType, getRestASTs = (rest) => rest.map((annotatedAST) => annotatedAST.type), formatTuple = (ast) => {
  const formattedElements = ast.elements.map(String).join(", ");
  return matchLeft(ast.rest, {
    onEmpty: () => `readonly [${formattedElements}]`,
    onNonEmpty: (head3, tail2) => {
      const formattedHead = String(head3);
      const wrappedHead = formattedHead.includes(" | ") ? `(${formattedHead})` : formattedHead;
      if (tail2.length > 0) {
        const formattedTail = tail2.map(String).join(", ");
        if (ast.elements.length > 0) {
          return `readonly [${formattedElements}, ...${wrappedHead}[], ${formattedTail}]`;
        } else {
          return `readonly [...${wrappedHead}[], ${formattedTail}]`;
        }
      } else {
        if (ast.elements.length > 0) {
          return `readonly [${formattedElements}, ...${wrappedHead}[]]`;
        } else {
          return `ReadonlyArray<${formattedHead}>`;
        }
      }
    }
  });
}, isTupleType, PropertySignature, isParameter = (ast) => {
  switch (ast._tag) {
    case "StringKeyword":
    case "SymbolKeyword":
    case "TemplateLiteral":
      return true;
    case "Refinement":
      return isParameter(ast.from);
  }
  return false;
}, formatIndexSignatures = (iss) => iss.map(String).join("; "), formatTypeLiteral = (ast) => {
  if (ast.propertySignatures.length > 0) {
    const pss = ast.propertySignatures.map(String).join("; ");
    if (ast.indexSignatures.length > 0) {
      return `{ ${pss}; ${formatIndexSignatures(ast.indexSignatures)} }`;
    } else {
      return `{ ${pss} }`;
    }
  } else {
    if (ast.indexSignatures.length > 0) {
      return `{ ${formatIndexSignatures(ast.indexSignatures)} }`;
    } else {
      return "{}";
    }
  }
}, isTypeLiteral, sortCandidates, literalMap, flatten4 = (candidates) => flatMap4(candidates, (ast) => isUnion(ast) ? flatten4(ast.types) : [ast]), unify = (candidates) => {
  const cs = sortCandidates(candidates);
  const out = [];
  const uniques = {};
  const literals = [];
  for (const ast of cs) {
    switch (ast._tag) {
      case "NeverKeyword":
        break;
      case "AnyKeyword":
        return [anyKeyword];
      case "UnknownKeyword":
        return [unknownKeyword];
      case "ObjectKeyword":
      case "UndefinedKeyword":
      case "VoidKeyword":
      case "StringKeyword":
      case "NumberKeyword":
      case "BooleanKeyword":
      case "BigIntKeyword":
      case "SymbolKeyword": {
        if (!uniques[ast._tag]) {
          uniques[ast._tag] = ast;
          out.push(ast);
        }
        break;
      }
      case "Literal": {
        const type = typeof ast.literal;
        switch (type) {
          case "string":
          case "number":
          case "bigint":
          case "boolean": {
            const _tag = literalMap[type];
            if (!uniques[_tag] && !literals.includes(ast.literal)) {
              literals.push(ast.literal);
              out.push(ast);
            }
            break;
          }
          case "object": {
            if (!literals.includes(ast.literal)) {
              literals.push(ast.literal);
              out.push(ast);
            }
            break;
          }
        }
        break;
      }
      case "UniqueSymbol": {
        if (!uniques["SymbolKeyword"] && !literals.includes(ast.symbol)) {
          literals.push(ast.symbol);
          out.push(ast);
        }
        break;
      }
      case "TupleType": {
        if (!uniques["ObjectKeyword"]) {
          out.push(ast);
        }
        break;
      }
      case "TypeLiteral": {
        if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {
          if (!uniques["{}"]) {
            uniques["{}"] = ast;
            out.push(ast);
          }
        } else if (!uniques["ObjectKeyword"]) {
          out.push(ast);
        }
        break;
      }
      default:
        out.push(ast);
    }
  }
  return out;
}, mapMembers = (members, f) => members.map(f), isMembers = (as2) => as2.length > 1, isUnion, toJSONMemoMap, isSuspend, isRefinement, defaultParseOption, isTransformation, createTransformationGuard = (tag) => (ast) => ast._tag === tag, isFinalTransformation, composeTransformation, isComposeTransformation, isRenamingPropertySignatureTransformation = (t) => t.decode === identity && t.encode === identity, isTypeLiteralTransformation, annotations = (ast, overrides) => {
  const d = Object.getOwnPropertyDescriptors(ast);
  const value = {
    ...ast.annotations,
    ...overrides
  };
  const surrogate = getSurrogateAnnotation(ast);
  if (isSome2(surrogate)) {
    value[SurrogateAnnotationId] = annotations(surrogate.value, overrides);
  }
  d.annotations.value = value;
  return Object.create(Object.getPrototypeOf(ast), d);
}, keyof = (ast) => Union.unify(_keyof(ast)), STRING_KEYWORD_PATTERN = "[\\s\\S]*", NUMBER_KEYWORD_PATTERN = "[+-]?\\d*\\.?\\d+(?:[Ee][+-]?\\d+)?", getTemplateLiteralSpanTypePattern = (type, capture) => {
  switch (type._tag) {
    case "Literal":
      return escape(String(type.literal));
    case "StringKeyword":
      return STRING_KEYWORD_PATTERN;
    case "NumberKeyword":
      return NUMBER_KEYWORD_PATTERN;
    case "TemplateLiteral":
      return getTemplateLiteralPattern(type, capture, false);
    case "Union":
      return type.types.map((type2) => getTemplateLiteralSpanTypePattern(type2, capture)).join("|");
  }
}, handleTemplateLiteralSpanTypeParens = (type, s, capture, top) => {
  if (isUnion(type)) {
    if (capture && !top) {
      return `(?:${s})`;
    }
  } else if (!capture || !top) {
    return s;
  }
  return `(${s})`;
}, getTemplateLiteralPattern = (ast, capture, top) => {
  let pattern = ``;
  if (ast.head !== "") {
    const head3 = escape(ast.head);
    pattern += capture && top ? `(${head3})` : head3;
  }
  for (const span2 of ast.spans) {
    const spanPattern = getTemplateLiteralSpanTypePattern(span2.type, capture);
    pattern += handleTemplateLiteralSpanTypeParens(span2.type, spanPattern, capture, top);
    if (span2.literal !== "") {
      const literal = escape(span2.literal);
      pattern += capture && top ? `(${literal})` : literal;
    }
  }
  return pattern;
}, getTemplateLiteralRegExp = (ast) => new RegExp(`^${getTemplateLiteralPattern(ast, false, true)}$`), getTemplateLiteralCapturingRegExp = (ast) => new RegExp(`^${getTemplateLiteralPattern(ast, true, true)}$`), getPropertySignatures = (ast) => {
  const annotation = getSurrogateAnnotation(ast);
  if (isSome2(annotation)) {
    return getPropertySignatures(annotation.value);
  }
  switch (ast._tag) {
    case "TypeLiteral":
      return ast.propertySignatures.slice();
    case "Suspend":
      return getPropertySignatures(ast.f());
    case "Refinement":
      return getPropertySignatures(ast.from);
  }
  return getPropertyKeys(ast).map((name) => getPropertyKeyIndexedAccess(ast, name));
}, getIndexSignatures = (ast) => {
  const annotation = getSurrogateAnnotation(ast);
  if (isSome2(annotation)) {
    return getIndexSignatures(annotation.value);
  }
  switch (ast._tag) {
    case "TypeLiteral":
      return ast.indexSignatures.slice();
    case "Suspend":
      return getIndexSignatures(ast.f());
    case "Refinement":
      return getIndexSignatures(ast.from);
  }
  return [];
}, getNumberIndexedAccess = (ast) => {
  switch (ast._tag) {
    case "TupleType": {
      let hasOptional = false;
      let out = [];
      for (const e of ast.elements) {
        if (e.isOptional) {
          hasOptional = true;
        }
        out.push(e.type);
      }
      if (hasOptional) {
        out.push(undefinedKeyword);
      }
      out = out.concat(getRestASTs(ast.rest));
      return Union.make(out);
    }
    case "Refinement":
      return getNumberIndexedAccess(ast.from);
    case "Union":
      return Union.make(ast.types.map(getNumberIndexedAccess));
    case "Suspend":
      return getNumberIndexedAccess(ast.f());
  }
  throw new Error(getASTUnsupportedSchemaErrorMessage(ast));
}, getTypeLiteralPropertySignature = (ast, name) => {
  const ops = findFirst2(ast.propertySignatures, (ps) => ps.name === name);
  if (isSome2(ops)) {
    return ops.value;
  }
  if (isString2(name)) {
    let out = undefined;
    for (const is of ast.indexSignatures) {
      const encodedParameter = getEncodedParameter(is.parameter);
      switch (encodedParameter._tag) {
        case "TemplateLiteral": {
          const regex = getTemplateLiteralRegExp(encodedParameter);
          if (regex.test(name)) {
            return new PropertySignature(name, is.type, false, true);
          }
          break;
        }
        case "StringKeyword": {
          if (out === undefined) {
            out = new PropertySignature(name, is.type, false, true);
          }
        }
      }
    }
    if (out) {
      return out;
    }
  } else if (isSymbol(name)) {
    for (const is of ast.indexSignatures) {
      const encodedParameter = getEncodedParameter(is.parameter);
      if (isSymbolKeyword(encodedParameter)) {
        return new PropertySignature(name, is.type, false, true);
      }
    }
  }
}, getPropertyKeyIndexedAccess = (ast, name) => {
  const annotation = getSurrogateAnnotation(ast);
  if (isSome2(annotation)) {
    return getPropertyKeyIndexedAccess(annotation.value, name);
  }
  switch (ast._tag) {
    case "TypeLiteral": {
      const ps = getTypeLiteralPropertySignature(ast, name);
      if (ps) {
        return ps;
      }
      break;
    }
    case "Union":
      return new PropertySignature(name, Union.make(ast.types.map((ast2) => getPropertyKeyIndexedAccess(ast2, name).type)), false, true);
    case "Suspend":
      return getPropertyKeyIndexedAccess(ast.f(), name);
    case "Refinement":
      return getPropertyKeyIndexedAccess(ast.from, name);
  }
  throw new Error(getASTUnsupportedSchemaErrorMessage(ast));
}, getPropertyKeys = (ast) => {
  const annotation = getSurrogateAnnotation(ast);
  if (isSome2(annotation)) {
    return getPropertyKeys(annotation.value);
  }
  switch (ast._tag) {
    case "TypeLiteral":
      return ast.propertySignatures.map((ps) => ps.name);
    case "Union":
      return ast.types.slice(1).reduce((out, ast2) => intersection2(out, getPropertyKeys(ast2)), getPropertyKeys(ast.types[0]));
    case "Suspend":
      return getPropertyKeys(ast.f());
    case "Refinement":
      return getPropertyKeys(ast.from);
    case "Transformation":
      return getPropertyKeys(ast.to);
  }
  return [];
}, record2 = (key, value) => {
  const propertySignatures = [];
  const indexSignatures = [];
  const go = (key2) => {
    switch (key2._tag) {
      case "NeverKeyword":
        break;
      case "StringKeyword":
      case "SymbolKeyword":
      case "TemplateLiteral":
      case "Refinement":
        indexSignatures.push(new IndexSignature(key2, value, true));
        break;
      case "Literal":
        if (isString2(key2.literal) || isNumber2(key2.literal)) {
          propertySignatures.push(new PropertySignature(key2.literal, value, false, true));
        } else {
          throw new Error(getASTUnsupportedLiteralErrorMessage(key2.literal));
        }
        break;
      case "Enums": {
        for (const [_, name] of key2.enums) {
          propertySignatures.push(new PropertySignature(name, value, false, true));
        }
        break;
      }
      case "UniqueSymbol":
        propertySignatures.push(new PropertySignature(key2.symbol, value, false, true));
        break;
      case "Union":
        key2.types.forEach(go);
        break;
      default:
        throw new Error(getASTUnsupportedKeySchemaErrorMessage(key2));
    }
  };
  go(key);
  return {
    propertySignatures,
    indexSignatures
  };
}, pick = (ast, keys2) => {
  const annotation = getSurrogateAnnotation(ast);
  if (isSome2(annotation)) {
    return pick(annotation.value, keys2);
  }
  switch (ast._tag) {
    case "TypeLiteral": {
      const pss = [];
      const names = {};
      for (const ps of ast.propertySignatures) {
        names[ps.name] = null;
        if (keys2.includes(ps.name)) {
          pss.push(ps);
        }
      }
      for (const key of keys2) {
        if (!(key in names)) {
          const ps = getTypeLiteralPropertySignature(ast, key);
          if (ps) {
            pss.push(ps);
          }
        }
      }
      return new TypeLiteral(pss, []);
    }
    case "Union":
      return new TypeLiteral(keys2.map((name) => getPropertyKeyIndexedAccess(ast, name)), []);
    case "Suspend":
      return pick(ast.f(), keys2);
    case "Refinement":
      return pick(ast.from, keys2);
    case "Transformation": {
      switch (ast.transformation._tag) {
        case "ComposeTransformation":
          return new Transformation(pick(ast.from, keys2), pick(ast.to, keys2), composeTransformation);
        case "TypeLiteralTransformation": {
          const ts = [];
          const fromKeys = [];
          for (const k of keys2) {
            const t = ast.transformation.propertySignatureTransformations.find((t2) => t2.to === k);
            if (t) {
              ts.push(t);
              fromKeys.push(t.from);
            } else {
              fromKeys.push(k);
            }
          }
          return isNonEmptyReadonlyArray(ts) ? new Transformation(pick(ast.from, fromKeys), pick(ast.to, keys2), new TypeLiteralTransformation(ts)) : pick(ast.from, fromKeys);
        }
      }
    }
  }
  throw new Error(getASTUnsupportedSchemaErrorMessage(ast));
}, omit = (ast, keys2) => {
  let indexSignatures = getIndexSignatures(ast);
  if (indexSignatures.length > 0) {
    if (indexSignatures.some((is) => isStringKeyword(getEncodedParameter(is.parameter)))) {
      indexSignatures = indexSignatures.filter((is) => !isTemplateLiteral(getEncodedParameter(is.parameter)));
    }
    return new TypeLiteral([], indexSignatures);
  }
  return pick(ast, getPropertyKeys(ast).filter((name) => !keys2.includes(name)));
}, orUndefined = (ast) => Union.make([ast, undefinedKeyword]), partial = (ast, options) => {
  const exact = options?.exact === true;
  switch (ast._tag) {
    case "TupleType":
      return new TupleType(ast.elements.map((e) => new OptionalType(exact ? e.type : orUndefined(e.type), true)), match3(ast.rest, {
        onEmpty: () => ast.rest,
        onNonEmpty: (rest) => [new Type(Union.make([...getRestASTs(rest), undefinedKeyword]))]
      }), ast.isReadonly);
    case "TypeLiteral":
      return new TypeLiteral(ast.propertySignatures.map((ps) => new PropertySignature(ps.name, exact ? ps.type : orUndefined(ps.type), true, ps.isReadonly, ps.annotations)), ast.indexSignatures.map((is) => new IndexSignature(is.parameter, orUndefined(is.type), is.isReadonly)));
    case "Union":
      return Union.make(ast.types.map((member) => partial(member, options)));
    case "Suspend":
      return new Suspend(() => partial(ast.f(), options));
    case "Declaration":
    case "Refinement":
      throw new Error(getASTUnsupportedSchemaErrorMessage(ast));
    case "Transformation": {
      if (isTypeLiteralTransformation(ast.transformation) && ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)) {
        return new Transformation(partial(ast.from, options), partial(ast.to, options), ast.transformation);
      }
      throw new Error(getASTUnsupportedSchemaErrorMessage(ast));
    }
  }
  return ast;
}, required = (ast) => {
  switch (ast._tag) {
    case "TupleType":
      return new TupleType(ast.elements.map((e) => new OptionalType(e.type, false)), ast.rest, ast.isReadonly);
    case "TypeLiteral":
      return new TypeLiteral(ast.propertySignatures.map((f) => new PropertySignature(f.name, f.type, false, f.isReadonly, f.annotations)), ast.indexSignatures);
    case "Union":
      return Union.make(ast.types.map((member) => required(member)));
    case "Suspend":
      return new Suspend(() => required(ast.f()));
    case "Declaration":
    case "Refinement":
      throw new Error(getASTUnsupportedSchemaErrorMessage(ast));
    case "Transformation": {
      if (isTypeLiteralTransformation(ast.transformation) && ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)) {
        return new Transformation(required(ast.from), required(ast.to), ast.transformation);
      }
      throw new Error(getASTUnsupportedSchemaErrorMessage(ast));
    }
  }
  return ast;
}, mutable = (ast) => {
  switch (ast._tag) {
    case "TupleType":
      return ast.isReadonly === false ? ast : new TupleType(ast.elements, ast.rest, false, ast.annotations);
    case "TypeLiteral": {
      const propertySignatures = changeMap(ast.propertySignatures, (ps) => ps.isReadonly === false ? ps : new PropertySignature(ps.name, ps.type, ps.isOptional, false, ps.annotations));
      const indexSignatures = changeMap(ast.indexSignatures, (is) => is.isReadonly === false ? is : new IndexSignature(is.parameter, is.type, false));
      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, ast.annotations);
    }
    case "Union": {
      const types = changeMap(ast.types, mutable);
      return types === ast.types ? ast : Union.make(types, ast.annotations);
    }
    case "Suspend":
      return new Suspend(() => mutable(ast.f()), ast.annotations);
    case "Refinement": {
      const from = mutable(ast.from);
      return from === ast.from ? ast : new Refinement(from, ast.filter, ast.annotations);
    }
    case "Transformation": {
      const from = mutable(ast.from);
      const to = mutable(ast.to);
      return from === ast.from && to === ast.to ? ast : new Transformation(from, to, ast.transformation, ast.annotations);
    }
  }
  return ast;
}, getCompiler = (match4) => {
  const compile = (ast, path) => match4[ast._tag](ast, compile, path);
  return compile;
}, pickAnnotations = (annotationIds) => (annotated) => {
  let out = undefined;
  for (const id of annotationIds) {
    if (Object.prototype.hasOwnProperty.call(annotated.annotations, id)) {
      if (out === undefined) {
        out = {};
      }
      out[id] = annotated.annotations[id];
    }
  }
  return out;
}, omitAnnotations = (annotationIds) => (annotated) => {
  const out = {
    ...annotated.annotations
  };
  for (const id of annotationIds) {
    delete out[id];
  }
  return out;
}, preserveTransformationAnnotations, typeAST = (ast) => {
  switch (ast._tag) {
    case "Declaration": {
      const typeParameters = changeMap(ast.typeParameters, typeAST);
      return typeParameters === ast.typeParameters ? ast : new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations);
    }
    case "TupleType": {
      const elements = changeMap(ast.elements, (e) => {
        const type = typeAST(e.type);
        return type === e.type ? e : new OptionalType(type, e.isOptional);
      });
      const restASTs = getRestASTs(ast.rest);
      const rest = changeMap(restASTs, typeAST);
      return elements === ast.elements && rest === restASTs ? ast : new TupleType(elements, rest.map((type) => new Type(type)), ast.isReadonly, ast.annotations);
    }
    case "TypeLiteral": {
      const propertySignatures = changeMap(ast.propertySignatures, (p) => {
        const type = typeAST(p.type);
        return type === p.type ? p : new PropertySignature(p.name, type, p.isOptional, p.isReadonly);
      });
      const indexSignatures = changeMap(ast.indexSignatures, (is) => {
        const type = typeAST(is.type);
        return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly);
      });
      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, ast.annotations);
    }
    case "Union": {
      const types = changeMap(ast.types, typeAST);
      return types === ast.types ? ast : Union.make(types, ast.annotations);
    }
    case "Suspend":
      return new Suspend(() => typeAST(ast.f()), ast.annotations);
    case "Refinement": {
      const from = typeAST(ast.from);
      return from === ast.from ? ast : new Refinement(from, ast.filter, ast.annotations);
    }
    case "Transformation": {
      const preserve = preserveTransformationAnnotations(ast);
      return typeAST(preserve !== undefined ? annotations(ast.to, preserve) : ast.to);
    }
  }
  return ast;
}, createJSONIdentifierAnnotation = (annotated) => match2(getJSONIdentifier(annotated), {
  onNone: () => {
    return;
  },
  onSome: (identifier) => ({
    [JSONIdentifierAnnotationId]: identifier
  })
}), getTransformationFrom = (ast) => {
  switch (ast._tag) {
    case "Transformation":
      return ast.from;
    case "Refinement":
      return getTransformationFrom(ast.from);
    case "Suspend":
      return getTransformationFrom(ast.f());
  }
}, encodedAST_ = (ast, isBound) => {
  switch (ast._tag) {
    case "Declaration": {
      const typeParameters = changeMap(ast.typeParameters, (ast2) => encodedAST_(ast2, isBound));
      return typeParameters === ast.typeParameters ? ast : new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations);
    }
    case "TupleType": {
      const elements = changeMap(ast.elements, (e) => {
        const type = encodedAST_(e.type, isBound);
        return type === e.type ? e : new OptionalType(type, e.isOptional);
      });
      const restASTs = getRestASTs(ast.rest);
      const rest = changeMap(restASTs, (ast2) => encodedAST_(ast2, isBound));
      return elements === ast.elements && rest === restASTs ? ast : new TupleType(elements, rest.map((ast2) => new Type(ast2)), ast.isReadonly, createJSONIdentifierAnnotation(ast));
    }
    case "TypeLiteral": {
      const propertySignatures = changeMap(ast.propertySignatures, (ps) => {
        const type = encodedAST_(ps.type, isBound);
        return type === ps.type ? ps : new PropertySignature(ps.name, type, ps.isOptional, ps.isReadonly);
      });
      const indexSignatures = changeMap(ast.indexSignatures, (is) => {
        const type = encodedAST_(is.type, isBound);
        return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly);
      });
      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, createJSONIdentifierAnnotation(ast));
    }
    case "Union": {
      const types = changeMap(ast.types, (ast2) => encodedAST_(ast2, isBound));
      return types === ast.types ? ast : Union.make(types, createJSONIdentifierAnnotation(ast));
    }
    case "Suspend":
      return new Suspend(() => encodedAST_(ast.f(), isBound), createJSONIdentifierAnnotation(ast));
    case "Refinement": {
      const from = encodedAST_(ast.from, isBound);
      if (isBound) {
        if (from === ast.from) {
          return ast;
        }
        if (getTransformationFrom(ast.from) === undefined && hasStableFilter(ast)) {
          return new Refinement(from, ast.filter, ast.annotations);
        }
      }
      const identifier = createJSONIdentifierAnnotation(ast);
      return identifier ? annotations(from, identifier) : from;
    }
    case "Transformation": {
      const identifier = createJSONIdentifierAnnotation(ast);
      return encodedAST_(identifier ? annotations(ast.from, identifier) : ast.from, isBound);
    }
  }
  return ast;
}, encodedAST = (ast) => encodedAST_(ast, false), encodedBoundAST = (ast) => encodedAST_(ast, true), toJSONAnnotations = (annotations2) => {
  const out = {};
  for (const k of Object.getOwnPropertySymbols(annotations2)) {
    out[String(k)] = annotations2[k];
  }
  return out;
}, getEncodedParameter = (ast) => {
  switch (ast._tag) {
    case "StringKeyword":
    case "SymbolKeyword":
    case "TemplateLiteral":
      return ast;
    case "Refinement":
      return getEncodedParameter(ast.from);
  }
}, equals2 = (self, that) => {
  switch (self._tag) {
    case "Literal":
      return isLiteral(that) && that.literal === self.literal;
    case "UniqueSymbol":
      return isUniqueSymbol(that) && that.symbol === self.symbol;
    case "UndefinedKeyword":
    case "VoidKeyword":
    case "NeverKeyword":
    case "UnknownKeyword":
    case "AnyKeyword":
    case "StringKeyword":
    case "NumberKeyword":
    case "BooleanKeyword":
    case "BigIntKeyword":
    case "SymbolKeyword":
    case "ObjectKeyword":
      return that._tag === self._tag;
    case "TemplateLiteral":
      return isTemplateLiteral(that) && that.head === self.head && equalsTemplateLiteralSpan(that.spans, self.spans);
    case "Enums":
      return isEnums(that) && equalsEnums(that.enums, self.enums);
    case "Union":
      return isUnion(that) && equalsUnion(self.types, that.types);
    case "Refinement":
    case "TupleType":
    case "TypeLiteral":
    case "Suspend":
    case "Transformation":
    case "Declaration":
      return self === that;
  }
}, equalsTemplateLiteralSpan, equalsEnums, equalsUnion, intersection3, _keyof = (ast) => {
  switch (ast._tag) {
    case "Declaration": {
      const annotation = getSurrogateAnnotation(ast);
      if (isSome2(annotation)) {
        return _keyof(annotation.value);
      }
      break;
    }
    case "TypeLiteral":
      return ast.propertySignatures.map((p) => isSymbol(p.name) ? new UniqueSymbol(p.name) : new Literal(p.name)).concat(ast.indexSignatures.map((is) => getEncodedParameter(is.parameter)));
    case "Suspend":
      return _keyof(ast.f());
    case "Union":
      return ast.types.slice(1).reduce((out, ast2) => intersection3(out, _keyof(ast2)), _keyof(ast.types[0]));
    case "Transformation":
      return _keyof(ast.to);
  }
  throw new Error(getASTUnsupportedSchemaErrorMessage(ast));
}, compose3 = (ab, cd) => new Transformation(ab, cd, composeTransformation), rename = (ast, mapping) => {
  switch (ast._tag) {
    case "TypeLiteral": {
      const propertySignatureTransformations = [];
      for (const key of ownKeys(mapping)) {
        const name = mapping[key];
        if (name !== undefined) {
          propertySignatureTransformations.push(new PropertySignatureTransformation(key, name, identity, identity));
        }
      }
      if (propertySignatureTransformations.length === 0) {
        return ast;
      }
      return new Transformation(ast, new TypeLiteral(ast.propertySignatures.map((ps) => {
        const name = mapping[ps.name];
        return new PropertySignature(name === undefined ? ps.name : name, typeAST(ps.type), ps.isOptional, ps.isReadonly, ps.annotations);
      }), ast.indexSignatures), new TypeLiteralTransformation(propertySignatureTransformations));
    }
    case "Union":
      return Union.make(ast.types.map((ast2) => rename(ast2, mapping)));
    case "Suspend":
      return new Suspend(() => rename(ast.f(), mapping));
    case "Transformation":
      return compose3(ast, rename(typeAST(ast), mapping));
  }
  throw new Error(getASTUnsupportedRenameSchemaErrorMessage(ast));
}, formatKeyword = (ast) => getOrElse2(getExpected(ast), () => ast._tag), getOrElseExpected = (ast) => getTitleAnnotation(ast).pipe(orElse2(() => getDescriptionAnnotation(ast)), orElse2(() => getAutoTitleAnnotation(ast)), map2((s) => s + getBrands(ast))), getExpected = (ast) => orElse2(getIdentifierAnnotation(ast), () => getOrElseExpected(ast)), pruneUndefined = (ast, self, onTransformation) => {
  switch (ast._tag) {
    case "UndefinedKeyword":
      return neverKeyword;
    case "Union": {
      const types = [];
      let hasUndefined = false;
      for (const type of ast.types) {
        const pruned = self(type);
        if (pruned) {
          hasUndefined = true;
          if (!isNeverKeyword(pruned)) {
            types.push(pruned);
          }
        } else {
          types.push(type);
        }
      }
      if (hasUndefined) {
        return Union.make(types);
      }
      break;
    }
    case "Suspend":
      return self(ast.f());
    case "Transformation":
      return onTransformation(ast);
  }
};
var init_SchemaAST = __esm(() => {
  init_Array();
  init_Function();
  init_GlobalValue();
  init_errors();
  init_util();
  init_Number();
  init_Option();
  init_Order();
  init_Predicate();
  init_RegExp();
  BrandAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Brand");
  SchemaIdAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/SchemaId");
  MessageAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Message");
  MissingMessageAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/MissingMessage");
  IdentifierAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Identifier");
  TitleAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Title");
  AutoTitleAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/AutoTitle");
  DescriptionAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Description");
  ExamplesAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Examples");
  DefaultAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Default");
  JSONSchemaAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/JSONSchema");
  ArbitraryAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Arbitrary");
  PrettyAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Pretty");
  EquivalenceAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Equivalence");
  DocumentationAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Documentation");
  ConcurrencyAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Concurrency");
  BatchingAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Batching");
  ParseIssueTitleAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/ParseIssueTitle");
  ParseOptionsAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/ParseOptions");
  DecodingFallbackAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/DecodingFallback");
  SurrogateAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/Surrogate");
  StableFilterAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/StableFilter");
  getAnnotation = /* @__PURE__ */ dual(2, (annotated, key) => Object.prototype.hasOwnProperty.call(annotated.annotations, key) ? some3(annotated.annotations[key]) : none2());
  getBrandAnnotation = /* @__PURE__ */ getAnnotation(BrandAnnotationId);
  getSchemaIdAnnotation = /* @__PURE__ */ getAnnotation(SchemaIdAnnotationId);
  getMessageAnnotation = /* @__PURE__ */ getAnnotation(MessageAnnotationId);
  getMissingMessageAnnotation = /* @__PURE__ */ getAnnotation(MissingMessageAnnotationId);
  getTitleAnnotation = /* @__PURE__ */ getAnnotation(TitleAnnotationId);
  getAutoTitleAnnotation = /* @__PURE__ */ getAnnotation(AutoTitleAnnotationId);
  getIdentifierAnnotation = /* @__PURE__ */ getAnnotation(IdentifierAnnotationId);
  getDescriptionAnnotation = /* @__PURE__ */ getAnnotation(DescriptionAnnotationId);
  getExamplesAnnotation = /* @__PURE__ */ getAnnotation(ExamplesAnnotationId);
  getDefaultAnnotation = /* @__PURE__ */ getAnnotation(DefaultAnnotationId);
  getJSONSchemaAnnotation = /* @__PURE__ */ getAnnotation(JSONSchemaAnnotationId);
  getDocumentationAnnotation = /* @__PURE__ */ getAnnotation(DocumentationAnnotationId);
  getConcurrencyAnnotation = /* @__PURE__ */ getAnnotation(ConcurrencyAnnotationId);
  getBatchingAnnotation = /* @__PURE__ */ getAnnotation(BatchingAnnotationId);
  getParseIssueTitleAnnotation = /* @__PURE__ */ getAnnotation(ParseIssueTitleAnnotationId);
  getParseOptionsAnnotation = /* @__PURE__ */ getAnnotation(ParseOptionsAnnotationId);
  getDecodingFallbackAnnotation = /* @__PURE__ */ getAnnotation(DecodingFallbackAnnotationId);
  getSurrogateAnnotation = /* @__PURE__ */ getAnnotation(SurrogateAnnotationId);
  getStableFilterAnnotation = /* @__PURE__ */ getAnnotation(StableFilterAnnotationId);
  JSONIdentifierAnnotationId = /* @__PURE__ */ Symbol.for("effect/annotation/JSONIdentifier");
  getJSONIdentifierAnnotation = /* @__PURE__ */ getAnnotation(JSONIdentifierAnnotationId);
  ParseJsonSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/ParseJson");
  isDeclaration = /* @__PURE__ */ createASTGuard("Declaration");
  isLiteral = /* @__PURE__ */ createASTGuard("Literal");
  $null = /* @__PURE__ */ new Literal(null);
  isUniqueSymbol = /* @__PURE__ */ createASTGuard("UniqueSymbol");
  undefinedKeyword = /* @__PURE__ */ new UndefinedKeyword({
    [TitleAnnotationId]: "undefined"
  });
  isUndefinedKeyword = /* @__PURE__ */ createASTGuard("UndefinedKeyword");
  voidKeyword = /* @__PURE__ */ new VoidKeyword({
    [TitleAnnotationId]: "void"
  });
  isVoidKeyword = /* @__PURE__ */ createASTGuard("VoidKeyword");
  neverKeyword = /* @__PURE__ */ new NeverKeyword({
    [TitleAnnotationId]: "never"
  });
  isNeverKeyword = /* @__PURE__ */ createASTGuard("NeverKeyword");
  unknownKeyword = /* @__PURE__ */ new UnknownKeyword({
    [TitleAnnotationId]: "unknown"
  });
  isUnknownKeyword = /* @__PURE__ */ createASTGuard("UnknownKeyword");
  anyKeyword = /* @__PURE__ */ new AnyKeyword({
    [TitleAnnotationId]: "any"
  });
  isAnyKeyword = /* @__PURE__ */ createASTGuard("AnyKeyword");
  stringKeyword = /* @__PURE__ */ new StringKeyword({
    [TitleAnnotationId]: "string",
    [DescriptionAnnotationId]: "a string"
  });
  isStringKeyword = /* @__PURE__ */ createASTGuard("StringKeyword");
  numberKeyword = /* @__PURE__ */ new NumberKeyword({
    [TitleAnnotationId]: "number",
    [DescriptionAnnotationId]: "a number"
  });
  isNumberKeyword = /* @__PURE__ */ createASTGuard("NumberKeyword");
  booleanKeyword = /* @__PURE__ */ new BooleanKeyword({
    [TitleAnnotationId]: "boolean",
    [DescriptionAnnotationId]: "a boolean"
  });
  isBooleanKeyword = /* @__PURE__ */ createASTGuard("BooleanKeyword");
  bigIntKeyword = /* @__PURE__ */ new BigIntKeyword({
    [TitleAnnotationId]: "bigint",
    [DescriptionAnnotationId]: "a bigint"
  });
  isBigIntKeyword = /* @__PURE__ */ createASTGuard("BigIntKeyword");
  symbolKeyword = /* @__PURE__ */ new SymbolKeyword({
    [TitleAnnotationId]: "symbol",
    [DescriptionAnnotationId]: "a symbol"
  });
  isSymbolKeyword = /* @__PURE__ */ createASTGuard("SymbolKeyword");
  objectKeyword = /* @__PURE__ */ new ObjectKeyword({
    [TitleAnnotationId]: "object",
    [DescriptionAnnotationId]: "an object in the TypeScript meaning, i.e. the `object` type"
  });
  isObjectKeyword = /* @__PURE__ */ createASTGuard("ObjectKeyword");
  isEnums = /* @__PURE__ */ createASTGuard("Enums");
  isTemplateLiteral = /* @__PURE__ */ createASTGuard("TemplateLiteral");
  OptionalType = class OptionalType extends Type {
    isOptional;
    constructor(type, isOptional, annotations = {}) {
      super(type, annotations);
      this.isOptional = isOptional;
    }
    toJSON() {
      return {
        type: this.type.toJSON(),
        isOptional: this.isOptional,
        annotations: toJSONAnnotations(this.annotations)
      };
    }
    toString() {
      return String(this.type) + (this.isOptional ? "?" : "");
    }
  };
  isTupleType = /* @__PURE__ */ createASTGuard("TupleType");
  PropertySignature = class PropertySignature extends OptionalType {
    name;
    isReadonly;
    constructor(name, type, isOptional, isReadonly, annotations) {
      super(type, isOptional, annotations);
      this.name = name;
      this.isReadonly = isReadonly;
    }
    toString() {
      return (this.isReadonly ? "readonly " : "") + String(this.name) + (this.isOptional ? "?" : "") + ": " + this.type;
    }
    toJSON() {
      return {
        name: String(this.name),
        type: this.type.toJSON(),
        isOptional: this.isOptional,
        isReadonly: this.isReadonly,
        annotations: toJSONAnnotations(this.annotations)
      };
    }
  };
  isTypeLiteral = /* @__PURE__ */ createASTGuard("TypeLiteral");
  sortCandidates = /* @__PURE__ */ sort(/* @__PURE__ */ mapInput3(Order, (ast) => {
    switch (ast._tag) {
      case "AnyKeyword":
        return 0;
      case "UnknownKeyword":
        return 1;
      case "ObjectKeyword":
        return 2;
      case "StringKeyword":
      case "NumberKeyword":
      case "BooleanKeyword":
      case "BigIntKeyword":
      case "SymbolKeyword":
        return 3;
    }
    return 4;
  }));
  literalMap = {
    string: "StringKeyword",
    number: "NumberKeyword",
    boolean: "BooleanKeyword",
    bigint: "BigIntKeyword"
  };
  isUnion = /* @__PURE__ */ createASTGuard("Union");
  toJSONMemoMap = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Schema/AST/toJSONMemoMap"), () => new WeakMap);
  isSuspend = /* @__PURE__ */ createASTGuard("Suspend");
  isRefinement = /* @__PURE__ */ createASTGuard("Refinement");
  defaultParseOption = {};
  isTransformation = /* @__PURE__ */ createASTGuard("Transformation");
  isFinalTransformation = /* @__PURE__ */ createTransformationGuard("FinalTransformation");
  composeTransformation = /* @__PURE__ */ new ComposeTransformation;
  isComposeTransformation = /* @__PURE__ */ createTransformationGuard("ComposeTransformation");
  isTypeLiteralTransformation = /* @__PURE__ */ createTransformationGuard("TypeLiteralTransformation");
  preserveTransformationAnnotations = /* @__PURE__ */ pickAnnotations([ExamplesAnnotationId, DefaultAnnotationId, JSONSchemaAnnotationId, ArbitraryAnnotationId, PrettyAnnotationId, EquivalenceAnnotationId]);
  equalsTemplateLiteralSpan = /* @__PURE__ */ getEquivalence5((self, that) => {
    return self.literal === that.literal && equals2(self.type, that.type);
  });
  equalsEnums = /* @__PURE__ */ getEquivalence5((self, that) => that[0] === self[0] && that[1] === self[1]);
  equalsUnion = /* @__PURE__ */ getEquivalence5(equals2);
  intersection3 = /* @__PURE__ */ intersectionWith(equals2);
});

// node_modules/effect/dist/esm/Arbitrary.js
var exports_Arbitrary = {};
__export(exports_Arbitrary, {
  makeStringConstraints: () => makeStringConstraints,
  makeNumberConstraints: () => makeNumberConstraints,
  makeLazy: () => makeLazy2,
  makeDateConstraints: () => makeDateConstraints,
  makeBigIntConstraints: () => makeBigIntConstraints,
  makeArrayConstraints: () => makeArrayConstraints,
  make: () => make5,
  getDescription: () => getDescription
});
function wrapGetDescription(f, g) {
  return (ast, path) => f(ast, g(ast, path));
}
function parseMeta(ast) {
  const jsonSchema = getJSONSchemaAnnotation(ast).pipe(filter(isReadonlyRecord), getOrUndefined2);
  const schemaId = getOrElse2(getSchemaIdAnnotation(ast), () => {
    return;
  });
  const schemaParams = fromNullable2(schemaId).pipe(map2((id) => ast.annotations[id]), filter(isReadonlyRecord), getOrUndefined2);
  return [schemaId, {
    ...schemaParams,
    ...jsonSchema
  }];
}
function getMax(n1, n2) {
  return n1 === undefined ? n2 : n2 === undefined ? n1 : n1 <= n2 ? n2 : n1;
}
function getMin(n1, n2) {
  return n1 === undefined ? n2 : n2 === undefined ? n1 : n1 <= n2 ? n1 : n2;
}
function mergePattern(pattern1, pattern2) {
  if (pattern1 === undefined) {
    return pattern2;
  }
  if (pattern2 === undefined) {
    return pattern1;
  }
  return `(?:${pattern1})|(?:${pattern2})`;
}
function mergeStringConstraints(c1, c2) {
  return makeStringConstraints({
    minLength: getMax(c1.constraints.minLength, c2.constraints.minLength),
    maxLength: getMin(c1.constraints.maxLength, c2.constraints.maxLength),
    pattern: mergePattern(c1.pattern, c2.pattern)
  });
}
function buildStringConstraints(description) {
  return description.constraints.length === 0 ? undefined : description.constraints.reduce(mergeStringConstraints);
}
function mergeNumberConstraints(c1, c2) {
  return makeNumberConstraints({
    isInteger: c1.isInteger || c2.isInteger,
    min: getMax(c1.constraints.min, c2.constraints.min),
    minExcluded: getOr(c1.constraints.minExcluded, c2.constraints.minExcluded),
    max: getMin(c1.constraints.max, c2.constraints.max),
    maxExcluded: getOr(c1.constraints.maxExcluded, c2.constraints.maxExcluded),
    noNaN: getOr(c1.constraints.noNaN, c2.constraints.noNaN),
    noDefaultInfinity: getOr(c1.constraints.noDefaultInfinity, c2.constraints.noDefaultInfinity)
  });
}
function buildNumberConstraints(description) {
  return description.constraints.length === 0 ? undefined : description.constraints.reduce(mergeNumberConstraints);
}
function mergeBigIntConstraints(c1, c2) {
  return makeBigIntConstraints({
    min: getMax(c1.constraints.min, c2.constraints.min),
    max: getMin(c1.constraints.max, c2.constraints.max)
  });
}
function buildBigIntConstraints(description) {
  return description.constraints.length === 0 ? undefined : description.constraints.reduce(mergeBigIntConstraints);
}
function mergeDateConstraints(c1, c2) {
  return makeDateConstraints({
    min: getMax(c1.constraints.min, c2.constraints.min),
    max: getMin(c1.constraints.max, c2.constraints.max),
    noInvalidDate: getOr(c1.constraints.noInvalidDate, c2.constraints.noInvalidDate)
  });
}
function buildDateConstraints(description) {
  return description.constraints.length === 0 ? undefined : description.constraints.reduce(mergeDateConstraints);
}
function mergeArrayConstraints(c1, c2) {
  return makeArrayConstraints({
    minLength: getMax(c1.constraints.minLength, c2.constraints.minLength),
    maxLength: getMin(c1.constraints.maxLength, c2.constraints.maxLength)
  });
}
function buildArrayConstraints(description) {
  return description.constraints.length === 0 ? undefined : description.constraints.reduce(mergeArrayConstraints);
}
function applyFilters(filters, arb) {
  return (fc) => filters.reduce((arb2, filter5) => arb2.filter(filter5), arb(fc));
}
function absurd2(message) {
  return () => {
    throw new Error(message);
  };
}
function getContextConstraints(description) {
  switch (description._tag) {
    case "StringKeyword":
      return buildStringConstraints(description);
    case "NumberKeyword":
      return buildNumberConstraints(description);
    case "BigIntKeyword":
      return buildBigIntConstraints(description);
    case "DateFromSelf":
      return buildDateConstraints(description);
    case "TupleType":
      return buildArrayConstraints(description);
  }
}
function wrapGo(f, g) {
  return (description, ctx) => f(description, ctx, g(description, ctx));
}
function subtractElementsLength(constraints, len) {
  if (len === 0 || constraints.minLength === undefined && constraints.maxLength === undefined) {
    return constraints;
  }
  const out = {
    ...constraints
  };
  if (out.minLength !== undefined) {
    out.minLength = Math.max(out.minLength - len, 0);
  }
  if (out.maxLength !== undefined) {
    out.maxLength = Math.max(out.maxLength - len, 0);
  }
  return out;
}
var makeLazy2 = (schema) => {
  const description = getDescription(schema.ast, []);
  return go(description, {
    maxDepth: 2
  });
}, make5 = (schema) => makeLazy2(schema)(exports_FastCheck), makeStringConstraints = (options) => {
  const out = {
    _tag: "StringConstraints",
    constraints: {}
  };
  if (isNumber2(options.minLength)) {
    out.constraints.minLength = options.minLength;
  }
  if (isNumber2(options.maxLength)) {
    out.constraints.maxLength = options.maxLength;
  }
  if (isString2(options.pattern)) {
    out.pattern = options.pattern;
  }
  return out;
}, makeNumberConstraints = (options) => {
  const out = {
    _tag: "NumberConstraints",
    constraints: {},
    isInteger: options.isInteger ?? false
  };
  if (isNumber2(options.min)) {
    out.constraints.min = Math.fround(options.min);
  }
  if (isBoolean2(options.minExcluded)) {
    out.constraints.minExcluded = options.minExcluded;
  }
  if (isNumber2(options.max)) {
    out.constraints.max = Math.fround(options.max);
  }
  if (isBoolean2(options.maxExcluded)) {
    out.constraints.maxExcluded = options.maxExcluded;
  }
  if (isBoolean2(options.noNaN)) {
    out.constraints.noNaN = options.noNaN;
  }
  if (isBoolean2(options.noDefaultInfinity)) {
    out.constraints.noDefaultInfinity = options.noDefaultInfinity;
  }
  return out;
}, makeBigIntConstraints = (options) => {
  const out = {
    _tag: "BigIntConstraints",
    constraints: {}
  };
  if (isBigInt(options.min)) {
    out.constraints.min = options.min;
  }
  if (isBigInt(options.max)) {
    out.constraints.max = options.max;
  }
  return out;
}, makeArrayConstraints = (options) => {
  const out = {
    _tag: "ArrayConstraints",
    constraints: {}
  };
  if (isNumber2(options.minLength)) {
    out.constraints.minLength = options.minLength;
  }
  if (isNumber2(options.maxLength)) {
    out.constraints.maxLength = options.maxLength;
  }
  return out;
}, makeDateConstraints = (options) => {
  const out = {
    _tag: "DateConstraints",
    constraints: {}
  };
  if (isDate(options.min)) {
    out.constraints.min = options.min;
  }
  if (isDate(options.max)) {
    out.constraints.max = options.max;
  }
  if (isBoolean2(options.noInvalidDate)) {
    out.constraints.noInvalidDate = options.noInvalidDate;
  }
  return out;
}, getArbitraryAnnotation, getASTConstraints = (ast) => {
  const TypeAnnotationId = ast.annotations[SchemaIdAnnotationId];
  if (isPropertyKey(TypeAnnotationId)) {
    const out = ast.annotations[TypeAnnotationId];
    if (isReadonlyRecord(out)) {
      return out;
    }
  }
}, idMemoMap, counter = 0, getDescription, getOr = (a, b) => {
  return a === undefined ? b : b === undefined ? a : a || b;
}, constArrayConstraints, arbitraryMemoMap, go, getSuspendedArray = (fc, depthIdentifier, maxDepth, item, constraints) => {
  const maxLengthLimit = Math.max(2, constraints.minLength ?? 0);
  if (constraints.maxLength !== undefined && constraints.maxLength > maxLengthLimit) {
    constraints = {
      ...constraints,
      maxLength: maxLengthLimit
    };
  }
  return fc.oneof({
    maxDepth,
    depthIdentifier
  }, fc.constant([]), fc.array(item, constraints));
};
var init_Arbitrary2 = __esm(() => {
  init_Array();
  init_FastCheck();
  init_GlobalValue();
  init_errors();
  init_schemaId();
  init_util();
  init_Option();
  init_Predicate();
  init_SchemaAST();
  getArbitraryAnnotation = /* @__PURE__ */ getAnnotation(ArbitraryAnnotationId);
  idMemoMap = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Arbitrary/IdMemoMap"), () => new Map);
  getDescription = /* @__PURE__ */ wrapGetDescription((ast, description) => {
    const annotation = getArbitraryAnnotation(ast);
    if (isSome2(annotation)) {
      return {
        ...description,
        annotations: [...description.annotations, annotation.value]
      };
    }
    return description;
  }, (ast, path) => {
    const [schemaId, meta] = parseMeta(ast);
    switch (ast._tag) {
      case "Refinement": {
        const from = getDescription(ast.from, path);
        switch (from._tag) {
          case "StringKeyword":
            return {
              ...from,
              constraints: [...from.constraints, makeStringConstraints(meta)],
              refinements: [...from.refinements, ast]
            };
          case "NumberKeyword": {
            const c = schemaId === NonNaNSchemaId ? makeNumberConstraints({
              noNaN: true
            }) : makeNumberConstraints({
              isInteger: "type" in meta && meta.type === "integer",
              noNaN: "type" in meta && meta.type === "number" ? true : undefined,
              noDefaultInfinity: "type" in meta && meta.type === "number" ? true : undefined,
              min: meta.exclusiveMinimum ?? meta.minimum,
              minExcluded: "exclusiveMinimum" in meta ? true : undefined,
              max: meta.exclusiveMaximum ?? meta.maximum,
              maxExcluded: "exclusiveMaximum" in meta ? true : undefined
            });
            return {
              ...from,
              constraints: [...from.constraints, c],
              refinements: [...from.refinements, ast]
            };
          }
          case "BigIntKeyword": {
            const c = getASTConstraints(ast);
            return {
              ...from,
              constraints: c !== undefined ? [...from.constraints, makeBigIntConstraints(c)] : from.constraints,
              refinements: [...from.refinements, ast]
            };
          }
          case "TupleType":
            return {
              ...from,
              constraints: [...from.constraints, makeArrayConstraints({
                minLength: meta.minItems,
                maxLength: meta.maxItems
              })],
              refinements: [...from.refinements, ast]
            };
          case "DateFromSelf":
            return {
              ...from,
              constraints: [...from.constraints, makeDateConstraints(meta)],
              refinements: [...from.refinements, ast]
            };
          default:
            return {
              ...from,
              refinements: [...from.refinements, ast]
            };
        }
      }
      case "Declaration": {
        if (schemaId === DateFromSelfSchemaId) {
          return {
            _tag: "DateFromSelf",
            constraints: [makeDateConstraints(meta)],
            path,
            refinements: [],
            annotations: []
          };
        }
        return {
          _tag: "Declaration",
          typeParameters: ast.typeParameters.map((ast2) => getDescription(ast2, path)),
          path,
          refinements: [],
          annotations: [],
          ast
        };
      }
      case "Literal": {
        return {
          _tag: "Literal",
          literal: ast.literal,
          path,
          refinements: [],
          annotations: []
        };
      }
      case "UniqueSymbol": {
        return {
          _tag: "UniqueSymbol",
          symbol: ast.symbol,
          path,
          refinements: [],
          annotations: []
        };
      }
      case "Enums": {
        return {
          _tag: "Enums",
          enums: ast.enums,
          path,
          refinements: [],
          annotations: [],
          ast
        };
      }
      case "TemplateLiteral": {
        return {
          _tag: "TemplateLiteral",
          head: ast.head,
          spans: ast.spans.map((span2) => ({
            description: getDescription(span2.type, path),
            literal: span2.literal
          })),
          path,
          refinements: [],
          annotations: []
        };
      }
      case "StringKeyword":
        return {
          _tag: "StringKeyword",
          constraints: [],
          path,
          refinements: [],
          annotations: []
        };
      case "NumberKeyword":
        return {
          _tag: "NumberKeyword",
          constraints: [],
          path,
          refinements: [],
          annotations: []
        };
      case "BigIntKeyword":
        return {
          _tag: "BigIntKeyword",
          constraints: [],
          path,
          refinements: [],
          annotations: []
        };
      case "TupleType":
        return {
          _tag: "TupleType",
          constraints: [],
          elements: ast.elements.map((element, i2) => ({
            isOptional: element.isOptional,
            description: getDescription(element.type, [...path, i2])
          })),
          rest: ast.rest.map((element, i2) => getDescription(element.type, [...path, i2])),
          path,
          refinements: [],
          annotations: []
        };
      case "TypeLiteral":
        return {
          _tag: "TypeLiteral",
          propertySignatures: ast.propertySignatures.map((ps) => ({
            isOptional: ps.isOptional,
            name: ps.name,
            value: getDescription(ps.type, [...path, ps.name])
          })),
          indexSignatures: ast.indexSignatures.map((is) => ({
            parameter: getDescription(is.parameter, path),
            value: getDescription(is.type, path)
          })),
          path,
          refinements: [],
          annotations: []
        };
      case "Union":
        return {
          _tag: "Union",
          members: ast.types.map((member, i2) => getDescription(member, [...path, i2])),
          path,
          refinements: [],
          annotations: []
        };
      case "Suspend": {
        const memoId = idMemoMap.get(ast);
        if (memoId !== undefined) {
          return {
            _tag: "Ref",
            id: memoId,
            ast,
            path,
            refinements: [],
            annotations: []
          };
        }
        counter++;
        const id = `__id-${counter}__`;
        idMemoMap.set(ast, id);
        return {
          _tag: "Suspend",
          id,
          ast,
          description: () => getDescription(ast.f(), path),
          path,
          refinements: [],
          annotations: []
        };
      }
      case "Transformation":
        return getDescription(ast.to, path);
      case "NeverKeyword":
        return {
          _tag: "NeverKeyword",
          path,
          refinements: [],
          annotations: [],
          ast
        };
      default: {
        return {
          _tag: "Keyword",
          value: ast._tag,
          path,
          refinements: [],
          annotations: []
        };
      }
    }
  });
  constArrayConstraints = /* @__PURE__ */ makeArrayConstraints({});
  arbitraryMemoMap = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Arbitrary/arbitraryMemoMap"), () => new WeakMap);
  go = /* @__PURE__ */ wrapGo((description, ctx, lazyArb) => {
    const annotation = description.annotations[description.annotations.length - 1];
    if (annotation === undefined) {
      switch (description._tag) {
        case "Declaration":
        case "NeverKeyword":
          throw new Error(getArbitraryMissingAnnotationErrorMessage(description.path, description.ast));
        case "Enums":
          if (description.enums.length === 0) {
            throw new Error(getArbitraryEmptyEnumErrorMessage(description.path));
          }
      }
    }
    const filters = description.refinements.map((ast) => (a) => isNone2(ast.filter(a, defaultParseOption, ast)));
    if (annotation === undefined) {
      return applyFilters(filters, lazyArb);
    }
    const constraints = getContextConstraints(description);
    if (constraints !== undefined) {
      ctx = {
        ...ctx,
        constraints
      };
    }
    if (description._tag === "Declaration") {
      return applyFilters(filters, annotation(...description.typeParameters.map((p) => go(p, ctx)), ctx));
    }
    if (description.refinements.length > 0) {
      return applyFilters(filters, annotation(lazyArb, ctx));
    }
    return annotation(ctx);
  }, (description, ctx) => {
    switch (description._tag) {
      case "DateFromSelf": {
        const constraints = buildDateConstraints(description);
        return (fc) => fc.date(constraints?.constraints);
      }
      case "Declaration":
      case "NeverKeyword":
        return absurd2(`BUG: cannot generate an arbitrary for ${description._tag}`);
      case "Literal":
        return (fc) => fc.constant(description.literal);
      case "UniqueSymbol":
        return (fc) => fc.constant(description.symbol);
      case "Keyword": {
        switch (description.value) {
          case "UndefinedKeyword":
            return (fc) => fc.constant(undefined);
          case "VoidKeyword":
          case "UnknownKeyword":
          case "AnyKeyword":
            return (fc) => fc.anything();
          case "BooleanKeyword":
            return (fc) => fc.boolean();
          case "SymbolKeyword":
            return (fc) => fc.string().map((s) => Symbol.for(s));
          case "ObjectKeyword":
            return (fc) => fc.oneof(fc.object(), fc.array(fc.anything()));
        }
      }
      case "Enums":
        return (fc) => fc.oneof(...description.enums.map(([_, value]) => fc.constant(value)));
      case "TemplateLiteral": {
        return (fc) => {
          const string5 = fc.string({
            maxLength: 5
          });
          const number4 = fc.float({
            noDefaultInfinity: true,
            noNaN: true
          });
          const getTemplateLiteralArb = (description2) => {
            const components = description2.head !== "" ? [fc.constant(description2.head)] : [];
            const getTemplateLiteralSpanTypeArb = (description3) => {
              switch (description3._tag) {
                case "StringKeyword":
                  return string5;
                case "NumberKeyword":
                  return number4;
                case "Literal":
                  return fc.constant(String(description3.literal));
                case "Union":
                  return fc.oneof(...description3.members.map(getTemplateLiteralSpanTypeArb));
                case "TemplateLiteral":
                  return getTemplateLiteralArb(description3);
                default:
                  return fc.constant("");
              }
            };
            description2.spans.forEach((span2) => {
              components.push(getTemplateLiteralSpanTypeArb(span2.description));
              if (span2.literal !== "") {
                components.push(fc.constant(span2.literal));
              }
            });
            return fc.tuple(...components).map((spans) => spans.join(""));
          };
          return getTemplateLiteralArb(description);
        };
      }
      case "StringKeyword": {
        const constraints = buildStringConstraints(description);
        const pattern = constraints?.pattern;
        return pattern !== undefined ? (fc) => fc.stringMatching(new RegExp(pattern)) : (fc) => fc.string(constraints?.constraints);
      }
      case "NumberKeyword": {
        const constraints = buildNumberConstraints(description);
        return constraints?.isInteger ? (fc) => fc.integer(constraints.constraints) : (fc) => fc.float(constraints?.constraints);
      }
      case "BigIntKeyword": {
        const constraints = buildBigIntConstraints(description);
        return (fc) => fc.bigInt(constraints?.constraints ?? {});
      }
      case "TupleType": {
        const elements = [];
        let hasOptionals = false;
        for (const element of description.elements) {
          elements.push(go(element.description, ctx));
          if (element.isOptional) {
            hasOptionals = true;
          }
        }
        const rest = description.rest.map((d) => go(d, ctx));
        return (fc) => {
          let output = fc.tuple(...elements.map((arb) => arb(fc)));
          if (hasOptionals) {
            const indexes = fc.tuple(...description.elements.map((element) => element.isOptional ? fc.boolean() : fc.constant(true)));
            output = output.chain((tuple5) => indexes.map((booleans) => {
              for (const [i2, b] of booleans.reverse().entries()) {
                if (!b) {
                  tuple5.splice(booleans.length - i2, 1);
                }
              }
              return tuple5;
            }));
          }
          if (isNonEmptyReadonlyArray(rest)) {
            const constraints = buildArrayConstraints(description) ?? constArrayConstraints;
            const [head3, ...tail2] = rest;
            const item = head3(fc);
            output = output.chain((as2) => {
              const len = as2.length;
              const restArrayConstraints = subtractElementsLength(constraints.constraints, len);
              if (restArrayConstraints.maxLength === 0) {
                return fc.constant(as2);
              }
              const arr = ctx.depthIdentifier !== undefined ? getSuspendedArray(fc, ctx.depthIdentifier, ctx.maxDepth, item, restArrayConstraints) : fc.array(item, restArrayConstraints);
              if (len === 0) {
                return arr;
              }
              return arr.map((rest2) => [...as2, ...rest2]);
            });
            for (let j = 0;j < tail2.length; j++) {
              output = output.chain((as2) => tail2[j](fc).map((a) => [...as2, a]));
            }
          }
          return output;
        };
      }
      case "TypeLiteral": {
        const propertySignatures = [];
        const requiredKeys = [];
        for (const ps of description.propertySignatures) {
          if (!ps.isOptional) {
            requiredKeys.push(ps.name);
          }
          propertySignatures.push(go(ps.value, ctx));
        }
        const indexSignatures = description.indexSignatures.map((is) => [go(is.parameter, ctx), go(is.value, ctx)]);
        return (fc) => {
          const pps = {};
          for (let i2 = 0;i2 < propertySignatures.length; i2++) {
            const ps = description.propertySignatures[i2];
            pps[ps.name] = propertySignatures[i2](fc);
          }
          let output = fc.record(pps, {
            requiredKeys
          });
          for (let i2 = 0;i2 < indexSignatures.length; i2++) {
            const key = indexSignatures[i2][0](fc);
            const value = indexSignatures[i2][1](fc);
            output = output.chain((o) => {
              const item = fc.tuple(key, value);
              const arr = ctx.depthIdentifier !== undefined ? getSuspendedArray(fc, ctx.depthIdentifier, ctx.maxDepth, item, {
                maxLength: 2
              }) : fc.array(item);
              return arr.map((tuples) => ({
                ...Object.fromEntries(tuples),
                ...o
              }));
            });
          }
          return output;
        };
      }
      case "Union": {
        const members = description.members.map((member) => go(member, ctx));
        return (fc) => fc.oneof(...members.map((arb) => arb(fc)));
      }
      case "Suspend": {
        const memo2 = arbitraryMemoMap.get(description.ast);
        if (memo2) {
          return memo2;
        }
        if (ctx.depthIdentifier === undefined) {
          ctx = {
            ...ctx,
            depthIdentifier: description.id
          };
        }
        const get4 = memoizeThunk(() => {
          return go(description.description(), ctx);
        });
        const out = (fc) => fc.constant(null).chain(() => get4()(fc));
        arbitraryMemoMap.set(description.ast, out);
        return out;
      }
      case "Ref": {
        const memo2 = arbitraryMemoMap.get(description.ast);
        if (memo2) {
          return memo2;
        }
        throw new Error(`BUG: Ref ${JSON.stringify(description.id)} not found`);
      }
    }
  });
});

// node_modules/effect/dist/esm/BigDecimal.js
var exports_BigDecimal = {};
__export(exports_BigDecimal, {
  unsafeToNumber: () => unsafeToNumber,
  unsafeRemainder: () => unsafeRemainder,
  unsafeMakeNormalized: () => unsafeMakeNormalized,
  unsafeFromString: () => unsafeFromString,
  unsafeFromNumber: () => unsafeFromNumber,
  unsafeDivide: () => unsafeDivide2,
  toExponential: () => toExponential,
  sum: () => sum2,
  subtract: () => subtract2,
  sign: () => sign2,
  scale: () => scale,
  safeFromNumber: () => safeFromNumber,
  roundTerminal: () => roundTerminal,
  remainder: () => remainder2,
  normalize: () => normalize,
  negate: () => negate2,
  multiply: () => multiply2,
  min: () => min4,
  max: () => max5,
  make: () => make6,
  lessThanOrEqualTo: () => lessThanOrEqualTo3,
  lessThan: () => lessThan3,
  isZero: () => isZero,
  isPositive: () => isPositive,
  isNegative: () => isNegative,
  isInteger: () => isInteger,
  isBigDecimal: () => isBigDecimal,
  greaterThanOrEqualTo: () => greaterThanOrEqualTo3,
  greaterThan: () => greaterThan3,
  fromString: () => fromString,
  fromNumber: () => fromNumber,
  fromBigInt: () => fromBigInt,
  format: () => format3,
  equals: () => equals3,
  divide: () => divide2,
  clamp: () => clamp4,
  between: () => between3,
  abs: () => abs,
  TypeId: () => TypeId5,
  Order: () => Order2,
  Equivalence: () => Equivalence2
});
var DEFAULT_PRECISION = 100, FINITE_INT_REGEX, TypeId5, BigDecimalProto, isBigDecimal = (u) => hasProperty(u, TypeId5), make6 = (value, scale) => {
  const o = Object.create(BigDecimalProto);
  o.value = value;
  o.scale = scale;
  return o;
}, unsafeMakeNormalized = (value, scale) => {
  if (value !== bigint0 && value % bigint10 === bigint0) {
    throw new RangeError("Value must be normalized");
  }
  const o = make6(value, scale);
  o.normalized = o;
  return o;
}, bigint0, bigint1, bigint10, zero, normalize = (self) => {
  if (self.normalized === undefined) {
    if (self.value === bigint0) {
      self.normalized = zero;
    } else {
      const digits = `${self.value}`;
      let trail = 0;
      for (let i2 = digits.length - 1;i2 >= 0; i2--) {
        if (digits[i2] === "0") {
          trail++;
        } else {
          break;
        }
      }
      if (trail === 0) {
        self.normalized = self;
      }
      const value = BigInt(digits.substring(0, digits.length - trail));
      const scale = self.scale - trail;
      self.normalized = unsafeMakeNormalized(value, scale);
    }
  }
  return self.normalized;
}, scale, sum2, multiply2, subtract2, divideWithPrecision = (num, den, scale2, precision) => {
  const numNegative = num < bigint0;
  const denNegative = den < bigint0;
  const negateResult = numNegative !== denNegative;
  num = numNegative ? -num : num;
  den = denNegative ? -den : den;
  while (num < den) {
    num *= bigint10;
    scale2++;
  }
  let quotient = num / den;
  let remainder2 = num % den;
  if (remainder2 === bigint0) {
    return make6(negateResult ? -quotient : quotient, scale2);
  }
  let count = `${quotient}`.length;
  remainder2 *= bigint10;
  while (remainder2 !== bigint0 && count < precision) {
    const q = remainder2 / den;
    const r = remainder2 % den;
    quotient = quotient * bigint10 + q;
    remainder2 = r * bigint10;
    count++;
    scale2++;
  }
  if (remainder2 !== bigint0) {
    quotient += roundTerminal(remainder2 / den);
  }
  return make6(negateResult ? -quotient : quotient, scale2);
}, roundTerminal = (n) => {
  const pos = n >= bigint0 ? 0 : 1;
  return Number(`${n}`[pos]) < 5 ? bigint0 : bigint1;
}, divide2, unsafeDivide2, Order2, lessThan3, lessThanOrEqualTo3, greaterThan3, greaterThanOrEqualTo3, between3, clamp4, min4, max5, sign2 = (n) => n.value === bigint0 ? 0 : n.value < bigint0 ? -1 : 1, abs = (n) => n.value < bigint0 ? make6(-n.value, n.scale) : n, negate2 = (n) => make6(-n.value, n.scale), remainder2, unsafeRemainder, Equivalence2, equals3, fromBigInt = (n) => make6(n, 0), unsafeFromNumber = (n) => getOrThrowWith2(safeFromNumber(n), () => new RangeError(`Number must be finite, got ${n}`)), fromNumber, safeFromNumber = (n) => {
  if (!Number.isFinite(n)) {
    return none2();
  }
  const string5 = `${n}`;
  if (string5.includes("e")) {
    return fromString(string5);
  }
  const [lead, trail = ""] = string5.split(".");
  return some3(make6(BigInt(`${lead}${trail}`), trail.length));
}, fromString = (s) => {
  if (s === "") {
    return some3(zero);
  }
  let base;
  let exp;
  const seperator = s.search(/[eE]/);
  if (seperator !== -1) {
    const trail = s.slice(seperator + 1);
    base = s.slice(0, seperator);
    exp = Number(trail);
    if (base === "" || !Number.isSafeInteger(exp) || !FINITE_INT_REGEX.test(trail)) {
      return none2();
    }
  } else {
    base = s;
    exp = 0;
  }
  let digits;
  let offset;
  const dot = base.search(/\./);
  if (dot !== -1) {
    const lead = base.slice(0, dot);
    const trail = base.slice(dot + 1);
    digits = `${lead}${trail}`;
    offset = trail.length;
  } else {
    digits = base;
    offset = 0;
  }
  if (!FINITE_INT_REGEX.test(digits)) {
    return none2();
  }
  const scale2 = offset - exp;
  if (!Number.isSafeInteger(scale2)) {
    return none2();
  }
  return some3(make6(BigInt(digits), scale2));
}, unsafeFromString = (s) => getOrThrowWith2(fromString(s), () => new Error("Invalid numerical string")), format3 = (n) => {
  const normalized = normalize(n);
  if (Math.abs(normalized.scale) >= 16) {
    return toExponential(normalized);
  }
  const negative = normalized.value < bigint0;
  const absolute = negative ? `${normalized.value}`.substring(1) : `${normalized.value}`;
  let before;
  let after;
  if (normalized.scale >= absolute.length) {
    before = "0";
    after = "0".repeat(normalized.scale - absolute.length) + absolute;
  } else {
    const location = absolute.length - normalized.scale;
    if (location > absolute.length) {
      const zeros = location - absolute.length;
      before = `${absolute}${"0".repeat(zeros)}`;
      after = "";
    } else {
      after = absolute.slice(location);
      before = absolute.slice(0, location);
    }
  }
  const complete = after === "" ? before : `${before}.${after}`;
  return negative ? `-${complete}` : complete;
}, toExponential = (n) => {
  if (isZero(n)) {
    return "0e+0";
  }
  const normalized = normalize(n);
  const digits = `${abs(normalized).value}`;
  const head3 = digits.slice(0, 1);
  const tail2 = digits.slice(1);
  let output = `${isNegative(normalized) ? "-" : ""}${head3}`;
  if (tail2 !== "") {
    output += `.${tail2}`;
  }
  const exp = tail2.length - normalized.scale;
  return `${output}e${exp >= 0 ? "+" : ""}${exp}`;
}, unsafeToNumber = (n) => Number(format3(n)), isInteger = (n) => normalize(n).scale <= 0, isZero = (n) => n.value === bigint0, isNegative = (n) => n.value < bigint0, isPositive = (n) => n.value > bigint0;
var init_BigDecimal = __esm(() => {
  init_Equal();
  init_Equivalence();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Order();
  init_Predicate();
  FINITE_INT_REGEX = /^[+-]?\d+$/;
  TypeId5 = /* @__PURE__ */ Symbol.for("effect/BigDecimal");
  BigDecimalProto = {
    [TypeId5]: TypeId5,
    [symbol2]() {
      const normalized = normalize(this);
      return pipe(hash(normalized.value), combine2(number2(normalized.scale)), cached(this));
    },
    [symbol3](that) {
      return isBigDecimal(that) && equals3(this, that);
    },
    toString() {
      return `BigDecimal(${format3(this)})`;
    },
    toJSON() {
      return {
        _id: "BigDecimal",
        value: String(this.value),
        scale: this.scale
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  bigint0 = /* @__PURE__ */ BigInt(0);
  bigint1 = /* @__PURE__ */ BigInt(1);
  bigint10 = /* @__PURE__ */ BigInt(10);
  zero = /* @__PURE__ */ unsafeMakeNormalized(bigint0, 0);
  scale = /* @__PURE__ */ dual(2, (self, scale2) => {
    if (scale2 > self.scale) {
      return make6(self.value * bigint10 ** BigInt(scale2 - self.scale), scale2);
    }
    if (scale2 < self.scale) {
      return make6(self.value / bigint10 ** BigInt(self.scale - scale2), scale2);
    }
    return self;
  });
  sum2 = /* @__PURE__ */ dual(2, (self, that) => {
    if (that.value === bigint0) {
      return self;
    }
    if (self.value === bigint0) {
      return that;
    }
    if (self.scale > that.scale) {
      return make6(scale(that, self.scale).value + self.value, self.scale);
    }
    if (self.scale < that.scale) {
      return make6(scale(self, that.scale).value + that.value, that.scale);
    }
    return make6(self.value + that.value, self.scale);
  });
  multiply2 = /* @__PURE__ */ dual(2, (self, that) => {
    if (that.value === bigint0 || self.value === bigint0) {
      return zero;
    }
    return make6(self.value * that.value, self.scale + that.scale);
  });
  subtract2 = /* @__PURE__ */ dual(2, (self, that) => {
    if (that.value === bigint0) {
      return self;
    }
    if (self.value === bigint0) {
      return make6(-that.value, that.scale);
    }
    if (self.scale > that.scale) {
      return make6(self.value - scale(that, self.scale).value, self.scale);
    }
    if (self.scale < that.scale) {
      return make6(scale(self, that.scale).value - that.value, that.scale);
    }
    return make6(self.value - that.value, self.scale);
  });
  divide2 = /* @__PURE__ */ dual(2, (self, that) => {
    if (that.value === bigint0) {
      return none2();
    }
    if (self.value === bigint0) {
      return some3(zero);
    }
    const scale2 = self.scale - that.scale;
    if (self.value === that.value) {
      return some3(make6(bigint1, scale2));
    }
    return some3(divideWithPrecision(self.value, that.value, scale2, DEFAULT_PRECISION));
  });
  unsafeDivide2 = /* @__PURE__ */ dual(2, (self, that) => {
    if (that.value === bigint0) {
      throw new RangeError("Division by zero");
    }
    if (self.value === bigint0) {
      return zero;
    }
    const scale2 = self.scale - that.scale;
    if (self.value === that.value) {
      return make6(bigint1, scale2);
    }
    return divideWithPrecision(self.value, that.value, scale2, DEFAULT_PRECISION);
  });
  Order2 = /* @__PURE__ */ make2((self, that) => {
    const scmp = number3(sign2(self), sign2(that));
    if (scmp !== 0) {
      return scmp;
    }
    if (self.scale > that.scale) {
      return bigint2(self.value, scale(that, self.scale).value);
    }
    if (self.scale < that.scale) {
      return bigint2(scale(self, that.scale).value, that.value);
    }
    return bigint2(self.value, that.value);
  });
  lessThan3 = /* @__PURE__ */ lessThan(Order2);
  lessThanOrEqualTo3 = /* @__PURE__ */ lessThanOrEqualTo(Order2);
  greaterThan3 = /* @__PURE__ */ greaterThan(Order2);
  greaterThanOrEqualTo3 = /* @__PURE__ */ greaterThanOrEqualTo(Order2);
  between3 = /* @__PURE__ */ between(Order2);
  clamp4 = /* @__PURE__ */ clamp(Order2);
  min4 = /* @__PURE__ */ min(Order2);
  max5 = /* @__PURE__ */ max2(Order2);
  remainder2 = /* @__PURE__ */ dual(2, (self, divisor) => {
    if (divisor.value === bigint0) {
      return none2();
    }
    const max6 = Math.max(self.scale, divisor.scale);
    return some3(make6(scale(self, max6).value % scale(divisor, max6).value, max6));
  });
  unsafeRemainder = /* @__PURE__ */ dual(2, (self, divisor) => {
    if (divisor.value === bigint0) {
      throw new RangeError("Division by zero");
    }
    const max6 = Math.max(self.scale, divisor.scale);
    return make6(scale(self, max6).value % scale(divisor, max6).value, max6);
  });
  Equivalence2 = /* @__PURE__ */ make((self, that) => {
    if (self.scale > that.scale) {
      return scale(that, self.scale).value === self.value;
    }
    if (self.scale < that.scale) {
      return scale(self, that.scale).value === that.value;
    }
    return self.value === that.value;
  });
  equals3 = /* @__PURE__ */ dual(2, (self, that) => Equivalence2(self, that));
  fromNumber = unsafeFromNumber;
});

// node_modules/effect/dist/esm/BigInt.js
var exports_BigInt = {};
__export(exports_BigInt, {
  unsafeSqrt: () => unsafeSqrt,
  unsafeDivide: () => unsafeDivide3,
  toNumber: () => toNumber,
  sumAll: () => sumAll2,
  sum: () => sum3,
  subtract: () => subtract3,
  sqrt: () => sqrt,
  sign: () => sign3,
  multiplyAll: () => multiplyAll2,
  multiply: () => multiply3,
  min: () => min5,
  max: () => max6,
  lessThanOrEqualTo: () => lessThanOrEqualTo4,
  lessThan: () => lessThan4,
  lcm: () => lcm,
  isBigInt: () => isBigInt2,
  increment: () => increment2,
  greaterThanOrEqualTo: () => greaterThanOrEqualTo4,
  greaterThan: () => greaterThan4,
  gcd: () => gcd,
  fromString: () => fromString2,
  fromNumber: () => fromNumber2,
  divide: () => divide3,
  decrement: () => decrement2,
  clamp: () => clamp5,
  between: () => between4,
  abs: () => abs2,
  Order: () => Order3,
  Equivalence: () => Equivalence3
});
var bigint02, bigint12, bigint22, isBigInt2, sum3, multiply3, subtract3, divide3, unsafeDivide3, increment2 = (n) => n + bigint12, decrement2 = (n) => n - bigint12, Equivalence3, Order3, lessThan4, lessThanOrEqualTo4, greaterThan4, greaterThanOrEqualTo4, between4, clamp5, min5, max6, sign3 = (n) => Order3(n, bigint02), abs2 = (n) => n < bigint02 ? -n : n, gcd, lcm, unsafeSqrt = (n) => {
  if (n < bigint02) {
    throw new RangeError("Cannot take the square root of a negative number");
  }
  if (n < bigint22) {
    return n;
  }
  let x2 = n / bigint22;
  while (x2 * x2 > n) {
    x2 = (n / x2 + x2) / bigint22;
  }
  return x2;
}, sqrt = (n) => greaterThanOrEqualTo4(n, bigint02) ? some3(unsafeSqrt(n)) : none2(), sumAll2 = (collection) => {
  let out = bigint02;
  for (const n of collection) {
    out += n;
  }
  return out;
}, multiplyAll2 = (collection) => {
  let out = bigint12;
  for (const n of collection) {
    if (n === bigint02) {
      return bigint02;
    }
    out *= n;
  }
  return out;
}, toNumber = (b) => {
  if (b > BigInt(Number.MAX_SAFE_INTEGER) || b < BigInt(Number.MIN_SAFE_INTEGER)) {
    return none2();
  }
  return some3(Number(b));
}, fromString2 = (s) => {
  try {
    return s.trim() === "" ? none2() : some3(BigInt(s));
  } catch (_) {
    return none2();
  }
}, fromNumber2 = (n) => {
  if (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER) {
    return none2();
  }
  try {
    return some3(BigInt(n));
  } catch (_) {
    return none2();
  }
};
var init_BigInt = __esm(() => {
  init_Equivalence();
  init_Function();
  init_Option();
  init_Order();
  init_Predicate();
  bigint02 = /* @__PURE__ */ BigInt(0);
  bigint12 = /* @__PURE__ */ BigInt(1);
  bigint22 = /* @__PURE__ */ BigInt(2);
  isBigInt2 = isBigInt;
  sum3 = /* @__PURE__ */ dual(2, (self, that) => self + that);
  multiply3 = /* @__PURE__ */ dual(2, (self, that) => self * that);
  subtract3 = /* @__PURE__ */ dual(2, (self, that) => self - that);
  divide3 = /* @__PURE__ */ dual(2, (self, that) => that === bigint02 ? none2() : some3(self / that));
  unsafeDivide3 = /* @__PURE__ */ dual(2, (self, that) => self / that);
  Equivalence3 = bigint;
  Order3 = bigint2;
  lessThan4 = /* @__PURE__ */ lessThan(Order3);
  lessThanOrEqualTo4 = /* @__PURE__ */ lessThanOrEqualTo(Order3);
  greaterThan4 = /* @__PURE__ */ greaterThan(Order3);
  greaterThanOrEqualTo4 = /* @__PURE__ */ greaterThanOrEqualTo(Order3);
  between4 = /* @__PURE__ */ between(Order3);
  clamp5 = /* @__PURE__ */ clamp(Order3);
  min5 = /* @__PURE__ */ min(Order3);
  max6 = /* @__PURE__ */ max2(Order3);
  gcd = /* @__PURE__ */ dual(2, (self, that) => {
    while (that !== bigint02) {
      const t = that;
      that = self % that;
      self = t;
    }
    return self;
  });
  lcm = /* @__PURE__ */ dual(2, (self, that) => self * that / gcd(self, that));
});

// node_modules/effect/dist/esm/Boolean.js
var exports_Boolean = {};
__export(exports_Boolean, {
  xor: () => xor2,
  some: () => some7,
  or: () => or2,
  not: () => not2,
  nor: () => nor2,
  nand: () => nand2,
  match: () => match4,
  isBoolean: () => isBoolean3,
  implies: () => implies2,
  every: () => every4,
  eqv: () => eqv2,
  and: () => and2,
  Order: () => Order4,
  Equivalence: () => Equivalence4
});
var isBoolean3, match4, Equivalence4, Order4, not2 = (self) => !self, and2, nand2, or2, nor2, xor2, eqv2, implies2, every4 = (collection) => {
  for (const b of collection) {
    if (!b) {
      return false;
    }
  }
  return true;
}, some7 = (collection) => {
  for (const b of collection) {
    if (b) {
      return true;
    }
  }
  return false;
};
var init_Boolean = __esm(() => {
  init_Equivalence();
  init_Function();
  init_Order();
  init_Predicate();
  isBoolean3 = isBoolean2;
  match4 = /* @__PURE__ */ dual(2, (value, options) => value ? options.onTrue() : options.onFalse());
  Equivalence4 = boolean;
  Order4 = boolean2;
  and2 = /* @__PURE__ */ dual(2, (self, that) => self && that);
  nand2 = /* @__PURE__ */ dual(2, (self, that) => !(self && that));
  or2 = /* @__PURE__ */ dual(2, (self, that) => self || that);
  nor2 = /* @__PURE__ */ dual(2, (self, that) => !(self || that));
  xor2 = /* @__PURE__ */ dual(2, (self, that) => !self && that || self && !that);
  eqv2 = /* @__PURE__ */ dual(2, (self, that) => !xor2(self, that));
  implies2 = /* @__PURE__ */ dual(2, (self, that) => self ? that : true);
});

// node_modules/effect/dist/esm/Brand.js
var exports_Brand = {};
__export(exports_Brand, {
  refined: () => refined,
  nominal: () => nominal,
  errors: () => errors,
  error: () => error,
  all: () => all6,
  RefinedConstructorsTypeId: () => RefinedConstructorsTypeId,
  BrandTypeId: () => BrandTypeId
});
function refined(...args) {
  const either = args.length === 2 ? (unbranded) => args[0](unbranded) ? right2(unbranded) : left2(args[1](unbranded)) : (unbranded) => {
    return match2(args[0](unbranded), {
      onNone: () => right2(unbranded),
      onSome: left2
    });
  };
  return Object.assign((unbranded) => getOrThrowWith(either(unbranded), identity), {
    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,
    option: (args2) => getRight3(either(args2)),
    either,
    is: (args2) => isRight2(either(args2))
  });
}
var BrandTypeId, RefinedConstructorsTypeId, error = (message, meta) => [{
  message,
  meta
}], errors = (...errors2) => flatten3(errors2), nominal = () => {
  return Object.assign((args) => args, {
    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,
    option: (args) => some3(args),
    either: (args) => right2(args),
    is: (_args) => true
  });
}, all6 = (...brands) => {
  const either = (args) => {
    let result2 = right2(args);
    for (const brand of brands) {
      const nextResult = brand.either(args);
      if (isLeft2(result2) && isLeft2(nextResult)) {
        result2 = left2([...result2.left, ...nextResult.left]);
      } else {
        result2 = isLeft2(result2) ? result2 : nextResult;
      }
    }
    return result2;
  };
  return Object.assign((args) => match(either(args), {
    onLeft: (e) => {
      throw e;
    },
    onRight: identity
  }), {
    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,
    option: (args) => getRight3(either(args)),
    either,
    is: (args) => isRight2(either(args))
  });
};
var init_Brand = __esm(() => {
  init_Array();
  init_Either();
  init_Function();
  init_Option();
  BrandTypeId = /* @__PURE__ */ Symbol.for("effect/Brand");
  RefinedConstructorsTypeId = /* @__PURE__ */ Symbol.for("effect/Brand/Refined");
});

// node_modules/effect/dist/esm/internal/context.js
var TagTypeId, ReferenceTypeId, STMSymbolKey = "effect/STM", STMTypeId, TagProto, ReferenceProto, makeGenericTag = (key) => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 2;
  const creationError = new Error;
  Error.stackTraceLimit = limit;
  const tag = Object.create(TagProto);
  Object.defineProperty(tag, "stack", {
    get() {
      return creationError.stack;
    }
  });
  tag.key = key;
  return tag;
}, Tag = (id) => () => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 2;
  const creationError = new Error;
  Error.stackTraceLimit = limit;
  function TagClass() {}
  Object.setPrototypeOf(TagClass, TagProto);
  TagClass.key = id;
  Object.defineProperty(TagClass, "stack", {
    get() {
      return creationError.stack;
    }
  });
  return TagClass;
}, Reference = () => (id, options) => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 2;
  const creationError = new Error;
  Error.stackTraceLimit = limit;
  function ReferenceClass() {}
  Object.setPrototypeOf(ReferenceClass, ReferenceProto);
  ReferenceClass.key = id;
  ReferenceClass.defaultValue = options.defaultValue;
  Object.defineProperty(ReferenceClass, "stack", {
    get() {
      return creationError.stack;
    }
  });
  return ReferenceClass;
}, TypeId6, ContextProto, makeContext = (unsafeMap) => {
  const context2 = Object.create(ContextProto);
  context2.unsafeMap = unsafeMap;
  return context2;
}, serviceNotFoundError = (tag) => {
  const error2 = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : ""}`);
  if (tag.stack) {
    const lines = tag.stack.split(`
`);
    if (lines.length > 2) {
      const afterAt = lines[2].match(/at (.*)/);
      if (afterAt) {
        error2.message = error2.message + ` (defined at ${afterAt[1]})`;
      }
    }
  }
  if (error2.stack) {
    const lines = error2.stack.split(`
`);
    lines.splice(1, 3);
    error2.stack = lines.join(`
`);
  }
  return error2;
}, isContext = (u) => hasProperty(u, TypeId6), isTag = (u) => hasProperty(u, TagTypeId), isReference = (u) => hasProperty(u, ReferenceTypeId), _empty, empty5 = () => _empty, make7 = (tag, service) => makeContext(new Map([[tag.key, service]])), add, defaultValueCache, getDefaultValue = (tag) => {
  if (defaultValueCache.has(tag.key)) {
    return defaultValueCache.get(tag.key);
  }
  const value = tag.defaultValue();
  defaultValueCache.set(tag.key, value);
  return value;
}, unsafeGetReference = (self, tag) => {
  return self.unsafeMap.has(tag.key) ? self.unsafeMap.get(tag.key) : getDefaultValue(tag);
}, unsafeGet2, get4, getOrElse3, getOption, merge2, mergeAll = (...ctxs) => {
  const map7 = new Map;
  for (const ctx of ctxs) {
    for (const [tag, s] of ctx.unsafeMap) {
      map7.set(tag, s);
    }
  }
  return makeContext(map7);
}, pick2 = (...tags) => (self) => {
  const tagSet = new Set(tags.map((_) => _.key));
  const newEnv = new Map;
  for (const [tag, s] of self.unsafeMap.entries()) {
    if (tagSet.has(tag)) {
      newEnv.set(tag, s);
    }
  }
  return makeContext(newEnv);
}, omit2 = (...tags) => (self) => {
  const newEnv = new Map(self.unsafeMap);
  for (const tag of tags) {
    newEnv.delete(tag.key);
  }
  return makeContext(newEnv);
};
var init_context2 = __esm(() => {
  init_Equal();
  init_Function();
  init_GlobalValue();
  init_Hash();
  init_Inspectable();
  init_Predicate();
  init_effectable();
  init_option();
  TagTypeId = /* @__PURE__ */ Symbol.for("effect/Context/Tag");
  ReferenceTypeId = /* @__PURE__ */ Symbol.for("effect/Context/Reference");
  STMTypeId = /* @__PURE__ */ Symbol.for(STMSymbolKey);
  TagProto = {
    ...EffectPrototype,
    _op: "Tag",
    [STMTypeId]: effectVariance,
    [TagTypeId]: {
      _Service: (_) => _,
      _Identifier: (_) => _
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "Tag",
        key: this.key,
        stack: this.stack
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    of(self) {
      return self;
    },
    context(self) {
      return make7(this, self);
    }
  };
  ReferenceProto = {
    ...TagProto,
    [ReferenceTypeId]: ReferenceTypeId
  };
  TypeId6 = /* @__PURE__ */ Symbol.for("effect/Context");
  ContextProto = {
    [TypeId6]: {
      _Services: (_) => _
    },
    [symbol3](that) {
      if (isContext(that)) {
        if (this.unsafeMap.size === that.unsafeMap.size) {
          for (const k of this.unsafeMap.keys()) {
            if (!that.unsafeMap.has(k) || !equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {
              return false;
            }
          }
          return true;
        }
      }
      return false;
    },
    [symbol2]() {
      return cached(this, number2(this.unsafeMap.size));
    },
    pipe() {
      return pipeArguments(this, arguments);
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "Context",
        services: Array.from(this.unsafeMap).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
  };
  _empty = /* @__PURE__ */ makeContext(/* @__PURE__ */ new Map);
  add = /* @__PURE__ */ dual(3, (self, tag, service) => {
    const map7 = new Map(self.unsafeMap);
    map7.set(tag.key, service);
    return makeContext(map7);
  });
  defaultValueCache = /* @__PURE__ */ globalValue("effect/Context/defaultValueCache", () => new Map);
  unsafeGet2 = /* @__PURE__ */ dual(2, (self, tag) => {
    if (!self.unsafeMap.has(tag.key)) {
      if (ReferenceTypeId in tag)
        return getDefaultValue(tag);
      throw serviceNotFoundError(tag);
    }
    return self.unsafeMap.get(tag.key);
  });
  get4 = unsafeGet2;
  getOrElse3 = /* @__PURE__ */ dual(3, (self, tag, orElse3) => {
    if (!self.unsafeMap.has(tag.key)) {
      return isReference(tag) ? getDefaultValue(tag) : orElse3();
    }
    return self.unsafeMap.get(tag.key);
  });
  getOption = /* @__PURE__ */ dual(2, (self, tag) => {
    if (!self.unsafeMap.has(tag.key)) {
      return isReference(tag) ? some2(getDefaultValue(tag)) : none;
    }
    return some2(self.unsafeMap.get(tag.key));
  });
  merge2 = /* @__PURE__ */ dual(2, (self, that) => {
    const map7 = new Map(self.unsafeMap);
    for (const [tag, s] of that.unsafeMap) {
      map7.set(tag, s);
    }
    return makeContext(map7);
  });
});

// node_modules/effect/dist/esm/Context.js
var exports_Context = {};
__export(exports_Context, {
  unsafeMake: () => unsafeMake,
  unsafeGet: () => unsafeGet3,
  pick: () => pick3,
  omit: () => omit3,
  mergeAll: () => mergeAll2,
  merge: () => merge3,
  make: () => make8,
  isTag: () => isTag2,
  isReference: () => isReference2,
  isContext: () => isContext2,
  getOrElse: () => getOrElse4,
  getOption: () => getOption2,
  get: () => get5,
  empty: () => empty6,
  add: () => add2,
  Tag: () => Tag2,
  Reference: () => Reference2,
  GenericTag: () => GenericTag
});
var GenericTag, unsafeMake, isContext2, isTag2, isReference2, empty6, make8, add2, get5, getOrElse4, unsafeGet3, getOption2, merge3, mergeAll2, pick3, omit3, Tag2, Reference2;
var init_Context = __esm(() => {
  init_context2();
  GenericTag = makeGenericTag;
  unsafeMake = makeContext;
  isContext2 = isContext;
  isTag2 = isTag;
  isReference2 = isReference;
  empty6 = empty5;
  make8 = make7;
  add2 = add;
  get5 = get4;
  getOrElse4 = getOrElse3;
  unsafeGet3 = unsafeGet2;
  getOption2 = getOption;
  merge3 = merge2;
  mergeAll2 = mergeAll;
  pick3 = pick2;
  omit3 = omit2;
  Tag2 = Tag;
  Reference2 = Reference;
});

// node_modules/effect/dist/esm/Chunk.js
var exports_Chunk = {};
__export(exports_Chunk, {
  zipWith: () => zipWith5,
  zip: () => zip3,
  unzip: () => unzip2,
  unsafeLast: () => unsafeLast,
  unsafeHead: () => unsafeHead2,
  unsafeGet: () => unsafeGet4,
  unsafeFromNonEmptyArray: () => unsafeFromNonEmptyArray,
  unsafeFromArray: () => unsafeFromArray,
  union: () => union3,
  toReadonlyArray: () => toReadonlyArray,
  toArray: () => toArray2,
  takeWhile: () => takeWhile3,
  takeRight: () => takeRight2,
  take: () => take3,
  tailNonEmpty: () => tailNonEmpty2,
  tail: () => tail2,
  splitWhere: () => splitWhere2,
  splitNonEmptyAt: () => splitNonEmptyAt2,
  splitAt: () => splitAt2,
  split: () => split2,
  sortWith: () => sortWith2,
  sort: () => sort2,
  some: () => some8,
  size: () => size3,
  separate: () => separate3,
  reverse: () => reverse3,
  replaceOption: () => replaceOption3,
  replace: () => replace3,
  remove: () => remove3,
  reduceRight: () => reduceRight2,
  reduce: () => reduce4,
  range: () => range3,
  prependAll: () => prependAll3,
  prepend: () => prepend3,
  partitionMap: () => partitionMap4,
  partition: () => partition3,
  of: () => of3,
  modifyOption: () => modifyOption3,
  modify: () => modify3,
  mapAccum: () => mapAccum2,
  map: () => map7,
  makeBy: () => makeBy3,
  make: () => make9,
  lastNonEmpty: () => lastNonEmpty2,
  last: () => last2,
  join: () => join2,
  isNonEmpty: () => isNonEmpty2,
  isEmpty: () => isEmpty2,
  isChunk: () => isChunk,
  intersection: () => intersection4,
  headNonEmpty: () => headNonEmpty2,
  head: () => head3,
  getEquivalence: () => getEquivalence6,
  get: () => get6,
  fromIterable: () => fromIterable3,
  forEach: () => forEach3,
  flatten: () => flatten5,
  flatMap: () => flatMap5,
  findLastIndex: () => findLastIndex2,
  findLast: () => findLast3,
  findFirstIndex: () => findFirstIndex2,
  findFirst: () => findFirst3,
  filterMapWhile: () => filterMapWhile3,
  filterMap: () => filterMap5,
  filter: () => filter5,
  every: () => every5,
  empty: () => empty7,
  dropWhile: () => dropWhile2,
  dropRight: () => dropRight2,
  drop: () => drop3,
  differenceWith: () => differenceWith2,
  difference: () => difference3,
  dedupeAdjacent: () => dedupeAdjacent3,
  dedupe: () => dedupe2,
  containsWith: () => containsWith4,
  contains: () => contains4,
  compact: () => compact,
  chunksOf: () => chunksOf3,
  appendAll: () => appendAll3,
  append: () => append3
});
function copy2(src, srcPos, dest, destPos, len) {
  for (let i2 = srcPos;i2 < Math.min(src.length, srcPos + len); i2++) {
    dest[destPos + i2 - srcPos] = src[i2];
  }
  return dest;
}
var TypeId7, emptyArray, getEquivalence6 = (isEquivalent) => make((self, that) => self.length === that.length && toReadonlyArray(self).every((value, i2) => isEquivalent(value, unsafeGet4(that, i2)))), _equivalence4, ChunkProto, makeChunk = (backing) => {
  const chunk = Object.create(ChunkProto);
  chunk.backing = backing;
  switch (backing._tag) {
    case "IEmpty": {
      chunk.length = 0;
      chunk.depth = 0;
      chunk.left = chunk;
      chunk.right = chunk;
      break;
    }
    case "IConcat": {
      chunk.length = backing.left.length + backing.right.length;
      chunk.depth = 1 + Math.max(backing.left.depth, backing.right.depth);
      chunk.left = backing.left;
      chunk.right = backing.right;
      break;
    }
    case "IArray": {
      chunk.length = backing.array.length;
      chunk.depth = 0;
      chunk.left = _empty2;
      chunk.right = _empty2;
      break;
    }
    case "ISingleton": {
      chunk.length = 1;
      chunk.depth = 0;
      chunk.left = _empty2;
      chunk.right = _empty2;
      break;
    }
    case "ISlice": {
      chunk.length = backing.length;
      chunk.depth = backing.chunk.depth + 1;
      chunk.left = _empty2;
      chunk.right = _empty2;
      break;
    }
  }
  return chunk;
}, isChunk = (u) => hasProperty(u, TypeId7), _empty2, empty7 = () => _empty2, make9 = (...as2) => unsafeFromNonEmptyArray(as2), of3 = (a) => makeChunk({
  _tag: "ISingleton",
  a
}), fromIterable3 = (self) => isChunk(self) ? self : unsafeFromArray(fromIterable2(self)), copyToArray = (self, array5, initial) => {
  switch (self.backing._tag) {
    case "IArray": {
      copy2(self.backing.array, 0, array5, initial, self.length);
      break;
    }
    case "IConcat": {
      copyToArray(self.left, array5, initial);
      copyToArray(self.right, array5, initial + self.left.length);
      break;
    }
    case "ISingleton": {
      array5[initial] = self.backing.a;
      break;
    }
    case "ISlice": {
      let i2 = 0;
      let j = initial;
      while (i2 < self.length) {
        array5[j] = unsafeGet4(self, i2);
        i2 += 1;
        j += 1;
      }
      break;
    }
  }
}, toArray_ = (self) => toReadonlyArray(self).slice(), toArray2, toReadonlyArray_ = (self) => {
  switch (self.backing._tag) {
    case "IEmpty": {
      return emptyArray;
    }
    case "IArray": {
      return self.backing.array;
    }
    default: {
      const arr = new Array(self.length);
      copyToArray(self, arr, 0);
      self.backing = {
        _tag: "IArray",
        array: arr
      };
      self.left = _empty2;
      self.right = _empty2;
      self.depth = 0;
      return arr;
    }
  }
}, toReadonlyArray, reverseChunk = (self) => {
  switch (self.backing._tag) {
    case "IEmpty":
    case "ISingleton":
      return self;
    case "IArray": {
      return makeChunk({
        _tag: "IArray",
        array: reverse2(self.backing.array)
      });
    }
    case "IConcat": {
      return makeChunk({
        _tag: "IConcat",
        left: reverse3(self.backing.right),
        right: reverse3(self.backing.left)
      });
    }
    case "ISlice":
      return unsafeFromArray(reverse2(toReadonlyArray(self)));
  }
}, reverse3, get6, unsafeFromArray = (self) => self.length === 0 ? empty7() : self.length === 1 ? of3(self[0]) : makeChunk({
  _tag: "IArray",
  array: self
}), unsafeFromNonEmptyArray = (self) => unsafeFromArray(self), unsafeGet4, append3, prepend3, take3, drop3, dropRight2, dropWhile2, prependAll3, appendAll3, filterMap5, filter5, filterMapWhile3, compact = (self) => filterMap5(self, identity), flatMap5, forEach3, flatten5, chunksOf3, intersection4, isEmpty2 = (self) => self.length === 0, isNonEmpty2 = (self) => self.length > 0, head3, unsafeHead2 = (self) => unsafeGet4(self, 0), headNonEmpty2, last2 = (self) => get6(self, self.length - 1), unsafeLast = (self) => unsafeGet4(self, self.length - 1), lastNonEmpty2, map7, mapAccum2, partition3, partitionMap4, separate3 = (self) => pipe(separate2(toReadonlyArray(self)), ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]), size3 = (self) => self.length, sort2, sortWith2, splitAt2, splitNonEmptyAt2, split2, splitWhere2, tail2 = (self) => self.length > 0 ? some3(drop3(self, 1)) : none2(), tailNonEmpty2 = (self) => drop3(self, 1), takeRight2, takeWhile3, union3, dedupe2 = (self) => unsafeFromArray(dedupe(toReadonlyArray(self))), dedupeAdjacent3 = (self) => unsafeFromArray(dedupeAdjacent2(self)), unzip2 = (self) => {
  const [left3, right3] = unzip(self);
  return [unsafeFromArray(left3), unsafeFromArray(right3)];
}, zipWith5, zip3, remove3, modifyOption3, modify3, replace3, replaceOption3, makeBy3, range3 = (start, end) => start <= end ? makeBy3(end - start + 1, (i2) => start + i2) : of3(start), contains4, containsWith4, findFirst3, findFirstIndex2, findLast3, findLastIndex2, every5, some8, join2, reduce4, reduceRight2, differenceWith2 = (isEquivalent) => {
  return dual(2, (self, that) => unsafeFromArray(differenceWith(isEquivalent)(that, self)));
}, difference3;
var init_Chunk = __esm(() => {
  init_Array();
  init_Equal();
  init_Equivalence();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Order();
  init_Predicate();
  TypeId7 = /* @__PURE__ */ Symbol.for("effect/Chunk");
  emptyArray = [];
  _equivalence4 = /* @__PURE__ */ getEquivalence6(equals);
  ChunkProto = {
    [TypeId7]: {
      _A: (_) => _
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "Chunk",
        values: toReadonlyArray(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    [symbol3](that) {
      return isChunk(that) && _equivalence4(this, that);
    },
    [symbol2]() {
      return cached(this, array2(toReadonlyArray(this)));
    },
    [Symbol.iterator]() {
      switch (this.backing._tag) {
        case "IArray": {
          return this.backing.array[Symbol.iterator]();
        }
        case "IEmpty": {
          return emptyArray[Symbol.iterator]();
        }
        default: {
          return toReadonlyArray(this)[Symbol.iterator]();
        }
      }
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  _empty2 = /* @__PURE__ */ makeChunk({
    _tag: "IEmpty"
  });
  toArray2 = toArray_;
  toReadonlyArray = toReadonlyArray_;
  reverse3 = reverseChunk;
  get6 = /* @__PURE__ */ dual(2, (self, index) => index < 0 || index >= self.length ? none2() : some3(unsafeGet4(self, index)));
  unsafeGet4 = /* @__PURE__ */ dual(2, (self, index) => {
    switch (self.backing._tag) {
      case "IEmpty": {
        throw new Error(`Index out of bounds`);
      }
      case "ISingleton": {
        if (index !== 0) {
          throw new Error(`Index out of bounds`);
        }
        return self.backing.a;
      }
      case "IArray": {
        if (index >= self.length || index < 0) {
          throw new Error(`Index out of bounds`);
        }
        return self.backing.array[index];
      }
      case "IConcat": {
        return index < self.left.length ? unsafeGet4(self.left, index) : unsafeGet4(self.right, index - self.left.length);
      }
      case "ISlice": {
        return unsafeGet4(self.backing.chunk, index + self.backing.offset);
      }
    }
  });
  append3 = /* @__PURE__ */ dual(2, (self, a) => appendAll3(self, of3(a)));
  prepend3 = /* @__PURE__ */ dual(2, (self, elem) => appendAll3(of3(elem), self));
  take3 = /* @__PURE__ */ dual(2, (self, n) => {
    if (n <= 0) {
      return _empty2;
    } else if (n >= self.length) {
      return self;
    } else {
      switch (self.backing._tag) {
        case "ISlice": {
          return makeChunk({
            _tag: "ISlice",
            chunk: self.backing.chunk,
            length: n,
            offset: self.backing.offset
          });
        }
        case "IConcat": {
          if (n > self.left.length) {
            return makeChunk({
              _tag: "IConcat",
              left: self.left,
              right: take3(self.right, n - self.left.length)
            });
          }
          return take3(self.left, n);
        }
        default: {
          return makeChunk({
            _tag: "ISlice",
            chunk: self,
            offset: 0,
            length: n
          });
        }
      }
    }
  });
  drop3 = /* @__PURE__ */ dual(2, (self, n) => {
    if (n <= 0) {
      return self;
    } else if (n >= self.length) {
      return _empty2;
    } else {
      switch (self.backing._tag) {
        case "ISlice": {
          return makeChunk({
            _tag: "ISlice",
            chunk: self.backing.chunk,
            offset: self.backing.offset + n,
            length: self.backing.length - n
          });
        }
        case "IConcat": {
          if (n > self.left.length) {
            return drop3(self.right, n - self.left.length);
          }
          return makeChunk({
            _tag: "IConcat",
            left: drop3(self.left, n),
            right: self.right
          });
        }
        default: {
          return makeChunk({
            _tag: "ISlice",
            chunk: self,
            offset: n,
            length: self.length - n
          });
        }
      }
    }
  });
  dropRight2 = /* @__PURE__ */ dual(2, (self, n) => take3(self, Math.max(0, self.length - n)));
  dropWhile2 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const arr = toReadonlyArray(self);
    const len = arr.length;
    let i2 = 0;
    while (i2 < len && predicate(arr[i2])) {
      i2++;
    }
    return drop3(self, i2);
  });
  prependAll3 = /* @__PURE__ */ dual(2, (self, that) => appendAll3(that, self));
  appendAll3 = /* @__PURE__ */ dual(2, (self, that) => {
    if (self.backing._tag === "IEmpty") {
      return that;
    }
    if (that.backing._tag === "IEmpty") {
      return self;
    }
    const diff = that.depth - self.depth;
    if (Math.abs(diff) <= 1) {
      return makeChunk({
        _tag: "IConcat",
        left: self,
        right: that
      });
    } else if (diff < -1) {
      if (self.left.depth >= self.right.depth) {
        const nr = appendAll3(self.right, that);
        return makeChunk({
          _tag: "IConcat",
          left: self.left,
          right: nr
        });
      } else {
        const nrr = appendAll3(self.right.right, that);
        if (nrr.depth === self.depth - 3) {
          const nr = makeChunk({
            _tag: "IConcat",
            left: self.right.left,
            right: nrr
          });
          return makeChunk({
            _tag: "IConcat",
            left: self.left,
            right: nr
          });
        } else {
          const nl = makeChunk({
            _tag: "IConcat",
            left: self.left,
            right: self.right.left
          });
          return makeChunk({
            _tag: "IConcat",
            left: nl,
            right: nrr
          });
        }
      }
    } else {
      if (that.right.depth >= that.left.depth) {
        const nl = appendAll3(self, that.left);
        return makeChunk({
          _tag: "IConcat",
          left: nl,
          right: that.right
        });
      } else {
        const nll = appendAll3(self, that.left.left);
        if (nll.depth === that.depth - 3) {
          const nl = makeChunk({
            _tag: "IConcat",
            left: nll,
            right: that.left.right
          });
          return makeChunk({
            _tag: "IConcat",
            left: nl,
            right: that.right
          });
        } else {
          const nr = makeChunk({
            _tag: "IConcat",
            left: that.left.right,
            right: that.right
          });
          return makeChunk({
            _tag: "IConcat",
            left: nll,
            right: nr
          });
        }
      }
    }
  });
  filterMap5 = /* @__PURE__ */ dual(2, (self, f) => unsafeFromArray(filterMap4(self, f)));
  filter5 = /* @__PURE__ */ dual(2, (self, predicate) => unsafeFromArray(filter4(self, predicate)));
  filterMapWhile3 = /* @__PURE__ */ dual(2, (self, f) => unsafeFromArray(filterMapWhile2(self, f)));
  flatMap5 = /* @__PURE__ */ dual(2, (self, f) => {
    if (self.backing._tag === "ISingleton") {
      return f(self.backing.a, 0);
    }
    let out = _empty2;
    let i2 = 0;
    for (const k of self) {
      out = appendAll3(out, f(k, i2++));
    }
    return out;
  });
  forEach3 = /* @__PURE__ */ dual(2, (self, f) => toReadonlyArray(self).forEach(f));
  flatten5 = /* @__PURE__ */ flatMap5(identity);
  chunksOf3 = /* @__PURE__ */ dual(2, (self, n) => {
    const gr = [];
    let current = [];
    toReadonlyArray(self).forEach((a) => {
      current.push(a);
      if (current.length >= n) {
        gr.push(unsafeFromArray(current));
        current = [];
      }
    });
    if (current.length > 0) {
      gr.push(unsafeFromArray(current));
    }
    return unsafeFromArray(gr);
  });
  intersection4 = /* @__PURE__ */ dual(2, (self, that) => unsafeFromArray(intersection2(toReadonlyArray(self), toReadonlyArray(that))));
  head3 = /* @__PURE__ */ get6(0);
  headNonEmpty2 = unsafeHead2;
  lastNonEmpty2 = unsafeLast;
  map7 = /* @__PURE__ */ dual(2, (self, f) => self.backing._tag === "ISingleton" ? of3(f(self.backing.a, 0)) : unsafeFromArray(pipe(toReadonlyArray(self), map6((a, i2) => f(a, i2)))));
  mapAccum2 = /* @__PURE__ */ dual(3, (self, s, f) => {
    const [s1, as2] = mapAccum(self, s, f);
    return [s1, unsafeFromArray(as2)];
  });
  partition3 = /* @__PURE__ */ dual(2, (self, predicate) => pipe(partition2(toReadonlyArray(self), predicate), ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]));
  partitionMap4 = /* @__PURE__ */ dual(2, (self, f) => pipe(partitionMap3(toReadonlyArray(self), f), ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]));
  sort2 = /* @__PURE__ */ dual(2, (self, O) => unsafeFromArray(sort(toReadonlyArray(self), O)));
  sortWith2 = /* @__PURE__ */ dual(3, (self, f, order) => sort2(self, mapInput3(order, f)));
  splitAt2 = /* @__PURE__ */ dual(2, (self, n) => [take3(self, n), drop3(self, n)]);
  splitNonEmptyAt2 = /* @__PURE__ */ dual(2, (self, n) => {
    const _n = Math.max(1, Math.floor(n));
    return _n >= self.length ? [self, empty7()] : [take3(self, _n), drop3(self, _n)];
  });
  split2 = /* @__PURE__ */ dual(2, (self, n) => chunksOf3(self, Math.ceil(self.length / Math.floor(n))));
  splitWhere2 = /* @__PURE__ */ dual(2, (self, predicate) => {
    let i2 = 0;
    for (const a of toReadonlyArray(self)) {
      if (predicate(a)) {
        break;
      } else {
        i2++;
      }
    }
    return splitAt2(self, i2);
  });
  takeRight2 = /* @__PURE__ */ dual(2, (self, n) => drop3(self, self.length - n));
  takeWhile3 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const out = [];
    for (const a of toReadonlyArray(self)) {
      if (predicate(a)) {
        out.push(a);
      } else {
        break;
      }
    }
    return unsafeFromArray(out);
  });
  union3 = /* @__PURE__ */ dual(2, (self, that) => unsafeFromArray(union2(toReadonlyArray(self), toReadonlyArray(that))));
  zipWith5 = /* @__PURE__ */ dual(3, (self, that, f) => unsafeFromArray(zipWith4(self, that, f)));
  zip3 = /* @__PURE__ */ dual(2, (self, that) => zipWith5(self, that, (a, b) => [a, b]));
  remove3 = /* @__PURE__ */ dual(2, (self, i2) => unsafeFromArray(remove2(toReadonlyArray(self), i2)));
  modifyOption3 = /* @__PURE__ */ dual(3, (self, i2, f) => map2(modifyOption2(toReadonlyArray(self), i2, f), unsafeFromArray));
  modify3 = /* @__PURE__ */ dual(3, (self, i2, f) => getOrElse2(modifyOption3(self, i2, f), () => self));
  replace3 = /* @__PURE__ */ dual(3, (self, i2, b) => modify3(self, i2, () => b));
  replaceOption3 = /* @__PURE__ */ dual(3, (self, i2, b) => modifyOption3(self, i2, () => b));
  makeBy3 = /* @__PURE__ */ dual(2, (n, f) => fromIterable3(makeBy2(n, f)));
  contains4 = contains3;
  containsWith4 = containsWith3;
  findFirst3 = findFirst2;
  findFirstIndex2 = findFirstIndex;
  findLast3 = findLast2;
  findLastIndex2 = findLastIndex;
  every5 = /* @__PURE__ */ dual(2, (self, refinement) => fromIterable2(self).every(refinement));
  some8 = /* @__PURE__ */ dual(2, (self, predicate) => fromIterable2(self).some(predicate));
  join2 = join;
  reduce4 = reduce3;
  reduceRight2 = reduceRight;
  difference3 = /* @__PURE__ */ dual(2, (self, that) => unsafeFromArray(difference2(that, self)));
});

// node_modules/effect/dist/esm/Duration.js
var exports_Duration = {};
__export(exports_Duration, {
  zero: () => zero2,
  weeks: () => weeks,
  unsafeToNanos: () => unsafeToNanos,
  unsafeFormatIso: () => unsafeFormatIso,
  unsafeDivide: () => unsafeDivide4,
  toWeeks: () => toWeeks,
  toSeconds: () => toSeconds,
  toNanos: () => toNanos,
  toMinutes: () => toMinutes,
  toMillis: () => toMillis,
  toHrTime: () => toHrTime,
  toHours: () => toHours,
  toDays: () => toDays,
  times: () => times,
  sum: () => sum4,
  subtract: () => subtract4,
  seconds: () => seconds,
  parts: () => parts,
  nanos: () => nanos,
  minutes: () => minutes,
  min: () => min6,
  millis: () => millis,
  micros: () => micros,
  max: () => max7,
  matchWith: () => matchWith,
  match: () => match5,
  lessThanOrEqualTo: () => lessThanOrEqualTo5,
  lessThan: () => lessThan5,
  isZero: () => isZero2,
  isFinite: () => isFinite2,
  isDuration: () => isDuration,
  infinity: () => infinity,
  hours: () => hours,
  greaterThanOrEqualTo: () => greaterThanOrEqualTo5,
  greaterThan: () => greaterThan5,
  fromIso: () => fromIso,
  formatIso: () => formatIso,
  format: () => format4,
  equals: () => equals4,
  divide: () => divide4,
  decodeUnknown: () => decodeUnknown,
  decode: () => decode,
  days: () => days,
  clamp: () => clamp6,
  between: () => between5,
  Order: () => Order5,
  Equivalence: () => Equivalence5
});
var TypeId8, bigint03, bigint24, bigint60, bigint1e3, bigint1e6, bigint1e9, DURATION_REGEX, decode = (input) => {
  if (isDuration(input)) {
    return input;
  } else if (isNumber2(input)) {
    return millis(input);
  } else if (isBigInt(input)) {
    return nanos(input);
  } else if (Array.isArray(input) && input.length === 2 && input.every(isNumber2)) {
    if (input[0] === -Infinity || input[1] === -Infinity || Number.isNaN(input[0]) || Number.isNaN(input[1])) {
      return zero2;
    }
    if (input[0] === Infinity || input[1] === Infinity) {
      return infinity;
    }
    return nanos(BigInt(Math.round(input[0] * 1e9)) + BigInt(Math.round(input[1])));
  } else if (isString2(input)) {
    const match5 = DURATION_REGEX.exec(input);
    if (match5) {
      const [_, valueStr, unit] = match5;
      const value = Number(valueStr);
      switch (unit) {
        case "nano":
        case "nanos":
          return nanos(BigInt(valueStr));
        case "micro":
        case "micros":
          return micros(BigInt(valueStr));
        case "milli":
        case "millis":
          return millis(value);
        case "second":
        case "seconds":
          return seconds(value);
        case "minute":
        case "minutes":
          return minutes(value);
        case "hour":
        case "hours":
          return hours(value);
        case "day":
        case "days":
          return days(value);
        case "week":
        case "weeks":
          return weeks(value);
      }
    }
  }
  throw new Error("Invalid DurationInput");
}, decodeUnknown, zeroValue, infinityValue, DurationProto, make10 = (input) => {
  const duration = Object.create(DurationProto);
  if (isNumber2(input)) {
    if (isNaN(input) || input <= 0) {
      duration.value = zeroValue;
    } else if (!Number.isFinite(input)) {
      duration.value = infinityValue;
    } else if (!Number.isInteger(input)) {
      duration.value = {
        _tag: "Nanos",
        nanos: BigInt(Math.round(input * 1e6))
      };
    } else {
      duration.value = {
        _tag: "Millis",
        millis: input
      };
    }
  } else if (input <= bigint03) {
    duration.value = zeroValue;
  } else {
    duration.value = {
      _tag: "Nanos",
      nanos: input
    };
  }
  return duration;
}, isDuration = (u) => hasProperty(u, TypeId8), isFinite2 = (self) => self.value._tag !== "Infinity", isZero2 = (self) => {
  switch (self.value._tag) {
    case "Millis": {
      return self.value.millis === 0;
    }
    case "Nanos": {
      return self.value.nanos === bigint03;
    }
    case "Infinity": {
      return false;
    }
  }
}, zero2, infinity, nanos = (nanos2) => make10(nanos2), micros = (micros2) => make10(micros2 * bigint1e3), millis = (millis2) => make10(millis2), seconds = (seconds2) => make10(seconds2 * 1000), minutes = (minutes2) => make10(minutes2 * 60000), hours = (hours2) => make10(hours2 * 3600000), days = (days2) => make10(days2 * 86400000), weeks = (weeks2) => make10(weeks2 * 604800000), toMillis = (self) => match5(self, {
  onMillis: (millis2) => millis2,
  onNanos: (nanos2) => Number(nanos2) / 1e6
}), toSeconds = (self) => match5(self, {
  onMillis: (millis2) => millis2 / 1000,
  onNanos: (nanos2) => Number(nanos2) / 1e9
}), toMinutes = (self) => match5(self, {
  onMillis: (millis2) => millis2 / 60000,
  onNanos: (nanos2) => Number(nanos2) / 60000000000
}), toHours = (self) => match5(self, {
  onMillis: (millis2) => millis2 / 3600000,
  onNanos: (nanos2) => Number(nanos2) / 3600000000000
}), toDays = (self) => match5(self, {
  onMillis: (millis2) => millis2 / 86400000,
  onNanos: (nanos2) => Number(nanos2) / 86400000000000
}), toWeeks = (self) => match5(self, {
  onMillis: (millis2) => millis2 / 604800000,
  onNanos: (nanos2) => Number(nanos2) / 604800000000000
}), toNanos = (self) => {
  const _self = decode(self);
  switch (_self.value._tag) {
    case "Infinity":
      return none2();
    case "Nanos":
      return some3(_self.value.nanos);
    case "Millis":
      return some3(BigInt(Math.round(_self.value.millis * 1e6)));
  }
}, unsafeToNanos = (self) => {
  const _self = decode(self);
  switch (_self.value._tag) {
    case "Infinity":
      throw new Error("Cannot convert infinite duration to nanos");
    case "Nanos":
      return _self.value.nanos;
    case "Millis":
      return BigInt(Math.round(_self.value.millis * 1e6));
  }
}, toHrTime = (self) => {
  const _self = decode(self);
  switch (_self.value._tag) {
    case "Infinity":
      return [Infinity, 0];
    case "Nanos":
      return [Number(_self.value.nanos / bigint1e9), Number(_self.value.nanos % bigint1e9)];
    case "Millis":
      return [Math.floor(_self.value.millis / 1000), Math.round(_self.value.millis % 1000 * 1e6)];
  }
}, match5, matchWith, Order5, between5, Equivalence5 = (self, that) => matchWith(self, that, {
  onMillis: (self2, that2) => self2 === that2,
  onNanos: (self2, that2) => self2 === that2
}), _min, min6, _max, max7, _clamp, clamp6, divide4, unsafeDivide4, times, subtract4, sum4, lessThan5, lessThanOrEqualTo5, greaterThan5, greaterThanOrEqualTo5, equals4, parts = (self) => {
  const duration = decode(self);
  if (duration.value._tag === "Infinity") {
    return {
      days: Infinity,
      hours: Infinity,
      minutes: Infinity,
      seconds: Infinity,
      millis: Infinity,
      nanos: Infinity
    };
  }
  const nanos2 = unsafeToNanos(duration);
  const ms = nanos2 / bigint1e6;
  const sec = ms / bigint1e3;
  const min7 = sec / bigint60;
  const hr = min7 / bigint60;
  const days2 = hr / bigint24;
  return {
    days: Number(days2),
    hours: Number(hr % bigint24),
    minutes: Number(min7 % bigint60),
    seconds: Number(sec % bigint60),
    millis: Number(ms % bigint1e3),
    nanos: Number(nanos2 % bigint1e6)
  };
}, format4 = (self) => {
  const duration = decode(self);
  if (duration.value._tag === "Infinity") {
    return "Infinity";
  }
  if (isZero2(duration)) {
    return "0";
  }
  const fragments = parts(duration);
  const pieces = [];
  if (fragments.days !== 0) {
    pieces.push(`${fragments.days}d`);
  }
  if (fragments.hours !== 0) {
    pieces.push(`${fragments.hours}h`);
  }
  if (fragments.minutes !== 0) {
    pieces.push(`${fragments.minutes}m`);
  }
  if (fragments.seconds !== 0) {
    pieces.push(`${fragments.seconds}s`);
  }
  if (fragments.millis !== 0) {
    pieces.push(`${fragments.millis}ms`);
  }
  if (fragments.nanos !== 0) {
    pieces.push(`${fragments.nanos}ns`);
  }
  return pieces.join(" ");
}, unsafeFormatIso = (self) => {
  const duration = decode(self);
  if (!isFinite2(duration)) {
    throw new RangeError("Cannot format infinite duration");
  }
  const fragments = [];
  const {
    days: days2,
    hours: hours2,
    millis: millis2,
    minutes: minutes2,
    nanos: nanos2,
    seconds: seconds2
  } = parts(duration);
  let rest = days2;
  if (rest >= 365) {
    const years = Math.floor(rest / 365);
    rest %= 365;
    fragments.push(`${years}Y`);
  }
  if (rest >= 30) {
    const months = Math.floor(rest / 30);
    rest %= 30;
    fragments.push(`${months}M`);
  }
  if (rest >= 7) {
    const weeks2 = Math.floor(rest / 7);
    rest %= 7;
    fragments.push(`${weeks2}W`);
  }
  if (rest > 0) {
    fragments.push(`${rest}D`);
  }
  if (hours2 !== 0 || minutes2 !== 0 || seconds2 !== 0 || millis2 !== 0 || nanos2 !== 0) {
    fragments.push("T");
    if (hours2 !== 0) {
      fragments.push(`${hours2}H`);
    }
    if (minutes2 !== 0) {
      fragments.push(`${minutes2}M`);
    }
    if (seconds2 !== 0 || millis2 !== 0 || nanos2 !== 0) {
      const total = BigInt(seconds2) * bigint1e9 + BigInt(millis2) * bigint1e6 + BigInt(nanos2);
      const str = (Number(total) / 1e9).toFixed(9).replace(/\.?0+$/, "");
      fragments.push(`${str}S`);
    }
  }
  return `P${fragments.join("") || "T0S"}`;
}, formatIso = (self) => {
  const duration = decode(self);
  return isFinite2(duration) ? some3(unsafeFormatIso(duration)) : none2();
}, fromIso = (iso) => {
  const result2 = DURATION_ISO_REGEX.exec(iso);
  if (result2 == null) {
    return none2();
  }
  const [years, months, weeks2, days2, hours2, mins, secs] = result2.slice(1, 8).map((_) => _ ? Number(_) : 0);
  const value = years * 365 * 24 * 60 * 60 + months * 30 * 24 * 60 * 60 + weeks2 * 7 * 24 * 60 * 60 + days2 * 24 * 60 * 60 + hours2 * 60 * 60 + mins * 60 + secs;
  return some3(seconds(value));
}, DURATION_ISO_REGEX;
var init_Duration = __esm(() => {
  init_Equal();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Order();
  init_Predicate();
  TypeId8 = /* @__PURE__ */ Symbol.for("effect/Duration");
  bigint03 = /* @__PURE__ */ BigInt(0);
  bigint24 = /* @__PURE__ */ BigInt(24);
  bigint60 = /* @__PURE__ */ BigInt(60);
  bigint1e3 = /* @__PURE__ */ BigInt(1000);
  bigint1e6 = /* @__PURE__ */ BigInt(1e6);
  bigint1e9 = /* @__PURE__ */ BigInt(1e9);
  DURATION_REGEX = /^(-?\d+(?:\.\d+)?)\s+(nanos?|micros?|millis?|seconds?|minutes?|hours?|days?|weeks?)$/;
  decodeUnknown = /* @__PURE__ */ liftThrowable(decode);
  zeroValue = {
    _tag: "Millis",
    millis: 0
  };
  infinityValue = {
    _tag: "Infinity"
  };
  DurationProto = {
    [TypeId8]: TypeId8,
    [symbol2]() {
      return cached(this, structure(this.value));
    },
    [symbol3](that) {
      return isDuration(that) && equals4(this, that);
    },
    toString() {
      return `Duration(${format4(this)})`;
    },
    toJSON() {
      switch (this.value._tag) {
        case "Millis":
          return {
            _id: "Duration",
            _tag: "Millis",
            millis: this.value.millis
          };
        case "Nanos":
          return {
            _id: "Duration",
            _tag: "Nanos",
            hrtime: toHrTime(this)
          };
        case "Infinity":
          return {
            _id: "Duration",
            _tag: "Infinity"
          };
      }
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  zero2 = /* @__PURE__ */ make10(0);
  infinity = /* @__PURE__ */ make10(Infinity);
  match5 = /* @__PURE__ */ dual(2, (self, options) => {
    const _self = decode(self);
    switch (_self.value._tag) {
      case "Nanos":
        return options.onNanos(_self.value.nanos);
      case "Infinity":
        return options.onMillis(Infinity);
      case "Millis":
        return options.onMillis(_self.value.millis);
    }
  });
  matchWith = /* @__PURE__ */ dual(3, (self, that, options) => {
    const _self = decode(self);
    const _that = decode(that);
    if (_self.value._tag === "Infinity" || _that.value._tag === "Infinity") {
      return options.onMillis(toMillis(_self), toMillis(_that));
    } else if (_self.value._tag === "Nanos" || _that.value._tag === "Nanos") {
      const selfNanos = _self.value._tag === "Nanos" ? _self.value.nanos : BigInt(Math.round(_self.value.millis * 1e6));
      const thatNanos = _that.value._tag === "Nanos" ? _that.value.nanos : BigInt(Math.round(_that.value.millis * 1e6));
      return options.onNanos(selfNanos, thatNanos);
    }
    return options.onMillis(_self.value.millis, _that.value.millis);
  });
  Order5 = /* @__PURE__ */ make2((self, that) => matchWith(self, that, {
    onMillis: (self2, that2) => self2 < that2 ? -1 : self2 > that2 ? 1 : 0,
    onNanos: (self2, that2) => self2 < that2 ? -1 : self2 > that2 ? 1 : 0
  }));
  between5 = /* @__PURE__ */ between(/* @__PURE__ */ mapInput3(Order5, decode));
  _min = /* @__PURE__ */ min(Order5);
  min6 = /* @__PURE__ */ dual(2, (self, that) => _min(decode(self), decode(that)));
  _max = /* @__PURE__ */ max2(Order5);
  max7 = /* @__PURE__ */ dual(2, (self, that) => _max(decode(self), decode(that)));
  _clamp = /* @__PURE__ */ clamp(Order5);
  clamp6 = /* @__PURE__ */ dual(2, (self, options) => _clamp(decode(self), {
    minimum: decode(options.minimum),
    maximum: decode(options.maximum)
  }));
  divide4 = /* @__PURE__ */ dual(2, (self, by) => match5(self, {
    onMillis: (millis2) => {
      if (by === 0 || isNaN(by) || !Number.isFinite(by)) {
        return none2();
      }
      return some3(make10(millis2 / by));
    },
    onNanos: (nanos2) => {
      if (isNaN(by) || by <= 0 || !Number.isFinite(by)) {
        return none2();
      }
      try {
        return some3(make10(nanos2 / BigInt(by)));
      } catch (e) {
        return none2();
      }
    }
  }));
  unsafeDivide4 = /* @__PURE__ */ dual(2, (self, by) => match5(self, {
    onMillis: (millis2) => make10(millis2 / by),
    onNanos: (nanos2) => {
      if (isNaN(by) || by < 0 || Object.is(by, -0)) {
        return zero2;
      } else if (Object.is(by, 0) || !Number.isFinite(by)) {
        return infinity;
      }
      return make10(nanos2 / BigInt(by));
    }
  }));
  times = /* @__PURE__ */ dual(2, (self, times2) => match5(self, {
    onMillis: (millis2) => make10(millis2 * times2),
    onNanos: (nanos2) => make10(nanos2 * BigInt(times2))
  }));
  subtract4 = /* @__PURE__ */ dual(2, (self, that) => matchWith(self, that, {
    onMillis: (self2, that2) => make10(self2 - that2),
    onNanos: (self2, that2) => make10(self2 - that2)
  }));
  sum4 = /* @__PURE__ */ dual(2, (self, that) => matchWith(self, that, {
    onMillis: (self2, that2) => make10(self2 + that2),
    onNanos: (self2, that2) => make10(self2 + that2)
  }));
  lessThan5 = /* @__PURE__ */ dual(2, (self, that) => matchWith(self, that, {
    onMillis: (self2, that2) => self2 < that2,
    onNanos: (self2, that2) => self2 < that2
  }));
  lessThanOrEqualTo5 = /* @__PURE__ */ dual(2, (self, that) => matchWith(self, that, {
    onMillis: (self2, that2) => self2 <= that2,
    onNanos: (self2, that2) => self2 <= that2
  }));
  greaterThan5 = /* @__PURE__ */ dual(2, (self, that) => matchWith(self, that, {
    onMillis: (self2, that2) => self2 > that2,
    onNanos: (self2, that2) => self2 > that2
  }));
  greaterThanOrEqualTo5 = /* @__PURE__ */ dual(2, (self, that) => matchWith(self, that, {
    onMillis: (self2, that2) => self2 >= that2,
    onNanos: (self2, that2) => self2 >= that2
  }));
  equals4 = /* @__PURE__ */ dual(2, (self, that) => Equivalence5(decode(self), decode(that)));
  DURATION_ISO_REGEX = /^P(?!$)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)W)?(?:(\d+)D)?(?:T(?!$)(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$/;
});

// node_modules/effect/dist/esm/internal/hashMap/config.js
var SIZE = 5, BUCKET_SIZE, MASK2, MAX_INDEX_NODE, MIN_ARRAY_NODE;
var init_config = __esm(() => {
  BUCKET_SIZE = /* @__PURE__ */ Math.pow(2, SIZE);
  MASK2 = BUCKET_SIZE - 1;
  MAX_INDEX_NODE = BUCKET_SIZE / 2;
  MIN_ARRAY_NODE = BUCKET_SIZE / 4;
});

// node_modules/effect/dist/esm/internal/hashMap/bitwise.js
function popcount(x2) {
  x2 -= x2 >> 1 & 1431655765;
  x2 = (x2 & 858993459) + (x2 >> 2 & 858993459);
  x2 = x2 + (x2 >> 4) & 252645135;
  x2 += x2 >> 8;
  x2 += x2 >> 16;
  return x2 & 127;
}
function hashFragment(shift, h2) {
  return h2 >>> shift & MASK2;
}
function toBitmap(x2) {
  return 1 << x2;
}
function fromBitmap(bitmap, bit) {
  return popcount(bitmap & bit - 1);
}
var init_bitwise = __esm(() => {
  init_config();
});

// node_modules/effect/dist/esm/internal/stack.js
var make11 = (value, previous) => ({
  value,
  previous
});

// node_modules/effect/dist/esm/internal/hashMap/array.js
function arrayUpdate(mutate, at2, v, arr) {
  let out = arr;
  if (!mutate) {
    const len = arr.length;
    out = new Array(len);
    for (let i2 = 0;i2 < len; ++i2)
      out[i2] = arr[i2];
  }
  out[at2] = v;
  return out;
}
function arraySpliceOut(mutate, at2, arr) {
  const newLen = arr.length - 1;
  let i2 = 0;
  let g = 0;
  let out = arr;
  if (mutate) {
    i2 = g = at2;
  } else {
    out = new Array(newLen);
    while (i2 < at2)
      out[g++] = arr[i2++];
  }
  ++i2;
  while (i2 <= newLen)
    out[g++] = arr[i2++];
  if (mutate) {
    out.length = newLen;
  }
  return out;
}
function arraySpliceIn(mutate, at2, v, arr) {
  const len = arr.length;
  if (mutate) {
    let i3 = len;
    while (i3 >= at2)
      arr[i3--] = arr[i3];
    arr[at2] = v;
    return arr;
  }
  let i2 = 0, g = 0;
  const out = new Array(len + 1);
  while (i2 < at2)
    out[g++] = arr[i2++];
  out[at2] = v;
  while (i2 < len)
    out[++g] = arr[i2++];
  return out;
}

// node_modules/effect/dist/esm/internal/hashMap/node.js
class EmptyNode {
  _tag = "EmptyNode";
  modify(edit, _shift, f, hash3, key, size4) {
    const v = f(none2());
    if (isNone2(v))
      return new EmptyNode;
    ++size4.value;
    return new LeafNode(edit, hash3, key, v);
  }
}
function isEmptyNode(a) {
  return isTagged(a, "EmptyNode");
}
function isLeafNode(node) {
  return isEmptyNode(node) || node._tag === "LeafNode" || node._tag === "CollisionNode";
}
function canEditNode(node, edit) {
  return isEmptyNode(node) ? false : edit === node.edit;
}

class LeafNode {
  edit;
  hash;
  key;
  value;
  _tag = "LeafNode";
  constructor(edit, hash3, key, value) {
    this.edit = edit;
    this.hash = hash3;
    this.key = key;
    this.value = value;
  }
  modify(edit, shift, f, hash3, key, size4) {
    if (equals(key, this.key)) {
      const v2 = f(this.value);
      if (v2 === this.value)
        return this;
      else if (isNone2(v2)) {
        --size4.value;
        return new EmptyNode;
      }
      if (canEditNode(this, edit)) {
        this.value = v2;
        return this;
      }
      return new LeafNode(edit, hash3, key, v2);
    }
    const v = f(none2());
    if (isNone2(v))
      return this;
    ++size4.value;
    return mergeLeaves(edit, shift, this.hash, this, hash3, new LeafNode(edit, hash3, key, v));
  }
}

class CollisionNode {
  edit;
  hash;
  children;
  _tag = "CollisionNode";
  constructor(edit, hash3, children) {
    this.edit = edit;
    this.hash = hash3;
    this.children = children;
  }
  modify(edit, shift, f, hash3, key, size4) {
    if (hash3 === this.hash) {
      const canEdit = canEditNode(this, edit);
      const list = this.updateCollisionList(canEdit, edit, this.hash, this.children, f, key, size4);
      if (list === this.children)
        return this;
      return list.length > 1 ? new CollisionNode(edit, this.hash, list) : list[0];
    }
    const v = f(none2());
    if (isNone2(v))
      return this;
    ++size4.value;
    return mergeLeaves(edit, shift, this.hash, this, hash3, new LeafNode(edit, hash3, key, v));
  }
  updateCollisionList(mutate, edit, hash3, list, f, key, size4) {
    const len = list.length;
    for (let i2 = 0;i2 < len; ++i2) {
      const child = list[i2];
      if ("key" in child && equals(key, child.key)) {
        const value = child.value;
        const newValue2 = f(value);
        if (newValue2 === value)
          return list;
        if (isNone2(newValue2)) {
          --size4.value;
          return arraySpliceOut(mutate, i2, list);
        }
        return arrayUpdate(mutate, i2, new LeafNode(edit, hash3, key, newValue2), list);
      }
    }
    const newValue = f(none2());
    if (isNone2(newValue))
      return list;
    ++size4.value;
    return arrayUpdate(mutate, len, new LeafNode(edit, hash3, key, newValue), list);
  }
}

class IndexedNode {
  edit;
  mask;
  children;
  _tag = "IndexedNode";
  constructor(edit, mask, children) {
    this.edit = edit;
    this.mask = mask;
    this.children = children;
  }
  modify(edit, shift, f, hash3, key, size4) {
    const mask = this.mask;
    const children = this.children;
    const frag = hashFragment(shift, hash3);
    const bit = toBitmap(frag);
    const indx = fromBitmap(mask, bit);
    const exists2 = mask & bit;
    const canEdit = canEditNode(this, edit);
    if (!exists2) {
      const _newChild = new EmptyNode().modify(edit, shift + SIZE, f, hash3, key, size4);
      if (!_newChild)
        return this;
      return children.length >= MAX_INDEX_NODE ? expand(edit, frag, _newChild, mask, children) : new IndexedNode(edit, mask | bit, arraySpliceIn(canEdit, indx, _newChild, children));
    }
    const current = children[indx];
    const child = current.modify(edit, shift + SIZE, f, hash3, key, size4);
    if (current === child)
      return this;
    let bitmap = mask;
    let newChildren;
    if (isEmptyNode(child)) {
      bitmap &= ~bit;
      if (!bitmap)
        return new EmptyNode;
      if (children.length <= 2 && isLeafNode(children[indx ^ 1])) {
        return children[indx ^ 1];
      }
      newChildren = arraySpliceOut(canEdit, indx, children);
    } else {
      newChildren = arrayUpdate(canEdit, indx, child, children);
    }
    if (canEdit) {
      this.mask = bitmap;
      this.children = newChildren;
      return this;
    }
    return new IndexedNode(edit, bitmap, newChildren);
  }
}

class ArrayNode {
  edit;
  size;
  children;
  _tag = "ArrayNode";
  constructor(edit, size4, children) {
    this.edit = edit;
    this.size = size4;
    this.children = children;
  }
  modify(edit, shift, f, hash3, key, size4) {
    let count = this.size;
    const children = this.children;
    const frag = hashFragment(shift, hash3);
    const child = children[frag];
    const newChild = (child || new EmptyNode).modify(edit, shift + SIZE, f, hash3, key, size4);
    if (child === newChild)
      return this;
    const canEdit = canEditNode(this, edit);
    let newChildren;
    if (isEmptyNode(child) && !isEmptyNode(newChild)) {
      ++count;
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
      --count;
      if (count <= MIN_ARRAY_NODE) {
        return pack(edit, count, frag, children);
      }
      newChildren = arrayUpdate(canEdit, frag, new EmptyNode, children);
    } else {
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    }
    if (canEdit) {
      this.size = count;
      this.children = newChildren;
      return this;
    }
    return new ArrayNode(edit, count, newChildren);
  }
}
function pack(edit, count, removed, elements) {
  const children = new Array(count - 1);
  let g = 0;
  let bitmap = 0;
  for (let i2 = 0, len = elements.length;i2 < len; ++i2) {
    if (i2 !== removed) {
      const elem = elements[i2];
      if (elem && !isEmptyNode(elem)) {
        children[g++] = elem;
        bitmap |= 1 << i2;
      }
    }
  }
  return new IndexedNode(edit, bitmap, children);
}
function expand(edit, frag, child, bitmap, subNodes) {
  const arr = [];
  let bit = bitmap;
  let count = 0;
  for (let i2 = 0;bit; ++i2) {
    if (bit & 1)
      arr[i2] = subNodes[count++];
    bit >>>= 1;
  }
  arr[frag] = child;
  return new ArrayNode(edit, count + 1, arr);
}
function mergeLeavesInner(edit, shift, h1, n1, h2, n2) {
  if (h1 === h2)
    return new CollisionNode(edit, h1, [n2, n1]);
  const subH1 = hashFragment(shift, h1);
  const subH2 = hashFragment(shift, h2);
  if (subH1 === subH2) {
    return (child) => new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), [child]);
  } else {
    const children = subH1 < subH2 ? [n1, n2] : [n2, n1];
    return new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), children);
  }
}
function mergeLeaves(edit, shift, h1, n1, h2, n2) {
  let stack = undefined;
  let currentShift = shift;
  while (true) {
    const res = mergeLeavesInner(edit, currentShift, h1, n1, h2, n2);
    if (typeof res === "function") {
      stack = make11(res, stack);
      currentShift = currentShift + SIZE;
    } else {
      let final = res;
      while (stack != null) {
        final = stack.value(final);
        stack = stack.previous;
      }
      return final;
    }
  }
}
var init_node = __esm(() => {
  init_Equal();
  init_Option();
  init_Predicate();
  init_bitwise();
  init_config();
});

// node_modules/effect/dist/esm/internal/hashMap.js
var HashMapSymbolKey = "effect/HashMap", HashMapTypeId, HashMapProto, makeImpl = (editable, edit, root, size4) => {
  const map8 = Object.create(HashMapProto);
  map8._editable = editable;
  map8._edit = edit;
  map8._root = root;
  map8._size = size4;
  return map8;
}, HashMapIterator, applyCont = (cont) => cont ? visitLazyChildren(cont[0], cont[1], cont[2], cont[3], cont[4]) : none2(), visitLazy = (node, f, cont = undefined) => {
  switch (node._tag) {
    case "LeafNode": {
      if (isSome2(node.value)) {
        return some3({
          value: f(node.key, node.value.value),
          cont
        });
      }
      return applyCont(cont);
    }
    case "CollisionNode":
    case "ArrayNode":
    case "IndexedNode": {
      const children = node.children;
      return visitLazyChildren(children.length, children, 0, f, cont);
    }
    default: {
      return applyCont(cont);
    }
  }
}, visitLazyChildren = (len, children, i2, f, cont) => {
  while (i2 < len) {
    const child = children[i2++];
    if (child && !isEmptyNode(child)) {
      return visitLazy(child, f, [len, children, i2, f, cont]);
    }
  }
  return applyCont(cont);
}, _empty3, empty8 = () => _empty3, make12 = (...entries) => fromIterable4(entries), fromIterable4 = (entries) => {
  const map8 = beginMutation(empty8());
  for (const entry of entries) {
    set2(map8, entry[0], entry[1]);
  }
  return endMutation(map8);
}, isHashMap = (u) => hasProperty(u, HashMapTypeId), isEmpty3 = (self) => self && isEmptyNode(self._root), get7, getHash, unsafeGet5, has2, hasHash, set2, setTree, keys2 = (self) => new HashMapIterator(self, (key) => key), values2 = (self) => new HashMapIterator(self, (_, value) => value), entries = (self) => new HashMapIterator(self, (key, value) => [key, value]), size4 = (self) => self._size, beginMutation = (self) => makeImpl(true, self._edit + 1, self._root, self._size), endMutation = (self) => {
  self._editable = false;
  return self;
}, mutate, modifyAt, modifyHash, modify4, union4, remove4, removeMany, map8, flatMap6, forEach4, reduce5, filter6, compact2 = (self) => filterMap6(self, identity), filterMap6, findFirst4, some9, every6;
var init_hashMap = __esm(() => {
  init_Equal();
  init_Function();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Predicate();
  init_bitwise();
  init_config();
  init_node();
  HashMapTypeId = /* @__PURE__ */ Symbol.for(HashMapSymbolKey);
  HashMapProto = {
    [HashMapTypeId]: HashMapTypeId,
    [Symbol.iterator]() {
      return new HashMapIterator(this, (k, v) => [k, v]);
    },
    [symbol2]() {
      let hash3 = hash(HashMapSymbolKey);
      for (const item of this) {
        hash3 ^= pipe(hash(item[0]), combine2(hash(item[1])));
      }
      return cached(this, hash3);
    },
    [symbol3](that) {
      if (isHashMap(that)) {
        if (that._size !== this._size) {
          return false;
        }
        for (const item of this) {
          const elem = pipe(that, getHash(item[0], hash(item[0])));
          if (isNone2(elem)) {
            return false;
          } else {
            if (!equals(item[1], elem.value)) {
              return false;
            }
          }
        }
        return true;
      }
      return false;
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "HashMap",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  HashMapIterator = class HashMapIterator {
    map;
    f;
    v;
    constructor(map8, f) {
      this.map = map8;
      this.f = f;
      this.v = visitLazy(this.map._root, this.f, undefined);
    }
    next() {
      if (isNone2(this.v)) {
        return {
          done: true,
          value: undefined
        };
      }
      const v0 = this.v.value;
      this.v = applyCont(v0.cont);
      return {
        done: false,
        value: v0.value
      };
    }
    [Symbol.iterator]() {
      return new HashMapIterator(this.map, this.f);
    }
  };
  _empty3 = /* @__PURE__ */ makeImpl(false, 0, /* @__PURE__ */ new EmptyNode, 0);
  get7 = /* @__PURE__ */ dual(2, (self, key) => getHash(self, key, hash(key)));
  getHash = /* @__PURE__ */ dual(3, (self, key, hash3) => {
    let node = self._root;
    let shift = 0;
    while (true) {
      switch (node._tag) {
        case "LeafNode": {
          return equals(key, node.key) ? node.value : none2();
        }
        case "CollisionNode": {
          if (hash3 === node.hash) {
            const children = node.children;
            for (let i2 = 0, len = children.length;i2 < len; ++i2) {
              const child = children[i2];
              if ("key" in child && equals(key, child.key)) {
                return child.value;
              }
            }
          }
          return none2();
        }
        case "IndexedNode": {
          const frag = hashFragment(shift, hash3);
          const bit = toBitmap(frag);
          if (node.mask & bit) {
            node = node.children[fromBitmap(node.mask, bit)];
            shift += SIZE;
            break;
          }
          return none2();
        }
        case "ArrayNode": {
          node = node.children[hashFragment(shift, hash3)];
          if (node) {
            shift += SIZE;
            break;
          }
          return none2();
        }
        default:
          return none2();
      }
    }
  });
  unsafeGet5 = /* @__PURE__ */ dual(2, (self, key) => {
    const element = getHash(self, key, hash(key));
    if (isNone2(element)) {
      throw new Error("Expected map to contain key");
    }
    return element.value;
  });
  has2 = /* @__PURE__ */ dual(2, (self, key) => isSome2(getHash(self, key, hash(key))));
  hasHash = /* @__PURE__ */ dual(3, (self, key, hash3) => isSome2(getHash(self, key, hash3)));
  set2 = /* @__PURE__ */ dual(3, (self, key, value) => modifyAt(self, key, () => some3(value)));
  setTree = /* @__PURE__ */ dual(3, (self, newRoot, newSize) => {
    if (self._editable) {
      self._root = newRoot;
      self._size = newSize;
      return self;
    }
    return newRoot === self._root ? self : makeImpl(self._editable, self._edit, newRoot, newSize);
  });
  mutate = /* @__PURE__ */ dual(2, (self, f) => {
    const transient = beginMutation(self);
    f(transient);
    return endMutation(transient);
  });
  modifyAt = /* @__PURE__ */ dual(3, (self, key, f) => modifyHash(self, key, hash(key), f));
  modifyHash = /* @__PURE__ */ dual(4, (self, key, hash3, f) => {
    const size5 = {
      value: self._size
    };
    const newRoot = self._root.modify(self._editable ? self._edit : NaN, 0, f, hash3, key, size5);
    return pipe(self, setTree(newRoot, size5.value));
  });
  modify4 = /* @__PURE__ */ dual(3, (self, key, f) => modifyAt(self, key, map2(f)));
  union4 = /* @__PURE__ */ dual(2, (self, that) => {
    const result2 = beginMutation(self);
    forEach4(that, (v, k) => set2(result2, k, v));
    return endMutation(result2);
  });
  remove4 = /* @__PURE__ */ dual(2, (self, key) => modifyAt(self, key, none2));
  removeMany = /* @__PURE__ */ dual(2, (self, keys3) => mutate(self, (map8) => {
    for (const key of keys3) {
      remove4(key)(map8);
    }
  }));
  map8 = /* @__PURE__ */ dual(2, (self, f) => reduce5(self, empty8(), (map9, value, key) => set2(map9, key, f(value, key))));
  flatMap6 = /* @__PURE__ */ dual(2, (self, f) => reduce5(self, empty8(), (zero3, value, key) => mutate(zero3, (map9) => forEach4(f(value, key), (value2, key2) => set2(map9, key2, value2)))));
  forEach4 = /* @__PURE__ */ dual(2, (self, f) => reduce5(self, undefined, (_, value, key) => f(value, key)));
  reduce5 = /* @__PURE__ */ dual(3, (self, zero3, f) => {
    const root = self._root;
    if (root._tag === "LeafNode") {
      return isSome2(root.value) ? f(zero3, root.value.value, root.key) : zero3;
    }
    if (root._tag === "EmptyNode") {
      return zero3;
    }
    const toVisit = [root.children];
    let children;
    while (children = toVisit.pop()) {
      for (let i2 = 0, len = children.length;i2 < len; ) {
        const child = children[i2++];
        if (child && !isEmptyNode(child)) {
          if (child._tag === "LeafNode") {
            if (isSome2(child.value)) {
              zero3 = f(zero3, child.value.value, child.key);
            }
          } else {
            toVisit.push(child.children);
          }
        }
      }
    }
    return zero3;
  });
  filter6 = /* @__PURE__ */ dual(2, (self, f) => mutate(empty8(), (map9) => {
    for (const [k, a] of self) {
      if (f(a, k)) {
        set2(map9, k, a);
      }
    }
  }));
  filterMap6 = /* @__PURE__ */ dual(2, (self, f) => mutate(empty8(), (map9) => {
    for (const [k, a] of self) {
      const option2 = f(a, k);
      if (isSome2(option2)) {
        set2(map9, k, option2.value);
      }
    }
  }));
  findFirst4 = /* @__PURE__ */ dual(2, (self, predicate) => {
    for (const ka of self) {
      if (predicate(ka[1], ka[0])) {
        return some3(ka);
      }
    }
    return none2();
  });
  some9 = /* @__PURE__ */ dual(2, (self, predicate) => {
    for (const ka of self) {
      if (predicate(ka[1], ka[0])) {
        return true;
      }
    }
    return false;
  });
  every6 = /* @__PURE__ */ dual(2, (self, predicate) => !some9(self, (a, k) => !predicate(a, k)));
});

// node_modules/effect/dist/esm/internal/hashSet.js
var HashSetSymbolKey = "effect/HashSet", HashSetTypeId, HashSetProto, makeImpl2 = (keyMap) => {
  const set3 = Object.create(HashSetProto);
  set3._keyMap = keyMap;
  return set3;
}, isHashSet = (u) => hasProperty(u, HashSetTypeId), _empty4, empty9 = () => _empty4, fromIterable5 = (elements) => {
  const set3 = beginMutation2(empty9());
  for (const value of elements) {
    add3(set3, value);
  }
  return endMutation2(set3);
}, make13 = (...elements) => {
  const set3 = beginMutation2(empty9());
  for (const value of elements) {
    add3(set3, value);
  }
  return endMutation2(set3);
}, has3, some10, every7, isSubset, values3 = (self) => keys2(self._keyMap), size5 = (self) => size4(self._keyMap), beginMutation2 = (self) => makeImpl2(beginMutation(self._keyMap)), endMutation2 = (self) => {
  self._keyMap._editable = false;
  return self;
}, mutate2, add3, remove5, difference4, intersection5, union5, toggle, map9, flatMap7, forEach5, reduce6, filter7, partition4;
var init_hashSet = __esm(() => {
  init_Equal();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Predicate();
  init_hashMap();
  HashSetTypeId = /* @__PURE__ */ Symbol.for(HashSetSymbolKey);
  HashSetProto = {
    [HashSetTypeId]: HashSetTypeId,
    [Symbol.iterator]() {
      return keys2(this._keyMap);
    },
    [symbol2]() {
      return cached(this, combine2(hash(this._keyMap))(hash(HashSetSymbolKey)));
    },
    [symbol3](that) {
      if (isHashSet(that)) {
        return size4(this._keyMap) === size4(that._keyMap) && equals(this._keyMap, that._keyMap);
      }
      return false;
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "HashSet",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  _empty4 = /* @__PURE__ */ makeImpl2(/* @__PURE__ */ empty8());
  has3 = /* @__PURE__ */ dual(2, (self, value) => has2(self._keyMap, value));
  some10 = /* @__PURE__ */ dual(2, (self, f) => {
    let found = false;
    for (const value of self) {
      found = f(value);
      if (found) {
        break;
      }
    }
    return found;
  });
  every7 = /* @__PURE__ */ dual(2, (self, refinement) => !some10(self, (a) => !refinement(a)));
  isSubset = /* @__PURE__ */ dual(2, (self, that) => every7(self, (value) => has3(that, value)));
  mutate2 = /* @__PURE__ */ dual(2, (self, f) => {
    const transient = beginMutation2(self);
    f(transient);
    return endMutation2(transient);
  });
  add3 = /* @__PURE__ */ dual(2, (self, value) => self._keyMap._editable ? (set2(value, true)(self._keyMap), self) : makeImpl2(set2(value, true)(self._keyMap)));
  remove5 = /* @__PURE__ */ dual(2, (self, value) => self._keyMap._editable ? (remove4(value)(self._keyMap), self) : makeImpl2(remove4(value)(self._keyMap)));
  difference4 = /* @__PURE__ */ dual(2, (self, that) => mutate2(self, (set3) => {
    for (const value of that) {
      remove5(set3, value);
    }
  }));
  intersection5 = /* @__PURE__ */ dual(2, (self, that) => mutate2(empty9(), (set3) => {
    for (const value of that) {
      if (has3(value)(self)) {
        add3(value)(set3);
      }
    }
  }));
  union5 = /* @__PURE__ */ dual(2, (self, that) => mutate2(empty9(), (set3) => {
    forEach5(self, (value) => add3(set3, value));
    for (const value of that) {
      add3(set3, value);
    }
  }));
  toggle = /* @__PURE__ */ dual(2, (self, value) => has3(self, value) ? remove5(self, value) : add3(self, value));
  map9 = /* @__PURE__ */ dual(2, (self, f) => mutate2(empty9(), (set3) => {
    forEach5(self, (a) => {
      const b = f(a);
      if (!has3(set3, b)) {
        add3(set3, b);
      }
    });
  }));
  flatMap7 = /* @__PURE__ */ dual(2, (self, f) => mutate2(empty9(), (set3) => {
    forEach5(self, (a) => {
      for (const b of f(a)) {
        if (!has3(set3, b)) {
          add3(set3, b);
        }
      }
    });
  }));
  forEach5 = /* @__PURE__ */ dual(2, (self, f) => forEach4(self._keyMap, (_, k) => f(k)));
  reduce6 = /* @__PURE__ */ dual(3, (self, zero3, f) => reduce5(self._keyMap, zero3, (z2, _, a) => f(z2, a)));
  filter7 = /* @__PURE__ */ dual(2, (self, f) => {
    return mutate2(empty9(), (set3) => {
      const iterator = values3(self);
      let next;
      while (!(next = iterator.next()).done) {
        const value = next.value;
        if (f(value)) {
          add3(set3, value);
        }
      }
    });
  });
  partition4 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const iterator = values3(self);
    let next;
    const right3 = beginMutation2(empty9());
    const left3 = beginMutation2(empty9());
    while (!(next = iterator.next()).done) {
      const value = next.value;
      if (predicate(value)) {
        add3(right3, value);
      } else {
        add3(left3, value);
      }
    }
    return [endMutation2(left3), endMutation2(right3)];
  });
});

// node_modules/effect/dist/esm/HashSet.js
var exports_HashSet = {};
__export(exports_HashSet, {
  values: () => values4,
  union: () => union6,
  toggle: () => toggle2,
  toValues: () => toValues,
  some: () => some11,
  size: () => size6,
  remove: () => remove6,
  reduce: () => reduce7,
  partition: () => partition5,
  mutate: () => mutate3,
  map: () => map10,
  make: () => make14,
  isSubset: () => isSubset2,
  isHashSet: () => isHashSet2,
  intersection: () => intersection6,
  has: () => has4,
  fromIterable: () => fromIterable6,
  forEach: () => forEach6,
  flatMap: () => flatMap8,
  filter: () => filter8,
  every: () => every8,
  endMutation: () => endMutation3,
  empty: () => empty10,
  difference: () => difference5,
  beginMutation: () => beginMutation3,
  add: () => add4
});
var isHashSet2, empty10, fromIterable6, make14, has4, some11, every8, isSubset2, values4, toValues = (self) => Array.from(values4(self)), size6, beginMutation3, endMutation3, mutate3, add4, remove6, difference5, intersection6, union6, toggle2, map10, flatMap8, forEach6, reduce7, filter8, partition5;
var init_HashSet = __esm(() => {
  init_hashSet();
  isHashSet2 = isHashSet;
  empty10 = empty9;
  fromIterable6 = fromIterable5;
  make14 = make13;
  has4 = has3;
  some11 = some10;
  every8 = every7;
  isSubset2 = isSubset;
  values4 = values3;
  size6 = size5;
  beginMutation3 = beginMutation2;
  endMutation3 = endMutation2;
  mutate3 = mutate2;
  add4 = add3;
  remove6 = remove5;
  difference5 = difference4;
  intersection6 = intersection5;
  union6 = union5;
  toggle2 = toggle;
  map10 = map9;
  flatMap8 = flatMap7;
  forEach6 = forEach5;
  reduce7 = reduce6;
  filter8 = filter7;
  partition5 = partition4;
});

// node_modules/effect/dist/esm/MutableRef.js
var exports_MutableRef = {};
__export(exports_MutableRef, {
  updateAndGet: () => updateAndGet,
  update: () => update,
  toggle: () => toggle3,
  setAndGet: () => setAndGet,
  set: () => set3,
  make: () => make15,
  incrementAndGet: () => incrementAndGet,
  increment: () => increment3,
  getAndUpdate: () => getAndUpdate,
  getAndSet: () => getAndSet,
  getAndIncrement: () => getAndIncrement,
  getAndDecrement: () => getAndDecrement,
  get: () => get8,
  decrementAndGet: () => decrementAndGet,
  decrement: () => decrement3,
  compareAndSet: () => compareAndSet
});
var TypeId9, MutableRefProto, make15 = (value) => {
  const ref = Object.create(MutableRefProto);
  ref.current = value;
  return ref;
}, compareAndSet, decrement3 = (self) => update(self, (n) => n - 1), decrementAndGet = (self) => updateAndGet(self, (n) => n - 1), get8 = (self) => self.current, getAndDecrement = (self) => getAndUpdate(self, (n) => n - 1), getAndIncrement = (self) => getAndUpdate(self, (n) => n + 1), getAndSet, getAndUpdate, increment3 = (self) => update(self, (n) => n + 1), incrementAndGet = (self) => updateAndGet(self, (n) => n + 1), set3, setAndGet, update, updateAndGet, toggle3 = (self) => update(self, (_) => !_);
var init_MutableRef = __esm(() => {
  init_Equal();
  init_Function();
  init_Inspectable();
  TypeId9 = /* @__PURE__ */ Symbol.for("effect/MutableRef");
  MutableRefProto = {
    [TypeId9]: TypeId9,
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "MutableRef",
        current: toJSON(this.current)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  compareAndSet = /* @__PURE__ */ dual(3, (self, oldValue, newValue) => {
    if (equals(oldValue, self.current)) {
      self.current = newValue;
      return true;
    }
    return false;
  });
  getAndSet = /* @__PURE__ */ dual(2, (self, value) => {
    const ret = self.current;
    self.current = value;
    return ret;
  });
  getAndUpdate = /* @__PURE__ */ dual(2, (self, f) => getAndSet(self, f(get8(self))));
  set3 = /* @__PURE__ */ dual(2, (self, value) => {
    self.current = value;
    return self;
  });
  setAndGet = /* @__PURE__ */ dual(2, (self, value) => {
    self.current = value;
    return self.current;
  });
  update = /* @__PURE__ */ dual(2, (self, f) => set3(self, f(get8(self))));
  updateAndGet = /* @__PURE__ */ dual(2, (self, f) => setAndGet(self, f(get8(self))));
});

// node_modules/effect/dist/esm/internal/fiberId.js
var FiberIdSymbolKey = "effect/FiberId", FiberIdTypeId, OP_NONE = "None", OP_RUNTIME = "Runtime", OP_COMPOSITE = "Composite", emptyHash, None, Runtime, Composite, none3, runtime = (id, startTimeMillis) => {
  return new Runtime(id, startTimeMillis);
}, composite = (left3, right3) => {
  return new Composite(left3, right3);
}, isFiberId = (self) => hasProperty(self, FiberIdTypeId), isNone3 = (self) => {
  return self._tag === OP_NONE || pipe(toSet(self), every8((id) => isNone3(id)));
}, isRuntime = (self) => {
  return self._tag === OP_RUNTIME;
}, isComposite = (self) => {
  return self._tag === OP_COMPOSITE;
}, combine4, combineAll3 = (fiberIds) => {
  return pipe(fiberIds, reduce7(none3, (a, b) => combine4(b)(a)));
}, getOrElse5, ids = (self) => {
  switch (self._tag) {
    case OP_NONE: {
      return empty10();
    }
    case OP_RUNTIME: {
      return make14(self.id);
    }
    case OP_COMPOSITE: {
      return pipe(ids(self.left), union6(ids(self.right)));
    }
  }
}, _fiberCounter, make16 = (id, startTimeSeconds) => {
  return new Runtime(id, startTimeSeconds);
}, threadName = (self) => {
  const identifiers = Array.from(ids(self)).map((n) => `#${n}`).join(",");
  return identifiers;
}, toOption = (self) => {
  const fiberIds = toSet(self);
  if (size6(fiberIds) === 0) {
    return none2();
  }
  let first = true;
  let acc;
  for (const fiberId of fiberIds) {
    if (first) {
      acc = fiberId;
      first = false;
    } else {
      acc = pipe(acc, combine4(fiberId));
    }
  }
  return some3(acc);
}, toSet = (self) => {
  switch (self._tag) {
    case OP_NONE: {
      return empty10();
    }
    case OP_RUNTIME: {
      return make14(self);
    }
    case OP_COMPOSITE: {
      return pipe(toSet(self.left), union6(toSet(self.right)));
    }
  }
}, unsafeMake2 = () => {
  const id = get8(_fiberCounter);
  pipe(_fiberCounter, set3(id + 1));
  return new Runtime(id, Date.now());
};
var init_fiberId = __esm(() => {
  init_Equal();
  init_Function();
  init_GlobalValue();
  init_Hash();
  init_HashSet();
  init_Inspectable();
  init_MutableRef();
  init_Option();
  init_Predicate();
  FiberIdTypeId = /* @__PURE__ */ Symbol.for(FiberIdSymbolKey);
  emptyHash = /* @__PURE__ */ string2(`${FiberIdSymbolKey}-${OP_NONE}`);
  None = class None {
    [FiberIdTypeId] = FiberIdTypeId;
    _tag = OP_NONE;
    id = -1;
    startTimeMillis = -1;
    [symbol2]() {
      return emptyHash;
    }
    [symbol3](that) {
      return isFiberId(that) && that._tag === OP_NONE;
    }
    toString() {
      return format2(this.toJSON());
    }
    toJSON() {
      return {
        _id: "FiberId",
        _tag: this._tag
      };
    }
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
  };
  Runtime = class Runtime {
    id;
    startTimeMillis;
    [FiberIdTypeId] = FiberIdTypeId;
    _tag = OP_RUNTIME;
    constructor(id, startTimeMillis) {
      this.id = id;
      this.startTimeMillis = startTimeMillis;
    }
    [symbol2]() {
      return cached(this, string2(`${FiberIdSymbolKey}-${this._tag}-${this.id}-${this.startTimeMillis}`));
    }
    [symbol3](that) {
      return isFiberId(that) && that._tag === OP_RUNTIME && this.id === that.id && this.startTimeMillis === that.startTimeMillis;
    }
    toString() {
      return format2(this.toJSON());
    }
    toJSON() {
      return {
        _id: "FiberId",
        _tag: this._tag,
        id: this.id,
        startTimeMillis: this.startTimeMillis
      };
    }
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
  };
  Composite = class Composite {
    left;
    right;
    [FiberIdTypeId] = FiberIdTypeId;
    _tag = OP_COMPOSITE;
    constructor(left3, right3) {
      this.left = left3;
      this.right = right3;
    }
    _hash;
    [symbol2]() {
      return pipe(string2(`${FiberIdSymbolKey}-${this._tag}`), combine2(hash(this.left)), combine2(hash(this.right)), cached(this));
    }
    [symbol3](that) {
      return isFiberId(that) && that._tag === OP_COMPOSITE && equals(this.left, that.left) && equals(this.right, that.right);
    }
    toString() {
      return format2(this.toJSON());
    }
    toJSON() {
      return {
        _id: "FiberId",
        _tag: this._tag,
        left: toJSON(this.left),
        right: toJSON(this.right)
      };
    }
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
  };
  none3 = /* @__PURE__ */ new None;
  combine4 = /* @__PURE__ */ dual(2, (self, that) => {
    if (self._tag === OP_NONE) {
      return that;
    }
    if (that._tag === OP_NONE) {
      return self;
    }
    return new Composite(self, that);
  });
  getOrElse5 = /* @__PURE__ */ dual(2, (self, that) => isNone3(self) ? that : self);
  _fiberCounter = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Fiber/Id/_fiberCounter"), () => make15(0));
});

// node_modules/effect/dist/esm/FiberId.js
var exports_FiberId = {};
__export(exports_FiberId, {
  unsafeMake: () => unsafeMake3,
  toSet: () => toSet2,
  toOption: () => toOption2,
  threadName: () => threadName2,
  runtime: () => runtime2,
  none: () => none4,
  make: () => make17,
  isRuntime: () => isRuntime2,
  isNone: () => isNone4,
  isFiberId: () => isFiberId2,
  isComposite: () => isComposite2,
  ids: () => ids2,
  getOrElse: () => getOrElse6,
  composite: () => composite2,
  combineAll: () => combineAll4,
  combine: () => combine5,
  FiberIdTypeId: () => FiberIdTypeId2
});
var FiberIdTypeId2, none4, runtime2, composite2, isFiberId2, isNone4, isRuntime2, isComposite2, combine5, combineAll4, getOrElse6, ids2, make17, threadName2, toOption2, toSet2, unsafeMake3;
var init_FiberId = __esm(() => {
  init_fiberId();
  FiberIdTypeId2 = FiberIdTypeId;
  none4 = none3;
  runtime2 = runtime;
  composite2 = composite;
  isFiberId2 = isFiberId;
  isNone4 = isNone3;
  isRuntime2 = isRuntime;
  isComposite2 = isComposite;
  combine5 = combine4;
  combineAll4 = combineAll3;
  getOrElse6 = getOrElse5;
  ids2 = ids;
  make17 = make16;
  threadName2 = threadName;
  toOption2 = toOption;
  toSet2 = toSet;
  unsafeMake3 = unsafeMake2;
});

// node_modules/effect/dist/esm/internal/hashMap/keySet.js
function keySet(self) {
  return makeImpl2(self);
}
var init_keySet = __esm(() => {
  init_hashSet();
});

// node_modules/effect/dist/esm/HashMap.js
var exports_HashMap = {};
__export(exports_HashMap, {
  values: () => values5,
  unsafeGet: () => unsafeGet6,
  union: () => union7,
  toValues: () => toValues2,
  toEntries: () => toEntries2,
  some: () => some12,
  size: () => size7,
  set: () => set4,
  removeMany: () => removeMany2,
  remove: () => remove7,
  reduce: () => reduce8,
  mutate: () => mutate4,
  modifyHash: () => modifyHash2,
  modifyAt: () => modifyAt2,
  modify: () => modify5,
  map: () => map11,
  make: () => make18,
  keys: () => keys3,
  keySet: () => keySet2,
  isHashMap: () => isHashMap2,
  isEmpty: () => isEmpty4,
  hasHash: () => hasHash2,
  has: () => has5,
  getHash: () => getHash2,
  get: () => get9,
  fromIterable: () => fromIterable7,
  forEach: () => forEach7,
  flatMap: () => flatMap9,
  findFirst: () => findFirst5,
  filterMap: () => filterMap7,
  filter: () => filter9,
  every: () => every9,
  entries: () => entries2,
  endMutation: () => endMutation4,
  empty: () => empty11,
  compact: () => compact3,
  beginMutation: () => beginMutation4
});
var isHashMap2, empty11, make18, fromIterable7, isEmpty4, get9, getHash2, unsafeGet6, has5, hasHash2, set4, keys3, keySet2, values5, toValues2 = (self) => Array.from(values5(self)), entries2, toEntries2 = (self) => Array.from(entries2(self)), size7, beginMutation4, endMutation4, mutate4, modifyAt2, modifyHash2, modify5, union7, remove7, removeMany2, map11, flatMap9, forEach7, reduce8, filter9, compact3, filterMap7, findFirst5, some12, every9;
var init_HashMap = __esm(() => {
  init_hashMap();
  init_keySet();
  isHashMap2 = isHashMap;
  empty11 = empty8;
  make18 = make12;
  fromIterable7 = fromIterable4;
  isEmpty4 = isEmpty3;
  get9 = get7;
  getHash2 = getHash;
  unsafeGet6 = unsafeGet5;
  has5 = has2;
  hasHash2 = hasHash;
  set4 = set2;
  keys3 = keys2;
  keySet2 = keySet;
  values5 = values2;
  entries2 = entries;
  size7 = size4;
  beginMutation4 = beginMutation;
  endMutation4 = endMutation;
  mutate4 = mutate;
  modifyAt2 = modifyAt;
  modifyHash2 = modifyHash;
  modify5 = modify4;
  union7 = union4;
  remove7 = remove4;
  removeMany2 = removeMany;
  map11 = map8;
  flatMap9 = flatMap6;
  forEach7 = forEach4;
  reduce8 = reduce5;
  filter9 = filter6;
  compact3 = compact2;
  filterMap7 = filterMap6;
  findFirst5 = findFirst4;
  some12 = some9;
  every9 = every6;
});

// node_modules/effect/dist/esm/List.js
var exports_List = {};
__export(exports_List, {
  unsafeTail: () => unsafeTail,
  unsafeLast: () => unsafeLast2,
  unsafeHead: () => unsafeHead3,
  toChunk: () => toChunk,
  toArray: () => toArray3,
  take: () => take4,
  tail: () => tail3,
  splitAt: () => splitAt3,
  some: () => some13,
  size: () => size8,
  reverse: () => reverse4,
  reduceRight: () => reduceRight3,
  reduce: () => reduce9,
  prependAllReversed: () => prependAllReversed,
  prependAll: () => prependAll4,
  prepend: () => prepend4,
  partitionMap: () => partitionMap5,
  partition: () => partition6,
  of: () => of4,
  nil: () => nil,
  map: () => map12,
  make: () => make19,
  last: () => last3,
  isNil: () => isNil,
  isList: () => isList,
  isCons: () => isCons,
  head: () => head4,
  getEquivalence: () => getEquivalence7,
  fromIterable: () => fromIterable8,
  forEach: () => forEach8,
  flatMap: () => flatMap10,
  findFirst: () => findFirst6,
  filterMap: () => filterMap8,
  filter: () => filter10,
  every: () => every10,
  empty: () => empty12,
  drop: () => drop4,
  cons: () => cons,
  compact: () => compact4,
  appendAll: () => appendAll4,
  append: () => append4,
  TypeId: () => TypeId10
});
var TypeId10, toArray3 = (self) => fromIterable2(self), getEquivalence7 = (isEquivalent) => mapInput(getEquivalence5(isEquivalent), toArray3), _equivalence5, ConsProto, makeCons = (head4, tail3) => {
  const cons = Object.create(ConsProto);
  cons.head = head4;
  cons.tail = tail3;
  return cons;
}, NilHash, NilProto, _Nil, isList = (u) => hasProperty(u, TypeId10), isNil = (self) => self._tag === "Nil", isCons = (self) => self._tag === "Cons", size8 = (self) => {
  let these = self;
  let len = 0;
  while (!isNil(these)) {
    len += 1;
    these = these.tail;
  }
  return len;
}, nil = () => _Nil, cons = (head4, tail3) => makeCons(head4, tail3), empty12, of4 = (value) => makeCons(value, _Nil), fromIterable8 = (prefix) => {
  const iterator = prefix[Symbol.iterator]();
  let next;
  if ((next = iterator.next()) && !next.done) {
    const result2 = makeCons(next.value, _Nil);
    let curr = result2;
    while ((next = iterator.next()) && !next.done) {
      const temp = makeCons(next.value, _Nil);
      curr.tail = temp;
      curr = temp;
    }
    return result2;
  } else {
    return _Nil;
  }
}, make19 = (...elements) => fromIterable8(elements), append4, appendAll4, prepend4, prependAll4, prependAllReversed, drop4, every10, some13, filter10, noneIn = (self, predicate, isFlipped) => {
  while (true) {
    if (isNil(self)) {
      return _Nil;
    } else {
      if (predicate(self.head) !== isFlipped) {
        return allIn(self, self.tail, predicate, isFlipped);
      } else {
        self = self.tail;
      }
    }
  }
}, allIn = (start, remaining, predicate, isFlipped) => {
  while (true) {
    if (isNil(remaining)) {
      return start;
    } else {
      if (predicate(remaining.head) !== isFlipped) {
        remaining = remaining.tail;
      } else {
        return partialFill(start, remaining, predicate, isFlipped);
      }
    }
  }
}, partialFill = (origStart, firstMiss, predicate, isFlipped) => {
  const newHead = makeCons(unsafeHead3(origStart), _Nil);
  let toProcess = unsafeTail(origStart);
  let currentLast = newHead;
  while (!(toProcess === firstMiss)) {
    const newElem = makeCons(unsafeHead3(toProcess), _Nil);
    currentLast.tail = newElem;
    currentLast = unsafeCoerce(newElem);
    toProcess = unsafeCoerce(toProcess.tail);
  }
  let next = firstMiss.tail;
  let nextToCopy = unsafeCoerce(next);
  while (!isNil(next)) {
    const head4 = unsafeHead3(next);
    if (predicate(head4) !== isFlipped) {
      next = next.tail;
    } else {
      while (!(nextToCopy === next)) {
        const newElem = makeCons(unsafeHead3(nextToCopy), _Nil);
        currentLast.tail = newElem;
        currentLast = newElem;
        nextToCopy = unsafeCoerce(nextToCopy.tail);
      }
      nextToCopy = unsafeCoerce(next.tail);
      next = next.tail;
    }
  }
  if (!isNil(nextToCopy)) {
    currentLast.tail = nextToCopy;
  }
  return newHead;
}, filterMap8, compact4 = (self) => filterMap8(self, identity), findFirst6, flatMap10, forEach8, head4 = (self) => isNil(self) ? none2() : some3(self.head), last3 = (self) => isNil(self) ? none2() : some3(unsafeLast2(self)), map12, partition6, partitionMap5, reduce9, reduceRight3, reverse4 = (self) => {
  let result2 = empty12();
  let these = self;
  while (!isNil(these)) {
    result2 = prepend4(result2, these.head);
    these = these.tail;
  }
  return result2;
}, splitAt3, tail3 = (self) => isNil(self) ? none2() : some3(self.tail), take4, toChunk = (self) => fromIterable3(self), getExpectedListToBeNonEmptyErrorMessage = "Expected List to be non-empty", unsafeHead3 = (self) => {
  if (isNil(self)) {
    throw new Error(getExpectedListToBeNonEmptyErrorMessage);
  }
  return self.head;
}, unsafeLast2 = (self) => {
  if (isNil(self)) {
    throw new Error(getExpectedListToBeNonEmptyErrorMessage);
  }
  let these = self;
  let scout = self.tail;
  while (!isNil(scout)) {
    these = scout;
    scout = scout.tail;
  }
  return these.head;
}, unsafeTail = (self) => {
  if (isNil(self)) {
    throw new Error(getExpectedListToBeNonEmptyErrorMessage);
  }
  return self.tail;
};
var init_List = __esm(() => {
  init_Array();
  init_Chunk();
  init_Either();
  init_Equal();
  init_Equivalence();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Predicate();
  TypeId10 = /* @__PURE__ */ Symbol.for("effect/List");
  _equivalence5 = /* @__PURE__ */ getEquivalence7(equals);
  ConsProto = {
    [TypeId10]: TypeId10,
    _tag: "Cons",
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "List",
        _tag: "Cons",
        values: toArray3(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    [symbol3](that) {
      return isList(that) && this._tag === that._tag && _equivalence5(this, that);
    },
    [symbol2]() {
      return cached(this, array2(toArray3(this)));
    },
    [Symbol.iterator]() {
      let done = false;
      let self = this;
      return {
        next() {
          if (done) {
            return this.return();
          }
          if (self._tag === "Nil") {
            done = true;
            return this.return();
          }
          const value = self.head;
          self = self.tail;
          return {
            done,
            value
          };
        },
        return(value) {
          if (!done) {
            done = true;
          }
          return {
            done: true,
            value
          };
        }
      };
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  NilHash = /* @__PURE__ */ string2("Nil");
  NilProto = {
    [TypeId10]: TypeId10,
    _tag: "Nil",
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "List",
        _tag: "Nil"
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    [symbol2]() {
      return NilHash;
    },
    [symbol3](that) {
      return isList(that) && this._tag === that._tag;
    },
    [Symbol.iterator]() {
      return {
        next() {
          return {
            done: true,
            value: undefined
          };
        }
      };
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  _Nil = /* @__PURE__ */ Object.create(NilProto);
  empty12 = nil;
  append4 = /* @__PURE__ */ dual(2, (self, element) => appendAll4(self, of4(element)));
  appendAll4 = /* @__PURE__ */ dual(2, (self, that) => prependAll4(that, self));
  prepend4 = /* @__PURE__ */ dual(2, (self, element) => cons(element, self));
  prependAll4 = /* @__PURE__ */ dual(2, (self, prefix) => {
    if (isNil(self)) {
      return prefix;
    } else if (isNil(prefix)) {
      return self;
    } else {
      const result2 = makeCons(prefix.head, self);
      let curr = result2;
      let that = prefix.tail;
      while (!isNil(that)) {
        const temp = makeCons(that.head, self);
        curr.tail = temp;
        curr = temp;
        that = that.tail;
      }
      return result2;
    }
  });
  prependAllReversed = /* @__PURE__ */ dual(2, (self, prefix) => {
    let out = self;
    let pres = prefix;
    while (isCons(pres)) {
      out = makeCons(pres.head, out);
      pres = pres.tail;
    }
    return out;
  });
  drop4 = /* @__PURE__ */ dual(2, (self, n) => {
    if (n <= 0) {
      return self;
    }
    if (n >= size8(self)) {
      return _Nil;
    }
    let these = self;
    let i2 = 0;
    while (!isNil(these) && i2 < n) {
      these = these.tail;
      i2 += 1;
    }
    return these;
  });
  every10 = /* @__PURE__ */ dual(2, (self, refinement) => {
    for (const a of self) {
      if (!refinement(a)) {
        return false;
      }
    }
    return true;
  });
  some13 = /* @__PURE__ */ dual(2, (self, predicate) => {
    let these = self;
    while (!isNil(these)) {
      if (predicate(these.head)) {
        return true;
      }
      these = these.tail;
    }
    return false;
  });
  filter10 = /* @__PURE__ */ dual(2, (self, predicate) => noneIn(self, predicate, false));
  filterMap8 = /* @__PURE__ */ dual(2, (self, f) => {
    const bs = [];
    for (const a of self) {
      const oa = f(a);
      if (isSome2(oa)) {
        bs.push(oa.value);
      }
    }
    return fromIterable8(bs);
  });
  findFirst6 = /* @__PURE__ */ dual(2, (self, predicate) => {
    let these = self;
    while (!isNil(these)) {
      if (predicate(these.head)) {
        return some3(these.head);
      }
      these = these.tail;
    }
    return none2();
  });
  flatMap10 = /* @__PURE__ */ dual(2, (self, f) => {
    let rest = self;
    let head4 = undefined;
    let tail3 = undefined;
    while (!isNil(rest)) {
      let bs = f(rest.head);
      while (!isNil(bs)) {
        const next = makeCons(bs.head, _Nil);
        if (tail3 === undefined) {
          head4 = next;
        } else {
          tail3.tail = next;
        }
        tail3 = next;
        bs = bs.tail;
      }
      rest = rest.tail;
    }
    if (head4 === undefined) {
      return _Nil;
    }
    return head4;
  });
  forEach8 = /* @__PURE__ */ dual(2, (self, f) => {
    let these = self;
    while (!isNil(these)) {
      f(these.head);
      these = these.tail;
    }
  });
  map12 = /* @__PURE__ */ dual(2, (self, f) => {
    if (isNil(self)) {
      return self;
    } else {
      let i2 = 0;
      const head5 = makeCons(f(self.head, i2++), _Nil);
      let nextHead = head5;
      let rest = self.tail;
      while (!isNil(rest)) {
        const next = makeCons(f(rest.head, i2++), _Nil);
        nextHead.tail = next;
        nextHead = next;
        rest = rest.tail;
      }
      return head5;
    }
  });
  partition6 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const left3 = [];
    const right3 = [];
    for (const a of self) {
      if (predicate(a)) {
        right3.push(a);
      } else {
        left3.push(a);
      }
    }
    return [fromIterable8(left3), fromIterable8(right3)];
  });
  partitionMap5 = /* @__PURE__ */ dual(2, (self, f) => {
    const left3 = [];
    const right3 = [];
    for (const a of self) {
      const e = f(a);
      if (isLeft2(e)) {
        left3.push(e.left);
      } else {
        right3.push(e.right);
      }
    }
    return [fromIterable8(left3), fromIterable8(right3)];
  });
  reduce9 = /* @__PURE__ */ dual(3, (self, zero3, f) => {
    let acc = zero3;
    let these = self;
    while (!isNil(these)) {
      acc = f(acc, these.head);
      these = these.tail;
    }
    return acc;
  });
  reduceRight3 = /* @__PURE__ */ dual(3, (self, zero3, f) => {
    let acc = zero3;
    let these = reverse4(self);
    while (!isNil(these)) {
      acc = f(acc, these.head);
      these = these.tail;
    }
    return acc;
  });
  splitAt3 = /* @__PURE__ */ dual(2, (self, n) => [take4(self, n), drop4(self, n)]);
  take4 = /* @__PURE__ */ dual(2, (self, n) => {
    if (n <= 0) {
      return _Nil;
    }
    if (n >= size8(self)) {
      return self;
    }
    let these = make19(unsafeHead3(self));
    let current = unsafeTail(self);
    for (let i2 = 1;i2 < n; i2++) {
      these = makeCons(unsafeHead3(current), these);
      current = unsafeTail(current);
    }
    return reverse4(these);
  });
});

// node_modules/effect/dist/esm/internal/data.js
var ArrayProto, Structural, struct4 = (as2) => Object.assign(Object.create(StructuralPrototype), as2);
var init_data = __esm(() => {
  init_Equal();
  init_Hash();
  init_effectable();
  ArrayProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(Array.prototype), {
    [symbol2]() {
      return cached(this, array2(this));
    },
    [symbol3](that) {
      if (Array.isArray(that) && this.length === that.length) {
        return this.every((v, i2) => equals(v, that[i2]));
      } else {
        return false;
      }
    }
  });
  Structural = /* @__PURE__ */ function() {
    function Structural2(args) {
      if (args) {
        Object.assign(this, args);
      }
    }
    Structural2.prototype = StructuralPrototype;
    return Structural2;
  }();
});

// node_modules/effect/dist/esm/internal/differ/chunkPatch.js
function variance(a) {
  return a;
}
var ChunkPatchTypeId, PatchProto, EmptyProto, _empty5, empty13 = () => _empty5, AndThenProto, makeAndThen = (first, second) => {
  const o = Object.create(AndThenProto);
  o.first = first;
  o.second = second;
  return o;
}, AppendProto, makeAppend = (values6) => {
  const o = Object.create(AppendProto);
  o.values = values6;
  return o;
}, SliceProto, makeSlice = (from, until) => {
  const o = Object.create(SliceProto);
  o.from = from;
  o.until = until;
  return o;
}, UpdateProto, makeUpdate = (index, patch) => {
  const o = Object.create(UpdateProto);
  o.index = index;
  o.patch = patch;
  return o;
}, diff = (options) => {
  let i2 = 0;
  let patch = empty13();
  while (i2 < options.oldValue.length && i2 < options.newValue.length) {
    const oldElement = unsafeGet4(i2)(options.oldValue);
    const newElement = unsafeGet4(i2)(options.newValue);
    const valuePatch = options.differ.diff(oldElement, newElement);
    if (!equals(valuePatch, options.differ.empty)) {
      patch = pipe(patch, combine6(makeUpdate(i2, valuePatch)));
    }
    i2 = i2 + 1;
  }
  if (i2 < options.oldValue.length) {
    patch = pipe(patch, combine6(makeSlice(0, i2)));
  }
  if (i2 < options.newValue.length) {
    patch = pipe(patch, combine6(makeAppend(drop3(i2)(options.newValue))));
  }
  return patch;
}, combine6, patch;
var init_chunkPatch = __esm(() => {
  init_Chunk();
  init_Equal();
  init_Function();
  init_Function();
  init_data();
  ChunkPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferChunkPatch");
  PatchProto = {
    ...Structural.prototype,
    [ChunkPatchTypeId]: {
      _Value: variance,
      _Patch: variance
    }
  };
  EmptyProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
    _tag: "Empty"
  });
  _empty5 = /* @__PURE__ */ Object.create(EmptyProto);
  AndThenProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
    _tag: "AndThen"
  });
  AppendProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
    _tag: "Append"
  });
  SliceProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
    _tag: "Slice"
  });
  UpdateProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto), {
    _tag: "Update"
  });
  combine6 = /* @__PURE__ */ dual(2, (self, that) => makeAndThen(self, that));
  patch = /* @__PURE__ */ dual(3, (self, oldValue, differ) => {
    if (self._tag === "Empty") {
      return oldValue;
    }
    let chunk = oldValue;
    let patches = of3(self);
    while (isNonEmpty2(patches)) {
      const head5 = headNonEmpty2(patches);
      const tail4 = tailNonEmpty2(patches);
      switch (head5._tag) {
        case "Empty": {
          patches = tail4;
          break;
        }
        case "AndThen": {
          patches = prepend3(head5.first)(prepend3(head5.second)(tail4));
          break;
        }
        case "Append": {
          chunk = appendAll3(head5.values)(chunk);
          patches = tail4;
          break;
        }
        case "Slice": {
          const array5 = toReadonlyArray(chunk);
          chunk = unsafeFromArray(array5.slice(head5.from, head5.until));
          patches = tail4;
          break;
        }
        case "Update": {
          const array5 = toReadonlyArray(chunk);
          array5[head5.index] = differ.patch(head5.patch, array5[head5.index]);
          chunk = unsafeFromArray(array5);
          patches = tail4;
          break;
        }
      }
    }
    return chunk;
  });
});

// node_modules/effect/dist/esm/internal/differ/contextPatch.js
function variance2(a) {
  return a;
}
var ContextPatchTypeId, PatchProto2, EmptyProto2, _empty6, empty14 = () => _empty6, AndThenProto2, makeAndThen2 = (first, second) => {
  const o = Object.create(AndThenProto2);
  o.first = first;
  o.second = second;
  return o;
}, AddServiceProto, makeAddService = (key, service) => {
  const o = Object.create(AddServiceProto);
  o.key = key;
  o.service = service;
  return o;
}, RemoveServiceProto, makeRemoveService = (key) => {
  const o = Object.create(RemoveServiceProto);
  o.key = key;
  return o;
}, UpdateServiceProto, makeUpdateService = (key, update2) => {
  const o = Object.create(UpdateServiceProto);
  o.key = key;
  o.update = update2;
  return o;
}, diff2 = (oldValue, newValue) => {
  const missingServices = new Map(oldValue.unsafeMap);
  let patch2 = empty14();
  for (const [tag, newService] of newValue.unsafeMap.entries()) {
    if (missingServices.has(tag)) {
      const old = missingServices.get(tag);
      missingServices.delete(tag);
      if (!equals(old, newService)) {
        patch2 = combine7(makeUpdateService(tag, () => newService))(patch2);
      }
    } else {
      missingServices.delete(tag);
      patch2 = combine7(makeAddService(tag, newService))(patch2);
    }
  }
  for (const [tag] of missingServices.entries()) {
    patch2 = combine7(makeRemoveService(tag))(patch2);
  }
  return patch2;
}, combine7, patch2;
var init_contextPatch = __esm(() => {
  init_Chunk();
  init_Equal();
  init_Function();
  init_context2();
  init_data();
  ContextPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferContextPatch");
  PatchProto2 = {
    ...Structural.prototype,
    [ContextPatchTypeId]: {
      _Value: variance2,
      _Patch: variance2
    }
  };
  EmptyProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
    _tag: "Empty"
  });
  _empty6 = /* @__PURE__ */ Object.create(EmptyProto2);
  AndThenProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
    _tag: "AndThen"
  });
  AddServiceProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
    _tag: "AddService"
  });
  RemoveServiceProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
    _tag: "RemoveService"
  });
  UpdateServiceProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto2), {
    _tag: "UpdateService"
  });
  combine7 = /* @__PURE__ */ dual(2, (self, that) => makeAndThen2(self, that));
  patch2 = /* @__PURE__ */ dual(2, (self, context2) => {
    if (self._tag === "Empty") {
      return context2;
    }
    let wasServiceUpdated = false;
    let patches = of3(self);
    const updatedContext = new Map(context2.unsafeMap);
    while (isNonEmpty2(patches)) {
      const head5 = headNonEmpty2(patches);
      const tail4 = tailNonEmpty2(patches);
      switch (head5._tag) {
        case "Empty": {
          patches = tail4;
          break;
        }
        case "AddService": {
          updatedContext.set(head5.key, head5.service);
          patches = tail4;
          break;
        }
        case "AndThen": {
          patches = prepend3(prepend3(tail4, head5.second), head5.first);
          break;
        }
        case "RemoveService": {
          updatedContext.delete(head5.key);
          patches = tail4;
          break;
        }
        case "UpdateService": {
          updatedContext.set(head5.key, head5.update(updatedContext.get(head5.key)));
          wasServiceUpdated = true;
          patches = tail4;
          break;
        }
      }
    }
    if (!wasServiceUpdated) {
      return makeContext(updatedContext);
    }
    const map13 = new Map;
    for (const [tag] of context2.unsafeMap) {
      if (updatedContext.has(tag)) {
        map13.set(tag, updatedContext.get(tag));
        updatedContext.delete(tag);
      }
    }
    for (const [tag, s] of updatedContext) {
      map13.set(tag, s);
    }
    return makeContext(map13);
  });
});

// node_modules/effect/dist/esm/internal/differ/hashMapPatch.js
function variance3(a) {
  return a;
}
var HashMapPatchTypeId, PatchProto3, EmptyProto3, _empty7, empty15 = () => _empty7, AndThenProto3, makeAndThen3 = (first, second) => {
  const o = Object.create(AndThenProto3);
  o.first = first;
  o.second = second;
  return o;
}, AddProto, makeAdd = (key, value) => {
  const o = Object.create(AddProto);
  o.key = key;
  o.value = value;
  return o;
}, RemoveProto, makeRemove = (key) => {
  const o = Object.create(RemoveProto);
  o.key = key;
  return o;
}, UpdateProto2, makeUpdate2 = (key, patch3) => {
  const o = Object.create(UpdateProto2);
  o.key = key;
  o.patch = patch3;
  return o;
}, diff3 = (options) => {
  const [removed, patch3] = reduce8([options.oldValue, empty15()], ([map13, patch4], newValue, key) => {
    const option2 = get9(key)(map13);
    switch (option2._tag) {
      case "Some": {
        const valuePatch = options.differ.diff(option2.value, newValue);
        if (equals(valuePatch, options.differ.empty)) {
          return [remove7(key)(map13), patch4];
        }
        return [remove7(key)(map13), combine8(makeUpdate2(key, valuePatch))(patch4)];
      }
      case "None": {
        return [map13, combine8(makeAdd(key, newValue))(patch4)];
      }
    }
  })(options.newValue);
  return reduce8(patch3, (patch4, _, key) => combine8(makeRemove(key))(patch4))(removed);
}, combine8, patch3;
var init_hashMapPatch = __esm(() => {
  init_Chunk();
  init_Equal();
  init_Function();
  init_HashMap();
  init_data();
  HashMapPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferHashMapPatch");
  PatchProto3 = {
    ...Structural.prototype,
    [HashMapPatchTypeId]: {
      _Value: variance3,
      _Key: variance3,
      _Patch: variance3
    }
  };
  EmptyProto3 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
    _tag: "Empty"
  });
  _empty7 = /* @__PURE__ */ Object.create(EmptyProto3);
  AndThenProto3 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
    _tag: "AndThen"
  });
  AddProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
    _tag: "Add"
  });
  RemoveProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
    _tag: "Remove"
  });
  UpdateProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto3), {
    _tag: "Update"
  });
  combine8 = /* @__PURE__ */ dual(2, (self, that) => makeAndThen3(self, that));
  patch3 = /* @__PURE__ */ dual(3, (self, oldValue, differ) => {
    if (self._tag === "Empty") {
      return oldValue;
    }
    let map13 = oldValue;
    let patches = of3(self);
    while (isNonEmpty2(patches)) {
      const head5 = headNonEmpty2(patches);
      const tail4 = tailNonEmpty2(patches);
      switch (head5._tag) {
        case "Empty": {
          patches = tail4;
          break;
        }
        case "AndThen": {
          patches = prepend3(head5.first)(prepend3(head5.second)(tail4));
          break;
        }
        case "Add": {
          map13 = set4(head5.key, head5.value)(map13);
          patches = tail4;
          break;
        }
        case "Remove": {
          map13 = remove7(head5.key)(map13);
          patches = tail4;
          break;
        }
        case "Update": {
          const option2 = get9(head5.key)(map13);
          if (option2._tag === "Some") {
            map13 = set4(head5.key, differ.patch(head5.patch, option2.value))(map13);
          }
          patches = tail4;
          break;
        }
      }
    }
    return map13;
  });
});

// node_modules/effect/dist/esm/internal/differ/hashSetPatch.js
function variance4(a) {
  return a;
}
var HashSetPatchTypeId, PatchProto4, EmptyProto4, _empty8, empty16 = () => _empty8, AndThenProto4, makeAndThen4 = (first, second) => {
  const o = Object.create(AndThenProto4);
  o.first = first;
  o.second = second;
  return o;
}, AddProto2, makeAdd2 = (value) => {
  const o = Object.create(AddProto2);
  o.value = value;
  return o;
}, RemoveProto2, makeRemove2 = (value) => {
  const o = Object.create(RemoveProto2);
  o.value = value;
  return o;
}, diff4 = (oldValue, newValue) => {
  const [removed, patch4] = reduce7([oldValue, empty16()], ([set5, patch5], value) => {
    if (has4(value)(set5)) {
      return [remove6(value)(set5), patch5];
    }
    return [set5, combine9(makeAdd2(value))(patch5)];
  })(newValue);
  return reduce7(patch4, (patch5, value) => combine9(makeRemove2(value))(patch5))(removed);
}, combine9, patch4;
var init_hashSetPatch = __esm(() => {
  init_Chunk();
  init_Function();
  init_HashSet();
  init_data();
  HashSetPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferHashSetPatch");
  PatchProto4 = {
    ...Structural.prototype,
    [HashSetPatchTypeId]: {
      _Value: variance4,
      _Key: variance4,
      _Patch: variance4
    }
  };
  EmptyProto4 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto4), {
    _tag: "Empty"
  });
  _empty8 = /* @__PURE__ */ Object.create(EmptyProto4);
  AndThenProto4 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto4), {
    _tag: "AndThen"
  });
  AddProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto4), {
    _tag: "Add"
  });
  RemoveProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto4), {
    _tag: "Remove"
  });
  combine9 = /* @__PURE__ */ dual(2, (self, that) => makeAndThen4(self, that));
  patch4 = /* @__PURE__ */ dual(2, (self, oldValue) => {
    if (self._tag === "Empty") {
      return oldValue;
    }
    let set5 = oldValue;
    let patches = of3(self);
    while (isNonEmpty2(patches)) {
      const head5 = headNonEmpty2(patches);
      const tail4 = tailNonEmpty2(patches);
      switch (head5._tag) {
        case "Empty": {
          patches = tail4;
          break;
        }
        case "AndThen": {
          patches = prepend3(head5.first)(prepend3(head5.second)(tail4));
          break;
        }
        case "Add": {
          set5 = add4(head5.value)(set5);
          patches = tail4;
          break;
        }
        case "Remove": {
          set5 = remove6(head5.value)(set5);
          patches = tail4;
        }
      }
    }
    return set5;
  });
});

// node_modules/effect/dist/esm/internal/differ/orPatch.js
function variance5(a) {
  return a;
}
var OrPatchTypeId, PatchProto5, EmptyProto5, _empty9, empty17 = () => _empty9, AndThenProto5, makeAndThen5 = (first, second) => {
  const o = Object.create(AndThenProto5);
  o.first = first;
  o.second = second;
  return o;
}, SetLeftProto, makeSetLeft = (value) => {
  const o = Object.create(SetLeftProto);
  o.value = value;
  return o;
}, SetRightProto, makeSetRight = (value) => {
  const o = Object.create(SetRightProto);
  o.value = value;
  return o;
}, UpdateLeftProto, makeUpdateLeft = (patch5) => {
  const o = Object.create(UpdateLeftProto);
  o.patch = patch5;
  return o;
}, UpdateRightProto, makeUpdateRight = (patch5) => {
  const o = Object.create(UpdateRightProto);
  o.patch = patch5;
  return o;
}, diff5 = (options) => {
  switch (options.oldValue._tag) {
    case "Left": {
      switch (options.newValue._tag) {
        case "Left": {
          const valuePatch = options.left.diff(options.oldValue.left, options.newValue.left);
          if (equals(valuePatch, options.left.empty)) {
            return empty17();
          }
          return makeUpdateLeft(valuePatch);
        }
        case "Right": {
          return makeSetRight(options.newValue.right);
        }
      }
    }
    case "Right": {
      switch (options.newValue._tag) {
        case "Left": {
          return makeSetLeft(options.newValue.left);
        }
        case "Right": {
          const valuePatch = options.right.diff(options.oldValue.right, options.newValue.right);
          if (equals(valuePatch, options.right.empty)) {
            return empty17();
          }
          return makeUpdateRight(valuePatch);
        }
      }
    }
  }
}, combine10, patch5;
var init_orPatch = __esm(() => {
  init_Chunk();
  init_Either();
  init_Equal();
  init_Function();
  init_data();
  OrPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferOrPatch");
  PatchProto5 = {
    ...Structural.prototype,
    [OrPatchTypeId]: {
      _Value: variance5,
      _Key: variance5,
      _Patch: variance5
    }
  };
  EmptyProto5 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto5), {
    _tag: "Empty"
  });
  _empty9 = /* @__PURE__ */ Object.create(EmptyProto5);
  AndThenProto5 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto5), {
    _tag: "AndThen"
  });
  SetLeftProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto5), {
    _tag: "SetLeft"
  });
  SetRightProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto5), {
    _tag: "SetRight"
  });
  UpdateLeftProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto5), {
    _tag: "UpdateLeft"
  });
  UpdateRightProto = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto5), {
    _tag: "UpdateRight"
  });
  combine10 = /* @__PURE__ */ dual(2, (self, that) => makeAndThen5(self, that));
  patch5 = /* @__PURE__ */ dual(2, (self, {
    left: left3,
    oldValue,
    right: right3
  }) => {
    if (self._tag === "Empty") {
      return oldValue;
    }
    let patches = of3(self);
    let result2 = oldValue;
    while (isNonEmpty2(patches)) {
      const head5 = headNonEmpty2(patches);
      const tail4 = tailNonEmpty2(patches);
      switch (head5._tag) {
        case "Empty": {
          patches = tail4;
          break;
        }
        case "AndThen": {
          patches = prepend3(head5.first)(prepend3(head5.second)(tail4));
          break;
        }
        case "UpdateLeft": {
          if (result2._tag === "Left") {
            result2 = left2(left3.patch(head5.patch, result2.left));
          }
          patches = tail4;
          break;
        }
        case "UpdateRight": {
          if (result2._tag === "Right") {
            result2 = right2(right3.patch(head5.patch, result2.right));
          }
          patches = tail4;
          break;
        }
        case "SetLeft": {
          result2 = left2(head5.value);
          patches = tail4;
          break;
        }
        case "SetRight": {
          result2 = right2(head5.value);
          patches = tail4;
          break;
        }
      }
    }
    return result2;
  });
});

// node_modules/effect/dist/esm/internal/differ/readonlyArrayPatch.js
function variance6(a) {
  return a;
}
var ReadonlyArrayPatchTypeId, PatchProto6, EmptyProto6, _empty10, empty18 = () => _empty10, AndThenProto6, makeAndThen6 = (first, second) => {
  const o = Object.create(AndThenProto6);
  o.first = first;
  o.second = second;
  return o;
}, AppendProto2, makeAppend2 = (values6) => {
  const o = Object.create(AppendProto2);
  o.values = values6;
  return o;
}, SliceProto2, makeSlice2 = (from, until) => {
  const o = Object.create(SliceProto2);
  o.from = from;
  o.until = until;
  return o;
}, UpdateProto3, makeUpdate3 = (index, patch6) => {
  const o = Object.create(UpdateProto3);
  o.index = index;
  o.patch = patch6;
  return o;
}, diff6 = (options) => {
  let i2 = 0;
  let patch6 = empty18();
  while (i2 < options.oldValue.length && i2 < options.newValue.length) {
    const oldElement = options.oldValue[i2];
    const newElement = options.newValue[i2];
    const valuePatch = options.differ.diff(oldElement, newElement);
    if (!equals(valuePatch, options.differ.empty)) {
      patch6 = combine11(patch6, makeUpdate3(i2, valuePatch));
    }
    i2 = i2 + 1;
  }
  if (i2 < options.oldValue.length) {
    patch6 = combine11(patch6, makeSlice2(0, i2));
  }
  if (i2 < options.newValue.length) {
    patch6 = combine11(patch6, makeAppend2(drop2(i2)(options.newValue)));
  }
  return patch6;
}, combine11, patch6;
var init_readonlyArrayPatch = __esm(() => {
  init_Array();
  init_Equal();
  init_Function();
  init_data();
  ReadonlyArrayPatchTypeId = /* @__PURE__ */ Symbol.for("effect/DifferReadonlyArrayPatch");
  PatchProto6 = {
    ...Structural.prototype,
    [ReadonlyArrayPatchTypeId]: {
      _Value: variance6,
      _Patch: variance6
    }
  };
  EmptyProto6 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto6), {
    _tag: "Empty"
  });
  _empty10 = /* @__PURE__ */ Object.create(EmptyProto6);
  AndThenProto6 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto6), {
    _tag: "AndThen"
  });
  AppendProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto6), {
    _tag: "Append"
  });
  SliceProto2 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto6), {
    _tag: "Slice"
  });
  UpdateProto3 = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(PatchProto6), {
    _tag: "Update"
  });
  combine11 = /* @__PURE__ */ dual(2, (self, that) => makeAndThen6(self, that));
  patch6 = /* @__PURE__ */ dual(3, (self, oldValue, differ) => {
    if (self._tag === "Empty") {
      return oldValue;
    }
    let readonlyArray = oldValue.slice();
    let patches = of2(self);
    while (isNonEmptyArray2(patches)) {
      const head5 = headNonEmpty(patches);
      const tail4 = tailNonEmpty(patches);
      switch (head5._tag) {
        case "Empty": {
          patches = tail4;
          break;
        }
        case "AndThen": {
          tail4.unshift(head5.first, head5.second);
          patches = tail4;
          break;
        }
        case "Append": {
          for (const value of head5.values) {
            readonlyArray.push(value);
          }
          patches = tail4;
          break;
        }
        case "Slice": {
          readonlyArray = readonlyArray.slice(head5.from, head5.until);
          patches = tail4;
          break;
        }
        case "Update": {
          readonlyArray[head5.index] = differ.patch(head5.patch, readonlyArray[head5.index]);
          patches = tail4;
          break;
        }
      }
    }
    return readonlyArray;
  });
});

// node_modules/effect/dist/esm/internal/differ.js
var DifferTypeId, DifferProto, make20 = (params) => {
  const differ = Object.create(DifferProto);
  differ.empty = params.empty;
  differ.diff = params.diff;
  differ.combine = params.combine;
  differ.patch = params.patch;
  return differ;
}, environment = () => make20({
  empty: empty14(),
  combine: (first, second) => combine7(second)(first),
  diff: (oldValue, newValue) => diff2(oldValue, newValue),
  patch: (patch7, oldValue) => patch2(oldValue)(patch7)
}), chunk = (differ) => make20({
  empty: empty13(),
  combine: (first, second) => combine6(second)(first),
  diff: (oldValue, newValue) => diff({
    oldValue,
    newValue,
    differ
  }),
  patch: (patch7, oldValue) => patch(oldValue, differ)(patch7)
}), hashMap = (differ) => make20({
  empty: empty15(),
  combine: (first, second) => combine8(second)(first),
  diff: (oldValue, newValue) => diff3({
    oldValue,
    newValue,
    differ
  }),
  patch: (patch7, oldValue) => patch3(oldValue, differ)(patch7)
}), hashSet = () => make20({
  empty: empty16(),
  combine: (first, second) => combine9(second)(first),
  diff: (oldValue, newValue) => diff4(oldValue, newValue),
  patch: (patch7, oldValue) => patch4(oldValue)(patch7)
}), orElseEither2, readonlyArray = (differ) => make20({
  empty: empty18(),
  combine: (first, second) => combine11(first, second),
  diff: (oldValue, newValue) => diff6({
    oldValue,
    newValue,
    differ
  }),
  patch: (patch7, oldValue) => patch6(patch7, oldValue, differ)
}), transform, update2 = () => updateWith((_, a) => a), updateWith = (f) => make20({
  empty: identity,
  combine: (first, second) => {
    if (first === identity) {
      return second;
    }
    if (second === identity) {
      return first;
    }
    return (a) => second(first(a));
  },
  diff: (oldValue, newValue) => {
    if (equals(oldValue, newValue)) {
      return identity;
    }
    return constant(newValue);
  },
  patch: (patch7, oldValue) => f(oldValue, patch7(oldValue))
}), zip4;
var init_differ = __esm(() => {
  init_Equal();
  init_Function();
  init_Function();
  init_chunkPatch();
  init_contextPatch();
  init_hashMapPatch();
  init_hashSetPatch();
  init_orPatch();
  init_readonlyArrayPatch();
  DifferTypeId = /* @__PURE__ */ Symbol.for("effect/Differ");
  DifferProto = {
    [DifferTypeId]: {
      _P: identity,
      _V: identity
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  orElseEither2 = /* @__PURE__ */ dual(2, (self, that) => make20({
    empty: empty17(),
    combine: (first, second) => combine10(first, second),
    diff: (oldValue, newValue) => diff5({
      oldValue,
      newValue,
      left: self,
      right: that
    }),
    patch: (patch7, oldValue) => patch5(patch7, {
      oldValue,
      left: self,
      right: that
    })
  }));
  transform = /* @__PURE__ */ dual(2, (self, {
    toNew,
    toOld
  }) => make20({
    empty: self.empty,
    combine: (first, second) => self.combine(first, second),
    diff: (oldValue, newValue) => self.diff(toOld(oldValue), toOld(newValue)),
    patch: (patch7, oldValue) => toNew(self.patch(patch7, toOld(oldValue)))
  }));
  zip4 = /* @__PURE__ */ dual(2, (self, that) => make20({
    empty: [self.empty, that.empty],
    combine: (first, second) => [self.combine(first[0], second[0]), that.combine(first[1], second[1])],
    diff: (oldValue, newValue) => [self.diff(oldValue[0], newValue[0]), that.diff(oldValue[1], newValue[1])],
    patch: (patch7, oldValue) => [self.patch(patch7[0], oldValue[0]), that.patch(patch7[1], oldValue[1])]
  }));
});

// node_modules/effect/dist/esm/internal/runtimeFlagsPatch.js
var BIT_MASK = 255, BIT_SHIFT = 8, active = (patch7) => patch7 & BIT_MASK, enabled = (patch7) => patch7 >> BIT_SHIFT & BIT_MASK, make21 = (active2, enabled2) => (active2 & BIT_MASK) + ((enabled2 & active2 & BIT_MASK) << BIT_SHIFT), empty19, enable = (flag) => make21(flag, flag), disable = (flag) => make21(flag, 0), isEmpty5 = (patch7) => patch7 === 0, isActive, isEnabled, isDisabled, exclude, both, either, andThen3, inverse = (patch7) => make21(enabled(patch7), invert(active(patch7))), invert = (n) => ~n >>> 0 & BIT_MASK;
var init_runtimeFlagsPatch = __esm(() => {
  init_Function();
  empty19 = /* @__PURE__ */ make21(0, 0);
  isActive = /* @__PURE__ */ dual(2, (self, flag) => (active(self) & flag) !== 0);
  isEnabled = /* @__PURE__ */ dual(2, (self, flag) => (enabled(self) & flag) !== 0);
  isDisabled = /* @__PURE__ */ dual(2, (self, flag) => (active(self) & flag) !== 0 && (enabled(self) & flag) === 0);
  exclude = /* @__PURE__ */ dual(2, (self, flag) => make21(active(self) & ~flag, enabled(self)));
  both = /* @__PURE__ */ dual(2, (self, that) => make21(active(self) | active(that), enabled(self) & enabled(that)));
  either = /* @__PURE__ */ dual(2, (self, that) => make21(active(self) | active(that), enabled(self) | enabled(that)));
  andThen3 = /* @__PURE__ */ dual(2, (self, that) => self | that);
});

// node_modules/effect/dist/esm/internal/runtimeFlags.js
var None2 = 0, Interruption, OpSupervision, RuntimeMetrics, WindDown, CooperativeYielding, allFlags, print = (flag) => {
  switch (flag) {
    case CooperativeYielding: {
      return "CooperativeYielding";
    }
    case WindDown: {
      return "WindDown";
    }
    case RuntimeMetrics: {
      return "RuntimeMetrics";
    }
    case OpSupervision: {
      return "OpSupervision";
    }
    case Interruption: {
      return "Interruption";
    }
    case None2: {
      return "None";
    }
  }
}, cooperativeYielding = (self) => isEnabled2(self, CooperativeYielding), disable2, disableAll, enable2, enableAll, interruptible = (self) => interruption(self) && !windDown(self), interruption = (self) => isEnabled2(self, Interruption), isDisabled2, isEnabled2, make22 = (...flags) => flags.reduce((a, b) => a | b, 0), none5, opSupervision = (self) => isEnabled2(self, OpSupervision), render = (self) => {
  const active2 = [];
  allFlags.forEach((flag) => {
    if (isEnabled2(self, flag)) {
      active2.push(`${print(flag)}`);
    }
  });
  return `RuntimeFlags(${active2.join(", ")})`;
}, runtimeMetrics = (self) => isEnabled2(self, RuntimeMetrics), toSet3 = (self) => new Set(allFlags.filter((flag) => isEnabled2(self, flag))), windDown = (self) => isEnabled2(self, WindDown), enabledSet = (self) => toSet3(active(self) & enabled(self)), disabledSet = (self) => toSet3(active(self) & ~enabled(self)), diff7, patch7, renderPatch = (self) => {
  const enabled2 = Array.from(enabledSet(self)).map((flag) => print(flag)).join(", ");
  const disabled = Array.from(disabledSet(self)).map((flag) => print(flag)).join(", ");
  return `RuntimeFlagsPatch(enabled = (${enabled2}), disabled = (${disabled}))`;
}, differ;
var init_runtimeFlags = __esm(() => {
  init_Function();
  init_differ();
  init_runtimeFlagsPatch();
  Interruption = 1 << 0;
  OpSupervision = 1 << 1;
  RuntimeMetrics = 1 << 2;
  WindDown = 1 << 4;
  CooperativeYielding = 1 << 5;
  allFlags = [None2, Interruption, OpSupervision, RuntimeMetrics, WindDown, CooperativeYielding];
  disable2 = /* @__PURE__ */ dual(2, (self, flag) => self & ~flag);
  disableAll = /* @__PURE__ */ dual(2, (self, flags) => self & ~flags);
  enable2 = /* @__PURE__ */ dual(2, (self, flag) => self | flag);
  enableAll = /* @__PURE__ */ dual(2, (self, flags) => self | flags);
  isDisabled2 = /* @__PURE__ */ dual(2, (self, flag) => !isEnabled2(self, flag));
  isEnabled2 = /* @__PURE__ */ dual(2, (self, flag) => (self & flag) !== 0);
  none5 = /* @__PURE__ */ make22(None2);
  diff7 = /* @__PURE__ */ dual(2, (self, that) => make21(self ^ that, that));
  patch7 = /* @__PURE__ */ dual(2, (self, patch8) => self & (invert(active(patch8)) | enabled(patch8)) | active(patch8) & enabled(patch8));
  differ = /* @__PURE__ */ make20({
    empty: empty19,
    diff: (oldValue, newValue) => diff7(oldValue, newValue),
    combine: (first, second) => andThen3(second)(first),
    patch: (_patch, oldValue) => patch7(oldValue, _patch)
  });
});

// node_modules/effect/dist/esm/RuntimeFlagsPatch.js
var exports_RuntimeFlagsPatch = {};
__export(exports_RuntimeFlagsPatch, {
  render: () => render2,
  make: () => make23,
  isEnabled: () => isEnabled3,
  isEmpty: () => isEmpty6,
  isDisabled: () => isDisabled3,
  isActive: () => isActive2,
  inverse: () => inverse2,
  includes: () => includes2,
  exclude: () => exclude2,
  enabledSet: () => enabledSet2,
  enable: () => enable3,
  empty: () => empty20,
  either: () => either2,
  disabledSet: () => disabledSet2,
  disable: () => disable3,
  both: () => both2,
  andThen: () => andThen4
});
var empty20, make23, enable3, disable3, isEmpty6, isActive2, isEnabled3, isDisabled3, includes2, andThen4, both2, either2, exclude2, inverse2, enabledSet2, disabledSet2, render2;
var init_RuntimeFlagsPatch = __esm(() => {
  init_runtimeFlags();
  init_runtimeFlagsPatch();
  empty20 = empty19;
  make23 = make21;
  enable3 = enable;
  disable3 = disable;
  isEmpty6 = isEmpty5;
  isActive2 = isActive;
  isEnabled3 = isEnabled;
  isDisabled3 = isDisabled;
  includes2 = isActive;
  andThen4 = andThen3;
  both2 = both;
  either2 = either;
  exclude2 = exclude;
  inverse2 = inverse;
  enabledSet2 = enabledSet;
  disabledSet2 = disabledSet;
  render2 = renderPatch;
});

// node_modules/effect/dist/esm/internal/blockedRequests.js
var empty21, par = (self, that) => ({
  _tag: "Par",
  left: self,
  right: that
}), seq = (self, that) => ({
  _tag: "Seq",
  left: self,
  right: that
}), single = (dataSource, blockedRequest) => ({
  _tag: "Single",
  dataSource,
  blockedRequest
}), MapRequestResolversReducer = (f) => ({
  emptyCase: () => empty21,
  parCase: (left3, right3) => par(left3, right3),
  seqCase: (left3, right3) => seq(left3, right3),
  singleCase: (dataSource, blockedRequest) => single(f(dataSource), blockedRequest)
}), mapRequestResolvers = (self, f) => reduce10(self, MapRequestResolversReducer(f)), reduce10 = (self, reducer) => {
  let input = of4(self);
  let output = empty12();
  while (isCons(input)) {
    const current = input.head;
    switch (current._tag) {
      case "Empty": {
        output = cons(right2(reducer.emptyCase()), output);
        input = input.tail;
        break;
      }
      case "Par": {
        output = cons(left2({
          _tag: "ParCase"
        }), output);
        input = cons(current.left, cons(current.right, input.tail));
        break;
      }
      case "Seq": {
        output = cons(left2({
          _tag: "SeqCase"
        }), output);
        input = cons(current.left, cons(current.right, input.tail));
        break;
      }
      case "Single": {
        const result3 = reducer.singleCase(current.dataSource, current.blockedRequest);
        output = cons(right2(result3), output);
        input = input.tail;
        break;
      }
    }
  }
  const result2 = reduce9(output, empty12(), (acc, current) => {
    switch (current._tag) {
      case "Left": {
        const left3 = unsafeHead3(acc);
        const right3 = unsafeHead3(unsafeTail(acc));
        const tail4 = unsafeTail(unsafeTail(acc));
        switch (current.left._tag) {
          case "ParCase": {
            return cons(reducer.parCase(left3, right3), tail4);
          }
          case "SeqCase": {
            return cons(reducer.seqCase(left3, right3), tail4);
          }
        }
      }
      case "Right": {
        return cons(current.right, acc);
      }
    }
  });
  if (isNil(result2)) {
    throw new Error("BUG: BlockedRequests.reduce - please report an issue at https://github.com/Effect-TS/effect/issues");
  }
  return result2.head;
}, flatten6 = (self) => {
  let current = of4(self);
  let updated = empty12();
  while (true) {
    const [parallel, sequential] = reduce9(current, [parallelCollectionEmpty(), empty12()], ([parallel2, sequential2], blockedRequest) => {
      const [par2, seq2] = step(blockedRequest);
      return [parallelCollectionCombine(parallel2, par2), appendAll4(sequential2, seq2)];
    });
    updated = merge4(updated, parallel);
    if (isNil(sequential)) {
      return reverse4(updated);
    }
    current = sequential;
  }
  throw new Error("BUG: BlockedRequests.flatten - please report an issue at https://github.com/Effect-TS/effect/issues");
}, step = (requests) => {
  let current = requests;
  let parallel = parallelCollectionEmpty();
  let stack = empty12();
  let sequential = empty12();
  while (true) {
    switch (current._tag) {
      case "Empty": {
        if (isNil(stack)) {
          return [parallel, sequential];
        }
        current = stack.head;
        stack = stack.tail;
        break;
      }
      case "Par": {
        stack = cons(current.right, stack);
        current = current.left;
        break;
      }
      case "Seq": {
        const left3 = current.left;
        const right3 = current.right;
        switch (left3._tag) {
          case "Empty": {
            current = right3;
            break;
          }
          case "Par": {
            const l = left3.left;
            const r = left3.right;
            current = par(seq(l, right3), seq(r, right3));
            break;
          }
          case "Seq": {
            const l = left3.left;
            const r = left3.right;
            current = seq(l, seq(r, right3));
            break;
          }
          case "Single": {
            current = left3;
            sequential = cons(right3, sequential);
            break;
          }
        }
        break;
      }
      case "Single": {
        parallel = parallelCollectionAdd(parallel, current);
        if (isNil(stack)) {
          return [parallel, sequential];
        }
        current = stack.head;
        stack = stack.tail;
        break;
      }
    }
  }
  throw new Error("BUG: BlockedRequests.step - please report an issue at https://github.com/Effect-TS/effect/issues");
}, merge4 = (sequential, parallel) => {
  if (isNil(sequential)) {
    return of4(parallelCollectionToSequentialCollection(parallel));
  }
  if (parallelCollectionIsEmpty(parallel)) {
    return sequential;
  }
  const seqHeadKeys = sequentialCollectionKeys(sequential.head);
  const parKeys = parallelCollectionKeys(parallel);
  if (seqHeadKeys.length === 1 && parKeys.length === 1 && equals(seqHeadKeys[0], parKeys[0])) {
    return cons(sequentialCollectionCombine(sequential.head, parallelCollectionToSequentialCollection(parallel)), sequential.tail);
  }
  return cons(parallelCollectionToSequentialCollection(parallel), sequential);
}, EntryTypeId, EntryImpl, blockedRequestVariance, isEntry = (u) => hasProperty(u, EntryTypeId), makeEntry = (options) => new EntryImpl(options.request, options.result, options.listeners, options.ownerId, options.state), RequestBlockParallelTypeId, parallelVariance, ParallelImpl, parallelCollectionEmpty = () => new ParallelImpl(empty11()), parallelCollectionAdd = (self, blockedRequest) => new ParallelImpl(modifyAt2(self.map, blockedRequest.dataSource, (_) => orElseSome(map2(_, append3(blockedRequest.blockedRequest)), () => of3(blockedRequest.blockedRequest)))), parallelCollectionCombine = (self, that) => new ParallelImpl(reduce8(self.map, that.map, (map13, value, key) => set4(map13, key, match2(get9(map13, key), {
  onNone: () => value,
  onSome: (other) => appendAll3(value, other)
})))), parallelCollectionIsEmpty = (self) => isEmpty4(self.map), parallelCollectionKeys = (self) => Array.from(keys3(self.map)), parallelCollectionToSequentialCollection = (self) => sequentialCollectionMake(map11(self.map, (x2) => of3(x2))), SequentialCollectionTypeId, sequentialVariance, SequentialImpl, sequentialCollectionMake = (map13) => new SequentialImpl(map13), sequentialCollectionCombine = (self, that) => new SequentialImpl(reduce8(that.map, self.map, (map13, value, key) => set4(map13, key, match2(get9(map13, key), {
  onNone: () => empty7(),
  onSome: (a) => appendAll3(a, value)
})))), sequentialCollectionKeys = (self) => Array.from(keys3(self.map)), sequentialCollectionToChunk = (self) => Array.from(self.map);
var init_blockedRequests = __esm(() => {
  init_Chunk();
  init_Either();
  init_Equal();
  init_HashMap();
  init_List();
  init_Option();
  init_Predicate();
  empty21 = {
    _tag: "Empty"
  };
  EntryTypeId = /* @__PURE__ */ Symbol.for("effect/RequestBlock/Entry");
  EntryImpl = class EntryImpl {
    request;
    result;
    listeners;
    ownerId;
    state;
    [EntryTypeId] = blockedRequestVariance;
    constructor(request, result2, listeners, ownerId, state) {
      this.request = request;
      this.result = result2;
      this.listeners = listeners;
      this.ownerId = ownerId;
      this.state = state;
    }
  };
  blockedRequestVariance = {
    _R: (_) => _
  };
  RequestBlockParallelTypeId = /* @__PURE__ */ Symbol.for("effect/RequestBlock/RequestBlockParallel");
  parallelVariance = {
    _R: (_) => _
  };
  ParallelImpl = class ParallelImpl {
    map;
    [RequestBlockParallelTypeId] = parallelVariance;
    constructor(map13) {
      this.map = map13;
    }
  };
  SequentialCollectionTypeId = /* @__PURE__ */ Symbol.for("effect/RequestBlock/RequestBlockSequential");
  sequentialVariance = {
    _R: (_) => _
  };
  SequentialImpl = class SequentialImpl {
    map;
    [SequentialCollectionTypeId] = sequentialVariance;
    constructor(map13) {
      this.map = map13;
    }
  };
});

// node_modules/effect/dist/esm/internal/opCodes/cause.js
var OP_DIE = "Die", OP_EMPTY = "Empty", OP_FAIL = "Fail", OP_INTERRUPT = "Interrupt", OP_PARALLEL = "Parallel", OP_SEQUENTIAL = "Sequential";

// node_modules/effect/dist/esm/internal/cause.js
var CauseSymbolKey = "effect/Cause", CauseTypeId, variance7, proto, empty22, fail = (error2) => {
  const o = Object.create(proto);
  o._tag = OP_FAIL;
  o.error = error2;
  return o;
}, die = (defect) => {
  const o = Object.create(proto);
  o._tag = OP_DIE;
  o.defect = defect;
  return o;
}, interrupt = (fiberId) => {
  const o = Object.create(proto);
  o._tag = OP_INTERRUPT;
  o.fiberId = fiberId;
  return o;
}, parallel = (left3, right3) => {
  const o = Object.create(proto);
  o._tag = OP_PARALLEL;
  o.left = left3;
  o.right = right3;
  return o;
}, sequential = (left3, right3) => {
  const o = Object.create(proto);
  o._tag = OP_SEQUENTIAL;
  o.left = left3;
  o.right = right3;
  return o;
}, isCause = (u) => hasProperty(u, CauseTypeId), isEmptyType = (self) => self._tag === OP_EMPTY, isFailType = (self) => self._tag === OP_FAIL, isDieType = (self) => self._tag === OP_DIE, isInterruptType = (self) => self._tag === OP_INTERRUPT, isSequentialType = (self) => self._tag === OP_SEQUENTIAL, isParallelType = (self) => self._tag === OP_PARALLEL, size9 = (self) => reduceWithContext(self, undefined, SizeCauseReducer), isEmpty7 = (self) => {
  if (self._tag === OP_EMPTY) {
    return true;
  }
  return reduce11(self, true, (acc, cause) => {
    switch (cause._tag) {
      case OP_EMPTY: {
        return some3(acc);
      }
      case OP_DIE:
      case OP_FAIL:
      case OP_INTERRUPT: {
        return some3(false);
      }
      default: {
        return none2();
      }
    }
  });
}, isFailure = (self) => isSome2(failureOption(self)), isDie = (self) => isSome2(dieOption(self)), isInterrupted = (self) => isSome2(interruptOption(self)), isInterruptedOnly = (self) => reduceWithContext(undefined, IsInterruptedOnlyCauseReducer)(self), failures = (self) => reverse3(reduce11(self, empty7(), (list, cause) => cause._tag === OP_FAIL ? some3(pipe(list, prepend3(cause.error))) : none2())), defects = (self) => reverse3(reduce11(self, empty7(), (list, cause) => cause._tag === OP_DIE ? some3(pipe(list, prepend3(cause.defect))) : none2())), interruptors = (self) => reduce11(self, empty10(), (set5, cause) => cause._tag === OP_INTERRUPT ? some3(pipe(set5, add4(cause.fiberId))) : none2()), failureOption = (self) => find(self, (cause) => cause._tag === OP_FAIL ? some3(cause.error) : none2()), failureOrCause = (self) => {
  const option2 = failureOption(self);
  switch (option2._tag) {
    case "None": {
      return right2(self);
    }
    case "Some": {
      return left2(option2.value);
    }
  }
}, dieOption = (self) => find(self, (cause) => cause._tag === OP_DIE ? some3(cause.defect) : none2()), flipCauseOption = (self) => match6(self, {
  onEmpty: some3(empty22),
  onFail: map2(fail),
  onDie: (defect) => some3(die(defect)),
  onInterrupt: (fiberId) => some3(interrupt(fiberId)),
  onSequential: mergeWith(sequential),
  onParallel: mergeWith(parallel)
}), interruptOption = (self) => find(self, (cause) => cause._tag === OP_INTERRUPT ? some3(cause.fiberId) : none2()), keepDefects = (self) => match6(self, {
  onEmpty: none2(),
  onFail: () => none2(),
  onDie: (defect) => some3(die(defect)),
  onInterrupt: () => none2(),
  onSequential: mergeWith(sequential),
  onParallel: mergeWith(parallel)
}), keepDefectsAndElectFailures = (self) => match6(self, {
  onEmpty: none2(),
  onFail: (failure) => some3(die(failure)),
  onDie: (defect) => some3(die(defect)),
  onInterrupt: () => none2(),
  onSequential: mergeWith(sequential),
  onParallel: mergeWith(parallel)
}), linearize = (self) => match6(self, {
  onEmpty: empty10(),
  onFail: (error2) => make14(fail(error2)),
  onDie: (defect) => make14(die(defect)),
  onInterrupt: (fiberId) => make14(interrupt(fiberId)),
  onSequential: (leftSet, rightSet) => flatMap8(leftSet, (leftCause) => map10(rightSet, (rightCause) => sequential(leftCause, rightCause))),
  onParallel: (leftSet, rightSet) => flatMap8(leftSet, (leftCause) => map10(rightSet, (rightCause) => parallel(leftCause, rightCause)))
}), stripFailures = (self) => match6(self, {
  onEmpty: empty22,
  onFail: () => empty22,
  onDie: die,
  onInterrupt: interrupt,
  onSequential: sequential,
  onParallel: parallel
}), electFailures = (self) => match6(self, {
  onEmpty: empty22,
  onFail: die,
  onDie: die,
  onInterrupt: interrupt,
  onSequential: sequential,
  onParallel: parallel
}), stripSomeDefects, as2, map13, flatMap11, flatten7 = (self) => flatMap11(self, identity), andThen5, contains5, causeEquals = (left3, right3) => {
  let leftStack = of3(left3);
  let rightStack = of3(right3);
  while (isNonEmpty2(leftStack) && isNonEmpty2(rightStack)) {
    const [leftParallel, leftSequential] = pipe(headNonEmpty2(leftStack), reduce11([empty10(), empty7()], ([parallel2, sequential2], cause) => {
      const [par2, seq2] = evaluateCause(cause);
      return some3([pipe(parallel2, union6(par2)), pipe(sequential2, appendAll3(seq2))]);
    }));
    const [rightParallel, rightSequential] = pipe(headNonEmpty2(rightStack), reduce11([empty10(), empty7()], ([parallel2, sequential2], cause) => {
      const [par2, seq2] = evaluateCause(cause);
      return some3([pipe(parallel2, union6(par2)), pipe(sequential2, appendAll3(seq2))]);
    }));
    if (!equals(leftParallel, rightParallel)) {
      return false;
    }
    leftStack = leftSequential;
    rightStack = rightSequential;
  }
  return true;
}, flattenCause = (cause) => {
  return flattenCauseLoop(of3(cause), empty7());
}, flattenCauseLoop = (causes, flattened) => {
  while (true) {
    const [parallel2, sequential2] = pipe(causes, reduce3([empty10(), empty7()], ([parallel3, sequential3], cause) => {
      const [par2, seq2] = evaluateCause(cause);
      return [pipe(parallel3, union6(par2)), pipe(sequential3, appendAll3(seq2))];
    }));
    const updated = size6(parallel2) > 0 ? pipe(flattened, prepend3(parallel2)) : flattened;
    if (isEmpty2(sequential2)) {
      return reverse3(updated);
    }
    causes = sequential2;
    flattened = updated;
  }
  throw new Error(getBugErrorMessage("Cause.flattenCauseLoop"));
}, find, filter11, evaluateCause = (self) => {
  let cause = self;
  const stack = [];
  let _parallel = empty10();
  let _sequential = empty7();
  while (cause !== undefined) {
    switch (cause._tag) {
      case OP_EMPTY: {
        if (stack.length === 0) {
          return [_parallel, _sequential];
        }
        cause = stack.pop();
        break;
      }
      case OP_FAIL: {
        _parallel = add4(_parallel, make9(cause._tag, cause.error));
        if (stack.length === 0) {
          return [_parallel, _sequential];
        }
        cause = stack.pop();
        break;
      }
      case OP_DIE: {
        _parallel = add4(_parallel, make9(cause._tag, cause.defect));
        if (stack.length === 0) {
          return [_parallel, _sequential];
        }
        cause = stack.pop();
        break;
      }
      case OP_INTERRUPT: {
        _parallel = add4(_parallel, make9(cause._tag, cause.fiberId));
        if (stack.length === 0) {
          return [_parallel, _sequential];
        }
        cause = stack.pop();
        break;
      }
      case OP_SEQUENTIAL: {
        switch (cause.left._tag) {
          case OP_EMPTY: {
            cause = cause.right;
            break;
          }
          case OP_SEQUENTIAL: {
            cause = sequential(cause.left.left, sequential(cause.left.right, cause.right));
            break;
          }
          case OP_PARALLEL: {
            cause = parallel(sequential(cause.left.left, cause.right), sequential(cause.left.right, cause.right));
            break;
          }
          default: {
            _sequential = prepend3(_sequential, cause.right);
            cause = cause.left;
            break;
          }
        }
        break;
      }
      case OP_PARALLEL: {
        stack.push(cause.right);
        cause = cause.left;
        break;
      }
    }
  }
  throw new Error(getBugErrorMessage("Cause.evaluateCauseLoop"));
}, SizeCauseReducer, IsInterruptedOnlyCauseReducer, FilterCauseReducer = (predicate) => ({
  emptyCase: () => empty22,
  failCase: (_, error2) => fail(error2),
  dieCase: (_, defect) => die(defect),
  interruptCase: (_, fiberId) => interrupt(fiberId),
  sequentialCase: (_, left3, right3) => {
    if (predicate(left3)) {
      if (predicate(right3)) {
        return sequential(left3, right3);
      }
      return left3;
    }
    if (predicate(right3)) {
      return right3;
    }
    return empty22;
  },
  parallelCase: (_, left3, right3) => {
    if (predicate(left3)) {
      if (predicate(right3)) {
        return parallel(left3, right3);
      }
      return left3;
    }
    if (predicate(right3)) {
      return right3;
    }
    return empty22;
  }
}), OP_SEQUENTIAL_CASE = "SequentialCase", OP_PARALLEL_CASE = "ParallelCase", match6, reduce11, reduceWithContext, pretty = (cause, options) => {
  if (isInterruptedOnly(cause)) {
    return "All fibers interrupted without errors.";
  }
  return prettyErrors(cause).map(function(e) {
    if (options?.renderErrorCause !== true || e.cause === undefined) {
      return e.stack;
    }
    return `${e.stack} {
${renderErrorCause(e.cause, "  ")}
}`;
  }).join(`
`);
}, renderErrorCause = (cause, prefix) => {
  const lines = cause.stack.split(`
`);
  let stack = `${prefix}[cause]: ${lines[0]}`;
  for (let i2 = 1, len = lines.length;i2 < len; i2++) {
    stack += `
${prefix}${lines[i2]}`;
  }
  if (cause.cause) {
    stack += ` {
${renderErrorCause(cause.cause, `${prefix}  `)}
${prefix}}`;
  }
  return stack;
}, PrettyError, prettyErrorMessage = (u) => {
  if (typeof u === "string") {
    return u;
  }
  if (typeof u === "object" && u !== null && u instanceof Error) {
    return u.message;
  }
  try {
    if (hasProperty(u, "toString") && isFunction2(u["toString"]) && u["toString"] !== Object.prototype.toString && u["toString"] !== globalThis.Array.prototype.toString) {
      return u["toString"]();
    }
  } catch {}
  return stringifyCircular(u);
}, locationRegex, spanToTrace, prettyErrorStack = (message, stack, span2) => {
  const out = [message];
  const lines = stack.startsWith(message) ? stack.slice(message.length).split(`
`) : stack.split(`
`);
  for (let i2 = 1;i2 < lines.length; i2++) {
    if (lines[i2].includes("Generator.next")) {
      break;
    }
    if (lines[i2].includes("effect_internal_function")) {
      out.pop();
      break;
    }
    out.push(lines[i2].replace(/at .*effect_instruction_i.*\((.*)\)/, "at $1").replace(/EffectPrimitive\.\w+/, "<anonymous>"));
  }
  if (span2) {
    let current = span2;
    let i2 = 0;
    while (current && current._tag === "Span" && i2 < 10) {
      const stackFn = spanToTrace.get(current);
      if (typeof stackFn === "function") {
        const stack2 = stackFn();
        if (typeof stack2 === "string") {
          const locationMatchAll = stack2.matchAll(locationRegex);
          let match7 = false;
          for (const [, location] of locationMatchAll) {
            match7 = true;
            out.push(`    at ${current.name} (${location})`);
          }
          if (!match7) {
            out.push(`    at ${current.name} (${stack2.replace(/^at /, "")})`);
          }
        } else {
          out.push(`    at ${current.name}`);
        }
      } else {
        out.push(`    at ${current.name}`);
      }
      current = getOrUndefined2(current.parent);
      i2++;
    }
  }
  return out.join(`
`);
}, spanSymbol, prettyErrors = (cause) => reduceWithContext(cause, undefined, {
  emptyCase: () => [],
  dieCase: (_, unknownError) => {
    return [new PrettyError(unknownError)];
  },
  failCase: (_, error2) => {
    return [new PrettyError(error2)];
  },
  interruptCase: () => [],
  parallelCase: (_, l, r) => [...l, ...r],
  sequentialCase: (_, l, r) => [...l, ...r]
});
var init_cause = __esm(() => {
  init_Array();
  init_Chunk();
  init_Either();
  init_Equal();
  init_Function();
  init_GlobalValue();
  init_Hash();
  init_HashSet();
  init_Inspectable();
  init_Option();
  init_Predicate();
  CauseTypeId = /* @__PURE__ */ Symbol.for(CauseSymbolKey);
  variance7 = {
    _E: (_) => _
  };
  proto = {
    [CauseTypeId]: variance7,
    [symbol2]() {
      return pipe(hash(CauseSymbolKey), combine2(hash(flattenCause(this))), cached(this));
    },
    [symbol3](that) {
      return isCause(that) && causeEquals(this, that);
    },
    pipe() {
      return pipeArguments(this, arguments);
    },
    toJSON() {
      switch (this._tag) {
        case "Empty":
          return {
            _id: "Cause",
            _tag: this._tag
          };
        case "Die":
          return {
            _id: "Cause",
            _tag: this._tag,
            defect: toJSON(this.defect)
          };
        case "Interrupt":
          return {
            _id: "Cause",
            _tag: this._tag,
            fiberId: this.fiberId.toJSON()
          };
        case "Fail":
          return {
            _id: "Cause",
            _tag: this._tag,
            failure: toJSON(this.error)
          };
        case "Sequential":
        case "Parallel":
          return {
            _id: "Cause",
            _tag: this._tag,
            left: toJSON(this.left),
            right: toJSON(this.right)
          };
      }
    },
    toString() {
      return pretty(this);
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
  };
  empty22 = /* @__PURE__ */ (() => {
    const o = /* @__PURE__ */ Object.create(proto);
    o._tag = OP_EMPTY;
    return o;
  })();
  stripSomeDefects = /* @__PURE__ */ dual(2, (self, pf) => match6(self, {
    onEmpty: some3(empty22),
    onFail: (error2) => some3(fail(error2)),
    onDie: (defect) => {
      const option2 = pf(defect);
      return isSome2(option2) ? none2() : some3(die(defect));
    },
    onInterrupt: (fiberId) => some3(interrupt(fiberId)),
    onSequential: mergeWith(sequential),
    onParallel: mergeWith(parallel)
  }));
  as2 = /* @__PURE__ */ dual(2, (self, error2) => map13(self, () => error2));
  map13 = /* @__PURE__ */ dual(2, (self, f) => flatMap11(self, (e) => fail(f(e))));
  flatMap11 = /* @__PURE__ */ dual(2, (self, f) => match6(self, {
    onEmpty: empty22,
    onFail: (error2) => f(error2),
    onDie: (defect) => die(defect),
    onInterrupt: (fiberId) => interrupt(fiberId),
    onSequential: (left3, right3) => sequential(left3, right3),
    onParallel: (left3, right3) => parallel(left3, right3)
  }));
  andThen5 = /* @__PURE__ */ dual(2, (self, f) => isFunction2(f) ? flatMap11(self, f) : flatMap11(self, () => f));
  contains5 = /* @__PURE__ */ dual(2, (self, that) => {
    if (that._tag === OP_EMPTY || self === that) {
      return true;
    }
    return reduce11(self, false, (accumulator, cause) => {
      return some3(accumulator || causeEquals(cause, that));
    });
  });
  find = /* @__PURE__ */ dual(2, (self, pf) => {
    const stack = [self];
    while (stack.length > 0) {
      const item = stack.pop();
      const option2 = pf(item);
      switch (option2._tag) {
        case "None": {
          switch (item._tag) {
            case OP_SEQUENTIAL:
            case OP_PARALLEL: {
              stack.push(item.right);
              stack.push(item.left);
              break;
            }
          }
          break;
        }
        case "Some": {
          return option2;
        }
      }
    }
    return none2();
  });
  filter11 = /* @__PURE__ */ dual(2, (self, predicate) => reduceWithContext(self, undefined, FilterCauseReducer(predicate)));
  SizeCauseReducer = {
    emptyCase: () => 0,
    failCase: () => 1,
    dieCase: () => 1,
    interruptCase: () => 1,
    sequentialCase: (_, left3, right3) => left3 + right3,
    parallelCase: (_, left3, right3) => left3 + right3
  };
  IsInterruptedOnlyCauseReducer = {
    emptyCase: constTrue,
    failCase: constFalse,
    dieCase: constFalse,
    interruptCase: constTrue,
    sequentialCase: (_, left3, right3) => left3 && right3,
    parallelCase: (_, left3, right3) => left3 && right3
  };
  match6 = /* @__PURE__ */ dual(2, (self, {
    onDie,
    onEmpty,
    onFail,
    onInterrupt,
    onParallel,
    onSequential
  }) => {
    return reduceWithContext(self, undefined, {
      emptyCase: () => onEmpty,
      failCase: (_, error2) => onFail(error2),
      dieCase: (_, defect) => onDie(defect),
      interruptCase: (_, fiberId) => onInterrupt(fiberId),
      sequentialCase: (_, left3, right3) => onSequential(left3, right3),
      parallelCase: (_, left3, right3) => onParallel(left3, right3)
    });
  });
  reduce11 = /* @__PURE__ */ dual(3, (self, zero3, pf) => {
    let accumulator = zero3;
    let cause = self;
    const causes = [];
    while (cause !== undefined) {
      const option2 = pf(accumulator, cause);
      accumulator = isSome2(option2) ? option2.value : accumulator;
      switch (cause._tag) {
        case OP_SEQUENTIAL: {
          causes.push(cause.right);
          cause = cause.left;
          break;
        }
        case OP_PARALLEL: {
          causes.push(cause.right);
          cause = cause.left;
          break;
        }
        default: {
          cause = undefined;
          break;
        }
      }
      if (cause === undefined && causes.length > 0) {
        cause = causes.pop();
      }
    }
    return accumulator;
  });
  reduceWithContext = /* @__PURE__ */ dual(3, (self, context2, reducer) => {
    const input = [self];
    const output = [];
    while (input.length > 0) {
      const cause = input.pop();
      switch (cause._tag) {
        case OP_EMPTY: {
          output.push(right2(reducer.emptyCase(context2)));
          break;
        }
        case OP_FAIL: {
          output.push(right2(reducer.failCase(context2, cause.error)));
          break;
        }
        case OP_DIE: {
          output.push(right2(reducer.dieCase(context2, cause.defect)));
          break;
        }
        case OP_INTERRUPT: {
          output.push(right2(reducer.interruptCase(context2, cause.fiberId)));
          break;
        }
        case OP_SEQUENTIAL: {
          input.push(cause.right);
          input.push(cause.left);
          output.push(left2({
            _tag: OP_SEQUENTIAL_CASE
          }));
          break;
        }
        case OP_PARALLEL: {
          input.push(cause.right);
          input.push(cause.left);
          output.push(left2({
            _tag: OP_PARALLEL_CASE
          }));
          break;
        }
      }
    }
    const accumulator = [];
    while (output.length > 0) {
      const either3 = output.pop();
      switch (either3._tag) {
        case "Left": {
          switch (either3.left._tag) {
            case OP_SEQUENTIAL_CASE: {
              const left3 = accumulator.pop();
              const right3 = accumulator.pop();
              const value = reducer.sequentialCase(context2, left3, right3);
              accumulator.push(value);
              break;
            }
            case OP_PARALLEL_CASE: {
              const left3 = accumulator.pop();
              const right3 = accumulator.pop();
              const value = reducer.parallelCase(context2, left3, right3);
              accumulator.push(value);
              break;
            }
          }
          break;
        }
        case "Right": {
          accumulator.push(either3.right);
          break;
        }
      }
    }
    if (accumulator.length === 0) {
      throw new Error("BUG: Cause.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues");
    }
    return accumulator.pop();
  });
  PrettyError = class PrettyError extends globalThis.Error {
    span = undefined;
    constructor(originalError) {
      const originalErrorIsObject = typeof originalError === "object" && originalError !== null;
      const prevLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = 1;
      super(prettyErrorMessage(originalError), originalErrorIsObject && "cause" in originalError && typeof originalError.cause !== "undefined" ? {
        cause: new PrettyError(originalError.cause)
      } : undefined);
      if (this.message === "") {
        this.message = "An error has occurred";
      }
      Error.stackTraceLimit = prevLimit;
      this.name = originalError instanceof Error ? originalError.name : "Error";
      if (originalErrorIsObject) {
        if (spanSymbol in originalError) {
          this.span = originalError[spanSymbol];
        }
        Object.keys(originalError).forEach((key) => {
          if (!(key in this)) {
            this[key] = originalError[key];
          }
        });
      }
      this.stack = prettyErrorStack(`${this.name}: ${this.message}`, originalError instanceof Error && originalError.stack ? originalError.stack : "", this.span);
    }
  };
  locationRegex = /\((.*)\)/g;
  spanToTrace = /* @__PURE__ */ globalValue("effect/Tracer/spanToTrace", () => new WeakMap);
  spanSymbol = /* @__PURE__ */ Symbol.for("effect/SpanAnnotation");
});

// node_modules/effect/dist/esm/internal/opCodes/deferred.js
var OP_STATE_PENDING = "Pending", OP_STATE_DONE = "Done";

// node_modules/effect/dist/esm/internal/deferred.js
var DeferredSymbolKey = "effect/Deferred", DeferredTypeId, deferredVariance, pending = (joiners) => {
  return {
    _tag: OP_STATE_PENDING,
    joiners
  };
}, done = (effect) => {
  return {
    _tag: OP_STATE_DONE,
    effect
  };
};
var init_deferred = __esm(() => {
  DeferredTypeId = /* @__PURE__ */ Symbol.for(DeferredSymbolKey);
  deferredVariance = {
    _E: (_) => _,
    _A: (_) => _
  };
});

// node_modules/effect/dist/esm/internal/singleShotGen.js
var SingleShotGen2;
var init_singleShotGen = __esm(() => {
  SingleShotGen2 = class SingleShotGen2 {
    self;
    called = false;
    constructor(self) {
      this.self = self;
    }
    next(a) {
      return this.called ? {
        value: a,
        done: true
      } : (this.called = true, {
        value: this.self,
        done: false
      });
    }
    return(a) {
      return {
        value: a,
        done: true
      };
    }
    throw(e) {
      throw e;
    }
    [Symbol.iterator]() {
      return new SingleShotGen2(this.self);
    }
  };
});

// node_modules/effect/dist/esm/internal/core.js
class RevertFlags {
  patch;
  op;
  _op = OP_REVERT_FLAGS;
  constructor(patch8, op) {
    this.patch = patch8;
    this.op = op;
  }
}
var blocked = (blockedRequests, _continue) => {
  const effect = new EffectPrimitive("Blocked");
  effect.effect_instruction_i0 = blockedRequests;
  effect.effect_instruction_i1 = _continue;
  return effect;
}, runRequestBlock = (blockedRequests) => {
  const effect = new EffectPrimitive("RunBlocked");
  effect.effect_instruction_i0 = blockedRequests;
  return effect;
}, EffectTypeId2, EffectPrimitive, EffectPrimitiveFailure, EffectPrimitiveSuccess, isEffect = (u) => hasProperty(u, EffectTypeId2), withFiberRuntime = (withRuntime) => {
  const effect = new EffectPrimitive(OP_WITH_RUNTIME);
  effect.effect_instruction_i0 = withRuntime;
  return effect;
}, acquireUseRelease, as3, asVoid2 = (self) => as3(self, undefined), custom2 = function() {
  const wrapper = new EffectPrimitive(OP_COMMIT);
  switch (arguments.length) {
    case 2: {
      wrapper.effect_instruction_i0 = arguments[0];
      wrapper.commit = arguments[1];
      break;
    }
    case 3: {
      wrapper.effect_instruction_i0 = arguments[0];
      wrapper.effect_instruction_i1 = arguments[1];
      wrapper.commit = arguments[2];
      break;
    }
    case 4: {
      wrapper.effect_instruction_i0 = arguments[0];
      wrapper.effect_instruction_i1 = arguments[1];
      wrapper.effect_instruction_i2 = arguments[2];
      wrapper.commit = arguments[3];
      break;
    }
    default: {
      throw new Error(getBugErrorMessage("you're not supposed to end up here"));
    }
  }
  return wrapper;
}, unsafeAsync = (register2, blockingOn = none4) => {
  const effect = new EffectPrimitive(OP_ASYNC);
  let cancelerRef = undefined;
  effect.effect_instruction_i0 = (resume) => {
    cancelerRef = register2(resume);
  };
  effect.effect_instruction_i1 = blockingOn;
  return onInterrupt(effect, (_) => isEffect(cancelerRef) ? cancelerRef : void_3);
}, asyncInterrupt = (register2, blockingOn = none4) => suspend(() => unsafeAsync(register2, blockingOn)), async_ = (resume, blockingOn = none4) => {
  return custom2(resume, function() {
    let backingResume = undefined;
    let pendingEffect = undefined;
    function proxyResume(effect2) {
      if (backingResume) {
        backingResume(effect2);
      } else if (pendingEffect === undefined) {
        pendingEffect = effect2;
      }
    }
    const effect = new EffectPrimitive(OP_ASYNC);
    effect.effect_instruction_i0 = (resume2) => {
      backingResume = resume2;
      if (pendingEffect) {
        resume2(pendingEffect);
      }
    };
    effect.effect_instruction_i1 = blockingOn;
    let cancelerRef = undefined;
    let controllerRef = undefined;
    if (this.effect_instruction_i0.length !== 1) {
      controllerRef = new AbortController;
      cancelerRef = internalCall(() => this.effect_instruction_i0(proxyResume, controllerRef.signal));
    } else {
      cancelerRef = internalCall(() => this.effect_instruction_i0(proxyResume));
    }
    return cancelerRef || controllerRef ? onInterrupt(effect, (_) => {
      if (controllerRef) {
        controllerRef.abort();
      }
      return cancelerRef ?? void_3;
    }) : effect;
  });
}, catchAllCause, catchAll, catchIf, catchSome, checkInterruptible = (f) => withFiberRuntime((_, status) => f(interruption(status.runtimeFlags))), originalSymbol, originalInstance = (obj) => {
  if (hasProperty(obj, originalSymbol)) {
    return obj[originalSymbol];
  }
  return obj;
}, capture = (obj, span2) => {
  if (isSome2(span2)) {
    return new Proxy(obj, {
      has(target, p) {
        return p === spanSymbol || p === originalSymbol || p in target;
      },
      get(target, p) {
        if (p === spanSymbol) {
          return span2.value;
        }
        if (p === originalSymbol) {
          return obj;
        }
        return target[p];
      }
    });
  }
  return obj;
}, die2 = (defect) => isObject2(defect) && !(spanSymbol in defect) ? withFiberRuntime((fiber) => failCause(die(capture(defect, currentSpanFromFiber(fiber))))) : failCause(die(defect)), dieMessage = (message) => failCauseSync(() => die(new RuntimeException(message))), dieSync = (evaluate) => flatMap12(sync(evaluate), die2), either3 = (self) => matchEffect(self, {
  onFailure: (e) => succeed(left2(e)),
  onSuccess: (a) => succeed(right2(a))
}), exit = (self) => matchCause(self, {
  onFailure: exitFailCause,
  onSuccess: exitSucceed
}), fail2 = (error2) => isObject2(error2) && !(spanSymbol in error2) ? withFiberRuntime((fiber) => failCause(fail(capture(error2, currentSpanFromFiber(fiber))))) : failCause(fail(error2)), failSync = (evaluate) => flatMap12(sync(evaluate), fail2), failCause = (cause) => {
  const effect = new EffectPrimitiveFailure(OP_FAILURE);
  effect.effect_instruction_i0 = cause;
  return effect;
}, failCauseSync = (evaluate) => flatMap12(sync(evaluate), failCause), fiberId, fiberIdWith = (f) => withFiberRuntime((state) => f(state.id())), flatMap12, andThen6, step2 = (self) => {
  const effect = new EffectPrimitive("OnStep");
  effect.effect_instruction_i0 = self;
  return effect;
}, flatten8 = (self) => flatMap12(self, identity), flip3 = (self) => matchEffect(self, {
  onFailure: succeed,
  onSuccess: fail2
}), matchCause, matchCauseEffect, matchEffect, forEachSequential, forEachSequentialDiscard, if_, interrupt2, interruptWith = (fiberId2) => failCause(interrupt(fiberId2)), interruptible2 = (self) => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.effect_instruction_i0 = enable3(Interruption);
  effect.effect_instruction_i1 = () => self;
  return effect;
}, interruptibleMask = (f) => custom2(f, function() {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.effect_instruction_i0 = enable3(Interruption);
  effect.effect_instruction_i1 = (oldFlags) => interruption(oldFlags) ? internalCall(() => this.effect_instruction_i0(interruptible2)) : internalCall(() => this.effect_instruction_i0(uninterruptible));
  return effect;
}), intoDeferred, map14, mapBoth3, mapError, onError, onExit, onInterrupt, orElse3, orDie = (self) => orDieWith(self, identity), orDieWith, partitionMap6, runtimeFlags, succeed = (value) => {
  const effect = new EffectPrimitiveSuccess(OP_SUCCESS);
  effect.effect_instruction_i0 = value;
  return effect;
}, suspend = (evaluate) => {
  const effect = new EffectPrimitive(OP_COMMIT);
  effect.commit = evaluate;
  return effect;
}, sync = (thunk) => {
  const effect = new EffectPrimitive(OP_SYNC);
  effect.effect_instruction_i0 = thunk;
  return effect;
}, tap2, transplant = (f) => withFiberRuntime((state) => {
  const scopeOverride = state.getFiberRef(currentForkScopeOverride);
  const scope = pipe(scopeOverride, getOrElse2(() => state.scope()));
  return f(fiberRefLocally(currentForkScopeOverride, some3(scope)));
}), attemptOrElse, uninterruptible = (self) => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.effect_instruction_i0 = disable3(Interruption);
  effect.effect_instruction_i1 = () => self;
  return effect;
}, uninterruptibleMask = (f) => custom2(f, function() {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.effect_instruction_i0 = disable3(Interruption);
  effect.effect_instruction_i1 = (oldFlags) => interruption(oldFlags) ? internalCall(() => this.effect_instruction_i0(interruptible2)) : internalCall(() => this.effect_instruction_i0(uninterruptible));
  return effect;
}), void_3, updateRuntimeFlags = (patch8) => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.effect_instruction_i0 = patch8;
  effect.effect_instruction_i1 = undefined;
  return effect;
}, whenEffect, whileLoop = (options) => {
  const effect = new EffectPrimitive(OP_WHILE);
  effect.effect_instruction_i0 = options.while;
  effect.effect_instruction_i1 = options.body;
  effect.effect_instruction_i2 = options.step;
  return effect;
}, fromIterator = (iterator) => suspend(() => {
  const effect = new EffectPrimitive(OP_ITERATOR);
  effect.effect_instruction_i0 = iterator();
  return effect;
}), gen4 = function() {
  const f = arguments.length === 1 ? arguments[0] : arguments[1].bind(arguments[0]);
  return fromIterator(() => f(pipe));
}, fnUntraced = (body, ...pipeables) => Object.defineProperty(pipeables.length === 0 ? function(...args) {
  return fromIterator(() => body.apply(this, args));
} : function(...args) {
  let effect = fromIterator(() => body.apply(this, args));
  for (const x2 of pipeables) {
    effect = x2(effect, ...args);
  }
  return effect;
}, "length", {
  value: body.length,
  configurable: true
}), withConcurrency, withRequestBatching, withRuntimeFlags, withTracerEnabled, withTracerTiming, yieldNow = (options) => {
  const effect = new EffectPrimitive(OP_YIELD);
  return typeof options?.priority !== "undefined" ? withSchedulingPriority(effect, options.priority) : effect;
}, zip5, zipLeft2, zipRight2, zipWith6, never, interruptFiber = (self) => flatMap12(fiberId, (fiberId2) => pipe(self, interruptAsFiber(fiberId2))), interruptAsFiber, logLevelAll, logLevelFatal, logLevelError, logLevelWarning, logLevelInfo, logLevelDebug, logLevelTrace, logLevelNone, allLogLevels, FiberRefSymbolKey = "effect/FiberRef", FiberRefTypeId, fiberRefVariance, fiberRefGet = (self) => withFiberRuntime((fiber) => exitSucceed(fiber.getFiberRef(self))), fiberRefGetAndSet, fiberRefGetAndUpdate, fiberRefGetAndUpdateSome, fiberRefGetWith, fiberRefSet, fiberRefDelete = (self) => withFiberRuntime((state) => {
  state.unsafeDeleteFiberRef(self);
  return void_3;
}), fiberRefReset = (self) => fiberRefSet(self, self.initial), fiberRefModify, fiberRefModifySome = (self, def, f) => fiberRefModify(self, (v) => getOrElse2(f(v), () => [def, v])), fiberRefUpdate, fiberRefUpdateSome, fiberRefUpdateAndGet, fiberRefUpdateSomeAndGet, RequestResolverSymbolKey = "effect/RequestResolver", RequestResolverTypeId, requestResolverVariance, RequestResolverImpl, isRequestResolver = (u) => hasProperty(u, RequestResolverTypeId), resolverLocally, fiberRefLocally, fiberRefLocallyWith, fiberRefUnsafeMake = (initial, options) => fiberRefUnsafeMakePatch(initial, {
  differ: update2(),
  fork: options?.fork ?? identity,
  join: options?.join
}), fiberRefUnsafeMakeHashSet = (initial) => {
  const differ2 = hashSet();
  return fiberRefUnsafeMakePatch(initial, {
    differ: differ2,
    fork: differ2.empty
  });
}, fiberRefUnsafeMakeReadonlyArray = (initial) => {
  const differ2 = readonlyArray(update2());
  return fiberRefUnsafeMakePatch(initial, {
    differ: differ2,
    fork: differ2.empty
  });
}, fiberRefUnsafeMakeContext = (initial) => {
  const differ2 = environment();
  return fiberRefUnsafeMakePatch(initial, {
    differ: differ2,
    fork: differ2.empty
  });
}, fiberRefUnsafeMakePatch = (initial, options) => {
  const _fiberRef = {
    ...CommitPrototype,
    [FiberRefTypeId]: fiberRefVariance,
    initial,
    commit() {
      return fiberRefGet(this);
    },
    diff: (oldValue, newValue) => options.differ.diff(oldValue, newValue),
    combine: (first, second) => options.differ.combine(first, second),
    patch: (patch8) => (oldValue) => options.differ.patch(patch8, oldValue),
    fork: options.fork,
    join: options.join ?? ((_, n) => n)
  };
  return _fiberRef;
}, fiberRefUnsafeMakeRuntimeFlags = (initial) => fiberRefUnsafeMakePatch(initial, {
  differ,
  fork: differ.empty
}), currentContext, currentSchedulingPriority, currentMaxOpsBeforeYield, currentLogAnnotations, currentLogLevel, currentLogSpan, withSchedulingPriority, withMaxOpsBeforeYield, currentConcurrency, currentRequestBatching, currentUnhandledErrorLogLevel, withUnhandledErrorLogLevel, currentMetricLabels, metricLabels, currentForkScopeOverride, currentInterruptedCause, currentTracerEnabled, currentTracerTimingEnabled, currentTracerSpanAnnotations, currentTracerSpanLinks, ScopeTypeId, CloseableScopeTypeId, scopeAddFinalizer = (self, finalizer) => self.addFinalizer(() => asVoid2(finalizer)), scopeAddFinalizerExit = (self, finalizer) => self.addFinalizer(finalizer), scopeClose = (self, exit2) => self.close(exit2), scopeFork = (self, strategy) => self.fork(strategy), causeSquash = (self) => {
  return causeSquashWith(identity)(self);
}, causeSquashWith, YieldableError, makeException = (proto2, tag) => {

  class Base2 extends YieldableError {
    _tag = tag;
  }
  Object.assign(Base2.prototype, proto2);
  Base2.prototype.name = tag;
  return Base2;
}, RuntimeExceptionTypeId, RuntimeException, isRuntimeException = (u) => hasProperty(u, RuntimeExceptionTypeId), InterruptedExceptionTypeId, InterruptedException, isInterruptedException = (u) => hasProperty(u, InterruptedExceptionTypeId), IllegalArgumentExceptionTypeId, IllegalArgumentException, isIllegalArgumentException = (u) => hasProperty(u, IllegalArgumentExceptionTypeId), NoSuchElementExceptionTypeId, NoSuchElementException, isNoSuchElementException = (u) => hasProperty(u, NoSuchElementExceptionTypeId), InvalidPubSubCapacityExceptionTypeId, InvalidPubSubCapacityException, ExceededCapacityExceptionTypeId, ExceededCapacityException, isExceededCapacityException = (u) => hasProperty(u, ExceededCapacityExceptionTypeId), TimeoutExceptionTypeId, TimeoutException, timeoutExceptionFromDuration = (duration) => new TimeoutException(`Operation timed out after '${format4(duration)}'`), UnknownExceptionTypeId, UnknownException, isUnknownException = (u) => hasProperty(u, UnknownExceptionTypeId), exitIsExit = (u) => isEffect(u) && ("_tag" in u) && (u._tag === "Success" || u._tag === "Failure"), exitIsFailure = (self) => self._tag === "Failure", exitIsSuccess = (self) => self._tag === "Success", exitIsInterrupted = (self) => {
  switch (self._tag) {
    case OP_FAILURE:
      return isInterrupted(self.effect_instruction_i0);
    case OP_SUCCESS:
      return false;
  }
}, exitAs, exitAsVoid = (self) => exitAs(self, undefined), exitCauseOption = (self) => {
  switch (self._tag) {
    case OP_FAILURE:
      return some3(self.effect_instruction_i0);
    case OP_SUCCESS:
      return none2();
  }
}, exitCollectAll = (exits, options) => exitCollectAllInternal(exits, options?.parallel ? parallel : sequential), exitDie = (defect) => exitFailCause(die(defect)), exitExists, exitFail = (error2) => exitFailCause(fail(error2)), exitFailCause = (cause) => {
  const effect = new EffectPrimitiveFailure(OP_FAILURE);
  effect.effect_instruction_i0 = cause;
  return effect;
}, exitFlatMap, exitFlatMapEffect, exitFlatten = (self) => pipe(self, exitFlatMap(identity)), exitForEachEffect, exitFromEither = (either4) => {
  switch (either4._tag) {
    case "Left":
      return exitFail(either4.left);
    case "Right":
      return exitSucceed(either4.right);
  }
}, exitFromOption = (option2) => {
  switch (option2._tag) {
    case "None":
      return exitFail(undefined);
    case "Some":
      return exitSucceed(option2.value);
  }
}, exitGetOrElse, exitInterrupt = (fiberId2) => exitFailCause(interrupt(fiberId2)), exitMap, exitMapBoth, exitMapError, exitMapErrorCause, exitMatch, exitMatchEffect, exitSucceed = (value) => {
  const effect = new EffectPrimitiveSuccess(OP_SUCCESS);
  effect.effect_instruction_i0 = value;
  return effect;
}, exitVoid, exitZip, exitZipLeft, exitZipRight, exitZipPar, exitZipParLeft, exitZipParRight, exitZipWith, exitCollectAllInternal = (exits, combineCauses) => {
  const list = fromIterable3(exits);
  if (!isNonEmpty2(list)) {
    return none2();
  }
  return pipe(tailNonEmpty2(list), reduce3(pipe(headNonEmpty2(list), exitMap(of3)), (accumulator, current) => pipe(accumulator, exitZipWith(current, {
    onSuccess: (list2, value) => pipe(list2, prepend3(value)),
    onFailure: combineCauses
  }))), exitMap(reverse3), exitMap((chunk2) => toReadonlyArray(chunk2)), some3);
}, deferredUnsafeMake = (fiberId2) => {
  const _deferred = {
    ...CommitPrototype,
    [DeferredTypeId]: deferredVariance,
    state: make15(pending([])),
    commit() {
      return deferredAwait(this);
    },
    blockingOn: fiberId2
  };
  return _deferred;
}, deferredMake = () => flatMap12(fiberId, (id) => deferredMakeAs(id)), deferredMakeAs = (fiberId2) => sync(() => deferredUnsafeMake(fiberId2)), deferredAwait = (self) => asyncInterrupt((resume) => {
  const state = get8(self.state);
  switch (state._tag) {
    case OP_STATE_DONE: {
      return resume(state.effect);
    }
    case OP_STATE_PENDING: {
      state.joiners.push(resume);
      return deferredInterruptJoiner(self, resume);
    }
  }
}, self.blockingOn), deferredComplete, deferredCompleteWith, deferredDone, deferredFail, deferredFailSync, deferredFailCause, deferredFailCauseSync, deferredDie, deferredDieSync, deferredInterrupt = (self) => flatMap12(fiberId, (fiberId2) => deferredCompleteWith(self, interruptWith(fiberId2))), deferredInterruptWith, deferredIsDone = (self) => sync(() => get8(self.state)._tag === OP_STATE_DONE), deferredPoll = (self) => sync(() => {
  const state = get8(self.state);
  switch (state._tag) {
    case OP_STATE_DONE: {
      return some3(state.effect);
    }
    case OP_STATE_PENDING: {
      return none2();
    }
  }
}), deferredSucceed, deferredSync, deferredUnsafeDone = (self, effect) => {
  const state = get8(self.state);
  if (state._tag === OP_STATE_PENDING) {
    set3(self.state, done(effect));
    for (let i2 = 0, len = state.joiners.length;i2 < len; i2++) {
      state.joiners[i2](effect);
    }
  }
}, deferredInterruptJoiner = (self, joiner) => sync(() => {
  const state = get8(self.state);
  if (state._tag === OP_STATE_PENDING) {
    const index = state.joiners.indexOf(joiner);
    if (index >= 0) {
      state.joiners.splice(index, 1);
    }
  }
}), constContext, context2 = () => constContext, contextWithEffect = (f) => flatMap12(context2(), f), provideContext, provideSomeContext, mapInputContext, filterEffectOrElse, filterEffectOrFail, currentSpanFromFiber = (fiber) => {
  const span2 = fiber.currentSpan;
  return span2 !== undefined && span2._tag === "Span" ? some3(span2) : none2();
}, NoopSpanProto, noopSpan = (options) => Object.assign(Object.create(NoopSpanProto), options);
var init_core = __esm(() => {
  init_Array();
  init_Chunk();
  init_Context();
  init_Duration();
  init_Either();
  init_Equal();
  init_FiberId();
  init_Function();
  init_GlobalValue();
  init_Hash();
  init_HashMap();
  init_Inspectable();
  init_List();
  init_MutableRef();
  init_Option();
  init_Predicate();
  init_RuntimeFlagsPatch();
  init_Utils();
  init_blockedRequests();
  init_cause();
  init_deferred();
  init_differ();
  init_effectable();
  init_runtimeFlags();
  init_singleShotGen();
  EffectTypeId2 = /* @__PURE__ */ Symbol.for("effect/Effect");
  EffectPrimitive = class EffectPrimitive {
    _op;
    effect_instruction_i0 = undefined;
    effect_instruction_i1 = undefined;
    effect_instruction_i2 = undefined;
    trace = undefined;
    [EffectTypeId2] = effectVariance;
    constructor(_op) {
      this._op = _op;
    }
    [symbol3](that) {
      return this === that;
    }
    [symbol2]() {
      return cached(this, random(this));
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    toJSON() {
      return {
        _id: "Effect",
        _op: this._op,
        effect_instruction_i0: toJSON(this.effect_instruction_i0),
        effect_instruction_i1: toJSON(this.effect_instruction_i1),
        effect_instruction_i2: toJSON(this.effect_instruction_i2)
      };
    }
    toString() {
      return format2(this.toJSON());
    }
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
    [Symbol.iterator]() {
      return new SingleShotGen2(new YieldWrap(this));
    }
  };
  EffectPrimitiveFailure = class EffectPrimitiveFailure {
    _op;
    effect_instruction_i0 = undefined;
    effect_instruction_i1 = undefined;
    effect_instruction_i2 = undefined;
    trace = undefined;
    [EffectTypeId2] = effectVariance;
    constructor(_op) {
      this._op = _op;
      this._tag = _op;
    }
    [symbol3](that) {
      return exitIsExit(that) && that._op === "Failure" && equals(this.effect_instruction_i0, that.effect_instruction_i0);
    }
    [symbol2]() {
      return pipe(string2(this._tag), combine2(hash(this.effect_instruction_i0)), cached(this));
    }
    get cause() {
      return this.effect_instruction_i0;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    toJSON() {
      return {
        _id: "Exit",
        _tag: this._op,
        cause: this.cause.toJSON()
      };
    }
    toString() {
      return format2(this.toJSON());
    }
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
    [Symbol.iterator]() {
      return new SingleShotGen2(new YieldWrap(this));
    }
  };
  EffectPrimitiveSuccess = class EffectPrimitiveSuccess {
    _op;
    effect_instruction_i0 = undefined;
    effect_instruction_i1 = undefined;
    effect_instruction_i2 = undefined;
    trace = undefined;
    [EffectTypeId2] = effectVariance;
    constructor(_op) {
      this._op = _op;
      this._tag = _op;
    }
    [symbol3](that) {
      return exitIsExit(that) && that._op === "Success" && equals(this.effect_instruction_i0, that.effect_instruction_i0);
    }
    [symbol2]() {
      return pipe(string2(this._tag), combine2(hash(this.effect_instruction_i0)), cached(this));
    }
    get value() {
      return this.effect_instruction_i0;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    toJSON() {
      return {
        _id: "Exit",
        _tag: this._op,
        value: toJSON(this.value)
      };
    }
    toString() {
      return format2(this.toJSON());
    }
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
    [Symbol.iterator]() {
      return new SingleShotGen2(new YieldWrap(this));
    }
  };
  acquireUseRelease = /* @__PURE__ */ dual(3, (acquire, use, release) => uninterruptibleMask((restore) => flatMap12(acquire, (a) => flatMap12(exit(suspend(() => restore(use(a)))), (exit) => {
    return suspend(() => release(a, exit)).pipe(matchCauseEffect({
      onFailure: (cause) => {
        switch (exit._tag) {
          case OP_FAILURE:
            return failCause(sequential(exit.effect_instruction_i0, cause));
          case OP_SUCCESS:
            return failCause(cause);
        }
      },
      onSuccess: () => exit
    }));
  }))));
  as3 = /* @__PURE__ */ dual(2, (self, value) => flatMap12(self, () => succeed(value)));
  catchAllCause = /* @__PURE__ */ dual(2, (self, f) => {
    const effect = new EffectPrimitive(OP_ON_FAILURE);
    effect.effect_instruction_i0 = self;
    effect.effect_instruction_i1 = f;
    return effect;
  });
  catchAll = /* @__PURE__ */ dual(2, (self, f) => matchEffect(self, {
    onFailure: f,
    onSuccess: succeed
  }));
  catchIf = /* @__PURE__ */ dual(3, (self, predicate, f) => catchAllCause(self, (cause) => {
    const either3 = failureOrCause(cause);
    switch (either3._tag) {
      case "Left":
        return predicate(either3.left) ? f(either3.left) : failCause(cause);
      case "Right":
        return failCause(either3.right);
    }
  }));
  catchSome = /* @__PURE__ */ dual(2, (self, pf) => catchAllCause(self, (cause) => {
    const either3 = failureOrCause(cause);
    switch (either3._tag) {
      case "Left":
        return pipe(pf(either3.left), getOrElse2(() => failCause(cause)));
      case "Right":
        return failCause(either3.right);
    }
  }));
  originalSymbol = /* @__PURE__ */ Symbol.for("effect/OriginalAnnotation");
  fiberId = /* @__PURE__ */ withFiberRuntime((state) => succeed(state.id()));
  flatMap12 = /* @__PURE__ */ dual(2, (self, f) => {
    const effect = new EffectPrimitive(OP_ON_SUCCESS);
    effect.effect_instruction_i0 = self;
    effect.effect_instruction_i1 = f;
    return effect;
  });
  andThen6 = /* @__PURE__ */ dual(2, (self, f) => flatMap12(self, (a) => {
    const b = typeof f === "function" ? f(a) : f;
    if (isEffect(b)) {
      return b;
    } else if (isPromiseLike(b)) {
      return unsafeAsync((resume) => {
        b.then((a2) => resume(succeed(a2)), (e) => resume(fail2(new UnknownException(e, "An unknown error occurred in Effect.andThen"))));
      });
    }
    return succeed(b);
  }));
  matchCause = /* @__PURE__ */ dual(2, (self, options) => matchCauseEffect(self, {
    onFailure: (cause) => succeed(options.onFailure(cause)),
    onSuccess: (a) => succeed(options.onSuccess(a))
  }));
  matchCauseEffect = /* @__PURE__ */ dual(2, (self, options) => {
    const effect = new EffectPrimitive(OP_ON_SUCCESS_AND_FAILURE);
    effect.effect_instruction_i0 = self;
    effect.effect_instruction_i1 = options.onFailure;
    effect.effect_instruction_i2 = options.onSuccess;
    return effect;
  });
  matchEffect = /* @__PURE__ */ dual(2, (self, options) => matchCauseEffect(self, {
    onFailure: (cause) => {
      const defects2 = defects(cause);
      if (defects2.length > 0) {
        return failCause(electFailures(cause));
      }
      const failures2 = failures(cause);
      if (failures2.length > 0) {
        return options.onFailure(unsafeHead2(failures2));
      }
      return failCause(cause);
    },
    onSuccess: options.onSuccess
  }));
  forEachSequential = /* @__PURE__ */ dual(2, (self, f) => suspend(() => {
    const arr = fromIterable2(self);
    const ret = allocate(arr.length);
    let i2 = 0;
    return as3(whileLoop({
      while: () => i2 < arr.length,
      body: () => f(arr[i2], i2),
      step: (b) => {
        ret[i2++] = b;
      }
    }), ret);
  }));
  forEachSequentialDiscard = /* @__PURE__ */ dual(2, (self, f) => suspend(() => {
    const arr = fromIterable2(self);
    let i2 = 0;
    return whileLoop({
      while: () => i2 < arr.length,
      body: () => f(arr[i2], i2),
      step: () => {
        i2++;
      }
    });
  }));
  if_ = /* @__PURE__ */ dual((args) => typeof args[0] === "boolean" || isEffect(args[0]), (self, options) => isEffect(self) ? flatMap12(self, (b) => b ? options.onTrue() : options.onFalse()) : self ? options.onTrue() : options.onFalse());
  interrupt2 = /* @__PURE__ */ flatMap12(fiberId, (fiberId2) => interruptWith(fiberId2));
  intoDeferred = /* @__PURE__ */ dual(2, (self, deferred) => uninterruptibleMask((restore) => flatMap12(exit(restore(self)), (exit2) => deferredDone(deferred, exit2))));
  map14 = /* @__PURE__ */ dual(2, (self, f) => flatMap12(self, (a) => sync(() => f(a))));
  mapBoth3 = /* @__PURE__ */ dual(2, (self, options) => matchEffect(self, {
    onFailure: (e) => failSync(() => options.onFailure(e)),
    onSuccess: (a) => sync(() => options.onSuccess(a))
  }));
  mapError = /* @__PURE__ */ dual(2, (self, f) => matchCauseEffect(self, {
    onFailure: (cause) => {
      const either4 = failureOrCause(cause);
      switch (either4._tag) {
        case "Left": {
          return failSync(() => f(either4.left));
        }
        case "Right": {
          return failCause(either4.right);
        }
      }
    },
    onSuccess: succeed
  }));
  onError = /* @__PURE__ */ dual(2, (self, cleanup) => onExit(self, (exit2) => exitIsSuccess(exit2) ? void_3 : cleanup(exit2.effect_instruction_i0)));
  onExit = /* @__PURE__ */ dual(2, (self, cleanup) => uninterruptibleMask((restore) => matchCauseEffect(restore(self), {
    onFailure: (cause1) => {
      const result2 = exitFailCause(cause1);
      return matchCauseEffect(cleanup(result2), {
        onFailure: (cause2) => exitFailCause(sequential(cause1, cause2)),
        onSuccess: () => result2
      });
    },
    onSuccess: (success) => {
      const result2 = exitSucceed(success);
      return zipRight2(cleanup(result2), result2);
    }
  })));
  onInterrupt = /* @__PURE__ */ dual(2, (self, cleanup) => onExit(self, exitMatch({
    onFailure: (cause) => isInterruptedOnly(cause) ? asVoid2(cleanup(interruptors(cause))) : void_3,
    onSuccess: () => void_3
  })));
  orElse3 = /* @__PURE__ */ dual(2, (self, that) => attemptOrElse(self, that, succeed));
  orDieWith = /* @__PURE__ */ dual(2, (self, f) => matchEffect(self, {
    onFailure: (e) => die2(f(e)),
    onSuccess: succeed
  }));
  partitionMap6 = partitionMap3;
  runtimeFlags = /* @__PURE__ */ withFiberRuntime((_, status) => succeed(status.runtimeFlags));
  tap2 = /* @__PURE__ */ dual((args) => args.length === 3 || args.length === 2 && !(isObject2(args[1]) && ("onlyEffect" in args[1])), (self, f) => flatMap12(self, (a) => {
    const b = typeof f === "function" ? f(a) : f;
    if (isEffect(b)) {
      return as3(b, a);
    } else if (isPromiseLike(b)) {
      return unsafeAsync((resume) => {
        b.then((_) => resume(succeed(a)), (e) => resume(fail2(new UnknownException(e, "An unknown error occurred in Effect.tap"))));
      });
    }
    return succeed(a);
  }));
  attemptOrElse = /* @__PURE__ */ dual(3, (self, that, onSuccess) => matchCauseEffect(self, {
    onFailure: (cause) => {
      const defects2 = defects(cause);
      if (defects2.length > 0) {
        return failCause(getOrThrow2(keepDefectsAndElectFailures(cause)));
      }
      return that();
    },
    onSuccess
  }));
  void_3 = /* @__PURE__ */ succeed(undefined);
  whenEffect = /* @__PURE__ */ dual(2, (self, condition) => flatMap12(condition, (b) => {
    if (b) {
      return pipe(self, map14(some3));
    }
    return succeed(none2());
  }));
  withConcurrency = /* @__PURE__ */ dual(2, (self, concurrency) => fiberRefLocally(self, currentConcurrency, concurrency));
  withRequestBatching = /* @__PURE__ */ dual(2, (self, requestBatching) => fiberRefLocally(self, currentRequestBatching, requestBatching));
  withRuntimeFlags = /* @__PURE__ */ dual(2, (self, update3) => {
    const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
    effect.effect_instruction_i0 = update3;
    effect.effect_instruction_i1 = () => self;
    return effect;
  });
  withTracerEnabled = /* @__PURE__ */ dual(2, (effect, enabled2) => fiberRefLocally(effect, currentTracerEnabled, enabled2));
  withTracerTiming = /* @__PURE__ */ dual(2, (effect, enabled2) => fiberRefLocally(effect, currentTracerTimingEnabled, enabled2));
  zip5 = /* @__PURE__ */ dual(2, (self, that) => flatMap12(self, (a) => map14(that, (b) => [a, b])));
  zipLeft2 = /* @__PURE__ */ dual(2, (self, that) => flatMap12(self, (a) => as3(that, a)));
  zipRight2 = /* @__PURE__ */ dual(2, (self, that) => flatMap12(self, () => that));
  zipWith6 = /* @__PURE__ */ dual(3, (self, that, f) => flatMap12(self, (a) => map14(that, (b) => f(a, b))));
  never = /* @__PURE__ */ asyncInterrupt(() => {
    const interval = setInterval(() => {}, 2 ** 31 - 1);
    return sync(() => clearInterval(interval));
  });
  interruptAsFiber = /* @__PURE__ */ dual(2, (self, fiberId2) => flatMap12(self.interruptAsFork(fiberId2), () => self.await));
  logLevelAll = {
    _tag: "All",
    syslog: 0,
    label: "ALL",
    ordinal: Number.MIN_SAFE_INTEGER,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  logLevelFatal = {
    _tag: "Fatal",
    syslog: 2,
    label: "FATAL",
    ordinal: 50000,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  logLevelError = {
    _tag: "Error",
    syslog: 3,
    label: "ERROR",
    ordinal: 40000,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  logLevelWarning = {
    _tag: "Warning",
    syslog: 4,
    label: "WARN",
    ordinal: 30000,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  logLevelInfo = {
    _tag: "Info",
    syslog: 6,
    label: "INFO",
    ordinal: 20000,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  logLevelDebug = {
    _tag: "Debug",
    syslog: 7,
    label: "DEBUG",
    ordinal: 1e4,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  logLevelTrace = {
    _tag: "Trace",
    syslog: 7,
    label: "TRACE",
    ordinal: 0,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  logLevelNone = {
    _tag: "None",
    syslog: 7,
    label: "OFF",
    ordinal: Number.MAX_SAFE_INTEGER,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  allLogLevels = [logLevelAll, logLevelTrace, logLevelDebug, logLevelInfo, logLevelWarning, logLevelError, logLevelFatal, logLevelNone];
  FiberRefTypeId = /* @__PURE__ */ Symbol.for(FiberRefSymbolKey);
  fiberRefVariance = {
    _A: (_) => _
  };
  fiberRefGetAndSet = /* @__PURE__ */ dual(2, (self, value) => fiberRefModify(self, (v) => [v, value]));
  fiberRefGetAndUpdate = /* @__PURE__ */ dual(2, (self, f) => fiberRefModify(self, (v) => [v, f(v)]));
  fiberRefGetAndUpdateSome = /* @__PURE__ */ dual(2, (self, pf) => fiberRefModify(self, (v) => [v, getOrElse2(pf(v), () => v)]));
  fiberRefGetWith = /* @__PURE__ */ dual(2, (self, f) => flatMap12(fiberRefGet(self), f));
  fiberRefSet = /* @__PURE__ */ dual(2, (self, value) => fiberRefModify(self, () => [undefined, value]));
  fiberRefModify = /* @__PURE__ */ dual(2, (self, f) => withFiberRuntime((state) => {
    const [b, a] = f(state.getFiberRef(self));
    state.setFiberRef(self, a);
    return succeed(b);
  }));
  fiberRefUpdate = /* @__PURE__ */ dual(2, (self, f) => fiberRefModify(self, (v) => [undefined, f(v)]));
  fiberRefUpdateSome = /* @__PURE__ */ dual(2, (self, pf) => fiberRefModify(self, (v) => [undefined, getOrElse2(pf(v), () => v)]));
  fiberRefUpdateAndGet = /* @__PURE__ */ dual(2, (self, f) => fiberRefModify(self, (v) => {
    const result2 = f(v);
    return [result2, result2];
  }));
  fiberRefUpdateSomeAndGet = /* @__PURE__ */ dual(2, (self, pf) => fiberRefModify(self, (v) => {
    const result2 = getOrElse2(pf(v), () => v);
    return [result2, result2];
  }));
  RequestResolverTypeId = /* @__PURE__ */ Symbol.for(RequestResolverSymbolKey);
  requestResolverVariance = {
    _A: (_) => _,
    _R: (_) => _
  };
  RequestResolverImpl = class RequestResolverImpl {
    runAll;
    target;
    [RequestResolverTypeId] = requestResolverVariance;
    constructor(runAll, target) {
      this.runAll = runAll;
      this.target = target;
    }
    [symbol2]() {
      return cached(this, this.target ? hash(this.target) : random(this));
    }
    [symbol3](that) {
      return this.target ? isRequestResolver(that) && equals(this.target, that.target) : this === that;
    }
    identified(...ids3) {
      return new RequestResolverImpl(this.runAll, fromIterable3(ids3));
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  resolverLocally = /* @__PURE__ */ dual(3, (use, self, value) => new RequestResolverImpl((requests) => fiberRefLocally(use.runAll(requests), self, value), make9("Locally", use, self, value)));
  fiberRefLocally = /* @__PURE__ */ dual(3, (use, self, value) => acquireUseRelease(zipLeft2(fiberRefGet(self), fiberRefSet(self, value)), () => use, (oldValue) => fiberRefSet(self, oldValue)));
  fiberRefLocallyWith = /* @__PURE__ */ dual(3, (use, self, f) => fiberRefGetWith(self, (a) => fiberRefLocally(use, self, f(a))));
  currentContext = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentContext"), () => fiberRefUnsafeMakeContext(empty6()));
  currentSchedulingPriority = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentSchedulingPriority"), () => fiberRefUnsafeMake(0));
  currentMaxOpsBeforeYield = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentMaxOpsBeforeYield"), () => fiberRefUnsafeMake(2048));
  currentLogAnnotations = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentLogAnnotation"), () => fiberRefUnsafeMake(empty11()));
  currentLogLevel = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentLogLevel"), () => fiberRefUnsafeMake(logLevelInfo));
  currentLogSpan = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentLogSpan"), () => fiberRefUnsafeMake(empty12()));
  withSchedulingPriority = /* @__PURE__ */ dual(2, (self, scheduler2) => fiberRefLocally(self, currentSchedulingPriority, scheduler2));
  withMaxOpsBeforeYield = /* @__PURE__ */ dual(2, (self, scheduler2) => fiberRefLocally(self, currentMaxOpsBeforeYield, scheduler2));
  currentConcurrency = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentConcurrency"), () => fiberRefUnsafeMake("unbounded"));
  currentRequestBatching = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentRequestBatching"), () => fiberRefUnsafeMake(true));
  currentUnhandledErrorLogLevel = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentUnhandledErrorLogLevel"), () => fiberRefUnsafeMake(some3(logLevelDebug)));
  withUnhandledErrorLogLevel = /* @__PURE__ */ dual(2, (self, level) => fiberRefLocally(self, currentUnhandledErrorLogLevel, level));
  currentMetricLabels = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentMetricLabels"), () => fiberRefUnsafeMakeReadonlyArray(empty4()));
  metricLabels = /* @__PURE__ */ fiberRefGet(currentMetricLabels);
  currentForkScopeOverride = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentForkScopeOverride"), () => fiberRefUnsafeMake(none2(), {
    fork: () => none2(),
    join: (parent, _) => parent
  }));
  currentInterruptedCause = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentInterruptedCause"), () => fiberRefUnsafeMake(empty22, {
    fork: () => empty22,
    join: (parent, _) => parent
  }));
  currentTracerEnabled = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentTracerEnabled"), () => fiberRefUnsafeMake(true));
  currentTracerTimingEnabled = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentTracerTiming"), () => fiberRefUnsafeMake(true));
  currentTracerSpanAnnotations = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentTracerSpanAnnotations"), () => fiberRefUnsafeMake(empty11()));
  currentTracerSpanLinks = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentTracerSpanLinks"), () => fiberRefUnsafeMake(empty7()));
  ScopeTypeId = /* @__PURE__ */ Symbol.for("effect/Scope");
  CloseableScopeTypeId = /* @__PURE__ */ Symbol.for("effect/CloseableScope");
  causeSquashWith = /* @__PURE__ */ dual(2, (self, f) => {
    const option2 = pipe(self, failureOption, map2(f));
    switch (option2._tag) {
      case "None": {
        return pipe(defects(self), head3, match2({
          onNone: () => {
            const interrupts = fromIterable2(interruptors(self)).flatMap((fiberId2) => fromIterable2(ids2(fiberId2)).map((id) => `#${id}`));
            return new InterruptedException(interrupts ? `Interrupted by fibers: ${interrupts.join(", ")}` : undefined);
          },
          onSome: identity
        }));
      }
      case "Some": {
        return option2.value;
      }
    }
  });
  YieldableError = /* @__PURE__ */ function() {

    class YieldableError2 extends globalThis.Error {
      commit() {
        return fail2(this);
      }
      toJSON() {
        const obj = {
          ...this
        };
        if (this.message)
          obj.message = this.message;
        if (this.cause)
          obj.cause = this.cause;
        return obj;
      }
      [NodeInspectSymbol]() {
        if (this.toString !== globalThis.Error.prototype.toString) {
          return this.stack ? `${this.toString()}
${this.stack.split(`
`).slice(1).join(`
`)}` : this.toString();
        } else if ("Bun" in globalThis) {
          return pretty(fail(this), {
            renderErrorCause: true
          });
        }
        return this;
      }
    }
    Object.assign(YieldableError2.prototype, StructuralCommitPrototype);
    return YieldableError2;
  }();
  RuntimeExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/RuntimeException");
  RuntimeException = /* @__PURE__ */ makeException({
    [RuntimeExceptionTypeId]: RuntimeExceptionTypeId
  }, "RuntimeException");
  InterruptedExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/InterruptedException");
  InterruptedException = /* @__PURE__ */ makeException({
    [InterruptedExceptionTypeId]: InterruptedExceptionTypeId
  }, "InterruptedException");
  IllegalArgumentExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/IllegalArgument");
  IllegalArgumentException = /* @__PURE__ */ makeException({
    [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId
  }, "IllegalArgumentException");
  NoSuchElementExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/NoSuchElement");
  NoSuchElementException = /* @__PURE__ */ makeException({
    [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId
  }, "NoSuchElementException");
  InvalidPubSubCapacityExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/InvalidPubSubCapacityException");
  InvalidPubSubCapacityException = /* @__PURE__ */ makeException({
    [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId
  }, "InvalidPubSubCapacityException");
  ExceededCapacityExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/ExceededCapacityException");
  ExceededCapacityException = /* @__PURE__ */ makeException({
    [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId
  }, "ExceededCapacityException");
  TimeoutExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/Timeout");
  TimeoutException = /* @__PURE__ */ makeException({
    [TimeoutExceptionTypeId]: TimeoutExceptionTypeId
  }, "TimeoutException");
  UnknownExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Cause/errors/UnknownException");
  UnknownException = /* @__PURE__ */ function() {

    class UnknownException2 extends YieldableError {
      _tag = "UnknownException";
      error;
      constructor(cause, message) {
        super(message ?? "An unknown error occurred", {
          cause
        });
        this.error = cause;
      }
    }
    Object.assign(UnknownException2.prototype, {
      [UnknownExceptionTypeId]: UnknownExceptionTypeId,
      name: "UnknownException"
    });
    return UnknownException2;
  }();
  exitAs = /* @__PURE__ */ dual(2, (self, value) => {
    switch (self._tag) {
      case OP_FAILURE: {
        return exitFailCause(self.effect_instruction_i0);
      }
      case OP_SUCCESS: {
        return exitSucceed(value);
      }
    }
  });
  exitExists = /* @__PURE__ */ dual(2, (self, refinement) => {
    switch (self._tag) {
      case OP_FAILURE:
        return false;
      case OP_SUCCESS:
        return refinement(self.effect_instruction_i0);
    }
  });
  exitFlatMap = /* @__PURE__ */ dual(2, (self, f) => {
    switch (self._tag) {
      case OP_FAILURE: {
        return exitFailCause(self.effect_instruction_i0);
      }
      case OP_SUCCESS: {
        return f(self.effect_instruction_i0);
      }
    }
  });
  exitFlatMapEffect = /* @__PURE__ */ dual(2, (self, f) => {
    switch (self._tag) {
      case OP_FAILURE: {
        return succeed(exitFailCause(self.effect_instruction_i0));
      }
      case OP_SUCCESS: {
        return f(self.effect_instruction_i0);
      }
    }
  });
  exitForEachEffect = /* @__PURE__ */ dual(2, (self, f) => {
    switch (self._tag) {
      case OP_FAILURE: {
        return succeed(exitFailCause(self.effect_instruction_i0));
      }
      case OP_SUCCESS: {
        return exit(f(self.effect_instruction_i0));
      }
    }
  });
  exitGetOrElse = /* @__PURE__ */ dual(2, (self, orElse4) => {
    switch (self._tag) {
      case OP_FAILURE:
        return orElse4(self.effect_instruction_i0);
      case OP_SUCCESS:
        return self.effect_instruction_i0;
    }
  });
  exitMap = /* @__PURE__ */ dual(2, (self, f) => {
    switch (self._tag) {
      case OP_FAILURE:
        return exitFailCause(self.effect_instruction_i0);
      case OP_SUCCESS:
        return exitSucceed(f(self.effect_instruction_i0));
    }
  });
  exitMapBoth = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => {
    switch (self._tag) {
      case OP_FAILURE:
        return exitFailCause(pipe(self.effect_instruction_i0, map13(onFailure)));
      case OP_SUCCESS:
        return exitSucceed(onSuccess(self.effect_instruction_i0));
    }
  });
  exitMapError = /* @__PURE__ */ dual(2, (self, f) => {
    switch (self._tag) {
      case OP_FAILURE:
        return exitFailCause(pipe(self.effect_instruction_i0, map13(f)));
      case OP_SUCCESS:
        return exitSucceed(self.effect_instruction_i0);
    }
  });
  exitMapErrorCause = /* @__PURE__ */ dual(2, (self, f) => {
    switch (self._tag) {
      case OP_FAILURE:
        return exitFailCause(f(self.effect_instruction_i0));
      case OP_SUCCESS:
        return exitSucceed(self.effect_instruction_i0);
    }
  });
  exitMatch = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => {
    switch (self._tag) {
      case OP_FAILURE:
        return onFailure(self.effect_instruction_i0);
      case OP_SUCCESS:
        return onSuccess(self.effect_instruction_i0);
    }
  });
  exitMatchEffect = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => {
    switch (self._tag) {
      case OP_FAILURE:
        return onFailure(self.effect_instruction_i0);
      case OP_SUCCESS:
        return onSuccess(self.effect_instruction_i0);
    }
  });
  exitVoid = /* @__PURE__ */ exitSucceed(undefined);
  exitZip = /* @__PURE__ */ dual(2, (self, that) => exitZipWith(self, that, {
    onSuccess: (a, a2) => [a, a2],
    onFailure: sequential
  }));
  exitZipLeft = /* @__PURE__ */ dual(2, (self, that) => exitZipWith(self, that, {
    onSuccess: (a, _) => a,
    onFailure: sequential
  }));
  exitZipRight = /* @__PURE__ */ dual(2, (self, that) => exitZipWith(self, that, {
    onSuccess: (_, a2) => a2,
    onFailure: sequential
  }));
  exitZipPar = /* @__PURE__ */ dual(2, (self, that) => exitZipWith(self, that, {
    onSuccess: (a, a2) => [a, a2],
    onFailure: parallel
  }));
  exitZipParLeft = /* @__PURE__ */ dual(2, (self, that) => exitZipWith(self, that, {
    onSuccess: (a, _) => a,
    onFailure: parallel
  }));
  exitZipParRight = /* @__PURE__ */ dual(2, (self, that) => exitZipWith(self, that, {
    onSuccess: (_, a2) => a2,
    onFailure: parallel
  }));
  exitZipWith = /* @__PURE__ */ dual(3, (self, that, {
    onFailure,
    onSuccess
  }) => {
    switch (self._tag) {
      case OP_FAILURE: {
        switch (that._tag) {
          case OP_SUCCESS:
            return exitFailCause(self.effect_instruction_i0);
          case OP_FAILURE: {
            return exitFailCause(onFailure(self.effect_instruction_i0, that.effect_instruction_i0));
          }
        }
      }
      case OP_SUCCESS: {
        switch (that._tag) {
          case OP_SUCCESS:
            return exitSucceed(onSuccess(self.effect_instruction_i0, that.effect_instruction_i0));
          case OP_FAILURE:
            return exitFailCause(that.effect_instruction_i0);
        }
      }
    }
  });
  deferredComplete = /* @__PURE__ */ dual(2, (self, effect) => intoDeferred(effect, self));
  deferredCompleteWith = /* @__PURE__ */ dual(2, (self, effect) => sync(() => {
    const state = get8(self.state);
    switch (state._tag) {
      case OP_STATE_DONE: {
        return false;
      }
      case OP_STATE_PENDING: {
        set3(self.state, done(effect));
        for (let i2 = 0, len = state.joiners.length;i2 < len; i2++) {
          state.joiners[i2](effect);
        }
        return true;
      }
    }
  }));
  deferredDone = /* @__PURE__ */ dual(2, (self, exit2) => deferredCompleteWith(self, exit2));
  deferredFail = /* @__PURE__ */ dual(2, (self, error2) => deferredCompleteWith(self, fail2(error2)));
  deferredFailSync = /* @__PURE__ */ dual(2, (self, evaluate) => deferredCompleteWith(self, failSync(evaluate)));
  deferredFailCause = /* @__PURE__ */ dual(2, (self, cause) => deferredCompleteWith(self, failCause(cause)));
  deferredFailCauseSync = /* @__PURE__ */ dual(2, (self, evaluate) => deferredCompleteWith(self, failCauseSync(evaluate)));
  deferredDie = /* @__PURE__ */ dual(2, (self, defect) => deferredCompleteWith(self, die2(defect)));
  deferredDieSync = /* @__PURE__ */ dual(2, (self, evaluate) => deferredCompleteWith(self, dieSync(evaluate)));
  deferredInterruptWith = /* @__PURE__ */ dual(2, (self, fiberId2) => deferredCompleteWith(self, interruptWith(fiberId2)));
  deferredSucceed = /* @__PURE__ */ dual(2, (self, value) => deferredCompleteWith(self, succeed(value)));
  deferredSync = /* @__PURE__ */ dual(2, (self, evaluate) => deferredCompleteWith(self, sync(evaluate)));
  constContext = /* @__PURE__ */ withFiberRuntime((fiber) => exitSucceed(fiber.currentContext));
  provideContext = /* @__PURE__ */ dual(2, (self, context3) => fiberRefLocally(currentContext, context3)(self));
  provideSomeContext = /* @__PURE__ */ dual(2, (self, context3) => fiberRefLocallyWith(currentContext, (parent) => merge3(parent, context3))(self));
  mapInputContext = /* @__PURE__ */ dual(2, (self, f) => contextWithEffect((context3) => provideContext(self, f(context3))));
  filterEffectOrElse = /* @__PURE__ */ dual(2, (self, options) => flatMap12(self, (a) => flatMap12(options.predicate(a), (pass) => pass ? succeed(a) : options.orElse(a))));
  filterEffectOrFail = /* @__PURE__ */ dual(2, (self, options) => filterEffectOrElse(self, {
    predicate: options.predicate,
    orElse: (a) => fail2(options.orFailWith(a))
  }));
  NoopSpanProto = {
    _tag: "Span",
    spanId: "noop",
    traceId: "noop",
    sampled: false,
    status: {
      _tag: "Ended",
      startTime: /* @__PURE__ */ BigInt(0),
      endTime: /* @__PURE__ */ BigInt(0),
      exit: exitVoid
    },
    attributes: /* @__PURE__ */ new Map,
    links: [],
    kind: "internal",
    attribute() {},
    event() {},
    end() {},
    addLinks() {}
  };
});

// node_modules/effect/dist/esm/Deferred.js
var exports_Deferred = {};
__export(exports_Deferred, {
  unsafeMake: () => unsafeMake4,
  unsafeDone: () => unsafeDone,
  sync: () => sync2,
  succeed: () => succeed2,
  poll: () => poll,
  makeAs: () => makeAs,
  make: () => make24,
  isDone: () => isDone,
  interruptWith: () => interruptWith2,
  interrupt: () => interrupt3,
  failSync: () => failSync2,
  failCauseSync: () => failCauseSync2,
  failCause: () => failCause2,
  fail: () => fail3,
  done: () => done2,
  dieSync: () => dieSync2,
  die: () => die3,
  completeWith: () => completeWith,
  complete: () => complete,
  await: () => _await,
  DeferredTypeId: () => DeferredTypeId2
});
var DeferredTypeId2, make24, makeAs, _await, complete, completeWith, done2, fail3, failSync2, failCause2, failCauseSync2, die3, dieSync2, interrupt3, interruptWith2, isDone, poll, succeed2, sync2, unsafeMake4, unsafeDone;
var init_Deferred = __esm(() => {
  init_core();
  init_deferred();
  DeferredTypeId2 = DeferredTypeId;
  make24 = deferredMake;
  makeAs = deferredMakeAs;
  _await = deferredAwait;
  complete = deferredComplete;
  completeWith = deferredCompleteWith;
  done2 = deferredDone;
  fail3 = deferredFail;
  failSync2 = deferredFailSync;
  failCause2 = deferredFailCause;
  failCauseSync2 = deferredFailCauseSync;
  die3 = deferredDie;
  dieSync2 = deferredDieSync;
  interrupt3 = deferredInterrupt;
  interruptWith2 = deferredInterruptWith;
  isDone = deferredIsDone;
  poll = deferredPoll;
  succeed2 = deferredSucceed;
  sync2 = deferredSync;
  unsafeMake4 = deferredUnsafeMake;
  unsafeDone = deferredUnsafeDone;
});

// node_modules/effect/dist/esm/Exit.js
var exports_Exit = {};
__export(exports_Exit, {
  zipWith: () => zipWith7,
  zipRight: () => zipRight3,
  zipParRight: () => zipParRight,
  zipParLeft: () => zipParLeft,
  zipPar: () => zipPar,
  zipLeft: () => zipLeft3,
  zip: () => zip6,
  void: () => void_4,
  succeed: () => succeed3,
  matchEffect: () => matchEffect2,
  match: () => match7,
  mapErrorCause: () => mapErrorCause,
  mapError: () => mapError2,
  mapBoth: () => mapBoth4,
  map: () => map15,
  isSuccess: () => isSuccess,
  isInterrupted: () => isInterrupted2,
  isFailure: () => isFailure2,
  isExit: () => isExit,
  interrupt: () => interrupt4,
  getOrElse: () => getOrElse7,
  fromOption: () => fromOption4,
  fromEither: () => fromEither,
  forEachEffect: () => forEachEffect,
  flatten: () => flatten9,
  flatMapEffect: () => flatMapEffect,
  flatMap: () => flatMap13,
  failCause: () => failCause3,
  fail: () => fail4,
  exists: () => exists2,
  die: () => die4,
  causeOption: () => causeOption,
  asVoid: () => asVoid3,
  as: () => as4,
  all: () => all7
});
var isExit, isFailure2, isSuccess, isInterrupted2, as4, asVoid3, causeOption, all7, die4, exists2, fail4, failCause3, flatMap13, flatMapEffect, flatten9, forEachEffect, fromEither, fromOption4, getOrElse7, interrupt4, map15, mapBoth4, mapError2, mapErrorCause, match7, matchEffect2, succeed3, void_4, zip6, zipLeft3, zipRight3, zipPar, zipParLeft, zipParRight, zipWith7;
var init_Exit = __esm(() => {
  init_core();
  isExit = exitIsExit;
  isFailure2 = exitIsFailure;
  isSuccess = exitIsSuccess;
  isInterrupted2 = exitIsInterrupted;
  as4 = exitAs;
  asVoid3 = exitAsVoid;
  causeOption = exitCauseOption;
  all7 = exitCollectAll;
  die4 = exitDie;
  exists2 = exitExists;
  fail4 = exitFail;
  failCause3 = exitFailCause;
  flatMap13 = exitFlatMap;
  flatMapEffect = exitFlatMapEffect;
  flatten9 = exitFlatten;
  forEachEffect = exitForEachEffect;
  fromEither = exitFromEither;
  fromOption4 = exitFromOption;
  getOrElse7 = exitGetOrElse;
  interrupt4 = exitInterrupt;
  map15 = exitMap;
  mapBoth4 = exitMapBoth;
  mapError2 = exitMapError;
  mapErrorCause = exitMapErrorCause;
  match7 = exitMatch;
  matchEffect2 = exitMatchEffect;
  succeed3 = exitSucceed;
  void_4 = exitVoid;
  zip6 = exitZip;
  zipLeft3 = exitZipLeft;
  zipRight3 = exitZipRight;
  zipPar = exitZipPar;
  zipParLeft = exitZipParLeft;
  zipParRight = exitZipParRight;
  zipWith7 = exitZipWith;
});

// node_modules/effect/dist/esm/MutableHashMap.js
var exports_MutableHashMap = {};
__export(exports_MutableHashMap, {
  values: () => values6,
  size: () => size10,
  set: () => set5,
  remove: () => remove8,
  modifyAt: () => modifyAt3,
  modify: () => modify6,
  make: () => make25,
  keys: () => keys4,
  isEmpty: () => isEmpty8,
  has: () => has6,
  get: () => get10,
  fromIterable: () => fromIterable9,
  forEach: () => forEach9,
  empty: () => empty23,
  clear: () => clear
});

class BucketIterator {
  backing;
  constructor(backing) {
    this.backing = backing;
  }
  currentBucket;
  next() {
    if (this.currentBucket === undefined) {
      const result3 = this.backing.next();
      if (result3.done) {
        return result3;
      }
      this.currentBucket = result3.value[Symbol.iterator]();
    }
    const result2 = this.currentBucket.next();
    if (result2.done) {
      this.currentBucket = undefined;
      return this.next();
    }
    return result2;
  }
}
var TypeId11, MutableHashMapProto, MutableHashMapIterator, empty23 = () => {
  const self = Object.create(MutableHashMapProto);
  self.referential = new Map;
  self.buckets = new Map;
  self.bucketsSize = 0;
  return self;
}, make25 = (...entries3) => fromIterable9(entries3), fromIterable9 = (entries3) => {
  const self = empty23();
  for (const [key, value] of entries3) {
    set5(self, key, value);
  }
  return self;
}, get10, keys4 = (self) => {
  const keys5 = Array.from(self.referential.keys());
  for (const bucket of self.buckets.values()) {
    for (let i2 = 0, len = bucket.length;i2 < len; i2++) {
      keys5.push(bucket[i2][0]);
    }
  }
  return keys5;
}, values6 = (self) => {
  const values7 = Array.from(self.referential.values());
  for (const bucket of self.buckets.values()) {
    for (let i2 = 0, len = bucket.length;i2 < len; i2++) {
      values7.push(bucket[i2][1]);
    }
  }
  return values7;
}, getFromBucket = (self, bucket, key, remove8 = false) => {
  for (let i2 = 0, len = bucket.length;i2 < len; i2++) {
    if (key[symbol3](bucket[i2][0])) {
      const value = bucket[i2][1];
      if (remove8) {
        bucket.splice(i2, 1);
        self.bucketsSize--;
      }
      return some3(value);
    }
  }
  return none2();
}, has6, set5, removeFromBucket = (self, bucket, key) => {
  for (let i2 = 0, len = bucket.length;i2 < len; i2++) {
    if (key[symbol3](bucket[i2][0])) {
      bucket.splice(i2, 1);
      self.bucketsSize--;
      return;
    }
  }
}, modify6, modifyAt3, remove8, clear = (self) => {
  self.referential.clear();
  self.buckets.clear();
  self.bucketsSize = 0;
  return self;
}, size10 = (self) => {
  return self.referential.size + self.bucketsSize;
}, isEmpty8 = (self) => size10(self) === 0, forEach9;
var init_MutableHashMap = __esm(() => {
  init_Equal();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  TypeId11 = /* @__PURE__ */ Symbol.for("effect/MutableHashMap");
  MutableHashMapProto = {
    [TypeId11]: TypeId11,
    [Symbol.iterator]() {
      return new MutableHashMapIterator(this);
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "MutableHashMap",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  MutableHashMapIterator = class MutableHashMapIterator {
    self;
    referentialIterator;
    bucketIterator;
    constructor(self) {
      this.self = self;
      this.referentialIterator = self.referential[Symbol.iterator]();
    }
    next() {
      if (this.bucketIterator !== undefined) {
        return this.bucketIterator.next();
      }
      const result2 = this.referentialIterator.next();
      if (result2.done) {
        this.bucketIterator = new BucketIterator(this.self.buckets.values());
        return this.next();
      }
      return result2;
    }
    [Symbol.iterator]() {
      return new MutableHashMapIterator(this.self);
    }
  };
  get10 = /* @__PURE__ */ dual(2, (self, key) => {
    if (isEqual(key) === false) {
      return self.referential.has(key) ? some3(self.referential.get(key)) : none2();
    }
    const hash3 = key[symbol2]();
    const bucket = self.buckets.get(hash3);
    if (bucket === undefined) {
      return none2();
    }
    return getFromBucket(self, bucket, key);
  });
  has6 = /* @__PURE__ */ dual(2, (self, key) => isSome2(get10(self, key)));
  set5 = /* @__PURE__ */ dual(3, (self, key, value) => {
    if (isEqual(key) === false) {
      self.referential.set(key, value);
      return self;
    }
    const hash3 = key[symbol2]();
    const bucket = self.buckets.get(hash3);
    if (bucket === undefined) {
      self.buckets.set(hash3, [[key, value]]);
      self.bucketsSize++;
      return self;
    }
    removeFromBucket(self, bucket, key);
    bucket.push([key, value]);
    self.bucketsSize++;
    return self;
  });
  modify6 = /* @__PURE__ */ dual(3, (self, key, f) => {
    if (isEqual(key) === false) {
      if (self.referential.has(key)) {
        self.referential.set(key, f(self.referential.get(key)));
      }
      return self;
    }
    const hash3 = key[symbol2]();
    const bucket = self.buckets.get(hash3);
    if (bucket === undefined) {
      return self;
    }
    const value = getFromBucket(self, bucket, key, true);
    if (isNone2(value)) {
      return self;
    }
    bucket.push([key, f(value.value)]);
    self.bucketsSize++;
    return self;
  });
  modifyAt3 = /* @__PURE__ */ dual(3, (self, key, f) => {
    if (isEqual(key) === false) {
      const result3 = f(get10(self, key));
      if (isSome2(result3)) {
        set5(self, key, result3.value);
      } else {
        remove8(self, key);
      }
      return self;
    }
    const hash3 = key[symbol2]();
    const bucket = self.buckets.get(hash3);
    if (bucket === undefined) {
      const result3 = f(none2());
      return isSome2(result3) ? set5(self, key, result3.value) : self;
    }
    const result2 = f(getFromBucket(self, bucket, key, true));
    if (isNone2(result2)) {
      if (bucket.length === 0) {
        self.buckets.delete(hash3);
      }
      return self;
    }
    bucket.push([key, result2.value]);
    self.bucketsSize++;
    return self;
  });
  remove8 = /* @__PURE__ */ dual(2, (self, key) => {
    if (isEqual(key) === false) {
      self.referential.delete(key);
      return self;
    }
    const hash3 = key[symbol2]();
    const bucket = self.buckets.get(hash3);
    if (bucket === undefined) {
      return self;
    }
    removeFromBucket(self, bucket, key);
    if (bucket.length === 0) {
      self.buckets.delete(hash3);
    }
    return self;
  });
  forEach9 = /* @__PURE__ */ dual(2, (self, f) => {
    self.referential.forEach(f);
    for (const bucket of self.buckets.values()) {
      for (const [key, value] of bucket) {
        f(value, key);
      }
    }
  });
});

// node_modules/effect/dist/esm/MutableList.js
var exports_MutableList = {};
__export(exports_MutableList, {
  tail: () => tail4,
  shift: () => shift,
  reset: () => reset,
  prepend: () => prepend5,
  pop: () => pop2,
  make: () => make26,
  length: () => length2,
  isEmpty: () => isEmpty9,
  head: () => head5,
  fromIterable: () => fromIterable10,
  forEach: () => forEach10,
  empty: () => empty24,
  append: () => append5
});
var TypeId12, MutableListProto, makeNode = (value) => ({
  value,
  removed: false,
  prev: undefined,
  next: undefined
}), empty24 = () => {
  const list = Object.create(MutableListProto);
  list.head = undefined;
  list.tail = undefined;
  list._length = 0;
  return list;
}, fromIterable10 = (iterable) => {
  const list = empty24();
  for (const element of iterable) {
    append5(list, element);
  }
  return list;
}, make26 = (...elements) => fromIterable10(elements), isEmpty9 = (self) => length2(self) === 0, length2 = (self) => self._length, tail4 = (self) => self.tail === undefined ? undefined : self.tail.value, head5 = (self) => self.head === undefined ? undefined : self.head.value, forEach10, reset = (self) => {
  self._length = 0;
  self.head = undefined;
  self.tail = undefined;
  return self;
}, append5, shift = (self) => {
  const head6 = self.head;
  if (head6 !== undefined) {
    remove9(self, head6);
    return head6.value;
  }
  return;
}, pop2 = (self) => {
  const tail5 = self.tail;
  if (tail5 !== undefined) {
    remove9(self, tail5);
    return tail5.value;
  }
  return;
}, prepend5, remove9 = (self, node) => {
  if (node.removed) {
    return;
  }
  node.removed = true;
  if (node.prev !== undefined && node.next !== undefined) {
    node.prev.next = node.next;
    node.next.prev = node.prev;
  } else if (node.prev !== undefined) {
    self.tail = node.prev;
    node.prev.next = undefined;
  } else if (node.next !== undefined) {
    self.head = node.next;
    node.next.prev = undefined;
  } else {
    self.tail = undefined;
    self.head = undefined;
  }
  if (self._length > 0) {
    self._length -= 1;
  }
};
var init_MutableList = __esm(() => {
  init_Function();
  init_Inspectable();
  TypeId12 = /* @__PURE__ */ Symbol.for("effect/MutableList");
  MutableListProto = {
    [TypeId12]: TypeId12,
    [Symbol.iterator]() {
      let done3 = false;
      let head5 = this.head;
      return {
        next() {
          if (done3) {
            return this.return();
          }
          if (head5 == null) {
            done3 = true;
            return this.return();
          }
          const value = head5.value;
          head5 = head5.next;
          return {
            done: done3,
            value
          };
        },
        return(value) {
          if (!done3) {
            done3 = true;
          }
          return {
            done: true,
            value
          };
        }
      };
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "MutableList",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  forEach10 = /* @__PURE__ */ dual(2, (self, f) => {
    let current = self.head;
    while (current !== undefined) {
      f(current.value);
      current = current.next;
    }
  });
  append5 = /* @__PURE__ */ dual(2, (self, value) => {
    const node = makeNode(value);
    if (self.head === undefined) {
      self.head = node;
    }
    if (self.tail === undefined) {
      self.tail = node;
    } else {
      self.tail.next = node;
      node.prev = self.tail;
      self.tail = node;
    }
    self._length += 1;
    return self;
  });
  prepend5 = /* @__PURE__ */ dual(2, (self, value) => {
    const node = makeNode(value);
    node.next = self.head;
    if (self.head !== undefined) {
      self.head.prev = node;
    }
    self.head = node;
    if (self.tail === undefined) {
      self.tail = node;
    }
    self._length += 1;
    return self;
  });
});

// node_modules/effect/dist/esm/MutableQueue.js
var exports_MutableQueue = {};
__export(exports_MutableQueue, {
  unbounded: () => unbounded,
  pollUpTo: () => pollUpTo,
  poll: () => poll2,
  offerAll: () => offerAll,
  offer: () => offer,
  length: () => length3,
  isFull: () => isFull,
  isEmpty: () => isEmpty10,
  capacity: () => capacity,
  bounded: () => bounded,
  EmptyMutableQueue: () => EmptyMutableQueue
});
var TypeId13, EmptyMutableQueue, MutableQueueProto, make27 = (capacity) => {
  const queue = Object.create(MutableQueueProto);
  queue.queue = empty24();
  queue.capacity = capacity;
  return queue;
}, bounded = (capacity) => make27(capacity), unbounded = () => make27(undefined), length3 = (self) => length2(self.queue), isEmpty10 = (self) => isEmpty9(self.queue), isFull = (self) => self.capacity === undefined ? false : length2(self.queue) === self.capacity, capacity = (self) => self.capacity === undefined ? Infinity : self.capacity, offer, offerAll, poll2, pollUpTo;
var init_MutableQueue = __esm(() => {
  init_Chunk();
  init_Function();
  init_Inspectable();
  init_MutableList();
  TypeId13 = /* @__PURE__ */ Symbol.for("effect/MutableQueue");
  EmptyMutableQueue = /* @__PURE__ */ Symbol.for("effect/mutable/MutableQueue/Empty");
  MutableQueueProto = {
    [TypeId13]: TypeId13,
    [Symbol.iterator]() {
      return Array.from(this.queue)[Symbol.iterator]();
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "MutableQueue",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  offer = /* @__PURE__ */ dual(2, (self, value) => {
    const queueLength = length2(self.queue);
    if (self.capacity !== undefined && queueLength === self.capacity) {
      return false;
    }
    append5(value)(self.queue);
    return true;
  });
  offerAll = /* @__PURE__ */ dual(2, (self, values7) => {
    const iterator = values7[Symbol.iterator]();
    let next;
    let remainder3 = empty7();
    let offering = true;
    while (offering && (next = iterator.next()) && !next.done) {
      offering = offer(next.value)(self);
    }
    while (next != null && !next.done) {
      remainder3 = prepend3(next.value)(remainder3);
      next = iterator.next();
    }
    return reverse3(remainder3);
  });
  poll2 = /* @__PURE__ */ dual(2, (self, def) => {
    if (isEmpty9(self.queue)) {
      return def;
    }
    return shift(self.queue);
  });
  pollUpTo = /* @__PURE__ */ dual(2, (self, n) => {
    let result2 = empty7();
    let count = 0;
    while (count < n) {
      const element = poll2(EmptyMutableQueue)(self);
      if (element === EmptyMutableQueue) {
        break;
      }
      result2 = prepend3(element)(result2);
      count += 1;
    }
    return reverse3(result2);
  });
});

// node_modules/effect/dist/esm/internal/clock.js
var ClockSymbolKey = "effect/Clock", ClockTypeId, clockTag, MAX_TIMER_MILLIS, globalClockScheduler, performanceNowNanos, processOrPerformanceNow, ClockImpl, make28 = () => new ClockImpl;
var init_clock = __esm(() => {
  init_Context();
  init_Duration();
  init_Function();
  init_core();
  ClockTypeId = /* @__PURE__ */ Symbol.for(ClockSymbolKey);
  clockTag = /* @__PURE__ */ GenericTag("effect/Clock");
  MAX_TIMER_MILLIS = 2 ** 31 - 1;
  globalClockScheduler = {
    unsafeSchedule(task, duration) {
      const millis2 = toMillis(duration);
      if (millis2 > MAX_TIMER_MILLIS) {
        return constFalse;
      }
      let completed = false;
      const handle = setTimeout(() => {
        completed = true;
        task();
      }, millis2);
      return () => {
        clearTimeout(handle);
        return !completed;
      };
    }
  };
  performanceNowNanos = /* @__PURE__ */ function() {
    const bigint1e62 = /* @__PURE__ */ BigInt(1e6);
    if (typeof performance === "undefined") {
      return () => BigInt(Date.now()) * bigint1e62;
    }
    let origin;
    return () => {
      if (origin === undefined) {
        origin = BigInt(Date.now()) * bigint1e62 - BigInt(Math.round(performance.now() * 1e6));
      }
      return origin + BigInt(Math.round(performance.now() * 1e6));
    };
  }();
  processOrPerformanceNow = /* @__PURE__ */ function() {
    const processHrtime = typeof process === "object" && "hrtime" in process && typeof process.hrtime.bigint === "function" ? process.hrtime : undefined;
    if (!processHrtime) {
      return performanceNowNanos;
    }
    const origin = /* @__PURE__ */ performanceNowNanos() - /* @__PURE__ */ processHrtime.bigint();
    return () => origin + processHrtime.bigint();
  }();
  ClockImpl = class ClockImpl {
    [ClockTypeId] = ClockTypeId;
    unsafeCurrentTimeMillis() {
      return Date.now();
    }
    unsafeCurrentTimeNanos() {
      return processOrPerformanceNow();
    }
    currentTimeMillis = /* @__PURE__ */ sync(() => this.unsafeCurrentTimeMillis());
    currentTimeNanos = /* @__PURE__ */ sync(() => this.unsafeCurrentTimeNanos());
    scheduler() {
      return succeed(globalClockScheduler);
    }
    sleep(duration) {
      return async_((resume) => {
        const canceler = globalClockScheduler.unsafeSchedule(() => resume(void_3), duration);
        return asVoid2(sync(canceler));
      });
    }
  };
});

// node_modules/effect/dist/esm/internal/opCodes/configError.js
var OP_AND = "And", OP_OR = "Or", OP_INVALID_DATA = "InvalidData", OP_MISSING_DATA = "MissingData", OP_SOURCE_UNAVAILABLE = "SourceUnavailable", OP_UNSUPPORTED = "Unsupported";

// node_modules/effect/dist/esm/internal/configError.js
var ConfigErrorSymbolKey = "effect/ConfigError", ConfigErrorTypeId, proto2, And = (self, that) => {
  const error2 = Object.create(proto2);
  error2._op = OP_AND;
  error2.left = self;
  error2.right = that;
  Object.defineProperty(error2, "toString", {
    enumerable: false,
    value() {
      return `${this.left} and ${this.right}`;
    }
  });
  return error2;
}, Or = (self, that) => {
  const error2 = Object.create(proto2);
  error2._op = OP_OR;
  error2.left = self;
  error2.right = that;
  Object.defineProperty(error2, "toString", {
    enumerable: false,
    value() {
      return `${this.left} or ${this.right}`;
    }
  });
  return error2;
}, InvalidData = (path, message, options = {
  pathDelim: "."
}) => {
  const error2 = Object.create(proto2);
  error2._op = OP_INVALID_DATA;
  error2.path = path;
  error2.message = message;
  Object.defineProperty(error2, "toString", {
    enumerable: false,
    value() {
      const path2 = pipe(this.path, join(options.pathDelim));
      return `(Invalid data at ${path2}: "${this.message}")`;
    }
  });
  return error2;
}, MissingData = (path, message, options = {
  pathDelim: "."
}) => {
  const error2 = Object.create(proto2);
  error2._op = OP_MISSING_DATA;
  error2.path = path;
  error2.message = message;
  Object.defineProperty(error2, "toString", {
    enumerable: false,
    value() {
      const path2 = pipe(this.path, join(options.pathDelim));
      return `(Missing data at ${path2}: "${this.message}")`;
    }
  });
  return error2;
}, SourceUnavailable = (path, message, cause, options = {
  pathDelim: "."
}) => {
  const error2 = Object.create(proto2);
  error2._op = OP_SOURCE_UNAVAILABLE;
  error2.path = path;
  error2.message = message;
  error2.cause = cause;
  Object.defineProperty(error2, "toString", {
    enumerable: false,
    value() {
      const path2 = pipe(this.path, join(options.pathDelim));
      return `(Source unavailable at ${path2}: "${this.message}")`;
    }
  });
  return error2;
}, Unsupported = (path, message, options = {
  pathDelim: "."
}) => {
  const error2 = Object.create(proto2);
  error2._op = OP_UNSUPPORTED;
  error2.path = path;
  error2.message = message;
  Object.defineProperty(error2, "toString", {
    enumerable: false,
    value() {
      const path2 = pipe(this.path, join(options.pathDelim));
      return `(Unsupported operation at ${path2}: "${this.message}")`;
    }
  });
  return error2;
}, isConfigError = (u) => hasProperty(u, ConfigErrorTypeId), isAnd = (self) => self._op === OP_AND, isOr = (self) => self._op === OP_OR, isInvalidData = (self) => self._op === OP_INVALID_DATA, isMissingData = (self) => self._op === OP_MISSING_DATA, isSourceUnavailable = (self) => self._op === OP_SOURCE_UNAVAILABLE, isUnsupported = (self) => self._op === OP_UNSUPPORTED, prefixed, IsMissingDataOnlyReducer, reduceWithContext2, isMissingDataOnly = (self) => reduceWithContext2(self, undefined, IsMissingDataOnlyReducer);
var init_configError = __esm(() => {
  init_Array();
  init_Either();
  init_Function();
  init_Predicate();
  ConfigErrorTypeId = /* @__PURE__ */ Symbol.for(ConfigErrorSymbolKey);
  proto2 = {
    _tag: "ConfigError",
    [ConfigErrorTypeId]: ConfigErrorTypeId
  };
  prefixed = /* @__PURE__ */ dual(2, (self, prefix) => {
    switch (self._op) {
      case OP_AND: {
        return And(prefixed(self.left, prefix), prefixed(self.right, prefix));
      }
      case OP_OR: {
        return Or(prefixed(self.left, prefix), prefixed(self.right, prefix));
      }
      case OP_INVALID_DATA: {
        return InvalidData([...prefix, ...self.path], self.message);
      }
      case OP_MISSING_DATA: {
        return MissingData([...prefix, ...self.path], self.message);
      }
      case OP_SOURCE_UNAVAILABLE: {
        return SourceUnavailable([...prefix, ...self.path], self.message, self.cause);
      }
      case OP_UNSUPPORTED: {
        return Unsupported([...prefix, ...self.path], self.message);
      }
    }
  });
  IsMissingDataOnlyReducer = {
    andCase: (_, left3, right3) => left3 && right3,
    orCase: (_, left3, right3) => left3 && right3,
    invalidDataCase: constFalse,
    missingDataCase: constTrue,
    sourceUnavailableCase: constFalse,
    unsupportedCase: constFalse
  };
  reduceWithContext2 = /* @__PURE__ */ dual(3, (self, context3, reducer) => {
    const input = [self];
    const output = [];
    while (input.length > 0) {
      const error2 = input.pop();
      switch (error2._op) {
        case OP_AND: {
          input.push(error2.right);
          input.push(error2.left);
          output.push(left2({
            _op: "AndCase"
          }));
          break;
        }
        case OP_OR: {
          input.push(error2.right);
          input.push(error2.left);
          output.push(left2({
            _op: "OrCase"
          }));
          break;
        }
        case OP_INVALID_DATA: {
          output.push(right2(reducer.invalidDataCase(context3, error2.path, error2.message)));
          break;
        }
        case OP_MISSING_DATA: {
          output.push(right2(reducer.missingDataCase(context3, error2.path, error2.message)));
          break;
        }
        case OP_SOURCE_UNAVAILABLE: {
          output.push(right2(reducer.sourceUnavailableCase(context3, error2.path, error2.message, error2.cause)));
          break;
        }
        case OP_UNSUPPORTED: {
          output.push(right2(reducer.unsupportedCase(context3, error2.path, error2.message)));
          break;
        }
      }
    }
    const accumulator = [];
    while (output.length > 0) {
      const either4 = output.pop();
      switch (either4._op) {
        case "Left": {
          switch (either4.left._op) {
            case "AndCase": {
              const left3 = accumulator.pop();
              const right3 = accumulator.pop();
              const value = reducer.andCase(context3, left3, right3);
              accumulator.push(value);
              break;
            }
            case "OrCase": {
              const left3 = accumulator.pop();
              const right3 = accumulator.pop();
              const value = reducer.orCase(context3, left3, right3);
              accumulator.push(value);
              break;
            }
          }
          break;
        }
        case "Right": {
          accumulator.push(either4.right);
          break;
        }
      }
    }
    if (accumulator.length === 0) {
      throw new Error("BUG: ConfigError.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues");
    }
    return accumulator.pop();
  });
});

// node_modules/effect/dist/esm/internal/configProvider/pathPatch.js
var empty25, andThen7, mapName, nested, unnested, patch8;
var init_pathPatch = __esm(() => {
  init_Array();
  init_Either();
  init_Function();
  init_List();
  init_Option();
  init_configError();
  empty25 = {
    _tag: "Empty"
  };
  andThen7 = /* @__PURE__ */ dual(2, (self, that) => ({
    _tag: "AndThen",
    first: self,
    second: that
  }));
  mapName = /* @__PURE__ */ dual(2, (self, f) => andThen7(self, {
    _tag: "MapName",
    f
  }));
  nested = /* @__PURE__ */ dual(2, (self, name) => andThen7(self, {
    _tag: "Nested",
    name
  }));
  unnested = /* @__PURE__ */ dual(2, (self, name) => andThen7(self, {
    _tag: "Unnested",
    name
  }));
  patch8 = /* @__PURE__ */ dual(2, (path, patch9) => {
    let input = of4(patch9);
    let output = path;
    while (isCons(input)) {
      const patch10 = input.head;
      switch (patch10._tag) {
        case "Empty": {
          input = input.tail;
          break;
        }
        case "AndThen": {
          input = cons(patch10.first, cons(patch10.second, input.tail));
          break;
        }
        case "MapName": {
          output = map6(output, patch10.f);
          input = input.tail;
          break;
        }
        case "Nested": {
          output = prepend2(output, patch10.name);
          input = input.tail;
          break;
        }
        case "Unnested": {
          const containsName = pipe(head2(output), contains(patch10.name));
          if (containsName) {
            output = tailNonEmpty(output);
            input = input.tail;
          } else {
            return left2(MissingData(output, `Expected ${patch10.name} to be in path in ConfigProvider#unnested`));
          }
          break;
        }
      }
    }
    return right2(output);
  });
});

// node_modules/effect/dist/esm/internal/opCodes/config.js
var OP_CONSTANT = "Constant", OP_FAIL2 = "Fail", OP_FALLBACK = "Fallback", OP_DESCRIBED = "Described", OP_LAZY = "Lazy", OP_MAP_OR_FAIL = "MapOrFail", OP_NESTED = "Nested", OP_PRIMITIVE = "Primitive", OP_SEQUENCE = "Sequence", OP_HASHMAP = "HashMap", OP_ZIP_WITH = "ZipWith";

// node_modules/effect/dist/esm/internal/string-utils.js
var lowerCase = (str) => str.toLowerCase(), upperCase = (str) => str.toUpperCase(), replace4 = (input, re, value) => re instanceof RegExp ? input.replace(re, value) : re.reduce((input2, re2) => input2.replace(re2, value), input), DEFAULT_SPLIT_REGEXP, DEFAULT_STRIP_REGEXP, noCase = (input, options = {}) => {
  const {
    delimiter = " ",
    splitRegexp = DEFAULT_SPLIT_REGEXP,
    stripRegexp = DEFAULT_STRIP_REGEXP,
    transform: transform2 = lowerCase
  } = options;
  const result2 = replace4(replace4(input, splitRegexp, "$1\x00$2"), stripRegexp, "\x00");
  let start = 0;
  let end = result2.length;
  while (result2.charAt(start) === "\x00") {
    start++;
  }
  while (result2.charAt(end - 1) === "\x00") {
    end--;
  }
  return result2.slice(start, end).split("\x00").map(transform2).join(delimiter);
}, constantCase = (input, options) => noCase(input, {
  delimiter: "_",
  transform: upperCase,
  ...options
}), kebabCase = (input, options) => noCase(input, {
  delimiter: "-",
  ...options
}), snakeCase = (input, options) => noCase(input, {
  delimiter: "_",
  ...options
});
var init_string_utils = __esm(() => {
  DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
  DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
});

// node_modules/effect/dist/esm/internal/configProvider.js
var concat = (l, r) => [...l, ...r], ConfigProviderSymbolKey = "effect/ConfigProvider", ConfigProviderTypeId, configProviderTag, FlatConfigProviderSymbolKey = "effect/ConfigProviderFlat", FlatConfigProviderTypeId, make29 = (options) => ({
  [ConfigProviderTypeId]: ConfigProviderTypeId,
  pipe() {
    return pipeArguments(this, arguments);
  },
  ...options
}), makeFlat = (options) => ({
  [FlatConfigProviderTypeId]: FlatConfigProviderTypeId,
  patch: options.patch,
  load: (path, config, split3 = true) => options.load(path, config, split3),
  enumerateChildren: options.enumerateChildren
}), fromFlat = (flat) => make29({
  load: (config) => flatMap12(fromFlatLoop(flat, empty4(), config, false), (chunk2) => match2(head2(chunk2), {
    onNone: () => fail2(MissingData(empty4(), `Expected a single value having structure: ${config}`)),
    onSome: succeed
  })),
  flattened: flat
}), fromEnv = (options) => {
  const {
    pathDelim,
    seqDelim
  } = Object.assign({}, {
    pathDelim: "_",
    seqDelim: ","
  }, options);
  const makePathString = (path) => pipe(path, join(pathDelim));
  const unmakePathString = (pathString) => pathString.split(pathDelim);
  const getEnv = () => typeof process !== "undefined" && ("env" in process) && typeof process.env === "object" ? process.env : {};
  const load = (path, primitive, split3 = true) => {
    const pathString = makePathString(path);
    const current = getEnv();
    const valueOpt = pathString in current ? some3(current[pathString]) : none2();
    return pipe(valueOpt, mapError(() => MissingData(path, `Expected ${pathString} to exist in the process context`)), flatMap12((value) => parsePrimitive(value, path, primitive, seqDelim, split3)));
  };
  const enumerateChildren = (path) => sync(() => {
    const current = getEnv();
    const keys5 = Object.keys(current);
    const keyPaths = keys5.map((value) => unmakePathString(value.toUpperCase()));
    const filteredKeyPaths = keyPaths.filter((keyPath) => {
      for (let i2 = 0;i2 < path.length; i2++) {
        const pathComponent = pipe(path, unsafeGet(i2));
        const currentElement = keyPath[i2];
        if (currentElement === undefined || pathComponent !== currentElement) {
          return false;
        }
      }
      return true;
    }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1));
    return fromIterable6(filteredKeyPaths);
  });
  return fromFlat(makeFlat({
    load,
    enumerateChildren,
    patch: empty25
  }));
}, fromMap = (map16, config) => {
  const {
    pathDelim,
    seqDelim
  } = Object.assign({
    seqDelim: ",",
    pathDelim: "."
  }, config);
  const makePathString = (path) => pipe(path, join(pathDelim));
  const unmakePathString = (pathString) => pathString.split(pathDelim);
  const mapWithIndexSplit = splitIndexInKeys(map16, (str) => unmakePathString(str), makePathString);
  const load = (path, primitive, split3 = true) => {
    const pathString = makePathString(path);
    const valueOpt = mapWithIndexSplit.has(pathString) ? some3(mapWithIndexSplit.get(pathString)) : none2();
    return pipe(valueOpt, mapError(() => MissingData(path, `Expected ${pathString} to exist in the provided map`)), flatMap12((value) => parsePrimitive(value, path, primitive, seqDelim, split3)));
  };
  const enumerateChildren = (path) => sync(() => {
    const keyPaths = fromIterable2(mapWithIndexSplit.keys()).map(unmakePathString);
    const filteredKeyPaths = keyPaths.filter((keyPath) => {
      for (let i2 = 0;i2 < path.length; i2++) {
        const pathComponent = pipe(path, unsafeGet(i2));
        const currentElement = keyPath[i2];
        if (currentElement === undefined || pathComponent !== currentElement) {
          return false;
        }
      }
      return true;
    }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1));
    return fromIterable6(filteredKeyPaths);
  });
  return fromFlat(makeFlat({
    load,
    enumerateChildren,
    patch: empty25
  }));
}, extend2 = (leftDef, rightDef, left3, right3) => {
  const leftPad = unfold2(left3.length, (index) => index >= right3.length ? none2() : some3([leftDef(index), index + 1]));
  const rightPad = unfold2(right3.length, (index) => index >= left3.length ? none2() : some3([rightDef(index), index + 1]));
  const leftExtension = concat(left3, leftPad);
  const rightExtension = concat(right3, rightPad);
  return [leftExtension, rightExtension];
}, appendConfigPath = (path, config) => {
  let op = config;
  if (op._tag === "Nested") {
    const out = path.slice();
    while (op._tag === "Nested") {
      out.push(op.name);
      op = op.config;
    }
    return out;
  }
  return path;
}, fromFlatLoop = (flat, prefix, config, split3) => {
  const op = config;
  switch (op._tag) {
    case OP_CONSTANT: {
      return succeed(of2(op.value));
    }
    case OP_DESCRIBED: {
      return suspend(() => fromFlatLoop(flat, prefix, op.config, split3));
    }
    case OP_FAIL2: {
      return fail2(MissingData(prefix, op.message));
    }
    case OP_FALLBACK: {
      return pipe(suspend(() => fromFlatLoop(flat, prefix, op.first, split3)), catchAll((error1) => {
        if (op.condition(error1)) {
          return pipe(fromFlatLoop(flat, prefix, op.second, split3), catchAll((error2) => fail2(Or(error1, error2))));
        }
        return fail2(error1);
      }));
    }
    case OP_LAZY: {
      return suspend(() => fromFlatLoop(flat, prefix, op.config(), split3));
    }
    case OP_MAP_OR_FAIL: {
      return suspend(() => pipe(fromFlatLoop(flat, prefix, op.original, split3), flatMap12(forEachSequential((a) => pipe(op.mapOrFail(a), mapError(prefixed(appendConfigPath(prefix, op.original))))))));
    }
    case OP_NESTED: {
      return suspend(() => fromFlatLoop(flat, concat(prefix, of2(op.name)), op.config, split3));
    }
    case OP_PRIMITIVE: {
      return pipe(patch8(prefix, flat.patch), flatMap12((prefix2) => pipe(flat.load(prefix2, op, split3), flatMap12((values7) => {
        if (values7.length === 0) {
          const name = pipe(last(prefix2), getOrElse2(() => "<n/a>"));
          return fail2(MissingData([], `Expected ${op.description} with name ${name}`));
        }
        return succeed(values7);
      }))));
    }
    case OP_SEQUENCE: {
      return pipe(patch8(prefix, flat.patch), flatMap12((patchedPrefix) => pipe(flat.enumerateChildren(patchedPrefix), flatMap12(indicesFrom), flatMap12((indices) => {
        if (indices.length === 0) {
          return suspend(() => map14(fromFlatLoop(flat, prefix, op.config, true), of2));
        }
        return pipe(forEachSequential(indices, (index) => fromFlatLoop(flat, append2(prefix, `[${index}]`), op.config, true)), map14((chunkChunk) => {
          const flattened = flatten3(chunkChunk);
          if (flattened.length === 0) {
            return of2(empty4());
          }
          return of2(flattened);
        }));
      }))));
    }
    case OP_HASHMAP: {
      return suspend(() => pipe(patch8(prefix, flat.patch), flatMap12((prefix2) => pipe(flat.enumerateChildren(prefix2), flatMap12((keys5) => {
        return pipe(keys5, forEachSequential((key) => fromFlatLoop(flat, concat(prefix2, of2(key)), op.valueConfig, split3)), map14((matrix) => {
          if (matrix.length === 0) {
            return of2(empty11());
          }
          return pipe(transpose(matrix), map6((values7) => fromIterable7(zip2(fromIterable2(keys5), values7))));
        }));
      })))));
    }
    case OP_ZIP_WITH: {
      return suspend(() => pipe(fromFlatLoop(flat, prefix, op.left, split3), either3, flatMap12((left3) => pipe(fromFlatLoop(flat, prefix, op.right, split3), either3, flatMap12((right3) => {
        if (isLeft2(left3) && isLeft2(right3)) {
          return fail2(And(left3.left, right3.left));
        }
        if (isLeft2(left3) && isRight2(right3)) {
          return fail2(left3.left);
        }
        if (isRight2(left3) && isLeft2(right3)) {
          return fail2(right3.left);
        }
        if (isRight2(left3) && isRight2(right3)) {
          const path = pipe(prefix, join("."));
          const fail5 = fromFlatLoopFail(prefix, path);
          const [lefts, rights] = extend2(fail5, fail5, pipe(left3.right, map6(right2)), pipe(right3.right, map6(right2)));
          return pipe(lefts, zip2(rights), forEachSequential(([left4, right4]) => pipe(zip5(left4, right4), map14(([left5, right5]) => op.zip(left5, right5)))));
        }
        throw new Error("BUG: ConfigProvider.fromFlatLoop - please report an issue at https://github.com/Effect-TS/effect/issues");
      })))));
    }
  }
}, fromFlatLoopFail = (prefix, path) => (index) => left2(MissingData(prefix, `The element at index ${index} in a sequence at path "${path}" was missing`)), mapInputPath, mapInputPathFlat = (self, f) => makeFlat({
  load: (path, config, split3 = true) => self.load(path, config, split3),
  enumerateChildren: (path) => self.enumerateChildren(path),
  patch: mapName(self.patch, f)
}), nested2, unnested2, orElse4, orElseFlat = (self, that) => makeFlat({
  load: (path, config, split3) => pipe(patch8(path, self.patch), flatMap12((patch9) => self.load(patch9, config, split3)), catchAll((error1) => pipe(sync(that), flatMap12((that2) => pipe(patch8(path, that2.patch), flatMap12((patch9) => that2.load(patch9, config, split3)), catchAll((error2) => fail2(Or(error1, error2)))))))),
  enumerateChildren: (path) => pipe(patch8(path, self.patch), flatMap12((patch9) => self.enumerateChildren(patch9)), either3, flatMap12((left3) => pipe(sync(that), flatMap12((that2) => pipe(patch8(path, that2.patch), flatMap12((patch9) => that2.enumerateChildren(patch9)), either3, flatMap12((right3) => {
    if (isLeft2(left3) && isLeft2(right3)) {
      return fail2(And(left3.left, right3.left));
    }
    if (isLeft2(left3) && isRight2(right3)) {
      return succeed(right3.right);
    }
    if (isRight2(left3) && isLeft2(right3)) {
      return succeed(left3.right);
    }
    if (isRight2(left3) && isRight2(right3)) {
      return succeed(pipe(left3.right, union6(right3.right)));
    }
    throw new Error("BUG: ConfigProvider.orElseFlat - please report an issue at https://github.com/Effect-TS/effect/issues");
  })))))),
  patch: empty25
}), constantCase2 = (self) => mapInputPath(self, constantCase), kebabCase2 = (self) => mapInputPath(self, kebabCase), lowerCase2 = (self) => mapInputPath(self, lowerCase), snakeCase2 = (self) => mapInputPath(self, snakeCase), upperCase2 = (self) => mapInputPath(self, upperCase), within, splitPathString = (text, delim) => {
  const split3 = text.split(new RegExp(`\\s*${escape(delim)}\\s*`));
  return split3;
}, parsePrimitive = (text, path, primitive, delimiter, split3) => {
  if (!split3) {
    return pipe(primitive.parse(text), mapBoth3({
      onFailure: prefixed(path),
      onSuccess: of2
    }));
  }
  return pipe(splitPathString(text, delimiter), forEachSequential((char2) => primitive.parse(char2.trim())), mapError(prefixed(path)));
}, transpose = (array5) => {
  return Object.keys(array5[0]).map((column) => array5.map((row) => row[column]));
}, indicesFrom = (quotedIndices) => pipe(forEachSequential(quotedIndices, parseQuotedIndex), mapBoth3({
  onFailure: () => empty4(),
  onSuccess: sort(Order)
}), either3, map14(merge)), STR_INDEX_REGEX, QUOTED_INDEX_REGEX, parseQuotedIndex = (str) => {
  const match8 = str.match(QUOTED_INDEX_REGEX);
  if (match8 !== null) {
    const matchedIndex = match8[2];
    return pipe(matchedIndex !== undefined && matchedIndex.length > 0 ? some3(matchedIndex) : none2(), flatMap2(parseInteger));
  }
  return none2();
}, splitIndexInKeys = (map16, unmakePathString, makePathString) => {
  const newMap = new Map;
  for (const [pathString, value] of map16) {
    const keyWithIndex = pipe(unmakePathString(pathString), flatMap4((key) => match2(splitIndexFrom(key), {
      onNone: () => of2(key),
      onSome: ([key2, index]) => make4(key2, `[${index}]`)
    })));
    newMap.set(makePathString(keyWithIndex), value);
  }
  return newMap;
}, splitIndexFrom = (key) => {
  const match8 = key.match(STR_INDEX_REGEX);
  if (match8 !== null) {
    const matchedString = match8[1];
    const matchedIndex = match8[3];
    const optionalString = matchedString !== undefined && matchedString.length > 0 ? some3(matchedString) : none2();
    const optionalIndex = pipe(matchedIndex !== undefined && matchedIndex.length > 0 ? some3(matchedIndex) : none2(), flatMap2(parseInteger));
    return all5([optionalString, optionalIndex]);
  }
  return none2();
}, parseInteger = (str) => {
  const parsedIndex = Number.parseInt(str);
  return Number.isNaN(parsedIndex) ? none2() : some3(parsedIndex);
}, keyName = (name) => ({
  _tag: "KeyName",
  name
}), keyIndex = (index) => ({
  _tag: "KeyIndex",
  index
}), fromJson = (json2) => {
  const hiddenDelimiter = "\uFEFF";
  const indexedEntries = map6(getIndexedEntries(json2), ([key, value]) => [configPathToString(key).join(hiddenDelimiter), value]);
  return fromMap(new Map(indexedEntries), {
    pathDelim: hiddenDelimiter,
    seqDelim: hiddenDelimiter
  });
}, configPathToString = (path) => {
  const output = [];
  let i2 = 0;
  while (i2 < path.length) {
    const component = path[i2];
    if (component._tag === "KeyName") {
      if (i2 + 1 < path.length) {
        const nextComponent = path[i2 + 1];
        if (nextComponent._tag === "KeyIndex") {
          output.push(`${component.name}[${nextComponent.index}]`);
          i2 += 2;
        } else {
          output.push(component.name);
          i2 += 1;
        }
      } else {
        output.push(component.name);
        i2 += 1;
      }
    }
  }
  return output;
}, getIndexedEntries = (config) => {
  const loopAny = (path, value) => {
    if (typeof value === "string") {
      return make4([path, value]);
    }
    if (typeof value === "number" || typeof value === "boolean") {
      return make4([path, String(value)]);
    }
    if (isArray2(value)) {
      return loopArray(path, value);
    }
    if (typeof value === "object" && value !== null) {
      return loopObject(path, value);
    }
    return empty4();
  };
  const loopArray = (path, values7) => match3(values7, {
    onEmpty: () => make4([path, "<nil>"]),
    onNonEmpty: flatMap4((value, index) => loopAny(append2(path, keyIndex(index)), value))
  });
  const loopObject = (path, value) => Object.entries(value).filter(([, value2]) => isNotNullable(value2)).flatMap(([key, value2]) => {
    const newPath = append2(path, keyName(key));
    const result2 = loopAny(newPath, value2);
    if (isEmptyReadonlyArray(result2)) {
      return make4([newPath, ""]);
    }
    return result2;
  });
  return loopObject(empty4(), config);
};
var init_configProvider = __esm(() => {
  init_Array();
  init_Context();
  init_Either();
  init_Function();
  init_HashMap();
  init_HashSet();
  init_Number();
  init_Option();
  init_Predicate();
  init_RegExp();
  init_configError();
  init_pathPatch();
  init_core();
  init_string_utils();
  ConfigProviderTypeId = /* @__PURE__ */ Symbol.for(ConfigProviderSymbolKey);
  configProviderTag = /* @__PURE__ */ GenericTag("effect/ConfigProvider");
  FlatConfigProviderTypeId = /* @__PURE__ */ Symbol.for(FlatConfigProviderSymbolKey);
  mapInputPath = /* @__PURE__ */ dual(2, (self, f) => fromFlat(mapInputPathFlat(self.flattened, f)));
  nested2 = /* @__PURE__ */ dual(2, (self, name) => fromFlat(makeFlat({
    load: (path, config) => self.flattened.load(path, config, true),
    enumerateChildren: (path) => self.flattened.enumerateChildren(path),
    patch: nested(self.flattened.patch, name)
  })));
  unnested2 = /* @__PURE__ */ dual(2, (self, name) => fromFlat(makeFlat({
    load: (path, config) => self.flattened.load(path, config, true),
    enumerateChildren: (path) => self.flattened.enumerateChildren(path),
    patch: unnested(self.flattened.patch, name)
  })));
  orElse4 = /* @__PURE__ */ dual(2, (self, that) => fromFlat(orElseFlat(self.flattened, () => that().flattened)));
  within = /* @__PURE__ */ dual(3, (self, path, f) => {
    const unnest = reduce3(path, self, (provider, name) => unnested2(provider, name));
    const nest = reduceRight(path, f(unnest), (provider, name) => nested2(provider, name));
    return orElse4(nest, () => self);
  });
  STR_INDEX_REGEX = /(^.+)(\[(\d+)\])$/;
  QUOTED_INDEX_REGEX = /^(\[(\d+)\])$/;
});

// node_modules/effect/dist/esm/internal/defaultServices/console.js
var TypeId14, consoleTag, defaultConsole;
var init_console = __esm(() => {
  init_Context();
  init_core();
  TypeId14 = /* @__PURE__ */ Symbol.for("effect/Console");
  consoleTag = /* @__PURE__ */ GenericTag("effect/Console");
  defaultConsole = {
    [TypeId14]: TypeId14,
    assert(condition, ...args) {
      return sync(() => {
        console.assert(condition, ...args);
      });
    },
    clear: /* @__PURE__ */ sync(() => {
      console.clear();
    }),
    count(label) {
      return sync(() => {
        console.count(label);
      });
    },
    countReset(label) {
      return sync(() => {
        console.countReset(label);
      });
    },
    debug(...args) {
      return sync(() => {
        console.debug(...args);
      });
    },
    dir(item, options) {
      return sync(() => {
        console.dir(item, options);
      });
    },
    dirxml(...args) {
      return sync(() => {
        console.dirxml(...args);
      });
    },
    error(...args) {
      return sync(() => {
        console.error(...args);
      });
    },
    group(options) {
      return options?.collapsed ? sync(() => console.groupCollapsed(options?.label)) : sync(() => console.group(options?.label));
    },
    groupEnd: /* @__PURE__ */ sync(() => {
      console.groupEnd();
    }),
    info(...args) {
      return sync(() => {
        console.info(...args);
      });
    },
    log(...args) {
      return sync(() => {
        console.log(...args);
      });
    },
    table(tabularData, properties) {
      return sync(() => {
        console.table(tabularData, properties);
      });
    },
    time(label) {
      return sync(() => console.time(label));
    },
    timeEnd(label) {
      return sync(() => console.timeEnd(label));
    },
    timeLog(label, ...args) {
      return sync(() => {
        console.timeLog(label, ...args);
      });
    },
    trace(...args) {
      return sync(() => {
        console.trace(...args);
      });
    },
    warn(...args) {
      return sync(() => {
        console.warn(...args);
      });
    },
    unsafe: console
  };
});

// node_modules/effect/dist/esm/internal/random.js
var RandomSymbolKey = "effect/Random", RandomTypeId, randomTag, RandomImpl, shuffleWith = (elements, nextIntBounded) => {
  return suspend(() => pipe(sync(() => Array.from(elements)), flatMap12((buffer) => {
    const numbers = [];
    for (let i2 = buffer.length;i2 >= 2; i2 = i2 - 1) {
      numbers.push(i2);
    }
    return pipe(numbers, forEachSequentialDiscard((n) => pipe(nextIntBounded(n), map14((k) => swap2(buffer, n - 1, k)))), as3(fromIterable3(buffer)));
  })));
}, swap2 = (buffer, index1, index2) => {
  const tmp = buffer[index1];
  buffer[index1] = buffer[index2];
  buffer[index2] = tmp;
  return buffer;
}, make30 = (seed) => new RandomImpl(hash(seed));
var init_random = __esm(() => {
  init_Chunk();
  init_Context();
  init_Function();
  init_Hash();
  init_Utils();
  init_core();
  RandomTypeId = /* @__PURE__ */ Symbol.for(RandomSymbolKey);
  randomTag = /* @__PURE__ */ GenericTag("effect/Random");
  RandomImpl = class RandomImpl {
    seed;
    [RandomTypeId] = RandomTypeId;
    PRNG;
    constructor(seed) {
      this.seed = seed;
      this.PRNG = new PCGRandom(seed);
    }
    get next() {
      return sync(() => this.PRNG.number());
    }
    get nextBoolean() {
      return map14(this.next, (n) => n > 0.5);
    }
    get nextInt() {
      return sync(() => this.PRNG.integer(Number.MAX_SAFE_INTEGER));
    }
    nextRange(min7, max8) {
      return map14(this.next, (n) => (max8 - min7) * n + min7);
    }
    nextIntBetween(min7, max8) {
      return sync(() => this.PRNG.integer(max8 - min7) + min7);
    }
    shuffle(elements) {
      return shuffleWith(elements, (n) => this.nextIntBetween(0, n));
    }
  };
});

// node_modules/effect/dist/esm/internal/tracer.js
class NativeSpan {
  name;
  parent;
  context;
  startTime;
  kind;
  _tag = "Span";
  spanId;
  traceId = "native";
  sampled = true;
  status;
  attributes;
  events = [];
  links;
  constructor(name, parent, context3, links, startTime, kind) {
    this.name = name;
    this.parent = parent;
    this.context = context3;
    this.startTime = startTime;
    this.kind = kind;
    this.status = {
      _tag: "Started",
      startTime
    };
    this.attributes = new Map;
    this.traceId = parent._tag === "Some" ? parent.value.traceId : randomHexString(32);
    this.spanId = randomHexString(16);
    this.links = Array.from(links);
  }
  end(endTime, exit2) {
    this.status = {
      _tag: "Ended",
      endTime,
      exit: exit2,
      startTime: this.status.startTime
    };
  }
  attribute(key, value) {
    this.attributes.set(key, value);
  }
  event(name, startTime, attributes) {
    this.events.push([name, startTime, attributes ?? {}]);
  }
  addLinks(links) {
    this.links.push(...links);
  }
}
var TracerTypeId, make31 = (options) => ({
  [TracerTypeId]: TracerTypeId,
  ...options
}), tracerTag, spanTag, randomHexString, nativeTracer, externalSpan = (options) => ({
  _tag: "ExternalSpan",
  spanId: options.spanId,
  traceId: options.traceId,
  sampled: options.sampled ?? true,
  context: options.context ?? empty6()
}), addSpanStackTrace = (options) => {
  if (options?.captureStackTrace === false) {
    return options;
  } else if (options?.captureStackTrace !== undefined && typeof options.captureStackTrace !== "boolean") {
    return options;
  }
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 3;
  const traceError = new Error;
  Error.stackTraceLimit = limit;
  let cache = false;
  return {
    ...options,
    captureStackTrace: () => {
      if (cache !== false) {
        return cache;
      }
      if (traceError.stack !== undefined) {
        const stack = traceError.stack.split(`
`);
        if (stack[3] !== undefined) {
          cache = stack[3].trim();
          return cache;
        }
      }
    }
  };
}, DisablePropagation;
var init_tracer = __esm(() => {
  init_Context();
  init_Function();
  TracerTypeId = /* @__PURE__ */ Symbol.for("effect/Tracer");
  tracerTag = /* @__PURE__ */ GenericTag("effect/Tracer");
  spanTag = /* @__PURE__ */ GenericTag("effect/ParentSpan");
  randomHexString = /* @__PURE__ */ function() {
    const characters = "abcdef0123456789";
    const charactersLength = characters.length;
    return function(length4) {
      let result2 = "";
      for (let i2 = 0;i2 < length4; i2++) {
        result2 += characters.charAt(Math.floor(Math.random() * charactersLength));
      }
      return result2;
    };
  }();
  nativeTracer = /* @__PURE__ */ make31({
    span: (name, parent, context3, links, startTime, kind) => new NativeSpan(name, parent, context3, links, startTime, kind),
    context: (f) => f()
  });
  DisablePropagation = /* @__PURE__ */ Reference2()("effect/Tracer/DisablePropagation", {
    defaultValue: constFalse
  });
});

// node_modules/effect/dist/esm/internal/defaultServices.js
var liveServices, currentServices, sleep = (duration) => {
  const decodedDuration = decode(duration);
  return clockWith((clock) => clock.sleep(decodedDuration));
}, defaultServicesWith = (f) => withFiberRuntime((fiber) => f(fiber.currentDefaultServices)), clockWith = (f) => defaultServicesWith((services) => f(services.unsafeMap.get(clockTag.key))), currentTimeMillis, currentTimeNanos, withClock, withConfigProvider, configProviderWith = (f) => defaultServicesWith((services) => f(services.unsafeMap.get(configProviderTag.key))), config = (config2) => configProviderWith((_) => _.load(config2)), randomWith = (f) => defaultServicesWith((services) => f(services.unsafeMap.get(randomTag.key))), withRandom, next, nextInt, nextBoolean, nextRange = (min7, max8) => randomWith((random2) => random2.nextRange(min7, max8)), nextIntBetween = (min7, max8) => randomWith((random2) => random2.nextIntBetween(min7, max8)), shuffle = (elements) => randomWith((random2) => random2.shuffle(elements)), choice = (elements) => {
  const array5 = fromIterable2(elements);
  return map14(array5.length === 0 ? fail2(new NoSuchElementException("Cannot select a random element from an empty array")) : randomWith((random2) => random2.nextIntBetween(0, array5.length)), (i2) => array5[i2]);
}, tracerWith = (f) => defaultServicesWith((services) => f(services.unsafeMap.get(tracerTag.key))), withTracer;
var init_defaultServices = __esm(() => {
  init_Array();
  init_Context();
  init_Duration();
  init_Function();
  init_GlobalValue();
  init_clock();
  init_configProvider();
  init_core();
  init_console();
  init_random();
  init_tracer();
  liveServices = /* @__PURE__ */ pipe(/* @__PURE__ */ empty6(), /* @__PURE__ */ add2(clockTag, /* @__PURE__ */ make28()), /* @__PURE__ */ add2(consoleTag, defaultConsole), /* @__PURE__ */ add2(randomTag, /* @__PURE__ */ make30(/* @__PURE__ */ Math.random())), /* @__PURE__ */ add2(configProviderTag, /* @__PURE__ */ fromEnv()), /* @__PURE__ */ add2(tracerTag, nativeTracer));
  currentServices = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/DefaultServices/currentServices"), () => fiberRefUnsafeMakeContext(liveServices));
  currentTimeMillis = /* @__PURE__ */ clockWith((clock) => clock.currentTimeMillis);
  currentTimeNanos = /* @__PURE__ */ clockWith((clock) => clock.currentTimeNanos);
  withClock = /* @__PURE__ */ dual(2, (effect, c) => fiberRefLocallyWith(currentServices, add2(clockTag, c))(effect));
  withConfigProvider = /* @__PURE__ */ dual(2, (self, provider) => fiberRefLocallyWith(currentServices, add2(configProviderTag, provider))(self));
  withRandom = /* @__PURE__ */ dual(2, (effect, value) => fiberRefLocallyWith(currentServices, add2(randomTag, value))(effect));
  next = /* @__PURE__ */ randomWith((random2) => random2.next);
  nextInt = /* @__PURE__ */ randomWith((random2) => random2.nextInt);
  nextBoolean = /* @__PURE__ */ randomWith((random2) => random2.nextBoolean);
  withTracer = /* @__PURE__ */ dual(2, (effect, value) => fiberRefLocallyWith(currentServices, add2(tracerTag, value))(effect));
});

// node_modules/effect/dist/esm/Clock.js
var exports_Clock = {};
__export(exports_Clock, {
  sleep: () => sleep2,
  make: () => make32,
  currentTimeNanos: () => currentTimeNanos2,
  currentTimeMillis: () => currentTimeMillis2,
  clockWith: () => clockWith2,
  ClockTypeId: () => ClockTypeId2,
  Clock: () => Clock
});
var ClockTypeId2, make32, sleep2, currentTimeMillis2, currentTimeNanos2, clockWith2, Clock;
var init_Clock = __esm(() => {
  init_clock();
  init_defaultServices();
  ClockTypeId2 = ClockTypeId;
  make32 = make28;
  sleep2 = sleep;
  currentTimeMillis2 = currentTimeMillis;
  currentTimeNanos2 = currentTimeNanos;
  clockWith2 = clockWith;
  Clock = clockTag;
});

// node_modules/effect/dist/esm/internal/fiberRefs.js
function unsafeMake5(fiberRefLocals) {
  return new FiberRefsImpl(fiberRefLocals);
}
function empty26() {
  return unsafeMake5(new Map);
}
var FiberRefsSym, FiberRefsImpl, findAncestor = (_ref, _parentStack, _childStack, _childModified = false) => {
  const ref = _ref;
  let parentStack = _parentStack;
  let childStack = _childStack;
  let childModified = _childModified;
  let ret = undefined;
  while (ret === undefined) {
    if (isNonEmptyReadonlyArray(parentStack) && isNonEmptyReadonlyArray(childStack)) {
      const parentFiberId = headNonEmpty(parentStack)[0];
      const parentAncestors = tailNonEmpty(parentStack);
      const childFiberId = headNonEmpty(childStack)[0];
      const childRefValue = headNonEmpty(childStack)[1];
      const childAncestors = tailNonEmpty(childStack);
      if (parentFiberId.startTimeMillis < childFiberId.startTimeMillis) {
        childStack = childAncestors;
        childModified = true;
      } else if (parentFiberId.startTimeMillis > childFiberId.startTimeMillis) {
        parentStack = parentAncestors;
      } else {
        if (parentFiberId.id < childFiberId.id) {
          childStack = childAncestors;
          childModified = true;
        } else if (parentFiberId.id > childFiberId.id) {
          parentStack = parentAncestors;
        } else {
          ret = [childRefValue, childModified];
        }
      }
    } else {
      ret = [ref.initial, true];
    }
  }
  return ret;
}, joinAs, forkAs, unsafeForkAs = (self, map16, fiberId2) => {
  self.locals.forEach((stack, fiberRef) => {
    const oldValue = stack[0][1];
    const newValue = fiberRef.patch(fiberRef.fork)(oldValue);
    if (equals(oldValue, newValue)) {
      map16.set(fiberRef, stack);
    } else {
      map16.set(fiberRef, [[fiberId2, newValue], ...stack]);
    }
  });
}, fiberRefs = (self) => fromIterable6(self.locals.keys()), setAll = (self) => forEachSequentialDiscard(fiberRefs(self), (fiberRef) => fiberRefSet(fiberRef, getOrDefault(self, fiberRef))), delete_, get11, getOrDefault, updateAs, unsafeUpdateAs = (locals, fiberId2, fiberRef, value) => {
  const oldStack = locals.get(fiberRef) ?? [];
  let newStack;
  if (isNonEmptyReadonlyArray(oldStack)) {
    const [currentId, currentValue] = headNonEmpty(oldStack);
    if (currentId[symbol3](fiberId2)) {
      if (equals(currentValue, value)) {
        return;
      } else {
        newStack = [[fiberId2, value], ...oldStack.slice(1)];
      }
    } else {
      newStack = [[fiberId2, value], ...oldStack];
    }
  } else {
    newStack = [[fiberId2, value]];
  }
  locals.set(fiberRef, newStack);
}, updateManyAs;
var init_fiberRefs = __esm(() => {
  init_Array();
  init_Equal();
  init_Function();
  init_HashSet();
  init_Option();
  init_core();
  FiberRefsSym = /* @__PURE__ */ Symbol.for("effect/FiberRefs");
  FiberRefsImpl = class FiberRefsImpl {
    locals;
    [FiberRefsSym] = FiberRefsSym;
    constructor(locals) {
      this.locals = locals;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  joinAs = /* @__PURE__ */ dual(3, (self, fiberId2, that) => {
    const parentFiberRefs = new Map(self.locals);
    that.locals.forEach((childStack, fiberRef) => {
      const childValue = childStack[0][1];
      if (!childStack[0][0][symbol3](fiberId2)) {
        if (!parentFiberRefs.has(fiberRef)) {
          if (equals(childValue, fiberRef.initial)) {
            return;
          }
          parentFiberRefs.set(fiberRef, [[fiberId2, fiberRef.join(fiberRef.initial, childValue)]]);
          return;
        }
        const parentStack = parentFiberRefs.get(fiberRef);
        const [ancestor, wasModified] = findAncestor(fiberRef, parentStack, childStack);
        if (wasModified) {
          const patch9 = fiberRef.diff(ancestor, childValue);
          const oldValue = parentStack[0][1];
          const newValue = fiberRef.join(oldValue, fiberRef.patch(patch9)(oldValue));
          if (!equals(oldValue, newValue)) {
            let newStack;
            const parentFiberId = parentStack[0][0];
            if (parentFiberId[symbol3](fiberId2)) {
              newStack = [[parentFiberId, newValue], ...parentStack.slice(1)];
            } else {
              newStack = [[fiberId2, newValue], ...parentStack];
            }
            parentFiberRefs.set(fiberRef, newStack);
          }
        }
      }
    });
    return new FiberRefsImpl(parentFiberRefs);
  });
  forkAs = /* @__PURE__ */ dual(2, (self, childId) => {
    const map16 = new Map;
    unsafeForkAs(self, map16, childId);
    return new FiberRefsImpl(map16);
  });
  delete_ = /* @__PURE__ */ dual(2, (self, fiberRef) => {
    const locals = new Map(self.locals);
    locals.delete(fiberRef);
    return new FiberRefsImpl(locals);
  });
  get11 = /* @__PURE__ */ dual(2, (self, fiberRef) => {
    if (!self.locals.has(fiberRef)) {
      return none2();
    }
    return some3(headNonEmpty(self.locals.get(fiberRef))[1]);
  });
  getOrDefault = /* @__PURE__ */ dual(2, (self, fiberRef) => pipe(get11(self, fiberRef), getOrElse2(() => fiberRef.initial)));
  updateAs = /* @__PURE__ */ dual(2, (self, {
    fiberId: fiberId2,
    fiberRef,
    value
  }) => {
    if (self.locals.size === 0) {
      return new FiberRefsImpl(new Map([[fiberRef, [[fiberId2, value]]]]));
    }
    const locals = new Map(self.locals);
    unsafeUpdateAs(locals, fiberId2, fiberRef, value);
    return new FiberRefsImpl(locals);
  });
  updateManyAs = /* @__PURE__ */ dual(2, (self, {
    entries: entries3,
    forkAs: forkAs2
  }) => {
    if (self.locals.size === 0) {
      return new FiberRefsImpl(new Map(entries3));
    }
    const locals = new Map(self.locals);
    if (forkAs2 !== undefined) {
      unsafeForkAs(self, locals, forkAs2);
    }
    entries3.forEach(([fiberRef, values7]) => {
      if (values7.length === 1) {
        unsafeUpdateAs(locals, values7[0][0], fiberRef, values7[0][1]);
      } else {
        values7.forEach(([fiberId2, value]) => {
          unsafeUpdateAs(locals, fiberId2, fiberRef, value);
        });
      }
    });
    return new FiberRefsImpl(locals);
  });
});

// node_modules/effect/dist/esm/FiberRefs.js
var exports_FiberRefs = {};
__export(exports_FiberRefs, {
  updateManyAs: () => updateManyAs2,
  updateAs: () => updateAs2,
  unsafeMake: () => unsafeMake6,
  setAll: () => setAll2,
  joinAs: () => joinAs2,
  getOrDefault: () => getOrDefault2,
  get: () => get12,
  forkAs: () => forkAs2,
  fiberRefs: () => fiberRefs2,
  empty: () => empty27,
  delete: () => delete_2,
  FiberRefsSym: () => FiberRefsSym2
});
var FiberRefsSym2, delete_2, fiberRefs2, forkAs2, get12, getOrDefault2, joinAs2, setAll2, updateAs2, updateManyAs2, unsafeMake6, empty27;
var init_FiberRefs = __esm(() => {
  init_fiberRefs();
  FiberRefsSym2 = FiberRefsSym;
  delete_2 = delete_;
  fiberRefs2 = fiberRefs;
  forkAs2 = forkAs;
  get12 = get11;
  getOrDefault2 = getOrDefault;
  joinAs2 = joinAs;
  setAll2 = setAll;
  updateAs2 = updateAs;
  updateManyAs2 = updateManyAs;
  unsafeMake6 = unsafeMake5;
  empty27 = empty26;
});

// node_modules/effect/dist/esm/LogLevel.js
var exports_LogLevel = {};
__export(exports_LogLevel, {
  locally: () => locally,
  lessThanEqual: () => lessThanEqual,
  lessThan: () => lessThan6,
  greaterThanEqual: () => greaterThanEqual,
  greaterThan: () => greaterThan6,
  fromLiteral: () => fromLiteral,
  allLevels: () => allLevels,
  Warning: () => Warning,
  Trace: () => Trace,
  Order: () => Order6,
  None: () => None3,
  Info: () => Info,
  Fatal: () => Fatal,
  Error: () => Error2,
  Debug: () => Debug,
  All: () => All
});
var All, Fatal, Error2, Warning, Info, Debug, Trace, None3, allLevels, locally, Order6, lessThan6, lessThanEqual, greaterThan6, greaterThanEqual, fromLiteral = (literal) => {
  switch (literal) {
    case "All":
      return All;
    case "Debug":
      return Debug;
    case "Error":
      return Error2;
    case "Fatal":
      return Fatal;
    case "Info":
      return Info;
    case "Trace":
      return Trace;
    case "None":
      return None3;
    case "Warning":
      return Warning;
  }
};
var init_LogLevel = __esm(() => {
  init_Function();
  init_core();
  init_Number();
  init_Order();
  All = logLevelAll;
  Fatal = logLevelFatal;
  Error2 = logLevelError;
  Warning = logLevelWarning;
  Info = logLevelInfo;
  Debug = logLevelDebug;
  Trace = logLevelTrace;
  None3 = logLevelNone;
  allLevels = allLogLevels;
  locally = /* @__PURE__ */ dual(2, (use, self) => fiberRefLocally(use, currentLogLevel, self));
  Order6 = /* @__PURE__ */ pipe(Order, /* @__PURE__ */ mapInput3((level) => level.ordinal));
  lessThan6 = /* @__PURE__ */ lessThan(Order6);
  lessThanEqual = /* @__PURE__ */ lessThanOrEqualTo(Order6);
  greaterThan6 = /* @__PURE__ */ greaterThan(Order6);
  greaterThanEqual = /* @__PURE__ */ greaterThanOrEqualTo(Order6);
});

// node_modules/effect/dist/esm/internal/logSpan.js
var make33 = (label, startTime) => ({
  label,
  startTime
}), formatLabel = (key) => key.replace(/[\s="]/g, "_"), render3 = (now) => (self) => {
  const label = formatLabel(self.label);
  return `${label}=${now - self.startTime}ms`;
};

// node_modules/effect/dist/esm/LogSpan.js
var exports_LogSpan = {};
__export(exports_LogSpan, {
  render: () => render4,
  make: () => make34
});
var make34, render4;
var init_LogSpan = __esm(() => {
  make34 = make33;
  render4 = render3;
});

// node_modules/effect/dist/esm/Effectable.js
var exports_Effectable = {};
__export(exports_Effectable, {
  StructuralCommitPrototype: () => StructuralCommitPrototype2,
  StructuralClass: () => StructuralClass,
  StreamTypeId: () => StreamTypeId2,
  SinkTypeId: () => SinkTypeId2,
  EffectTypeId: () => EffectTypeId3,
  EffectPrototype: () => EffectPrototype2,
  CommitPrototype: () => CommitPrototype2,
  Class: () => Class2,
  ChannelTypeId: () => ChannelTypeId2
});
var EffectTypeId3, StreamTypeId2, SinkTypeId2, ChannelTypeId2, EffectPrototype2, CommitPrototype2, StructuralCommitPrototype2, Base2, StructuralBase2, Class2, StructuralClass;
var init_Effectable = __esm(() => {
  init_effectable();
  EffectTypeId3 = EffectTypeId;
  StreamTypeId2 = StreamTypeId;
  SinkTypeId2 = SinkTypeId;
  ChannelTypeId2 = ChannelTypeId;
  EffectPrototype2 = EffectPrototype;
  CommitPrototype2 = CommitPrototype;
  StructuralCommitPrototype2 = StructuralCommitPrototype;
  Base2 = Base;
  StructuralBase2 = StructuralBase;
  Class2 = class Class2 extends Base2 {
  };
  StructuralClass = class StructuralClass extends StructuralBase2 {
  };
});

// node_modules/effect/dist/esm/Readable.js
var exports_Readable = {};
__export(exports_Readable, {
  unwrap: () => unwrap,
  mapEffect: () => mapEffect,
  map: () => map16,
  make: () => make35,
  isReadable: () => isReadable,
  TypeId: () => TypeId15
});
var TypeId15, isReadable = (u) => hasProperty(u, TypeId15), Proto, make35 = (get13) => {
  const self = Object.create(Proto);
  self.get = get13;
  return self;
}, map16, mapEffect, unwrap = (effect) => make35(flatMap12(effect, (s) => s.get));
var init_Readable = __esm(() => {
  init_Function();
  init_core();
  init_Predicate();
  TypeId15 = /* @__PURE__ */ Symbol.for("effect/Readable");
  Proto = {
    [TypeId15]: TypeId15,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  map16 = /* @__PURE__ */ dual(2, (self, f) => make35(map14(self.get, f)));
  mapEffect = /* @__PURE__ */ dual(2, (self, f) => make35(flatMap12(self.get, f)));
});

// node_modules/effect/dist/esm/internal/ref.js
var RefTypeId, refVariance, RefImpl, unsafeMake7 = (value) => new RefImpl(make15(value)), make36 = (value) => sync(() => unsafeMake7(value)), get13 = (self) => self.get, set6, getAndSet2, getAndUpdate2, getAndUpdateSome, setAndGet2, modify7, modifySome, update3, updateAndGet2, updateSome, updateSomeAndGet, unsafeGet7 = (self) => get8(self.ref);
var init_ref = __esm(() => {
  init_Effectable();
  init_Function();
  init_MutableRef();
  init_Option();
  init_Readable();
  init_core();
  RefTypeId = /* @__PURE__ */ Symbol.for("effect/Ref");
  refVariance = {
    _A: (_) => _
  };
  RefImpl = class RefImpl extends Class2 {
    ref;
    commit() {
      return this.get;
    }
    [RefTypeId] = refVariance;
    [TypeId15] = TypeId15;
    constructor(ref) {
      super();
      this.ref = ref;
      this.get = sync(() => get8(this.ref));
    }
    get;
    modify(f) {
      return sync(() => {
        const current = get8(this.ref);
        const [b, a] = f(current);
        if (current !== a) {
          set3(a)(this.ref);
        }
        return b;
      });
    }
  };
  set6 = /* @__PURE__ */ dual(2, (self, value) => self.modify(() => [undefined, value]));
  getAndSet2 = /* @__PURE__ */ dual(2, (self, value) => self.modify((a) => [a, value]));
  getAndUpdate2 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [a, f(a)]));
  getAndUpdateSome = /* @__PURE__ */ dual(2, (self, pf) => self.modify((value) => {
    const option2 = pf(value);
    switch (option2._tag) {
      case "None": {
        return [value, value];
      }
      case "Some": {
        return [value, option2.value];
      }
    }
  }));
  setAndGet2 = /* @__PURE__ */ dual(2, (self, value) => self.modify(() => [value, value]));
  modify7 = /* @__PURE__ */ dual(2, (self, f) => self.modify(f));
  modifySome = /* @__PURE__ */ dual(3, (self, fallback, pf) => self.modify((value) => {
    const option2 = pf(value);
    switch (option2._tag) {
      case "None": {
        return [fallback, value];
      }
      case "Some": {
        return option2.value;
      }
    }
  }));
  update3 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [undefined, f(a)]));
  updateAndGet2 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => {
    const result2 = f(a);
    return [result2, result2];
  }));
  updateSome = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [undefined, match2(f(a), {
    onNone: () => a,
    onSome: (b) => b
  })]));
  updateSomeAndGet = /* @__PURE__ */ dual(2, (self, pf) => self.modify((value) => {
    const option2 = pf(value);
    switch (option2._tag) {
      case "None": {
        return [value, value];
      }
      case "Some": {
        return [option2.value, option2.value];
      }
    }
  }));
});

// node_modules/effect/dist/esm/Ref.js
var exports_Ref = {};
__export(exports_Ref, {
  updateSomeAndGet: () => updateSomeAndGet2,
  updateSome: () => updateSome2,
  updateAndGet: () => updateAndGet3,
  update: () => update4,
  unsafeMake: () => unsafeMake8,
  setAndGet: () => setAndGet3,
  set: () => set7,
  modifySome: () => modifySome2,
  modify: () => modify8,
  make: () => make37,
  getAndUpdateSome: () => getAndUpdateSome2,
  getAndUpdate: () => getAndUpdate3,
  getAndSet: () => getAndSet3,
  get: () => get14,
  RefTypeId: () => RefTypeId2
});
var RefTypeId2, make37, get14, getAndSet3, getAndUpdate3, getAndUpdateSome2, modify8, modifySome2, set7, setAndGet3, update4, updateAndGet3, updateSome2, updateSomeAndGet2, unsafeMake8;
var init_Ref = __esm(() => {
  init_ref();
  RefTypeId2 = RefTypeId;
  make37 = make36;
  get14 = get13;
  getAndSet3 = getAndSet2;
  getAndUpdate3 = getAndUpdate2;
  getAndUpdateSome2 = getAndUpdateSome;
  modify8 = modify7;
  modifySome2 = modifySome;
  set7 = set6;
  setAndGet3 = setAndGet2;
  update4 = update3;
  updateAndGet3 = updateAndGet2;
  updateSome2 = updateSome;
  updateSomeAndGet2 = updateSomeAndGet;
  unsafeMake8 = unsafeMake7;
});

// node_modules/effect/dist/esm/Tracer.js
var exports_Tracer = {};
__export(exports_Tracer, {
  tracerWith: () => tracerWith2,
  make: () => make38,
  externalSpan: () => externalSpan2,
  TracerTypeId: () => TracerTypeId2,
  Tracer: () => Tracer,
  ParentSpan: () => ParentSpan,
  DisablePropagation: () => DisablePropagation2
});
var TracerTypeId2, ParentSpan, Tracer, make38, externalSpan2, tracerWith2, DisablePropagation2;
var init_Tracer = __esm(() => {
  init_defaultServices();
  init_tracer();
  TracerTypeId2 = TracerTypeId;
  ParentSpan = spanTag;
  Tracer = tracerTag;
  make38 = make31;
  externalSpan2 = externalSpan;
  tracerWith2 = tracerWith;
  DisablePropagation2 = DisablePropagation;
});

// node_modules/effect/dist/esm/internal/fiberRefs/patch.js
var OP_EMPTY2 = "Empty", OP_ADD = "Add", OP_REMOVE = "Remove", OP_UPDATE = "Update", OP_AND_THEN = "AndThen", empty28, diff8 = (oldValue, newValue) => {
  const missingLocals = new Map(oldValue.locals);
  let patch9 = empty28;
  for (const [fiberRef, pairs] of newValue.locals.entries()) {
    const newValue2 = headNonEmpty(pairs)[1];
    const old = missingLocals.get(fiberRef);
    if (old !== undefined) {
      const oldValue2 = headNonEmpty(old)[1];
      if (!equals(oldValue2, newValue2)) {
        patch9 = combine12({
          _tag: OP_UPDATE,
          fiberRef,
          patch: fiberRef.diff(oldValue2, newValue2)
        })(patch9);
      }
    } else {
      patch9 = combine12({
        _tag: OP_ADD,
        fiberRef,
        value: newValue2
      })(patch9);
    }
    missingLocals.delete(fiberRef);
  }
  for (const [fiberRef] of missingLocals.entries()) {
    patch9 = combine12({
      _tag: OP_REMOVE,
      fiberRef
    })(patch9);
  }
  return patch9;
}, combine12, patch9;
var init_patch = __esm(() => {
  init_Array();
  init_Equal();
  init_Function();
  init_fiberRefs();
  empty28 = {
    _tag: OP_EMPTY2
  };
  combine12 = /* @__PURE__ */ dual(2, (self, that) => ({
    _tag: OP_AND_THEN,
    first: self,
    second: that
  }));
  patch9 = /* @__PURE__ */ dual(3, (self, fiberId2, oldValue) => {
    let fiberRefs3 = oldValue;
    let patches = of2(self);
    while (isNonEmptyReadonlyArray(patches)) {
      const head6 = headNonEmpty(patches);
      const tail5 = tailNonEmpty(patches);
      switch (head6._tag) {
        case OP_EMPTY2: {
          patches = tail5;
          break;
        }
        case OP_ADD: {
          fiberRefs3 = updateAs(fiberRefs3, {
            fiberId: fiberId2,
            fiberRef: head6.fiberRef,
            value: head6.value
          });
          patches = tail5;
          break;
        }
        case OP_REMOVE: {
          fiberRefs3 = delete_(fiberRefs3, head6.fiberRef);
          patches = tail5;
          break;
        }
        case OP_UPDATE: {
          const value = getOrDefault(fiberRefs3, head6.fiberRef);
          fiberRefs3 = updateAs(fiberRefs3, {
            fiberId: fiberId2,
            fiberRef: head6.fiberRef,
            value: head6.fiberRef.patch(head6.patch)(value)
          });
          patches = tail5;
          break;
        }
        case OP_AND_THEN: {
          patches = prepend2(head6.first)(prepend2(head6.second)(tail5));
          break;
        }
      }
    }
    return fiberRefs3;
  });
});

// node_modules/effect/dist/esm/internal/metric/label.js
var MetricLabelSymbolKey = "effect/MetricLabel", MetricLabelTypeId, MetricLabelImpl, make39 = (key, value) => {
  return new MetricLabelImpl(key, value);
}, isMetricLabel = (u) => hasProperty(u, MetricLabelTypeId);
var init_label = __esm(() => {
  init_Equal();
  init_Hash();
  init_Predicate();
  MetricLabelTypeId = /* @__PURE__ */ Symbol.for(MetricLabelSymbolKey);
  MetricLabelImpl = class MetricLabelImpl {
    key;
    value;
    [MetricLabelTypeId] = MetricLabelTypeId;
    _hash;
    constructor(key, value) {
      this.key = key;
      this.value = value;
      this._hash = string2(MetricLabelSymbolKey + this.key + this.value);
    }
    [symbol2]() {
      return this._hash;
    }
    [symbol3](that) {
      return isMetricLabel(that) && this.key === that.key && this.value === that.value;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
});

// node_modules/effect/dist/esm/internal/core-effect.js
var annotateLogs, asSome = (self) => map14(self, some3), asSomeError = (self) => mapError(self, some3), try_2 = (arg) => {
  let evaluate;
  let onFailure = undefined;
  if (typeof arg === "function") {
    evaluate = arg;
  } else {
    evaluate = arg.try;
    onFailure = arg.catch;
  }
  return suspend(() => {
    try {
      return succeed(internalCall(evaluate));
    } catch (error2) {
      return fail2(onFailure ? internalCall(() => onFailure(error2)) : new UnknownException(error2, "An unknown error occurred in Effect.try"));
    }
  });
}, _catch, catchAllDefect, catchSomeCause, catchSomeDefect, catchTag, catchTags, cause = (self) => matchCause(self, {
  onFailure: identity,
  onSuccess: () => empty22
}), clockWith3, clock, delay, descriptorWith = (f) => withFiberRuntime((state, status) => f({
  id: state.id(),
  status,
  interruptors: interruptors(state.getFiberRef(currentInterruptedCause))
})), allowInterrupt, descriptor, diffFiberRefs = (self) => summarized(self, fiberRefs3, diff8), diffFiberRefsAndRuntimeFlags = (self) => summarized(self, zip5(fiberRefs3, runtimeFlags), ([refs, flags], [refsNew, flagsNew]) => [diff8(refs, refsNew), diff7(flags, flagsNew)]), Do4, bind5, bindTo5, let_5, dropUntil, dropWhile3, contextWith = (f) => map14(context2(), f), eventually = (self) => orElse3(self, () => flatMap12(yieldNow(), () => eventually(self))), filterMap9, filterOrDie, filterOrDieMessage, filterOrElse, liftPredicate4, filterOrFail, findFirst7, findLoop = (iterator, index, f, value) => flatMap12(f(value, index), (result2) => {
  if (result2) {
    return succeed(some3(value));
  }
  const next2 = iterator.next();
  if (!next2.done) {
    return findLoop(iterator, index + 1, f, next2.value);
  }
  return succeed(none2());
}), firstSuccessOf = (effects) => suspend(() => {
  const list = fromIterable3(effects);
  if (!isNonEmpty2(list)) {
    return dieSync(() => new IllegalArgumentException(`Received an empty collection of effects`));
  }
  return pipe(tailNonEmpty2(list), reduce3(headNonEmpty2(list), (left3, right3) => orElse3(left3, () => right3)));
}), flipWith, match8, every11, forAllLoop = (iterator, index, f) => {
  const next2 = iterator.next();
  return next2.done ? succeed(true) : flatMap12(f(next2.value, index), (b) => b ? forAllLoop(iterator, index + 1, f) : succeed(b));
}, forever = (self) => {
  const loop = flatMap12(flatMap12(self, () => yieldNow()), () => loop);
  return loop;
}, fiberRefs3, head6 = (self) => flatMap12(self, (as5) => {
  const iterator = as5[Symbol.iterator]();
  const next2 = iterator.next();
  if (next2.done) {
    return fail2(new NoSuchElementException);
  }
  return succeed(next2.value);
}), ignore = (self) => match8(self, {
  onFailure: constVoid,
  onSuccess: constVoid
}), ignoreLogged = (self) => matchCauseEffect(self, {
  onFailure: (cause2) => logDebug(cause2, "An error was silently ignored because it is not anticipated to be useful"),
  onSuccess: () => void_3
}), inheritFiberRefs = (childFiberRefs) => updateFiberRefs((parentFiberId, parentFiberRefs) => joinAs2(parentFiberRefs, parentFiberId, childFiberRefs)), isFailure3 = (self) => match8(self, {
  onFailure: constTrue,
  onSuccess: constFalse
}), isSuccess2 = (self) => match8(self, {
  onFailure: constFalse,
  onSuccess: constTrue
}), iterate = (initial, options) => suspend(() => {
  if (options.while(initial)) {
    return flatMap12(options.body(initial), (z2) => iterate(z2, options));
  }
  return succeed(initial);
}), logWithLevel = (level) => (...message) => {
  const levelOption = fromNullable2(level);
  let cause2 = undefined;
  for (let i2 = 0, len = message.length;i2 < len; i2++) {
    const msg = message[i2];
    if (isCause(msg)) {
      if (cause2 !== undefined) {
        cause2 = sequential(cause2, msg);
      } else {
        cause2 = msg;
      }
      message = [...message.slice(0, i2), ...message.slice(i2 + 1)];
      i2--;
    }
  }
  if (cause2 === undefined) {
    cause2 = empty22;
  }
  return withFiberRuntime((fiberState) => {
    fiberState.log(message, cause2, levelOption);
    return void_3;
  });
}, log, logTrace, logDebug, logInfo, logWarning, logError, logFatal, withLogSpan, logAnnotations, loop = (initial, options) => options.discard ? loopDiscard(initial, options.while, options.step, options.body) : map14(loopInternal(initial, options.while, options.step, options.body), fromIterable2), loopInternal = (initial, cont, inc, body) => suspend(() => cont(initial) ? flatMap12(body(initial), (a) => map14(loopInternal(inc(initial), cont, inc, body), prepend4(a))) : sync(() => empty12())), loopDiscard = (initial, cont, inc, body) => suspend(() => cont(initial) ? flatMap12(body(initial), () => loopDiscard(inc(initial), cont, inc, body)) : void_3), mapAccum3, mapErrorCause2, memoize = (self) => pipe(deferredMake(), flatMap12((deferred) => pipe(diffFiberRefsAndRuntimeFlags(self), intoDeferred(deferred), once, map14((complete2) => zipRight2(complete2, pipe(deferredAwait(deferred), flatMap12(([patch10, a]) => as3(zip5(patchFiberRefs(patch10[0]), updateRuntimeFlags(patch10[1])), a)))))))), merge5 = (self) => matchEffect(self, {
  onFailure: (e) => succeed(e),
  onSuccess: succeed
}), negate3 = (self) => map14(self, (b) => !b), none6 = (self) => flatMap12(self, (option2) => {
  switch (option2._tag) {
    case "None":
      return void_3;
    case "Some":
      return fail2(new NoSuchElementException);
  }
}), once = (self) => map14(make37(true), (ref) => asVoid2(whenEffect(self, getAndSet3(ref, false)))), option2 = (self) => matchEffect(self, {
  onFailure: () => succeed(none2()),
  onSuccess: (a) => succeed(some3(a))
}), orElseFail, orElseSucceed, parallelErrors = (self) => matchCauseEffect(self, {
  onFailure: (cause2) => {
    const errors2 = fromIterable2(failures(cause2));
    return errors2.length === 0 ? failCause(cause2) : fail2(errors2);
  },
  onSuccess: succeed
}), patchFiberRefs = (patch10) => updateFiberRefs((fiberId2, fiberRefs4) => pipe(patch10, patch9(fiberId2, fiberRefs4))), promise = (evaluate) => evaluate.length >= 1 ? async_((resolve, signal) => {
  try {
    evaluate(signal).then((a) => resolve(exitSucceed(a)), (e) => resolve(exitDie(e)));
  } catch (e) {
    resolve(exitDie(e));
  }
}) : async_((resolve) => {
  try {
    evaluate().then((a) => resolve(exitSucceed(a)), (e) => resolve(exitDie(e)));
  } catch (e) {
    resolve(exitDie(e));
  }
}), provideService, provideServiceEffect, random2, reduce12, reduceRight4, reduceWhile, reduceWhileLoop = (iterator, index, state, predicate, f) => {
  const next2 = iterator.next();
  if (!next2.done && predicate(state)) {
    return flatMap12(f(state, next2.value, index), (nextState) => reduceWhileLoop(iterator, index + 1, nextState, predicate, f));
  }
  return succeed(state);
}, repeatN, repeatNLoop = (self, n) => flatMap12(self, (a) => n <= 0 ? succeed(a) : zipRight2(yieldNow(), repeatNLoop(self, n - 1))), sandbox = (self) => matchCauseEffect(self, {
  onFailure: fail2,
  onSuccess: succeed
}), setFiberRefs = (fiberRefs4) => suspend(() => setAll2(fiberRefs4)), sleep3, succeedNone, succeedSome = (value) => succeed(some3(value)), summarized, tagMetrics, labelMetrics, takeUntil, takeWhile4, tapBoth, tapDefect, tapError, tapErrorTag, tapErrorCause, timed = (self) => timedWith(self, currentTimeNanos2), timedWith, tracerWith3, tracer, tryPromise = (arg) => {
  let evaluate;
  let catcher = undefined;
  if (typeof arg === "function") {
    evaluate = arg;
  } else {
    evaluate = arg.try;
    catcher = arg.catch;
  }
  const fail5 = (e) => catcher ? failSync(() => catcher(e)) : fail2(new UnknownException(e, "An unknown error occurred in Effect.tryPromise"));
  if (evaluate.length >= 1) {
    return async_((resolve, signal) => {
      try {
        evaluate(signal).then((a) => resolve(exitSucceed(a)), (e) => resolve(fail5(e)));
      } catch (e) {
        resolve(fail5(e));
      }
    });
  }
  return async_((resolve) => {
    try {
      evaluate().then((a) => resolve(exitSucceed(a)), (e) => resolve(fail5(e)));
    } catch (e) {
      resolve(fail5(e));
    }
  });
}, tryMap, tryMapPromise, unless, unlessEffect, unsandbox = (self) => mapErrorCause2(self, flatten7), updateFiberRefs = (f) => withFiberRuntime((state) => {
  state.setFiberRefs(f(state.id(), state.getFiberRefs()));
  return void_3;
}), updateService, when, whenFiberRef, whenRef, withMetric, serviceFunctionEffect = (getService, f) => (...args) => flatMap12(getService, (a) => f(a)(...args)), serviceFunction = (getService, f) => (...args) => map14(getService, (a) => f(a)(...args)), serviceFunctions = (getService) => new Proxy({}, {
  get(_target, prop, _receiver) {
    return (...args) => flatMap12(getService, (s) => s[prop](...args));
  }
}), serviceConstants = (getService) => new Proxy({}, {
  get(_target, prop, _receiver) {
    return flatMap12(getService, (s) => isEffect(s[prop]) ? s[prop] : succeed(s[prop]));
  }
}), serviceMembers = (getService) => ({
  functions: serviceFunctions(getService),
  constants: serviceConstants(getService)
}), serviceOption = (tag) => map14(context2(), getOption2(tag)), serviceOptional = (tag) => flatMap12(context2(), getOption2(tag)), annotateCurrentSpan = function() {
  const args = arguments;
  return ignore(flatMap12(currentSpan, (span2) => sync(() => {
    if (typeof args[0] === "string") {
      span2.attribute(args[0], args[1]);
    } else {
      for (const key in args[0]) {
        span2.attribute(key, args[0][key]);
      }
    }
  })));
}, linkSpanCurrent = function() {
  const args = arguments;
  const links = Array.isArray(args[0]) ? args[0] : [{
    _tag: "SpanLink",
    span: args[0],
    attributes: args[1] ?? {}
  }];
  return ignore(flatMap12(currentSpan, (span2) => sync(() => span2.addLinks(links))));
}, annotateSpans, currentParentSpan, currentSpan, linkSpans, bigint04, filterDisablePropagation, unsafeMakeSpan = (fiber, name, options) => {
  const disablePropagation = !fiber.getFiberRef(currentTracerEnabled) || options.context && get5(options.context, DisablePropagation);
  const context3 = fiber.getFiberRef(currentContext);
  const parent = options.parent ? some3(options.parent) : options.root ? none2() : filterDisablePropagation(getOption2(context3, spanTag));
  let span2;
  if (disablePropagation) {
    span2 = noopSpan({
      name,
      parent,
      context: add2(options.context ?? empty6(), DisablePropagation, true)
    });
  } else {
    const services = fiber.getFiberRef(currentServices);
    const tracer2 = get5(services, tracerTag);
    const clock2 = get5(services, Clock);
    const timingEnabled = fiber.getFiberRef(currentTracerTimingEnabled);
    const fiberRefs4 = fiber.getFiberRefs();
    const annotationsFromEnv = get12(fiberRefs4, currentTracerSpanAnnotations);
    const linksFromEnv = get12(fiberRefs4, currentTracerSpanLinks);
    const links = linksFromEnv._tag === "Some" ? options.links !== undefined ? [...toReadonlyArray(linksFromEnv.value), ...options.links ?? []] : toReadonlyArray(linksFromEnv.value) : options.links ?? empty4();
    span2 = tracer2.span(name, parent, options.context ?? empty6(), links, timingEnabled ? clock2.unsafeCurrentTimeNanos() : bigint04, options.kind ?? "internal");
    if (annotationsFromEnv._tag === "Some") {
      forEach7(annotationsFromEnv.value, (value, key) => span2.attribute(key, value));
    }
    if (options.attributes !== undefined) {
      Object.entries(options.attributes).forEach(([k, v]) => span2.attribute(k, v));
    }
  }
  if (typeof options.captureStackTrace === "function") {
    spanToTrace.set(span2, options.captureStackTrace);
  }
  return span2;
}, makeSpan = (name, options) => {
  options = addSpanStackTrace(options);
  return withFiberRuntime((fiber) => succeed(unsafeMakeSpan(fiber, name, options)));
}, spanAnnotations, spanLinks, endSpan = (span2, exit2, clock2, timingEnabled) => sync(() => {
  if (span2.status._tag === "Ended") {
    return;
  }
  if (exitIsFailure(exit2) && spanToTrace.has(span2)) {
    span2.attribute("code.stacktrace", spanToTrace.get(span2)());
  }
  span2.end(timingEnabled ? clock2.unsafeCurrentTimeNanos() : bigint04, exit2);
}), useSpan = (name, ...args) => {
  const options = addSpanStackTrace(args.length === 1 ? undefined : args[0]);
  const evaluate = args[args.length - 1];
  return withFiberRuntime((fiber) => {
    const span2 = unsafeMakeSpan(fiber, name, options);
    const timingEnabled = fiber.getFiberRef(currentTracerTimingEnabled);
    const clock2 = get5(fiber.getFiberRef(currentServices), clockTag);
    return onExit(evaluate(span2), (exit2) => endSpan(span2, exit2, clock2, timingEnabled));
  });
}, withParentSpan, withSpan = function() {
  const dataFirst = typeof arguments[0] !== "string";
  const name = dataFirst ? arguments[1] : arguments[0];
  const options = addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]);
  if (dataFirst) {
    const self = arguments[0];
    return useSpan(name, options, (span2) => withParentSpan(self, span2));
  }
  return (self) => useSpan(name, options, (span2) => withParentSpan(self, span2));
}, functionWithSpan = (options) => function() {
  let captureStackTrace = options.captureStackTrace ?? false;
  if (options.captureStackTrace !== false) {
    const limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 2;
    const error2 = new Error;
    Error.stackTraceLimit = limit;
    let cache = false;
    captureStackTrace = () => {
      if (cache !== false) {
        return cache;
      }
      if (error2.stack) {
        const stack = error2.stack.trim().split(`
`);
        cache = stack.slice(2).join(`
`).trim();
        return cache;
      }
    };
  }
  return suspend(() => {
    const opts = typeof options.options === "function" ? options.options.apply(null, arguments) : options.options;
    return withSpan(suspend(() => internalCall(() => options.body.apply(this, arguments))), opts.name, {
      ...opts,
      captureStackTrace
    });
  });
}, fromNullable4 = (value) => value == null ? fail2(new NoSuchElementException) : succeed(value), optionFromOptional = (self) => catchAll(map14(self, some3), (error2) => isNoSuchElementException(error2) ? succeedNone : fail2(error2));
var init_core_effect = __esm(() => {
  init_Array();
  init_Chunk();
  init_Clock();
  init_Context();
  init_Duration();
  init_FiberRefs();
  init_Function();
  init_HashMap();
  init_HashSet();
  init_List();
  init_LogLevel();
  init_LogSpan();
  init_Option();
  init_Predicate();
  init_Ref();
  init_Tracer();
  init_Utils();
  init_cause();
  init_clock();
  init_core();
  init_defaultServices();
  init_doNotation();
  init_patch();
  init_label();
  init_runtimeFlags();
  init_tracer();
  annotateLogs = /* @__PURE__ */ dual((args) => isEffect(args[0]), function() {
    const args = arguments;
    return fiberRefLocallyWith(args[0], currentLogAnnotations, typeof args[1] === "string" ? set4(args[1], args[2]) : (annotations2) => Object.entries(args[1]).reduce((acc, [key, value]) => set4(acc, key, value), annotations2));
  });
  _catch = /* @__PURE__ */ dual(3, (self, tag, options) => catchAll(self, (e) => {
    if (hasProperty(e, tag) && e[tag] === options.failure) {
      return options.onFailure(e);
    }
    return fail2(e);
  }));
  catchAllDefect = /* @__PURE__ */ dual(2, (self, f) => catchAllCause(self, (cause) => {
    const option2 = find(cause, (_) => isDieType(_) ? some3(_) : none2());
    switch (option2._tag) {
      case "None": {
        return failCause(cause);
      }
      case "Some": {
        return f(option2.value.defect);
      }
    }
  }));
  catchSomeCause = /* @__PURE__ */ dual(2, (self, f) => matchCauseEffect(self, {
    onFailure: (cause) => {
      const option2 = f(cause);
      switch (option2._tag) {
        case "None": {
          return failCause(cause);
        }
        case "Some": {
          return option2.value;
        }
      }
    },
    onSuccess: succeed
  }));
  catchSomeDefect = /* @__PURE__ */ dual(2, (self, pf) => catchAllCause(self, (cause) => {
    const option2 = find(cause, (_) => isDieType(_) ? some3(_) : none2());
    switch (option2._tag) {
      case "None": {
        return failCause(cause);
      }
      case "Some": {
        const optionEffect = pf(option2.value.defect);
        return optionEffect._tag === "Some" ? optionEffect.value : failCause(cause);
      }
    }
  }));
  catchTag = /* @__PURE__ */ dual(3, (self, k, f) => catchIf(self, isTagged(k), f));
  catchTags = /* @__PURE__ */ dual(2, (self, cases) => {
    let keys5;
    return catchIf(self, (e) => {
      keys5 ??= Object.keys(cases);
      return hasProperty(e, "_tag") && isString2(e["_tag"]) && keys5.includes(e["_tag"]);
    }, (e) => cases[e["_tag"]](e));
  });
  clockWith3 = clockWith2;
  clock = /* @__PURE__ */ clockWith3(succeed);
  delay = /* @__PURE__ */ dual(2, (self, duration) => zipRight2(sleep2(duration), self));
  allowInterrupt = /* @__PURE__ */ descriptorWith((descriptor) => size6(descriptor.interruptors) > 0 ? interrupt2 : void_3);
  descriptor = /* @__PURE__ */ descriptorWith(succeed);
  Do4 = /* @__PURE__ */ succeed({});
  bind5 = /* @__PURE__ */ bind(map14, flatMap12);
  bindTo5 = /* @__PURE__ */ bindTo(map14);
  let_5 = /* @__PURE__ */ let_(map14);
  dropUntil = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
    const iterator = elements[Symbol.iterator]();
    const builder = [];
    let next2;
    let dropping = succeed(false);
    let i2 = 0;
    while ((next2 = iterator.next()) && !next2.done) {
      const a = next2.value;
      const index = i2++;
      dropping = flatMap12(dropping, (bool) => {
        if (bool) {
          builder.push(a);
          return succeed(true);
        }
        return predicate(a, index);
      });
    }
    return map14(dropping, () => builder);
  }));
  dropWhile3 = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
    const iterator = elements[Symbol.iterator]();
    const builder = [];
    let next2;
    let dropping = succeed(true);
    let i2 = 0;
    while ((next2 = iterator.next()) && !next2.done) {
      const a = next2.value;
      const index = i2++;
      dropping = flatMap12(dropping, (d) => map14(d ? predicate(a, index) : succeed(false), (b) => {
        if (!b) {
          builder.push(a);
        }
        return b;
      }));
    }
    return map14(dropping, () => builder);
  }));
  filterMap9 = /* @__PURE__ */ dual(2, (elements, pf) => map14(forEachSequential(elements, identity), filterMap4(pf)));
  filterOrDie = /* @__PURE__ */ dual(3, (self, predicate, orDieWith2) => filterOrElse(self, predicate, (a) => dieSync(() => orDieWith2(a))));
  filterOrDieMessage = /* @__PURE__ */ dual(3, (self, predicate, message) => filterOrElse(self, predicate, () => dieMessage(message)));
  filterOrElse = /* @__PURE__ */ dual(3, (self, predicate, orElse5) => flatMap12(self, (a) => predicate(a) ? succeed(a) : orElse5(a)));
  liftPredicate4 = /* @__PURE__ */ dual(3, (self, predicate, orFailWith) => suspend(() => predicate(self) ? succeed(self) : fail2(orFailWith(self))));
  filterOrFail = /* @__PURE__ */ dual((args) => isEffect(args[0]), (self, predicate, orFailWith) => filterOrElse(self, predicate, (a) => orFailWith === undefined ? fail2(new NoSuchElementException) : failSync(() => orFailWith(a))));
  findFirst7 = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
    const iterator = elements[Symbol.iterator]();
    const next2 = iterator.next();
    if (!next2.done) {
      return findLoop(iterator, 0, predicate, next2.value);
    }
    return succeed(none2());
  }));
  flipWith = /* @__PURE__ */ dual(2, (self, f) => flip3(f(flip3(self))));
  match8 = /* @__PURE__ */ dual(2, (self, options) => matchEffect(self, {
    onFailure: (e) => succeed(options.onFailure(e)),
    onSuccess: (a) => succeed(options.onSuccess(a))
  }));
  every11 = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => forAllLoop(elements[Symbol.iterator](), 0, predicate)));
  fiberRefs3 = /* @__PURE__ */ withFiberRuntime((state) => succeed(state.getFiberRefs()));
  log = /* @__PURE__ */ logWithLevel();
  logTrace = /* @__PURE__ */ logWithLevel(Trace);
  logDebug = /* @__PURE__ */ logWithLevel(Debug);
  logInfo = /* @__PURE__ */ logWithLevel(Info);
  logWarning = /* @__PURE__ */ logWithLevel(Warning);
  logError = /* @__PURE__ */ logWithLevel(Error2);
  logFatal = /* @__PURE__ */ logWithLevel(Fatal);
  withLogSpan = /* @__PURE__ */ dual(2, (effect, label) => flatMap12(currentTimeMillis2, (now) => fiberRefLocallyWith(effect, currentLogSpan, prepend4(make34(label, now)))));
  logAnnotations = /* @__PURE__ */ fiberRefGet(currentLogAnnotations);
  mapAccum3 = /* @__PURE__ */ dual(3, (elements, initial, f) => suspend(() => {
    const iterator = elements[Symbol.iterator]();
    const builder = [];
    let result2 = succeed(initial);
    let next2;
    let i2 = 0;
    while (!(next2 = iterator.next()).done) {
      const index = i2++;
      const value = next2.value;
      result2 = flatMap12(result2, (state) => map14(f(state, value, index), ([z2, b]) => {
        builder.push(b);
        return z2;
      }));
    }
    return map14(result2, (z2) => [z2, builder]);
  }));
  mapErrorCause2 = /* @__PURE__ */ dual(2, (self, f) => matchCauseEffect(self, {
    onFailure: (c) => failCauseSync(() => f(c)),
    onSuccess: succeed
  }));
  orElseFail = /* @__PURE__ */ dual(2, (self, evaluate) => orElse3(self, () => failSync(evaluate)));
  orElseSucceed = /* @__PURE__ */ dual(2, (self, evaluate) => orElse3(self, () => sync(evaluate)));
  provideService = /* @__PURE__ */ dual(3, (self, tag, service) => contextWithEffect((env) => provideContext(self, add2(env, tag, service))));
  provideServiceEffect = /* @__PURE__ */ dual(3, (self, tag, effect) => contextWithEffect((env) => flatMap12(effect, (service) => provideContext(self, pipe(env, add2(tag, service))))));
  random2 = /* @__PURE__ */ randomWith(succeed);
  reduce12 = /* @__PURE__ */ dual(3, (elements, zero3, f) => fromIterable2(elements).reduce((acc, el, i2) => flatMap12(acc, (a) => f(a, el, i2)), succeed(zero3)));
  reduceRight4 = /* @__PURE__ */ dual(3, (elements, zero3, f) => fromIterable2(elements).reduceRight((acc, el, i2) => flatMap12(acc, (a) => f(el, a, i2)), succeed(zero3)));
  reduceWhile = /* @__PURE__ */ dual(3, (elements, zero3, options) => flatMap12(sync(() => elements[Symbol.iterator]()), (iterator) => reduceWhileLoop(iterator, 0, zero3, options.while, options.body)));
  repeatN = /* @__PURE__ */ dual(2, (self, n) => suspend(() => repeatNLoop(self, n)));
  sleep3 = sleep2;
  succeedNone = /* @__PURE__ */ succeed(/* @__PURE__ */ none2());
  summarized = /* @__PURE__ */ dual(3, (self, summary, f) => flatMap12(summary, (start) => flatMap12(self, (value) => map14(summary, (end) => [f(start, end), value]))));
  tagMetrics = /* @__PURE__ */ dual((args) => isEffect(args[0]), function() {
    return labelMetrics(arguments[0], typeof arguments[1] === "string" ? [make39(arguments[1], arguments[2])] : Object.entries(arguments[1]).map(([k, v]) => make39(k, v)));
  });
  labelMetrics = /* @__PURE__ */ dual(2, (self, labels) => fiberRefLocallyWith(self, currentMetricLabels, (old) => union2(old, labels)));
  takeUntil = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
    const iterator = elements[Symbol.iterator]();
    const builder = [];
    let next2;
    let effect = succeed(false);
    let i2 = 0;
    while ((next2 = iterator.next()) && !next2.done) {
      const a = next2.value;
      const index = i2++;
      effect = flatMap12(effect, (bool) => {
        if (bool) {
          return succeed(true);
        }
        builder.push(a);
        return predicate(a, index);
      });
    }
    return map14(effect, () => builder);
  }));
  takeWhile4 = /* @__PURE__ */ dual(2, (elements, predicate) => suspend(() => {
    const iterator = elements[Symbol.iterator]();
    const builder = [];
    let next2;
    let taking = succeed(true);
    let i2 = 0;
    while ((next2 = iterator.next()) && !next2.done) {
      const a = next2.value;
      const index = i2++;
      taking = flatMap12(taking, (taking2) => pipe(taking2 ? predicate(a, index) : succeed(false), map14((bool) => {
        if (bool) {
          builder.push(a);
        }
        return bool;
      })));
    }
    return map14(taking, () => builder);
  }));
  tapBoth = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => matchCauseEffect(self, {
    onFailure: (cause2) => {
      const either4 = failureOrCause(cause2);
      switch (either4._tag) {
        case "Left": {
          return zipRight2(onFailure(either4.left), failCause(cause2));
        }
        case "Right": {
          return failCause(cause2);
        }
      }
    },
    onSuccess: (a) => as3(onSuccess(a), a)
  }));
  tapDefect = /* @__PURE__ */ dual(2, (self, f) => catchAllCause(self, (cause2) => match2(keepDefects(cause2), {
    onNone: () => failCause(cause2),
    onSome: (a) => zipRight2(f(a), failCause(cause2))
  })));
  tapError = /* @__PURE__ */ dual(2, (self, f) => matchCauseEffect(self, {
    onFailure: (cause2) => {
      const either4 = failureOrCause(cause2);
      switch (either4._tag) {
        case "Left":
          return zipRight2(f(either4.left), failCause(cause2));
        case "Right":
          return failCause(cause2);
      }
    },
    onSuccess: succeed
  }));
  tapErrorTag = /* @__PURE__ */ dual(3, (self, k, f) => tapError(self, (e) => {
    if (isTagged(e, k)) {
      return f(e);
    }
    return void_3;
  }));
  tapErrorCause = /* @__PURE__ */ dual(2, (self, f) => matchCauseEffect(self, {
    onFailure: (cause2) => zipRight2(f(cause2), failCause(cause2)),
    onSuccess: succeed
  }));
  timedWith = /* @__PURE__ */ dual(2, (self, nanos2) => summarized(self, nanos2, (start, end) => nanos(end - start)));
  tracerWith3 = tracerWith2;
  tracer = /* @__PURE__ */ tracerWith3(succeed);
  tryMap = /* @__PURE__ */ dual(2, (self, options) => flatMap12(self, (a) => try_2({
    try: () => options.try(a),
    catch: options.catch
  })));
  tryMapPromise = /* @__PURE__ */ dual(2, (self, options) => flatMap12(self, (a) => tryPromise({
    try: options.try.length >= 1 ? (signal) => options.try(a, signal) : () => options.try(a),
    catch: options.catch
  })));
  unless = /* @__PURE__ */ dual(2, (self, condition) => suspend(() => condition() ? succeedNone : asSome(self)));
  unlessEffect = /* @__PURE__ */ dual(2, (self, condition) => flatMap12(condition, (b) => b ? succeedNone : asSome(self)));
  updateService = /* @__PURE__ */ dual(3, (self, tag, f) => mapInputContext(self, (context3) => add2(context3, tag, f(unsafeGet3(context3, tag)))));
  when = /* @__PURE__ */ dual(2, (self, condition) => suspend(() => condition() ? map14(self, some3) : succeed(none2())));
  whenFiberRef = /* @__PURE__ */ dual(3, (self, fiberRef, predicate) => flatMap12(fiberRefGet(fiberRef), (s) => predicate(s) ? map14(self, (a) => [s, some3(a)]) : succeed([s, none2()])));
  whenRef = /* @__PURE__ */ dual(3, (self, ref, predicate) => flatMap12(get14(ref), (s) => predicate(s) ? map14(self, (a) => [s, some3(a)]) : succeed([s, none2()])));
  withMetric = /* @__PURE__ */ dual(2, (self, metric) => metric(self));
  annotateSpans = /* @__PURE__ */ dual((args) => isEffect(args[0]), function() {
    const args = arguments;
    return fiberRefLocallyWith(args[0], currentTracerSpanAnnotations, typeof args[1] === "string" ? set4(args[1], args[2]) : (annotations2) => Object.entries(args[1]).reduce((acc, [key, value]) => set4(acc, key, value), annotations2));
  });
  currentParentSpan = /* @__PURE__ */ serviceOptional(spanTag);
  currentSpan = /* @__PURE__ */ flatMap12(/* @__PURE__ */ context2(), (context3) => {
    const span2 = context3.unsafeMap.get(spanTag.key);
    return span2 !== undefined && span2._tag === "Span" ? succeed(span2) : fail2(new NoSuchElementException);
  });
  linkSpans = /* @__PURE__ */ dual((args) => isEffect(args[0]), (self, span2, attributes) => fiberRefLocallyWith(self, currentTracerSpanLinks, append3({
    _tag: "SpanLink",
    span: span2,
    attributes: attributes ?? {}
  })));
  bigint04 = /* @__PURE__ */ BigInt(0);
  filterDisablePropagation = /* @__PURE__ */ flatMap2((span2) => get5(span2.context, DisablePropagation) ? span2._tag === "Span" ? filterDisablePropagation(span2.parent) : none2() : some3(span2));
  spanAnnotations = /* @__PURE__ */ fiberRefGet(currentTracerSpanAnnotations);
  spanLinks = /* @__PURE__ */ fiberRefGet(currentTracerSpanLinks);
  withParentSpan = /* @__PURE__ */ dual(2, (self, span2) => provideService(self, spanTag, span2));
});

// node_modules/effect/dist/esm/internal/executionStrategy.js
var OP_SEQUENTIAL2 = "Sequential", OP_PARALLEL2 = "Parallel", OP_PARALLEL_N = "ParallelN", sequential2, parallel2, parallelN = (parallelism) => ({
  _tag: OP_PARALLEL_N,
  parallelism
}), isSequential = (self) => self._tag === OP_SEQUENTIAL2, isParallel = (self) => self._tag === OP_PARALLEL2, isParallelN = (self) => self._tag === OP_PARALLEL_N, match9;
var init_executionStrategy = __esm(() => {
  init_Function();
  sequential2 = {
    _tag: OP_SEQUENTIAL2
  };
  parallel2 = {
    _tag: OP_PARALLEL2
  };
  match9 = /* @__PURE__ */ dual(2, (self, options) => {
    switch (self._tag) {
      case OP_SEQUENTIAL2: {
        return options.onSequential();
      }
      case OP_PARALLEL2: {
        return options.onParallel();
      }
      case OP_PARALLEL_N: {
        return options.onParallelN(self.parallelism);
      }
    }
  });
});

// node_modules/effect/dist/esm/ExecutionStrategy.js
var exports_ExecutionStrategy = {};
__export(exports_ExecutionStrategy, {
  sequential: () => sequential3,
  parallelN: () => parallelN2,
  parallel: () => parallel3,
  match: () => match10,
  isSequential: () => isSequential2,
  isParallelN: () => isParallelN2,
  isParallel: () => isParallel2
});
var sequential3, parallel3, parallelN2, isSequential2, isParallel2, isParallelN2, match10;
var init_ExecutionStrategy = __esm(() => {
  init_executionStrategy();
  sequential3 = sequential2;
  parallel3 = parallel2;
  parallelN2 = parallelN;
  isSequential2 = isSequential;
  isParallel2 = isParallel;
  isParallelN2 = isParallelN;
  match10 = match9;
});

// node_modules/effect/dist/esm/FiberRefsPatch.js
var exports_FiberRefsPatch = {};
__export(exports_FiberRefsPatch, {
  patch: () => patch10,
  empty: () => empty29,
  diff: () => diff9,
  combine: () => combine13
});
var empty29, diff9, combine13, patch10;
var init_FiberRefsPatch = __esm(() => {
  init_patch();
  empty29 = empty28;
  diff9 = diff8;
  combine13 = combine12;
  patch10 = patch9;
});

// node_modules/effect/dist/esm/internal/fiberStatus.js
var FiberStatusSymbolKey = "effect/FiberStatus", FiberStatusTypeId, OP_DONE = "Done", OP_RUNNING = "Running", OP_SUSPENDED = "Suspended", DoneHash, Done, Running, Suspended, done3, running = (runtimeFlags2) => new Running(runtimeFlags2), suspended = (runtimeFlags2, blockingOn) => new Suspended(runtimeFlags2, blockingOn), isFiberStatus = (u) => hasProperty(u, FiberStatusTypeId), isDone2 = (self) => self._tag === OP_DONE, isRunning = (self) => self._tag === OP_RUNNING, isSuspended = (self) => self._tag === OP_SUSPENDED;
var init_fiberStatus = __esm(() => {
  init_Equal();
  init_Function();
  init_Hash();
  init_Predicate();
  FiberStatusTypeId = /* @__PURE__ */ Symbol.for(FiberStatusSymbolKey);
  DoneHash = /* @__PURE__ */ string2(`${FiberStatusSymbolKey}-${OP_DONE}`);
  Done = class Done {
    [FiberStatusTypeId] = FiberStatusTypeId;
    _tag = OP_DONE;
    [symbol2]() {
      return DoneHash;
    }
    [symbol3](that) {
      return isFiberStatus(that) && that._tag === OP_DONE;
    }
  };
  Running = class Running {
    runtimeFlags;
    [FiberStatusTypeId] = FiberStatusTypeId;
    _tag = OP_RUNNING;
    constructor(runtimeFlags2) {
      this.runtimeFlags = runtimeFlags2;
    }
    [symbol2]() {
      return pipe(hash(FiberStatusSymbolKey), combine2(hash(this._tag)), combine2(hash(this.runtimeFlags)), cached(this));
    }
    [symbol3](that) {
      return isFiberStatus(that) && that._tag === OP_RUNNING && this.runtimeFlags === that.runtimeFlags;
    }
  };
  Suspended = class Suspended {
    runtimeFlags;
    blockingOn;
    [FiberStatusTypeId] = FiberStatusTypeId;
    _tag = OP_SUSPENDED;
    constructor(runtimeFlags2, blockingOn) {
      this.runtimeFlags = runtimeFlags2;
      this.blockingOn = blockingOn;
    }
    [symbol2]() {
      return pipe(hash(FiberStatusSymbolKey), combine2(hash(this._tag)), combine2(hash(this.runtimeFlags)), combine2(hash(this.blockingOn)), cached(this));
    }
    [symbol3](that) {
      return isFiberStatus(that) && that._tag === OP_SUSPENDED && this.runtimeFlags === that.runtimeFlags && equals(this.blockingOn, that.blockingOn);
    }
  };
  done3 = /* @__PURE__ */ new Done;
});

// node_modules/effect/dist/esm/FiberStatus.js
var exports_FiberStatus = {};
__export(exports_FiberStatus, {
  suspended: () => suspended2,
  running: () => running2,
  isSuspended: () => isSuspended2,
  isRunning: () => isRunning2,
  isFiberStatus: () => isFiberStatus2,
  isDone: () => isDone3,
  done: () => done4,
  FiberStatusTypeId: () => FiberStatusTypeId2
});
var FiberStatusTypeId2, done4, running2, suspended2, isFiberStatus2, isDone3, isRunning2, isSuspended2;
var init_FiberStatus = __esm(() => {
  init_fiberStatus();
  FiberStatusTypeId2 = FiberStatusTypeId;
  done4 = done3;
  running2 = running;
  suspended2 = suspended;
  isFiberStatus2 = isFiberStatus;
  isDone3 = isDone2;
  isRunning2 = isRunning;
  isSuspended2 = isSuspended;
});

// node_modules/effect/dist/esm/Micro.js
var exports_Micro = {};
__export(exports_Micro, {
  zipWith: () => zipWith8,
  zip: () => zip7,
  yieldNowWith: () => yieldNowWith,
  yieldNow: () => yieldNow2,
  yieldFlush: () => yieldFlush,
  withTrace: () => withTrace,
  withMicroFiber: () => withMicroFiber,
  withConcurrency: () => withConcurrency2,
  whileLoop: () => whileLoop2,
  when: () => when2,
  void: () => void_5,
  updateService: () => updateService2,
  updateContext: () => updateContext,
  uninterruptibleMask: () => uninterruptibleMask2,
  uninterruptible: () => uninterruptible2,
  tryPromise: () => tryPromise2,
  try: () => try_3,
  timeoutOrElse: () => timeoutOrElse,
  timeoutOption: () => timeoutOption,
  timeout: () => timeout,
  tapErrorCauseIf: () => tapErrorCauseIf,
  tapErrorCause: () => tapErrorCause2,
  tapError: () => tapError2,
  tapDefect: () => tapDefect2,
  tap: () => tap3,
  sync: () => sync3,
  suspend: () => suspend2,
  succeedSome: () => succeedSome2,
  succeedNone: () => succeedNone2,
  succeed: () => succeed4,
  sleep: () => sleep4,
  serviceOption: () => serviceOption2,
  service: () => service,
  scoped: () => scoped,
  scopeUnsafeMake: () => scopeUnsafeMake,
  scopeMake: () => scopeMake,
  scope: () => scope,
  scheduleWithMaxElapsed: () => scheduleWithMaxElapsed,
  scheduleWithMaxDelay: () => scheduleWithMaxDelay,
  scheduleUnion: () => scheduleUnion,
  scheduleSpaced: () => scheduleSpaced,
  scheduleRecurs: () => scheduleRecurs,
  scheduleIntersect: () => scheduleIntersect,
  scheduleExponential: () => scheduleExponential,
  scheduleAddDelay: () => scheduleAddDelay,
  sandbox: () => sandbox2,
  runSyncExit: () => runSyncExit,
  runSync: () => runSync,
  runPromiseExit: () => runPromiseExit,
  runPromise: () => runPromise,
  runFork: () => runFork,
  retry: () => retry,
  replicateEffect: () => replicateEffect,
  replicate: () => replicate3,
  repeatExit: () => repeatExit,
  repeat: () => repeat,
  raceFirst: () => raceFirst,
  raceAllFirst: () => raceAllFirst,
  raceAll: () => raceAll,
  race: () => race,
  provideServiceEffect: () => provideServiceEffect2,
  provideService: () => provideService2,
  provideScope: () => provideScope,
  provideContext: () => provideContext2,
  promise: () => promise2,
  orElseSucceed: () => orElseSucceed2,
  orDie: () => orDie2,
  option: () => option3,
  onInterrupt: () => onInterrupt2,
  onExitIf: () => onExitIf,
  onExit: () => onExit2,
  onError: () => onError2,
  never: () => never2,
  matchEffect: () => matchEffect3,
  matchCauseEffect: () => matchCauseEffect2,
  matchCause: () => matchCause2,
  match: () => match11,
  mapErrorCause: () => mapErrorCause3,
  mapError: () => mapError3,
  map: () => map17,
  let: () => let_6,
  isMicroExit: () => isMicroExit,
  isMicroCause: () => isMicroCause,
  isMicro: () => isMicro,
  interruptible: () => interruptible3,
  interrupt: () => interrupt5,
  ignoreLogged: () => ignoreLogged2,
  ignore: () => ignore2,
  gen: () => gen5,
  fromOption: () => fromOption5,
  fromEither: () => fromEither2,
  forkScoped: () => forkScoped,
  forkIn: () => forkIn,
  forkDaemon: () => forkDaemon,
  fork: () => fork,
  forever: () => forever2,
  forEach: () => forEach11,
  flip: () => flip4,
  flatten: () => flatten10,
  flatMap: () => flatMap14,
  filterOrFailCause: () => filterOrFailCause,
  filterOrFail: () => filterOrFail2,
  filterMap: () => filterMap10,
  filter: () => filter12,
  fiberJoin: () => fiberJoin,
  fiberInterruptAll: () => fiberInterruptAll,
  fiberInterrupt: () => fiberInterrupt,
  fiberAwait: () => fiberAwait,
  failSync: () => failSync3,
  failCauseSync: () => failCauseSync3,
  failCause: () => failCause4,
  fail: () => fail5,
  exitVoidAll: () => exitVoidAll,
  exitVoid: () => exitVoid2,
  exitSucceed: () => exitSucceed2,
  exitIsSuccess: () => exitIsSuccess2,
  exitIsInterrupt: () => exitIsInterrupt,
  exitIsFailure: () => exitIsFailure2,
  exitIsFail: () => exitIsFail,
  exitIsDie: () => exitIsDie,
  exitInterrupt: () => exitInterrupt2,
  exitFailCause: () => exitFailCause2,
  exitFail: () => exitFail2,
  exitDie: () => exitDie2,
  exit: () => exit2,
  ensuring: () => ensuring,
  either: () => either4,
  die: () => die5,
  delay: () => delay2,
  context: () => context3,
  causeWithTrace: () => causeWithTrace,
  causeSquash: () => causeSquash2,
  causeIsInterrupt: () => causeIsInterrupt,
  causeIsFail: () => causeIsFail,
  causeIsDie: () => causeIsDie,
  causeInterrupt: () => causeInterrupt,
  causeFail: () => causeFail,
  causeDie: () => causeDie,
  catchTag: () => catchTag2,
  catchIf: () => catchIf2,
  catchCauseIf: () => catchCauseIf,
  catchAllDefect: () => catchAllDefect2,
  catchAllCause: () => catchAllCause2,
  catchAll: () => catchAll2,
  bindTo: () => bindTo6,
  bind: () => bind6,
  async: () => async,
  asVoid: () => asVoid4,
  asSome: () => asSome2,
  as: () => as5,
  andThen: () => andThen8,
  all: () => all8,
  addFinalizer: () => addFinalizer,
  acquireUseRelease: () => acquireUseRelease2,
  acquireRelease: () => acquireRelease,
  TypeId: () => TypeId16,
  TimeoutException: () => TimeoutException2,
  TaggedError: () => TaggedError,
  NoSuchElementException: () => NoSuchElementException2,
  MicroScopeTypeId: () => MicroScopeTypeId,
  MicroScope: () => MicroScope,
  MicroSchedulerDefault: () => MicroSchedulerDefault,
  MicroFiberTypeId: () => MicroFiberTypeId,
  MicroExitTypeId: () => MicroExitTypeId,
  MicroCauseTypeId: () => MicroCauseTypeId,
  MaxOpsBeforeYield: () => MaxOpsBeforeYield,
  Error: () => Error3,
  Do: () => Do5,
  CurrentScheduler: () => CurrentScheduler,
  CurrentConcurrency: () => CurrentConcurrency
});
function defaultEvaluate(_fiber) {
  return exitDie2(`Micro.evaluate: Not implemented`);
}

class MicroSchedulerDefault {
  tasks = [];
  running = false;
  scheduleTask(task, _priority) {
    this.tasks.push(task);
    if (!this.running) {
      this.running = true;
      setImmediate2(this.afterScheduled);
    }
  }
  afterScheduled = () => {
    this.running = false;
    this.runTasks();
  };
  runTasks() {
    const tasks = this.tasks;
    this.tasks = [];
    for (let i2 = 0, len = tasks.length;i2 < len; i2++) {
      tasks[i2]();
    }
  }
  shouldYield(fiber) {
    return fiber.currentOpCount >= fiber.getRef(MaxOpsBeforeYield);
  }
  flush() {
    while (this.tasks.length > 0) {
      this.runTasks();
    }
  }
}
var TypeId16, MicroExitTypeId, isMicro = (u) => typeof u === "object" && u !== null && (TypeId16 in u), MicroCauseTypeId, isMicroCause = (self) => hasProperty(self, MicroCauseTypeId), microCauseVariance, MicroCauseImpl, Fail, causeFail = (error2, traces = []) => new Fail(error2, traces), Die, causeDie = (defect, traces = []) => new Die(defect, traces), Interrupt, causeInterrupt = (traces = []) => new Interrupt(traces), causeIsFail = (self) => self._tag === "Fail", causeIsDie = (self) => self._tag === "Die", causeIsInterrupt = (self) => self._tag === "Interrupt", causeSquash2 = (self) => self._tag === "Fail" ? self.error : self._tag === "Die" ? self.defect : self, causeWithTrace, MicroFiberTypeId, fiberVariance, MicroFiberImpl, fiberMiddleware, fiberInterruptChildren = (fiber) => {
  if (fiber._children === undefined || fiber._children.size === 0) {
    return;
  }
  return fiberInterruptAll(fiber._children);
}, fiberAwait = (self) => async((resume) => sync3(self.addObserver((exit2) => resume(succeed4(exit2))))), fiberJoin = (self) => flatten10(fiberAwait(self)), fiberInterrupt = (self) => suspend2(() => {
  self.unsafeInterrupt();
  return asVoid4(fiberAwait(self));
}), fiberInterruptAll = (fibers) => suspend2(() => {
  for (const fiber of fibers)
    fiber.unsafeInterrupt();
  const iter = fibers[Symbol.iterator]();
  const wait = suspend2(() => {
    let result2 = iter.next();
    while (!result2.done) {
      if (result2.value.unsafePoll()) {
        result2 = iter.next();
        continue;
      }
      const fiber = result2.value;
      return async((resume) => {
        fiber.addObserver((_) => {
          resume(wait);
        });
      });
    }
    return exitVoid2;
  });
  return wait;
}), identifier, args, evaluate, successCont, failureCont, ensureCont, Yield, microVariance, MicroProto, makePrimitiveProto = (options) => ({
  ...MicroProto,
  [identifier]: options.op,
  [evaluate]: options.eval ?? defaultEvaluate,
  [successCont]: options.contA,
  [failureCont]: options.contE,
  [ensureCont]: options.ensure
}), makePrimitive = (options) => {
  const Proto2 = makePrimitiveProto(options);
  return function() {
    const self = Object.create(Proto2);
    self[args] = options.single === false ? arguments : arguments[0];
    return self;
  };
}, makeExit = (options) => {
  const Proto2 = {
    ...makePrimitiveProto(options),
    [MicroExitTypeId]: MicroExitTypeId,
    _tag: options.op,
    get [options.prop]() {
      return this[args];
    },
    toJSON() {
      return {
        _id: "MicroExit",
        _tag: options.op,
        [options.prop]: this[args]
      };
    },
    [symbol3](that) {
      return isMicroExit(that) && that._tag === options.op && equals(this[args], that[args]);
    },
    [symbol2]() {
      return cached(this, combine2(string2(options.op))(hash(this[args])));
    }
  };
  return function(value) {
    const self = Object.create(Proto2);
    self[args] = value;
    self[successCont] = undefined;
    self[failureCont] = undefined;
    self[ensureCont] = undefined;
    return self;
  };
}, succeed4, failCause4, fail5 = (error2) => failCause4(causeFail(error2)), sync3, suspend2, yieldNowWith, yieldNow2, succeedSome2 = (a) => succeed4(some3(a)), succeedNone2, failCauseSync3 = (evaluate2) => suspend2(() => failCause4(evaluate2())), die5 = (defect) => exitDie2(defect), failSync3 = (error2) => suspend2(() => fail5(error2())), fromOption5 = (option3) => option3._tag === "Some" ? succeed4(option3.value) : fail5(new NoSuchElementException2({})), fromEither2 = (either4) => either4._tag === "Right" ? succeed4(either4.right) : fail5(either4.left), void_5, try_3 = (options) => suspend2(() => {
  try {
    return succeed4(options.try());
  } catch (err2) {
    return fail5(options.catch(err2));
  }
}), promise2 = (evaluate2) => asyncOptions(function(resume, signal) {
  evaluate2(signal).then((a) => resume(succeed4(a)), (e) => resume(die5(e)));
}, evaluate2.length !== 0), tryPromise2 = (options) => asyncOptions(function(resume, signal) {
  try {
    options.try(signal).then((a) => resume(succeed4(a)), (e) => resume(fail5(options.catch(e))));
  } catch (err2) {
    resume(fail5(options.catch(err2)));
  }
}, options.try.length !== 0), withMicroFiber, yieldFlush, asyncOptions, asyncFinalizer, async = (register2) => asyncOptions(register2, register2.length >= 2), never2, gen5 = (...args2) => suspend2(() => fromIterator2(args2.length === 1 ? args2[0]() : args2[1].call(args2[0]))), fromIterator2, as5, asSome2 = (self) => map17(self, some3), flip4 = (self) => matchEffect3(self, {
  onFailure: succeed4,
  onSuccess: fail5
}), andThen8, tap3, asVoid4 = (self) => flatMap14(self, (_) => exitVoid2), exit2 = (self) => matchCause2(self, {
  onFailure: exitFailCause2,
  onSuccess: exitSucceed2
}), sandbox2 = (self) => catchAllCause2(self, fail5), raceAll = (all8) => withMicroFiber((parent) => async((resume) => {
  const effects = fromIterable2(all8);
  const len = effects.length;
  let doneCount = 0;
  let done5 = false;
  const fibers = new Set;
  const causes = [];
  const onExit2 = (exit3) => {
    doneCount++;
    if (exit3._tag === "Failure") {
      causes.push(exit3.cause);
      if (doneCount >= len) {
        resume(failCause4(causes[0]));
      }
      return;
    }
    done5 = true;
    resume(fibers.size === 0 ? exit3 : flatMap14(uninterruptible2(fiberInterruptAll(fibers)), () => exit3));
  };
  for (let i2 = 0;i2 < len; i2++) {
    if (done5)
      break;
    const fiber = unsafeFork(parent, interruptible3(effects[i2]), true, true);
    fibers.add(fiber);
    fiber.addObserver((exit3) => {
      fibers.delete(fiber);
      onExit2(exit3);
    });
  }
  return fiberInterruptAll(fibers);
})), raceAllFirst = (all8) => withMicroFiber((parent) => async((resume) => {
  let done5 = false;
  const fibers = new Set;
  const onExit2 = (exit3) => {
    done5 = true;
    resume(fibers.size === 0 ? exit3 : flatMap14(fiberInterruptAll(fibers), () => exit3));
  };
  for (const effect of all8) {
    if (done5)
      break;
    const fiber = unsafeFork(parent, interruptible3(effect), true, true);
    fibers.add(fiber);
    fiber.addObserver((exit3) => {
      fibers.delete(fiber);
      onExit2(exit3);
    });
  }
  return fiberInterruptAll(fibers);
})), race, raceFirst, flatMap14, OnSuccessProto, flatten10 = (self) => flatMap14(self, identity), map17, isMicroExit = (u) => hasProperty(u, MicroExitTypeId), exitSucceed2, exitFailCause2, exitInterrupt2, exitFail2 = (e) => exitFailCause2(causeFail(e)), exitDie2 = (defect) => exitFailCause2(causeDie(defect)), exitIsSuccess2 = (self) => self._tag === "Success", exitIsFailure2 = (self) => self._tag === "Failure", exitIsInterrupt = (self) => exitIsFailure2(self) && self.cause._tag === "Interrupt", exitIsFail = (self) => exitIsFailure2(self) && self.cause._tag === "Fail", exitIsDie = (self) => exitIsFailure2(self) && self.cause._tag === "Die", exitVoid2, exitVoidAll = (exits) => {
  for (const exit3 of exits) {
    if (exit3._tag === "Failure") {
      return exit3;
    }
  }
  return exitVoid2;
}, setImmediate2, service = (tag) => withMicroFiber((fiber) => succeed4(unsafeGet3(fiber.context, tag))), serviceOption2 = (tag) => withMicroFiber((fiber) => succeed4(getOption2(fiber.context, tag))), updateContext, updateService2, context3 = () => getContext, getContext, provideContext2, provideService2, provideServiceEffect2, MaxOpsBeforeYield, CurrentConcurrency, CurrentScheduler, withConcurrency2, zip7, zipWith8, filterOrFailCause, filterOrFail2, when2, repeatExit, repeat, replicate3, replicateEffect, forever2 = (self) => repeat(self), scheduleRecurs = (n) => (attempt) => attempt <= n ? some3(0) : none2(), scheduleSpaced = (millis2) => () => some3(millis2), scheduleExponential = (baseMillis, factor = 2) => (attempt) => some3(Math.pow(factor, attempt) * baseMillis), scheduleAddDelay, scheduleWithMaxDelay, scheduleWithMaxElapsed, scheduleUnion, scheduleIntersect, catchAllCause2, OnFailureProto, catchCauseIf, catchAll2, catchAllDefect2, tapErrorCause2, tapErrorCauseIf, tapError2, tapDefect2, catchIf2, catchTag2, mapErrorCause3, mapError3, orDie2 = (self) => catchAll2(self, die5), orElseSucceed2, ignore2 = (self) => matchEffect3(self, {
  onFailure: (_) => void_5,
  onSuccess: (_) => void_5
}), ignoreLogged2 = (self) => matchEffect3(self, {
  onFailure: (error2) => sync3(() => console.error(error2)),
  onSuccess: (_) => void_5
}), option3 = (self) => match11(self, {
  onFailure: none2,
  onSuccess: some3
}), either4 = (self) => match11(self, {
  onFailure: left2,
  onSuccess: right2
}), retry, withTrace = function() {
  const prevLimit = globalThis.Error.stackTraceLimit;
  globalThis.Error.stackTraceLimit = 2;
  const error2 = new globalThis.Error;
  globalThis.Error.stackTraceLimit = prevLimit;
  function generate(name, cause2) {
    const stack = error2.stack;
    if (!stack) {
      return cause2;
    }
    const line = stack.split(`
`)[2]?.trim().replace(/^at /, "");
    if (!line) {
      return cause2;
    }
    const lineMatch = line.match(/\((.*)\)$/);
    return causeWithTrace(cause2, `at ${name} (${lineMatch ? lineMatch[1] : line})`);
  }
  const f = (name) => (self) => onError2(self, (cause2) => failCause4(generate(name, cause2)));
  if (arguments.length === 2) {
    return f(arguments[1])(arguments[0]);
  }
  return f(arguments[0]);
}, matchCauseEffect2, OnSuccessAndFailureProto, matchCause2, matchEffect3, match11, sleep4 = (millis2) => async((resume) => {
  const timeout = setTimeout(() => {
    resume(void_5);
  }, millis2);
  return sync3(() => {
    clearTimeout(timeout);
  });
}), delay2, timeoutOrElse, timeout, timeoutOption, MicroScopeTypeId, MicroScope, MicroScopeImpl, scopeMake, scopeUnsafeMake = () => new MicroScopeImpl, scope, provideScope, scoped = (self) => suspend2(() => {
  const scope2 = new MicroScopeImpl;
  return onExit2(provideService2(self, MicroScope, scope2), (exit3) => scope2.close(exit3));
}), acquireRelease = (acquire, release) => uninterruptible2(flatMap14(scope, (scope2) => tap3(acquire, (a) => scope2.addFinalizer((exit3) => release(a, exit3))))), addFinalizer = (finalizer) => flatMap14(scope, (scope2) => scope2.addFinalizer(finalizer)), onExit2, ensuring, onExitIf, onError2, onInterrupt2, acquireUseRelease2 = (acquire, use, release) => uninterruptibleMask2((restore) => flatMap14(acquire, (a) => flatMap14(exit2(restore(use(a))), (exit3) => andThen8(release(a, exit3), exit3)))), interrupt5, uninterruptible2 = (self) => withMicroFiber((fiber) => {
  if (!fiber.interruptible)
    return self;
  fiber.interruptible = false;
  fiber._stack.push(setInterruptible(true));
  return self;
}), setInterruptible, interruptible3 = (self) => withMicroFiber((fiber) => {
  if (fiber.interruptible)
    return self;
  fiber.interruptible = true;
  fiber._stack.push(setInterruptible(false));
  if (fiber._interrupted)
    return exitInterrupt2;
  return self;
}), uninterruptibleMask2 = (f) => withMicroFiber((fiber) => {
  if (!fiber.interruptible)
    return f(identity);
  fiber.interruptible = false;
  fiber._stack.push(setInterruptible(true));
  return f(interruptible3);
}), all8 = (arg, options) => {
  if (Array.isArray(arg) || isIterable(arg)) {
    return forEach11(arg, identity, options);
  } else if (options?.discard) {
    return forEach11(Object.values(arg), identity, options);
  }
  return suspend2(() => {
    const out = {};
    return as5(forEach11(Object.entries(arg), ([key, effect]) => map17(effect, (value) => {
      out[key] = value;
    }), {
      discard: true,
      concurrency: options?.concurrency
    }), out);
  });
}, whileLoop2, forEach11 = (iterable, f, options) => withMicroFiber((parent) => {
  const concurrencyOption = options?.concurrency === "inherit" ? parent.getRef(CurrentConcurrency) : options?.concurrency ?? 1;
  const concurrency = concurrencyOption === "unbounded" ? Number.POSITIVE_INFINITY : Math.max(1, concurrencyOption);
  const items = fromIterable2(iterable);
  let length4 = items.length;
  if (length4 === 0) {
    return options?.discard ? void_5 : succeed4([]);
  }
  const out = options?.discard ? undefined : new Array(length4);
  let index = 0;
  if (concurrency === 1) {
    return as5(whileLoop2({
      while: () => index < items.length,
      body: () => f(items[index], index),
      step: out ? (b) => out[index++] = b : (_) => index++
    }), out);
  }
  return async((resume) => {
    const fibers = new Set;
    let result2 = undefined;
    let inProgress = 0;
    let doneCount = 0;
    let pumping = false;
    let interrupted = false;
    function pump() {
      pumping = true;
      while (inProgress < concurrency && index < length4) {
        const currentIndex = index;
        const item = items[currentIndex];
        index++;
        inProgress++;
        try {
          const child = unsafeFork(parent, f(item, currentIndex), true, true);
          fibers.add(child);
          child.addObserver((exit3) => {
            fibers.delete(child);
            if (interrupted) {
              return;
            } else if (exit3._tag === "Failure") {
              if (result2 === undefined) {
                result2 = exit3;
                length4 = index;
                fibers.forEach((fiber) => fiber.unsafeInterrupt());
              }
            } else if (out !== undefined) {
              out[currentIndex] = exit3.value;
            }
            doneCount++;
            inProgress--;
            if (doneCount === length4) {
              resume(result2 ?? succeed4(out));
            } else if (!pumping && inProgress < concurrency) {
              pump();
            }
          });
        } catch (err2) {
          result2 = exitDie2(err2);
          length4 = index;
          fibers.forEach((fiber) => fiber.unsafeInterrupt());
        }
      }
      pumping = false;
    }
    pump();
    return suspend2(() => {
      interrupted = true;
      index = length4;
      return fiberInterruptAll(fibers);
    });
  });
}), filter12 = (iterable, f, options) => filterMap10(iterable, (a) => map17(f(a), (pass) => {
  pass = options?.negate ? !pass : pass;
  return pass ? some3(a) : none2();
}), options), filterMap10 = (iterable, f, options) => suspend2(() => {
  const out = [];
  return as5(forEach11(iterable, (a) => map17(f(a), (o) => {
    if (o._tag === "Some") {
      out.push(o.value);
    }
  }), {
    discard: true,
    concurrency: options?.concurrency
  }), out);
}), Do5, bindTo6, bind6, let_6, fork = (self) => withMicroFiber((fiber) => {
  fiberMiddleware.interruptChildren ??= fiberInterruptChildren;
  return succeed4(unsafeFork(fiber, self));
}), unsafeFork = (parent, effect, immediate = false, daemon = false) => {
  const child = new MicroFiberImpl(parent.context, parent.interruptible);
  if (!daemon) {
    parent.children().add(child);
    child.addObserver(() => parent.children().delete(child));
  }
  if (immediate) {
    child.evaluate(effect);
  } else {
    parent.getRef(CurrentScheduler).scheduleTask(() => child.evaluate(effect), 0);
  }
  return child;
}, forkDaemon = (self) => withMicroFiber((fiber) => succeed4(unsafeFork(fiber, self, false, true))), forkIn, forkScoped = (self) => flatMap14(scope, (scope2) => forkIn(self, scope2)), runFork = (effect, options) => {
  const fiber = new MicroFiberImpl(CurrentScheduler.context(options?.scheduler ?? new MicroSchedulerDefault));
  fiber.evaluate(effect);
  if (options?.signal) {
    if (options.signal.aborted) {
      fiber.unsafeInterrupt();
    } else {
      const abort = () => fiber.unsafeInterrupt();
      options.signal.addEventListener("abort", abort, {
        once: true
      });
      fiber.addObserver(() => options.signal.removeEventListener("abort", abort));
    }
  }
  return fiber;
}, runPromiseExit = (effect, options) => new Promise((resolve, _reject) => {
  const handle = runFork(effect, options);
  handle.addObserver(resolve);
}), runPromise = (effect, options) => runPromiseExit(effect, options).then((exit3) => {
  if (exit3._tag === "Failure") {
    throw exit3.cause;
  }
  return exit3.value;
}), runSyncExit = (effect) => {
  const scheduler2 = new MicroSchedulerDefault;
  const fiber = runFork(effect, {
    scheduler: scheduler2
  });
  scheduler2.flush();
  return fiber._exit ?? exitDie2(fiber);
}, runSync = (effect) => {
  const exit3 = runSyncExit(effect);
  if (exit3._tag === "Failure")
    throw exit3.cause;
  return exit3.value;
}, YieldableError2, Error3, TaggedError = (tag) => {

  class Base3 extends Error3 {
    _tag = tag;
  }
  Base3.prototype.name = tag;
  return Base3;
}, NoSuchElementException2, TimeoutException2;
var init_Micro = __esm(() => {
  init_Array();
  init_Context();
  init_Effectable();
  init_Either();
  init_Equal();
  init_Function();
  init_GlobalValue();
  init_Hash();
  init_Inspectable();
  init_context2();
  init_doNotation();
  init_effectable();
  init_Option();
  init_Predicate();
  init_Utils();
  TypeId16 = /* @__PURE__ */ Symbol.for("effect/Micro");
  MicroExitTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/MicroExit");
  MicroCauseTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/MicroCause");
  microCauseVariance = {
    _E: identity
  };
  MicroCauseImpl = class MicroCauseImpl extends globalThis.Error {
    _tag;
    traces;
    [MicroCauseTypeId];
    constructor(_tag, originalError, traces) {
      const causeName = `MicroCause.${_tag}`;
      let name;
      let message;
      let stack;
      if (originalError instanceof globalThis.Error) {
        name = `(${causeName}) ${originalError.name}`;
        message = originalError.message;
        const messageLines = message.split(`
`).length;
        stack = originalError.stack ? `(${causeName}) ${originalError.stack.split(`
`).slice(0, messageLines + 3).join(`
`)}` : `${name}: ${message}`;
      } else {
        name = causeName;
        message = toStringUnknown(originalError, 0);
        stack = `${name}: ${message}`;
      }
      if (traces.length > 0) {
        stack += `
    ${traces.join(`
    `)}`;
      }
      super(message);
      this._tag = _tag;
      this.traces = traces;
      this[MicroCauseTypeId] = microCauseVariance;
      this.name = name;
      this.stack = stack;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    toString() {
      return this.stack;
    }
    [NodeInspectSymbol]() {
      return this.stack;
    }
  };
  Fail = class Fail extends MicroCauseImpl {
    error;
    constructor(error2, traces = []) {
      super("Fail", error2, traces);
      this.error = error2;
    }
  };
  Die = class Die extends MicroCauseImpl {
    defect;
    constructor(defect, traces = []) {
      super("Die", defect, traces);
      this.defect = defect;
    }
  };
  Interrupt = class Interrupt extends MicroCauseImpl {
    constructor(traces = []) {
      super("Interrupt", "interrupted", traces);
    }
  };
  causeWithTrace = /* @__PURE__ */ dual(2, (self, trace) => {
    const traces = [...self.traces, trace];
    switch (self._tag) {
      case "Die":
        return causeDie(self.defect, traces);
      case "Interrupt":
        return causeInterrupt(traces);
      case "Fail":
        return causeFail(self.error, traces);
    }
  });
  MicroFiberTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/MicroFiber");
  fiberVariance = {
    _A: identity,
    _E: identity
  };
  MicroFiberImpl = class MicroFiberImpl {
    context;
    interruptible;
    [MicroFiberTypeId];
    _stack = [];
    _observers = [];
    _exit;
    _children;
    currentOpCount = 0;
    constructor(context3, interruptible3 = true) {
      this.context = context3;
      this.interruptible = interruptible3;
      this[MicroFiberTypeId] = fiberVariance;
    }
    getRef(ref) {
      return unsafeGetReference(this.context, ref);
    }
    addObserver(cb) {
      if (this._exit) {
        cb(this._exit);
        return constVoid;
      }
      this._observers.push(cb);
      return () => {
        const index = this._observers.indexOf(cb);
        if (index >= 0) {
          this._observers.splice(index, 1);
        }
      };
    }
    _interrupted = false;
    unsafeInterrupt() {
      if (this._exit) {
        return;
      }
      this._interrupted = true;
      if (this.interruptible) {
        this.evaluate(exitInterrupt2);
      }
    }
    unsafePoll() {
      return this._exit;
    }
    evaluate(effect) {
      if (this._exit) {
        return;
      } else if (this._yielded !== undefined) {
        const yielded = this._yielded;
        this._yielded = undefined;
        yielded();
      }
      const exit2 = this.runLoop(effect);
      if (exit2 === Yield) {
        return;
      }
      const interruptChildren = fiberMiddleware.interruptChildren && fiberMiddleware.interruptChildren(this);
      if (interruptChildren !== undefined) {
        return this.evaluate(flatMap14(interruptChildren, () => exit2));
      }
      this._exit = exit2;
      for (let i2 = 0;i2 < this._observers.length; i2++) {
        this._observers[i2](exit2);
      }
      this._observers.length = 0;
    }
    runLoop(effect) {
      let yielding = false;
      let current = effect;
      this.currentOpCount = 0;
      try {
        while (true) {
          this.currentOpCount++;
          if (!yielding && this.getRef(CurrentScheduler).shouldYield(this)) {
            yielding = true;
            const prev = current;
            current = flatMap14(yieldNow2, () => prev);
          }
          current = current[evaluate](this);
          if (current === Yield) {
            const yielded = this._yielded;
            if (MicroExitTypeId in yielded) {
              this._yielded = undefined;
              return yielded;
            }
            return Yield;
          }
        }
      } catch (error2) {
        if (!hasProperty(current, evaluate)) {
          return exitDie2(`MicroFiber.runLoop: Not a valid effect: ${String(current)}`);
        }
        return exitDie2(error2);
      }
    }
    getCont(symbol4) {
      while (true) {
        const op = this._stack.pop();
        if (!op)
          return;
        const cont = op[ensureCont] && op[ensureCont](this);
        if (cont)
          return {
            [symbol4]: cont
          };
        if (op[symbol4])
          return op;
      }
    }
    _yielded = undefined;
    yieldWith(value) {
      this._yielded = value;
      return Yield;
    }
    children() {
      return this._children ??= new Set;
    }
  };
  fiberMiddleware = /* @__PURE__ */ globalValue("effect/Micro/fiberMiddleware", () => ({
    interruptChildren: undefined
  }));
  identifier = /* @__PURE__ */ Symbol.for("effect/Micro/identifier");
  args = /* @__PURE__ */ Symbol.for("effect/Micro/args");
  evaluate = /* @__PURE__ */ Symbol.for("effect/Micro/evaluate");
  successCont = /* @__PURE__ */ Symbol.for("effect/Micro/successCont");
  failureCont = /* @__PURE__ */ Symbol.for("effect/Micro/failureCont");
  ensureCont = /* @__PURE__ */ Symbol.for("effect/Micro/ensureCont");
  Yield = /* @__PURE__ */ Symbol.for("effect/Micro/Yield");
  microVariance = {
    _A: identity,
    _E: identity,
    _R: identity
  };
  MicroProto = {
    ...EffectPrototype2,
    _op: "Micro",
    [TypeId16]: microVariance,
    pipe() {
      return pipeArguments(this, arguments);
    },
    [Symbol.iterator]() {
      return new SingleShotGen(new YieldWrap(this));
    },
    toJSON() {
      return {
        _id: "Micro",
        op: this[identifier],
        ...args in this ? {
          args: this[args]
        } : undefined
      };
    },
    toString() {
      return format2(this);
    },
    [NodeInspectSymbol]() {
      return format2(this);
    }
  };
  succeed4 = /* @__PURE__ */ makeExit({
    op: "Success",
    prop: "value",
    eval(fiber) {
      const cont = fiber.getCont(successCont);
      return cont ? cont[successCont](this[args], fiber) : fiber.yieldWith(this);
    }
  });
  failCause4 = /* @__PURE__ */ makeExit({
    op: "Failure",
    prop: "cause",
    eval(fiber) {
      let cont = fiber.getCont(failureCont);
      while (causeIsInterrupt(this[args]) && cont && fiber.interruptible) {
        cont = fiber.getCont(failureCont);
      }
      return cont ? cont[failureCont](this[args], fiber) : fiber.yieldWith(this);
    }
  });
  sync3 = /* @__PURE__ */ makePrimitive({
    op: "Sync",
    eval(fiber) {
      const value = this[args]();
      const cont = fiber.getCont(successCont);
      return cont ? cont[successCont](value, fiber) : fiber.yieldWith(exitSucceed2(value));
    }
  });
  suspend2 = /* @__PURE__ */ makePrimitive({
    op: "Suspend",
    eval(_fiber) {
      return this[args]();
    }
  });
  yieldNowWith = /* @__PURE__ */ makePrimitive({
    op: "Yield",
    eval(fiber) {
      let resumed = false;
      fiber.getRef(CurrentScheduler).scheduleTask(() => {
        if (resumed)
          return;
        fiber.evaluate(exitVoid2);
      }, this[args] ?? 0);
      return fiber.yieldWith(() => {
        resumed = true;
      });
    }
  });
  yieldNow2 = /* @__PURE__ */ yieldNowWith(0);
  succeedNone2 = /* @__PURE__ */ succeed4(/* @__PURE__ */ none2());
  void_5 = /* @__PURE__ */ succeed4(undefined);
  withMicroFiber = /* @__PURE__ */ makePrimitive({
    op: "WithMicroFiber",
    eval(fiber) {
      return this[args](fiber);
    }
  });
  yieldFlush = /* @__PURE__ */ withMicroFiber((fiber) => {
    fiber.getRef(CurrentScheduler).flush();
    return exitVoid2;
  });
  asyncOptions = /* @__PURE__ */ makePrimitive({
    op: "Async",
    single: false,
    eval(fiber) {
      const register2 = this[args][0];
      let resumed = false;
      let yielded = false;
      const controller = this[args][1] ? new AbortController : undefined;
      const onCancel = register2((effect) => {
        if (resumed)
          return;
        resumed = true;
        if (yielded) {
          fiber.evaluate(effect);
        } else {
          yielded = effect;
        }
      }, controller?.signal);
      if (yielded !== false)
        return yielded;
      yielded = true;
      fiber._yielded = () => {
        resumed = true;
      };
      if (controller === undefined && onCancel === undefined) {
        return Yield;
      }
      fiber._stack.push(asyncFinalizer(() => {
        resumed = true;
        controller?.abort();
        return onCancel ?? exitVoid2;
      }));
      return Yield;
    }
  });
  asyncFinalizer = /* @__PURE__ */ makePrimitive({
    op: "AsyncFinalizer",
    ensure(fiber) {
      if (fiber.interruptible) {
        fiber.interruptible = false;
        fiber._stack.push(setInterruptible(true));
      }
    },
    contE(cause2, _fiber) {
      return causeIsInterrupt(cause2) ? flatMap14(this[args](), () => failCause4(cause2)) : failCause4(cause2);
    }
  });
  never2 = /* @__PURE__ */ async(function() {
    const interval = setInterval(constVoid, 2147483646);
    return sync3(() => clearInterval(interval));
  });
  fromIterator2 = /* @__PURE__ */ makePrimitive({
    op: "Iterator",
    contA(value, fiber) {
      const state = this[args].next(value);
      if (state.done)
        return succeed4(state.value);
      fiber._stack.push(this);
      return yieldWrapGet(state.value);
    },
    eval(fiber) {
      return this[successCont](undefined, fiber);
    }
  });
  as5 = /* @__PURE__ */ dual(2, (self, value) => map17(self, (_) => value));
  andThen8 = /* @__PURE__ */ dual(2, (self, f) => flatMap14(self, (a) => {
    const value = isMicro(f) ? f : typeof f === "function" ? f(a) : f;
    return isMicro(value) ? value : succeed4(value);
  }));
  tap3 = /* @__PURE__ */ dual(2, (self, f) => flatMap14(self, (a) => {
    const value = isMicro(f) ? f : typeof f === "function" ? f(a) : f;
    return isMicro(value) ? as5(value, a) : succeed4(a);
  }));
  race = /* @__PURE__ */ dual(2, (self, that) => raceAll([self, that]));
  raceFirst = /* @__PURE__ */ dual(2, (self, that) => raceAllFirst([self, that]));
  flatMap14 = /* @__PURE__ */ dual(2, (self, f) => {
    const onSuccess = Object.create(OnSuccessProto);
    onSuccess[args] = self;
    onSuccess[successCont] = f;
    return onSuccess;
  });
  OnSuccessProto = /* @__PURE__ */ makePrimitiveProto({
    op: "OnSuccess",
    eval(fiber) {
      fiber._stack.push(this);
      return this[args];
    }
  });
  map17 = /* @__PURE__ */ dual(2, (self, f) => flatMap14(self, (a) => succeed4(f(a))));
  exitSucceed2 = succeed4;
  exitFailCause2 = failCause4;
  exitInterrupt2 = /* @__PURE__ */ exitFailCause2(/* @__PURE__ */ causeInterrupt());
  exitVoid2 = /* @__PURE__ */ exitSucceed2(undefined);
  setImmediate2 = "setImmediate" in globalThis ? globalThis.setImmediate : (f) => setTimeout(f, 0);
  updateContext = /* @__PURE__ */ dual(2, (self, f) => withMicroFiber((fiber) => {
    const prev = fiber.context;
    fiber.context = f(prev);
    return onExit2(self, () => {
      fiber.context = prev;
      return void_5;
    });
  }));
  updateService2 = /* @__PURE__ */ dual(3, (self, tag, f) => withMicroFiber((fiber) => {
    const prev = unsafeGet3(fiber.context, tag);
    fiber.context = add2(fiber.context, tag, f(prev));
    return onExit2(self, () => {
      fiber.context = add2(fiber.context, tag, prev);
      return void_5;
    });
  }));
  getContext = /* @__PURE__ */ withMicroFiber((fiber) => succeed4(fiber.context));
  provideContext2 = /* @__PURE__ */ dual(2, (self, provided) => updateContext(self, merge3(provided)));
  provideService2 = /* @__PURE__ */ dual(3, (self, tag, service2) => updateContext(self, add2(tag, service2)));
  provideServiceEffect2 = /* @__PURE__ */ dual(3, (self, tag, acquire) => flatMap14(acquire, (service2) => provideService2(self, tag, service2)));
  MaxOpsBeforeYield = class MaxOpsBeforeYield extends (/* @__PURE__ */ Reference2()("effect/Micro/currentMaxOpsBeforeYield", {
    defaultValue: () => 2048
  })) {
  };
  CurrentConcurrency = class CurrentConcurrency extends (/* @__PURE__ */ Reference2()("effect/Micro/currentConcurrency", {
    defaultValue: () => "unbounded"
  })) {
  };
  CurrentScheduler = class CurrentScheduler extends (/* @__PURE__ */ Reference2()("effect/Micro/currentScheduler", {
    defaultValue: () => new MicroSchedulerDefault
  })) {
  };
  withConcurrency2 = /* @__PURE__ */ dual(2, (self, concurrency) => provideService2(self, CurrentConcurrency, concurrency));
  zip7 = /* @__PURE__ */ dual((args2) => isMicro(args2[1]), (self, that, options) => zipWith8(self, that, (a, a2) => [a, a2], options));
  zipWith8 = /* @__PURE__ */ dual((args2) => isMicro(args2[1]), (self, that, f, options) => options?.concurrent ? map17(all8([self, that], {
    concurrency: 2
  }), ([a, a2]) => f(a, a2)) : flatMap14(self, (a) => map17(that, (a2) => f(a, a2))));
  filterOrFailCause = /* @__PURE__ */ dual((args2) => isMicro(args2[0]), (self, refinement, orFailWith) => flatMap14(self, (a) => refinement(a) ? succeed4(a) : failCause4(orFailWith(a))));
  filterOrFail2 = /* @__PURE__ */ dual((args2) => isMicro(args2[0]), (self, refinement, orFailWith) => flatMap14(self, (a) => refinement(a) ? succeed4(a) : fail5(orFailWith(a))));
  when2 = /* @__PURE__ */ dual(2, (self, condition) => flatMap14(isMicro(condition) ? condition : sync3(condition), (pass) => pass ? asSome2(self) : succeedNone2));
  repeatExit = /* @__PURE__ */ dual(2, (self, options) => suspend2(() => {
    const startedAt = options.schedule ? Date.now() : 0;
    let attempt = 0;
    const loop2 = flatMap14(exit2(self), (exit3) => {
      if (options.while !== undefined && !options.while(exit3)) {
        return exit3;
      } else if (options.times !== undefined && attempt >= options.times) {
        return exit3;
      }
      attempt++;
      let delayEffect = yieldNow2;
      if (options.schedule !== undefined) {
        const elapsed = Date.now() - startedAt;
        const duration = options.schedule(attempt, elapsed);
        if (isNone2(duration)) {
          return exit3;
        }
        delayEffect = sleep4(duration.value);
      }
      return flatMap14(delayEffect, () => loop2);
    });
    return loop2;
  }));
  repeat = /* @__PURE__ */ dual((args2) => isMicro(args2[0]), (self, options) => repeatExit(self, {
    ...options,
    while: (exit3) => exit3._tag === "Success" && (options?.while === undefined || options.while(exit3.value))
  }));
  replicate3 = /* @__PURE__ */ dual(2, (self, n) => Array.from({
    length: n
  }, () => self));
  replicateEffect = /* @__PURE__ */ dual((args2) => isMicro(args2[0]), (self, n, options) => all8(replicate3(self, n), options));
  scheduleAddDelay = /* @__PURE__ */ dual(2, (self, f) => (attempt, elapsed) => map2(self(attempt, elapsed), (duration) => duration + f()));
  scheduleWithMaxDelay = /* @__PURE__ */ dual(2, (self, max8) => (attempt, elapsed) => map2(self(attempt, elapsed), (duration) => Math.min(duration, max8)));
  scheduleWithMaxElapsed = /* @__PURE__ */ dual(2, (self, max8) => (attempt, elapsed) => elapsed < max8 ? self(attempt, elapsed) : none2());
  scheduleUnion = /* @__PURE__ */ dual(2, (self, that) => (attempt, elapsed) => zipWith2(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.min(d1, d2)));
  scheduleIntersect = /* @__PURE__ */ dual(2, (self, that) => (attempt, elapsed) => zipWith2(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.max(d1, d2)));
  catchAllCause2 = /* @__PURE__ */ dual(2, (self, f) => {
    const onFailure = Object.create(OnFailureProto);
    onFailure[args] = self;
    onFailure[failureCont] = f;
    return onFailure;
  });
  OnFailureProto = /* @__PURE__ */ makePrimitiveProto({
    op: "OnFailure",
    eval(fiber) {
      fiber._stack.push(this);
      return this[args];
    }
  });
  catchCauseIf = /* @__PURE__ */ dual(3, (self, predicate, f) => catchAllCause2(self, (cause2) => predicate(cause2) ? f(cause2) : failCause4(cause2)));
  catchAll2 = /* @__PURE__ */ dual(2, (self, f) => catchCauseIf(self, causeIsFail, (cause2) => f(cause2.error)));
  catchAllDefect2 = /* @__PURE__ */ dual(2, (self, f) => catchCauseIf(self, causeIsDie, (die6) => f(die6.defect)));
  tapErrorCause2 = /* @__PURE__ */ dual(2, (self, f) => tapErrorCauseIf(self, constTrue, f));
  tapErrorCauseIf = /* @__PURE__ */ dual(3, (self, refinement, f) => catchCauseIf(self, refinement, (cause2) => andThen8(f(cause2), failCause4(cause2))));
  tapError2 = /* @__PURE__ */ dual(2, (self, f) => tapErrorCauseIf(self, causeIsFail, (fail6) => f(fail6.error)));
  tapDefect2 = /* @__PURE__ */ dual(2, (self, f) => tapErrorCauseIf(self, causeIsDie, (die6) => f(die6.defect)));
  catchIf2 = /* @__PURE__ */ dual(3, (self, predicate, f) => catchCauseIf(self, (f2) => causeIsFail(f2) && predicate(f2.error), (fail6) => f(fail6.error)));
  catchTag2 = /* @__PURE__ */ dual(3, (self, k, f) => catchIf2(self, isTagged(k), f));
  mapErrorCause3 = /* @__PURE__ */ dual(2, (self, f) => catchAllCause2(self, (cause2) => failCause4(f(cause2))));
  mapError3 = /* @__PURE__ */ dual(2, (self, f) => catchAll2(self, (error2) => fail5(f(error2))));
  orElseSucceed2 = /* @__PURE__ */ dual(2, (self, f) => catchAll2(self, (_) => sync3(f)));
  retry = /* @__PURE__ */ dual((args2) => isMicro(args2[0]), (self, options) => repeatExit(self, {
    ...options,
    while: (exit3) => exit3._tag === "Failure" && exit3.cause._tag === "Fail" && (options?.while === undefined || options.while(exit3.cause.error))
  }));
  matchCauseEffect2 = /* @__PURE__ */ dual(2, (self, options) => {
    const primitive = Object.create(OnSuccessAndFailureProto);
    primitive[args] = self;
    primitive[successCont] = options.onSuccess;
    primitive[failureCont] = options.onFailure;
    return primitive;
  });
  OnSuccessAndFailureProto = /* @__PURE__ */ makePrimitiveProto({
    op: "OnSuccessAndFailure",
    eval(fiber) {
      fiber._stack.push(this);
      return this[args];
    }
  });
  matchCause2 = /* @__PURE__ */ dual(2, (self, options) => matchCauseEffect2(self, {
    onFailure: (cause2) => sync3(() => options.onFailure(cause2)),
    onSuccess: (value) => sync3(() => options.onSuccess(value))
  }));
  matchEffect3 = /* @__PURE__ */ dual(2, (self, options) => matchCauseEffect2(self, {
    onFailure: (cause2) => cause2._tag === "Fail" ? options.onFailure(cause2.error) : failCause4(cause2),
    onSuccess: options.onSuccess
  }));
  match11 = /* @__PURE__ */ dual(2, (self, options) => matchEffect3(self, {
    onFailure: (error2) => sync3(() => options.onFailure(error2)),
    onSuccess: (value) => sync3(() => options.onSuccess(value))
  }));
  delay2 = /* @__PURE__ */ dual(2, (self, millis2) => andThen8(sleep4(millis2), self));
  timeoutOrElse = /* @__PURE__ */ dual(2, (self, options) => raceFirst(self, andThen8(interruptible3(sleep4(options.duration)), options.onTimeout)));
  timeout = /* @__PURE__ */ dual(2, (self, millis2) => timeoutOrElse(self, {
    duration: millis2,
    onTimeout: () => fail5(new TimeoutException2)
  }));
  timeoutOption = /* @__PURE__ */ dual(2, (self, millis2) => raceFirst(asSome2(self), as5(interruptible3(sleep4(millis2)), none2())));
  MicroScopeTypeId = /* @__PURE__ */ Symbol.for("effect/Micro/MicroScope");
  MicroScope = /* @__PURE__ */ GenericTag("effect/Micro/MicroScope");
  MicroScopeImpl = class MicroScopeImpl {
    [MicroScopeTypeId];
    state = {
      _tag: "Open",
      finalizers: /* @__PURE__ */ new Set
    };
    constructor() {
      this[MicroScopeTypeId] = MicroScopeTypeId;
    }
    unsafeAddFinalizer(finalizer) {
      if (this.state._tag === "Open") {
        this.state.finalizers.add(finalizer);
      }
    }
    addFinalizer(finalizer) {
      return suspend2(() => {
        if (this.state._tag === "Open") {
          this.state.finalizers.add(finalizer);
          return void_5;
        }
        return finalizer(this.state.exit);
      });
    }
    unsafeRemoveFinalizer(finalizer) {
      if (this.state._tag === "Open") {
        this.state.finalizers.delete(finalizer);
      }
    }
    close(microExit) {
      return suspend2(() => {
        if (this.state._tag === "Open") {
          const finalizers = Array.from(this.state.finalizers).reverse();
          this.state = {
            _tag: "Closed",
            exit: microExit
          };
          return flatMap14(forEach11(finalizers, (finalizer) => exit2(finalizer(microExit))), exitVoidAll);
        }
        return void_5;
      });
    }
    get fork() {
      return sync3(() => {
        const newScope = new MicroScopeImpl;
        if (this.state._tag === "Closed") {
          newScope.state = this.state;
          return newScope;
        }
        function fin(exit3) {
          return newScope.close(exit3);
        }
        this.state.finalizers.add(fin);
        newScope.unsafeAddFinalizer((_) => sync3(() => this.unsafeRemoveFinalizer(fin)));
        return newScope;
      });
    }
  };
  scopeMake = /* @__PURE__ */ sync3(() => new MicroScopeImpl);
  scope = /* @__PURE__ */ service(MicroScope);
  provideScope = /* @__PURE__ */ dual(2, (self, scope2) => provideService2(self, MicroScope, scope2));
  onExit2 = /* @__PURE__ */ dual(2, (self, f) => uninterruptibleMask2((restore) => matchCauseEffect2(restore(self), {
    onFailure: (cause2) => flatMap14(f(exitFailCause2(cause2)), () => failCause4(cause2)),
    onSuccess: (a) => flatMap14(f(exitSucceed2(a)), () => succeed4(a))
  })));
  ensuring = /* @__PURE__ */ dual(2, (self, finalizer) => onExit2(self, (_) => finalizer));
  onExitIf = /* @__PURE__ */ dual(3, (self, refinement, f) => onExit2(self, (exit3) => refinement(exit3) ? f(exit3) : exitVoid2));
  onError2 = /* @__PURE__ */ dual(2, (self, f) => onExitIf(self, exitIsFailure2, (exit3) => f(exit3.cause)));
  onInterrupt2 = /* @__PURE__ */ dual(2, (self, finalizer) => onExitIf(self, exitIsInterrupt, (_) => finalizer));
  interrupt5 = /* @__PURE__ */ failCause4(/* @__PURE__ */ causeInterrupt());
  setInterruptible = /* @__PURE__ */ makePrimitive({
    op: "SetInterruptible",
    ensure(fiber) {
      fiber.interruptible = this[args];
      if (fiber._interrupted && fiber.interruptible) {
        return () => exitInterrupt2;
      }
    }
  });
  whileLoop2 = /* @__PURE__ */ makePrimitive({
    op: "While",
    contA(value, fiber) {
      this[args].step(value);
      if (this[args].while()) {
        fiber._stack.push(this);
        return this[args].body();
      }
      return exitVoid2;
    },
    eval(fiber) {
      if (this[args].while()) {
        fiber._stack.push(this);
        return this[args].body();
      }
      return exitVoid2;
    }
  });
  Do5 = /* @__PURE__ */ succeed4({});
  bindTo6 = /* @__PURE__ */ bindTo(map17);
  bind6 = /* @__PURE__ */ bind(map17, flatMap14);
  let_6 = /* @__PURE__ */ let_(map17);
  forkIn = /* @__PURE__ */ dual(2, (self, scope2) => uninterruptibleMask2((restore) => flatMap14(scope2.fork, (scope3) => tap3(restore(forkDaemon(onExit2(self, (exit3) => scope3.close(exit3)))), (fiber) => scope3.addFinalizer((_) => fiberInterrupt(fiber))))));
  YieldableError2 = /* @__PURE__ */ function() {

    class YieldableError3 extends globalThis.Error {
    }
    Object.assign(YieldableError3.prototype, MicroProto, StructuralPrototype, {
      [identifier]: "Failure",
      [evaluate]() {
        return fail5(this);
      },
      toString() {
        return this.message ? `${this.name}: ${this.message}` : this.name;
      },
      toJSON() {
        return {
          ...this
        };
      },
      [NodeInspectSymbol]() {
        const stack = this.stack;
        if (stack) {
          return `${this.toString()}
${stack.split(`
`).slice(1).join(`
`)}`;
        }
        return this.toString();
      }
    });
    return YieldableError3;
  }();
  Error3 = /* @__PURE__ */ function() {
    return class extends YieldableError2 {
      constructor(args2) {
        super();
        if (args2) {
          Object.assign(this, args2);
        }
      }
    };
  }();
  NoSuchElementException2 = class NoSuchElementException2 extends (/* @__PURE__ */ TaggedError("NoSuchElementException")) {
  };
  TimeoutException2 = class TimeoutException2 extends (/* @__PURE__ */ TaggedError("TimeoutException")) {
  };
});

// node_modules/effect/dist/esm/Scheduler.js
var exports_Scheduler = {};
__export(exports_Scheduler, {
  withScheduler: () => withScheduler,
  timerBatched: () => timerBatched,
  timer: () => timer,
  makeMatrix: () => makeMatrix,
  makeBatched: () => makeBatched,
  make: () => make40,
  defaultShouldYield: () => defaultShouldYield,
  defaultScheduler: () => defaultScheduler,
  currentScheduler: () => currentScheduler,
  SyncScheduler: () => SyncScheduler,
  PriorityBuckets: () => PriorityBuckets,
  MixedScheduler: () => MixedScheduler,
  ControlledScheduler: () => ControlledScheduler
});

class PriorityBuckets {
  buckets = [];
  scheduleTask(task, priority) {
    const length4 = this.buckets.length;
    let bucket = undefined;
    let index = 0;
    for (;index < length4; index++) {
      if (this.buckets[index][0] <= priority) {
        bucket = this.buckets[index];
      } else {
        break;
      }
    }
    if (bucket && bucket[0] === priority) {
      bucket[1].push(task);
    } else if (index === length4) {
      this.buckets.push([priority, [task]]);
    } else {
      this.buckets.splice(index, 0, [priority, [task]]);
    }
  }
}

class MixedScheduler {
  maxNextTickBeforeTimer;
  running = false;
  tasks = /* @__PURE__ */ new PriorityBuckets;
  constructor(maxNextTickBeforeTimer) {
    this.maxNextTickBeforeTimer = maxNextTickBeforeTimer;
  }
  starveInternal(depth) {
    const tasks = this.tasks.buckets;
    this.tasks.buckets = [];
    for (const [_, toRun] of tasks) {
      for (let i2 = 0;i2 < toRun.length; i2++) {
        toRun[i2]();
      }
    }
    if (this.tasks.buckets.length === 0) {
      this.running = false;
    } else {
      this.starve(depth);
    }
  }
  starve(depth = 0) {
    if (depth >= this.maxNextTickBeforeTimer) {
      setTimeout(() => this.starveInternal(0), 0);
    } else {
      Promise.resolve(undefined).then(() => this.starveInternal(depth + 1));
    }
  }
  shouldYield(fiber) {
    return fiber.currentOpCount > fiber.getFiberRef(currentMaxOpsBeforeYield) ? fiber.getFiberRef(currentSchedulingPriority) : false;
  }
  scheduleTask(task, priority) {
    this.tasks.scheduleTask(task, priority);
    if (!this.running) {
      this.running = true;
      this.starve();
    }
  }
}

class SyncScheduler {
  tasks = /* @__PURE__ */ new PriorityBuckets;
  deferred = false;
  scheduleTask(task, priority) {
    if (this.deferred) {
      defaultScheduler.scheduleTask(task, priority);
    } else {
      this.tasks.scheduleTask(task, priority);
    }
  }
  shouldYield(fiber) {
    return fiber.currentOpCount > fiber.getFiberRef(currentMaxOpsBeforeYield) ? fiber.getFiberRef(currentSchedulingPriority) : false;
  }
  flush() {
    while (this.tasks.buckets.length > 0) {
      const tasks = this.tasks.buckets;
      this.tasks.buckets = [];
      for (const [_, toRun] of tasks) {
        for (let i2 = 0;i2 < toRun.length; i2++) {
          toRun[i2]();
        }
      }
    }
    this.deferred = true;
  }
}

class ControlledScheduler {
  tasks = /* @__PURE__ */ new PriorityBuckets;
  deferred = false;
  scheduleTask(task, priority) {
    if (this.deferred) {
      defaultScheduler.scheduleTask(task, priority);
    } else {
      this.tasks.scheduleTask(task, priority);
    }
  }
  shouldYield(fiber) {
    return fiber.currentOpCount > fiber.getFiberRef(currentMaxOpsBeforeYield) ? fiber.getFiberRef(currentSchedulingPriority) : false;
  }
  step() {
    const tasks = this.tasks.buckets;
    this.tasks.buckets = [];
    for (const [_, toRun] of tasks) {
      for (let i2 = 0;i2 < toRun.length; i2++) {
        toRun[i2]();
      }
    }
  }
}
var defaultScheduler, makeMatrix = (...record3) => {
  const index = record3.sort(([p0], [p1]) => p0 < p1 ? -1 : p0 > p1 ? 1 : 0);
  return {
    shouldYield(fiber) {
      for (const scheduler2 of record3) {
        const priority = scheduler2[1].shouldYield(fiber);
        if (priority !== false) {
          return priority;
        }
      }
      return false;
    },
    scheduleTask(task, priority) {
      let scheduler2 = undefined;
      for (const i2 of index) {
        if (priority >= i2[0]) {
          scheduler2 = i2[1];
        } else {
          return (scheduler2 ?? defaultScheduler).scheduleTask(task, priority);
        }
      }
      return (scheduler2 ?? defaultScheduler).scheduleTask(task, priority);
    }
  };
}, defaultShouldYield = (fiber) => {
  return fiber.currentOpCount > fiber.getFiberRef(currentMaxOpsBeforeYield) ? fiber.getFiberRef(currentSchedulingPriority) : false;
}, make40 = (scheduleTask, shouldYield = defaultShouldYield) => ({
  scheduleTask,
  shouldYield
}), makeBatched = (callback, shouldYield = defaultShouldYield) => {
  let running3 = false;
  const tasks = new PriorityBuckets;
  const starveInternal = () => {
    const tasksToRun = tasks.buckets;
    tasks.buckets = [];
    for (const [_, toRun] of tasksToRun) {
      for (let i2 = 0;i2 < toRun.length; i2++) {
        toRun[i2]();
      }
    }
    if (tasks.buckets.length === 0) {
      running3 = false;
    } else {
      starve();
    }
  };
  const starve = () => callback(starveInternal);
  return make40((task, priority) => {
    tasks.scheduleTask(task, priority);
    if (!running3) {
      running3 = true;
      starve();
    }
  }, shouldYield);
}, timer = (ms, shouldYield = defaultShouldYield) => make40((task) => setTimeout(task, ms), shouldYield), timerBatched = (ms, shouldYield = defaultShouldYield) => makeBatched((task) => setTimeout(task, ms), shouldYield), currentScheduler, withScheduler;
var init_Scheduler = __esm(() => {
  init_Function();
  init_GlobalValue();
  init_core();
  defaultScheduler = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Scheduler/defaultScheduler"), () => new MixedScheduler(2048));
  currentScheduler = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentScheduler"), () => fiberRefUnsafeMake(defaultScheduler));
  withScheduler = /* @__PURE__ */ dual(2, (self, scheduler2) => fiberRefLocally(self, currentScheduler, scheduler2));
});

// node_modules/effect/dist/esm/internal/completedRequestMap.js
var currentRequestMap;
var init_completedRequestMap = __esm(() => {
  init_GlobalValue();
  init_core();
  currentRequestMap = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentRequestMap"), () => fiberRefUnsafeMake(new Map));
});

// node_modules/effect/dist/esm/internal/concurrency.js
var match12 = (concurrency, sequential4, unbounded2, bounded2) => {
  switch (concurrency) {
    case undefined:
      return sequential4();
    case "unbounded":
      return unbounded2();
    case "inherit":
      return fiberRefGetWith(currentConcurrency, (concurrency2) => concurrency2 === "unbounded" ? unbounded2() : concurrency2 > 1 ? bounded2(concurrency2) : sequential4());
    default:
      return concurrency > 1 ? bounded2(concurrency) : sequential4();
  }
}, matchSimple = (concurrency, sequential4, concurrent) => {
  switch (concurrency) {
    case undefined:
      return sequential4();
    case "unbounded":
      return concurrent();
    case "inherit":
      return fiberRefGetWith(currentConcurrency, (concurrency2) => concurrency2 === "unbounded" || concurrency2 > 1 ? concurrent() : sequential4());
    default:
      return concurrency > 1 ? concurrent() : sequential4();
  }
};
var init_concurrency = __esm(() => {
  init_core();
});

// node_modules/effect/dist/esm/internal/fiberMessage.js
var OP_INTERRUPT_SIGNAL = "InterruptSignal", OP_STATEFUL = "Stateful", OP_RESUME = "Resume", OP_YIELD_NOW = "YieldNow", interruptSignal = (cause2) => ({
  _tag: OP_INTERRUPT_SIGNAL,
  cause: cause2
}), stateful = (onFiber) => ({
  _tag: OP_STATEFUL,
  onFiber
}), resume = (effect) => ({
  _tag: OP_RESUME,
  effect
}), yieldNow3 = () => ({
  _tag: OP_YIELD_NOW
});

// node_modules/effect/dist/esm/internal/fiberScope.js
var FiberScopeSymbolKey = "effect/FiberScope", FiberScopeTypeId, Global, Local, unsafeMake9 = (fiber) => {
  return new Local(fiber.id(), fiber);
}, globalScope;
var init_fiberScope = __esm(() => {
  init_FiberId();
  init_GlobalValue();
  FiberScopeTypeId = /* @__PURE__ */ Symbol.for(FiberScopeSymbolKey);
  Global = class Global {
    [FiberScopeTypeId] = FiberScopeTypeId;
    fiberId = none4;
    roots = /* @__PURE__ */ new Set;
    add(_runtimeFlags, child) {
      this.roots.add(child);
      child.addObserver(() => {
        this.roots.delete(child);
      });
    }
  };
  Local = class Local {
    fiberId;
    parent;
    [FiberScopeTypeId] = FiberScopeTypeId;
    constructor(fiberId2, parent) {
      this.fiberId = fiberId2;
      this.parent = parent;
    }
    add(_runtimeFlags, child) {
      this.parent.tell(stateful((parentFiber) => {
        parentFiber.addChild(child);
        child.addObserver(() => {
          parentFiber.removeChild(child);
        });
      }));
    }
  };
  globalScope = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberScope/Global"), () => new Global);
});

// node_modules/effect/dist/esm/internal/fiber.js
var FiberSymbolKey = "effect/Fiber", FiberTypeId, fiberVariance2, fiberProto, RuntimeFiberSymbolKey = "effect/Fiber", RuntimeFiberTypeId, Order7, isFiber = (u) => hasProperty(u, FiberTypeId), isRuntimeFiber = (self) => (RuntimeFiberTypeId in self), _await2 = (self) => self.await, children = (self) => self.children, done5 = (exit3) => {
  const _fiber = {
    ...CommitPrototype,
    commit() {
      return join3(this);
    },
    ...fiberProto,
    id: () => none4,
    await: succeed(exit3),
    children: succeed([]),
    inheritAll: void_3,
    poll: succeed(some3(exit3)),
    interruptAsFork: () => void_3
  };
  return _fiber;
}, dump = (self) => map14(self.status, (status) => ({
  id: self.id(),
  status
})), dumpAll = (fibers) => forEachSequential(fibers, dump), fail6 = (error2) => done5(fail4(error2)), failCause5 = (cause2) => done5(failCause3(cause2)), fromEffect = (effect) => map14(exit(effect), done5), id = (self) => self.id(), inheritAll = (self) => self.inheritAll, interrupted = (fiberId2) => done5(interrupt4(fiberId2)), interruptAll = (fibers) => flatMap12(fiberId, (fiberId2) => pipe(fibers, interruptAllAs(fiberId2))), interruptAllAs, interruptAsFork, join3 = (self) => zipLeft2(flatten8(self.await), self.inheritAll), map18, mapEffect2, mapFiber, match13, _never, never3, orElse5, orElseEither3, poll3 = (self) => self.poll, parseMs = (milliseconds) => {
  const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil;
  return {
    days: roundTowardsZero(milliseconds / 86400000),
    hours: roundTowardsZero(milliseconds / 3600000) % 24,
    minutes: roundTowardsZero(milliseconds / 60000) % 60,
    seconds: roundTowardsZero(milliseconds / 1000) % 60,
    milliseconds: roundTowardsZero(milliseconds) % 1000,
    microseconds: roundTowardsZero(milliseconds * 1000) % 1000,
    nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000
  };
}, renderStatus = (status) => {
  if (isDone3(status)) {
    return "Done";
  }
  if (isRunning2(status)) {
    return "Running";
  }
  const isInterruptible = interruptible(status.runtimeFlags) ? "interruptible" : "uninterruptible";
  return `Suspended(${isInterruptible})`;
}, pretty2 = (self) => flatMap12(currentTimeMillis2, (now) => map14(dump(self), (dump2) => {
  const time = now - dump2.id.startTimeMillis;
  const {
    days: days2,
    hours: hours2,
    milliseconds,
    minutes: minutes2,
    seconds: seconds2
  } = parseMs(time);
  const lifeMsg = (days2 === 0 ? "" : `${days2}d`) + (days2 === 0 && hours2 === 0 ? "" : `${hours2}h`) + (days2 === 0 && hours2 === 0 && minutes2 === 0 ? "" : `${minutes2}m`) + (days2 === 0 && hours2 === 0 && minutes2 === 0 && seconds2 === 0 ? "" : `${seconds2}s`) + `${milliseconds}ms`;
  const waitMsg = isSuspended2(dump2.status) ? (() => {
    const ids3 = ids2(dump2.status.blockingOn);
    return size6(ids3) > 0 ? `waiting on ` + Array.from(ids3).map((id2) => `${id2}`).join(", ") : "";
  })() : "";
  const statusMsg = renderStatus(dump2.status);
  return `[Fiber](#${dump2.id.id}) (${lifeMsg}) ${waitMsg}
   Status: ${statusMsg}`;
})), unsafeRoots = () => Array.from(globalScope.roots), roots, status = (self) => self.status, succeed5 = (value) => done5(succeed3(value)), void_6, currentFiberURI = "effect/FiberCurrent", getCurrentFiber = () => fromNullable2(globalThis[currentFiberURI]);
var init_fiber = __esm(() => {
  init_Clock();
  init_Either();
  init_Exit();
  init_FiberId();
  init_FiberStatus();
  init_Function();
  init_HashSet();
  init_Number();
  init_Option();
  init_Order();
  init_Predicate();
  init_core();
  init_effectable();
  init_fiberScope();
  init_runtimeFlags();
  FiberTypeId = /* @__PURE__ */ Symbol.for(FiberSymbolKey);
  fiberVariance2 = {
    _E: (_) => _,
    _A: (_) => _
  };
  fiberProto = {
    [FiberTypeId]: fiberVariance2,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  RuntimeFiberTypeId = /* @__PURE__ */ Symbol.for(RuntimeFiberSymbolKey);
  Order7 = /* @__PURE__ */ pipe(/* @__PURE__ */ tuple3(Order, Order), /* @__PURE__ */ mapInput3((fiber) => [fiber.id().startTimeMillis, fiber.id().id]));
  interruptAllAs = /* @__PURE__ */ dual(2, (fibers, fiberId2) => pipe(forEachSequentialDiscard(fibers, interruptAsFork(fiberId2)), zipRight2(pipe(fibers, forEachSequentialDiscard(_await2)))));
  interruptAsFork = /* @__PURE__ */ dual(2, (self, fiberId2) => self.interruptAsFork(fiberId2));
  map18 = /* @__PURE__ */ dual(2, (self, f) => mapEffect2(self, (a) => sync(() => f(a))));
  mapEffect2 = /* @__PURE__ */ dual(2, (self, f) => {
    const _fiber = {
      ...CommitPrototype,
      commit() {
        return join3(this);
      },
      ...fiberProto,
      id: () => self.id(),
      await: flatMap12(self.await, forEachEffect(f)),
      children: self.children,
      inheritAll: self.inheritAll,
      poll: flatMap12(self.poll, (result2) => {
        switch (result2._tag) {
          case "None":
            return succeed(none2());
          case "Some":
            return pipe(forEachEffect(result2.value, f), map14(some3));
        }
      }),
      interruptAsFork: (id2) => self.interruptAsFork(id2)
    };
    return _fiber;
  });
  mapFiber = /* @__PURE__ */ dual(2, (self, f) => map14(self.await, match7({
    onFailure: (cause2) => failCause5(cause2),
    onSuccess: (a) => f(a)
  })));
  match13 = /* @__PURE__ */ dual(2, (self, {
    onFiber,
    onRuntimeFiber
  }) => {
    if (isRuntimeFiber(self)) {
      return onRuntimeFiber(self);
    }
    return onFiber(self);
  });
  _never = {
    ...CommitPrototype,
    commit() {
      return join3(this);
    },
    ...fiberProto,
    id: () => none4,
    await: never,
    children: /* @__PURE__ */ succeed([]),
    inheritAll: never,
    poll: /* @__PURE__ */ succeed(/* @__PURE__ */ none2()),
    interruptAsFork: () => never
  };
  never3 = _never;
  orElse5 = /* @__PURE__ */ dual(2, (self, that) => ({
    ...CommitPrototype,
    commit() {
      return join3(this);
    },
    ...fiberProto,
    id: () => getOrElse6(self.id(), that.id()),
    await: zipWith6(self.await, that.await, (exit1, exit22) => isSuccess(exit1) ? exit1 : exit22),
    children: self.children,
    inheritAll: zipRight2(that.inheritAll, self.inheritAll),
    poll: zipWith6(self.poll, that.poll, (option1, option22) => {
      switch (option1._tag) {
        case "None": {
          return none2();
        }
        case "Some": {
          return isSuccess(option1.value) ? option1 : option22;
        }
      }
    }),
    interruptAsFork: (id2) => pipe(interruptAsFiber(self, id2), zipRight2(pipe(that, interruptAsFiber(id2))), asVoid2)
  }));
  orElseEither3 = /* @__PURE__ */ dual(2, (self, that) => orElse5(map18(self, left2), map18(that, right2)));
  roots = /* @__PURE__ */ sync(unsafeRoots);
  void_6 = /* @__PURE__ */ succeed5(undefined);
});

// node_modules/effect/dist/esm/internal/logger.js
var LoggerSymbolKey = "effect/Logger", LoggerTypeId, loggerVariance, makeLogger = (log2) => ({
  [LoggerTypeId]: loggerVariance,
  log: log2,
  pipe() {
    return pipeArguments(this, arguments);
  }
}), mapInput4, mapInputOptions, filterLogLevel, map19, none7, simple = (log2) => ({
  [LoggerTypeId]: loggerVariance,
  log: ({
    message
  }) => log2(message),
  pipe() {
    return pipeArguments(this, arguments);
  }
}), succeed6 = (value) => {
  return simple(() => value);
}, sync4 = (evaluate2) => {
  return simple(evaluate2);
}, zip8, zipLeft4, zipRight4, textOnly, format5 = (quoteValue, whitespace) => ({
  annotations: annotations2,
  cause: cause2,
  date: date2,
  fiberId: fiberId2,
  logLevel,
  message,
  spans
}) => {
  const formatValue = (value) => value.match(textOnly) ? value : quoteValue(value);
  const format6 = (label, value) => `${formatLabel(label)}=${formatValue(value)}`;
  const append6 = (label, value) => " " + format6(label, value);
  let out = format6("timestamp", date2.toISOString());
  out += append6("level", logLevel.label);
  out += append6("fiber", threadName(fiberId2));
  const messages = ensure(message);
  for (let i2 = 0;i2 < messages.length; i2++) {
    out += append6("message", toStringUnknown(messages[i2], whitespace));
  }
  if (!isEmptyType(cause2)) {
    out += append6("cause", pretty(cause2, {
      renderErrorCause: true
    }));
  }
  for (const span2 of spans) {
    out += " " + render3(date2.getTime())(span2);
  }
  for (const [label, value] of annotations2) {
    out += append6(label, toStringUnknown(value, whitespace));
  }
  return out;
}, escapeDoubleQuotes = (s) => `"${s.replace(/\\([\s\S])|(")/g, "\\$1$2")}"`, stringLogger, logfmtLogger, structuredLogger, structuredMessage = (u) => {
  switch (typeof u) {
    case "bigint":
    case "function":
    case "symbol": {
      return String(u);
    }
    default: {
      return toJSON(u);
    }
  }
}, jsonLogger, isLogger = (u) => {
  return typeof u === "object" && u != null && LoggerTypeId in u;
}, withColor = (text, ...colors) => {
  let out = "";
  for (let i2 = 0;i2 < colors.length; i2++) {
    out += `\x1B[${colors[i2]}m`;
  }
  return out + text + "\x1B[0m";
}, withColorNoop = (text, ..._colors) => text, colors, logLevelColors, logLevelStyle, defaultDateFormat = (date2) => `${date2.getHours().toString().padStart(2, "0")}:${date2.getMinutes().toString().padStart(2, "0")}:${date2.getSeconds().toString().padStart(2, "0")}.${date2.getMilliseconds().toString().padStart(3, "0")}`, hasProcessStdout, processStdoutIsTTY, hasProcessStdoutOrDeno, prettyLogger = (options) => {
  const mode_ = options?.mode ?? "auto";
  const mode = mode_ === "auto" ? hasProcessStdoutOrDeno ? "tty" : "browser" : mode_;
  const isBrowser = mode === "browser";
  const showColors = typeof options?.colors === "boolean" ? options.colors : processStdoutIsTTY || isBrowser;
  const formatDate2 = options?.formatDate ?? defaultDateFormat;
  return isBrowser ? prettyLoggerBrowser({
    colors: showColors,
    formatDate: formatDate2
  }) : prettyLoggerTty({
    colors: showColors,
    formatDate: formatDate2,
    stderr: options?.stderr === true
  });
}, prettyLoggerTty = (options) => {
  const processIsBun = typeof process === "object" && "isBun" in process && process.isBun === true;
  const color = options.colors ? withColor : withColorNoop;
  return makeLogger(({
    annotations: annotations2,
    cause: cause2,
    context: context4,
    date: date2,
    fiberId: fiberId2,
    logLevel,
    message: message_,
    spans
  }) => {
    const services = getOrDefault2(context4, currentServices);
    const console2 = get5(services, consoleTag).unsafe;
    const log2 = options.stderr === true ? console2.error : console2.log;
    const message = ensure(message_);
    let firstLine = color(`[${options.formatDate(date2)}]`, colors.white) + ` ${color(logLevel.label, ...logLevelColors[logLevel._tag])}` + ` (${threadName(fiberId2)})`;
    if (isCons(spans)) {
      const now = date2.getTime();
      const render5 = render3(now);
      for (const span2 of spans) {
        firstLine += " " + render5(span2);
      }
    }
    firstLine += ":";
    let messageIndex = 0;
    if (message.length > 0) {
      const firstMaybeString = structuredMessage(message[0]);
      if (typeof firstMaybeString === "string") {
        firstLine += " " + color(firstMaybeString, colors.bold, colors.cyan);
        messageIndex++;
      }
    }
    log2(firstLine);
    if (!processIsBun)
      console2.group();
    if (!isEmpty7(cause2)) {
      log2(pretty(cause2, {
        renderErrorCause: true
      }));
    }
    if (messageIndex < message.length) {
      for (;messageIndex < message.length; messageIndex++) {
        log2(redact(message[messageIndex]));
      }
    }
    if (size7(annotations2) > 0) {
      for (const [key, value] of annotations2) {
        log2(color(`${key}:`, colors.bold, colors.white), redact(value));
      }
    }
    if (!processIsBun)
      console2.groupEnd();
  });
}, prettyLoggerBrowser = (options) => {
  const color = options.colors ? "%c" : "";
  return makeLogger(({
    annotations: annotations2,
    cause: cause2,
    context: context4,
    date: date2,
    fiberId: fiberId2,
    logLevel,
    message: message_,
    spans
  }) => {
    const services = getOrDefault2(context4, currentServices);
    const console2 = get5(services, consoleTag).unsafe;
    const message = ensure(message_);
    let firstLine = `${color}[${options.formatDate(date2)}]`;
    const firstParams = [];
    if (options.colors) {
      firstParams.push("color:gray");
    }
    firstLine += ` ${color}${logLevel.label}${color} (${threadName(fiberId2)})`;
    if (options.colors) {
      firstParams.push(logLevelStyle[logLevel._tag], "");
    }
    if (isCons(spans)) {
      const now = date2.getTime();
      const render5 = render3(now);
      for (const span2 of spans) {
        firstLine += " " + render5(span2);
      }
    }
    firstLine += ":";
    let messageIndex = 0;
    if (message.length > 0) {
      const firstMaybeString = structuredMessage(message[0]);
      if (typeof firstMaybeString === "string") {
        firstLine += ` ${color}${firstMaybeString}`;
        if (options.colors) {
          firstParams.push("color:deepskyblue");
        }
        messageIndex++;
      }
    }
    console2.groupCollapsed(firstLine, ...firstParams);
    if (!isEmpty7(cause2)) {
      console2.error(pretty(cause2, {
        renderErrorCause: true
      }));
    }
    if (messageIndex < message.length) {
      for (;messageIndex < message.length; messageIndex++) {
        console2.log(redact(message[messageIndex]));
      }
    }
    if (size7(annotations2) > 0) {
      for (const [key, value] of annotations2) {
        const redacted = redact(value);
        if (options.colors) {
          console2.log(`%c${key}:`, "color:gray", redacted);
        } else {
          console2.log(`${key}:`, redacted);
        }
      }
    }
    console2.groupEnd();
  });
}, prettyLoggerDefault;
var init_logger = __esm(() => {
  init_Array();
  init_Context();
  init_FiberRefs();
  init_Function();
  init_GlobalValue();
  init_HashMap();
  init_Inspectable();
  init_List();
  init_Option();
  init_cause();
  init_defaultServices();
  init_console();
  init_fiberId();
  LoggerTypeId = /* @__PURE__ */ Symbol.for(LoggerSymbolKey);
  loggerVariance = {
    _Message: (_) => _,
    _Output: (_) => _
  };
  mapInput4 = /* @__PURE__ */ dual(2, (self, f) => makeLogger((options) => self.log({
    ...options,
    message: f(options.message)
  })));
  mapInputOptions = /* @__PURE__ */ dual(2, (self, f) => makeLogger((options) => self.log(f(options))));
  filterLogLevel = /* @__PURE__ */ dual(2, (self, f) => makeLogger((options) => f(options.logLevel) ? some3(self.log(options)) : none2()));
  map19 = /* @__PURE__ */ dual(2, (self, f) => makeLogger((options) => f(self.log(options))));
  none7 = {
    [LoggerTypeId]: loggerVariance,
    log: constVoid,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  zip8 = /* @__PURE__ */ dual(2, (self, that) => makeLogger((options) => [self.log(options), that.log(options)]));
  zipLeft4 = /* @__PURE__ */ dual(2, (self, that) => map19(zip8(self, that), (tuple5) => tuple5[0]));
  zipRight4 = /* @__PURE__ */ dual(2, (self, that) => map19(zip8(self, that), (tuple5) => tuple5[1]));
  textOnly = /^[^\s"=]*$/;
  stringLogger = /* @__PURE__ */ makeLogger(/* @__PURE__ */ format5(escapeDoubleQuotes));
  logfmtLogger = /* @__PURE__ */ makeLogger(/* @__PURE__ */ format5(JSON.stringify, 0));
  structuredLogger = /* @__PURE__ */ makeLogger(({
    annotations: annotations2,
    cause: cause2,
    date: date2,
    fiberId: fiberId2,
    logLevel,
    message,
    spans
  }) => {
    const now = date2.getTime();
    const annotationsObj = {};
    const spansObj = {};
    if (size7(annotations2) > 0) {
      for (const [k, v] of annotations2) {
        annotationsObj[k] = structuredMessage(v);
      }
    }
    if (isCons(spans)) {
      for (const span2 of spans) {
        spansObj[span2.label] = now - span2.startTime;
      }
    }
    const messageArr = ensure(message);
    return {
      message: messageArr.length === 1 ? structuredMessage(messageArr[0]) : messageArr.map(structuredMessage),
      logLevel: logLevel.label,
      timestamp: date2.toISOString(),
      cause: isEmpty7(cause2) ? undefined : pretty(cause2, {
        renderErrorCause: true
      }),
      annotations: annotationsObj,
      spans: spansObj,
      fiberId: threadName(fiberId2)
    };
  });
  jsonLogger = /* @__PURE__ */ map19(structuredLogger, stringifyCircular);
  colors = {
    bold: "1",
    red: "31",
    green: "32",
    yellow: "33",
    blue: "34",
    cyan: "36",
    white: "37",
    gray: "90",
    black: "30",
    bgBrightRed: "101"
  };
  logLevelColors = {
    None: [],
    All: [],
    Trace: [colors.gray],
    Debug: [colors.blue],
    Info: [colors.green],
    Warning: [colors.yellow],
    Error: [colors.red],
    Fatal: [colors.bgBrightRed, colors.black]
  };
  logLevelStyle = {
    None: "",
    All: "",
    Trace: "color:gray",
    Debug: "color:blue",
    Info: "color:green",
    Warning: "color:orange",
    Error: "color:red",
    Fatal: "background-color:red;color:white"
  };
  hasProcessStdout = typeof process === "object" && process !== null && typeof process.stdout === "object" && process.stdout !== null;
  processStdoutIsTTY = hasProcessStdout && process.stdout.isTTY === true;
  hasProcessStdoutOrDeno = hasProcessStdout || "Deno" in globalThis;
  prettyLoggerDefault = /* @__PURE__ */ globalValue("effect/Logger/prettyLoggerDefault", () => prettyLogger());
});

// node_modules/effect/dist/esm/internal/metric/boundaries.js
var MetricBoundariesSymbolKey = "effect/MetricBoundaries", MetricBoundariesTypeId, MetricBoundariesImpl, isMetricBoundaries = (u) => hasProperty(u, MetricBoundariesTypeId), fromIterable11 = (iterable) => {
  const values7 = pipe(iterable, appendAll2(of3(Number.POSITIVE_INFINITY)), dedupe);
  return new MetricBoundariesImpl(values7);
}, linear = (options) => pipe(makeBy2(options.count - 1, (i2) => options.start + i2 * options.width), unsafeFromArray, fromIterable11), exponential = (options) => pipe(makeBy2(options.count - 1, (i2) => options.start * Math.pow(options.factor, i2)), unsafeFromArray, fromIterable11);
var init_boundaries = __esm(() => {
  init_Array();
  init_Chunk();
  init_Equal();
  init_Function();
  init_Hash();
  init_Predicate();
  MetricBoundariesTypeId = /* @__PURE__ */ Symbol.for(MetricBoundariesSymbolKey);
  MetricBoundariesImpl = class MetricBoundariesImpl {
    values;
    [MetricBoundariesTypeId] = MetricBoundariesTypeId;
    constructor(values7) {
      this.values = values7;
      this._hash = pipe(string2(MetricBoundariesSymbolKey), combine2(array2(this.values)));
    }
    _hash;
    [symbol2]() {
      return this._hash;
    }
    [symbol3](u) {
      return isMetricBoundaries(u) && equals(this.values, u.values);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
});

// node_modules/effect/dist/esm/internal/metric/keyType.js
var MetricKeyTypeSymbolKey = "effect/MetricKeyType", MetricKeyTypeTypeId, CounterKeyTypeSymbolKey = "effect/MetricKeyType/Counter", CounterKeyTypeTypeId, FrequencyKeyTypeSymbolKey = "effect/MetricKeyType/Frequency", FrequencyKeyTypeTypeId, GaugeKeyTypeSymbolKey = "effect/MetricKeyType/Gauge", GaugeKeyTypeTypeId, HistogramKeyTypeSymbolKey = "effect/MetricKeyType/Histogram", HistogramKeyTypeTypeId, SummaryKeyTypeSymbolKey = "effect/MetricKeyType/Summary", SummaryKeyTypeTypeId, metricKeyTypeVariance, CounterKeyType, FrequencyKeyTypeHash, FrequencyKeyType, GaugeKeyTypeHash, GaugeKeyType, HistogramKeyType, SummaryKeyType, counter2 = (options) => new CounterKeyType(options?.incremental ?? false, options?.bigint ?? false), frequency = (options) => new FrequencyKeyType(options?.preregisteredWords ?? []), gauge = (options) => new GaugeKeyType(options?.bigint ?? false), histogram = (boundaries) => {
  return new HistogramKeyType(boundaries);
}, summary = (options) => {
  return new SummaryKeyType(decode(options.maxAge), options.maxSize, options.error, options.quantiles);
}, isMetricKeyType = (u) => hasProperty(u, MetricKeyTypeTypeId), isCounterKey = (u) => hasProperty(u, CounterKeyTypeTypeId), isFrequencyKey = (u) => hasProperty(u, FrequencyKeyTypeTypeId), isGaugeKey = (u) => hasProperty(u, GaugeKeyTypeTypeId), isHistogramKey = (u) => hasProperty(u, HistogramKeyTypeTypeId), isSummaryKey = (u) => hasProperty(u, SummaryKeyTypeTypeId);
var init_keyType = __esm(() => {
  init_Duration();
  init_Equal();
  init_Function();
  init_Hash();
  init_Predicate();
  MetricKeyTypeTypeId = /* @__PURE__ */ Symbol.for(MetricKeyTypeSymbolKey);
  CounterKeyTypeTypeId = /* @__PURE__ */ Symbol.for(CounterKeyTypeSymbolKey);
  FrequencyKeyTypeTypeId = /* @__PURE__ */ Symbol.for(FrequencyKeyTypeSymbolKey);
  GaugeKeyTypeTypeId = /* @__PURE__ */ Symbol.for(GaugeKeyTypeSymbolKey);
  HistogramKeyTypeTypeId = /* @__PURE__ */ Symbol.for(HistogramKeyTypeSymbolKey);
  SummaryKeyTypeTypeId = /* @__PURE__ */ Symbol.for(SummaryKeyTypeSymbolKey);
  metricKeyTypeVariance = {
    _In: (_) => _,
    _Out: (_) => _
  };
  CounterKeyType = class CounterKeyType {
    incremental;
    bigint;
    [MetricKeyTypeTypeId] = metricKeyTypeVariance;
    [CounterKeyTypeTypeId] = CounterKeyTypeTypeId;
    constructor(incremental, bigint3) {
      this.incremental = incremental;
      this.bigint = bigint3;
      this._hash = string2(CounterKeyTypeSymbolKey);
    }
    _hash;
    [symbol2]() {
      return this._hash;
    }
    [symbol3](that) {
      return isCounterKey(that);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  FrequencyKeyTypeHash = /* @__PURE__ */ string2(FrequencyKeyTypeSymbolKey);
  FrequencyKeyType = class FrequencyKeyType {
    preregisteredWords;
    [MetricKeyTypeTypeId] = metricKeyTypeVariance;
    [FrequencyKeyTypeTypeId] = FrequencyKeyTypeTypeId;
    constructor(preregisteredWords) {
      this.preregisteredWords = preregisteredWords;
    }
    [symbol2]() {
      return FrequencyKeyTypeHash;
    }
    [symbol3](that) {
      return isFrequencyKey(that);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  GaugeKeyTypeHash = /* @__PURE__ */ string2(GaugeKeyTypeSymbolKey);
  GaugeKeyType = class GaugeKeyType {
    bigint;
    [MetricKeyTypeTypeId] = metricKeyTypeVariance;
    [GaugeKeyTypeTypeId] = GaugeKeyTypeTypeId;
    constructor(bigint3) {
      this.bigint = bigint3;
    }
    [symbol2]() {
      return GaugeKeyTypeHash;
    }
    [symbol3](that) {
      return isGaugeKey(that);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  HistogramKeyType = class HistogramKeyType {
    boundaries;
    [MetricKeyTypeTypeId] = metricKeyTypeVariance;
    [HistogramKeyTypeTypeId] = HistogramKeyTypeTypeId;
    constructor(boundaries) {
      this.boundaries = boundaries;
      this._hash = pipe(string2(HistogramKeyTypeSymbolKey), combine2(hash(this.boundaries)));
    }
    _hash;
    [symbol2]() {
      return this._hash;
    }
    [symbol3](that) {
      return isHistogramKey(that) && equals(this.boundaries, that.boundaries);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  SummaryKeyType = class SummaryKeyType {
    maxAge;
    maxSize;
    error;
    quantiles;
    [MetricKeyTypeTypeId] = metricKeyTypeVariance;
    [SummaryKeyTypeTypeId] = SummaryKeyTypeTypeId;
    constructor(maxAge, maxSize, error2, quantiles) {
      this.maxAge = maxAge;
      this.maxSize = maxSize;
      this.error = error2;
      this.quantiles = quantiles;
      this._hash = pipe(string2(SummaryKeyTypeSymbolKey), combine2(hash(this.maxAge)), combine2(hash(this.maxSize)), combine2(hash(this.error)), combine2(array2(this.quantiles)));
    }
    _hash;
    [symbol2]() {
      return this._hash;
    }
    [symbol3](that) {
      return isSummaryKey(that) && equals(this.maxAge, that.maxAge) && this.maxSize === that.maxSize && this.error === that.error && equals(this.quantiles, that.quantiles);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
});

// node_modules/effect/dist/esm/internal/metric/key.js
var MetricKeySymbolKey = "effect/MetricKey", MetricKeyTypeId, metricKeyVariance, arrayEquivilence, MetricKeyImpl, isMetricKey = (u) => hasProperty(u, MetricKeyTypeId), counter3 = (name, options) => new MetricKeyImpl(name, counter2(options), fromNullable2(options?.description)), frequency2 = (name, options) => new MetricKeyImpl(name, frequency(options), fromNullable2(options?.description)), gauge2 = (name, options) => new MetricKeyImpl(name, gauge(options), fromNullable2(options?.description)), histogram2 = (name, boundaries, description) => new MetricKeyImpl(name, histogram(boundaries), fromNullable2(description)), summary2 = (options) => new MetricKeyImpl(options.name, summary(options), fromNullable2(options.description)), tagged, taggedWithLabels;
var init_key = __esm(() => {
  init_Array();
  init_Equal();
  init_Function();
  init_Hash();
  init_Option();
  init_Predicate();
  init_keyType();
  init_label();
  MetricKeyTypeId = /* @__PURE__ */ Symbol.for(MetricKeySymbolKey);
  metricKeyVariance = {
    _Type: (_) => _
  };
  arrayEquivilence = /* @__PURE__ */ getEquivalence5(equals);
  MetricKeyImpl = class MetricKeyImpl {
    name;
    keyType;
    description;
    tags;
    [MetricKeyTypeId] = metricKeyVariance;
    constructor(name, keyType, description, tags = []) {
      this.name = name;
      this.keyType = keyType;
      this.description = description;
      this.tags = tags;
      this._hash = pipe(string2(this.name + this.description), combine2(hash(this.keyType)), combine2(array2(this.tags)));
    }
    _hash;
    [symbol2]() {
      return this._hash;
    }
    [symbol3](u) {
      return isMetricKey(u) && this.name === u.name && equals(this.keyType, u.keyType) && equals(this.description, u.description) && arrayEquivilence(this.tags, u.tags);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  tagged = /* @__PURE__ */ dual(3, (self, key, value) => taggedWithLabels(self, [make39(key, value)]));
  taggedWithLabels = /* @__PURE__ */ dual(2, (self, extraTags) => extraTags.length === 0 ? self : new MetricKeyImpl(self.name, self.keyType, self.description, union2(self.tags, extraTags)));
});

// node_modules/effect/dist/esm/internal/metric/state.js
var MetricStateSymbolKey = "effect/MetricState", MetricStateTypeId, CounterStateSymbolKey = "effect/MetricState/Counter", CounterStateTypeId, FrequencyStateSymbolKey = "effect/MetricState/Frequency", FrequencyStateTypeId, GaugeStateSymbolKey = "effect/MetricState/Gauge", GaugeStateTypeId, HistogramStateSymbolKey = "effect/MetricState/Histogram", HistogramStateTypeId, SummaryStateSymbolKey = "effect/MetricState/Summary", SummaryStateTypeId, metricStateVariance, CounterState, arrayEquals, FrequencyState, GaugeState, HistogramState, SummaryState, counter4 = (count) => new CounterState(count), frequency3 = (occurrences) => {
  return new FrequencyState(occurrences);
}, gauge3 = (count) => new GaugeState(count), histogram3 = (options) => new HistogramState(options.buckets, options.count, options.min, options.max, options.sum), summary3 = (options) => new SummaryState(options.error, options.quantiles, options.count, options.min, options.max, options.sum), isMetricState = (u) => hasProperty(u, MetricStateTypeId), isCounterState = (u) => hasProperty(u, CounterStateTypeId), isFrequencyState = (u) => hasProperty(u, FrequencyStateTypeId), isGaugeState = (u) => hasProperty(u, GaugeStateTypeId), isHistogramState = (u) => hasProperty(u, HistogramStateTypeId), isSummaryState = (u) => hasProperty(u, SummaryStateTypeId);
var init_state = __esm(() => {
  init_Array();
  init_Equal();
  init_Function();
  init_Hash();
  init_Predicate();
  MetricStateTypeId = /* @__PURE__ */ Symbol.for(MetricStateSymbolKey);
  CounterStateTypeId = /* @__PURE__ */ Symbol.for(CounterStateSymbolKey);
  FrequencyStateTypeId = /* @__PURE__ */ Symbol.for(FrequencyStateSymbolKey);
  GaugeStateTypeId = /* @__PURE__ */ Symbol.for(GaugeStateSymbolKey);
  HistogramStateTypeId = /* @__PURE__ */ Symbol.for(HistogramStateSymbolKey);
  SummaryStateTypeId = /* @__PURE__ */ Symbol.for(SummaryStateSymbolKey);
  metricStateVariance = {
    _A: (_) => _
  };
  CounterState = class CounterState {
    count;
    [MetricStateTypeId] = metricStateVariance;
    [CounterStateTypeId] = CounterStateTypeId;
    constructor(count) {
      this.count = count;
    }
    [symbol2]() {
      return pipe(hash(CounterStateSymbolKey), combine2(hash(this.count)), cached(this));
    }
    [symbol3](that) {
      return isCounterState(that) && this.count === that.count;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  arrayEquals = /* @__PURE__ */ getEquivalence5(equals);
  FrequencyState = class FrequencyState {
    occurrences;
    [MetricStateTypeId] = metricStateVariance;
    [FrequencyStateTypeId] = FrequencyStateTypeId;
    constructor(occurrences) {
      this.occurrences = occurrences;
    }
    _hash;
    [symbol2]() {
      return pipe(string2(FrequencyStateSymbolKey), combine2(array2(fromIterable2(this.occurrences.entries()))), cached(this));
    }
    [symbol3](that) {
      return isFrequencyState(that) && arrayEquals(fromIterable2(this.occurrences.entries()), fromIterable2(that.occurrences.entries()));
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  GaugeState = class GaugeState {
    value;
    [MetricStateTypeId] = metricStateVariance;
    [GaugeStateTypeId] = GaugeStateTypeId;
    constructor(value) {
      this.value = value;
    }
    [symbol2]() {
      return pipe(hash(GaugeStateSymbolKey), combine2(hash(this.value)), cached(this));
    }
    [symbol3](u) {
      return isGaugeState(u) && this.value === u.value;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  HistogramState = class HistogramState {
    buckets;
    count;
    min;
    max;
    sum;
    [MetricStateTypeId] = metricStateVariance;
    [HistogramStateTypeId] = HistogramStateTypeId;
    constructor(buckets, count, min7, max8, sum5) {
      this.buckets = buckets;
      this.count = count;
      this.min = min7;
      this.max = max8;
      this.sum = sum5;
    }
    [symbol2]() {
      return pipe(hash(HistogramStateSymbolKey), combine2(hash(this.buckets)), combine2(hash(this.count)), combine2(hash(this.min)), combine2(hash(this.max)), combine2(hash(this.sum)), cached(this));
    }
    [symbol3](that) {
      return isHistogramState(that) && equals(this.buckets, that.buckets) && this.count === that.count && this.min === that.min && this.max === that.max && this.sum === that.sum;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  SummaryState = class SummaryState {
    error;
    quantiles;
    count;
    min;
    max;
    sum;
    [MetricStateTypeId] = metricStateVariance;
    [SummaryStateTypeId] = SummaryStateTypeId;
    constructor(error2, quantiles, count, min7, max8, sum5) {
      this.error = error2;
      this.quantiles = quantiles;
      this.count = count;
      this.min = min7;
      this.max = max8;
      this.sum = sum5;
    }
    [symbol2]() {
      return pipe(hash(SummaryStateSymbolKey), combine2(hash(this.error)), combine2(hash(this.quantiles)), combine2(hash(this.count)), combine2(hash(this.min)), combine2(hash(this.max)), combine2(hash(this.sum)), cached(this));
    }
    [symbol3](that) {
      return isSummaryState(that) && this.error === that.error && equals(this.quantiles, that.quantiles) && this.count === that.count && this.min === that.min && this.max === that.max && this.sum === that.sum;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
});

// node_modules/effect/dist/esm/internal/metric/hook.js
var MetricHookSymbolKey = "effect/MetricHook", MetricHookTypeId, metricHookVariance, make41 = (options) => ({
  [MetricHookTypeId]: metricHookVariance,
  pipe() {
    return pipeArguments(this, arguments);
  },
  ...options
}), onModify, onUpdate, bigint05, counter5 = (key) => {
  let sum5 = key.keyType.bigint ? bigint05 : 0;
  const canUpdate = key.keyType.incremental ? key.keyType.bigint ? (value) => value >= bigint05 : (value) => value >= 0 : (_value) => true;
  const update5 = (value) => {
    if (canUpdate(value)) {
      sum5 = sum5 + value;
    }
  };
  return make41({
    get: () => counter4(sum5),
    update: update5,
    modify: update5
  });
}, frequency4 = (key) => {
  const values7 = new Map;
  for (const word of key.keyType.preregisteredWords) {
    values7.set(word, 0);
  }
  const update5 = (word) => {
    const slotCount = values7.get(word) ?? 0;
    values7.set(word, slotCount + 1);
  };
  return make41({
    get: () => frequency3(values7),
    update: update5,
    modify: update5
  });
}, gauge4 = (_key, startAt) => {
  let value = startAt;
  return make41({
    get: () => gauge3(value),
    update: (v) => {
      value = v;
    },
    modify: (v) => {
      value = value + v;
    }
  });
}, histogram4 = (key) => {
  const bounds = key.keyType.boundaries.values;
  const size11 = bounds.length;
  const values7 = new Uint32Array(size11 + 1);
  const boundaries = new Float32Array(size11);
  let count = 0;
  let sum5 = 0;
  let min7 = Number.MAX_VALUE;
  let max8 = Number.MIN_VALUE;
  pipe(bounds, sort(Order), map6((n, i2) => {
    boundaries[i2] = n;
  }));
  const update5 = (value) => {
    let from = 0;
    let to = size11;
    while (from !== to) {
      const mid = Math.floor(from + (to - from) / 2);
      const boundary = boundaries[mid];
      if (value <= boundary) {
        to = mid;
      } else {
        from = mid;
      }
      if (to === from + 1) {
        if (value <= boundaries[from]) {
          to = from;
        } else {
          from = to;
        }
      }
    }
    values7[from] = values7[from] + 1;
    count = count + 1;
    sum5 = sum5 + value;
    if (value < min7) {
      min7 = value;
    }
    if (value > max8) {
      max8 = value;
    }
  };
  const getBuckets = () => {
    const builder = allocate(size11);
    let cumulated = 0;
    for (let i2 = 0;i2 < size11; i2++) {
      const boundary = boundaries[i2];
      const value = values7[i2];
      cumulated = cumulated + value;
      builder[i2] = [boundary, cumulated];
    }
    return builder;
  };
  return make41({
    get: () => histogram3({
      buckets: getBuckets(),
      count,
      min: min7,
      max: max8,
      sum: sum5
    }),
    update: update5,
    modify: update5
  });
}, summary4 = (key) => {
  const {
    error: error2,
    maxAge,
    maxSize,
    quantiles
  } = key.keyType;
  const sortedQuantiles = pipe(quantiles, sort(Order));
  const values7 = allocate(maxSize);
  let head7 = 0;
  let count = 0;
  let sum5 = 0;
  let min7 = Number.MAX_VALUE;
  let max8 = Number.MIN_VALUE;
  const snapshot = (now) => {
    const builder = [];
    let i2 = 0;
    while (i2 !== maxSize - 1) {
      const item = values7[i2];
      if (item != null) {
        const [t, v] = item;
        const age = millis(now - t);
        if (greaterThanOrEqualTo5(age, zero2) && lessThanOrEqualTo5(age, maxAge)) {
          builder.push(v);
        }
      }
      i2 = i2 + 1;
    }
    return calculateQuantiles(error2, sortedQuantiles, sort(builder, Order));
  };
  const observe = (value, timestamp) => {
    if (maxSize > 0) {
      head7 = head7 + 1;
      const target = head7 % maxSize;
      values7[target] = [timestamp, value];
    }
    count = count + 1;
    sum5 = sum5 + value;
    if (value < min7) {
      min7 = value;
    }
    if (value > max8) {
      max8 = value;
    }
  };
  return make41({
    get: () => summary3({
      error: error2,
      quantiles: snapshot(Date.now()),
      count,
      min: min7,
      max: max8,
      sum: sum5
    }),
    update: ([value, timestamp]) => observe(value, timestamp),
    modify: ([value, timestamp]) => observe(value, timestamp)
  });
}, calculateQuantiles = (error2, sortedQuantiles, sortedSamples) => {
  const sampleCount = sortedSamples.length;
  if (!isNonEmptyReadonlyArray(sortedQuantiles)) {
    return empty4();
  }
  const head7 = sortedQuantiles[0];
  const tail5 = sortedQuantiles.slice(1);
  const resolvedHead = resolveQuantile(error2, sampleCount, none2(), 0, head7, sortedSamples);
  const resolved = of2(resolvedHead);
  tail5.forEach((quantile) => {
    resolved.push(resolveQuantile(error2, sampleCount, resolvedHead.value, resolvedHead.consumed, quantile, resolvedHead.rest));
  });
  return map6(resolved, (rq) => [rq.quantile, rq.value]);
}, resolveQuantile = (error2, sampleCount, current, consumed, quantile, rest) => {
  let error_1 = error2;
  let sampleCount_1 = sampleCount;
  let current_1 = current;
  let consumed_1 = consumed;
  let quantile_1 = quantile;
  let rest_1 = rest;
  let error_2 = error2;
  let sampleCount_2 = sampleCount;
  let current_2 = current;
  let consumed_2 = consumed;
  let quantile_2 = quantile;
  let rest_2 = rest;
  while (true) {
    if (!isNonEmptyReadonlyArray(rest_1)) {
      return {
        quantile: quantile_1,
        value: none2(),
        consumed: consumed_1,
        rest: []
      };
    }
    if (quantile_1 === 1) {
      return {
        quantile: quantile_1,
        value: some3(lastNonEmpty(rest_1)),
        consumed: consumed_1 + rest_1.length,
        rest: []
      };
    }
    const sameHead = span(rest_1, (n) => n <= rest_1[0]);
    const desired = quantile_1 * sampleCount_1;
    const allowedError = error_1 / 2 * desired;
    const candConsumed = consumed_1 + sameHead[0].length;
    const candError = Math.abs(candConsumed - desired);
    if (candConsumed < desired - allowedError) {
      error_2 = error_1;
      sampleCount_2 = sampleCount_1;
      current_2 = head2(rest_1);
      consumed_2 = candConsumed;
      quantile_2 = quantile_1;
      rest_2 = sameHead[1];
      error_1 = error_2;
      sampleCount_1 = sampleCount_2;
      current_1 = current_2;
      consumed_1 = consumed_2;
      quantile_1 = quantile_2;
      rest_1 = rest_2;
      continue;
    }
    if (candConsumed > desired + allowedError) {
      return {
        quantile: quantile_1,
        value: current_1,
        consumed: consumed_1,
        rest: rest_1
      };
    }
    switch (current_1._tag) {
      case "None": {
        error_2 = error_1;
        sampleCount_2 = sampleCount_1;
        current_2 = head2(rest_1);
        consumed_2 = candConsumed;
        quantile_2 = quantile_1;
        rest_2 = sameHead[1];
        error_1 = error_2;
        sampleCount_1 = sampleCount_2;
        current_1 = current_2;
        consumed_1 = consumed_2;
        quantile_1 = quantile_2;
        rest_1 = rest_2;
        continue;
      }
      case "Some": {
        const prevError = Math.abs(desired - current_1.value);
        if (candError < prevError) {
          error_2 = error_1;
          sampleCount_2 = sampleCount_1;
          current_2 = head2(rest_1);
          consumed_2 = candConsumed;
          quantile_2 = quantile_1;
          rest_2 = sameHead[1];
          error_1 = error_2;
          sampleCount_1 = sampleCount_2;
          current_1 = current_2;
          consumed_1 = consumed_2;
          quantile_1 = quantile_2;
          rest_1 = rest_2;
          continue;
        }
        return {
          quantile: quantile_1,
          value: some3(current_1.value),
          consumed: consumed_1,
          rest: rest_1
        };
      }
    }
  }
  throw new Error("BUG: MetricHook.resolveQuantiles - please report an issue at https://github.com/Effect-TS/effect/issues");
};
var init_hook = __esm(() => {
  init_Array();
  init_Duration();
  init_Function();
  init_Number();
  init_Option();
  init_state();
  MetricHookTypeId = /* @__PURE__ */ Symbol.for(MetricHookSymbolKey);
  metricHookVariance = {
    _In: (_) => _,
    _Out: (_) => _
  };
  onModify = /* @__PURE__ */ dual(2, (self, f) => ({
    [MetricHookTypeId]: metricHookVariance,
    pipe() {
      return pipeArguments(this, arguments);
    },
    get: self.get,
    update: self.update,
    modify: (input) => {
      self.modify(input);
      return f(input);
    }
  }));
  onUpdate = /* @__PURE__ */ dual(2, (self, f) => ({
    [MetricHookTypeId]: metricHookVariance,
    pipe() {
      return pipeArguments(this, arguments);
    },
    get: self.get,
    update: (input) => {
      self.update(input);
      return f(input);
    },
    modify: self.modify
  }));
  bigint05 = /* @__PURE__ */ BigInt(0);
});

// node_modules/effect/dist/esm/internal/metric/pair.js
var MetricPairSymbolKey = "effect/MetricPair", MetricPairTypeId, metricPairVariance, make42 = (metricKey, metricState) => {
  return {
    [MetricPairTypeId]: metricPairVariance,
    metricKey,
    metricState,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
}, unsafeMake10 = (metricKey, metricState) => {
  return {
    [MetricPairTypeId]: metricPairVariance,
    metricKey,
    metricState,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
};
var init_pair = __esm(() => {
  MetricPairTypeId = /* @__PURE__ */ Symbol.for(MetricPairSymbolKey);
  metricPairVariance = {
    _Type: (_) => _
  };
});

// node_modules/effect/dist/esm/internal/metric/registry.js
var MetricRegistrySymbolKey = "effect/MetricRegistry", MetricRegistryTypeId, MetricRegistryImpl, make43 = () => {
  return new MetricRegistryImpl;
};
var init_registry = __esm(() => {
  init_Function();
  init_MutableHashMap();
  init_Option();
  init_hook();
  init_keyType();
  init_pair();
  MetricRegistryTypeId = /* @__PURE__ */ Symbol.for(MetricRegistrySymbolKey);
  MetricRegistryImpl = class MetricRegistryImpl {
    [MetricRegistryTypeId] = MetricRegistryTypeId;
    map = /* @__PURE__ */ empty23();
    snapshot() {
      const result2 = [];
      for (const [key, hook] of this.map) {
        result2.push(unsafeMake10(key, hook.get()));
      }
      return result2;
    }
    get(key) {
      const hook = pipe(this.map, get10(key), getOrUndefined2);
      if (hook == null) {
        if (isCounterKey(key.keyType)) {
          return this.getCounter(key);
        }
        if (isGaugeKey(key.keyType)) {
          return this.getGauge(key);
        }
        if (isFrequencyKey(key.keyType)) {
          return this.getFrequency(key);
        }
        if (isHistogramKey(key.keyType)) {
          return this.getHistogram(key);
        }
        if (isSummaryKey(key.keyType)) {
          return this.getSummary(key);
        }
        throw new Error("BUG: MetricRegistry.get - unknown MetricKeyType - please report an issue at https://github.com/Effect-TS/effect/issues");
      } else {
        return hook;
      }
    }
    getCounter(key) {
      let value = pipe(this.map, get10(key), getOrUndefined2);
      if (value == null) {
        const counter6 = counter5(key);
        if (!pipe(this.map, has6(key))) {
          pipe(this.map, set5(key, counter6));
        }
        value = counter6;
      }
      return value;
    }
    getFrequency(key) {
      let value = pipe(this.map, get10(key), getOrUndefined2);
      if (value == null) {
        const frequency5 = frequency4(key);
        if (!pipe(this.map, has6(key))) {
          pipe(this.map, set5(key, frequency5));
        }
        value = frequency5;
      }
      return value;
    }
    getGauge(key) {
      let value = pipe(this.map, get10(key), getOrUndefined2);
      if (value == null) {
        const gauge5 = gauge4(key, key.keyType.bigint ? BigInt(0) : 0);
        if (!pipe(this.map, has6(key))) {
          pipe(this.map, set5(key, gauge5));
        }
        value = gauge5;
      }
      return value;
    }
    getHistogram(key) {
      let value = pipe(this.map, get10(key), getOrUndefined2);
      if (value == null) {
        const histogram5 = histogram4(key);
        if (!pipe(this.map, has6(key))) {
          pipe(this.map, set5(key, histogram5));
        }
        value = histogram5;
      }
      return value;
    }
    getSummary(key) {
      let value = pipe(this.map, get10(key), getOrUndefined2);
      if (value == null) {
        const summary5 = summary4(key);
        if (!pipe(this.map, has6(key))) {
          pipe(this.map, set5(key, summary5));
        }
        value = summary5;
      }
      return value;
    }
  };
});

// node_modules/effect/dist/esm/internal/metric.js
var MetricSymbolKey = "effect/Metric", MetricTypeId, metricVariance, globalMetricRegistry, make44 = function(keyType, unsafeUpdate, unsafeValue, unsafeModify) {
  const metric = Object.assign((effect) => tap2(effect, (a) => update5(metric, a)), {
    [MetricTypeId]: metricVariance,
    keyType,
    unsafeUpdate,
    unsafeValue,
    unsafeModify,
    register() {
      this.unsafeValue([]);
      return this;
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  });
  return metric;
}, mapInput5, counter6 = (name, options) => fromMetricKey(counter3(name, options)), frequency5 = (name, options) => fromMetricKey(frequency2(name, options)), withConstantInput, fromMetricKey = (key) => {
  let untaggedHook;
  const hookCache = new WeakMap;
  const hook = (extraTags) => {
    if (extraTags.length === 0) {
      if (untaggedHook !== undefined) {
        return untaggedHook;
      }
      untaggedHook = globalMetricRegistry.get(key);
      return untaggedHook;
    }
    let hook2 = hookCache.get(extraTags);
    if (hook2 !== undefined) {
      return hook2;
    }
    hook2 = globalMetricRegistry.get(taggedWithLabels(key, extraTags));
    hookCache.set(extraTags, hook2);
    return hook2;
  };
  return make44(key.keyType, (input, extraTags) => hook(extraTags).update(input), (extraTags) => hook(extraTags).get(), (input, extraTags) => hook(extraTags).modify(input));
}, gauge5 = (name, options) => fromMetricKey(gauge2(name, options)), histogram5 = (name, boundaries, description) => fromMetricKey(histogram2(name, boundaries, description)), increment4 = (self) => isCounterKey(self.keyType) ? update5(self, self.keyType.bigint ? BigInt(1) : 1) : modify9(self, self.keyType.bigint ? BigInt(1) : 1), incrementBy, map20, mapType2, modify9, set8, succeed7 = (out) => make44(undefined, constVoid, () => out, constVoid), sync5 = (evaluate2) => make44(undefined, constVoid, evaluate2, constVoid), summary5 = (options) => withNow(summaryTimestamp(options)), summaryTimestamp = (options) => fromMetricKey(summary2(options)), tagged2, taggedWithLabelsInput, taggedWithLabels2, timer2 = (name, description) => {
  const boundaries = exponential({
    start: 0.5,
    factor: 2,
    count: 35
  });
  const base = pipe(histogram5(name, boundaries, description), tagged2("time_unit", "milliseconds"));
  return mapInput5(base, toMillis);
}, timerWithBoundaries = (name, boundaries, description) => {
  const base = pipe(histogram5(name, fromIterable11(boundaries), description), tagged2("time_unit", "milliseconds"));
  return mapInput5(base, toMillis);
}, trackAll, trackDefect, trackDefectWith, trackDuration, trackDurationWith, trackError, trackErrorWith, trackSuccess, trackSuccessWith, update5, value = (self) => fiberRefGetWith(currentMetricLabels, (tags) => sync(() => self.unsafeValue(tags))), withNow = (self) => mapInput5(self, (input) => [input, Date.now()]), zip9, unsafeSnapshot = () => globalMetricRegistry.snapshot(), snapshot;
var init_metric = __esm(() => {
  init_Array();
  init_Clock();
  init_Duration();
  init_Function();
  init_GlobalValue();
  init_cause();
  init_core_effect();
  init_core();
  init_boundaries();
  init_key();
  init_keyType();
  init_label();
  init_registry();
  MetricTypeId = /* @__PURE__ */ Symbol.for(MetricSymbolKey);
  metricVariance = {
    _Type: (_) => _,
    _In: (_) => _,
    _Out: (_) => _
  };
  globalMetricRegistry = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Metric/globalMetricRegistry"), () => make43());
  mapInput5 = /* @__PURE__ */ dual(2, (self, f) => make44(self.keyType, (input, extraTags) => self.unsafeUpdate(f(input), extraTags), self.unsafeValue, (input, extraTags) => self.unsafeModify(f(input), extraTags)));
  withConstantInput = /* @__PURE__ */ dual(2, (self, input) => mapInput5(self, () => input));
  incrementBy = /* @__PURE__ */ dual(2, (self, amount) => isCounterKey(self.keyType) ? update5(self, amount) : modify9(self, amount));
  map20 = /* @__PURE__ */ dual(2, (self, f) => make44(self.keyType, self.unsafeUpdate, (extraTags) => f(self.unsafeValue(extraTags)), self.unsafeModify));
  mapType2 = /* @__PURE__ */ dual(2, (self, f) => make44(f(self.keyType), self.unsafeUpdate, self.unsafeValue, self.unsafeModify));
  modify9 = /* @__PURE__ */ dual(2, (self, input) => fiberRefGetWith(currentMetricLabels, (tags) => sync(() => self.unsafeModify(input, tags))));
  set8 = /* @__PURE__ */ dual(2, (self, value) => update5(self, value));
  tagged2 = /* @__PURE__ */ dual(3, (self, key, value) => taggedWithLabels2(self, [make39(key, value)]));
  taggedWithLabelsInput = /* @__PURE__ */ dual(2, (self, f) => map20(make44(self.keyType, (input, extraTags) => self.unsafeUpdate(input, union2(f(input), extraTags)), self.unsafeValue, (input, extraTags) => self.unsafeModify(input, union2(f(input), extraTags))), constVoid));
  taggedWithLabels2 = /* @__PURE__ */ dual(2, (self, extraTags) => {
    return make44(self.keyType, (input, extraTags1) => self.unsafeUpdate(input, union2(extraTags, extraTags1)), (extraTags1) => self.unsafeValue(union2(extraTags, extraTags1)), (input, extraTags1) => self.unsafeModify(input, union2(extraTags, extraTags1)));
  });
  trackAll = /* @__PURE__ */ dual(2, (self, input) => (effect) => matchCauseEffect(effect, {
    onFailure: (cause2) => zipRight2(update5(self, input), failCause(cause2)),
    onSuccess: (value) => zipRight2(update5(self, input), succeed(value))
  }));
  trackDefect = /* @__PURE__ */ dual(2, (self, metric) => trackDefectWith(self, metric, identity));
  trackDefectWith = /* @__PURE__ */ dual(3, (self, metric, f) => {
    const updater = (defect) => update5(metric, f(defect));
    return tapDefect(self, (cause2) => forEachSequentialDiscard(defects(cause2), updater));
  });
  trackDuration = /* @__PURE__ */ dual(2, (self, metric) => trackDurationWith(self, metric, identity));
  trackDurationWith = /* @__PURE__ */ dual(3, (self, metric, f) => clockWith2((clock2) => {
    const startTime = clock2.unsafeCurrentTimeNanos();
    return tap2(self, (_) => {
      const endTime = clock2.unsafeCurrentTimeNanos();
      const duration = nanos(endTime - startTime);
      return update5(metric, f(duration));
    });
  }));
  trackError = /* @__PURE__ */ dual(2, (self, metric) => trackErrorWith(self, metric, (a) => a));
  trackErrorWith = /* @__PURE__ */ dual(3, (self, metric, f) => {
    const updater = (error2) => update5(metric, f(error2));
    return tapError(self, updater);
  });
  trackSuccess = /* @__PURE__ */ dual(2, (self, metric) => trackSuccessWith(self, metric, (a) => a));
  trackSuccessWith = /* @__PURE__ */ dual(3, (self, metric, f) => {
    const updater = (value) => update5(metric, f(value));
    return tap2(self, updater);
  });
  update5 = /* @__PURE__ */ dual(2, (self, input) => fiberRefGetWith(currentMetricLabels, (tags) => sync(() => self.unsafeUpdate(input, tags))));
  zip9 = /* @__PURE__ */ dual(2, (self, that) => make44([self.keyType, that.keyType], (input, extraTags) => {
    const [l, r] = input;
    self.unsafeUpdate(l, extraTags);
    that.unsafeUpdate(r, extraTags);
  }, (extraTags) => [self.unsafeValue(extraTags), that.unsafeValue(extraTags)], (input, extraTags) => {
    const [l, r] = input;
    self.unsafeModify(l, extraTags);
    that.unsafeModify(r, extraTags);
  }));
  snapshot = /* @__PURE__ */ sync(unsafeSnapshot);
});

// node_modules/effect/dist/esm/internal/request.js
class Listeners {
  count = 0;
  observers = /* @__PURE__ */ new Set;
  interrupted = false;
  addObserver(f) {
    this.observers.add(f);
  }
  removeObserver(f) {
    this.observers.delete(f);
  }
  increment() {
    this.count++;
    this.observers.forEach((f) => f(this.count));
  }
  decrement() {
    this.count--;
    this.observers.forEach((f) => f(this.count));
  }
}
var RequestSymbolKey = "effect/Request", RequestTypeId, requestVariance, RequestPrototype, isRequest = (u) => hasProperty(u, RequestTypeId), of5 = () => (args2) => Object.assign(Object.create(RequestPrototype), args2), tagged3 = (tag) => (args2) => {
  const request = Object.assign(Object.create(RequestPrototype), args2);
  request._tag = tag;
  return request;
}, Class3, TaggedClass = (tag) => {
  return class TaggedClass2 extends Class3 {
    _tag = tag;
  };
}, complete2, completeEffect, fail7, failCause6, succeed8;
var init_request = __esm(() => {
  init_Function();
  init_Predicate();
  init_completedRequestMap();
  init_core();
  init_effectable();
  RequestTypeId = /* @__PURE__ */ Symbol.for(RequestSymbolKey);
  requestVariance = {
    _E: (_) => _,
    _A: (_) => _
  };
  RequestPrototype = {
    ...StructuralPrototype,
    [RequestTypeId]: requestVariance
  };
  Class3 = /* @__PURE__ */ function() {
    function Class4(args2) {
      if (args2) {
        Object.assign(this, args2);
      }
    }
    Class4.prototype = RequestPrototype;
    return Class4;
  }();
  complete2 = /* @__PURE__ */ dual(2, (self, result2) => fiberRefGetWith(currentRequestMap, (map21) => sync(() => {
    if (map21.has(self)) {
      const entry = map21.get(self);
      if (!entry.state.completed) {
        entry.state.completed = true;
        deferredUnsafeDone(entry.result, result2);
      }
    }
  })));
  completeEffect = /* @__PURE__ */ dual(2, (self, effect) => matchEffect(effect, {
    onFailure: (error2) => complete2(self, exitFail(error2)),
    onSuccess: (value2) => complete2(self, exitSucceed(value2))
  }));
  fail7 = /* @__PURE__ */ dual(2, (self, error2) => complete2(self, exitFail(error2)));
  failCause6 = /* @__PURE__ */ dual(2, (self, cause2) => complete2(self, exitFailCause(cause2)));
  succeed8 = /* @__PURE__ */ dual(2, (self, value2) => complete2(self, exitSucceed(value2)));
});

// node_modules/effect/dist/esm/internal/redBlackTree/iterator.js
class RedBlackTreeIterator {
  self;
  stack;
  direction;
  count = 0;
  constructor(self, stack, direction) {
    this.self = self;
    this.stack = stack;
    this.direction = direction;
  }
  clone() {
    return new RedBlackTreeIterator(this.self, this.stack.slice(), this.direction);
  }
  reversed() {
    return new RedBlackTreeIterator(this.self, this.stack.slice(), this.direction === Direction.Forward ? Direction.Backward : Direction.Forward);
  }
  next() {
    const entry = this.entry;
    this.count++;
    if (this.direction === Direction.Forward) {
      this.moveNext();
    } else {
      this.movePrev();
    }
    switch (entry._tag) {
      case "None": {
        return {
          done: true,
          value: this.count
        };
      }
      case "Some": {
        return {
          done: false,
          value: entry.value
        };
      }
    }
  }
  get key() {
    if (this.stack.length > 0) {
      return some3(this.stack[this.stack.length - 1].key);
    }
    return none2();
  }
  get value() {
    if (this.stack.length > 0) {
      return some3(this.stack[this.stack.length - 1].value);
    }
    return none2();
  }
  get entry() {
    return map2(last(this.stack), (node) => [node.key, node.value]);
  }
  get index() {
    let idx = 0;
    const stack = this.stack;
    if (stack.length === 0) {
      const r = this.self._root;
      if (r != null) {
        return r.count;
      }
      return 0;
    } else if (stack[stack.length - 1].left != null) {
      idx = stack[stack.length - 1].left.count;
    }
    for (let s = stack.length - 2;s >= 0; --s) {
      if (stack[s + 1] === stack[s].right) {
        ++idx;
        if (stack[s].left != null) {
          idx += stack[s].left.count;
        }
      }
    }
    return idx;
  }
  moveNext() {
    const stack = this.stack;
    if (stack.length === 0) {
      return;
    }
    let n = stack[stack.length - 1];
    if (n.right != null) {
      n = n.right;
      while (n != null) {
        stack.push(n);
        n = n.left;
      }
    } else {
      stack.pop();
      while (stack.length > 0 && stack[stack.length - 1].right === n) {
        n = stack[stack.length - 1];
        stack.pop();
      }
    }
  }
  get hasNext() {
    const stack = this.stack;
    if (stack.length === 0) {
      return false;
    }
    if (stack[stack.length - 1].right != null) {
      return true;
    }
    for (let s = stack.length - 1;s > 0; --s) {
      if (stack[s - 1].left === stack[s]) {
        return true;
      }
    }
    return false;
  }
  movePrev() {
    const stack = this.stack;
    if (stack.length === 0) {
      return;
    }
    let n = stack[stack.length - 1];
    if (n != null && n.left != null) {
      n = n.left;
      while (n != null) {
        stack.push(n);
        n = n.right;
      }
    } else {
      stack.pop();
      while (stack.length > 0 && stack[stack.length - 1].left === n) {
        n = stack[stack.length - 1];
        stack.pop();
      }
    }
  }
  get hasPrev() {
    const stack = this.stack;
    if (stack.length === 0) {
      return false;
    }
    if (stack[stack.length - 1].left != null) {
      return true;
    }
    for (let s = stack.length - 1;s > 0; --s) {
      if (stack[s - 1].right === stack[s]) {
        return true;
      }
    }
    return false;
  }
}
var Direction;
var init_iterator = __esm(() => {
  init_Array();
  init_Option();
  Direction = {
    Forward: 0,
    Backward: 1 << 0
  };
});

// node_modules/effect/dist/esm/internal/redBlackTree/node.js
function swap3(n, v) {
  n.key = v.key;
  n.value = v.value;
  n.left = v.left;
  n.right = v.right;
  n.color = v.color;
  n.count = v.count;
}
var Color, clone2 = ({
  color,
  count,
  key,
  left: left3,
  right: right3,
  value: value2
}) => ({
  color,
  key,
  value: value2,
  left: left3,
  right: right3,
  count
}), repaint = ({
  count,
  key,
  left: left3,
  right: right3,
  value: value2
}, color) => ({
  color,
  key,
  value: value2,
  left: left3,
  right: right3,
  count
}), recount = (node) => {
  node.count = 1 + (node.left?.count ?? 0) + (node.right?.count ?? 0);
};
var init_node2 = __esm(() => {
  Color = {
    Red: 0,
    Black: 1 << 0
  };
});

// node_modules/effect/dist/esm/internal/redBlackTree.js
var RedBlackTreeSymbolKey = "effect/RedBlackTree", RedBlackTreeTypeId, redBlackTreeVariance, RedBlackTreeProto, makeImpl3 = (ord, root) => {
  const tree = Object.create(RedBlackTreeProto);
  tree._ord = ord;
  tree._root = root;
  return tree;
}, isRedBlackTree = (u) => hasProperty(u, RedBlackTreeTypeId), empty30 = (ord) => makeImpl3(ord, undefined), fromIterable12, make45 = (ord) => (...entries3) => {
  return fromIterable12(entries3, ord);
}, atBackwards, atForwards, at2 = (self, index, direction) => {
  return {
    [Symbol.iterator]: () => {
      if (index < 0) {
        return new RedBlackTreeIterator(self, [], direction);
      }
      let node = self._root;
      const stack = [];
      while (node !== undefined) {
        stack.push(node);
        if (node.left !== undefined) {
          if (index < node.left.count) {
            node = node.left;
            continue;
          }
          index -= node.left.count;
        }
        if (!index) {
          return new RedBlackTreeIterator(self, stack, direction);
        }
        index -= 1;
        if (node.right !== undefined) {
          if (index >= node.right.count) {
            break;
          }
          node = node.right;
        } else {
          break;
        }
      }
      return new RedBlackTreeIterator(self, [], direction);
    }
  };
}, findAll, findFirst8, first = (self) => {
  let node = self._root;
  let current = self._root;
  while (node !== undefined) {
    current = node;
    node = node.left;
  }
  return current ? some3([current.key, current.value]) : none2();
}, getAt, getOrder4 = (tree) => tree._ord, has7, insert, keysForward = (self) => keys5(self, Direction.Forward), keysBackward = (self) => keys5(self, Direction.Backward), keys5 = (self, direction) => {
  const begin = self[Symbol.iterator]();
  let count = 0;
  return {
    [Symbol.iterator]: () => keys5(self, direction),
    next: () => {
      count++;
      const entry = begin.key;
      if (direction === Direction.Forward) {
        begin.moveNext();
      } else {
        begin.movePrev();
      }
      switch (entry._tag) {
        case "None": {
          return {
            done: true,
            value: count
          };
        }
        case "Some": {
          return {
            done: false,
            value: entry.value
          };
        }
      }
    }
  };
}, last4 = (self) => {
  let node = self._root;
  let current = self._root;
  while (node !== undefined) {
    current = node;
    node = node.right;
  }
  return current ? some3([current.key, current.value]) : none2();
}, reversed = (self) => {
  return {
    [Symbol.iterator]: () => {
      const stack = [];
      let node = self._root;
      while (node !== undefined) {
        stack.push(node);
        node = node.right;
      }
      return new RedBlackTreeIterator(self, stack, Direction.Backward);
    }
  };
}, greaterThanBackwards, greaterThanForwards, greaterThan7 = (self, key, direction) => {
  return {
    [Symbol.iterator]: () => {
      const cmp = self._ord;
      let node = self._root;
      const stack = [];
      let last_ptr = 0;
      while (node !== undefined) {
        const d = cmp(key, node.key);
        stack.push(node);
        if (d < 0) {
          last_ptr = stack.length;
        }
        if (d < 0) {
          node = node.left;
        } else {
          node = node.right;
        }
      }
      stack.length = last_ptr;
      return new RedBlackTreeIterator(self, stack, direction);
    }
  };
}, greaterThanEqualBackwards, greaterThanEqualForwards, greaterThanEqual2 = (self, key, direction = Direction.Forward) => {
  return {
    [Symbol.iterator]: () => {
      const cmp = self._ord;
      let node = self._root;
      const stack = [];
      let last_ptr = 0;
      while (node !== undefined) {
        const d = cmp(key, node.key);
        stack.push(node);
        if (d <= 0) {
          last_ptr = stack.length;
        }
        if (d <= 0) {
          node = node.left;
        } else {
          node = node.right;
        }
      }
      stack.length = last_ptr;
      return new RedBlackTreeIterator(self, stack, direction);
    }
  };
}, lessThanBackwards, lessThanForwards, lessThan7 = (self, key, direction) => {
  return {
    [Symbol.iterator]: () => {
      const cmp = self._ord;
      let node = self._root;
      const stack = [];
      let last_ptr = 0;
      while (node !== undefined) {
        const d = cmp(key, node.key);
        stack.push(node);
        if (d > 0) {
          last_ptr = stack.length;
        }
        if (d <= 0) {
          node = node.left;
        } else {
          node = node.right;
        }
      }
      stack.length = last_ptr;
      return new RedBlackTreeIterator(self, stack, direction);
    }
  };
}, lessThanEqualBackwards, lessThanEqualForwards, lessThanEqual2 = (self, key, direction) => {
  return {
    [Symbol.iterator]: () => {
      const cmp = self._ord;
      let node = self._root;
      const stack = [];
      let last_ptr = 0;
      while (node !== undefined) {
        const d = cmp(key, node.key);
        stack.push(node);
        if (d >= 0) {
          last_ptr = stack.length;
        }
        if (d < 0) {
          node = node.left;
        } else {
          node = node.right;
        }
      }
      stack.length = last_ptr;
      return new RedBlackTreeIterator(self, stack, direction);
    }
  };
}, forEach12, forEachGreaterThanEqual, forEachLessThan, forEachBetween, reduce13, removeFirst, size11 = (self) => self._root?.count ?? 0, valuesForward = (self) => values7(self, Direction.Forward), valuesBackward = (self) => values7(self, Direction.Backward), values7 = (self, direction) => {
  const begin = self[Symbol.iterator]();
  let count = 0;
  return {
    [Symbol.iterator]: () => values7(self, direction),
    next: () => {
      count++;
      const entry = begin.value;
      if (direction === Direction.Forward) {
        begin.moveNext();
      } else {
        begin.movePrev();
      }
      switch (entry._tag) {
        case "None": {
          return {
            done: true,
            value: count
          };
        }
        case "Some": {
          return {
            done: false,
            value: entry.value
          };
        }
      }
    }
  };
}, visitFull = (node, visit) => {
  let current = node;
  let stack = undefined;
  let done6 = false;
  while (!done6) {
    if (current != null) {
      stack = make11(current, stack);
      current = current.left;
    } else if (stack != null) {
      const value2 = visit(stack.value.key, stack.value.value);
      if (isSome2(value2)) {
        return value2;
      }
      current = stack.value.right;
      stack = stack.previous;
    } else {
      done6 = true;
    }
  }
  return none2();
}, visitGreaterThanEqual = (node, min7, ord, visit) => {
  let current = node;
  let stack = undefined;
  let done6 = false;
  while (!done6) {
    if (current !== undefined) {
      stack = make11(current, stack);
      if (ord(min7, current.key) <= 0) {
        current = current.left;
      } else {
        current = undefined;
      }
    } else if (stack !== undefined) {
      if (ord(min7, stack.value.key) <= 0) {
        const value2 = visit(stack.value.key, stack.value.value);
        if (isSome2(value2)) {
          return value2;
        }
      }
      current = stack.value.right;
      stack = stack.previous;
    } else {
      done6 = true;
    }
  }
  return none2();
}, visitLessThan = (node, max8, ord, visit) => {
  let current = node;
  let stack = undefined;
  let done6 = false;
  while (!done6) {
    if (current !== undefined) {
      stack = make11(current, stack);
      current = current.left;
    } else if (stack !== undefined && ord(max8, stack.value.key) > 0) {
      const value2 = visit(stack.value.key, stack.value.value);
      if (isSome2(value2)) {
        return value2;
      }
      current = stack.value.right;
      stack = stack.previous;
    } else {
      done6 = true;
    }
  }
  return none2();
}, visitBetween = (node, min7, max8, ord, visit) => {
  let current = node;
  let stack = undefined;
  let done6 = false;
  while (!done6) {
    if (current !== undefined) {
      stack = make11(current, stack);
      if (ord(min7, current.key) <= 0) {
        current = current.left;
      } else {
        current = undefined;
      }
    } else if (stack !== undefined && ord(max8, stack.value.key) > 0) {
      if (ord(min7, stack.value.key) <= 0) {
        const value2 = visit(stack.value.key, stack.value.value);
        if (isSome2(value2)) {
          return value2;
        }
      }
      current = stack.value.right;
      stack = stack.previous;
    } else {
      done6 = true;
    }
  }
  return none2();
}, fixDoubleBlack = (stack) => {
  let n, p, s, z2;
  for (let i2 = stack.length - 1;i2 >= 0; --i2) {
    n = stack[i2];
    if (i2 === 0) {
      n.color = Color.Black;
      return;
    }
    p = stack[i2 - 1];
    if (p.left === n) {
      s = p.right;
      if (s !== undefined && s.right !== undefined && s.right.color === Color.Red) {
        s = p.right = clone2(s);
        z2 = s.right = clone2(s.right);
        p.right = s.left;
        s.left = p;
        s.right = z2;
        s.color = p.color;
        n.color = Color.Black;
        p.color = Color.Black;
        z2.color = Color.Black;
        recount(p);
        recount(s);
        if (i2 > 1) {
          const pp = stack[i2 - 2];
          if (pp.left === p) {
            pp.left = s;
          } else {
            pp.right = s;
          }
        }
        stack[i2 - 1] = s;
        return;
      } else if (s !== undefined && s.left !== undefined && s.left.color === Color.Red) {
        s = p.right = clone2(s);
        z2 = s.left = clone2(s.left);
        p.right = z2.left;
        s.left = z2.right;
        z2.left = p;
        z2.right = s;
        z2.color = p.color;
        p.color = Color.Black;
        s.color = Color.Black;
        n.color = Color.Black;
        recount(p);
        recount(s);
        recount(z2);
        if (i2 > 1) {
          const pp = stack[i2 - 2];
          if (pp.left === p) {
            pp.left = z2;
          } else {
            pp.right = z2;
          }
        }
        stack[i2 - 1] = z2;
        return;
      }
      if (s !== undefined && s.color === Color.Black) {
        if (p.color === Color.Red) {
          p.color = Color.Black;
          p.right = repaint(s, Color.Red);
          return;
        } else {
          p.right = repaint(s, Color.Red);
          continue;
        }
      } else if (s !== undefined) {
        s = clone2(s);
        p.right = s.left;
        s.left = p;
        s.color = p.color;
        p.color = Color.Red;
        recount(p);
        recount(s);
        if (i2 > 1) {
          const pp = stack[i2 - 2];
          if (pp.left === p) {
            pp.left = s;
          } else {
            pp.right = s;
          }
        }
        stack[i2 - 1] = s;
        stack[i2] = p;
        if (i2 + 1 < stack.length) {
          stack[i2 + 1] = n;
        } else {
          stack.push(n);
        }
        i2 = i2 + 2;
      }
    } else {
      s = p.left;
      if (s !== undefined && s.left !== undefined && s.left.color === Color.Red) {
        s = p.left = clone2(s);
        z2 = s.left = clone2(s.left);
        p.left = s.right;
        s.right = p;
        s.left = z2;
        s.color = p.color;
        n.color = Color.Black;
        p.color = Color.Black;
        z2.color = Color.Black;
        recount(p);
        recount(s);
        if (i2 > 1) {
          const pp = stack[i2 - 2];
          if (pp.right === p) {
            pp.right = s;
          } else {
            pp.left = s;
          }
        }
        stack[i2 - 1] = s;
        return;
      } else if (s !== undefined && s.right !== undefined && s.right.color === Color.Red) {
        s = p.left = clone2(s);
        z2 = s.right = clone2(s.right);
        p.left = z2.right;
        s.right = z2.left;
        z2.right = p;
        z2.left = s;
        z2.color = p.color;
        p.color = Color.Black;
        s.color = Color.Black;
        n.color = Color.Black;
        recount(p);
        recount(s);
        recount(z2);
        if (i2 > 1) {
          const pp = stack[i2 - 2];
          if (pp.right === p) {
            pp.right = z2;
          } else {
            pp.left = z2;
          }
        }
        stack[i2 - 1] = z2;
        return;
      }
      if (s !== undefined && s.color === Color.Black) {
        if (p.color === Color.Red) {
          p.color = Color.Black;
          p.left = repaint(s, Color.Red);
          return;
        } else {
          p.left = repaint(s, Color.Red);
          continue;
        }
      } else if (s !== undefined) {
        s = clone2(s);
        p.left = s.right;
        s.right = p;
        s.color = p.color;
        p.color = Color.Red;
        recount(p);
        recount(s);
        if (i2 > 1) {
          const pp = stack[i2 - 2];
          if (pp.right === p) {
            pp.right = s;
          } else {
            pp.left = s;
          }
        }
        stack[i2 - 1] = s;
        stack[i2] = p;
        if (i2 + 1 < stack.length) {
          stack[i2 + 1] = n;
        } else {
          stack.push(n);
        }
        i2 = i2 + 2;
      }
    }
  }
};
var init_redBlackTree = __esm(() => {
  init_Chunk();
  init_Equal();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Predicate();
  init_iterator();
  init_node2();
  RedBlackTreeTypeId = /* @__PURE__ */ Symbol.for(RedBlackTreeSymbolKey);
  redBlackTreeVariance = {
    _Key: (_) => _,
    _Value: (_) => _
  };
  RedBlackTreeProto = {
    [RedBlackTreeTypeId]: redBlackTreeVariance,
    [symbol2]() {
      let hash3 = hash(RedBlackTreeSymbolKey);
      for (const item of this) {
        hash3 ^= pipe(hash(item[0]), combine2(hash(item[1])));
      }
      return cached(this, hash3);
    },
    [symbol3](that) {
      if (isRedBlackTree(that)) {
        if ((this._root?.count ?? 0) !== (that._root?.count ?? 0)) {
          return false;
        }
        const entries3 = Array.from(that);
        return Array.from(this).every((itemSelf, i2) => {
          const itemThat = entries3[i2];
          return equals(itemSelf[0], itemThat[0]) && equals(itemSelf[1], itemThat[1]);
        });
      }
      return false;
    },
    [Symbol.iterator]() {
      const stack = [];
      let n = this._root;
      while (n != null) {
        stack.push(n);
        n = n.left;
      }
      return new RedBlackTreeIterator(this, stack, Direction.Forward);
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "RedBlackTree",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  fromIterable12 = /* @__PURE__ */ dual(2, (entries3, ord) => {
    let tree = empty30(ord);
    for (const [key, value2] of entries3) {
      tree = insert(tree, key, value2);
    }
    return tree;
  });
  atBackwards = /* @__PURE__ */ dual(2, (self, index) => at2(self, index, Direction.Backward));
  atForwards = /* @__PURE__ */ dual(2, (self, index) => at2(self, index, Direction.Forward));
  findAll = /* @__PURE__ */ dual(2, (self, key) => {
    const stack = [];
    let node = self._root;
    let result2 = empty7();
    while (node !== undefined || stack.length > 0) {
      if (node) {
        stack.push(node);
        node = node.left;
      } else {
        const current = stack.pop();
        if (equals(key, current.key)) {
          result2 = prepend3(current.value)(result2);
        }
        node = current.right;
      }
    }
    return result2;
  });
  findFirst8 = /* @__PURE__ */ dual(2, (self, key) => {
    const cmp = self._ord;
    let node = self._root;
    while (node !== undefined) {
      const d = cmp(key, node.key);
      if (equals(key, node.key)) {
        return some3(node.value);
      }
      if (d <= 0) {
        node = node.left;
      } else {
        node = node.right;
      }
    }
    return none2();
  });
  getAt = /* @__PURE__ */ dual(2, (self, index) => {
    if (index < 0) {
      return none2();
    }
    let root = self._root;
    let node = undefined;
    while (root !== undefined) {
      node = root;
      if (root.left) {
        if (index < root.left.count) {
          root = root.left;
          continue;
        }
        index -= root.left.count;
      }
      if (!index) {
        return some3([node.key, node.value]);
      }
      index -= 1;
      if (root.right) {
        if (index >= root.right.count) {
          break;
        }
        root = root.right;
      } else {
        break;
      }
    }
    return none2();
  });
  has7 = /* @__PURE__ */ dual(2, (self, key) => isSome2(findFirst8(self, key)));
  insert = /* @__PURE__ */ dual(3, (self, key, value2) => {
    const cmp = self._ord;
    let n = self._root;
    const n_stack = [];
    const d_stack = [];
    while (n != null) {
      const d = cmp(key, n.key);
      n_stack.push(n);
      d_stack.push(d);
      if (d <= 0) {
        n = n.left;
      } else {
        n = n.right;
      }
    }
    n_stack.push({
      color: Color.Red,
      key,
      value: value2,
      left: undefined,
      right: undefined,
      count: 1
    });
    for (let s = n_stack.length - 2;s >= 0; --s) {
      const n2 = n_stack[s];
      if (d_stack[s] <= 0) {
        n_stack[s] = {
          color: n2.color,
          key: n2.key,
          value: n2.value,
          left: n_stack[s + 1],
          right: n2.right,
          count: n2.count + 1
        };
      } else {
        n_stack[s] = {
          color: n2.color,
          key: n2.key,
          value: n2.value,
          left: n2.left,
          right: n_stack[s + 1],
          count: n2.count + 1
        };
      }
    }
    for (let s = n_stack.length - 1;s > 1; --s) {
      const p = n_stack[s - 1];
      const n3 = n_stack[s];
      if (p.color === Color.Black || n3.color === Color.Black) {
        break;
      }
      const pp = n_stack[s - 2];
      if (pp.left === p) {
        if (p.left === n3) {
          const y = pp.right;
          if (y && y.color === Color.Red) {
            p.color = Color.Black;
            pp.right = repaint(y, Color.Black);
            pp.color = Color.Red;
            s -= 1;
          } else {
            pp.color = Color.Red;
            pp.left = p.right;
            p.color = Color.Black;
            p.right = pp;
            n_stack[s - 2] = p;
            n_stack[s - 1] = n3;
            recount(pp);
            recount(p);
            if (s >= 3) {
              const ppp = n_stack[s - 3];
              if (ppp.left === pp) {
                ppp.left = p;
              } else {
                ppp.right = p;
              }
            }
            break;
          }
        } else {
          const y = pp.right;
          if (y && y.color === Color.Red) {
            p.color = Color.Black;
            pp.right = repaint(y, Color.Black);
            pp.color = Color.Red;
            s -= 1;
          } else {
            p.right = n3.left;
            pp.color = Color.Red;
            pp.left = n3.right;
            n3.color = Color.Black;
            n3.left = p;
            n3.right = pp;
            n_stack[s - 2] = n3;
            n_stack[s - 1] = p;
            recount(pp);
            recount(p);
            recount(n3);
            if (s >= 3) {
              const ppp = n_stack[s - 3];
              if (ppp.left === pp) {
                ppp.left = n3;
              } else {
                ppp.right = n3;
              }
            }
            break;
          }
        }
      } else {
        if (p.right === n3) {
          const y = pp.left;
          if (y && y.color === Color.Red) {
            p.color = Color.Black;
            pp.left = repaint(y, Color.Black);
            pp.color = Color.Red;
            s -= 1;
          } else {
            pp.color = Color.Red;
            pp.right = p.left;
            p.color = Color.Black;
            p.left = pp;
            n_stack[s - 2] = p;
            n_stack[s - 1] = n3;
            recount(pp);
            recount(p);
            if (s >= 3) {
              const ppp = n_stack[s - 3];
              if (ppp.right === pp) {
                ppp.right = p;
              } else {
                ppp.left = p;
              }
            }
            break;
          }
        } else {
          const y = pp.left;
          if (y && y.color === Color.Red) {
            p.color = Color.Black;
            pp.left = repaint(y, Color.Black);
            pp.color = Color.Red;
            s -= 1;
          } else {
            p.left = n3.right;
            pp.color = Color.Red;
            pp.right = n3.left;
            n3.color = Color.Black;
            n3.right = p;
            n3.left = pp;
            n_stack[s - 2] = n3;
            n_stack[s - 1] = p;
            recount(pp);
            recount(p);
            recount(n3);
            if (s >= 3) {
              const ppp = n_stack[s - 3];
              if (ppp.right === pp) {
                ppp.right = n3;
              } else {
                ppp.left = n3;
              }
            }
            break;
          }
        }
      }
    }
    n_stack[0].color = Color.Black;
    return makeImpl3(self._ord, n_stack[0]);
  });
  greaterThanBackwards = /* @__PURE__ */ dual(2, (self, key) => greaterThan7(self, key, Direction.Backward));
  greaterThanForwards = /* @__PURE__ */ dual(2, (self, key) => greaterThan7(self, key, Direction.Forward));
  greaterThanEqualBackwards = /* @__PURE__ */ dual(2, (self, key) => greaterThanEqual2(self, key, Direction.Backward));
  greaterThanEqualForwards = /* @__PURE__ */ dual(2, (self, key) => greaterThanEqual2(self, key, Direction.Forward));
  lessThanBackwards = /* @__PURE__ */ dual(2, (self, key) => lessThan7(self, key, Direction.Backward));
  lessThanForwards = /* @__PURE__ */ dual(2, (self, key) => lessThan7(self, key, Direction.Forward));
  lessThanEqualBackwards = /* @__PURE__ */ dual(2, (self, key) => lessThanEqual2(self, key, Direction.Backward));
  lessThanEqualForwards = /* @__PURE__ */ dual(2, (self, key) => lessThanEqual2(self, key, Direction.Forward));
  forEach12 = /* @__PURE__ */ dual(2, (self, f) => {
    const root = self._root;
    if (root !== undefined) {
      visitFull(root, (key, value2) => {
        f(key, value2);
        return none2();
      });
    }
  });
  forEachGreaterThanEqual = /* @__PURE__ */ dual(3, (self, min7, f) => {
    const root = self._root;
    const ord = self._ord;
    if (root !== undefined) {
      visitGreaterThanEqual(root, min7, ord, (key, value2) => {
        f(key, value2);
        return none2();
      });
    }
  });
  forEachLessThan = /* @__PURE__ */ dual(3, (self, max8, f) => {
    const root = self._root;
    const ord = self._ord;
    if (root !== undefined) {
      visitLessThan(root, max8, ord, (key, value2) => {
        f(key, value2);
        return none2();
      });
    }
  });
  forEachBetween = /* @__PURE__ */ dual(2, (self, {
    body,
    max: max8,
    min: min7
  }) => {
    const root = self._root;
    const ord = self._ord;
    if (root) {
      visitBetween(root, min7, max8, ord, (key, value2) => {
        body(key, value2);
        return none2();
      });
    }
  });
  reduce13 = /* @__PURE__ */ dual(3, (self, zero3, f) => {
    let accumulator = zero3;
    for (const entry of self) {
      accumulator = f(accumulator, entry[1], entry[0]);
    }
    return accumulator;
  });
  removeFirst = /* @__PURE__ */ dual(2, (self, key) => {
    if (!has7(self, key)) {
      return self;
    }
    const ord = self._ord;
    const cmp = ord;
    let node = self._root;
    const stack = [];
    while (node !== undefined) {
      const d = cmp(key, node.key);
      stack.push(node);
      if (equals(key, node.key)) {
        node = undefined;
      } else if (d <= 0) {
        node = node.left;
      } else {
        node = node.right;
      }
    }
    if (stack.length === 0) {
      return self;
    }
    const cstack = new Array(stack.length);
    let n = stack[stack.length - 1];
    cstack[cstack.length - 1] = {
      color: n.color,
      key: n.key,
      value: n.value,
      left: n.left,
      right: n.right,
      count: n.count
    };
    for (let i2 = stack.length - 2;i2 >= 0; --i2) {
      n = stack[i2];
      if (n.left === stack[i2 + 1]) {
        cstack[i2] = {
          color: n.color,
          key: n.key,
          value: n.value,
          left: cstack[i2 + 1],
          right: n.right,
          count: n.count
        };
      } else {
        cstack[i2] = {
          color: n.color,
          key: n.key,
          value: n.value,
          left: n.left,
          right: cstack[i2 + 1],
          count: n.count
        };
      }
    }
    n = cstack[cstack.length - 1];
    if (n.left !== undefined && n.right !== undefined) {
      const split3 = cstack.length;
      n = n.left;
      while (n.right != null) {
        cstack.push(n);
        n = n.right;
      }
      const v = cstack[split3 - 1];
      cstack.push({
        color: n.color,
        key: v.key,
        value: v.value,
        left: n.left,
        right: n.right,
        count: n.count
      });
      cstack[split3 - 1].key = n.key;
      cstack[split3 - 1].value = n.value;
      for (let i2 = cstack.length - 2;i2 >= split3; --i2) {
        n = cstack[i2];
        cstack[i2] = {
          color: n.color,
          key: n.key,
          value: n.value,
          left: n.left,
          right: cstack[i2 + 1],
          count: n.count
        };
      }
      cstack[split3 - 1].left = cstack[split3];
    }
    n = cstack[cstack.length - 1];
    if (n.color === Color.Red) {
      const p = cstack[cstack.length - 2];
      if (p.left === n) {
        p.left = undefined;
      } else if (p.right === n) {
        p.right = undefined;
      }
      cstack.pop();
      for (let i2 = 0;i2 < cstack.length; ++i2) {
        cstack[i2].count--;
      }
      return makeImpl3(ord, cstack[0]);
    } else {
      if (n.left !== undefined || n.right !== undefined) {
        if (n.left !== undefined) {
          swap3(n, n.left);
        } else if (n.right !== undefined) {
          swap3(n, n.right);
        }
        n.color = Color.Black;
        for (let i2 = 0;i2 < cstack.length - 1; ++i2) {
          cstack[i2].count--;
        }
        return makeImpl3(ord, cstack[0]);
      } else if (cstack.length === 1) {
        return makeImpl3(ord, undefined);
      } else {
        for (let i2 = 0;i2 < cstack.length; ++i2) {
          cstack[i2].count--;
        }
        const parent = cstack[cstack.length - 2];
        fixDoubleBlack(cstack);
        if (parent.left === n) {
          parent.left = undefined;
        } else {
          parent.right = undefined;
        }
      }
    }
    return makeImpl3(ord, cstack[0]);
  });
});

// node_modules/effect/dist/esm/RedBlackTree.js
var exports_RedBlackTree = {};
__export(exports_RedBlackTree, {
  valuesReversed: () => valuesReversed,
  values: () => values8,
  size: () => size12,
  reversed: () => reversed2,
  removeFirst: () => removeFirst2,
  reduce: () => reduce14,
  make: () => make46,
  lessThanReversed: () => lessThanReversed,
  lessThanEqualReversed: () => lessThanEqualReversed,
  lessThanEqual: () => lessThanEqual3,
  lessThan: () => lessThan8,
  last: () => last5,
  keysReversed: () => keysReversed,
  keys: () => keys6,
  isRedBlackTree: () => isRedBlackTree2,
  insert: () => insert2,
  has: () => has8,
  greaterThanReversed: () => greaterThanReversed,
  greaterThanEqualReversed: () => greaterThanEqualReversed,
  greaterThanEqual: () => greaterThanEqual3,
  greaterThan: () => greaterThan8,
  getOrder: () => getOrder5,
  getAt: () => getAt2,
  fromIterable: () => fromIterable13,
  forEachLessThan: () => forEachLessThan2,
  forEachGreaterThanEqual: () => forEachGreaterThanEqual2,
  forEachBetween: () => forEachBetween2,
  forEach: () => forEach13,
  first: () => first2,
  findFirst: () => findFirst9,
  findAll: () => findAll2,
  empty: () => empty31,
  atReversed: () => atReversed,
  at: () => at3,
  Direction: () => Direction2
});
var Direction2, isRedBlackTree2, empty31, fromIterable13, make46, at3, atReversed, findAll2, findFirst9, first2, getAt2, getOrder5, greaterThan8, greaterThanReversed, greaterThanEqual3, greaterThanEqualReversed, has8, insert2, keys6, keysReversed, last5, lessThan8, lessThanReversed, lessThanEqual3, lessThanEqualReversed, forEach13, forEachGreaterThanEqual2, forEachLessThan2, forEachBetween2, reduce14, removeFirst2, reversed2, size12, values8, valuesReversed;
var init_RedBlackTree = __esm(() => {
  init_redBlackTree();
  init_iterator();
  Direction2 = Direction;
  isRedBlackTree2 = isRedBlackTree;
  empty31 = empty30;
  fromIterable13 = fromIterable12;
  make46 = make45;
  at3 = atForwards;
  atReversed = atBackwards;
  findAll2 = findAll;
  findFirst9 = findFirst8;
  first2 = first;
  getAt2 = getAt;
  getOrder5 = getOrder4;
  greaterThan8 = greaterThanForwards;
  greaterThanReversed = greaterThanBackwards;
  greaterThanEqual3 = greaterThanEqualForwards;
  greaterThanEqualReversed = greaterThanEqualBackwards;
  has8 = has7;
  insert2 = insert;
  keys6 = keysForward;
  keysReversed = keysBackward;
  last5 = last4;
  lessThan8 = lessThanForwards;
  lessThanReversed = lessThanBackwards;
  lessThanEqual3 = lessThanEqualForwards;
  lessThanEqualReversed = lessThanEqualBackwards;
  forEach13 = forEach12;
  forEachGreaterThanEqual2 = forEachGreaterThanEqual;
  forEachLessThan2 = forEachLessThan;
  forEachBetween2 = forEachBetween;
  reduce14 = reduce13;
  removeFirst2 = removeFirst;
  reversed2 = reversed;
  size12 = size11;
  values8 = valuesForward;
  valuesReversed = valuesBackward;
});

// node_modules/effect/dist/esm/SortedSet.js
var exports_SortedSet = {};
__export(exports_SortedSet, {
  values: () => values9,
  union: () => union8,
  toggle: () => toggle4,
  some: () => some14,
  size: () => size13,
  remove: () => remove10,
  partition: () => partition7,
  map: () => map21,
  make: () => make47,
  isSubset: () => isSubset3,
  isSortedSet: () => isSortedSet,
  intersection: () => intersection7,
  has: () => has9,
  getEquivalence: () => getEquivalence8,
  fromIterable: () => fromIterable14,
  forEach: () => forEach14,
  flatMap: () => flatMap15,
  filter: () => filter13,
  every: () => every12,
  empty: () => empty32,
  difference: () => difference6,
  add: () => add5
});
var TypeId17, SortedSetProto, fromTree = (keyTree) => {
  const a = Object.create(SortedSetProto);
  a.keyTree = keyTree;
  return a;
}, isSortedSet = (u) => hasProperty(u, TypeId17), empty32 = (O) => fromTree(empty31(O)), fromIterable14, make47 = (ord) => (...entries3) => fromIterable14(entries3, ord), add5, difference6, every12, filter13, flatMap15, forEach14, has9, intersection7, isSubset3, map21, partition7, remove10, size13 = (self) => size12(self.keyTree), some14, toggle4, union8, values9 = (self) => keys6(self.keyTree), getEquivalence8 = () => (a, b) => isSubset3(a, b) && isSubset3(b, a);
var init_SortedSet = __esm(() => {
  init_Equal();
  init_Function();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Predicate();
  init_RedBlackTree();
  TypeId17 = /* @__PURE__ */ Symbol.for("effect/SortedSet");
  SortedSetProto = {
    [TypeId17]: {
      _A: (_) => _
    },
    [symbol2]() {
      return pipe(hash(this.keyTree), combine2(hash(TypeId17)), cached(this));
    },
    [symbol3](that) {
      return isSortedSet(that) && equals(this.keyTree, that.keyTree);
    },
    [Symbol.iterator]() {
      return keys6(this.keyTree);
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "SortedSet",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  fromIterable14 = /* @__PURE__ */ dual(2, (iterable, ord) => fromTree(fromIterable13(Array.from(iterable).map((k) => [k, true]), ord)));
  add5 = /* @__PURE__ */ dual(2, (self, value2) => has8(self.keyTree, value2) ? self : fromTree(insert2(self.keyTree, value2, true)));
  difference6 = /* @__PURE__ */ dual(2, (self, that) => {
    let out = self;
    for (const value2 of that) {
      out = remove10(out, value2);
    }
    return out;
  });
  every12 = /* @__PURE__ */ dual(2, (self, predicate) => {
    for (const value2 of self) {
      if (!predicate(value2)) {
        return false;
      }
    }
    return true;
  });
  filter13 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const ord = getOrder5(self.keyTree);
    let out = empty32(ord);
    for (const value2 of self) {
      if (predicate(value2)) {
        out = add5(out, value2);
      }
    }
    return out;
  });
  flatMap15 = /* @__PURE__ */ dual(3, (self, O, f) => {
    let out = empty32(O);
    forEach14(self, (a) => {
      for (const b of f(a)) {
        out = add5(out, b);
      }
    });
    return out;
  });
  forEach14 = /* @__PURE__ */ dual(2, (self, f) => forEach13(self.keyTree, f));
  has9 = /* @__PURE__ */ dual(2, (self, value2) => has8(self.keyTree, value2));
  intersection7 = /* @__PURE__ */ dual(2, (self, that) => {
    const ord = getOrder5(self.keyTree);
    let out = empty32(ord);
    for (const value2 of that) {
      if (has9(self, value2)) {
        out = add5(out, value2);
      }
    }
    return out;
  });
  isSubset3 = /* @__PURE__ */ dual(2, (self, that) => every12(self, (a) => has9(that, a)));
  map21 = /* @__PURE__ */ dual(3, (self, O, f) => {
    let out = empty32(O);
    forEach14(self, (a) => {
      const b = f(a);
      if (!has9(out, b)) {
        out = add5(out, b);
      }
    });
    return out;
  });
  partition7 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const ord = getOrder5(self.keyTree);
    let right3 = empty32(ord);
    let left3 = empty32(ord);
    for (const value2 of self) {
      if (predicate(value2)) {
        right3 = add5(right3, value2);
      } else {
        left3 = add5(left3, value2);
      }
    }
    return [left3, right3];
  });
  remove10 = /* @__PURE__ */ dual(2, (self, value2) => fromTree(removeFirst2(self.keyTree, value2)));
  some14 = /* @__PURE__ */ dual(2, (self, predicate) => {
    for (const value2 of self) {
      if (predicate(value2)) {
        return true;
      }
    }
    return false;
  });
  toggle4 = /* @__PURE__ */ dual(2, (self, value2) => has9(self, value2) ? remove10(self, value2) : add5(self, value2));
  union8 = /* @__PURE__ */ dual(2, (self, that) => {
    const ord = getOrder5(self.keyTree);
    let out = empty32(ord);
    for (const value2 of self) {
      out = add5(value2)(out);
    }
    for (const value2 of that) {
      out = add5(value2)(out);
    }
    return out;
  });
});

// node_modules/effect/dist/esm/internal/supervisor.js
var SupervisorSymbolKey = "effect/Supervisor", SupervisorTypeId, supervisorVariance, ProxySupervisor, Zip, isZip = (self) => hasProperty(self, SupervisorTypeId) && isTagged(self, "Zip"), Track, Const, FibersIn, unsafeTrack = () => {
  return new Track;
}, track, fromEffect2 = (effect) => {
  return new Const(effect);
}, none8, fibersIn = (ref) => sync(() => new FibersIn(ref));
var init_supervisor = __esm(() => {
  init_Function();
  init_GlobalValue();
  init_MutableRef();
  init_Predicate();
  init_SortedSet();
  init_core();
  SupervisorTypeId = /* @__PURE__ */ Symbol.for(SupervisorSymbolKey);
  supervisorVariance = {
    _T: (_) => _
  };
  ProxySupervisor = class ProxySupervisor {
    underlying;
    value0;
    [SupervisorTypeId] = supervisorVariance;
    constructor(underlying, value0) {
      this.underlying = underlying;
      this.value0 = value0;
    }
    get value() {
      return this.value0;
    }
    onStart(context4, effect, parent, fiber) {
      this.underlying.onStart(context4, effect, parent, fiber);
    }
    onEnd(value2, fiber) {
      this.underlying.onEnd(value2, fiber);
    }
    onEffect(fiber, effect) {
      this.underlying.onEffect(fiber, effect);
    }
    onSuspend(fiber) {
      this.underlying.onSuspend(fiber);
    }
    onResume(fiber) {
      this.underlying.onResume(fiber);
    }
    map(f) {
      return new ProxySupervisor(this, pipe(this.value, map14(f)));
    }
    zip(right3) {
      return new Zip(this, right3);
    }
  };
  Zip = class Zip {
    left;
    right;
    _tag = "Zip";
    [SupervisorTypeId] = supervisorVariance;
    constructor(left3, right3) {
      this.left = left3;
      this.right = right3;
    }
    get value() {
      return zip5(this.left.value, this.right.value);
    }
    onStart(context4, effect, parent, fiber) {
      this.left.onStart(context4, effect, parent, fiber);
      this.right.onStart(context4, effect, parent, fiber);
    }
    onEnd(value2, fiber) {
      this.left.onEnd(value2, fiber);
      this.right.onEnd(value2, fiber);
    }
    onEffect(fiber, effect) {
      this.left.onEffect(fiber, effect);
      this.right.onEffect(fiber, effect);
    }
    onSuspend(fiber) {
      this.left.onSuspend(fiber);
      this.right.onSuspend(fiber);
    }
    onResume(fiber) {
      this.left.onResume(fiber);
      this.right.onResume(fiber);
    }
    map(f) {
      return new ProxySupervisor(this, pipe(this.value, map14(f)));
    }
    zip(right3) {
      return new Zip(this, right3);
    }
  };
  Track = class Track {
    [SupervisorTypeId] = supervisorVariance;
    fibers = /* @__PURE__ */ new Set;
    get value() {
      return sync(() => Array.from(this.fibers));
    }
    onStart(_context, _effect, _parent, fiber) {
      this.fibers.add(fiber);
    }
    onEnd(_value, fiber) {
      this.fibers.delete(fiber);
    }
    onEffect(_fiber, _effect) {}
    onSuspend(_fiber) {}
    onResume(_fiber) {}
    map(f) {
      return new ProxySupervisor(this, pipe(this.value, map14(f)));
    }
    zip(right3) {
      return new Zip(this, right3);
    }
    onRun(execution, _fiber) {
      return execution();
    }
  };
  Const = class Const {
    effect;
    [SupervisorTypeId] = supervisorVariance;
    constructor(effect) {
      this.effect = effect;
    }
    get value() {
      return this.effect;
    }
    onStart(_context, _effect, _parent, _fiber) {}
    onEnd(_value, _fiber) {}
    onEffect(_fiber, _effect) {}
    onSuspend(_fiber) {}
    onResume(_fiber) {}
    map(f) {
      return new ProxySupervisor(this, pipe(this.value, map14(f)));
    }
    zip(right3) {
      return new Zip(this, right3);
    }
    onRun(execution, _fiber) {
      return execution();
    }
  };
  FibersIn = class FibersIn {
    ref;
    [SupervisorTypeId] = supervisorVariance;
    constructor(ref) {
      this.ref = ref;
    }
    get value() {
      return sync(() => get8(this.ref));
    }
    onStart(_context, _effect, _parent, fiber) {
      pipe(this.ref, set3(pipe(get8(this.ref), add5(fiber))));
    }
    onEnd(_value, fiber) {
      pipe(this.ref, set3(pipe(get8(this.ref), remove10(fiber))));
    }
    onEffect(_fiber, _effect) {}
    onSuspend(_fiber) {}
    onResume(_fiber) {}
    map(f) {
      return new ProxySupervisor(this, pipe(this.value, map14(f)));
    }
    zip(right3) {
      return new Zip(this, right3);
    }
    onRun(execution, _fiber) {
      return execution();
    }
  };
  track = /* @__PURE__ */ sync(unsafeTrack);
  none8 = /* @__PURE__ */ globalValue("effect/Supervisor/none", () => fromEffect2(void_3));
});

// node_modules/effect/dist/esm/Differ.js
var exports_Differ = {};
__export(exports_Differ, {
  zip: () => zip10,
  updateWith: () => updateWith2,
  update: () => update6,
  transform: () => transform2,
  readonlyArray: () => readonlyArray2,
  patch: () => patch11,
  orElseEither: () => orElseEither4,
  make: () => make48,
  hashSet: () => hashSet2,
  hashMap: () => hashMap2,
  environment: () => environment2,
  empty: () => empty33,
  diff: () => diff10,
  combine: () => combine14,
  chunk: () => chunk2,
  TypeId: () => TypeId18
});
var TypeId18, empty33 = (self) => self.empty, diff10, combine14, patch11, make48, environment2, chunk2, hashMap2, hashSet2, orElseEither4, readonlyArray2, transform2, update6, updateWith2, zip10;
var init_Differ = __esm(() => {
  init_Function();
  init_differ();
  init_chunkPatch();
  init_contextPatch();
  init_hashMapPatch();
  init_hashSetPatch();
  init_orPatch();
  init_readonlyArrayPatch();
  TypeId18 = DifferTypeId;
  diff10 = /* @__PURE__ */ dual(3, (self, oldValue, newValue) => self.diff(oldValue, newValue));
  combine14 = /* @__PURE__ */ dual(3, (self, first3, second) => self.combine(first3, second));
  patch11 = /* @__PURE__ */ dual(3, (self, patch12, oldValue) => self.patch(patch12, oldValue));
  make48 = make20;
  environment2 = environment;
  chunk2 = chunk;
  hashMap2 = hashMap;
  hashSet2 = hashSet;
  orElseEither4 = orElseEither2;
  readonlyArray2 = readonlyArray;
  transform2 = transform;
  update6 = update2;
  updateWith2 = updateWith;
  zip10 = zip4;
});

// node_modules/effect/dist/esm/internal/supervisor/patch.js
var OP_EMPTY3 = "Empty", OP_ADD_SUPERVISOR = "AddSupervisor", OP_REMOVE_SUPERVISOR = "RemoveSupervisor", OP_AND_THEN2 = "AndThen", empty34, combine15 = (self, that) => {
  return {
    _tag: OP_AND_THEN2,
    first: self,
    second: that
  };
}, patch12 = (self, supervisor) => {
  return patchLoop(supervisor, of3(self));
}, patchLoop = (_supervisor, _patches) => {
  let supervisor = _supervisor;
  let patches = _patches;
  while (isNonEmpty2(patches)) {
    const head7 = headNonEmpty2(patches);
    switch (head7._tag) {
      case OP_EMPTY3: {
        patches = tailNonEmpty2(patches);
        break;
      }
      case OP_ADD_SUPERVISOR: {
        supervisor = supervisor.zip(head7.supervisor);
        patches = tailNonEmpty2(patches);
        break;
      }
      case OP_REMOVE_SUPERVISOR: {
        supervisor = removeSupervisor(supervisor, head7.supervisor);
        patches = tailNonEmpty2(patches);
        break;
      }
      case OP_AND_THEN2: {
        patches = prepend3(head7.first)(prepend3(head7.second)(tailNonEmpty2(patches)));
        break;
      }
    }
  }
  return supervisor;
}, removeSupervisor = (self, that) => {
  if (equals(self, that)) {
    return none8;
  } else {
    if (isZip(self)) {
      return removeSupervisor(self.left, that).zip(removeSupervisor(self.right, that));
    } else {
      return self;
    }
  }
}, toSet4 = (self) => {
  if (equals(self, none8)) {
    return empty10();
  } else {
    if (isZip(self)) {
      return pipe(toSet4(self.left), union6(toSet4(self.right)));
    } else {
      return make14(self);
    }
  }
}, diff11 = (oldValue, newValue) => {
  if (equals(oldValue, newValue)) {
    return empty34;
  }
  const oldSupervisors = toSet4(oldValue);
  const newSupervisors = toSet4(newValue);
  const added = pipe(newSupervisors, difference5(oldSupervisors), reduce7(empty34, (patch13, supervisor) => combine15(patch13, {
    _tag: OP_ADD_SUPERVISOR,
    supervisor
  })));
  const removed = pipe(oldSupervisors, difference5(newSupervisors), reduce7(empty34, (patch13, supervisor) => combine15(patch13, {
    _tag: OP_REMOVE_SUPERVISOR,
    supervisor
  })));
  return combine15(added, removed);
}, differ2;
var init_patch2 = __esm(() => {
  init_Chunk();
  init_Differ();
  init_Equal();
  init_Function();
  init_HashSet();
  init_supervisor();
  empty34 = {
    _tag: OP_EMPTY3
  };
  differ2 = /* @__PURE__ */ make48({
    empty: empty34,
    patch: patch12,
    combine: combine15,
    diff: diff11
  });
});

// node_modules/effect/dist/esm/internal/fiberRuntime.js
var fiberStarted, fiberActive, fiberSuccesses, fiberFailures, fiberLifetimes, EvaluationSignalContinue = "Continue", EvaluationSignalDone = "Done", EvaluationSignalYieldNow = "Yield", runtimeFiberVariance, absurd3 = (_) => {
  throw new Error(`BUG: FiberRuntime - ${toStringUnknown(_)} - please report an issue at https://github.com/Effect-TS/effect/issues`);
}, YieldedOp, yieldedOpChannel, contOpSuccess, drainQueueWhileRunningTable, runBlockedRequests = (self) => forEachSequentialDiscard(flatten6(self), (requestsByRequestResolver) => forEachConcurrentDiscard(sequentialCollectionToChunk(requestsByRequestResolver), ([dataSource, sequential4]) => {
  const map22 = new Map;
  const arr = [];
  for (const block of sequential4) {
    arr.push(toReadonlyArray(block));
    for (const entry of block) {
      map22.set(entry.request, entry);
    }
  }
  const flat = arr.flat();
  return fiberRefLocally(invokeWithInterrupt(dataSource.runAll(arr), flat, () => flat.forEach((entry) => {
    entry.listeners.interrupted = true;
  })), currentRequestMap, map22);
}, false, false)), _version, FiberRuntime, currentMinimumLogLevel, loggerWithConsoleLog = (self) => makeLogger((opts) => {
  const services = getOrDefault2(opts.context, currentServices);
  get5(services, consoleTag).unsafe.log(self.log(opts));
}), loggerWithLeveledLog = (self) => makeLogger((opts) => {
  const services = getOrDefault2(opts.context, currentServices);
  const unsafeLogger = get5(services, consoleTag).unsafe;
  switch (opts.logLevel._tag) {
    case "Debug":
      return unsafeLogger.debug(self.log(opts));
    case "Info":
      return unsafeLogger.info(self.log(opts));
    case "Trace":
      return unsafeLogger.trace(self.log(opts));
    case "Warning":
      return unsafeLogger.warn(self.log(opts));
    case "Error":
    case "Fatal":
      return unsafeLogger.error(self.log(opts));
    default:
      return unsafeLogger.log(self.log(opts));
  }
}), loggerWithConsoleError = (self) => makeLogger((opts) => {
  const services = getOrDefault2(opts.context, currentServices);
  get5(services, consoleTag).unsafe.error(self.log(opts));
}), defaultLogger, jsonLogger2, logFmtLogger, prettyLogger2, structuredLogger2, tracerLogger, loggerWithSpanAnnotations = (self) => mapInputOptions(self, (options) => {
  const span2 = flatMap2(get11(options.context, currentContext), getOption2(spanTag));
  if (span2._tag === "None") {
    return options;
  }
  return {
    ...options,
    annotations: pipe(options.annotations, set4("effect.traceId", span2.value.traceId), set4("effect.spanId", span2.value.spanId), span2.value._tag === "Span" ? set4("effect.spanName", span2.value.name) : identity)
  };
}), currentLoggers, batchedLogger, annotateLogsScoped = function() {
  if (typeof arguments[0] === "string") {
    return fiberRefLocallyScopedWith(currentLogAnnotations, set4(arguments[0], arguments[1]));
  }
  const entries3 = Object.entries(arguments[0]);
  return fiberRefLocallyScopedWith(currentLogAnnotations, mutate4((annotations2) => {
    for (let i2 = 0;i2 < entries3.length; i2++) {
      const [key, value2] = entries3[i2];
      set4(annotations2, key, value2);
    }
    return annotations2;
  }));
}, whenLogLevel, acquireRelease2, acquireReleaseInterruptible, addFinalizer2 = (finalizer) => withFiberRuntime((runtime3) => {
  const acquireRefs = runtime3.getFiberRefs();
  const acquireFlags = runtime3.currentRuntimeFlags;
  return flatMap12(scope2, (scope2) => scopeAddFinalizerExit(scope2, (exit3) => withFiberRuntime((runtimeFinalizer) => {
    const preRefs = runtimeFinalizer.getFiberRefs();
    const preFlags = runtimeFinalizer.currentRuntimeFlags;
    const patchRefs = diff9(preRefs, acquireRefs);
    const patchFlags = diff7(preFlags, acquireFlags);
    const inverseRefs = diff9(acquireRefs, preRefs);
    runtimeFinalizer.setFiberRefs(patch10(patchRefs, runtimeFinalizer.id(), acquireRefs));
    return ensuring2(withRuntimeFlags(finalizer(exit3), patchFlags), sync(() => {
      runtimeFinalizer.setFiberRefs(patch10(inverseRefs, runtimeFinalizer.id(), runtimeFinalizer.getFiberRefs()));
    }));
  })));
}), daemonChildren = (self) => {
  const forkScope = fiberRefLocally(currentForkScopeOverride, some3(globalScope));
  return forkScope(self);
}, _existsParFound, exists3, existsLoop = (iterator, index, f) => {
  const next2 = iterator.next();
  if (next2.done) {
    return succeed(false);
  }
  return pipe(flatMap12(f(next2.value, index), (b) => b ? succeed(b) : existsLoop(iterator, index + 1, f)));
}, filter14, allResolveInput = (input) => {
  if (Array.isArray(input) || isIterable(input)) {
    return [input, none2()];
  }
  const keys7 = Object.keys(input);
  const size14 = keys7.length;
  return [keys7.map((k) => input[k]), some3((values10) => {
    const res = {};
    for (let i2 = 0;i2 < size14; i2++) {
      res[keys7[i2]] = values10[i2];
    }
    return res;
  })];
}, allValidate = (effects, reconcile, options) => {
  const eitherEffects = [];
  for (const effect of effects) {
    eitherEffects.push(either3(effect));
  }
  return flatMap12(forEach15(eitherEffects, identity, {
    concurrency: options?.concurrency,
    batching: options?.batching,
    concurrentFinalizers: options?.concurrentFinalizers
  }), (eithers) => {
    const none9 = none2();
    const size14 = eithers.length;
    const errors2 = new Array(size14);
    const successes = new Array(size14);
    let errored = false;
    for (let i2 = 0;i2 < size14; i2++) {
      const either5 = eithers[i2];
      if (either5._tag === "Left") {
        errors2[i2] = some3(either5.left);
        errored = true;
      } else {
        successes[i2] = either5.right;
        errors2[i2] = none9;
      }
    }
    if (errored) {
      return reconcile._tag === "Some" ? fail2(reconcile.value(errors2)) : fail2(errors2);
    } else if (options?.discard) {
      return void_3;
    }
    return reconcile._tag === "Some" ? succeed(reconcile.value(successes)) : succeed(successes);
  });
}, allEither = (effects, reconcile, options) => {
  const eitherEffects = [];
  for (const effect of effects) {
    eitherEffects.push(either3(effect));
  }
  if (options?.discard) {
    return forEach15(eitherEffects, identity, {
      concurrency: options?.concurrency,
      batching: options?.batching,
      discard: true,
      concurrentFinalizers: options?.concurrentFinalizers
    });
  }
  return map14(forEach15(eitherEffects, identity, {
    concurrency: options?.concurrency,
    batching: options?.batching,
    concurrentFinalizers: options?.concurrentFinalizers
  }), (eithers) => reconcile._tag === "Some" ? reconcile.value(eithers) : eithers);
}, all9 = (arg, options) => {
  const [effects, reconcile] = allResolveInput(arg);
  if (options?.mode === "validate") {
    return allValidate(effects, reconcile, options);
  } else if (options?.mode === "either") {
    return allEither(effects, reconcile, options);
  }
  return options?.discard !== true && reconcile._tag === "Some" ? map14(forEach15(effects, identity, options), reconcile.value) : forEach15(effects, identity, options);
}, allWith = (options) => (arg) => all9(arg, options), allSuccesses = (elements, options) => map14(all9(fromIterable2(elements).map(exit), options), filterMap4((exit3) => exitIsSuccess(exit3) ? some3(exit3.effect_instruction_i0) : none2())), replicate4, replicateEffect2, forEach15, forEachParUnbounded = (self, f, batching) => suspend(() => {
  const as6 = fromIterable2(self);
  const array5 = new Array(as6.length);
  const fn = (a, i2) => flatMap12(f(a, i2), (b) => sync(() => array5[i2] = b));
  return zipRight2(forEachConcurrentDiscard(as6, fn, batching, false), succeed(array5));
}), forEachConcurrentDiscard = (self, f, batching, processAll, n) => uninterruptibleMask((restore) => transplant((graft) => withFiberRuntime((parent) => {
  let todos = Array.from(self).reverse();
  let target = todos.length;
  if (target === 0) {
    return void_3;
  }
  let counter7 = 0;
  let interrupted2 = false;
  const fibersCount = n ? Math.min(todos.length, n) : todos.length;
  const fibers = new Set;
  const results = new Array;
  const interruptAll2 = () => fibers.forEach((fiber) => {
    fiber.currentScheduler.scheduleTask(() => {
      fiber.unsafeInterruptAsFork(parent.id());
    }, 0);
  });
  const startOrder = new Array;
  const joinOrder = new Array;
  const residual = new Array;
  const collectExits = () => {
    const exits = results.filter(({
      exit: exit3
    }) => exit3._tag === "Failure").sort((a, b) => a.index < b.index ? -1 : a.index === b.index ? 0 : 1).map(({
      exit: exit3
    }) => exit3);
    if (exits.length === 0) {
      exits.push(exitVoid);
    }
    return exits;
  };
  const runFiber = (eff, interruptImmediately = false) => {
    const runnable = uninterruptible(graft(eff));
    const fiber = unsafeForkUnstarted(runnable, parent, parent.currentRuntimeFlags, globalScope);
    parent.currentScheduler.scheduleTask(() => {
      if (interruptImmediately) {
        fiber.unsafeInterruptAsFork(parent.id());
      }
      fiber.resume(runnable);
    }, 0);
    return fiber;
  };
  const onInterruptSignal = () => {
    if (!processAll) {
      target -= todos.length;
      todos = [];
    }
    interrupted2 = true;
    interruptAll2();
  };
  const stepOrExit = batching ? step2 : exit;
  const processingFiber = runFiber(async_((resume2) => {
    const pushResult = (res, index) => {
      if (res._op === "Blocked") {
        residual.push(res);
      } else {
        results.push({
          index,
          exit: res
        });
        if (res._op === "Failure" && !interrupted2) {
          onInterruptSignal();
        }
      }
    };
    const next2 = () => {
      if (todos.length > 0) {
        const a = todos.pop();
        let index = counter7++;
        const returnNextElement = () => {
          const a2 = todos.pop();
          index = counter7++;
          return flatMap12(yieldNow(), () => flatMap12(stepOrExit(restore(f(a2, index))), onRes));
        };
        const onRes = (res) => {
          if (todos.length > 0) {
            pushResult(res, index);
            if (todos.length > 0) {
              return returnNextElement();
            }
          }
          return succeed(res);
        };
        const todo = flatMap12(stepOrExit(restore(f(a, index))), onRes);
        const fiber = runFiber(todo);
        startOrder.push(fiber);
        fibers.add(fiber);
        if (interrupted2) {
          fiber.currentScheduler.scheduleTask(() => {
            fiber.unsafeInterruptAsFork(parent.id());
          }, 0);
        }
        fiber.addObserver((wrapped) => {
          let exit3;
          if (wrapped._op === "Failure") {
            exit3 = wrapped;
          } else {
            exit3 = wrapped.effect_instruction_i0;
          }
          joinOrder.push(fiber);
          fibers.delete(fiber);
          pushResult(exit3, index);
          if (results.length === target) {
            resume2(succeed(getOrElse2(exitCollectAll(collectExits(), {
              parallel: true
            }), () => exitVoid)));
          } else if (residual.length + results.length === target) {
            const exits = collectExits();
            const requests = residual.map((blocked2) => blocked2.effect_instruction_i0).reduce(par);
            resume2(succeed(blocked(requests, forEachConcurrentDiscard([getOrElse2(exitCollectAll(exits, {
              parallel: true
            }), () => exitVoid), ...residual.map((blocked2) => blocked2.effect_instruction_i1)], (i2) => i2, batching, true, n))));
          } else {
            next2();
          }
        });
      }
    };
    for (let i2 = 0;i2 < fibersCount; i2++) {
      next2();
    }
  }));
  return asVoid2(onExit(flatten8(restore(join3(processingFiber))), exitMatch({
    onFailure: (cause2) => {
      onInterruptSignal();
      const target2 = residual.length + 1;
      const concurrency = Math.min(typeof n === "number" ? n : residual.length, residual.length);
      const toPop = Array.from(residual);
      return async_((cb) => {
        const exits = [];
        let count = 0;
        let index = 0;
        const check2 = (index2, hitNext) => (exit3) => {
          exits[index2] = exit3;
          count++;
          if (count === target2) {
            cb(exitSucceed(exitFailCause(cause2)));
          }
          if (toPop.length > 0 && hitNext) {
            next2();
          }
        };
        const next2 = () => {
          runFiber(toPop.pop(), true).addObserver(check2(index, true));
          index++;
        };
        processingFiber.addObserver(check2(index, false));
        index++;
        for (let i2 = 0;i2 < concurrency; i2++) {
          next2();
        }
      });
    },
    onSuccess: () => forEachSequential(joinOrder, (f2) => f2.inheritAll)
  })));
}))), forEachParN = (self, n, f, batching) => suspend(() => {
  const as6 = fromIterable2(self);
  const array5 = new Array(as6.length);
  const fn = (a, i2) => map14(f(a, i2), (b) => array5[i2] = b);
  return zipRight2(forEachConcurrentDiscard(as6, fn, batching, false, n), succeed(array5));
}), fork2 = (self) => withFiberRuntime((state, status2) => succeed(unsafeFork2(self, state, status2.runtimeFlags))), forkDaemon2 = (self) => forkWithScopeOverride(self, globalScope), forkWithErrorHandler, unsafeFork2 = (effect, parentFiber, parentRuntimeFlags, overrideScope = null) => {
  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope);
  childFiber.resume(effect);
  return childFiber;
}, unsafeForkUnstarted = (effect, parentFiber, parentRuntimeFlags, overrideScope = null) => {
  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope);
  return childFiber;
}, unsafeMakeChildFiber = (effect, parentFiber, parentRuntimeFlags, overrideScope = null) => {
  const childId = unsafeMake3();
  const parentFiberRefs = parentFiber.getFiberRefs();
  const childFiberRefs = forkAs(parentFiberRefs, childId);
  const childFiber = new FiberRuntime(childId, childFiberRefs, parentRuntimeFlags);
  const childContext = getOrDefault(childFiberRefs, currentContext);
  const supervisor = childFiber.currentSupervisor;
  supervisor.onStart(childContext, effect, some3(parentFiber), childFiber);
  childFiber.addObserver((exit3) => supervisor.onEnd(exit3, childFiber));
  const parentScope = overrideScope !== null ? overrideScope : pipe(parentFiber.getFiberRef(currentForkScopeOverride), getOrElse2(() => parentFiber.scope()));
  parentScope.add(parentRuntimeFlags, childFiber);
  return childFiber;
}, forkWithScopeOverride = (self, scopeOverride) => withFiberRuntime((parentFiber, parentStatus) => succeed(unsafeFork2(self, parentFiber, parentStatus.runtimeFlags, scopeOverride))), mergeAll3, partition8, validateAll, raceAll2 = (all10) => {
  const list = fromIterable3(all10);
  if (!isNonEmpty2(list)) {
    return dieSync(() => new IllegalArgumentException(`Received an empty collection of effects`));
  }
  const self = headNonEmpty2(list);
  const effects = tailNonEmpty2(list);
  const inheritAll2 = (res) => pipe(inheritAll(res[1]), as3(res[0]));
  return pipe(deferredMake(), flatMap12((done6) => pipe(make37(effects.length), flatMap12((fails) => uninterruptibleMask((restore) => pipe(fork2(interruptible2(self)), flatMap12((head7) => pipe(effects, forEachSequential((effect) => fork2(interruptible2(effect))), map14((fibers) => unsafeFromArray(fibers)), map14((tail5) => pipe(tail5, prepend3(head7))), tap2((fibers) => pipe(fibers, reduce3(void_3, (effect, fiber) => pipe(effect, zipRight2(pipe(_await2(fiber), flatMap12(raceAllArbiter(fibers, fiber, done6, fails)), fork2, asVoid2)))))), flatMap12((fibers) => pipe(restore(pipe(_await(done6), flatMap12(inheritAll2))), onInterrupt(() => pipe(fibers, reduce3(void_3, (effect, fiber) => pipe(effect, zipLeft2(interruptFiber(fiber))))))))))))))));
}, raceAllArbiter = (fibers, winner, deferred, fails) => (exit3) => exitMatchEffect(exit3, {
  onFailure: (cause2) => pipe(modify8(fails, (fails2) => [fails2 === 0 ? pipe(deferredFailCause(deferred, cause2), asVoid2) : void_3, fails2 - 1]), flatten8),
  onSuccess: (value2) => pipe(deferredSucceed(deferred, [value2, winner]), flatMap12((set9) => set9 ? pipe(fromIterable3(fibers), reduce3(void_3, (effect, fiber) => fiber === winner ? effect : pipe(effect, zipLeft2(interruptFiber(fiber))))) : void_3))
}), reduceEffect, parallelFinalizers = (self) => contextWithEffect((context4) => match2(getOption2(context4, scopeTag), {
  onNone: () => self,
  onSome: (scope2) => {
    switch (scope2.strategy._tag) {
      case "Parallel":
        return self;
      case "Sequential":
      case "ParallelN":
        return flatMap12(scopeFork(scope2, parallel3), (inner) => scopeExtend(self, inner));
    }
  }
})), parallelNFinalizers = (parallelism) => (self) => contextWithEffect((context4) => match2(getOption2(context4, scopeTag), {
  onNone: () => self,
  onSome: (scope2) => {
    if (scope2.strategy._tag === "ParallelN" && scope2.strategy.parallelism === parallelism) {
      return self;
    }
    return flatMap12(scopeFork(scope2, parallelN2(parallelism)), (inner) => scopeExtend(self, inner));
  }
})), finalizersMask = (strategy) => (self) => finalizersMaskInternal(strategy, true)(self), finalizersMaskInternal = (strategy, concurrentFinalizers) => (self) => contextWithEffect((context4) => match2(getOption2(context4, scopeTag), {
  onNone: () => self(identity),
  onSome: (scope2) => {
    if (concurrentFinalizers === true) {
      const patch13 = strategy._tag === "Parallel" ? parallelFinalizers : strategy._tag === "Sequential" ? sequentialFinalizers : parallelNFinalizers(strategy.parallelism);
      switch (scope2.strategy._tag) {
        case "Parallel":
          return patch13(self(parallelFinalizers));
        case "Sequential":
          return patch13(self(sequentialFinalizers));
        case "ParallelN":
          return patch13(self(parallelNFinalizers(scope2.strategy.parallelism)));
      }
    } else {
      return self(identity);
    }
  }
})), scopeWith = (f) => flatMap12(scopeTag, f), scopedWith = (f) => flatMap12(scopeMake2(), (scope2) => onExit(f(scope2), (exit3) => scope2.close(exit3))), scopedEffect = (effect) => flatMap12(scopeMake2(), (scope2) => scopeUse(effect, scope2)), sequentialFinalizers = (self) => contextWithEffect((context4) => match2(getOption2(context4, scopeTag), {
  onNone: () => self,
  onSome: (scope2) => {
    switch (scope2.strategy._tag) {
      case "Sequential":
        return self;
      case "Parallel":
      case "ParallelN":
        return flatMap12(scopeFork(scope2, sequential3), (inner) => scopeExtend(self, inner));
    }
  }
})), tagMetricsScoped = (key, value2) => labelMetricsScoped([make39(key, value2)]), labelMetricsScoped = (labels) => fiberRefLocallyScopedWith(currentMetricLabels, (old) => union2(old, labels)), using, validate, validateWith, validateFirst, withClockScoped = (c) => fiberRefLocallyScopedWith(currentServices, add2(clockTag, c)), withRandomScoped = (value2) => fiberRefLocallyScopedWith(currentServices, add2(randomTag, value2)), withConfigProviderScoped = (provider) => fiberRefLocallyScopedWith(currentServices, add2(configProviderTag, provider)), withEarlyRelease = (self) => scopeWith((parent) => flatMap12(scopeFork(parent, sequential2), (child) => pipe(self, scopeExtend(child), map14((value2) => [fiberIdWith((fiberId2) => scopeClose(child, exitInterrupt(fiberId2))), value2])))), zipOptions, zipLeftOptions, zipRightOptions, zipWithOptions, withRuntimeFlagsScoped = (update7) => {
  if (update7 === empty20) {
    return void_3;
  }
  return pipe(runtimeFlags, flatMap12((runtimeFlags2) => {
    const updatedRuntimeFlags = patch7(runtimeFlags2, update7);
    const revertRuntimeFlags = diff7(updatedRuntimeFlags, runtimeFlags2);
    return pipe(updateRuntimeFlags(update7), zipRight2(addFinalizer2(() => updateRuntimeFlags(revertRuntimeFlags))), asVoid2);
  }), uninterruptible);
}, scopeTag, scope2, scopeUnsafeAddFinalizer = (scope3, fin) => {
  if (scope3.state._tag === "Open") {
    scope3.state.finalizers.set({}, fin);
  }
}, ScopeImplProto, scopeUnsafeMake2 = (strategy = sequential2) => {
  const scope3 = Object.create(ScopeImplProto);
  scope3.strategy = strategy;
  scope3.state = {
    _tag: "Open",
    finalizers: new Map
  };
  return scope3;
}, scopeMake2 = (strategy = sequential2) => sync(() => scopeUnsafeMake2(strategy)), scopeExtend, scopeUse, fiberRefUnsafeMakeSupervisor = (initial) => fiberRefUnsafeMakePatch(initial, {
  differ: differ2,
  fork: empty34
}), fiberRefLocallyScoped, fiberRefLocallyScopedWith, fiberRefMake = (initial, options) => fiberRefMakeWith(() => fiberRefUnsafeMake(initial, options)), fiberRefMakeWith = (ref) => acquireRelease2(tap2(sync(ref), (ref2) => fiberRefUpdate(ref2, identity)), (fiberRef) => fiberRefDelete(fiberRef)), fiberRefMakeContext = (initial) => fiberRefMakeWith(() => fiberRefUnsafeMakeContext(initial)), fiberRefMakeRuntimeFlags = (initial) => fiberRefMakeWith(() => fiberRefUnsafeMakeRuntimeFlags(initial)), currentRuntimeFlags, currentSupervisor, fiberAwaitAll = (fibers) => forEach15(fibers, _await2), fiberAll = (fibers) => {
  const _fiberAll = {
    ...CommitPrototype2,
    commit() {
      return join3(this);
    },
    [FiberTypeId]: fiberVariance2,
    id: () => fromIterable2(fibers).reduce((id2, fiber) => combine5(id2, fiber.id()), none4),
    await: exit(forEachParUnbounded(fibers, (fiber) => flatten8(fiber.await), false)),
    children: map14(forEachParUnbounded(fibers, (fiber) => fiber.children, false), flatten3),
    inheritAll: forEachSequentialDiscard(fibers, (fiber) => fiber.inheritAll),
    poll: map14(forEachSequential(fibers, (fiber) => fiber.poll), reduceRight(some3(exitSucceed(new Array)), (optionB, optionA) => {
      switch (optionA._tag) {
        case "None": {
          return none2();
        }
        case "Some": {
          switch (optionB._tag) {
            case "None": {
              return none2();
            }
            case "Some": {
              return some3(exitZipWith(optionA.value, optionB.value, {
                onSuccess: (a, chunk3) => [a, ...chunk3],
                onFailure: parallel
              }));
            }
          }
        }
      }
    })),
    interruptAsFork: (fiberId2) => forEachSequentialDiscard(fibers, (fiber) => fiber.interruptAsFork(fiberId2))
  };
  return _fiberAll;
}, fiberInterruptFork = (self) => asVoid2(forkDaemon2(interruptFiber(self))), fiberJoinAll = (fibers) => join3(fiberAll(fibers)), fiberScoped = (self) => acquireRelease2(succeed(self), interruptFiber), raceWith, disconnect = (self) => uninterruptibleMask((restore) => fiberIdWith((fiberId2) => flatMap12(forkDaemon2(restore(self)), (fiber) => pipe(restore(join3(fiber)), onInterrupt(() => pipe(fiber, interruptAsFork(fiberId2))))))), race2, raceFibersWith, completeRace = (winner, loser, cont, ab, cb) => {
  if (compareAndSet(true, false)(ab)) {
    cb(cont(winner, loser));
  }
}, ensuring2, invokeWithInterrupt = (self, entries3, onInterrupt3) => fiberIdWith((id2) => flatMap12(flatMap12(forkDaemon2(interruptible2(self)), (processing) => async_((cb) => {
  const counts = entries3.map((_) => _.listeners.count);
  const checkDone = () => {
    if (counts.every((count) => count === 0)) {
      if (entries3.every((_) => {
        if (_.result.state.current._tag === "Pending") {
          return true;
        } else if (_.result.state.current._tag === "Done" && exitIsExit(_.result.state.current.effect) && _.result.state.current.effect._tag === "Failure" && isInterrupted(_.result.state.current.effect.cause)) {
          return true;
        } else {
          return false;
        }
      })) {
        cleanup.forEach((f) => f());
        onInterrupt3?.();
        cb(interruptFiber(processing));
      }
    }
  };
  processing.addObserver((exit3) => {
    cleanup.forEach((f) => f());
    cb(exit3);
  });
  const cleanup = entries3.map((r, i2) => {
    const observer = (count) => {
      counts[i2] = count;
      checkDone();
    };
    r.listeners.addObserver(observer);
    return () => r.listeners.removeObserver(observer);
  });
  checkDone();
  return sync(() => {
    cleanup.forEach((f) => f());
  });
})), () => suspend(() => {
  const residual = entries3.flatMap((entry) => {
    if (!entry.state.completed) {
      return [entry];
    }
    return [];
  });
  return forEachSequentialDiscard(residual, (entry) => complete2(entry.request, exitInterrupt(id2)));
}))), interruptWhenPossible, makeSpanScoped = (name, options) => {
  options = addSpanStackTrace(options);
  return uninterruptible(withFiberRuntime((fiber) => {
    const scope3 = unsafeGet3(fiber.getFiberRef(currentContext), scopeTag);
    const span2 = unsafeMakeSpan(fiber, name, options);
    const timingEnabled = fiber.getFiberRef(currentTracerTimingEnabled);
    const clock_ = get5(fiber.getFiberRef(currentServices), clockTag);
    return as3(scopeAddFinalizerExit(scope3, (exit3) => endSpan(span2, exit3, clock_, timingEnabled)), span2);
  }));
}, withTracerScoped = (value2) => fiberRefLocallyScopedWith(currentServices, add2(tracerTag, value2)), withSpanScoped = function() {
  const dataFirst = typeof arguments[0] !== "string";
  const name = dataFirst ? arguments[1] : arguments[0];
  const options = addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]);
  if (dataFirst) {
    const self = arguments[0];
    return flatMap12(makeSpanScoped(name, addSpanStackTrace(options)), (span2) => provideService(self, spanTag, span2));
  }
  return (self) => flatMap12(makeSpanScoped(name, addSpanStackTrace(options)), (span2) => provideService(self, spanTag, span2));
};
var init_fiberRuntime = __esm(() => {
  init_Array();
  init_Boolean();
  init_Chunk();
  init_Context();
  init_Deferred();
  init_Effectable();
  init_ExecutionStrategy();
  init_FiberId();
  init_FiberRefs();
  init_FiberRefsPatch();
  init_FiberStatus();
  init_Function();
  init_GlobalValue();
  init_HashMap();
  init_HashSet();
  init_Inspectable();
  init_LogLevel();
  init_Micro();
  init_MutableRef();
  init_Option();
  init_Predicate();
  init_Ref();
  init_RuntimeFlagsPatch();
  init_Scheduler();
  init_Utils();
  init_blockedRequests();
  init_cause();
  init_clock();
  init_completedRequestMap();
  init_concurrency();
  init_configProvider();
  init_core_effect();
  init_core();
  init_defaultServices();
  init_console();
  init_executionStrategy();
  init_fiber();
  init_fiberRefs();
  init_fiberScope();
  init_logger();
  init_metric();
  init_boundaries();
  init_label();
  init_random();
  init_request();
  init_runtimeFlags();
  init_runtimeFlags();
  init_supervisor();
  init_patch2();
  init_tracer();
  fiberStarted = /* @__PURE__ */ counter6("effect_fiber_started", {
    incremental: true
  });
  fiberActive = /* @__PURE__ */ counter6("effect_fiber_active");
  fiberSuccesses = /* @__PURE__ */ counter6("effect_fiber_successes", {
    incremental: true
  });
  fiberFailures = /* @__PURE__ */ counter6("effect_fiber_failures", {
    incremental: true
  });
  fiberLifetimes = /* @__PURE__ */ tagged2(/* @__PURE__ */ histogram5("effect_fiber_lifetimes", /* @__PURE__ */ exponential({
    start: 0.5,
    factor: 2,
    count: 35
  })), "time_unit", "milliseconds");
  runtimeFiberVariance = {
    _E: (_) => _,
    _A: (_) => _
  };
  YieldedOp = /* @__PURE__ */ Symbol.for("effect/internal/fiberRuntime/YieldedOp");
  yieldedOpChannel = /* @__PURE__ */ globalValue("effect/internal/fiberRuntime/yieldedOpChannel", () => ({
    currentOp: null
  }));
  contOpSuccess = {
    [OP_ON_SUCCESS]: (_, cont, value2) => {
      return internalCall(() => cont.effect_instruction_i1(value2));
    },
    ["OnStep"]: (_, _cont, value2) => {
      return exitSucceed(exitSucceed(value2));
    },
    [OP_ON_SUCCESS_AND_FAILURE]: (_, cont, value2) => {
      return internalCall(() => cont.effect_instruction_i2(value2));
    },
    [OP_REVERT_FLAGS]: (self, cont, value2) => {
      self.patchRuntimeFlags(self.currentRuntimeFlags, cont.patch);
      if (interruptible(self.currentRuntimeFlags) && self.isInterrupted()) {
        return exitFailCause(self.getInterruptedCause());
      } else {
        return exitSucceed(value2);
      }
    },
    [OP_WHILE]: (self, cont, value2) => {
      internalCall(() => cont.effect_instruction_i2(value2));
      if (internalCall(() => cont.effect_instruction_i0())) {
        self.pushStack(cont);
        return internalCall(() => cont.effect_instruction_i1());
      } else {
        return void_3;
      }
    },
    [OP_ITERATOR]: (self, cont, value2) => {
      const state = internalCall(() => cont.effect_instruction_i0.next(value2));
      if (state.done)
        return exitSucceed(state.value);
      self.pushStack(cont);
      return yieldWrapGet(state.value);
    }
  };
  drainQueueWhileRunningTable = {
    [OP_INTERRUPT_SIGNAL]: (self, runtimeFlags2, cur, message) => {
      self.processNewInterruptSignal(message.cause);
      return interruptible(runtimeFlags2) ? exitFailCause(message.cause) : cur;
    },
    [OP_RESUME]: (_self, _runtimeFlags, _cur, _message) => {
      throw new Error("It is illegal to have multiple concurrent run loops in a single fiber");
    },
    [OP_STATEFUL]: (self, runtimeFlags2, cur, message) => {
      message.onFiber(self, running2(runtimeFlags2));
      return cur;
    },
    [OP_YIELD_NOW]: (_self, _runtimeFlags, cur, _message) => {
      return flatMap12(yieldNow(), () => cur);
    }
  };
  _version = /* @__PURE__ */ getCurrentVersion();
  FiberRuntime = class FiberRuntime extends Class2 {
    [FiberTypeId] = fiberVariance2;
    [RuntimeFiberTypeId] = runtimeFiberVariance;
    _fiberRefs;
    _fiberId;
    _queue = /* @__PURE__ */ new Array;
    _children = null;
    _observers = /* @__PURE__ */ new Array;
    _running = false;
    _stack = [];
    _asyncInterruptor = null;
    _asyncBlockingOn = null;
    _exitValue = null;
    _steps = [];
    _isYielding = false;
    currentRuntimeFlags;
    currentOpCount = 0;
    currentSupervisor;
    currentScheduler;
    currentTracer;
    currentSpan;
    currentContext;
    currentDefaultServices;
    constructor(fiberId2, fiberRefs0, runtimeFlags0) {
      super();
      this.currentRuntimeFlags = runtimeFlags0;
      this._fiberId = fiberId2;
      this._fiberRefs = fiberRefs0;
      if (runtimeMetrics(runtimeFlags0)) {
        const tags = this.getFiberRef(currentMetricLabels);
        fiberStarted.unsafeUpdate(1, tags);
        fiberActive.unsafeUpdate(1, tags);
      }
      this.refreshRefCache();
    }
    commit() {
      return join3(this);
    }
    id() {
      return this._fiberId;
    }
    resume(effect) {
      this.tell(resume(effect));
    }
    get status() {
      return this.ask((_, status2) => status2);
    }
    get runtimeFlags() {
      return this.ask((state, status2) => {
        if (isDone3(status2)) {
          return state.currentRuntimeFlags;
        }
        return status2.runtimeFlags;
      });
    }
    scope() {
      return unsafeMake9(this);
    }
    get children() {
      return this.ask((fiber) => Array.from(fiber.getChildren()));
    }
    getChildren() {
      if (this._children === null) {
        this._children = new Set;
      }
      return this._children;
    }
    getInterruptedCause() {
      return this.getFiberRef(currentInterruptedCause);
    }
    fiberRefs() {
      return this.ask((fiber) => fiber.getFiberRefs());
    }
    ask(f) {
      return suspend(() => {
        const deferred = deferredUnsafeMake(this._fiberId);
        this.tell(stateful((fiber, status2) => {
          deferredUnsafeDone(deferred, sync(() => f(fiber, status2)));
        }));
        return deferredAwait(deferred);
      });
    }
    tell(message) {
      this._queue.push(message);
      if (!this._running) {
        this._running = true;
        this.drainQueueLaterOnExecutor();
      }
    }
    get await() {
      return async_((resume2) => {
        const cb = (exit3) => resume2(succeed(exit3));
        this.tell(stateful((fiber, _) => {
          if (fiber._exitValue !== null) {
            cb(this._exitValue);
          } else {
            fiber.addObserver(cb);
          }
        }));
        return sync(() => this.tell(stateful((fiber, _) => {
          fiber.removeObserver(cb);
        })));
      }, this.id());
    }
    get inheritAll() {
      return withFiberRuntime((parentFiber, parentStatus) => {
        const parentFiberId = parentFiber.id();
        const parentFiberRefs = parentFiber.getFiberRefs();
        const parentRuntimeFlags = parentStatus.runtimeFlags;
        const childFiberRefs = this.getFiberRefs();
        const updatedFiberRefs = joinAs(parentFiberRefs, parentFiberId, childFiberRefs);
        parentFiber.setFiberRefs(updatedFiberRefs);
        const updatedRuntimeFlags = parentFiber.getFiberRef(currentRuntimeFlags);
        const patch13 = pipe(diff7(parentRuntimeFlags, updatedRuntimeFlags), exclude2(Interruption), exclude2(WindDown));
        return updateRuntimeFlags(patch13);
      });
    }
    get poll() {
      return sync(() => fromNullable2(this._exitValue));
    }
    unsafePoll() {
      return this._exitValue;
    }
    interruptAsFork(fiberId2) {
      return sync(() => this.tell(interruptSignal(interrupt(fiberId2))));
    }
    unsafeInterruptAsFork(fiberId2) {
      this.tell(interruptSignal(interrupt(fiberId2)));
    }
    addObserver(observer) {
      if (this._exitValue !== null) {
        observer(this._exitValue);
      } else {
        this._observers.push(observer);
      }
    }
    removeObserver(observer) {
      this._observers = this._observers.filter((o) => o !== observer);
    }
    getFiberRefs() {
      this.setFiberRef(currentRuntimeFlags, this.currentRuntimeFlags);
      return this._fiberRefs;
    }
    unsafeDeleteFiberRef(fiberRef) {
      this._fiberRefs = delete_(this._fiberRefs, fiberRef);
    }
    getFiberRef(fiberRef) {
      if (this._fiberRefs.locals.has(fiberRef)) {
        return this._fiberRefs.locals.get(fiberRef)[0][1];
      }
      return fiberRef.initial;
    }
    setFiberRef(fiberRef, value2) {
      this._fiberRefs = updateAs(this._fiberRefs, {
        fiberId: this._fiberId,
        fiberRef,
        value: value2
      });
      this.refreshRefCache();
    }
    refreshRefCache() {
      this.currentDefaultServices = this.getFiberRef(currentServices);
      this.currentTracer = this.currentDefaultServices.unsafeMap.get(tracerTag.key);
      this.currentSupervisor = this.getFiberRef(currentSupervisor);
      this.currentScheduler = this.getFiberRef(currentScheduler);
      this.currentContext = this.getFiberRef(currentContext);
      this.currentSpan = this.currentContext.unsafeMap.get(spanTag.key);
    }
    setFiberRefs(fiberRefs4) {
      this._fiberRefs = fiberRefs4;
      this.refreshRefCache();
    }
    addChild(child) {
      this.getChildren().add(child);
    }
    removeChild(child) {
      this.getChildren().delete(child);
    }
    transferChildren(scope2) {
      const children2 = this._children;
      this._children = null;
      if (children2 !== null && children2.size > 0) {
        for (const child of children2) {
          if (child._exitValue === null) {
            scope2.add(this.currentRuntimeFlags, child);
          }
        }
      }
    }
    drainQueueOnCurrentThread() {
      let recurse = true;
      while (recurse) {
        let evaluationSignal = EvaluationSignalContinue;
        const prev = globalThis[currentFiberURI];
        globalThis[currentFiberURI] = this;
        try {
          while (evaluationSignal === EvaluationSignalContinue) {
            evaluationSignal = this._queue.length === 0 ? EvaluationSignalDone : this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]);
          }
        } finally {
          this._running = false;
          globalThis[currentFiberURI] = prev;
        }
        if (this._queue.length > 0 && !this._running) {
          this._running = true;
          if (evaluationSignal === EvaluationSignalYieldNow) {
            this.drainQueueLaterOnExecutor();
            recurse = false;
          } else {
            recurse = true;
          }
        } else {
          recurse = false;
        }
      }
    }
    drainQueueLaterOnExecutor() {
      this.currentScheduler.scheduleTask(this.run, this.getFiberRef(currentSchedulingPriority));
    }
    drainQueueWhileRunning(runtimeFlags2, cur0) {
      let cur = cur0;
      while (this._queue.length > 0) {
        const message = this._queue.splice(0, 1)[0];
        cur = drainQueueWhileRunningTable[message._tag](this, runtimeFlags2, cur, message);
      }
      return cur;
    }
    isInterrupted() {
      return !isEmpty7(this.getFiberRef(currentInterruptedCause));
    }
    addInterruptedCause(cause2) {
      const oldSC = this.getFiberRef(currentInterruptedCause);
      this.setFiberRef(currentInterruptedCause, sequential(oldSC, cause2));
    }
    processNewInterruptSignal(cause2) {
      this.addInterruptedCause(cause2);
      this.sendInterruptSignalToAllChildren();
    }
    sendInterruptSignalToAllChildren() {
      if (this._children === null || this._children.size === 0) {
        return false;
      }
      let told = false;
      for (const child of this._children) {
        child.tell(interruptSignal(interrupt(this.id())));
        told = true;
      }
      return told;
    }
    interruptAllChildren() {
      if (this.sendInterruptSignalToAllChildren()) {
        const it = this._children.values();
        this._children = null;
        let isDone4 = false;
        const body = () => {
          const next2 = it.next();
          if (!next2.done) {
            return asVoid2(next2.value.await);
          } else {
            return sync(() => {
              isDone4 = true;
            });
          }
        };
        return whileLoop({
          while: () => !isDone4,
          body,
          step: () => {}
        });
      }
      return null;
    }
    reportExitValue(exit3) {
      if (runtimeMetrics(this.currentRuntimeFlags)) {
        const tags = this.getFiberRef(currentMetricLabels);
        const startTimeMillis = this.id().startTimeMillis;
        const endTimeMillis = Date.now();
        fiberLifetimes.unsafeUpdate(endTimeMillis - startTimeMillis, tags);
        fiberActive.unsafeUpdate(-1, tags);
        switch (exit3._tag) {
          case OP_SUCCESS: {
            fiberSuccesses.unsafeUpdate(1, tags);
            break;
          }
          case OP_FAILURE: {
            fiberFailures.unsafeUpdate(1, tags);
            break;
          }
        }
      }
      if (exit3._tag === "Failure") {
        const level = this.getFiberRef(currentUnhandledErrorLogLevel);
        if (!isInterruptedOnly(exit3.cause) && level._tag === "Some") {
          this.log("Fiber terminated with an unhandled error", exit3.cause, level);
        }
      }
    }
    setExitValue(exit3) {
      this._exitValue = exit3;
      this.reportExitValue(exit3);
      for (let i2 = this._observers.length - 1;i2 >= 0; i2--) {
        this._observers[i2](exit3);
      }
      this._observers = [];
    }
    getLoggers() {
      return this.getFiberRef(currentLoggers);
    }
    log(message, cause2, overrideLogLevel) {
      const logLevel = isSome2(overrideLogLevel) ? overrideLogLevel.value : this.getFiberRef(currentLogLevel);
      const minimumLogLevel = this.getFiberRef(currentMinimumLogLevel);
      if (greaterThan6(minimumLogLevel, logLevel)) {
        return;
      }
      const spans = this.getFiberRef(currentLogSpan);
      const annotations2 = this.getFiberRef(currentLogAnnotations);
      const loggers = this.getLoggers();
      const contextMap = this.getFiberRefs();
      if (size6(loggers) > 0) {
        const clockService = get5(this.getFiberRef(currentServices), clockTag);
        const date2 = new Date(clockService.unsafeCurrentTimeMillis());
        withRedactableContext(contextMap, () => {
          for (const logger of loggers) {
            logger.log({
              fiberId: this.id(),
              logLevel,
              message,
              cause: cause2,
              context: contextMap,
              spans,
              annotations: annotations2,
              date: date2
            });
          }
        });
      }
    }
    evaluateMessageWhileSuspended(message) {
      switch (message._tag) {
        case OP_YIELD_NOW: {
          return EvaluationSignalYieldNow;
        }
        case OP_INTERRUPT_SIGNAL: {
          this.processNewInterruptSignal(message.cause);
          if (this._asyncInterruptor !== null) {
            this._asyncInterruptor(exitFailCause(message.cause));
            this._asyncInterruptor = null;
          }
          return EvaluationSignalContinue;
        }
        case OP_RESUME: {
          this._asyncInterruptor = null;
          this._asyncBlockingOn = null;
          this.evaluateEffect(message.effect);
          return EvaluationSignalContinue;
        }
        case OP_STATEFUL: {
          message.onFiber(this, this._exitValue !== null ? done4 : suspended2(this.currentRuntimeFlags, this._asyncBlockingOn));
          return EvaluationSignalContinue;
        }
        default: {
          return absurd3(message);
        }
      }
    }
    evaluateEffect(effect0) {
      this.currentSupervisor.onResume(this);
      try {
        let effect = interruptible(this.currentRuntimeFlags) && this.isInterrupted() ? exitFailCause(this.getInterruptedCause()) : effect0;
        while (effect !== null) {
          const eff = effect;
          const exit3 = this.runLoop(eff);
          if (exit3 === YieldedOp) {
            const op = yieldedOpChannel.currentOp;
            yieldedOpChannel.currentOp = null;
            if (op._op === OP_YIELD) {
              if (cooperativeYielding(this.currentRuntimeFlags)) {
                this.tell(yieldNow3());
                this.tell(resume(exitVoid));
                effect = null;
              } else {
                effect = exitVoid;
              }
            } else if (op._op === OP_ASYNC) {
              effect = null;
            }
          } else {
            this.currentRuntimeFlags = pipe(this.currentRuntimeFlags, enable2(WindDown));
            const interruption2 = this.interruptAllChildren();
            if (interruption2 !== null) {
              effect = flatMap12(interruption2, () => exit3);
            } else {
              if (this._queue.length === 0) {
                this.setExitValue(exit3);
              } else {
                this.tell(resume(exit3));
              }
              effect = null;
            }
          }
        }
      } finally {
        this.currentSupervisor.onSuspend(this);
      }
    }
    start(effect) {
      if (!this._running) {
        this._running = true;
        const prev = globalThis[currentFiberURI];
        globalThis[currentFiberURI] = this;
        try {
          this.evaluateEffect(effect);
        } finally {
          this._running = false;
          globalThis[currentFiberURI] = prev;
          if (this._queue.length > 0) {
            this.drainQueueLaterOnExecutor();
          }
        }
      } else {
        this.tell(resume(effect));
      }
    }
    startFork(effect) {
      this.tell(resume(effect));
    }
    patchRuntimeFlags(oldRuntimeFlags, patch13) {
      const newRuntimeFlags = patch7(oldRuntimeFlags, patch13);
      globalThis[currentFiberURI] = this;
      this.currentRuntimeFlags = newRuntimeFlags;
      return newRuntimeFlags;
    }
    initiateAsync(runtimeFlags2, asyncRegister) {
      let alreadyCalled = false;
      const callback = (effect) => {
        if (!alreadyCalled) {
          alreadyCalled = true;
          this.tell(resume(effect));
        }
      };
      if (interruptible(runtimeFlags2)) {
        this._asyncInterruptor = callback;
      }
      try {
        asyncRegister(callback);
      } catch (e) {
        callback(failCause(die(e)));
      }
    }
    pushStack(cont) {
      this._stack.push(cont);
      if (cont._op === "OnStep") {
        this._steps.push({
          refs: this.getFiberRefs(),
          flags: this.currentRuntimeFlags
        });
      }
    }
    popStack() {
      const item = this._stack.pop();
      if (item) {
        if (item._op === "OnStep") {
          this._steps.pop();
        }
        return item;
      }
      return;
    }
    getNextSuccessCont() {
      let frame = this.popStack();
      while (frame) {
        if (frame._op !== OP_ON_FAILURE) {
          return frame;
        }
        frame = this.popStack();
      }
    }
    getNextFailCont() {
      let frame = this.popStack();
      while (frame) {
        if (frame._op !== OP_ON_SUCCESS && frame._op !== OP_WHILE && frame._op !== OP_ITERATOR) {
          return frame;
        }
        frame = this.popStack();
      }
    }
    [OP_TAG](op) {
      return sync(() => unsafeGet3(this.currentContext, op));
    }
    ["Left"](op) {
      return fail2(op.left);
    }
    ["None"](_) {
      return fail2(new NoSuchElementException);
    }
    ["Right"](op) {
      return exitSucceed(op.right);
    }
    ["Some"](op) {
      return exitSucceed(op.value);
    }
    ["Micro"](op) {
      return unsafeAsync((microResume) => {
        let resume2 = microResume;
        const fiber = runFork(provideContext2(op, this.currentContext));
        fiber.addObserver((exit3) => {
          if (exit3._tag === "Success") {
            return resume2(exitSucceed(exit3.value));
          }
          switch (exit3.cause._tag) {
            case "Interrupt": {
              return resume2(exitFailCause(interrupt(none4)));
            }
            case "Fail": {
              return resume2(fail2(exit3.cause.error));
            }
            case "Die": {
              return resume2(die2(exit3.cause.defect));
            }
          }
        });
        return unsafeAsync((abortResume) => {
          resume2 = (_) => {
            abortResume(void_3);
          };
          fiber.unsafeInterrupt();
        });
      });
    }
    [OP_SYNC](op) {
      const value2 = internalCall(() => op.effect_instruction_i0());
      const cont = this.getNextSuccessCont();
      if (cont !== undefined) {
        if (!(cont._op in contOpSuccess)) {
          absurd3(cont);
        }
        return contOpSuccess[cont._op](this, cont, value2);
      } else {
        yieldedOpChannel.currentOp = exitSucceed(value2);
        return YieldedOp;
      }
    }
    [OP_SUCCESS](op) {
      const oldCur = op;
      const cont = this.getNextSuccessCont();
      if (cont !== undefined) {
        if (!(cont._op in contOpSuccess)) {
          absurd3(cont);
        }
        return contOpSuccess[cont._op](this, cont, oldCur.effect_instruction_i0);
      } else {
        yieldedOpChannel.currentOp = oldCur;
        return YieldedOp;
      }
    }
    [OP_FAILURE](op) {
      const cause2 = op.effect_instruction_i0;
      const cont = this.getNextFailCont();
      if (cont !== undefined) {
        switch (cont._op) {
          case OP_ON_FAILURE:
          case OP_ON_SUCCESS_AND_FAILURE: {
            if (!(interruptible(this.currentRuntimeFlags) && this.isInterrupted())) {
              return internalCall(() => cont.effect_instruction_i1(cause2));
            } else {
              return exitFailCause(stripFailures(cause2));
            }
          }
          case "OnStep": {
            if (!(interruptible(this.currentRuntimeFlags) && this.isInterrupted())) {
              return exitSucceed(exitFailCause(cause2));
            } else {
              return exitFailCause(stripFailures(cause2));
            }
          }
          case OP_REVERT_FLAGS: {
            this.patchRuntimeFlags(this.currentRuntimeFlags, cont.patch);
            if (interruptible(this.currentRuntimeFlags) && this.isInterrupted()) {
              return exitFailCause(sequential(cause2, this.getInterruptedCause()));
            } else {
              return exitFailCause(cause2);
            }
          }
          default: {
            absurd3(cont);
          }
        }
      } else {
        yieldedOpChannel.currentOp = exitFailCause(cause2);
        return YieldedOp;
      }
    }
    [OP_WITH_RUNTIME](op) {
      return internalCall(() => op.effect_instruction_i0(this, running2(this.currentRuntimeFlags)));
    }
    ["Blocked"](op) {
      const refs = this.getFiberRefs();
      const flags = this.currentRuntimeFlags;
      if (this._steps.length > 0) {
        const frames = [];
        const snap = this._steps[this._steps.length - 1];
        let frame = this.popStack();
        while (frame && frame._op !== "OnStep") {
          frames.push(frame);
          frame = this.popStack();
        }
        this.setFiberRefs(snap.refs);
        this.currentRuntimeFlags = snap.flags;
        const patchRefs = diff9(snap.refs, refs);
        const patchFlags = diff7(snap.flags, flags);
        return exitSucceed(blocked(op.effect_instruction_i0, withFiberRuntime((newFiber) => {
          while (frames.length > 0) {
            newFiber.pushStack(frames.pop());
          }
          newFiber.setFiberRefs(patch10(newFiber.id(), newFiber.getFiberRefs())(patchRefs));
          newFiber.currentRuntimeFlags = patch7(patchFlags)(newFiber.currentRuntimeFlags);
          return op.effect_instruction_i1;
        })));
      }
      return uninterruptibleMask((restore) => flatMap12(forkDaemon2(runRequestBlock(op.effect_instruction_i0)), () => restore(op.effect_instruction_i1)));
    }
    ["RunBlocked"](op) {
      return runBlockedRequests(op.effect_instruction_i0);
    }
    [OP_UPDATE_RUNTIME_FLAGS](op) {
      const updateFlags = op.effect_instruction_i0;
      const oldRuntimeFlags = this.currentRuntimeFlags;
      const newRuntimeFlags = patch7(oldRuntimeFlags, updateFlags);
      if (interruptible(newRuntimeFlags) && this.isInterrupted()) {
        return exitFailCause(this.getInterruptedCause());
      } else {
        this.patchRuntimeFlags(this.currentRuntimeFlags, updateFlags);
        if (op.effect_instruction_i1) {
          const revertFlags = diff7(newRuntimeFlags, oldRuntimeFlags);
          this.pushStack(new RevertFlags(revertFlags, op));
          return internalCall(() => op.effect_instruction_i1(oldRuntimeFlags));
        } else {
          return exitVoid;
        }
      }
    }
    [OP_ON_SUCCESS](op) {
      this.pushStack(op);
      return op.effect_instruction_i0;
    }
    ["OnStep"](op) {
      this.pushStack(op);
      return op.effect_instruction_i0;
    }
    [OP_ON_FAILURE](op) {
      this.pushStack(op);
      return op.effect_instruction_i0;
    }
    [OP_ON_SUCCESS_AND_FAILURE](op) {
      this.pushStack(op);
      return op.effect_instruction_i0;
    }
    [OP_ASYNC](op) {
      this._asyncBlockingOn = op.effect_instruction_i1;
      this.initiateAsync(this.currentRuntimeFlags, op.effect_instruction_i0);
      yieldedOpChannel.currentOp = op;
      return YieldedOp;
    }
    [OP_YIELD](op) {
      this._isYielding = false;
      yieldedOpChannel.currentOp = op;
      return YieldedOp;
    }
    [OP_WHILE](op) {
      const check2 = op.effect_instruction_i0;
      const body = op.effect_instruction_i1;
      if (check2()) {
        this.pushStack(op);
        return body();
      } else {
        return exitVoid;
      }
    }
    [OP_ITERATOR](op) {
      return contOpSuccess[OP_ITERATOR](this, op, undefined);
    }
    [OP_COMMIT](op) {
      return internalCall(() => op.commit());
    }
    runLoop(effect0) {
      let cur = effect0;
      this.currentOpCount = 0;
      while (true) {
        if ((this.currentRuntimeFlags & OpSupervision) !== 0) {
          this.currentSupervisor.onEffect(this, cur);
        }
        if (this._queue.length > 0) {
          cur = this.drainQueueWhileRunning(this.currentRuntimeFlags, cur);
        }
        if (!this._isYielding) {
          this.currentOpCount += 1;
          const shouldYield = this.currentScheduler.shouldYield(this);
          if (shouldYield !== false) {
            this._isYielding = true;
            this.currentOpCount = 0;
            const oldCur = cur;
            cur = flatMap12(yieldNow({
              priority: shouldYield
            }), () => oldCur);
          }
        }
        try {
          cur = this.currentTracer.context(() => {
            if (_version !== cur[EffectTypeId2]._V) {
              return dieMessage(`Cannot execute an Effect versioned ${cur[EffectTypeId2]._V} with a Runtime of version ${getCurrentVersion()}`);
            }
            return this[cur._op](cur);
          }, this);
          if (cur === YieldedOp) {
            const op = yieldedOpChannel.currentOp;
            if (op._op === OP_YIELD || op._op === OP_ASYNC) {
              return YieldedOp;
            }
            yieldedOpChannel.currentOp = null;
            return op._op === OP_SUCCESS || op._op === OP_FAILURE ? op : exitFailCause(die(op));
          }
        } catch (e) {
          if (cur !== YieldedOp && !hasProperty(cur, "_op") || !(cur._op in this)) {
            cur = dieMessage(`Not a valid effect: ${toStringUnknown(cur)}`);
          } else if (isInterruptedException(e)) {
            cur = exitFailCause(sequential(die(e), interrupt(none4)));
          } else {
            cur = die2(e);
          }
        }
      }
    }
    run = () => {
      this.drainQueueOnCurrentThread();
    };
  };
  currentMinimumLogLevel = /* @__PURE__ */ globalValue("effect/FiberRef/currentMinimumLogLevel", () => fiberRefUnsafeMake(fromLiteral("Info")));
  defaultLogger = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/defaultLogger"), () => loggerWithConsoleLog(stringLogger));
  jsonLogger2 = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/jsonLogger"), () => loggerWithConsoleLog(jsonLogger));
  logFmtLogger = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/logFmtLogger"), () => loggerWithConsoleLog(logfmtLogger));
  prettyLogger2 = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/prettyLogger"), () => prettyLoggerDefault);
  structuredLogger2 = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/structuredLogger"), () => loggerWithConsoleLog(structuredLogger));
  tracerLogger = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/Logger/tracerLogger"), () => makeLogger(({
    annotations: annotations2,
    cause: cause2,
    context: context4,
    fiberId: fiberId2,
    logLevel,
    message
  }) => {
    const span2 = getOption2(getOrDefault(context4, currentContext), spanTag);
    if (span2._tag === "None" || span2.value._tag === "ExternalSpan") {
      return;
    }
    const clockService = unsafeGet3(getOrDefault(context4, currentServices), clockTag);
    const attributes = {};
    for (const [key, value2] of annotations2) {
      attributes[key] = value2;
    }
    attributes["effect.fiberId"] = threadName2(fiberId2);
    attributes["effect.logLevel"] = logLevel.label;
    if (cause2 !== null && cause2._tag !== "Empty") {
      attributes["effect.cause"] = pretty(cause2, {
        renderErrorCause: true
      });
    }
    span2.value.event(toStringUnknown(Array.isArray(message) ? message[0] : message), clockService.unsafeCurrentTimeNanos(), attributes);
  }));
  currentLoggers = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentLoggers"), () => fiberRefUnsafeMakeHashSet(make14(defaultLogger, tracerLogger)));
  batchedLogger = /* @__PURE__ */ dual(3, (self, window3, f) => flatMap12(scope2, (scope2) => {
    let buffer = [];
    const flush = suspend(() => {
      if (buffer.length === 0) {
        return void_3;
      }
      const arr = buffer;
      buffer = [];
      return f(arr);
    });
    return uninterruptibleMask((restore) => pipe(sleep3(window3), zipRight2(flush), forever, restore, forkDaemon2, flatMap12((fiber) => scopeAddFinalizer(scope2, interruptFiber(fiber))), zipRight2(addFinalizer2(() => flush)), as3(makeLogger((options) => {
      buffer.push(self.log(options));
    }))));
  }));
  whenLogLevel = /* @__PURE__ */ dual(2, (effect, level) => {
    const requiredLogLevel = typeof level === "string" ? fromLiteral(level) : level;
    return withFiberRuntime((fiberState) => {
      const minimumLogLevel = fiberState.getFiberRef(currentMinimumLogLevel);
      if (greaterThan6(minimumLogLevel, requiredLogLevel)) {
        return succeed(none2());
      }
      return map14(effect, some3);
    });
  });
  acquireRelease2 = /* @__PURE__ */ dual((args2) => isEffect(args2[0]), (acquire, release) => uninterruptible(tap2(acquire, (a) => addFinalizer2((exit3) => release(a, exit3)))));
  acquireReleaseInterruptible = /* @__PURE__ */ dual((args2) => isEffect(args2[0]), (acquire, release) => ensuring2(acquire, addFinalizer2((exit3) => release(exit3))));
  _existsParFound = /* @__PURE__ */ Symbol.for("effect/Effect/existsPar/found");
  exists3 = /* @__PURE__ */ dual((args2) => isIterable(args2[0]) && !isEffect(args2[0]), (elements, predicate, options) => matchSimple(options?.concurrency, () => suspend(() => existsLoop(elements[Symbol.iterator](), 0, predicate)), () => matchEffect(forEach15(elements, (a, i2) => if_(predicate(a, i2), {
    onTrue: () => fail2(_existsParFound),
    onFalse: () => void_3
  }), options), {
    onFailure: (e) => e === _existsParFound ? succeed(true) : fail2(e),
    onSuccess: () => succeed(false)
  })));
  filter14 = /* @__PURE__ */ dual((args2) => isIterable(args2[0]) && !isEffect(args2[0]), (elements, predicate, options) => {
    const predicate_ = options?.negate ? (a, i2) => map14(predicate(a, i2), not2) : predicate;
    return matchSimple(options?.concurrency, () => suspend(() => fromIterable2(elements).reduceRight((effect, a, i2) => zipWith6(effect, suspend(() => predicate_(a, i2)), (list, b) => b ? [a, ...list] : list), sync(() => new Array))), () => map14(forEach15(elements, (a, i2) => map14(predicate_(a, i2), (b) => b ? some3(a) : none2()), options), getSomes3));
  });
  replicate4 = /* @__PURE__ */ dual(2, (self, n) => Array.from({
    length: n
  }, () => self));
  replicateEffect2 = /* @__PURE__ */ dual((args2) => isEffect(args2[0]), (self, n, options) => all9(replicate4(self, n), options));
  forEach15 = /* @__PURE__ */ dual((args2) => isIterable(args2[0]), (self, f, options) => withFiberRuntime((r) => {
    const isRequestBatchingEnabled = options?.batching === true || options?.batching === "inherit" && r.getFiberRef(currentRequestBatching);
    if (options?.discard) {
      return match12(options.concurrency, () => finalizersMaskInternal(sequential3, options?.concurrentFinalizers)((restore) => isRequestBatchingEnabled ? forEachConcurrentDiscard(self, (a, i2) => restore(f(a, i2)), true, false, 1) : forEachSequentialDiscard(self, (a, i2) => restore(f(a, i2)))), () => finalizersMaskInternal(parallel3, options?.concurrentFinalizers)((restore) => forEachConcurrentDiscard(self, (a, i2) => restore(f(a, i2)), isRequestBatchingEnabled, false)), (n) => finalizersMaskInternal(parallelN2(n), options?.concurrentFinalizers)((restore) => forEachConcurrentDiscard(self, (a, i2) => restore(f(a, i2)), isRequestBatchingEnabled, false, n)));
    }
    return match12(options?.concurrency, () => finalizersMaskInternal(sequential3, options?.concurrentFinalizers)((restore) => isRequestBatchingEnabled ? forEachParN(self, 1, (a, i2) => restore(f(a, i2)), true) : forEachSequential(self, (a, i2) => restore(f(a, i2)))), () => finalizersMaskInternal(parallel3, options?.concurrentFinalizers)((restore) => forEachParUnbounded(self, (a, i2) => restore(f(a, i2)), isRequestBatchingEnabled)), (n) => finalizersMaskInternal(parallelN2(n), options?.concurrentFinalizers)((restore) => forEachParN(self, n, (a, i2) => restore(f(a, i2)), isRequestBatchingEnabled)));
  }));
  forkWithErrorHandler = /* @__PURE__ */ dual(2, (self, handler) => fork2(onError(self, (cause2) => {
    const either5 = failureOrCause(cause2);
    switch (either5._tag) {
      case "Left":
        return handler(either5.left);
      case "Right":
        return failCause(either5.right);
    }
  })));
  mergeAll3 = /* @__PURE__ */ dual((args2) => isFunction2(args2[2]), (elements, zero3, f, options) => matchSimple(options?.concurrency, () => fromIterable2(elements).reduce((acc, a, i2) => zipWith6(acc, a, (acc2, a2) => f(acc2, a2, i2)), succeed(zero3)), () => flatMap12(make37(zero3), (acc) => flatMap12(forEach15(elements, (effect, i2) => flatMap12(effect, (a) => update4(acc, (b) => f(b, a, i2))), options), () => get14(acc)))));
  partition8 = /* @__PURE__ */ dual((args2) => isIterable(args2[0]), (elements, f, options) => pipe(forEach15(elements, (a, i2) => either3(f(a, i2)), options), map14((chunk3) => partitionMap6(chunk3, identity))));
  validateAll = /* @__PURE__ */ dual((args2) => isIterable(args2[0]), (elements, f, options) => flatMap12(partition8(elements, f, {
    concurrency: options?.concurrency,
    batching: options?.batching,
    concurrentFinalizers: options?.concurrentFinalizers
  }), ([es, bs]) => isNonEmptyArray2(es) ? fail2(es) : options?.discard ? void_3 : succeed(bs)));
  reduceEffect = /* @__PURE__ */ dual((args2) => isIterable(args2[0]) && !isEffect(args2[0]), (elements, zero3, f, options) => matchSimple(options?.concurrency, () => fromIterable2(elements).reduce((acc, a, i2) => zipWith6(acc, a, (acc2, a2) => f(acc2, a2, i2)), zero3), () => suspend(() => pipe(mergeAll3([zero3, ...elements], none2(), (acc, elem, i2) => {
    switch (acc._tag) {
      case "None": {
        return some3(elem);
      }
      case "Some": {
        return some3(f(acc.value, elem, i2));
      }
    }
  }, options), map14((option4) => {
    switch (option4._tag) {
      case "None": {
        throw new Error("BUG: Effect.reduceEffect - please report an issue at https://github.com/Effect-TS/effect/issues");
      }
      case "Some": {
        return option4.value;
      }
    }
  })))));
  using = /* @__PURE__ */ dual(2, (self, use) => scopedWith((scope2) => flatMap12(scopeExtend(self, scope2), use)));
  validate = /* @__PURE__ */ dual((args2) => isEffect(args2[1]), (self, that, options) => validateWith(self, that, (a, b) => [a, b], options));
  validateWith = /* @__PURE__ */ dual((args2) => isEffect(args2[1]), (self, that, f, options) => flatten8(zipWithOptions(exit(self), exit(that), (ea, eb) => exitZipWith(ea, eb, {
    onSuccess: f,
    onFailure: (ca, cb) => options?.concurrent ? parallel(ca, cb) : sequential(ca, cb)
  }), options)));
  validateFirst = /* @__PURE__ */ dual((args2) => isIterable(args2[0]), (elements, f, options) => flip3(forEach15(elements, (a, i2) => flip3(f(a, i2)), options)));
  zipOptions = /* @__PURE__ */ dual((args2) => isEffect(args2[1]), (self, that, options) => zipWithOptions(self, that, (a, b) => [a, b], options));
  zipLeftOptions = /* @__PURE__ */ dual((args2) => isEffect(args2[1]), (self, that, options) => {
    if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {
      return zipLeft2(self, that);
    }
    return zipWithOptions(self, that, (a, _) => a, options);
  });
  zipRightOptions = /* @__PURE__ */ dual((args2) => isEffect(args2[1]), (self, that, options) => {
    if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {
      return zipRight2(self, that);
    }
    return zipWithOptions(self, that, (_, b) => b, options);
  });
  zipWithOptions = /* @__PURE__ */ dual((args2) => isEffect(args2[1]), (self, that, f, options) => map14(all9([self, that], {
    concurrency: options?.concurrent ? 2 : 1,
    batching: options?.batching,
    concurrentFinalizers: options?.concurrentFinalizers
  }), ([a, a2]) => f(a, a2)));
  scopeTag = /* @__PURE__ */ GenericTag("effect/Scope");
  scope2 = scopeTag;
  ScopeImplProto = {
    [ScopeTypeId]: ScopeTypeId,
    [CloseableScopeTypeId]: CloseableScopeTypeId,
    pipe() {
      return pipeArguments(this, arguments);
    },
    fork(strategy) {
      return sync(() => {
        const newScope = scopeUnsafeMake2(strategy);
        if (this.state._tag === "Closed") {
          newScope.state = this.state;
          return newScope;
        }
        const key = {};
        const fin = (exit3) => newScope.close(exit3);
        this.state.finalizers.set(key, fin);
        scopeUnsafeAddFinalizer(newScope, (_) => sync(() => {
          if (this.state._tag === "Open") {
            this.state.finalizers.delete(key);
          }
        }));
        return newScope;
      });
    },
    close(exit3) {
      return suspend(() => {
        if (this.state._tag === "Closed") {
          return void_3;
        }
        const finalizers = Array.from(this.state.finalizers.values()).reverse();
        this.state = {
          _tag: "Closed",
          exit: exit3
        };
        if (finalizers.length === 0) {
          return void_3;
        }
        return isSequential(this.strategy) ? pipe(forEachSequential(finalizers, (fin) => exit(fin(exit3))), flatMap12((results) => pipe(exitCollectAll(results), map2(exitAsVoid), getOrElse2(() => exitVoid)))) : isParallel(this.strategy) ? pipe(forEachParUnbounded(finalizers, (fin) => exit(fin(exit3)), false), flatMap12((results) => pipe(exitCollectAll(results, {
          parallel: true
        }), map2(exitAsVoid), getOrElse2(() => exitVoid)))) : pipe(forEachParN(finalizers, this.strategy.parallelism, (fin) => exit(fin(exit3)), false), flatMap12((results) => pipe(exitCollectAll(results, {
          parallel: true
        }), map2(exitAsVoid), getOrElse2(() => exitVoid))));
      });
    },
    addFinalizer(fin) {
      return suspend(() => {
        if (this.state._tag === "Closed") {
          return fin(this.state.exit);
        }
        this.state.finalizers.set({}, fin);
        return void_3;
      });
    }
  };
  scopeExtend = /* @__PURE__ */ dual(2, (effect, scope3) => mapInputContext(effect, merge3(make8(scopeTag, scope3))));
  scopeUse = /* @__PURE__ */ dual(2, (effect, scope3) => pipe(effect, scopeExtend(scope3), onExit((exit3) => scope3.close(exit3))));
  fiberRefLocallyScoped = /* @__PURE__ */ dual(2, (self, value2) => asVoid2(acquireRelease2(flatMap12(fiberRefGet(self), (oldValue) => as3(fiberRefSet(self, value2), oldValue)), (oldValue) => fiberRefSet(self, oldValue))));
  fiberRefLocallyScopedWith = /* @__PURE__ */ dual(2, (self, f) => fiberRefGetWith(self, (a) => fiberRefLocallyScoped(self, f(a))));
  currentRuntimeFlags = /* @__PURE__ */ fiberRefUnsafeMakeRuntimeFlags(none5);
  currentSupervisor = /* @__PURE__ */ fiberRefUnsafeMakeSupervisor(none8);
  raceWith = /* @__PURE__ */ dual(3, (self, other, options) => raceFibersWith(self, other, {
    onSelfWin: (winner, loser) => flatMap12(winner.await, (exit3) => {
      switch (exit3._tag) {
        case OP_SUCCESS: {
          return flatMap12(winner.inheritAll, () => options.onSelfDone(exit3, loser));
        }
        case OP_FAILURE: {
          return options.onSelfDone(exit3, loser);
        }
      }
    }),
    onOtherWin: (winner, loser) => flatMap12(winner.await, (exit3) => {
      switch (exit3._tag) {
        case OP_SUCCESS: {
          return flatMap12(winner.inheritAll, () => options.onOtherDone(exit3, loser));
        }
        case OP_FAILURE: {
          return options.onOtherDone(exit3, loser);
        }
      }
    })
  }));
  race2 = /* @__PURE__ */ dual(2, (self, that) => fiberIdWith((parentFiberId) => raceWith(self, that, {
    onSelfDone: (exit3, right3) => exitMatchEffect(exit3, {
      onFailure: (cause2) => pipe(join3(right3), mapErrorCause2((cause22) => parallel(cause2, cause22))),
      onSuccess: (value2) => pipe(right3, interruptAsFiber(parentFiberId), as3(value2))
    }),
    onOtherDone: (exit3, left3) => exitMatchEffect(exit3, {
      onFailure: (cause2) => pipe(join3(left3), mapErrorCause2((cause22) => parallel(cause22, cause2))),
      onSuccess: (value2) => pipe(left3, interruptAsFiber(parentFiberId), as3(value2))
    })
  })));
  raceFibersWith = /* @__PURE__ */ dual(3, (self, other, options) => withFiberRuntime((parentFiber, parentStatus) => {
    const parentRuntimeFlags = parentStatus.runtimeFlags;
    const raceIndicator = make15(true);
    const leftFiber = unsafeMakeChildFiber(self, parentFiber, parentRuntimeFlags, options.selfScope);
    const rightFiber = unsafeMakeChildFiber(other, parentFiber, parentRuntimeFlags, options.otherScope);
    return async_((cb) => {
      leftFiber.addObserver(() => completeRace(leftFiber, rightFiber, options.onSelfWin, raceIndicator, cb));
      rightFiber.addObserver(() => completeRace(rightFiber, leftFiber, options.onOtherWin, raceIndicator, cb));
      leftFiber.startFork(self);
      rightFiber.startFork(other);
    }, combine5(leftFiber.id(), rightFiber.id()));
  }));
  ensuring2 = /* @__PURE__ */ dual(2, (self, finalizer) => uninterruptibleMask((restore) => matchCauseEffect(restore(self), {
    onFailure: (cause1) => matchCauseEffect(finalizer, {
      onFailure: (cause2) => failCause(sequential(cause1, cause2)),
      onSuccess: () => failCause(cause1)
    }),
    onSuccess: (a) => as3(finalizer, a)
  })));
  interruptWhenPossible = /* @__PURE__ */ dual(2, (self, all10) => fiberRefGetWith(currentRequestMap, (map22) => suspend(() => {
    const entries3 = fromIterable2(all10).flatMap((_) => map22.has(_) ? [map22.get(_)] : []);
    return invokeWithInterrupt(self, entries3);
  })));
});

// node_modules/effect/dist/esm/internal/cache.js
class KeySetImpl {
  head = undefined;
  tail = undefined;
  add(key) {
    if (key !== this.tail) {
      if (this.tail === undefined) {
        this.head = key;
        this.tail = key;
      } else {
        const previous = key.previous;
        const next2 = key.next;
        if (next2 !== undefined) {
          key.next = undefined;
          if (previous !== undefined) {
            previous.next = next2;
            next2.previous = previous;
          } else {
            this.head = next2;
            this.head.previous = undefined;
          }
        }
        this.tail.next = key;
        key.previous = this.tail;
        this.tail = key;
      }
    }
  }
  remove() {
    const key = this.head;
    if (key !== undefined) {
      const next2 = key.next;
      if (next2 !== undefined) {
        key.next = undefined;
        this.head = next2;
        this.head.previous = undefined;
      } else {
        this.head = undefined;
        this.tail = undefined;
      }
    }
    return key;
  }
}
var complete3 = (key, exit3, entryStats, timeToLiveMillis) => struct4({
  _tag: "Complete",
  key,
  exit: exit3,
  entryStats,
  timeToLiveMillis
}), pending2 = (key, deferred) => struct4({
  _tag: "Pending",
  key,
  deferred
}), refreshing = (deferred, complete4) => struct4({
  _tag: "Refreshing",
  deferred,
  complete: complete4
}), MapKeyTypeId, MapKeyImpl, makeMapKey = (current) => new MapKeyImpl(current), isMapKey = (u) => hasProperty(u, MapKeyTypeId), makeKeySet = () => new KeySetImpl, makeCacheState = (map22, keys7, accesses, updating, hits, misses) => ({
  map: map22,
  keys: keys7,
  accesses,
  updating,
  hits,
  misses
}), initialCacheState = () => makeCacheState(empty23(), makeKeySet(), unbounded(), make15(false), 0, 0), CacheSymbolKey = "effect/Cache", CacheTypeId, cacheVariance, ConsumerCacheSymbolKey = "effect/ConsumerCache", ConsumerCacheTypeId, consumerCacheVariance, makeCacheStats = (options) => options, makeEntryStats = (loadedMillis) => ({
  loadedMillis
}), CacheImpl, make49 = (options) => {
  const timeToLive = decode(options.timeToLive);
  return makeWith({
    capacity: options.capacity,
    lookup: options.lookup,
    timeToLive: () => timeToLive
  });
}, makeWith = (options) => map14(all9([context2(), fiberId]), ([context4, fiberId2]) => new CacheImpl(options.capacity, context4, fiberId2, options.lookup, (exit3) => decode(options.timeToLive(exit3)))), unsafeMakeWith = (capacity2, lookup, timeToLive) => new CacheImpl(capacity2, empty6(), none3, lookup, (exit3) => decode(timeToLive(exit3)));
var init_cache = __esm(() => {
  init_Context();
  init_Deferred();
  init_Duration();
  init_Either();
  init_Equal();
  init_Exit();
  init_Function();
  init_Hash();
  init_MutableHashMap();
  init_MutableQueue();
  init_MutableRef();
  init_Option();
  init_Predicate();
  init_core_effect();
  init_core();
  init_data();
  init_fiberId();
  init_fiberRuntime();
  MapKeyTypeId = /* @__PURE__ */ Symbol.for("effect/Cache/MapKey");
  MapKeyImpl = class MapKeyImpl {
    current;
    [MapKeyTypeId] = MapKeyTypeId;
    previous = undefined;
    next = undefined;
    constructor(current) {
      this.current = current;
    }
    [symbol2]() {
      return pipe(hash(this.current), combine2(hash(this.previous)), combine2(hash(this.next)), cached(this));
    }
    [symbol3](that) {
      if (this === that) {
        return true;
      }
      return isMapKey(that) && equals(this.current, that.current) && equals(this.previous, that.previous) && equals(this.next, that.next);
    }
  };
  CacheTypeId = /* @__PURE__ */ Symbol.for(CacheSymbolKey);
  cacheVariance = {
    _Key: (_) => _,
    _Error: (_) => _,
    _Value: (_) => _
  };
  ConsumerCacheTypeId = /* @__PURE__ */ Symbol.for(ConsumerCacheSymbolKey);
  consumerCacheVariance = {
    _Key: (_) => _,
    _Error: (_) => _,
    _Value: (_) => _
  };
  CacheImpl = class CacheImpl {
    capacity;
    context;
    fiberId;
    lookup;
    timeToLive;
    [CacheTypeId] = cacheVariance;
    [ConsumerCacheTypeId] = consumerCacheVariance;
    cacheState;
    constructor(capacity2, context4, fiberId2, lookup, timeToLive) {
      this.capacity = capacity2;
      this.context = context4;
      this.fiberId = fiberId2;
      this.lookup = lookup;
      this.timeToLive = timeToLive;
      this.cacheState = initialCacheState();
    }
    get(key) {
      return map14(this.getEither(key), merge);
    }
    get cacheStats() {
      return sync(() => makeCacheStats({
        hits: this.cacheState.hits,
        misses: this.cacheState.misses,
        size: size10(this.cacheState.map)
      }));
    }
    getOption(key) {
      return suspend(() => match2(get10(this.cacheState.map, key), {
        onNone: () => {
          const mapKey = makeMapKey(key);
          this.trackAccess(mapKey);
          this.trackMiss();
          return succeed(none2());
        },
        onSome: (value2) => this.resolveMapValue(value2)
      }));
    }
    getOptionComplete(key) {
      return suspend(() => match2(get10(this.cacheState.map, key), {
        onNone: () => {
          const mapKey = makeMapKey(key);
          this.trackAccess(mapKey);
          this.trackMiss();
          return succeed(none2());
        },
        onSome: (value2) => this.resolveMapValue(value2, true)
      }));
    }
    contains(key) {
      return sync(() => has6(this.cacheState.map, key));
    }
    entryStats(key) {
      return sync(() => {
        const option4 = get10(this.cacheState.map, key);
        if (isSome2(option4)) {
          switch (option4.value._tag) {
            case "Complete": {
              const loaded = option4.value.entryStats.loadedMillis;
              return some3(makeEntryStats(loaded));
            }
            case "Pending": {
              return none2();
            }
            case "Refreshing": {
              const loaded = option4.value.complete.entryStats.loadedMillis;
              return some3(makeEntryStats(loaded));
            }
          }
        }
        return none2();
      });
    }
    getEither(key) {
      return suspend(() => {
        const k = key;
        let mapKey = undefined;
        let deferred = undefined;
        let value2 = getOrUndefined2(get10(this.cacheState.map, k));
        if (value2 === undefined) {
          deferred = unsafeMake4(this.fiberId);
          mapKey = makeMapKey(k);
          if (has6(this.cacheState.map, k)) {
            value2 = getOrUndefined2(get10(this.cacheState.map, k));
          } else {
            set5(this.cacheState.map, k, pending2(mapKey, deferred));
          }
        }
        if (value2 === undefined) {
          this.trackAccess(mapKey);
          this.trackMiss();
          return map14(this.lookupValueOf(key, deferred), right2);
        } else {
          return flatMap12(this.resolveMapValue(value2), match2({
            onNone: () => this.getEither(key),
            onSome: (value3) => succeed(left2(value3))
          }));
        }
      });
    }
    invalidate(key) {
      return sync(() => {
        remove8(this.cacheState.map, key);
      });
    }
    invalidateWhen(key, when3) {
      return sync(() => {
        const value2 = get10(this.cacheState.map, key);
        if (isSome2(value2) && value2.value._tag === "Complete") {
          if (value2.value.exit._tag === "Success") {
            if (when3(value2.value.exit.value)) {
              remove8(this.cacheState.map, key);
            }
          }
        }
      });
    }
    get invalidateAll() {
      return sync(() => {
        this.cacheState.map = empty23();
      });
    }
    refresh(key) {
      return clockWith3((clock2) => suspend(() => {
        const k = key;
        const deferred = unsafeMake4(this.fiberId);
        let value2 = getOrUndefined2(get10(this.cacheState.map, k));
        if (value2 === undefined) {
          if (has6(this.cacheState.map, k)) {
            value2 = getOrUndefined2(get10(this.cacheState.map, k));
          } else {
            set5(this.cacheState.map, k, pending2(makeMapKey(k), deferred));
          }
        }
        if (value2 === undefined) {
          return asVoid2(this.lookupValueOf(key, deferred));
        } else {
          switch (value2._tag) {
            case "Complete": {
              if (this.hasExpired(clock2, value2.timeToLiveMillis)) {
                const found = getOrUndefined2(get10(this.cacheState.map, k));
                if (equals(found, value2)) {
                  remove8(this.cacheState.map, k);
                }
                return asVoid2(this.get(key));
              }
              return pipe(this.lookupValueOf(key, deferred), when(() => {
                const current = getOrUndefined2(get10(this.cacheState.map, k));
                if (equals(current, value2)) {
                  const mapValue = refreshing(deferred, value2);
                  set5(this.cacheState.map, k, mapValue);
                  return true;
                }
                return false;
              }), asVoid2);
            }
            case "Pending": {
              return _await(value2.deferred);
            }
            case "Refreshing": {
              return _await(value2.deferred);
            }
          }
        }
      }));
    }
    set(key, value2) {
      return clockWith3((clock2) => sync(() => {
        const now = clock2.unsafeCurrentTimeMillis();
        const k = key;
        const lookupResult = succeed3(value2);
        const mapValue = complete3(makeMapKey(k), lookupResult, makeEntryStats(now), now + toMillis(decode(this.timeToLive(lookupResult))));
        set5(this.cacheState.map, k, mapValue);
      }));
    }
    get size() {
      return sync(() => {
        return size10(this.cacheState.map);
      });
    }
    get values() {
      return sync(() => {
        const values10 = [];
        for (const entry of this.cacheState.map) {
          if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
            values10.push(entry[1].exit.value);
          }
        }
        return values10;
      });
    }
    get entries() {
      return sync(() => {
        const values10 = [];
        for (const entry of this.cacheState.map) {
          if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
            values10.push([entry[0], entry[1].exit.value]);
          }
        }
        return values10;
      });
    }
    get keys() {
      return sync(() => {
        const keys7 = [];
        for (const entry of this.cacheState.map) {
          if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
            keys7.push(entry[0]);
          }
        }
        return keys7;
      });
    }
    resolveMapValue(value2, ignorePending = false) {
      return clockWith3((clock2) => {
        switch (value2._tag) {
          case "Complete": {
            this.trackAccess(value2.key);
            if (this.hasExpired(clock2, value2.timeToLiveMillis)) {
              remove8(this.cacheState.map, value2.key.current);
              return succeed(none2());
            }
            this.trackHit();
            return map14(value2.exit, some3);
          }
          case "Pending": {
            this.trackAccess(value2.key);
            this.trackHit();
            if (ignorePending) {
              return succeed(none2());
            }
            return map14(_await(value2.deferred), some3);
          }
          case "Refreshing": {
            this.trackAccess(value2.complete.key);
            this.trackHit();
            if (this.hasExpired(clock2, value2.complete.timeToLiveMillis)) {
              if (ignorePending) {
                return succeed(none2());
              }
              return map14(_await(value2.deferred), some3);
            }
            return map14(value2.complete.exit, some3);
          }
        }
      });
    }
    trackHit() {
      this.cacheState.hits = this.cacheState.hits + 1;
    }
    trackMiss() {
      this.cacheState.misses = this.cacheState.misses + 1;
    }
    trackAccess(key) {
      offer(this.cacheState.accesses, key);
      if (compareAndSet(this.cacheState.updating, false, true)) {
        let loop2 = true;
        while (loop2) {
          const key2 = poll2(this.cacheState.accesses, EmptyMutableQueue);
          if (key2 === EmptyMutableQueue) {
            loop2 = false;
          } else {
            this.cacheState.keys.add(key2);
          }
        }
        let size14 = size10(this.cacheState.map);
        loop2 = size14 > this.capacity;
        while (loop2) {
          const key2 = this.cacheState.keys.remove();
          if (key2 !== undefined) {
            if (has6(this.cacheState.map, key2.current)) {
              remove8(this.cacheState.map, key2.current);
              size14 = size14 - 1;
              loop2 = size14 > this.capacity;
            }
          } else {
            loop2 = false;
          }
        }
        set3(this.cacheState.updating, false);
      }
    }
    hasExpired(clock2, timeToLiveMillis) {
      return clock2.unsafeCurrentTimeMillis() > timeToLiveMillis;
    }
    lookupValueOf(input, deferred) {
      return clockWith3((clock2) => suspend(() => {
        const key = input;
        return pipe(this.lookup(input), provideContext(this.context), exit, flatMap12((exit3) => {
          const now = clock2.unsafeCurrentTimeMillis();
          const stats = makeEntryStats(now);
          const value2 = complete3(makeMapKey(key), exit3, stats, now + toMillis(decode(this.timeToLive(exit3))));
          set5(this.cacheState.map, key, value2);
          return zipRight2(done2(deferred, exit3), exit3);
        }), onInterrupt(() => zipRight2(interrupt3(deferred), sync(() => {
          remove8(this.cacheState.map, key);
        }))));
      }));
    }
  };
});

// node_modules/effect/dist/esm/Cache.js
var exports_Cache = {};
__export(exports_Cache, {
  makeWith: () => makeWith2,
  makeEntryStats: () => makeEntryStats2,
  makeCacheStats: () => makeCacheStats2,
  make: () => make50,
  ConsumerCacheTypeId: () => ConsumerCacheTypeId2,
  CacheTypeId: () => CacheTypeId2
});
var CacheTypeId2, ConsumerCacheTypeId2, make50, makeWith2, makeCacheStats2, makeEntryStats2;
var init_Cache = __esm(() => {
  init_cache();
  CacheTypeId2 = CacheTypeId;
  ConsumerCacheTypeId2 = ConsumerCacheTypeId;
  make50 = make49;
  makeWith2 = makeWith;
  makeCacheStats2 = makeCacheStats;
  makeEntryStats2 = makeEntryStats;
});

// node_modules/effect/dist/esm/Cause.js
var exports_Cause = {};
__export(exports_Cause, {
  stripSomeDefects: () => stripSomeDefects2,
  stripFailures: () => stripFailures2,
  squashWith: () => squashWith,
  squash: () => squash,
  size: () => size14,
  sequential: () => sequential4,
  reduceWithContext: () => reduceWithContext3,
  reduce: () => reduce15,
  prettyErrors: () => prettyErrors2,
  pretty: () => pretty3,
  parallel: () => parallel4,
  originalError: () => originalError,
  match: () => match14,
  map: () => map22,
  linearize: () => linearize2,
  keepDefects: () => keepDefects2,
  isUnknownException: () => isUnknownException2,
  isSequentialType: () => isSequentialType2,
  isRuntimeException: () => isRuntimeException2,
  isParallelType: () => isParallelType2,
  isNoSuchElementException: () => isNoSuchElementException2,
  isInterruptedOnly: () => isInterruptedOnly2,
  isInterruptedException: () => isInterruptedException2,
  isInterrupted: () => isInterrupted3,
  isInterruptType: () => isInterruptType2,
  isIllegalArgumentException: () => isIllegalArgumentException2,
  isFailure: () => isFailure4,
  isFailType: () => isFailType2,
  isExceededCapacityException: () => isExceededCapacityException2,
  isEmptyType: () => isEmptyType2,
  isEmpty: () => isEmpty11,
  isDieType: () => isDieType2,
  isDie: () => isDie2,
  isCause: () => isCause2,
  interruptors: () => interruptors2,
  interruptOption: () => interruptOption2,
  interrupt: () => interrupt6,
  flipCauseOption: () => flipCauseOption2,
  flatten: () => flatten11,
  flatMap: () => flatMap16,
  find: () => find2,
  filter: () => filter15,
  failures: () => failures2,
  failureOrCause: () => failureOrCause2,
  failureOption: () => failureOption2,
  fail: () => fail8,
  empty: () => empty35,
  dieOption: () => dieOption2,
  die: () => die6,
  defects: () => defects2,
  contains: () => contains6,
  as: () => as6,
  andThen: () => andThen9,
  YieldableError: () => YieldableError3,
  UnknownExceptionTypeId: () => UnknownExceptionTypeId2,
  UnknownException: () => UnknownException2,
  TimeoutExceptionTypeId: () => TimeoutExceptionTypeId2,
  TimeoutException: () => TimeoutException3,
  RuntimeExceptionTypeId: () => RuntimeExceptionTypeId2,
  RuntimeException: () => RuntimeException2,
  NoSuchElementExceptionTypeId: () => NoSuchElementExceptionTypeId2,
  NoSuchElementException: () => NoSuchElementException3,
  InvalidPubSubCapacityExceptionTypeId: () => InvalidPubSubCapacityExceptionTypeId2,
  InterruptedExceptionTypeId: () => InterruptedExceptionTypeId2,
  InterruptedException: () => InterruptedException2,
  IllegalArgumentExceptionTypeId: () => IllegalArgumentExceptionTypeId2,
  IllegalArgumentException: () => IllegalArgumentException2,
  ExceededCapacityExceptionTypeId: () => ExceededCapacityExceptionTypeId2,
  ExceededCapacityException: () => ExceededCapacityException2,
  CauseTypeId: () => CauseTypeId2
});
var CauseTypeId2, RuntimeExceptionTypeId2, InterruptedExceptionTypeId2, IllegalArgumentExceptionTypeId2, NoSuchElementExceptionTypeId2, InvalidPubSubCapacityExceptionTypeId2, ExceededCapacityExceptionTypeId2, TimeoutExceptionTypeId2, UnknownExceptionTypeId2, YieldableError3, empty35, fail8, die6, interrupt6, parallel4, sequential4, isCause2, isEmptyType2, isFailType2, isDieType2, isInterruptType2, isSequentialType2, isParallelType2, size14, isEmpty11, isFailure4, isDie2, isInterrupted3, isInterruptedOnly2, failures2, defects2, interruptors2, failureOption2, failureOrCause2, flipCauseOption2, dieOption2, interruptOption2, keepDefects2, linearize2, stripFailures2, stripSomeDefects2, as6, map22, flatMap16, andThen9, flatten11, contains6, squash, squashWith, find2, filter15, match14, reduce15, reduceWithContext3, InterruptedException2, isInterruptedException2, IllegalArgumentException2, isIllegalArgumentException2, NoSuchElementException3, isNoSuchElementException2, RuntimeException2, isRuntimeException2, TimeoutException3, UnknownException2, isUnknownException2, ExceededCapacityException2, isExceededCapacityException2, pretty3, prettyErrors2, originalError;
var init_Cause = __esm(() => {
  init_cause();
  init_core();
  CauseTypeId2 = CauseTypeId;
  RuntimeExceptionTypeId2 = RuntimeExceptionTypeId;
  InterruptedExceptionTypeId2 = InterruptedExceptionTypeId;
  IllegalArgumentExceptionTypeId2 = IllegalArgumentExceptionTypeId;
  NoSuchElementExceptionTypeId2 = NoSuchElementExceptionTypeId;
  InvalidPubSubCapacityExceptionTypeId2 = InvalidPubSubCapacityExceptionTypeId;
  ExceededCapacityExceptionTypeId2 = ExceededCapacityExceptionTypeId;
  TimeoutExceptionTypeId2 = TimeoutExceptionTypeId;
  UnknownExceptionTypeId2 = UnknownExceptionTypeId;
  YieldableError3 = YieldableError;
  empty35 = empty22;
  fail8 = fail;
  die6 = die;
  interrupt6 = interrupt;
  parallel4 = parallel;
  sequential4 = sequential;
  isCause2 = isCause;
  isEmptyType2 = isEmptyType;
  isFailType2 = isFailType;
  isDieType2 = isDieType;
  isInterruptType2 = isInterruptType;
  isSequentialType2 = isSequentialType;
  isParallelType2 = isParallelType;
  size14 = size9;
  isEmpty11 = isEmpty7;
  isFailure4 = isFailure;
  isDie2 = isDie;
  isInterrupted3 = isInterrupted;
  isInterruptedOnly2 = isInterruptedOnly;
  failures2 = failures;
  defects2 = defects;
  interruptors2 = interruptors;
  failureOption2 = failureOption;
  failureOrCause2 = failureOrCause;
  flipCauseOption2 = flipCauseOption;
  dieOption2 = dieOption;
  interruptOption2 = interruptOption;
  keepDefects2 = keepDefects;
  linearize2 = linearize;
  stripFailures2 = stripFailures;
  stripSomeDefects2 = stripSomeDefects;
  as6 = as2;
  map22 = map13;
  flatMap16 = flatMap11;
  andThen9 = andThen5;
  flatten11 = flatten7;
  contains6 = contains5;
  squash = causeSquash;
  squashWith = causeSquashWith;
  find2 = find;
  filter15 = filter11;
  match14 = match6;
  reduce15 = reduce11;
  reduceWithContext3 = reduceWithContext;
  InterruptedException2 = InterruptedException;
  isInterruptedException2 = isInterruptedException;
  IllegalArgumentException2 = IllegalArgumentException;
  isIllegalArgumentException2 = isIllegalArgumentException;
  NoSuchElementException3 = NoSuchElementException;
  isNoSuchElementException2 = isNoSuchElementException;
  RuntimeException2 = RuntimeException;
  isRuntimeException2 = isRuntimeException;
  TimeoutException3 = TimeoutException;
  UnknownException2 = UnknownException;
  isUnknownException2 = isUnknownException;
  ExceededCapacityException2 = ExceededCapacityException;
  isExceededCapacityException2 = isExceededCapacityException;
  pretty3 = pretty;
  prettyErrors2 = prettyErrors;
  originalError = originalInstance;
});

// node_modules/effect/dist/esm/internal/schedule/interval.js
var IntervalSymbolKey = "effect/ScheduleInterval", IntervalTypeId, empty36, make51 = (startMillis, endMillis) => {
  if (startMillis > endMillis) {
    return empty36;
  }
  return {
    [IntervalTypeId]: IntervalTypeId,
    startMillis,
    endMillis
  };
}, lessThan9, min7, max8, isEmpty12 = (self) => {
  return self.startMillis >= self.endMillis;
}, isNonEmpty3 = (self) => {
  return !isEmpty12(self);
}, intersect, size15 = (self) => {
  return millis(self.endMillis - self.startMillis);
}, union9, after = (startMilliseconds) => {
  return make51(startMilliseconds, Number.POSITIVE_INFINITY);
}, before = (endMilliseconds) => {
  return make51(Number.NEGATIVE_INFINITY, endMilliseconds);
};
var init_interval = __esm(() => {
  init_Duration();
  init_Function();
  init_Option();
  IntervalTypeId = /* @__PURE__ */ Symbol.for(IntervalSymbolKey);
  empty36 = {
    [IntervalTypeId]: IntervalTypeId,
    startMillis: 0,
    endMillis: 0
  };
  lessThan9 = /* @__PURE__ */ dual(2, (self, that) => min7(self, that) === self);
  min7 = /* @__PURE__ */ dual(2, (self, that) => {
    if (self.endMillis <= that.startMillis)
      return self;
    if (that.endMillis <= self.startMillis)
      return that;
    if (self.startMillis < that.startMillis)
      return self;
    if (that.startMillis < self.startMillis)
      return that;
    if (self.endMillis <= that.endMillis)
      return self;
    return that;
  });
  max8 = /* @__PURE__ */ dual(2, (self, that) => min7(self, that) === self ? that : self);
  intersect = /* @__PURE__ */ dual(2, (self, that) => {
    const start = Math.max(self.startMillis, that.startMillis);
    const end = Math.min(self.endMillis, that.endMillis);
    return make51(start, end);
  });
  union9 = /* @__PURE__ */ dual(2, (self, that) => {
    const start = Math.max(self.startMillis, that.startMillis);
    const end = Math.min(self.endMillis, that.endMillis);
    return start < end ? none2() : some3(make51(start, end));
  });
});

// node_modules/effect/dist/esm/ScheduleInterval.js
var exports_ScheduleInterval = {};
__export(exports_ScheduleInterval, {
  union: () => union10,
  size: () => size16,
  min: () => min8,
  max: () => max9,
  make: () => make52,
  lessThan: () => lessThan10,
  isNonEmpty: () => isNonEmpty4,
  isEmpty: () => isEmpty13,
  intersect: () => intersect2,
  empty: () => empty37,
  before: () => before2,
  after: () => after2,
  IntervalTypeId: () => IntervalTypeId2
});
var IntervalTypeId2, make52, empty37, lessThan10, min8, max9, isEmpty13, isNonEmpty4, intersect2, size16, union10, after2, before2;
var init_ScheduleInterval = __esm(() => {
  init_interval();
  IntervalTypeId2 = IntervalTypeId;
  make52 = make51;
  empty37 = empty36;
  lessThan10 = lessThan9;
  min8 = min7;
  max9 = max8;
  isEmpty13 = isEmpty12;
  isNonEmpty4 = isNonEmpty3;
  intersect2 = intersect;
  size16 = size15;
  union10 = union9;
  after2 = after;
  before2 = before;
});

// node_modules/effect/dist/esm/internal/schedule/intervals.js
var IntervalsSymbolKey = "effect/ScheduleIntervals", IntervalsTypeId, make53 = (intervals) => {
  return {
    [IntervalsTypeId]: IntervalsTypeId,
    intervals
  };
}, empty38, fromIterable15 = (intervals) => Array.from(intervals).reduce((intervals2, interval) => pipe(intervals2, union11(make53(of3(interval)))), empty38), union11, unionLoop = (_self, _that, _interval, _acc) => {
  let self = _self;
  let that = _that;
  let interval = _interval;
  let acc = _acc;
  while (isNonEmpty2(self) || isNonEmpty2(that)) {
    if (!isNonEmpty2(self) && isNonEmpty2(that)) {
      if (interval.endMillis < headNonEmpty2(that).startMillis) {
        acc = pipe(acc, prepend3(interval));
        interval = headNonEmpty2(that);
        that = tailNonEmpty2(that);
        self = empty7();
      } else {
        interval = make52(interval.startMillis, headNonEmpty2(that).endMillis);
        that = tailNonEmpty2(that);
        self = empty7();
      }
    } else if (isNonEmpty2(self) && isEmpty2(that)) {
      if (interval.endMillis < headNonEmpty2(self).startMillis) {
        acc = pipe(acc, prepend3(interval));
        interval = headNonEmpty2(self);
        that = empty7();
        self = tailNonEmpty2(self);
      } else {
        interval = make52(interval.startMillis, headNonEmpty2(self).endMillis);
        that = empty7();
        self = tailNonEmpty2(self);
      }
    } else if (isNonEmpty2(self) && isNonEmpty2(that)) {
      if (headNonEmpty2(self).startMillis < headNonEmpty2(that).startMillis) {
        if (interval.endMillis < headNonEmpty2(self).startMillis) {
          acc = pipe(acc, prepend3(interval));
          interval = headNonEmpty2(self);
          self = tailNonEmpty2(self);
        } else {
          interval = make52(interval.startMillis, headNonEmpty2(self).endMillis);
          self = tailNonEmpty2(self);
        }
      } else if (interval.endMillis < headNonEmpty2(that).startMillis) {
        acc = pipe(acc, prepend3(interval));
        interval = headNonEmpty2(that);
        that = tailNonEmpty2(that);
      } else {
        interval = make52(interval.startMillis, headNonEmpty2(that).endMillis);
        that = tailNonEmpty2(that);
      }
    } else {
      throw new Error(getBugErrorMessage("Intervals.unionLoop"));
    }
  }
  return make53(pipe(acc, prepend3(interval), reverse3));
}, intersect3, intersectLoop = (_left, _right, _acc) => {
  let left3 = _left;
  let right3 = _right;
  let acc = _acc;
  while (isNonEmpty2(left3) && isNonEmpty2(right3)) {
    const interval = pipe(headNonEmpty2(left3), intersect2(headNonEmpty2(right3)));
    const intervals = isEmpty13(interval) ? acc : pipe(acc, prepend3(interval));
    if (pipe(headNonEmpty2(left3), lessThan10(headNonEmpty2(right3)))) {
      left3 = tailNonEmpty2(left3);
    } else {
      right3 = tailNonEmpty2(right3);
    }
    acc = intervals;
  }
  return make53(reverse3(acc));
}, start = (self) => {
  return pipe(self.intervals, head3, getOrElse2(() => empty37)).startMillis;
}, end = (self) => {
  return pipe(self.intervals, head3, getOrElse2(() => empty37)).endMillis;
}, lessThan11, isNonEmpty5 = (self) => {
  return isNonEmpty2(self.intervals);
}, max10;
var init_intervals = __esm(() => {
  init_Chunk();
  init_Function();
  init_Option();
  init_ScheduleInterval();
  IntervalsTypeId = /* @__PURE__ */ Symbol.for(IntervalsSymbolKey);
  empty38 = /* @__PURE__ */ make53(/* @__PURE__ */ empty7());
  union11 = /* @__PURE__ */ dual(2, (self, that) => {
    if (!isNonEmpty2(that.intervals)) {
      return self;
    }
    if (!isNonEmpty2(self.intervals)) {
      return that;
    }
    if (headNonEmpty2(self.intervals).startMillis < headNonEmpty2(that.intervals).startMillis) {
      return unionLoop(tailNonEmpty2(self.intervals), that.intervals, headNonEmpty2(self.intervals), empty7());
    }
    return unionLoop(self.intervals, tailNonEmpty2(that.intervals), headNonEmpty2(that.intervals), empty7());
  });
  intersect3 = /* @__PURE__ */ dual(2, (self, that) => intersectLoop(self.intervals, that.intervals, empty7()));
  lessThan11 = /* @__PURE__ */ dual(2, (self, that) => start(self) < start(that));
  max10 = /* @__PURE__ */ dual(2, (self, that) => lessThan11(self, that) ? that : self);
});

// node_modules/effect/dist/esm/ScheduleIntervals.js
var exports_ScheduleIntervals = {};
__export(exports_ScheduleIntervals, {
  union: () => union12,
  start: () => start2,
  max: () => max11,
  make: () => make54,
  lessThan: () => lessThan12,
  isNonEmpty: () => isNonEmpty6,
  intersect: () => intersect4,
  fromIterable: () => fromIterable16,
  end: () => end2,
  empty: () => empty39,
  IntervalsTypeId: () => IntervalsTypeId2
});
var IntervalsTypeId2, make54, empty39, fromIterable16, union12, intersect4, start2, end2, lessThan12, isNonEmpty6, max11;
var init_ScheduleIntervals = __esm(() => {
  init_intervals();
  IntervalsTypeId2 = IntervalsTypeId;
  make54 = make53;
  empty39 = empty38;
  fromIterable16 = fromIterable15;
  union12 = union11;
  intersect4 = intersect3;
  start2 = start;
  end2 = end;
  lessThan12 = lessThan11;
  isNonEmpty6 = isNonEmpty5;
  max11 = max10;
});

// node_modules/effect/dist/esm/internal/schedule/decision.js
var OP_CONTINUE = "Continue", OP_DONE2 = "Done", _continue = (intervals) => {
  return {
    _tag: OP_CONTINUE,
    intervals
  };
}, continueWith = (interval) => {
  return {
    _tag: OP_CONTINUE,
    intervals: make54(of3(interval))
  };
}, done6, isContinue = (self) => {
  return self._tag === OP_CONTINUE;
}, isDone4 = (self) => {
  return self._tag === OP_DONE2;
};
var init_decision = __esm(() => {
  init_Chunk();
  init_ScheduleIntervals();
  done6 = {
    _tag: OP_DONE2
  };
});

// node_modules/effect/dist/esm/ScheduleDecision.js
var exports_ScheduleDecision = {};
__export(exports_ScheduleDecision, {
  isDone: () => isDone5,
  isContinue: () => isContinue2,
  done: () => done7,
  continueWith: () => continueWith2,
  continue: () => _continue2
});
var _continue2, continueWith2, done7, isContinue2, isDone5;
var init_ScheduleDecision = __esm(() => {
  init_decision();
  _continue2 = _continue;
  continueWith2 = continueWith;
  done7 = done6;
  isContinue2 = isContinue;
  isDone5 = isDone4;
});

// node_modules/effect/dist/esm/Scope.js
var exports_Scope = {};
__export(exports_Scope, {
  use: () => use,
  make: () => make55,
  fork: () => fork3,
  extend: () => extend3,
  close: () => close,
  addFinalizerExit: () => addFinalizerExit,
  addFinalizer: () => addFinalizer3,
  ScopeTypeId: () => ScopeTypeId2,
  Scope: () => Scope,
  CloseableScopeTypeId: () => CloseableScopeTypeId2
});
var ScopeTypeId2, CloseableScopeTypeId2, Scope, addFinalizer3, addFinalizerExit, close, extend3, fork3, use, make55;
var init_Scope = __esm(() => {
  init_core();
  init_fiberRuntime();
  ScopeTypeId2 = ScopeTypeId;
  CloseableScopeTypeId2 = CloseableScopeTypeId;
  Scope = scopeTag;
  addFinalizer3 = scopeAddFinalizer;
  addFinalizerExit = scopeAddFinalizerExit;
  close = scopeClose;
  extend3 = scopeExtend;
  fork3 = scopeFork;
  use = scopeUse;
  make55 = scopeMake2;
});

// node_modules/effect/dist/esm/Data.js
var exports_Data = {};
__export(exports_Data, {
  unsafeStruct: () => unsafeStruct,
  unsafeArray: () => unsafeArray,
  tuple: () => tuple5,
  taggedEnum: () => taggedEnum,
  tagged: () => tagged4,
  struct: () => struct5,
  case: () => _case,
  array: () => array5,
  TaggedError: () => TaggedError2,
  TaggedClass: () => TaggedClass2,
  Structural: () => Structural2,
  Error: () => Error4,
  Class: () => Class4
});
function taggedMatch() {
  if (arguments.length === 1) {
    const cases2 = arguments[0];
    return function(value3) {
      return cases2[value3._tag](value3);
    };
  }
  const value2 = arguments[0];
  const cases = arguments[1];
  return cases[value2._tag](value2);
}
var struct5, unsafeStruct = (as7) => Object.setPrototypeOf(as7, StructuralPrototype), tuple5 = (...as7) => unsafeArray(as7), array5 = (as7) => unsafeArray(as7.slice(0)), unsafeArray = (as7) => Object.setPrototypeOf(as7, ArrayProto), _case = () => (args2) => args2 === undefined ? Object.create(StructuralPrototype) : struct5(args2), tagged4 = (tag) => (args2) => {
  const value2 = args2 === undefined ? Object.create(StructuralPrototype) : struct5(args2);
  value2._tag = tag;
  return value2;
}, Class4, TaggedClass2 = (tag) => {

  class Base3 extends Class4 {
    _tag = tag;
  }
  return Base3;
}, Structural2, taggedEnum = () => new Proxy({}, {
  get(_target, tag, _receiver) {
    if (tag === "$is") {
      return isTagged;
    } else if (tag === "$match") {
      return taggedMatch;
    }
    return tagged4(tag);
  }
}), Error4, TaggedError2 = (tag) => {

  class Base3 extends Error4 {
    _tag = tag;
  }
  Base3.prototype.name = tag;
  return Base3;
};
var init_Data = __esm(() => {
  init_core();
  init_data();
  init_effectable();
  init_Predicate();
  struct5 = struct4;
  Class4 = Structural;
  Structural2 = Structural;
  Error4 = /* @__PURE__ */ function() {
    const plainArgsSymbol = /* @__PURE__ */ Symbol.for("effect/Data/Error/plainArgs");
    return class Base3 extends YieldableError {
      constructor(args2) {
        super(args2?.message, args2?.cause ? {
          cause: args2.cause
        } : undefined);
        if (args2) {
          Object.assign(this, args2);
          Object.defineProperty(this, plainArgsSymbol, {
            value: args2,
            enumerable: false
          });
        }
      }
      toJSON() {
        return {
          ...this[plainArgsSymbol],
          ...this
        };
      }
    };
  }();
});

// node_modules/effect/dist/esm/internal/dateTime.js
var TypeId19, TimeZoneTypeId, Proto2, ProtoUtc, ProtoZoned, ProtoTimeZone, ProtoTimeZoneNamed, ProtoTimeZoneOffset, makeZonedProto = (epochMillis, zone, partsUtc) => {
  const self = Object.create(ProtoZoned);
  self.epochMillis = epochMillis;
  self.zone = zone;
  Object.defineProperty(self, "partsUtc", {
    value: partsUtc,
    enumerable: false,
    writable: true
  });
  Object.defineProperty(self, "adjustedEpochMillis", {
    value: undefined,
    enumerable: false,
    writable: true
  });
  Object.defineProperty(self, "partsAdjusted", {
    value: undefined,
    enumerable: false,
    writable: true
  });
  return self;
}, isDateTime = (u) => hasProperty(u, TypeId19), isDateTimeArgs = (args2) => isDateTime(args2[0]), isTimeZone = (u) => hasProperty(u, TimeZoneTypeId), isTimeZoneOffset = (u) => isTimeZone(u) && u._tag === "Offset", isTimeZoneNamed = (u) => isTimeZone(u) && u._tag === "Named", isUtc = (self) => self._tag === "Utc", isZoned = (self) => self._tag === "Zoned", Equivalence6, Order8, clamp7, makeUtc = (epochMillis) => {
  const self = Object.create(ProtoUtc);
  self.epochMillis = epochMillis;
  Object.defineProperty(self, "partsUtc", {
    value: undefined,
    enumerable: false,
    writable: true
  });
  return self;
}, unsafeFromDate = (date2) => {
  const epochMillis = date2.getTime();
  if (Number.isNaN(epochMillis)) {
    throw new IllegalArgumentException2("Invalid date");
  }
  return makeUtc(epochMillis);
}, unsafeMake11 = (input) => {
  if (isDateTime(input)) {
    return input;
  } else if (input instanceof Date) {
    return unsafeFromDate(input);
  } else if (typeof input === "object") {
    const date2 = new Date(0);
    setPartsDate(date2, input);
    return unsafeFromDate(date2);
  }
  return unsafeFromDate(new Date(input));
}, minEpochMillis, maxEpochMillis, unsafeMakeZoned = (input, options) => {
  if (options?.timeZone === undefined && isDateTime(input) && isZoned(input)) {
    return input;
  }
  const self = unsafeMake11(input);
  if (self.epochMillis < minEpochMillis || self.epochMillis > maxEpochMillis) {
    throw new IllegalArgumentException2(`Epoch millis out of range: ${self.epochMillis}`);
  }
  let zone;
  if (options?.timeZone === undefined) {
    const offset = new Date(self.epochMillis).getTimezoneOffset() * -60 * 1000;
    zone = zoneMakeOffset(offset);
  } else if (isTimeZone(options?.timeZone)) {
    zone = options.timeZone;
  } else if (typeof options?.timeZone === "number") {
    zone = zoneMakeOffset(options.timeZone);
  } else {
    const parsedZone = zoneFromString(options.timeZone);
    if (isNone2(parsedZone)) {
      throw new IllegalArgumentException2(`Invalid time zone: ${options.timeZone}`);
    }
    zone = parsedZone.value;
  }
  if (options?.adjustForTimeZone !== true) {
    return makeZonedProto(self.epochMillis, zone, self.partsUtc);
  }
  return makeZonedFromAdjusted(self.epochMillis, zone);
}, makeZoned, make56, zonedStringRegex, makeZonedFromString = (input) => {
  const match15 = zonedStringRegex.exec(input);
  if (match15 === null) {
    const offset = parseOffset(input);
    return offset !== null ? makeZoned(input, {
      timeZone: offset
    }) : none2();
  }
  const [, isoString, timeZone] = match15;
  return makeZoned(isoString, {
    timeZone
  });
}, now, nowAsDate, unsafeNow = () => makeUtc(Date.now()), toUtc = (self) => makeUtc(self.epochMillis), setZone, setZoneOffset, validZoneCache, formatOptions, zoneMakeIntl = (format6) => {
  const zoneId = format6.resolvedOptions().timeZone;
  if (validZoneCache.has(zoneId)) {
    return validZoneCache.get(zoneId);
  }
  const zone = Object.create(ProtoTimeZoneNamed);
  zone.id = zoneId;
  zone.format = format6;
  validZoneCache.set(zoneId, zone);
  return zone;
}, zoneUnsafeMakeNamed = (zoneId) => {
  if (validZoneCache.has(zoneId)) {
    return validZoneCache.get(zoneId);
  }
  try {
    return zoneMakeIntl(new Intl.DateTimeFormat("en-US", {
      ...formatOptions,
      timeZone: zoneId
    }));
  } catch (_) {
    throw new IllegalArgumentException2(`Invalid time zone: ${zoneId}`);
  }
}, zoneMakeOffset = (offset) => {
  const zone = Object.create(ProtoTimeZoneOffset);
  zone.offset = offset;
  return zone;
}, zoneMakeNamed, zoneMakeNamedEffect = (zoneId) => try_2({
  try: () => zoneUnsafeMakeNamed(zoneId),
  catch: (e) => e
}), zoneMakeLocal = () => zoneMakeIntl(new Intl.DateTimeFormat("en-US", formatOptions)), offsetZoneRegex, zoneFromString = (zone) => {
  if (offsetZoneRegex.test(zone)) {
    const offset = parseOffset(zone);
    return offset === null ? none2() : some3(zoneMakeOffset(offset));
  }
  return zoneMakeNamed(zone);
}, zoneToString = (self) => {
  if (self._tag === "Offset") {
    return offsetToString(self.offset);
  }
  return self.id;
}, setZoneNamed, unsafeSetZoneNamed, distance, distanceDurationEither, distanceDuration, min9, max12, greaterThan9, greaterThanOrEqualTo6, lessThan13, lessThanOrEqualTo6, between6, isFuture = (self) => map14(now, lessThan13(self)), unsafeIsFuture = (self) => lessThan13(unsafeNow(), self), isPast = (self) => map14(now, greaterThan9(self)), unsafeIsPast = (self) => greaterThan9(unsafeNow(), self), toDateUtc = (self) => new Date(self.epochMillis), toDate = (self) => {
  if (self._tag === "Utc") {
    return new Date(self.epochMillis);
  } else if (self.zone._tag === "Offset") {
    return new Date(self.epochMillis + self.zone.offset);
  } else if (self.adjustedEpochMillis !== undefined) {
    return new Date(self.adjustedEpochMillis);
  }
  const parts2 = self.zone.format.formatToParts(self.epochMillis).filter((_) => _.type !== "literal");
  const date2 = new Date(0);
  date2.setUTCFullYear(Number(parts2[2].value), Number(parts2[0].value) - 1, Number(parts2[1].value));
  date2.setUTCHours(Number(parts2[3].value), Number(parts2[4].value), Number(parts2[5].value), Number(parts2[6].value));
  self.adjustedEpochMillis = date2.getTime();
  return date2;
}, zonedOffset = (self) => {
  const date2 = toDate(self);
  return date2.getTime() - toEpochMillis(self);
}, offsetToString = (offset) => {
  const abs3 = Math.abs(offset);
  let hours2 = Math.floor(abs3 / (60 * 60 * 1000));
  let minutes2 = Math.round(abs3 % (60 * 60 * 1000) / (60 * 1000));
  if (minutes2 === 60) {
    hours2 += 1;
    minutes2 = 0;
  }
  return `${offset < 0 ? "-" : "+"}${String(hours2).padStart(2, "0")}:${String(minutes2).padStart(2, "0")}`;
}, zonedOffsetIso = (self) => offsetToString(zonedOffset(self)), toEpochMillis = (self) => self.epochMillis, removeTime = (self) => withDate(self, (date2) => {
  date2.setUTCHours(0, 0, 0, 0);
  return makeUtc(date2.getTime());
}), dateToParts = (date2) => ({
  millis: date2.getUTCMilliseconds(),
  seconds: date2.getUTCSeconds(),
  minutes: date2.getUTCMinutes(),
  hours: date2.getUTCHours(),
  day: date2.getUTCDate(),
  weekDay: date2.getUTCDay(),
  month: date2.getUTCMonth() + 1,
  year: date2.getUTCFullYear()
}), toParts = (self) => {
  if (self._tag === "Utc") {
    return toPartsUtc(self);
  } else if (self.partsAdjusted !== undefined) {
    return self.partsAdjusted;
  }
  self.partsAdjusted = withDate(self, dateToParts);
  return self.partsAdjusted;
}, toPartsUtc = (self) => {
  if (self.partsUtc !== undefined) {
    return self.partsUtc;
  }
  self.partsUtc = withDateUtc(self, dateToParts);
  return self.partsUtc;
}, getPartUtc, getPart, setPartsDate = (date2, parts2) => {
  if (parts2.year !== undefined) {
    date2.setUTCFullYear(parts2.year);
  }
  if (parts2.month !== undefined) {
    date2.setUTCMonth(parts2.month - 1);
  }
  if (parts2.day !== undefined) {
    date2.setUTCDate(parts2.day);
  }
  if (parts2.weekDay !== undefined) {
    const diff12 = parts2.weekDay - date2.getUTCDay();
    date2.setUTCDate(date2.getUTCDate() + diff12);
  }
  if (parts2.hours !== undefined) {
    date2.setUTCHours(parts2.hours);
  }
  if (parts2.minutes !== undefined) {
    date2.setUTCMinutes(parts2.minutes);
  }
  if (parts2.seconds !== undefined) {
    date2.setUTCSeconds(parts2.seconds);
  }
  if (parts2.millis !== undefined) {
    date2.setUTCMilliseconds(parts2.millis);
  }
}, setParts, setPartsUtc, makeZonedFromAdjusted = (adjustedMillis, zone) => {
  const offset = zone._tag === "Offset" ? zone.offset : calculateNamedOffset(adjustedMillis, zone);
  return makeZonedProto(adjustedMillis - offset, zone);
}, offsetRegex, parseOffset = (offset) => {
  const match15 = offsetRegex.exec(offset);
  if (match15 === null) {
    return null;
  }
  const [, sign4, hours2, minutes2] = match15;
  return (sign4 === "+" ? 1 : -1) * (Number(hours2) * 60 + Number(minutes2)) * 60 * 1000;
}, calculateNamedOffset = (adjustedMillis, zone) => {
  const offset = zone.format.formatToParts(adjustedMillis).find((_) => _.type === "timeZoneName")?.value ?? "";
  if (offset === "GMT") {
    return 0;
  }
  const result2 = parseOffset(offset);
  if (result2 === null) {
    return zonedOffset(makeZonedProto(adjustedMillis, zone));
  }
  return result2;
}, mutate5, mutateUtc, mapEpochMillis, withDate, withDateUtc, match15, addDuration, subtractDuration, addMillis = (date2, amount) => {
  date2.setTime(date2.getTime() + amount);
}, add6, subtract5, startOfDate = (date2, part, options) => {
  switch (part) {
    case "second": {
      date2.setUTCMilliseconds(0);
      break;
    }
    case "minute": {
      date2.setUTCSeconds(0, 0);
      break;
    }
    case "hour": {
      date2.setUTCMinutes(0, 0, 0);
      break;
    }
    case "day": {
      date2.setUTCHours(0, 0, 0, 0);
      break;
    }
    case "week": {
      const weekStartsOn = options?.weekStartsOn ?? 0;
      const day = date2.getUTCDay();
      const diff12 = (day - weekStartsOn + 7) % 7;
      date2.setUTCDate(date2.getUTCDate() - diff12);
      date2.setUTCHours(0, 0, 0, 0);
      break;
    }
    case "month": {
      date2.setUTCDate(1);
      date2.setUTCHours(0, 0, 0, 0);
      break;
    }
    case "year": {
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      break;
    }
  }
}, startOf, endOfDate = (date2, part, options) => {
  switch (part) {
    case "second": {
      date2.setUTCMilliseconds(999);
      break;
    }
    case "minute": {
      date2.setUTCSeconds(59, 999);
      break;
    }
    case "hour": {
      date2.setUTCMinutes(59, 59, 999);
      break;
    }
    case "day": {
      date2.setUTCHours(23, 59, 59, 999);
      break;
    }
    case "week": {
      const weekStartsOn = options?.weekStartsOn ?? 0;
      const day = date2.getUTCDay();
      const diff12 = (day - weekStartsOn + 7) % 7;
      date2.setUTCDate(date2.getUTCDate() - diff12 + 6);
      date2.setUTCHours(23, 59, 59, 999);
      break;
    }
    case "month": {
      date2.setUTCMonth(date2.getUTCMonth() + 1, 0);
      date2.setUTCHours(23, 59, 59, 999);
      break;
    }
    case "year": {
      date2.setUTCMonth(11, 31);
      date2.setUTCHours(23, 59, 59, 999);
      break;
    }
  }
}, endOf, nearest, intlTimeZone = (self) => {
  if (self._tag === "Named") {
    return self.id;
  }
  return offsetToString(self.offset);
}, format6, formatLocal, formatUtc, formatIntl, formatIso2 = (self) => toDateUtc(self).toISOString(), formatIsoDate = (self) => toDate(self).toISOString().slice(0, 10), formatIsoDateUtc = (self) => toDateUtc(self).toISOString().slice(0, 10), formatIsoOffset = (self) => {
  const date2 = toDate(self);
  return self._tag === "Utc" ? date2.toISOString() : `${date2.toISOString().slice(0, -1)}${zonedOffsetIso(self)}`;
}, formatIsoZoned = (self) => self.zone._tag === "Offset" ? formatIsoOffset(self) : `${formatIsoOffset(self)}[${self.zone.id}]`;
var init_dateTime = __esm(() => {
  init_Cause();
  init_Clock();
  init_Duration();
  init_Either();
  init_Equal();
  init_Equivalence();
  init_Function();
  init_GlobalValue();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Order();
  init_Predicate();
  init_core_effect();
  init_core();
  TypeId19 = /* @__PURE__ */ Symbol.for("effect/DateTime");
  TimeZoneTypeId = /* @__PURE__ */ Symbol.for("effect/DateTime/TimeZone");
  Proto2 = {
    [TypeId19]: TypeId19,
    pipe() {
      return pipeArguments(this, arguments);
    },
    [NodeInspectSymbol]() {
      return this.toString();
    },
    toJSON() {
      return toDateUtc(this).toJSON();
    }
  };
  ProtoUtc = {
    ...Proto2,
    _tag: "Utc",
    [symbol2]() {
      return cached(this, number2(this.epochMillis));
    },
    [symbol3](that) {
      return isDateTime(that) && that._tag === "Utc" && this.epochMillis === that.epochMillis;
    },
    toString() {
      return `DateTime.Utc(${toDateUtc(this).toJSON()})`;
    }
  };
  ProtoZoned = {
    ...Proto2,
    _tag: "Zoned",
    [symbol2]() {
      return pipe(number2(this.epochMillis), combine2(hash(this.zone)), cached(this));
    },
    [symbol3](that) {
      return isDateTime(that) && that._tag === "Zoned" && this.epochMillis === that.epochMillis && equals(this.zone, that.zone);
    },
    toString() {
      return `DateTime.Zoned(${formatIsoZoned(this)})`;
    }
  };
  ProtoTimeZone = {
    [TimeZoneTypeId]: TimeZoneTypeId,
    [NodeInspectSymbol]() {
      return this.toString();
    }
  };
  ProtoTimeZoneNamed = {
    ...ProtoTimeZone,
    _tag: "Named",
    [symbol2]() {
      return cached(this, string2(`Named:${this.id}`));
    },
    [symbol3](that) {
      return isTimeZone(that) && that._tag === "Named" && this.id === that.id;
    },
    toString() {
      return `TimeZone.Named(${this.id})`;
    },
    toJSON() {
      return {
        _id: "TimeZone",
        _tag: "Named",
        id: this.id
      };
    }
  };
  ProtoTimeZoneOffset = {
    ...ProtoTimeZone,
    _tag: "Offset",
    [symbol2]() {
      return cached(this, string2(`Offset:${this.offset}`));
    },
    [symbol3](that) {
      return isTimeZone(that) && that._tag === "Offset" && this.offset === that.offset;
    },
    toString() {
      return `TimeZone.Offset(${offsetToString(this.offset)})`;
    },
    toJSON() {
      return {
        _id: "TimeZone",
        _tag: "Offset",
        offset: this.offset
      };
    }
  };
  Equivalence6 = /* @__PURE__ */ make((a, b) => a.epochMillis === b.epochMillis);
  Order8 = /* @__PURE__ */ make2((self, that) => self.epochMillis < that.epochMillis ? -1 : self.epochMillis > that.epochMillis ? 1 : 0);
  clamp7 = /* @__PURE__ */ clamp(Order8);
  minEpochMillis = -8640000000000000 + 12 * 60 * 60 * 1000;
  maxEpochMillis = 8640000000000000 - 14 * 60 * 60 * 1000;
  makeZoned = /* @__PURE__ */ liftThrowable(unsafeMakeZoned);
  make56 = /* @__PURE__ */ liftThrowable(unsafeMake11);
  zonedStringRegex = /^(.{17,35})\[(.+)\]$/;
  now = /* @__PURE__ */ map14(currentTimeMillis2, makeUtc);
  nowAsDate = /* @__PURE__ */ map14(currentTimeMillis2, (millis2) => new Date(millis2));
  setZone = /* @__PURE__ */ dual(isDateTimeArgs, (self, zone, options) => options?.adjustForTimeZone === true ? makeZonedFromAdjusted(self.epochMillis, zone) : makeZonedProto(self.epochMillis, zone, self.partsUtc));
  setZoneOffset = /* @__PURE__ */ dual(isDateTimeArgs, (self, offset, options) => setZone(self, zoneMakeOffset(offset), options));
  validZoneCache = /* @__PURE__ */ globalValue("effect/DateTime/validZoneCache", () => new Map);
  formatOptions = {
    day: "numeric",
    month: "numeric",
    year: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric",
    timeZoneName: "longOffset",
    fractionalSecondDigits: 3,
    hourCycle: "h23"
  };
  zoneMakeNamed = /* @__PURE__ */ liftThrowable(zoneUnsafeMakeNamed);
  offsetZoneRegex = /^(?:GMT|[+-])/;
  setZoneNamed = /* @__PURE__ */ dual(isDateTimeArgs, (self, zoneId, options) => map2(zoneMakeNamed(zoneId), (zone) => setZone(self, zone, options)));
  unsafeSetZoneNamed = /* @__PURE__ */ dual(isDateTimeArgs, (self, zoneId, options) => setZone(self, zoneUnsafeMakeNamed(zoneId), options));
  distance = /* @__PURE__ */ dual(2, (self, other) => toEpochMillis(other) - toEpochMillis(self));
  distanceDurationEither = /* @__PURE__ */ dual(2, (self, other) => {
    const diffMillis = distance(self, other);
    return diffMillis > 0 ? right2(millis(diffMillis)) : left2(millis(-diffMillis));
  });
  distanceDuration = /* @__PURE__ */ dual(2, (self, other) => millis(Math.abs(distance(self, other))));
  min9 = /* @__PURE__ */ min(Order8);
  max12 = /* @__PURE__ */ max2(Order8);
  greaterThan9 = /* @__PURE__ */ greaterThan(Order8);
  greaterThanOrEqualTo6 = /* @__PURE__ */ greaterThanOrEqualTo(Order8);
  lessThan13 = /* @__PURE__ */ lessThan(Order8);
  lessThanOrEqualTo6 = /* @__PURE__ */ lessThanOrEqualTo(Order8);
  between6 = /* @__PURE__ */ between(Order8);
  getPartUtc = /* @__PURE__ */ dual(2, (self, part) => toPartsUtc(self)[part]);
  getPart = /* @__PURE__ */ dual(2, (self, part) => toParts(self)[part]);
  setParts = /* @__PURE__ */ dual(2, (self, parts2) => mutate5(self, (date2) => setPartsDate(date2, parts2)));
  setPartsUtc = /* @__PURE__ */ dual(2, (self, parts2) => mutateUtc(self, (date2) => setPartsDate(date2, parts2)));
  offsetRegex = /([+-])(\d{2}):(\d{2})$/;
  mutate5 = /* @__PURE__ */ dual(2, (self, f) => {
    if (self._tag === "Utc") {
      const date2 = toDateUtc(self);
      f(date2);
      return makeUtc(date2.getTime());
    }
    const adjustedDate = toDate(self);
    const newAdjustedDate = new Date(adjustedDate.getTime());
    f(newAdjustedDate);
    return makeZonedFromAdjusted(newAdjustedDate.getTime(), self.zone);
  });
  mutateUtc = /* @__PURE__ */ dual(2, (self, f) => mapEpochMillis(self, (millis2) => {
    const date2 = new Date(millis2);
    f(date2);
    return date2.getTime();
  }));
  mapEpochMillis = /* @__PURE__ */ dual(2, (self, f) => {
    const millis2 = f(toEpochMillis(self));
    return self._tag === "Utc" ? makeUtc(millis2) : makeZonedProto(millis2, self.zone);
  });
  withDate = /* @__PURE__ */ dual(2, (self, f) => f(toDate(self)));
  withDateUtc = /* @__PURE__ */ dual(2, (self, f) => f(toDateUtc(self)));
  match15 = /* @__PURE__ */ dual(2, (self, options) => self._tag === "Utc" ? options.onUtc(self) : options.onZoned(self));
  addDuration = /* @__PURE__ */ dual(2, (self, duration) => mapEpochMillis(self, (millis2) => millis2 + toMillis(duration)));
  subtractDuration = /* @__PURE__ */ dual(2, (self, duration) => mapEpochMillis(self, (millis2) => millis2 - toMillis(duration)));
  add6 = /* @__PURE__ */ dual(2, (self, parts2) => mutate5(self, (date2) => {
    if (parts2.millis) {
      addMillis(date2, parts2.millis);
    }
    if (parts2.seconds) {
      addMillis(date2, parts2.seconds * 1000);
    }
    if (parts2.minutes) {
      addMillis(date2, parts2.minutes * 60 * 1000);
    }
    if (parts2.hours) {
      addMillis(date2, parts2.hours * 60 * 60 * 1000);
    }
    if (parts2.days) {
      date2.setUTCDate(date2.getUTCDate() + parts2.days);
    }
    if (parts2.weeks) {
      date2.setUTCDate(date2.getUTCDate() + parts2.weeks * 7);
    }
    if (parts2.months) {
      const day = date2.getUTCDate();
      date2.setUTCMonth(date2.getUTCMonth() + parts2.months + 1, 0);
      if (day < date2.getUTCDate()) {
        date2.setUTCDate(day);
      }
    }
    if (parts2.years) {
      const day = date2.getUTCDate();
      const month = date2.getUTCMonth();
      date2.setUTCFullYear(date2.getUTCFullYear() + parts2.years, month + 1, 0);
      if (day < date2.getUTCDate()) {
        date2.setUTCDate(day);
      }
    }
  }));
  subtract5 = /* @__PURE__ */ dual(2, (self, parts2) => {
    const newParts = {};
    for (const key in parts2) {
      newParts[key] = -1 * parts2[key];
    }
    return add6(self, newParts);
  });
  startOf = /* @__PURE__ */ dual(isDateTimeArgs, (self, part, options) => mutate5(self, (date2) => startOfDate(date2, part, options)));
  endOf = /* @__PURE__ */ dual(isDateTimeArgs, (self, part, options) => mutate5(self, (date2) => endOfDate(date2, part, options)));
  nearest = /* @__PURE__ */ dual(isDateTimeArgs, (self, part, options) => mutate5(self, (date2) => {
    if (part === "milli")
      return;
    const millis2 = date2.getTime();
    const start3 = new Date(millis2);
    startOfDate(start3, part, options);
    const startMillis = start3.getTime();
    const end3 = new Date(millis2);
    endOfDate(end3, part, options);
    const endMillis = end3.getTime() + 1;
    const diffStart = millis2 - startMillis;
    const diffEnd = endMillis - millis2;
    if (diffStart < diffEnd) {
      date2.setTime(startMillis);
    } else {
      date2.setTime(endMillis);
    }
  }));
  format6 = /* @__PURE__ */ dual(isDateTimeArgs, (self, options) => {
    try {
      return new Intl.DateTimeFormat(options?.locale, {
        timeZone: self._tag === "Utc" ? "UTC" : intlTimeZone(self.zone),
        ...options
      }).format(self.epochMillis);
    } catch (_) {
      return new Intl.DateTimeFormat(options?.locale, {
        timeZone: "UTC",
        ...options
      }).format(toDate(self));
    }
  });
  formatLocal = /* @__PURE__ */ dual(isDateTimeArgs, (self, options) => new Intl.DateTimeFormat(options?.locale, options).format(self.epochMillis));
  formatUtc = /* @__PURE__ */ dual(isDateTimeArgs, (self, options) => new Intl.DateTimeFormat(options?.locale, {
    ...options,
    timeZone: "UTC"
  }).format(self.epochMillis));
  formatIntl = /* @__PURE__ */ dual(2, (self, format7) => format7.format(self.epochMillis));
});

// node_modules/effect/dist/esm/String.js
var exports_String = {};
__export(exports_String, {
  uncapitalize: () => uncapitalize,
  trimStart: () => trimStart,
  trimEnd: () => trimEnd,
  trim: () => trim,
  toUpperCase: () => toUpperCase,
  toLowerCase: () => toLowerCase,
  toLocaleUpperCase: () => toLocaleUpperCase,
  toLocaleLowerCase: () => toLocaleLowerCase,
  takeRight: () => takeRight3,
  takeLeft: () => takeLeft,
  substring: () => substring,
  stripMarginWith: () => stripMarginWith,
  stripMargin: () => stripMargin,
  startsWith: () => startsWith,
  split: () => split3,
  snakeToPascal: () => snakeToPascal,
  snakeToKebab: () => snakeToKebab,
  snakeToCamel: () => snakeToCamel,
  slice: () => slice,
  search: () => search2,
  replaceAll: () => replaceAll,
  replace: () => replace5,
  repeat: () => repeat2,
  pascalToSnake: () => pascalToSnake,
  padStart: () => padStart,
  padEnd: () => padEnd,
  normalize: () => normalize2,
  matchAll: () => matchAll,
  match: () => match16,
  localeCompare: () => localeCompare,
  linesWithSeparators: () => linesWithSeparators,
  linesIterator: () => linesIterator,
  length: () => length4,
  lastIndexOf: () => lastIndexOf,
  kebabToSnake: () => kebabToSnake,
  isString: () => isString3,
  isNonEmpty: () => isNonEmpty7,
  isEmpty: () => isEmpty14,
  indexOf: () => indexOf3,
  includes: () => includes3,
  endsWith: () => endsWith,
  empty: () => empty40,
  concat: () => concat2,
  codePointAt: () => codePointAt,
  charCodeAt: () => charCodeAt,
  charAt: () => charAt,
  capitalize: () => capitalize,
  camelToSnake: () => camelToSnake,
  at: () => at4,
  Order: () => Order9,
  Equivalence: () => Equivalence7
});
var isString3, Equivalence7, Order9, empty40 = "", concat2, toUpperCase = (self) => self.toUpperCase(), toLowerCase = (self) => self.toLowerCase(), capitalize = (self) => {
  if (self.length === 0)
    return self;
  return toUpperCase(self[0]) + self.slice(1);
}, uncapitalize = (self) => {
  if (self.length === 0)
    return self;
  return toLowerCase(self[0]) + self.slice(1);
}, replace5 = (searchValue, replaceValue) => (self) => self.replace(searchValue, replaceValue), trim = (self) => self.trim(), trimStart = (self) => self.trimStart(), trimEnd = (self) => self.trimEnd(), slice = (start3, end3) => (self) => self.slice(start3, end3), isEmpty14 = (self) => self.length === 0, isNonEmpty7 = (self) => self.length > 0, length4 = (self) => self.length, split3, includes3 = (searchString, position) => (self) => self.includes(searchString, position), startsWith = (searchString, position) => (self) => self.startsWith(searchString, position), endsWith = (searchString, position) => (self) => self.endsWith(searchString, position), charCodeAt, substring = (start3, end3) => (self) => self.substring(start3, end3), at4, charAt, codePointAt, indexOf3 = (searchString) => (self) => filter(some3(self.indexOf(searchString)), greaterThanOrEqualTo2(0)), lastIndexOf = (searchString) => (self) => filter(some3(self.lastIndexOf(searchString)), greaterThanOrEqualTo2(0)), localeCompare = (that, locales, options) => (self) => sign(self.localeCompare(that, locales, options)), match16 = (regexp) => (self) => fromNullable2(self.match(regexp)), matchAll = (regexp) => (self) => self.matchAll(regexp), normalize2 = (form) => (self) => self.normalize(form), padEnd = (maxLength, fillString) => (self) => self.padEnd(maxLength, fillString), padStart = (maxLength, fillString) => (self) => self.padStart(maxLength, fillString), repeat2 = (count) => (self) => self.repeat(count), replaceAll = (searchValue, replaceValue) => (self) => self.replaceAll(searchValue, replaceValue), search2, toLocaleLowerCase = (locale) => (self) => self.toLocaleLowerCase(locale), toLocaleUpperCase = (locale) => (self) => self.toLocaleUpperCase(locale), takeLeft, takeRight3, CR = 13, LF = 10, linesIterator = (self) => linesSeparated(self, true), linesWithSeparators = (s) => linesSeparated(s, false), stripMarginWith, stripMargin = (self) => stripMarginWith(self, "|"), snakeToCamel = (self) => {
  let str = self[0];
  for (let i2 = 1;i2 < self.length; i2++) {
    str += self[i2] === "_" ? self[++i2].toUpperCase() : self[i2];
  }
  return str;
}, snakeToPascal = (self) => {
  let str = self[0].toUpperCase();
  for (let i2 = 1;i2 < self.length; i2++) {
    str += self[i2] === "_" ? self[++i2].toUpperCase() : self[i2];
  }
  return str;
}, snakeToKebab = (self) => self.replace(/_/g, "-"), camelToSnake = (self) => self.replace(/([A-Z])/g, "_$1").toLowerCase(), pascalToSnake = (self) => (self.slice(0, 1) + self.slice(1).replace(/([A-Z])/g, "_$1")).toLowerCase(), kebabToSnake = (self) => self.replace(/-/g, "_"), LinesIterator, isLineBreak = (char2) => {
  const code2 = char2.charCodeAt(0);
  return code2 === CR || code2 === LF;
}, isLineBreak2 = (char0, char1) => char0.charCodeAt(0) === CR && char1.charCodeAt(0) === LF, linesSeparated = (self, stripped) => new LinesIterator(self, stripped);
var init_String = __esm(() => {
  init_Equivalence();
  init_Function();
  init_Number();
  init_Option();
  init_Order();
  init_Predicate();
  isString3 = isString2;
  Equivalence7 = string;
  Order9 = string3;
  concat2 = /* @__PURE__ */ dual(2, (self, that) => self + that);
  split3 = /* @__PURE__ */ dual(2, (self, separator) => {
    const out = self.split(separator);
    return isNonEmptyArray(out) ? out : [self];
  });
  charCodeAt = /* @__PURE__ */ dual(2, (self, index) => filter(some3(self.charCodeAt(index)), (charCode) => !isNaN(charCode)));
  at4 = /* @__PURE__ */ dual(2, (self, index) => fromNullable2(self.at(index)));
  charAt = /* @__PURE__ */ dual(2, (self, index) => filter(some3(self.charAt(index)), isNonEmpty7));
  codePointAt = /* @__PURE__ */ dual(2, (self, index) => fromNullable2(self.codePointAt(index)));
  search2 = /* @__PURE__ */ dual(2, (self, regexp) => filter(some3(self.search(regexp)), greaterThanOrEqualTo2(0)));
  takeLeft = /* @__PURE__ */ dual(2, (self, n) => self.slice(0, Math.max(n, 0)));
  takeRight3 = /* @__PURE__ */ dual(2, (self, n) => self.slice(Math.max(0, self.length - Math.floor(n)), Infinity));
  stripMarginWith = /* @__PURE__ */ dual(2, (self, marginChar) => {
    let out = "";
    for (const line of linesWithSeparators(self)) {
      let index = 0;
      while (index < line.length && line.charAt(index) <= " ") {
        index = index + 1;
      }
      const stripped = index < line.length && line.charAt(index) === marginChar ? line.substring(index + 1) : line;
      out = out + stripped;
    }
    return out;
  });
  LinesIterator = class LinesIterator {
    s;
    stripped;
    index;
    length;
    constructor(s, stripped = false) {
      this.s = s;
      this.stripped = stripped;
      this.index = 0;
      this.length = s.length;
    }
    next() {
      if (this.done) {
        return {
          done: true,
          value: undefined
        };
      }
      const start3 = this.index;
      while (!this.done && !isLineBreak(this.s[this.index])) {
        this.index = this.index + 1;
      }
      let end3 = this.index;
      if (!this.done) {
        const char2 = this.s[this.index];
        this.index = this.index + 1;
        if (!this.done && isLineBreak2(char2, this.s[this.index])) {
          this.index = this.index + 1;
        }
        if (!this.stripped) {
          end3 = this.index;
        }
      }
      return {
        done: false,
        value: this.s.substring(start3, end3)
      };
    }
    [Symbol.iterator]() {
      return new LinesIterator(this.s, this.stripped);
    }
    get done() {
      return this.index >= this.length;
    }
  };
});

// node_modules/effect/dist/esm/Cron.js
var exports_Cron = {};
__export(exports_Cron, {
  unsafeParse: () => unsafeParse,
  sequence: () => sequence,
  parse: () => parse3,
  next: () => next2,
  match: () => match17,
  make: () => make57,
  isParseError: () => isParseError,
  isCron: () => isCron,
  equals: () => equals5,
  TypeId: () => TypeId20,
  ParseErrorTypeId: () => ParseErrorTypeId,
  ParseError: () => ParseError,
  Equivalence: () => Equivalence8
});
function aliasOrValue(field, aliases) {
  return aliases?.[field.toLocaleLowerCase()] ?? Number(field);
}
var TypeId20, CronProto, isCron = (u) => hasProperty(u, TypeId20), make57 = (values10) => {
  const o = Object.create(CronProto);
  o.seconds = new Set(sort(values10.seconds ?? [0], Order));
  o.minutes = new Set(sort(values10.minutes, Order));
  o.hours = new Set(sort(values10.hours, Order));
  o.days = new Set(sort(values10.days, Order));
  o.months = new Set(sort(values10.months, Order));
  o.weekdays = new Set(sort(values10.weekdays, Order));
  o.tz = fromNullable2(values10.tz);
  const seconds2 = Array.from(o.seconds);
  const minutes2 = Array.from(o.minutes);
  const hours2 = Array.from(o.hours);
  const days2 = Array.from(o.days);
  const months = Array.from(o.months);
  const weekdays = Array.from(o.weekdays);
  o.first = {
    second: seconds2[0] ?? 0,
    minute: minutes2[0] ?? 0,
    hour: hours2[0] ?? 0,
    day: days2[0] ?? 1,
    month: (months[0] ?? 1) - 1,
    weekday: weekdays[0] ?? 0
  };
  o.next = {
    second: nextLookupTable(seconds2, 60),
    minute: nextLookupTable(minutes2, 60),
    hour: nextLookupTable(hours2, 24),
    day: nextLookupTable(days2, 32),
    month: nextLookupTable(months, 13),
    weekday: nextLookupTable(weekdays, 7)
  };
  return o;
}, nextLookupTable = (values10, size17) => {
  const result2 = new Array(size17).fill(undefined);
  if (values10.length === 0) {
    return result2;
  }
  let current = undefined;
  let index = values10.length - 1;
  for (let i2 = size17 - 1;i2 >= 0; i2--) {
    while (index >= 0 && values10[index] >= i2) {
      current = values10[index--];
    }
    result2[i2] = current;
  }
  return result2;
}, ParseErrorTypeId, ParseError, isParseError = (u) => hasProperty(u, ParseErrorTypeId), parse3 = (cron, tz) => {
  const segments = cron.split(" ").filter(isNonEmpty7);
  if (segments.length !== 5 && segments.length !== 6) {
    return left2(new ParseError({
      message: `Invalid number of segments in cron expression`,
      input: cron
    }));
  }
  if (segments.length === 5) {
    segments.unshift("0");
  }
  const [seconds2, minutes2, hours2, days2, months, weekdays] = segments;
  const zone = tz === undefined || isTimeZone(tz) ? right2(tz) : fromOption2(zoneFromString(tz), () => new ParseError({
    message: `Invalid time zone in cron expression`,
    input: tz
  }));
  return all3({
    tz: zone,
    seconds: parseSegment(seconds2, secondOptions),
    minutes: parseSegment(minutes2, minuteOptions),
    hours: parseSegment(hours2, hourOptions),
    days: parseSegment(days2, dayOptions),
    months: parseSegment(months, monthOptions),
    weekdays: parseSegment(weekdays, weekdayOptions)
  }).pipe(map(make57));
}, unsafeParse = (cron, tz) => getOrThrowWith(parse3(cron, tz), identity), match17 = (cron, date2) => {
  const parts2 = unsafeMakeZoned(date2, {
    timeZone: getOrUndefined2(cron.tz)
  }).pipe(toParts);
  if (cron.seconds.size !== 0 && !cron.seconds.has(parts2.seconds)) {
    return false;
  }
  if (cron.minutes.size !== 0 && !cron.minutes.has(parts2.minutes)) {
    return false;
  }
  if (cron.hours.size !== 0 && !cron.hours.has(parts2.hours)) {
    return false;
  }
  if (cron.months.size !== 0 && !cron.months.has(parts2.month)) {
    return false;
  }
  if (cron.days.size === 0 && cron.weekdays.size === 0) {
    return true;
  }
  if (cron.weekdays.size === 0) {
    return cron.days.has(parts2.day);
  }
  if (cron.days.size === 0) {
    return cron.weekdays.has(parts2.weekDay);
  }
  return cron.days.has(parts2.day) || cron.weekdays.has(parts2.weekDay);
}, daysInMonth = (date2) => new Date(Date.UTC(date2.getUTCFullYear(), date2.getUTCMonth() + 1, 0)).getUTCDate(), next2 = (cron, startFrom) => {
  const tz = getOrUndefined2(cron.tz);
  const zoned = unsafeMakeZoned(startFrom ?? new Date, {
    timeZone: tz
  });
  const utc = tz !== undefined && isTimeZoneNamed(tz) && tz.id === "UTC";
  const adjustDst = utc ? constVoid : (current) => {
    const adjusted = unsafeMakeZoned(current, {
      timeZone: zoned.zone,
      adjustForTimeZone: true
    }).pipe(toDate);
    const drift = current.getTime() - adjusted.getTime();
    if (drift > 0) {
      current.setTime(current.getTime() + drift);
    }
  };
  const result2 = mutate5(zoned, (current) => {
    current.setUTCSeconds(current.getUTCSeconds() + 1, 0);
    for (let i2 = 0;i2 < 1e4; i2++) {
      if (cron.seconds.size !== 0) {
        const currentSecond = current.getUTCSeconds();
        const nextSecond = cron.next.second[currentSecond];
        if (nextSecond === undefined) {
          current.setUTCMinutes(current.getUTCMinutes() + 1, cron.first.second);
          adjustDst(current);
          continue;
        }
        if (nextSecond > currentSecond) {
          current.setUTCSeconds(nextSecond);
          adjustDst(current);
          continue;
        }
      }
      if (cron.minutes.size !== 0) {
        const currentMinute = current.getUTCMinutes();
        const nextMinute = cron.next.minute[currentMinute];
        if (nextMinute === undefined) {
          current.setUTCHours(current.getUTCHours() + 1, cron.first.minute, cron.first.second);
          adjustDst(current);
          continue;
        }
        if (nextMinute > currentMinute) {
          current.setUTCMinutes(nextMinute, cron.first.second);
          adjustDst(current);
          continue;
        }
      }
      if (cron.hours.size !== 0) {
        const currentHour = current.getUTCHours();
        const nextHour = cron.next.hour[currentHour];
        if (nextHour === undefined) {
          current.setUTCDate(current.getUTCDate() + 1);
          current.setUTCHours(cron.first.hour, cron.first.minute, cron.first.second);
          adjustDst(current);
          continue;
        }
        if (nextHour > currentHour) {
          current.setUTCHours(nextHour, cron.first.minute, cron.first.second);
          adjustDst(current);
          continue;
        }
      }
      if (cron.weekdays.size !== 0 || cron.days.size !== 0) {
        let a = Infinity;
        let b = Infinity;
        if (cron.weekdays.size !== 0) {
          const currentWeekday = current.getUTCDay();
          const nextWeekday = cron.next.weekday[currentWeekday];
          a = nextWeekday === undefined ? 7 - currentWeekday + cron.first.weekday : nextWeekday - currentWeekday;
        }
        if (cron.days.size !== 0 && a !== 0) {
          const currentDay = current.getUTCDate();
          const nextDay = cron.next.day[currentDay];
          b = nextDay === undefined ? daysInMonth(current) - currentDay + cron.first.day : nextDay - currentDay;
        }
        const addDays = Math.min(a, b);
        if (addDays !== 0) {
          current.setUTCDate(current.getUTCDate() + addDays);
          current.setUTCHours(cron.first.hour, cron.first.minute, cron.first.second);
          adjustDst(current);
          continue;
        }
      }
      if (cron.months.size !== 0) {
        const currentMonth = current.getUTCMonth() + 1;
        const nextMonth = cron.next.month[currentMonth];
        if (nextMonth === undefined) {
          current.setUTCFullYear(current.getUTCFullYear() + 1);
          current.setUTCMonth(cron.first.month, cron.first.day);
          current.setUTCHours(cron.first.hour, cron.first.minute, cron.first.second);
          adjustDst(current);
          continue;
        }
        if (nextMonth > currentMonth) {
          current.setUTCMonth(nextMonth - 1, cron.first.day);
          current.setUTCHours(cron.first.hour, cron.first.minute, cron.first.second);
          adjustDst(current);
          continue;
        }
      }
      return;
    }
    throw new Error("Unable to find next cron date");
  });
  return toDateUtc(result2);
}, sequence = function* (cron, startFrom) {
  while (true) {
    yield startFrom = next2(cron, startFrom);
  }
}, Equivalence8, restrictionsArrayEquals, restrictionsEquals = (self, that) => restrictionsArrayEquals(fromIterable2(self), fromIterable2(that)), equals5, secondOptions, minuteOptions, hourOptions, dayOptions, monthOptions, weekdayOptions, parseSegment = (input, options) => {
  const capacity2 = options.max - options.min + 1;
  const values10 = new Set;
  const fields = input.split(",");
  for (const field of fields) {
    const [raw, step3] = splitStep(field);
    if (raw === "*" && step3 === undefined) {
      return right2(new Set);
    }
    if (step3 !== undefined) {
      if (!Number.isInteger(step3)) {
        return left2(new ParseError({
          message: `Expected step value to be a positive integer`,
          input
        }));
      }
      if (step3 < 1) {
        return left2(new ParseError({
          message: `Expected step value to be greater than 0`,
          input
        }));
      }
      if (step3 > options.max) {
        return left2(new ParseError({
          message: `Expected step value to be less than ${options.max}`,
          input
        }));
      }
    }
    if (raw === "*") {
      for (let i2 = options.min;i2 <= options.max; i2 += step3 ?? 1) {
        values10.add(i2);
      }
    } else {
      const [left3, right3] = splitRange(raw, options.aliases);
      if (!Number.isInteger(left3)) {
        return left2(new ParseError({
          message: `Expected a positive integer`,
          input
        }));
      }
      if (left3 < options.min || left3 > options.max) {
        return left2(new ParseError({
          message: `Expected a value between ${options.min} and ${options.max}`,
          input
        }));
      }
      if (right3 === undefined) {
        values10.add(left3);
      } else {
        if (!Number.isInteger(right3)) {
          return left2(new ParseError({
            message: `Expected a positive integer`,
            input
          }));
        }
        if (right3 < options.min || right3 > options.max) {
          return left2(new ParseError({
            message: `Expected a value between ${options.min} and ${options.max}`,
            input
          }));
        }
        if (left3 > right3) {
          return left2(new ParseError({
            message: `Invalid value range`,
            input
          }));
        }
        for (let i2 = left3;i2 <= right3; i2 += step3 ?? 1) {
          values10.add(i2);
        }
      }
    }
    if (values10.size >= capacity2) {
      return right2(new Set);
    }
  }
  return right2(values10);
}, splitStep = (input) => {
  const seperator = input.indexOf("/");
  if (seperator !== -1) {
    return [input.slice(0, seperator), Number(input.slice(seperator + 1))];
  }
  return [input, undefined];
}, splitRange = (input, aliases) => {
  const seperator = input.indexOf("-");
  if (seperator !== -1) {
    return [aliasOrValue(input.slice(0, seperator), aliases), aliasOrValue(input.slice(seperator + 1), aliases)];
  }
  return [aliasOrValue(input, aliases), undefined];
};
var init_Cron = __esm(() => {
  init_Array();
  init_Data();
  init_Either();
  init_Equal();
  init_Equivalence();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_dateTime();
  init_Number();
  init_Option();
  init_Predicate();
  init_String();
  TypeId20 = /* @__PURE__ */ Symbol.for("effect/Cron");
  CronProto = {
    [TypeId20]: TypeId20,
    [symbol3](that) {
      return isCron(that) && equals5(this, that);
    },
    [symbol2]() {
      return pipe(hash(this.tz), combine2(array2(fromIterable2(this.seconds))), combine2(array2(fromIterable2(this.minutes))), combine2(array2(fromIterable2(this.hours))), combine2(array2(fromIterable2(this.days))), combine2(array2(fromIterable2(this.months))), combine2(array2(fromIterable2(this.weekdays))), cached(this));
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "Cron",
        tz: this.tz,
        seconds: fromIterable2(this.seconds),
        minutes: fromIterable2(this.minutes),
        hours: fromIterable2(this.hours),
        days: fromIterable2(this.days),
        months: fromIterable2(this.months),
        weekdays: fromIterable2(this.weekdays)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  ParseErrorTypeId = /* @__PURE__ */ Symbol.for("effect/Cron/errors/ParseError");
  ParseError = class ParseError extends (/* @__PURE__ */ TaggedError2("CronParseError")) {
    [ParseErrorTypeId] = ParseErrorTypeId;
  };
  Equivalence8 = /* @__PURE__ */ make((self, that) => restrictionsEquals(self.seconds, that.seconds) && restrictionsEquals(self.minutes, that.minutes) && restrictionsEquals(self.hours, that.hours) && restrictionsEquals(self.days, that.days) && restrictionsEquals(self.months, that.months) && restrictionsEquals(self.weekdays, that.weekdays));
  restrictionsArrayEquals = /* @__PURE__ */ array(number);
  equals5 = /* @__PURE__ */ dual(2, (self, that) => Equivalence8(self, that));
  secondOptions = {
    min: 0,
    max: 59
  };
  minuteOptions = {
    min: 0,
    max: 59
  };
  hourOptions = {
    min: 0,
    max: 23
  };
  dayOptions = {
    min: 1,
    max: 31
  };
  monthOptions = {
    min: 1,
    max: 12,
    aliases: {
      jan: 1,
      feb: 2,
      mar: 3,
      apr: 4,
      may: 5,
      jun: 6,
      jul: 7,
      aug: 8,
      sep: 9,
      oct: 10,
      nov: 11,
      dec: 12
    }
  };
  weekdayOptions = {
    min: 0,
    max: 6,
    aliases: {
      sun: 0,
      mon: 1,
      tue: 2,
      wed: 3,
      thu: 4,
      fri: 5,
      sat: 6
    }
  };
});

// node_modules/effect/dist/esm/Random.js
var exports_Random = {};
__export(exports_Random, {
  shuffle: () => shuffle2,
  randomWith: () => randomWith2,
  nextRange: () => nextRange2,
  nextIntBetween: () => nextIntBetween2,
  nextInt: () => nextInt2,
  nextBoolean: () => nextBoolean2,
  next: () => next3,
  make: () => make58,
  choice: () => choice2,
  RandomTypeId: () => RandomTypeId2,
  Random: () => Random2
});
var RandomTypeId2, next3, nextInt2, nextBoolean2, nextRange2, nextIntBetween2, shuffle2, choice2, randomWith2, Random2, make58;
var init_Random2 = __esm(() => {
  init_defaultServices();
  init_random();
  RandomTypeId2 = RandomTypeId;
  next3 = next;
  nextInt2 = nextInt;
  nextBoolean2 = nextBoolean;
  nextRange2 = nextRange;
  nextIntBetween2 = nextIntBetween;
  shuffle2 = shuffle;
  choice2 = choice;
  randomWith2 = randomWith;
  Random2 = randomTag;
  make58 = make30;
});

// node_modules/effect/dist/esm/internal/schedule.js
var ScheduleSymbolKey = "effect/Schedule", ScheduleTypeId, isSchedule = (u) => hasProperty(u, ScheduleTypeId), ScheduleDriverSymbolKey = "effect/ScheduleDriver", ScheduleDriverTypeId, scheduleVariance, scheduleDriverVariance, ScheduleImpl, ScheduleDriverImpl, makeWithState = (initial, step3) => new ScheduleImpl(initial, step3), addDelay, addDelayEffect, andThen10, andThenEither, as7, asVoid5 = (self) => map23(self, constVoid), bothInOut, check2, checkEffect, collectAllInputs = () => collectAllOutputs(identity3()), collectAllOutputs = (self) => reduce16(self, empty7(), (outs, out) => pipe(outs, append3(out))), collectUntil = (f) => collectAllOutputs(recurUntil(f)), collectUntilEffect = (f) => collectAllOutputs(recurUntilEffect(f)), collectWhile = (f) => collectAllOutputs(recurWhile(f)), collectWhileEffect = (f) => collectAllOutputs(recurWhileEffect(f)), compose4, mapInput6, mapInputContext2, mapInputEffect, cron = (expression, tz) => {
  const parsed = isCron(expression) ? right2(expression) : parse3(expression, tz);
  return makeWithState([true, [Number.MIN_SAFE_INTEGER, 0, 0]], (now2, _, [initial, previous]) => {
    if (now2 < previous[0]) {
      return succeed([[false, previous], [previous[1], previous[2]], continueWith2(make52(previous[1], previous[2]))]);
    }
    if (isLeft2(parsed)) {
      return die2(parsed.left);
    }
    const cron2 = parsed.right;
    const date2 = new Date(now2);
    let next4;
    if (initial && match17(cron2, date2)) {
      next4 = now2;
    }
    next4 = next2(cron2, date2).getTime();
    const start3 = beginningOfSecond(next4);
    const end3 = endOfSecond(next4);
    return succeed([[false, [next4, start3, end3]], [start3, end3], continueWith2(make52(start3, end3))]);
  });
}, dayOfMonth = (day) => {
  return makeWithState([Number.NEGATIVE_INFINITY, 0], (now2, _, state) => {
    if (!Number.isInteger(day) || day < 1 || 31 < day) {
      return dieSync(() => new IllegalArgumentException(`Invalid argument in: dayOfMonth(${day}). Must be in range 1...31`));
    }
    const n = state[1];
    const initial = n === 0;
    const day0 = nextDayOfMonth(now2, day, initial);
    const start3 = beginningOfDay(day0);
    const end3 = endOfDay(day0);
    const interval = make52(start3, end3);
    return succeed([[end3, n + 1], n, continueWith2(interval)]);
  });
}, dayOfWeek = (day) => {
  return makeWithState([Number.MIN_SAFE_INTEGER, 0], (now2, _, state) => {
    if (!Number.isInteger(day) || day < 1 || 7 < day) {
      return dieSync(() => new IllegalArgumentException(`Invalid argument in: dayOfWeek(${day}). Must be in range 1 (Monday)...7 (Sunday)`));
    }
    const n = state[1];
    const initial = n === 0;
    const day0 = nextDay(now2, day, initial);
    const start3 = beginningOfDay(day0);
    const end3 = endOfDay(day0);
    const interval = make52(start3, end3);
    return succeed([[end3, n + 1], n, continueWith2(interval)]);
  });
}, delayed, delayedEffect, delayedSchedule = (schedule) => addDelay(schedule, (x2) => x2), delays = (self) => makeWithState(self.initial, (now2, input, state) => pipe(self.step(now2, input, state), flatMap12(([state2, _, decision]) => {
  if (isDone5(decision)) {
    return succeed([state2, zero2, decision]);
  }
  return succeed([state2, millis(start2(decision.intervals) - now2), decision]);
}))), mapBoth5, mapBothEffect, driver = (self) => pipe(make36([none2(), self.initial]), map14((ref) => new ScheduleDriverImpl(self, ref))), duration = (durationInput) => {
  const duration2 = decode(durationInput);
  const durationMillis = toMillis(duration2);
  return makeWithState(true, (now2, _, state) => succeed(state ? [false, duration2, continueWith2(after2(now2 + durationMillis))] : [false, zero2, done7]));
}, either5, eitherWith, ensuring3, exponential2 = (baseInput, factor = 2) => {
  const base = decode(baseInput);
  return delayedSchedule(map23(forever3, (i2) => times(base, Math.pow(factor, i2))));
}, fibonacci = (oneInput) => {
  const one = decode(oneInput);
  return delayedSchedule(pipe(unfold3([one, one], ([a, b]) => [b, sum4(a, b)]), map23((out) => out[0])));
}, fixed = (intervalInput) => {
  const interval = decode(intervalInput);
  const intervalMillis = toMillis(interval);
  return makeWithState([none2(), 0], (now2, _, [option4, n]) => sync(() => {
    switch (option4._tag) {
      case "None": {
        return [[some3([now2, now2 + intervalMillis]), n + 1], n, continueWith2(after2(now2 + intervalMillis))];
      }
      case "Some": {
        const [startMillis, lastRun] = option4.value;
        const runningBehind = now2 > lastRun + intervalMillis;
        const boundary = equals(interval, zero2) ? interval : millis(intervalMillis - (now2 - startMillis) % intervalMillis);
        const sleepTime = equals(boundary, zero2) ? interval : boundary;
        const nextRun = runningBehind ? now2 : now2 + toMillis(sleepTime);
        return [[some3([startMillis, nextRun]), n + 1], n, continueWith2(after2(nextRun))];
      }
    }
  }));
}, fromDelay = (delay3) => duration(delay3), fromDelays = (delay3, ...delays2) => makeWithState([[delay3, ...delays2].map((_) => decode(_)), true], (now2, _, [durations, cont]) => sync(() => {
  if (cont) {
    const x2 = durations[0];
    const interval = after2(now2 + toMillis(x2));
    if (durations.length >= 2) {
      return [[durations.slice(1), true], x2, continueWith2(interval)];
    }
    const y = durations.slice(1);
    return [[[x2, ...y], false], x2, continueWith2(interval)];
  }
  return [[durations, false], zero2, done7];
})), fromFunction = (f) => map23(identity3(), f), hourOfDay = (hour) => makeWithState([Number.NEGATIVE_INFINITY, 0], (now2, _, state) => {
  if (!Number.isInteger(hour) || hour < 0 || 23 < hour) {
    return dieSync(() => new IllegalArgumentException(`Invalid argument in: hourOfDay(${hour}). Must be in range 0...23`));
  }
  const n = state[1];
  const initial = n === 0;
  const hour0 = nextHour(now2, hour, initial);
  const start3 = beginningOfHour(hour0);
  const end3 = endOfHour(hour0);
  const interval = make52(start3, end3);
  return succeed([[end3, n + 1], n, continueWith2(interval)]);
}), identity3 = () => makeWithState(undefined, (now2, input, state) => succeed([state, input, continueWith2(after2(now2))])), intersect5, intersectWith, intersectWithLoop = (self, that, input, lState, out, lInterval, rState, out2, rInterval, f) => {
  const combined = f(lInterval, rInterval);
  if (isNonEmpty6(combined)) {
    return succeed([[lState, rState], [out, out2], _continue2(combined)]);
  }
  if (pipe(lInterval, lessThan12(rInterval))) {
    return flatMap12(self.step(end2(lInterval), input, lState), ([lState2, out3, decision]) => {
      if (isDone5(decision)) {
        return succeed([[lState2, rState], [out3, out2], done7]);
      }
      return intersectWithLoop(self, that, input, lState2, out3, decision.intervals, rState, out2, rInterval, f);
    });
  }
  return flatMap12(that.step(end2(rInterval), input, rState), ([rState2, out22, decision]) => {
    if (isDone5(decision)) {
      return succeed([[lState, rState2], [out, out22], done7]);
    }
    return intersectWithLoop(self, that, input, lState, out, lInterval, rState2, out22, decision.intervals, f);
  });
}, jittered = (self) => jitteredWith(self, {
  min: 0.8,
  max: 1.2
}), jitteredWith, linear2 = (baseInput) => {
  const base = decode(baseInput);
  return delayedSchedule(map23(forever3, (i2) => times(base, i2 + 1)));
}, map23, mapEffect3, minuteOfHour = (minute) => makeWithState([Number.MIN_SAFE_INTEGER, 0], (now2, _, state) => {
  if (!Number.isInteger(minute) || minute < 0 || 59 < minute) {
    return dieSync(() => new IllegalArgumentException(`Invalid argument in: minuteOfHour(${minute}). Must be in range 0...59`));
  }
  const n = state[1];
  const initial = n === 0;
  const minute0 = nextMinute(now2, minute, initial);
  const start3 = beginningOfMinute(minute0);
  const end3 = endOfMinute(minute0);
  const interval = make52(start3, end3);
  return succeed([[end3, n + 1], n, continueWith2(interval)]);
}), modifyDelay, modifyDelayEffect, onDecision, passthrough = (self) => makeWithState(self.initial, (now2, input, state) => pipe(self.step(now2, input, state), map14(([state2, _, decision]) => [state2, input, decision]))), provideContext3, provideService3, recurUntil = (f) => untilInput(identity3(), f), recurUntilEffect = (f) => untilInputEffect(identity3(), f), recurUntilOption = (pf) => untilOutput(map23(identity3(), pf), isSome2), recurUpTo = (durationInput) => {
  const duration2 = decode(durationInput);
  return whileOutput(elapsed, (elapsed) => lessThan5(elapsed, duration2));
}, recurWhile = (f) => whileInput(identity3(), f), recurWhileEffect = (f) => whileInputEffect(identity3(), f), recurs = (n) => whileOutput(forever3, (out) => out < n), reduce16, reduceEffect2, repetitions = (self) => reduce16(self, 0, (n, _) => n + 1), resetAfter, resetWhen, run, runLoop = (self, now2, inputs, state, acc) => {
  if (!isNonEmpty2(inputs)) {
    return succeed(acc);
  }
  const input = headNonEmpty2(inputs);
  const nextInputs = tailNonEmpty2(inputs);
  return flatMap12(self.step(now2, input, state), ([state2, out, decision]) => {
    if (isDone5(decision)) {
      return sync(() => pipe(acc, prepend3(out)));
    }
    return runLoop(self, start2(decision.intervals), nextInputs, state2, prepend3(acc, out));
  });
}, secondOfMinute = (second) => makeWithState([Number.NEGATIVE_INFINITY, 0], (now2, _, state) => {
  if (!Number.isInteger(second) || second < 0 || 59 < second) {
    return dieSync(() => new IllegalArgumentException(`Invalid argument in: secondOfMinute(${second}). Must be in range 0...59`));
  }
  const n = state[1];
  const initial = n === 0;
  const second0 = nextSecond(now2, second, initial);
  const start3 = beginningOfSecond(second0);
  const end3 = endOfSecond(second0);
  const interval = make52(start3, end3);
  return succeed([[end3, n + 1], n, continueWith2(interval)]);
}), spaced = (duration2) => addDelay(forever3, () => duration2), succeed9 = (value2) => map23(forever3, () => value2), sync6 = (evaluate2) => map23(forever3, evaluate2), tapInput, tapOutput, unfold3 = (initial, f) => makeWithState(initial, (now2, _, state) => sync(() => [f(state), state, continueWith2(after2(now2))])), union13, unionWith2, untilInput, untilInputEffect, untilOutput, untilOutputEffect, upTo, whileInput, whileInputEffect, whileOutput, whileOutputEffect, windowed = (intervalInput) => {
  const interval = decode(intervalInput);
  const millis2 = toMillis(interval);
  return makeWithState([none2(), 0], (now2, _, [option4, n]) => {
    switch (option4._tag) {
      case "None": {
        return succeed([[some3(now2), n + 1], n, continueWith2(after2(now2 + millis2))]);
      }
      case "Some": {
        return succeed([[some3(option4.value), n + 1], n, continueWith2(after2(now2 + (millis2 - (now2 - option4.value) % millis2)))]);
      }
    }
  });
}, zipLeft5, zipRight5, zipWith9, beginningOfSecond = (now2) => {
  const date2 = new Date(now2);
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), date2.getSeconds(), 0).getTime();
}, endOfSecond = (now2) => {
  const date2 = new Date(beginningOfSecond(now2));
  return date2.setSeconds(date2.getSeconds() + 1);
}, nextSecond = (now2, second, initial) => {
  const date2 = new Date(now2);
  if (date2.getSeconds() === second && initial) {
    return now2;
  }
  if (date2.getSeconds() < second) {
    return date2.setSeconds(second);
  }
  const newDate = new Date(date2.setSeconds(second));
  return newDate.setTime(newDate.getTime() + 1000 * 60);
}, beginningOfMinute = (now2) => {
  const date2 = new Date(now2);
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), 0, 0).getTime();
}, endOfMinute = (now2) => {
  const date2 = new Date(beginningOfMinute(now2));
  return date2.setMinutes(date2.getMinutes() + 1);
}, nextMinute = (now2, minute, initial) => {
  const date2 = new Date(now2);
  if (date2.getMinutes() === minute && initial) {
    return now2;
  }
  if (date2.getMinutes() < minute) {
    return date2.setMinutes(minute);
  }
  const newDate = new Date(date2.setMinutes(minute));
  return newDate.setTime(newDate.getTime() + 1000 * 60 * 60);
}, beginningOfHour = (now2) => {
  const date2 = new Date(now2);
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), 0, 0, 0).getTime();
}, endOfHour = (now2) => {
  const date2 = new Date(beginningOfHour(now2));
  return date2.setHours(date2.getHours() + 1);
}, nextHour = (now2, hour, initial) => {
  const date2 = new Date(now2);
  if (date2.getHours() === hour && initial) {
    return now2;
  }
  if (date2.getHours() < hour) {
    return date2.setHours(hour);
  }
  const newDate = new Date(date2.setHours(hour));
  return newDate.setTime(newDate.getTime() + 1000 * 60 * 60 * 24);
}, beginningOfDay = (now2) => {
  const date2 = new Date(now2);
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate(), 0, 0, 0, 0).getTime();
}, endOfDay = (now2) => {
  const date2 = new Date(beginningOfDay(now2));
  return date2.setDate(date2.getDate() + 1);
}, nextDay = (now2, dayOfWeek2, initial) => {
  const date2 = new Date(now2);
  if (date2.getDay() === dayOfWeek2 && initial) {
    return now2;
  }
  const nextDayOfWeek = (7 + dayOfWeek2 - date2.getDay()) % 7;
  return date2.setDate(date2.getDate() + (nextDayOfWeek === 0 ? 7 : nextDayOfWeek));
}, nextDayOfMonth = (now2, day, initial) => {
  const date2 = new Date(now2);
  if (date2.getDate() === day && initial) {
    return now2;
  }
  if (date2.getDate() < day) {
    return date2.setDate(day);
  }
  return findNextMonth(now2, day, 1);
}, findNextMonth = (now2, day, months) => {
  const d = new Date(now2);
  const tmp1 = new Date(d.setDate(day));
  const tmp2 = new Date(tmp1.setMonth(tmp1.getMonth() + months));
  if (tmp2.getDate() === day) {
    const d2 = new Date(now2);
    const tmp3 = new Date(d2.setDate(day));
    return tmp3.setMonth(tmp3.getMonth() + months);
  }
  return findNextMonth(now2, day, months + 1);
}, ScheduleDefectTypeId, ScheduleDefect, isScheduleDefect = (u) => hasProperty(u, ScheduleDefectTypeId), scheduleDefectWrap = (self) => catchAll(self, (e) => die2(new ScheduleDefect(e))), scheduleDefectRefail = (self) => catchAllCause(self, (cause2) => match2(find(cause2, (_) => isDieType(_) && isScheduleDefect(_.defect) ? some3(_.defect) : none2()), {
  onNone: () => failCause(cause2),
  onSome: (error2) => fail2(error2.error)
})), repeat_Effect, repeat_combined, repeatOrElse_Effect, repeatOrElseEffectLoop = (self, driver2, orElse6, value2) => {
  return matchEffect(driver2.next(value2), {
    onFailure: () => orDie(driver2.last),
    onSuccess: (b) => matchEffect(self, {
      onFailure: (error2) => orElse6(error2, some3(b)),
      onSuccess: (value3) => repeatOrElseEffectLoop(self, driver2, orElse6, value3)
    })
  });
}, retry_Effect, retry_combined, retryOrElse_Effect, retryOrElse_EffectLoop = (self, driver2, orElse6) => {
  return catchAll(self, (e) => matchEffect(driver2.next(e), {
    onFailure: () => pipe(driver2.last, orDie, flatMap12((out) => orElse6(e, out))),
    onSuccess: () => retryOrElse_EffectLoop(self, driver2, orElse6)
  }));
}, schedule_Effect, scheduleFrom_Effect, scheduleFrom_EffectLoop = (self, initial, driver2) => matchEffect(driver2.next(initial), {
  onFailure: () => orDie(driver2.last),
  onSuccess: () => flatMap12(self, (a) => scheduleFrom_EffectLoop(self, a, driver2))
}), count, elapsed, forever3, once2, stop;
var init_schedule = __esm(() => {
  init_Chunk();
  init_Clock();
  init_Context();
  init_Cron();
  init_Duration();
  init_Either();
  init_Equal();
  init_Function();
  init_Option();
  init_Predicate();
  init_Random2();
  init_ScheduleDecision();
  init_ScheduleInterval();
  init_ScheduleIntervals();
  init_cause();
  init_core_effect();
  init_core();
  init_ref();
  ScheduleTypeId = /* @__PURE__ */ Symbol.for(ScheduleSymbolKey);
  ScheduleDriverTypeId = /* @__PURE__ */ Symbol.for(ScheduleDriverSymbolKey);
  scheduleVariance = {
    _Out: (_) => _,
    _In: (_) => _,
    _R: (_) => _
  };
  scheduleDriverVariance = {
    _Out: (_) => _,
    _In: (_) => _,
    _R: (_) => _
  };
  ScheduleImpl = class ScheduleImpl {
    initial;
    step;
    [ScheduleTypeId] = scheduleVariance;
    constructor(initial, step3) {
      this.initial = initial;
      this.step = step3;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  ScheduleDriverImpl = class ScheduleDriverImpl {
    schedule;
    ref;
    [ScheduleDriverTypeId] = scheduleDriverVariance;
    constructor(schedule, ref) {
      this.schedule = schedule;
      this.ref = ref;
    }
    get state() {
      return map14(get13(this.ref), (tuple6) => tuple6[1]);
    }
    get last() {
      return flatMap12(get13(this.ref), ([element, _]) => {
        switch (element._tag) {
          case "None": {
            return failSync(() => new NoSuchElementException);
          }
          case "Some": {
            return succeed(element.value);
          }
        }
      });
    }
    get reset() {
      return set6(this.ref, [none2(), this.schedule.initial]);
    }
    next(input) {
      return pipe(map14(get13(this.ref), (tuple6) => tuple6[1]), flatMap12((state) => pipe(currentTimeMillis2, flatMap12((now2) => pipe(suspend(() => this.schedule.step(now2, input, state)), flatMap12(([state2, out, decision]) => {
        const setState = set6(this.ref, [some3(out), state2]);
        if (isDone5(decision)) {
          return zipRight2(setState, fail2(none2()));
        }
        const millis2 = start2(decision.intervals) - now2;
        if (millis2 <= 0) {
          return as3(setState, out);
        }
        return pipe(setState, zipRight2(sleep3(millis(millis2))), as3(out));
      }))))));
    }
  };
  addDelay = /* @__PURE__ */ dual(2, (self, f) => addDelayEffect(self, (out) => sync(() => f(out))));
  addDelayEffect = /* @__PURE__ */ dual(2, (self, f) => modifyDelayEffect(self, (out, duration) => map14(f(out), (delay3) => sum4(duration, decode(delay3)))));
  andThen10 = /* @__PURE__ */ dual(2, (self, that) => map23(andThenEither(self, that), merge));
  andThenEither = /* @__PURE__ */ dual(2, (self, that) => makeWithState([self.initial, that.initial, true], (now2, input, state) => state[2] ? flatMap12(self.step(now2, input, state[0]), ([lState, out, decision]) => {
    if (isDone5(decision)) {
      return map14(that.step(now2, input, state[1]), ([rState, out2, decision2]) => [[lState, rState, false], right2(out2), decision2]);
    }
    return succeed([[lState, state[1], true], left2(out), decision]);
  }) : map14(that.step(now2, input, state[1]), ([rState, out, decision]) => [[state[0], rState, false], right2(out), decision])));
  as7 = /* @__PURE__ */ dual(2, (self, out) => map23(self, () => out));
  bothInOut = /* @__PURE__ */ dual(2, (self, that) => makeWithState([self.initial, that.initial], (now2, [in1, in2], state) => zipWith6(self.step(now2, in1, state[0]), that.step(now2, in2, state[1]), ([lState, out, lDecision], [rState, out2, rDecision]) => {
    if (isContinue2(lDecision) && isContinue2(rDecision)) {
      const interval = pipe(lDecision.intervals, union12(rDecision.intervals));
      return [[lState, rState], [out, out2], _continue2(interval)];
    }
    return [[lState, rState], [out, out2], done7];
  })));
  check2 = /* @__PURE__ */ dual(2, (self, test) => checkEffect(self, (input, out) => sync(() => test(input, out))));
  checkEffect = /* @__PURE__ */ dual(2, (self, test) => makeWithState(self.initial, (now2, input, state) => flatMap12(self.step(now2, input, state), ([state2, out, decision]) => {
    if (isDone5(decision)) {
      return succeed([state2, out, done7]);
    }
    return map14(test(input, out), (cont) => cont ? [state2, out, decision] : [state2, out, done7]);
  })));
  compose4 = /* @__PURE__ */ dual(2, (self, that) => makeWithState([self.initial, that.initial], (now2, input, state) => flatMap12(self.step(now2, input, state[0]), ([lState, out, lDecision]) => map14(that.step(now2, out, state[1]), ([rState, out2, rDecision]) => isDone5(lDecision) ? [[lState, rState], out2, done7] : isDone5(rDecision) ? [[lState, rState], out2, done7] : [[lState, rState], out2, _continue2(pipe(lDecision.intervals, max11(rDecision.intervals)))]))));
  mapInput6 = /* @__PURE__ */ dual(2, (self, f) => mapInputEffect(self, (input2) => sync(() => f(input2))));
  mapInputContext2 = /* @__PURE__ */ dual(2, (self, f) => makeWithState(self.initial, (now2, input, state) => mapInputContext(self.step(now2, input, state), f)));
  mapInputEffect = /* @__PURE__ */ dual(2, (self, f) => makeWithState(self.initial, (now2, input2, state) => flatMap12(f(input2), (input) => self.step(now2, input, state))));
  delayed = /* @__PURE__ */ dual(2, (self, f) => delayedEffect(self, (duration) => sync(() => f(duration))));
  delayedEffect = /* @__PURE__ */ dual(2, (self, f) => modifyDelayEffect(self, (_, delay3) => f(delay3)));
  mapBoth5 = /* @__PURE__ */ dual(2, (self, {
    onInput,
    onOutput
  }) => map23(mapInput6(self, onInput), onOutput));
  mapBothEffect = /* @__PURE__ */ dual(2, (self, {
    onInput,
    onOutput
  }) => mapEffect3(mapInputEffect(self, onInput), onOutput));
  either5 = /* @__PURE__ */ dual(2, (self, that) => union13(self, that));
  eitherWith = /* @__PURE__ */ dual(3, (self, that, f) => unionWith2(self, that, f));
  ensuring3 = /* @__PURE__ */ dual(2, (self, finalizer) => makeWithState(self.initial, (now2, input, state) => flatMap12(self.step(now2, input, state), ([state2, out, decision]) => isDone5(decision) ? as3(finalizer, [state2, out, decision]) : succeed([state2, out, decision]))));
  intersect5 = /* @__PURE__ */ dual(2, (self, that) => intersectWith(self, that, intersect4));
  intersectWith = /* @__PURE__ */ dual(3, (self, that, f) => makeWithState([self.initial, that.initial], (now2, input, state) => pipe(zipWith6(self.step(now2, input, state[0]), that.step(now2, input, state[1]), (a, b) => [a, b]), flatMap12(([[lState, out, lDecision], [rState, out2, rDecision]]) => {
    if (isContinue2(lDecision) && isContinue2(rDecision)) {
      return intersectWithLoop(self, that, input, lState, out, lDecision.intervals, rState, out2, rDecision.intervals, f);
    }
    return succeed([[lState, rState], [out, out2], done7]);
  }))));
  jitteredWith = /* @__PURE__ */ dual(2, (self, options) => {
    const {
      max: max13,
      min: min10
    } = Object.assign({
      min: 0.8,
      max: 1.2
    }, options);
    return delayedEffect(self, (duration2) => map14(next3, (random3) => {
      const d = toMillis(duration2);
      const jittered2 = d * min10 * (1 - random3) + d * max13 * random3;
      return millis(jittered2);
    }));
  });
  map23 = /* @__PURE__ */ dual(2, (self, f) => mapEffect3(self, (out) => sync(() => f(out))));
  mapEffect3 = /* @__PURE__ */ dual(2, (self, f) => makeWithState(self.initial, (now2, input, state) => flatMap12(self.step(now2, input, state), ([state2, out, decision]) => map14(f(out), (out2) => [state2, out2, decision]))));
  modifyDelay = /* @__PURE__ */ dual(2, (self, f) => modifyDelayEffect(self, (out, duration2) => sync(() => f(out, duration2))));
  modifyDelayEffect = /* @__PURE__ */ dual(2, (self, f) => makeWithState(self.initial, (now2, input, state) => flatMap12(self.step(now2, input, state), ([state2, out, decision]) => {
    if (isDone5(decision)) {
      return succeed([state2, out, decision]);
    }
    const intervals = decision.intervals;
    const delay3 = size16(make52(now2, start2(intervals)));
    return map14(f(out, delay3), (durationInput) => {
      const duration2 = decode(durationInput);
      const oldStart = start2(intervals);
      const newStart = now2 + toMillis(duration2);
      const delta = newStart - oldStart;
      const newEnd = Math.max(0, end2(intervals) + delta);
      const newInterval = make52(newStart, newEnd);
      return [state2, out, continueWith2(newInterval)];
    });
  })));
  onDecision = /* @__PURE__ */ dual(2, (self, f) => makeWithState(self.initial, (now2, input, state) => flatMap12(self.step(now2, input, state), ([state2, out, decision]) => as3(f(out, decision), [state2, out, decision]))));
  provideContext3 = /* @__PURE__ */ dual(2, (self, context4) => makeWithState(self.initial, (now2, input, state) => provideContext(self.step(now2, input, state), context4)));
  provideService3 = /* @__PURE__ */ dual(3, (self, tag, service2) => makeWithState(self.initial, (now2, input, state) => contextWithEffect((env) => provideContext(self.step(now2, input, state), add2(env, tag, service2)))));
  reduce16 = /* @__PURE__ */ dual(3, (self, zero3, f) => reduceEffect2(self, zero3, (z2, out) => sync(() => f(z2, out))));
  reduceEffect2 = /* @__PURE__ */ dual(3, (self, zero3, f) => makeWithState([self.initial, zero3], (now2, input, [s, z2]) => flatMap12(self.step(now2, input, s), ([s2, out, decision]) => isDone5(decision) ? succeed([[s2, z2], z2, decision]) : map14(f(z2, out), (z22) => [[s2, z22], z2, decision]))));
  resetAfter = /* @__PURE__ */ dual(2, (self, durationInput) => {
    const duration2 = decode(durationInput);
    return pipe(self, intersect5(elapsed), resetWhen(([, time]) => greaterThanOrEqualTo5(time, duration2)), map23((out) => out[0]));
  });
  resetWhen = /* @__PURE__ */ dual(2, (self, f) => makeWithState(self.initial, (now2, input, state) => flatMap12(self.step(now2, input, state), ([state2, out, decision]) => f(out) ? self.step(now2, input, self.initial) : succeed([state2, out, decision]))));
  run = /* @__PURE__ */ dual(3, (self, now2, input) => pipe(runLoop(self, now2, fromIterable3(input), self.initial, empty7()), map14((list) => reverse3(list))));
  tapInput = /* @__PURE__ */ dual(2, (self, f) => makeWithState(self.initial, (now2, input, state) => zipRight2(f(input), self.step(now2, input, state))));
  tapOutput = /* @__PURE__ */ dual(2, (self, f) => makeWithState(self.initial, (now2, input, state) => tap2(self.step(now2, input, state), ([, out]) => f(out))));
  union13 = /* @__PURE__ */ dual(2, (self, that) => unionWith2(self, that, union12));
  unionWith2 = /* @__PURE__ */ dual(3, (self, that, f) => makeWithState([self.initial, that.initial], (now2, input, state) => zipWith6(self.step(now2, input, state[0]), that.step(now2, input, state[1]), ([lState, l, lDecision], [rState, r, rDecision]) => {
    if (isDone5(lDecision) && isDone5(rDecision)) {
      return [[lState, rState], [l, r], done7];
    }
    if (isDone5(lDecision) && isContinue2(rDecision)) {
      return [[lState, rState], [l, r], _continue2(rDecision.intervals)];
    }
    if (isContinue2(lDecision) && isDone5(rDecision)) {
      return [[lState, rState], [l, r], _continue2(lDecision.intervals)];
    }
    if (isContinue2(lDecision) && isContinue2(rDecision)) {
      const combined = f(lDecision.intervals, rDecision.intervals);
      return [[lState, rState], [l, r], _continue2(combined)];
    }
    throw new Error("BUG: Schedule.unionWith - please report an issue at https://github.com/Effect-TS/effect/issues");
  })));
  untilInput = /* @__PURE__ */ dual(2, (self, f) => check2(self, (input, _) => !f(input)));
  untilInputEffect = /* @__PURE__ */ dual(2, (self, f) => checkEffect(self, (input, _) => negate3(f(input))));
  untilOutput = /* @__PURE__ */ dual(2, (self, f) => check2(self, (_, out) => !f(out)));
  untilOutputEffect = /* @__PURE__ */ dual(2, (self, f) => checkEffect(self, (_, out) => negate3(f(out))));
  upTo = /* @__PURE__ */ dual(2, (self, duration2) => zipLeft5(self, recurUpTo(duration2)));
  whileInput = /* @__PURE__ */ dual(2, (self, f) => check2(self, (input, _) => f(input)));
  whileInputEffect = /* @__PURE__ */ dual(2, (self, f) => checkEffect(self, (input, _) => f(input)));
  whileOutput = /* @__PURE__ */ dual(2, (self, f) => check2(self, (_, out) => f(out)));
  whileOutputEffect = /* @__PURE__ */ dual(2, (self, f) => checkEffect(self, (_, out) => f(out)));
  zipLeft5 = /* @__PURE__ */ dual(2, (self, that) => map23(intersect5(self, that), (out) => out[0]));
  zipRight5 = /* @__PURE__ */ dual(2, (self, that) => map23(intersect5(self, that), (out) => out[1]));
  zipWith9 = /* @__PURE__ */ dual(3, (self, that, f) => map23(intersect5(self, that), ([out, out2]) => f(out, out2)));
  ScheduleDefectTypeId = /* @__PURE__ */ Symbol.for("effect/Schedule/ScheduleDefect");
  ScheduleDefect = class ScheduleDefect {
    error;
    [ScheduleDefectTypeId];
    constructor(error2) {
      this.error = error2;
      this[ScheduleDefectTypeId] = ScheduleDefectTypeId;
    }
  };
  repeat_Effect = /* @__PURE__ */ dual(2, (self, schedule) => repeatOrElse_Effect(self, schedule, (e, _) => fail2(e)));
  repeat_combined = /* @__PURE__ */ dual(2, (self, options) => {
    if (isSchedule(options)) {
      return repeat_Effect(self, options);
    }
    const base = options.schedule ?? passthrough(forever3);
    const withWhile = options.while ? whileInputEffect(base, (a) => {
      const applied = options.while(a);
      if (typeof applied === "boolean") {
        return succeed(applied);
      }
      return scheduleDefectWrap(applied);
    }) : base;
    const withUntil = options.until ? untilInputEffect(withWhile, (a) => {
      const applied = options.until(a);
      if (typeof applied === "boolean") {
        return succeed(applied);
      }
      return scheduleDefectWrap(applied);
    }) : withWhile;
    const withTimes = options.times ? intersect5(withUntil, recurs(options.times)).pipe(map23((intersectionPair) => intersectionPair[0])) : withUntil;
    return scheduleDefectRefail(repeat_Effect(self, withTimes));
  });
  repeatOrElse_Effect = /* @__PURE__ */ dual(3, (self, schedule, orElse6) => flatMap12(driver(schedule), (driver2) => matchEffect(self, {
    onFailure: (error2) => orElse6(error2, none2()),
    onSuccess: (value2) => repeatOrElseEffectLoop(self, driver2, orElse6, value2)
  })));
  retry_Effect = /* @__PURE__ */ dual(2, (self, policy) => retryOrElse_Effect(self, policy, (e, _) => fail2(e)));
  retry_combined = /* @__PURE__ */ dual(2, (self, options) => {
    if (isSchedule(options)) {
      return retry_Effect(self, options);
    }
    const base = options.schedule ?? forever3;
    const withWhile = options.while ? whileInputEffect(base, (e) => {
      const applied = options.while(e);
      if (typeof applied === "boolean") {
        return succeed(applied);
      }
      return scheduleDefectWrap(applied);
    }) : base;
    const withUntil = options.until ? untilInputEffect(withWhile, (e) => {
      const applied = options.until(e);
      if (typeof applied === "boolean") {
        return succeed(applied);
      }
      return scheduleDefectWrap(applied);
    }) : withWhile;
    const withTimes = options.times ? intersect5(withUntil, recurs(options.times)) : withUntil;
    return scheduleDefectRefail(retry_Effect(self, withTimes));
  });
  retryOrElse_Effect = /* @__PURE__ */ dual(3, (self, policy, orElse6) => flatMap12(driver(policy), (driver2) => retryOrElse_EffectLoop(self, driver2, orElse6)));
  schedule_Effect = /* @__PURE__ */ dual(2, (self, schedule) => scheduleFrom_Effect(self, undefined, schedule));
  scheduleFrom_Effect = /* @__PURE__ */ dual(3, (self, initial, schedule) => flatMap12(driver(schedule), (driver2) => scheduleFrom_EffectLoop(self, initial, driver2)));
  count = /* @__PURE__ */ unfold3(0, (n) => n + 1);
  elapsed = /* @__PURE__ */ makeWithState(/* @__PURE__ */ none2(), (now2, _, state) => {
    switch (state._tag) {
      case "None": {
        return succeed([some3(now2), zero2, continueWith2(after2(now2))]);
      }
      case "Some": {
        return succeed([some3(state.value), millis(now2 - state.value), continueWith2(after2(now2))]);
      }
    }
  });
  forever3 = /* @__PURE__ */ unfold3(0, (n) => n + 1);
  once2 = /* @__PURE__ */ asVoid5(/* @__PURE__ */ recurs(1));
  stop = /* @__PURE__ */ asVoid5(/* @__PURE__ */ recurs(0));
});

// node_modules/effect/dist/esm/internal/effect/circular.js
class Semaphore {
  permits;
  waiters = /* @__PURE__ */ new Set;
  taken = 0;
  constructor(permits) {
    this.permits = permits;
  }
  get free() {
    return this.permits - this.taken;
  }
  take = (n) => asyncInterrupt((resume2) => {
    if (this.free < n) {
      const observer = () => {
        if (this.free < n) {
          return;
        }
        this.waiters.delete(observer);
        this.taken += n;
        resume2(succeed(n));
      };
      this.waiters.add(observer);
      return sync(() => {
        this.waiters.delete(observer);
      });
    }
    this.taken += n;
    return resume2(succeed(n));
  });
  updateTaken = (f) => withFiberRuntime((fiber) => {
    this.taken = f(this.taken);
    if (this.waiters.size > 0) {
      fiber.getFiberRef(currentScheduler).scheduleTask(() => {
        const iter = this.waiters.values();
        let item = iter.next();
        while (item.done === false && this.free > 0) {
          item.value();
          item = iter.next();
        }
      }, fiber.getFiberRef(currentSchedulingPriority));
    }
    return succeed(this.free);
  });
  release = (n) => this.updateTaken((taken) => taken - n);
  releaseAll = /* @__PURE__ */ this.updateTaken((_) => 0);
  withPermits = (n) => (self) => uninterruptibleMask((restore) => flatMap12(restore(this.take(n)), (permits) => ensuring2(restore(self), this.release(permits))));
  withPermitsIfAvailable = (n) => (self) => uninterruptibleMask((restore) => suspend(() => {
    if (this.free < n) {
      return succeedNone;
    }
    this.taken += n;
    return ensuring2(restore(asSome(self)), this.release(n));
  }));
}
var unsafeMakeSemaphore = (permits) => new Semaphore(permits), makeSemaphore = (permits) => sync(() => unsafeMakeSemaphore(permits)), Latch, unsafeMakeLatch = (open) => new Latch(open ?? false), makeLatch = (open) => sync(() => unsafeMakeLatch(open)), awaitAllChildren = (self) => ensuringChildren(self, fiberAwaitAll), cached2, cachedInvalidateWithTTL, computeCachedValue = (self, timeToLive, start3) => {
  const timeToLiveMillis = toMillis(decode(timeToLive));
  return pipe(deferredMake(), tap2((deferred) => intoDeferred(self, deferred)), map14((deferred) => some3([start3 + timeToLiveMillis, deferred])));
}, getCachedValue = (self, timeToLive, cache) => uninterruptibleMask((restore) => pipe(clockWith3((clock2) => clock2.currentTimeMillis), flatMap12((time) => updateSomeAndGetEffectSynchronized(cache, (option4) => {
  switch (option4._tag) {
    case "None": {
      return some3(computeCachedValue(self, timeToLive, time));
    }
    case "Some": {
      const [end3] = option4.value;
      return end3 - time <= 0 ? some3(computeCachedValue(self, timeToLive, time)) : none2();
    }
  }
})), flatMap12((option4) => isNone2(option4) ? dieMessage("BUG: Effect.cachedInvalidate - please report an issue at https://github.com/Effect-TS/effect/issues") : restore(deferredAwait(option4.value[1]))))), invalidateCache = (cache) => set6(cache, none2()), ensuringChild, ensuringChildren, forkAll, forkIn2, forkScoped2 = (self) => scopeWith((scope3) => forkIn2(self, scope3)), fromFiber = (fiber) => join3(fiber), fromFiberEffect = (fiber) => suspend(() => flatMap12(fiber, join3)), memoKeySymbol, Key, cachedFunction = (f, eq) => {
  return pipe(sync(() => empty23()), flatMap12(makeSynchronized), map14((ref) => (a) => pipe(ref.modifyEffect((map24) => {
    const result2 = pipe(map24, get10(new Key(a, eq)));
    if (isNone2(result2)) {
      return pipe(deferredMake(), tap2((deferred) => pipe(diffFiberRefs(f(a)), intoDeferred(deferred), fork2)), map14((deferred) => [deferred, pipe(map24, set5(new Key(a, eq), deferred))]));
    }
    return succeed([result2.value, map24]);
  }), flatMap12(deferredAwait), flatMap12(([patch13, b]) => pipe(patchFiberRefs(patch13), as3(b))))));
}, raceFirst2, scheduleForked, supervised, timeout2, timeoutFail, timeoutFailCause, timeoutOption2, timeoutTo, SynchronizedSymbolKey = "effect/Ref/SynchronizedRef", SynchronizedTypeId, synchronizedVariance, SynchronizedImpl, makeSynchronized = (value2) => sync(() => unsafeMakeSynchronized(value2)), unsafeMakeSynchronized = (value2) => {
  const ref = unsafeMake7(value2);
  const sem = unsafeMakeSemaphore(1);
  return new SynchronizedImpl(ref, sem.withPermits(1));
}, updateSomeAndGetEffectSynchronized, zipFiber, zipLeftFiber, zipRightFiber, zipWithFiber, bindAll;
var init_circular = __esm(() => {
  init_Duration();
  init_Effectable();
  init_Equal();
  init_Exit();
  init_FiberId();
  init_Function();
  init_Hash();
  init_MutableHashMap();
  init_Option();
  init_Predicate();
  init_Readable();
  init_Scheduler();
  init_cause();
  init_core_effect();
  init_core();
  init_fiber();
  init_fiberRuntime();
  init_fiberScope();
  init_ref();
  init_schedule();
  init_supervisor();
  Latch = class Latch extends Class2 {
    isOpen;
    waiters = [];
    scheduled = false;
    constructor(isOpen) {
      super();
      this.isOpen = isOpen;
    }
    commit() {
      return this.await;
    }
    unsafeSchedule(fiber) {
      if (this.scheduled || this.waiters.length === 0) {
        return void_3;
      }
      this.scheduled = true;
      fiber.currentScheduler.scheduleTask(this.flushWaiters, fiber.getFiberRef(currentSchedulingPriority));
      return void_3;
    }
    flushWaiters = () => {
      this.scheduled = false;
      const waiters = this.waiters;
      this.waiters = [];
      for (let i2 = 0;i2 < waiters.length; i2++) {
        waiters[i2](exitVoid);
      }
    };
    open = /* @__PURE__ */ withFiberRuntime((fiber) => {
      if (this.isOpen) {
        return void_3;
      }
      this.isOpen = true;
      return this.unsafeSchedule(fiber);
    });
    unsafeOpen() {
      if (this.isOpen)
        return;
      this.isOpen = true;
      this.flushWaiters();
    }
    release = /* @__PURE__ */ withFiberRuntime((fiber) => {
      if (this.isOpen) {
        return void_3;
      }
      return this.unsafeSchedule(fiber);
    });
    await = /* @__PURE__ */ asyncInterrupt((resume2) => {
      if (this.isOpen) {
        return resume2(void_3);
      }
      this.waiters.push(resume2);
      return sync(() => {
        const index = this.waiters.indexOf(resume2);
        if (index !== -1) {
          this.waiters.splice(index, 1);
        }
      });
    });
    unsafeClose() {
      this.isOpen = false;
    }
    close = /* @__PURE__ */ sync(() => {
      this.isOpen = false;
    });
    whenOpen = (self) => {
      return zipRight2(this.await, self);
    };
  };
  cached2 = /* @__PURE__ */ dual(2, (self, timeToLive) => map14(cachedInvalidateWithTTL(self, timeToLive), (tuple6) => tuple6[0]));
  cachedInvalidateWithTTL = /* @__PURE__ */ dual(2, (self, timeToLive) => {
    const duration2 = decode(timeToLive);
    return flatMap12(context2(), (env) => map14(makeSynchronized(none2()), (cache) => [provideContext(getCachedValue(self, duration2, cache), env), invalidateCache(cache)]));
  });
  ensuringChild = /* @__PURE__ */ dual(2, (self, f) => ensuringChildren(self, (children2) => f(fiberAll(children2))));
  ensuringChildren = /* @__PURE__ */ dual(2, (self, children2) => flatMap12(track, (supervisor) => pipe(supervised(self, supervisor), ensuring2(flatMap12(supervisor.value, children2)))));
  forkAll = /* @__PURE__ */ dual((args2) => isIterable(args2[0]), (effects, options) => options?.discard ? forEachSequentialDiscard(effects, fork2) : map14(forEachSequential(effects, fork2), fiberAll));
  forkIn2 = /* @__PURE__ */ dual(2, (self, scope3) => withFiberRuntime((parent, parentStatus) => {
    const scopeImpl = scope3;
    const fiber = unsafeFork2(self, parent, parentStatus.runtimeFlags, globalScope);
    if (scopeImpl.state._tag === "Open") {
      const finalizer = () => fiberIdWith((fiberId2) => equals(fiberId2, fiber.id()) ? void_3 : asVoid2(interruptFiber(fiber)));
      const key = {};
      scopeImpl.state.finalizers.set(key, finalizer);
      fiber.addObserver(() => {
        if (scopeImpl.state._tag === "Closed")
          return;
        scopeImpl.state.finalizers.delete(key);
      });
    } else {
      fiber.unsafeInterruptAsFork(parent.id());
    }
    return succeed(fiber);
  }));
  memoKeySymbol = /* @__PURE__ */ Symbol.for("effect/Effect/memoizeFunction.key");
  Key = class Key {
    a;
    eq;
    [memoKeySymbol] = memoKeySymbol;
    constructor(a, eq) {
      this.a = a;
      this.eq = eq;
    }
    [symbol3](that) {
      if (hasProperty(that, memoKeySymbol)) {
        if (this.eq) {
          return this.eq(this.a, that.a);
        } else {
          return equals(this.a, that.a);
        }
      }
      return false;
    }
    [symbol2]() {
      return this.eq ? 0 : cached(this, hash(this.a));
    }
  };
  raceFirst2 = /* @__PURE__ */ dual(2, (self, that) => pipe(exit(self), race2(exit(that)), (effect) => flatten8(effect)));
  scheduleForked = /* @__PURE__ */ dual(2, (self, schedule) => pipe(self, schedule_Effect(schedule), forkScoped2));
  supervised = /* @__PURE__ */ dual(2, (self, supervisor) => {
    const supervise = fiberRefLocallyWith(currentSupervisor, (s) => s.zip(supervisor));
    return supervise(self);
  });
  timeout2 = /* @__PURE__ */ dual(2, (self, duration2) => timeoutFail(self, {
    onTimeout: () => timeoutExceptionFromDuration(duration2),
    duration: duration2
  }));
  timeoutFail = /* @__PURE__ */ dual(2, (self, {
    duration: duration2,
    onTimeout
  }) => flatten8(timeoutTo(self, {
    onTimeout: () => failSync(onTimeout),
    onSuccess: succeed,
    duration: duration2
  })));
  timeoutFailCause = /* @__PURE__ */ dual(2, (self, {
    duration: duration2,
    onTimeout
  }) => flatten8(timeoutTo(self, {
    onTimeout: () => failCauseSync(onTimeout),
    onSuccess: succeed,
    duration: duration2
  })));
  timeoutOption2 = /* @__PURE__ */ dual(2, (self, duration2) => timeoutTo(self, {
    duration: duration2,
    onSuccess: some3,
    onTimeout: none2
  }));
  timeoutTo = /* @__PURE__ */ dual(2, (self, {
    duration: duration2,
    onSuccess,
    onTimeout
  }) => fiberIdWith((parentFiberId) => uninterruptibleMask((restore) => raceFibersWith(restore(self), interruptible2(sleep3(duration2)), {
    onSelfWin: (winner, loser) => flatMap12(winner.await, (exit3) => {
      if (exit3._tag === "Success") {
        return flatMap12(winner.inheritAll, () => as3(interruptAsFiber(loser, parentFiberId), onSuccess(exit3.value)));
      } else {
        return flatMap12(interruptAsFiber(loser, parentFiberId), () => exitFailCause(exit3.cause));
      }
    }),
    onOtherWin: (winner, loser) => flatMap12(winner.await, (exit3) => {
      if (exit3._tag === "Success") {
        return flatMap12(winner.inheritAll, () => as3(interruptAsFiber(loser, parentFiberId), onTimeout()));
      } else {
        return flatMap12(interruptAsFiber(loser, parentFiberId), () => exitFailCause(exit3.cause));
      }
    }),
    otherScope: globalScope
  }))));
  SynchronizedTypeId = /* @__PURE__ */ Symbol.for(SynchronizedSymbolKey);
  synchronizedVariance = {
    _A: (_) => _
  };
  SynchronizedImpl = class SynchronizedImpl extends Class2 {
    ref;
    withLock;
    [SynchronizedTypeId] = synchronizedVariance;
    [RefTypeId] = refVariance;
    [TypeId15] = TypeId15;
    constructor(ref, withLock) {
      super();
      this.ref = ref;
      this.withLock = withLock;
      this.get = get13(this.ref);
    }
    get;
    commit() {
      return this.get;
    }
    modify(f) {
      return this.modifyEffect((a) => succeed(f(a)));
    }
    modifyEffect(f) {
      return this.withLock(pipe(flatMap12(get13(this.ref), f), flatMap12(([b, a]) => as3(set6(this.ref, a), b))));
    }
  };
  updateSomeAndGetEffectSynchronized = /* @__PURE__ */ dual(2, (self, pf) => self.modifyEffect((value2) => {
    const result2 = pf(value2);
    switch (result2._tag) {
      case "None": {
        return succeed([value2, value2]);
      }
      case "Some": {
        return map14(result2.value, (a) => [a, a]);
      }
    }
  }));
  zipFiber = /* @__PURE__ */ dual(2, (self, that) => zipWithFiber(self, that, (a, b) => [a, b]));
  zipLeftFiber = /* @__PURE__ */ dual(2, (self, that) => zipWithFiber(self, that, (a, _) => a));
  zipRightFiber = /* @__PURE__ */ dual(2, (self, that) => zipWithFiber(self, that, (_, b) => b));
  zipWithFiber = /* @__PURE__ */ dual(3, (self, that, f) => ({
    ...CommitPrototype2,
    commit() {
      return join3(this);
    },
    [FiberTypeId]: fiberVariance2,
    id: () => pipe(self.id(), getOrElse6(that.id())),
    await: pipe(self.await, flatten8, zipWithOptions(flatten8(that.await), f, {
      concurrent: true
    }), exit),
    children: self.children,
    inheritAll: zipRight2(that.inheritAll, self.inheritAll),
    poll: zipWith6(self.poll, that.poll, (optionA, optionB) => pipe(optionA, flatMap2((exitA) => pipe(optionB, map2((exitB) => zipWith7(exitA, exitB, {
      onSuccess: f,
      onFailure: parallel
    })))))),
    interruptAsFork: (id2) => zipRight2(self.interruptAsFork(id2), that.interruptAsFork(id2)),
    pipe() {
      return pipeArguments(this, arguments);
    }
  }));
  bindAll = /* @__PURE__ */ dual((args2) => isEffect(args2[0]), (self, f, options) => flatMap12(self, (a) => all9(f(a), options).pipe(map14((record3) => Object.assign({}, a, record3)))));
});

// node_modules/effect/dist/esm/internal/managedRuntime/circular.js
var TypeId21;
var init_circular2 = __esm(() => {
  TypeId21 = /* @__PURE__ */ Symbol.for("effect/ManagedRuntime");
});

// node_modules/effect/dist/esm/internal/opCodes/layer.js
var OP_EXTEND_SCOPE = "ExtendScope", OP_FOLD = "Fold", OP_FRESH = "Fresh", OP_FROM_EFFECT = "FromEffect", OP_SCOPED = "Scoped", OP_SUSPEND = "Suspend", OP_PROVIDE = "Provide", OP_PROVIDE_MERGE = "ProvideMerge", OP_ZIP_WITH2 = "ZipWith";

// node_modules/effect/dist/esm/Fiber.js
var exports_Fiber = {};
__export(exports_Fiber, {
  zipWith: () => zipWith10,
  zipRight: () => zipRight6,
  zipLeft: () => zipLeft6,
  zip: () => zip11,
  void: () => void_7,
  unsafeRoots: () => unsafeRoots2,
  succeed: () => succeed10,
  status: () => status2,
  scoped: () => scoped2,
  roots: () => roots2,
  pretty: () => pretty4,
  poll: () => poll4,
  orElseEither: () => orElseEither5,
  orElse: () => orElse6,
  never: () => never4,
  match: () => match18,
  mapFiber: () => mapFiber2,
  mapEffect: () => mapEffect4,
  map: () => map24,
  joinAll: () => joinAll,
  join: () => join4,
  isRuntimeFiber: () => isRuntimeFiber2,
  isFiber: () => isFiber2,
  interrupted: () => interrupted2,
  interruptFork: () => interruptFork,
  interruptAsFork: () => interruptAsFork2,
  interruptAs: () => interruptAs,
  interruptAllAs: () => interruptAllAs2,
  interruptAll: () => interruptAll2,
  interrupt: () => interrupt7,
  inheritAll: () => inheritAll2,
  id: () => id2,
  getCurrentFiber: () => getCurrentFiber2,
  fromEffect: () => fromEffect3,
  failCause: () => failCause7,
  fail: () => fail9,
  dumpAll: () => dumpAll2,
  dump: () => dump2,
  done: () => done8,
  children: () => children2,
  awaitAll: () => awaitAll,
  await: () => _await3,
  all: () => all10,
  RuntimeFiberTypeId: () => RuntimeFiberTypeId2,
  Order: () => Order10,
  FiberTypeId: () => FiberTypeId2
});
var FiberTypeId2, RuntimeFiberTypeId2, Order10, isFiber2, isRuntimeFiber2, id2, _await3, awaitAll, children2, all10, done8, dump2, dumpAll2, fail9, failCause7, fromEffect3, getCurrentFiber2, inheritAll2, interrupt7, interrupted2, interruptAs, interruptAsFork2, interruptAll2, interruptAllAs2, interruptFork, join4, joinAll, map24, mapEffect4, mapFiber2, match18, never4, orElse6, orElseEither5, poll4, pretty4, roots2, unsafeRoots2, scoped2, status2, succeed10, void_7, zip11, zipLeft6, zipRight6, zipWith10;
var init_Fiber = __esm(() => {
  init_core();
  init_circular();
  init_fiber();
  init_fiberRuntime();
  FiberTypeId2 = FiberTypeId;
  RuntimeFiberTypeId2 = RuntimeFiberTypeId;
  Order10 = Order7;
  isFiber2 = isFiber;
  isRuntimeFiber2 = isRuntimeFiber;
  id2 = id;
  _await3 = _await2;
  awaitAll = fiberAwaitAll;
  children2 = children;
  all10 = fiberAll;
  done8 = done5;
  dump2 = dump;
  dumpAll2 = dumpAll;
  fail9 = fail6;
  failCause7 = failCause5;
  fromEffect3 = fromEffect;
  getCurrentFiber2 = getCurrentFiber;
  inheritAll2 = inheritAll;
  interrupt7 = interruptFiber;
  interrupted2 = interrupted;
  interruptAs = interruptAsFiber;
  interruptAsFork2 = interruptAsFork;
  interruptAll2 = interruptAll;
  interruptAllAs2 = interruptAllAs;
  interruptFork = fiberInterruptFork;
  join4 = join3;
  joinAll = fiberJoinAll;
  map24 = map18;
  mapEffect4 = mapEffect2;
  mapFiber2 = mapFiber;
  match18 = match13;
  never4 = never3;
  orElse6 = orElse5;
  orElseEither5 = orElseEither3;
  poll4 = poll3;
  pretty4 = pretty2;
  roots2 = roots;
  unsafeRoots2 = unsafeRoots;
  scoped2 = fiberScoped;
  status2 = status;
  succeed10 = succeed5;
  void_7 = void_6;
  zip11 = zipFiber;
  zipLeft6 = zipLeftFiber;
  zipRight6 = zipRightFiber;
  zipWith10 = zipWithFiber;
});

// node_modules/effect/dist/esm/internal/runtime.js
class RuntimeImpl {
  context;
  runtimeFlags;
  fiberRefs;
  constructor(context4, runtimeFlags2, fiberRefs4) {
    this.context = context4;
    this.runtimeFlags = runtimeFlags2;
    this.fiberRefs = fiberRefs4;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
}
var makeDual = (f) => function() {
  if (arguments.length === 1) {
    const runtime3 = arguments[0];
    return (effect, ...args2) => f(runtime3, effect, ...args2);
  }
  return f.apply(this, arguments);
}, unsafeFork3, unsafeRunCallback, unsafeRunSync, AsyncFiberExceptionImpl, asyncFiberException = (fiber) => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 0;
  const error2 = new AsyncFiberExceptionImpl(fiber);
  Error.stackTraceLimit = limit;
  return error2;
}, isAsyncFiberException = (u) => isTagged(u, "AsyncFiberException") && ("fiber" in u), FiberFailureId, FiberFailureCauseId, FiberFailureImpl, fiberFailure = (cause2) => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 0;
  const error2 = new FiberFailureImpl(cause2);
  Error.stackTraceLimit = limit;
  return error2;
}, isFiberFailure = (u) => hasProperty(u, FiberFailureId), fastPath = (effect) => {
  const op = effect;
  switch (op._op) {
    case "Failure":
    case "Success": {
      return op;
    }
    case "Left": {
      return exitFail(op.left);
    }
    case "Right": {
      return exitSucceed(op.right);
    }
    case "Some": {
      return exitSucceed(op.value);
    }
    case "None": {
      return exitFail(NoSuchElementException());
    }
  }
}, unsafeRunSyncExit, unsafeRunPromise, unsafeRunPromiseExit, make59 = (options) => new RuntimeImpl(options.context, options.runtimeFlags, options.fiberRefs), runtime3 = () => withFiberRuntime((state, status3) => succeed(new RuntimeImpl(state.getFiberRef(currentContext), status3.runtimeFlags, state.getFiberRefs()))), defaultRuntimeFlags, defaultRuntime, updateRuntimeFlags2, disableRuntimeFlag, enableRuntimeFlag, updateContext2, provideService4, updateFiberRefs2, setFiberRef, deleteFiberRef, unsafeRunEffect, unsafeForkEffect, unsafeRunPromiseEffect, unsafeRunPromiseExitEffect, unsafeRunSyncEffect, unsafeRunSyncExitEffect, asyncEffect = (register2) => suspend(() => {
  let cleanup = undefined;
  return flatMap12(deferredMake(), (deferred) => flatMap12(runtime3(), (runtime4) => uninterruptibleMask((restore) => zipRight2(fork2(restore(matchCauseEffect(register2((cb) => unsafeRunCallback(runtime4)(intoDeferred(cb, deferred))), {
    onFailure: (cause2) => deferredFailCause(deferred, cause2),
    onSuccess: (cleanup_) => {
      cleanup = cleanup_;
      return void_3;
    }
  }))), restore(onInterrupt(deferredAwait(deferred), () => cleanup ?? void_3))))));
});
var init_runtime = __esm(() => {
  init_Context();
  init_Equal();
  init_Exit();
  init_Fiber();
  init_FiberId();
  init_FiberRefs();
  init_Function();
  init_Inspectable();
  init_Option();
  init_Predicate();
  init_Scheduler();
  init_Scope();
  init_cause();
  init_core();
  init_executionStrategy();
  init_fiberRuntime();
  init_fiberScope();
  init_runtimeFlags();
  init_supervisor();
  unsafeFork3 = /* @__PURE__ */ makeDual((runtime3, self, options) => {
    const fiberId2 = unsafeMake3();
    const fiberRefUpdates = [[currentContext, [[fiberId2, runtime3.context]]]];
    if (options?.scheduler) {
      fiberRefUpdates.push([currentScheduler, [[fiberId2, options.scheduler]]]);
    }
    let fiberRefs4 = updateManyAs2(runtime3.fiberRefs, {
      entries: fiberRefUpdates,
      forkAs: fiberId2
    });
    if (options?.updateRefs) {
      fiberRefs4 = options.updateRefs(fiberRefs4, fiberId2);
    }
    const fiberRuntime = new FiberRuntime(fiberId2, fiberRefs4, runtime3.runtimeFlags);
    let effect = self;
    if (options?.scope) {
      effect = flatMap12(fork3(options.scope, sequential2), (closeableScope) => zipRight2(scopeAddFinalizer(closeableScope, fiberIdWith((id3) => equals(id3, fiberRuntime.id()) ? void_3 : interruptAsFiber(fiberRuntime, id3))), onExit(self, (exit3) => close(closeableScope, exit3))));
    }
    const supervisor = fiberRuntime.currentSupervisor;
    if (supervisor !== none8) {
      supervisor.onStart(runtime3.context, effect, none2(), fiberRuntime);
      fiberRuntime.addObserver((exit3) => supervisor.onEnd(exit3, fiberRuntime));
    }
    globalScope.add(runtime3.runtimeFlags, fiberRuntime);
    if (options?.immediate === false) {
      fiberRuntime.resume(effect);
    } else {
      fiberRuntime.start(effect);
    }
    return fiberRuntime;
  });
  unsafeRunCallback = /* @__PURE__ */ makeDual((runtime3, effect, options = {}) => {
    const fiberRuntime = unsafeFork3(runtime3, effect, options);
    if (options.onExit) {
      fiberRuntime.addObserver((exit3) => {
        options.onExit(exit3);
      });
    }
    return (id3, cancelOptions) => unsafeRunCallback(runtime3)(pipe(fiberRuntime, interruptAs(id3 ?? none4)), {
      ...cancelOptions,
      onExit: cancelOptions?.onExit ? (exit3) => cancelOptions.onExit(flatten9(exit3)) : undefined
    });
  });
  unsafeRunSync = /* @__PURE__ */ makeDual((runtime3, effect) => {
    const result2 = unsafeRunSyncExit(runtime3)(effect);
    if (result2._tag === "Failure") {
      throw fiberFailure(result2.effect_instruction_i0);
    }
    return result2.effect_instruction_i0;
  });
  AsyncFiberExceptionImpl = class AsyncFiberExceptionImpl extends Error {
    fiber;
    _tag = "AsyncFiberException";
    constructor(fiber) {
      super(`Fiber #${fiber.id().id} cannot be resolved synchronously. This is caused by using runSync on an effect that performs async work`);
      this.fiber = fiber;
      this.name = this._tag;
      this.stack = this.message;
    }
  };
  FiberFailureId = /* @__PURE__ */ Symbol.for("effect/Runtime/FiberFailure");
  FiberFailureCauseId = /* @__PURE__ */ Symbol.for("effect/Runtime/FiberFailure/Cause");
  FiberFailureImpl = class FiberFailureImpl extends Error {
    [FiberFailureId];
    [FiberFailureCauseId];
    constructor(cause2) {
      const head7 = prettyErrors(cause2)[0];
      super(head7?.message || "An error has occurred");
      this[FiberFailureId] = FiberFailureId;
      this[FiberFailureCauseId] = cause2;
      this.name = head7 ? `(FiberFailure) ${head7.name}` : "FiberFailure";
      if (head7?.stack) {
        this.stack = head7.stack;
      }
    }
    toJSON() {
      return {
        _id: "FiberFailure",
        cause: this[FiberFailureCauseId].toJSON()
      };
    }
    toString() {
      return "(FiberFailure) " + pretty(this[FiberFailureCauseId], {
        renderErrorCause: true
      });
    }
    [NodeInspectSymbol]() {
      return this.toString();
    }
  };
  unsafeRunSyncExit = /* @__PURE__ */ makeDual((runtime3, effect) => {
    const op = fastPath(effect);
    if (op) {
      return op;
    }
    const scheduler2 = new SyncScheduler;
    const fiberRuntime = unsafeFork3(runtime3)(effect, {
      scheduler: scheduler2
    });
    scheduler2.flush();
    const result2 = fiberRuntime.unsafePoll();
    if (result2) {
      return result2;
    }
    return exitDie(capture(asyncFiberException(fiberRuntime), currentSpanFromFiber(fiberRuntime)));
  });
  unsafeRunPromise = /* @__PURE__ */ makeDual((runtime3, effect, options) => unsafeRunPromiseExit(runtime3, effect, options).then((result2) => {
    switch (result2._tag) {
      case OP_SUCCESS: {
        return result2.effect_instruction_i0;
      }
      case OP_FAILURE: {
        throw fiberFailure(result2.effect_instruction_i0);
      }
    }
  }));
  unsafeRunPromiseExit = /* @__PURE__ */ makeDual((runtime3, effect, options) => new Promise((resolve) => {
    const op = fastPath(effect);
    if (op) {
      resolve(op);
    }
    const fiber = unsafeFork3(runtime3)(effect);
    fiber.addObserver((exit3) => {
      resolve(exit3);
    });
    if (options?.signal !== undefined) {
      if (options.signal.aborted) {
        fiber.unsafeInterruptAsFork(fiber.id());
      } else {
        options.signal.addEventListener("abort", () => {
          fiber.unsafeInterruptAsFork(fiber.id());
        }, {
          once: true
        });
      }
    }
  }));
  defaultRuntimeFlags = /* @__PURE__ */ make22(Interruption, CooperativeYielding, RuntimeMetrics);
  defaultRuntime = /* @__PURE__ */ make59({
    context: /* @__PURE__ */ empty6(),
    runtimeFlags: defaultRuntimeFlags,
    fiberRefs: /* @__PURE__ */ empty27()
  });
  updateRuntimeFlags2 = /* @__PURE__ */ dual(2, (self, f) => make59({
    context: self.context,
    runtimeFlags: f(self.runtimeFlags),
    fiberRefs: self.fiberRefs
  }));
  disableRuntimeFlag = /* @__PURE__ */ dual(2, (self, flag) => updateRuntimeFlags2(self, disable2(flag)));
  enableRuntimeFlag = /* @__PURE__ */ dual(2, (self, flag) => updateRuntimeFlags2(self, enable2(flag)));
  updateContext2 = /* @__PURE__ */ dual(2, (self, f) => make59({
    context: f(self.context),
    runtimeFlags: self.runtimeFlags,
    fiberRefs: self.fiberRefs
  }));
  provideService4 = /* @__PURE__ */ dual(3, (self, tag, service2) => updateContext2(self, add2(tag, service2)));
  updateFiberRefs2 = /* @__PURE__ */ dual(2, (self, f) => make59({
    context: self.context,
    runtimeFlags: self.runtimeFlags,
    fiberRefs: f(self.fiberRefs)
  }));
  setFiberRef = /* @__PURE__ */ dual(3, (self, fiberRef, value2) => updateFiberRefs2(self, updateAs2({
    fiberId: none4,
    fiberRef,
    value: value2
  })));
  deleteFiberRef = /* @__PURE__ */ dual(2, (self, fiberRef) => updateFiberRefs2(self, delete_2(fiberRef)));
  unsafeRunEffect = /* @__PURE__ */ unsafeRunCallback(defaultRuntime);
  unsafeForkEffect = /* @__PURE__ */ unsafeFork3(defaultRuntime);
  unsafeRunPromiseEffect = /* @__PURE__ */ unsafeRunPromise(defaultRuntime);
  unsafeRunPromiseExitEffect = /* @__PURE__ */ unsafeRunPromiseExit(defaultRuntime);
  unsafeRunSyncEffect = /* @__PURE__ */ unsafeRunSync(defaultRuntime);
  unsafeRunSyncExitEffect = /* @__PURE__ */ unsafeRunSyncExit(defaultRuntime);
});

// node_modules/effect/dist/esm/internal/synchronizedRef.js
var getAndUpdateEffect, getAndUpdateSomeEffect, modify10, modifyEffect, modifySomeEffect, updateEffect, updateAndGetEffect, updateSomeEffect;
var init_synchronizedRef = __esm(() => {
  init_Function();
  init_Option();
  init_core();
  getAndUpdateEffect = /* @__PURE__ */ dual(2, (self, f) => self.modifyEffect((value2) => map14(f(value2), (result2) => [value2, result2])));
  getAndUpdateSomeEffect = /* @__PURE__ */ dual(2, (self, pf) => self.modifyEffect((value2) => {
    const result2 = pf(value2);
    switch (result2._tag) {
      case "None": {
        return succeed([value2, value2]);
      }
      case "Some": {
        return map14(result2.value, (newValue) => [value2, newValue]);
      }
    }
  }));
  modify10 = /* @__PURE__ */ dual(2, (self, f) => self.modify(f));
  modifyEffect = /* @__PURE__ */ dual(2, (self, f) => self.modifyEffect(f));
  modifySomeEffect = /* @__PURE__ */ dual(3, (self, fallback, pf) => self.modifyEffect((value2) => pipe(pf(value2), getOrElse2(() => succeed([fallback, value2])))));
  updateEffect = /* @__PURE__ */ dual(2, (self, f) => self.modifyEffect((value2) => map14(f(value2), (result2) => [undefined, result2])));
  updateAndGetEffect = /* @__PURE__ */ dual(2, (self, f) => self.modifyEffect((value2) => map14(f(value2), (result2) => [result2, result2])));
  updateSomeEffect = /* @__PURE__ */ dual(2, (self, pf) => self.modifyEffect((value2) => {
    const result2 = pf(value2);
    switch (result2._tag) {
      case "None": {
        return succeed([undefined, value2]);
      }
      case "Some": {
        return map14(result2.value, (a) => [undefined, a]);
      }
    }
  }));
});

// node_modules/effect/dist/esm/internal/layer.js
function fromEffectContext(effect) {
  const fromEffect5 = Object.create(proto3);
  fromEffect5._op_layer = OP_FROM_EFFECT;
  fromEffect5.effect = effect;
  return fromEffect5;
}
var LayerSymbolKey = "effect/Layer", LayerTypeId, layerVariance, proto3, MemoMapTypeIdKey = "effect/Layer/MemoMap", MemoMapTypeId, CurrentMemoMap, isLayer = (u) => hasProperty(u, LayerTypeId), isFresh = (self) => {
  return self._op_layer === OP_FRESH;
}, MemoMapImpl, makeMemoMap, unsafeMakeMemoMap = () => new MemoMapImpl(unsafeMakeSynchronized(new Map)), build = (self) => scopeWith((scope3) => buildWithScope(self, scope3)), buildWithScope, buildWithMemoMap, makeBuilder = (self, scope3, inMemoMap = false) => {
  const op = self;
  switch (op._op_layer) {
    case "Locally": {
      return sync(() => (memoMap) => op.f(memoMap.getOrElseMemoize(op.self, scope3)));
    }
    case "ExtendScope": {
      return sync(() => (memoMap) => scopeWith((scope4) => memoMap.getOrElseMemoize(op.layer, scope4)));
    }
    case "Fold": {
      return sync(() => (memoMap) => pipe(memoMap.getOrElseMemoize(op.layer, scope3), matchCauseEffect({
        onFailure: (cause2) => memoMap.getOrElseMemoize(op.failureK(cause2), scope3),
        onSuccess: (value2) => memoMap.getOrElseMemoize(op.successK(value2), scope3)
      })));
    }
    case "Fresh": {
      return sync(() => (_) => pipe(op.layer, buildWithScope(scope3)));
    }
    case "FromEffect": {
      return inMemoMap ? sync(() => (_) => op.effect) : sync(() => (memoMap) => memoMap.getOrElseMemoize(self, scope3));
    }
    case "Provide": {
      return sync(() => (memoMap) => pipe(memoMap.getOrElseMemoize(op.first, scope3), flatMap12((env) => pipe(memoMap.getOrElseMemoize(op.second, scope3), provideContext(env)))));
    }
    case "Scoped": {
      return inMemoMap ? sync(() => (_) => scopeExtend(op.effect, scope3)) : sync(() => (memoMap) => memoMap.getOrElseMemoize(self, scope3));
    }
    case "Suspend": {
      return sync(() => (memoMap) => memoMap.getOrElseMemoize(op.evaluate(), scope3));
    }
    case "ProvideMerge": {
      return sync(() => (memoMap) => pipe(memoMap.getOrElseMemoize(op.first, scope3), zipWith6(memoMap.getOrElseMemoize(op.second, scope3), op.zipK)));
    }
    case "ZipWith": {
      return sync(() => (memoMap) => pipe(memoMap.getOrElseMemoize(op.first, scope3), zipWithOptions(memoMap.getOrElseMemoize(op.second, scope3), op.zipK, {
        concurrent: true
      })));
    }
  }
}, catchAll3, catchAllCause3, die7 = (defect) => failCause8(die6(defect)), dieSync3 = (evaluate2) => failCauseSync4(() => die6(evaluate2())), discard = (self) => map25(self, () => empty6()), context4 = () => fromEffectContext(context2()), extendScope = (self) => {
  const extendScope2 = Object.create(proto3);
  extendScope2._op_layer = OP_EXTEND_SCOPE;
  extendScope2.layer = self;
  return extendScope2;
}, fail10 = (error2) => failCause8(fail8(error2)), failSync4 = (evaluate2) => failCauseSync4(() => fail8(evaluate2())), failCause8 = (cause2) => fromEffectContext(failCause(cause2)), failCauseSync4 = (evaluate2) => fromEffectContext(failCauseSync(evaluate2)), flatMap17, flatten12, fresh = (self) => {
  const fresh2 = Object.create(proto3);
  fresh2._op_layer = OP_FRESH;
  fresh2.layer = self;
  return fresh2;
}, fromEffect4, fromEffectDiscard = (effect) => fromEffectContext(map14(effect, () => empty6())), fiberRefLocally2, locallyEffect, fiberRefLocallyWith2, fiberRefLocallyScoped2 = (self, value2) => scopedDiscard(fiberRefLocallyScoped(self, value2)), fiberRefLocallyScopedWith2 = (self, value2) => scopedDiscard(fiberRefLocallyScopedWith(self, value2)), fromFunction2 = (tagA, tagB, f) => fromEffectContext(map14(tagA, (a) => make8(tagB, f(a)))), launch = (self) => scopedEffect(zipRight2(scopeWith((scope3) => pipe(self, buildWithScope(scope3))), never)), map25, mapError4, matchCause3, match19, memoize2 = (self) => scopeWith((scope3) => map14(memoize(buildWithScope(self, scope3)), fromEffectContext)), merge6, mergeAll4 = (...layers) => {
  let final = layers[0];
  for (let i2 = 1;i2 < layers.length; i2++) {
    final = merge6(final, layers[i2]);
  }
  return final;
}, orDie3 = (self) => catchAll3(self, (defect) => die7(defect)), orElse7, passthrough2 = (self) => merge6(context4(), self), project, retry2, retryLoop = (self, schedule, stateTag, state) => {
  return pipe(self, catchAll3((error2) => pipe(retryUpdate(schedule, stateTag, error2, state), flatMap17((env) => fresh(retryLoop(self, schedule, stateTag, pipe(env, get5(stateTag)).state))))));
}, retryUpdate = (schedule, stateTag, error2, state) => {
  return fromEffect4(stateTag, pipe(currentTimeMillis2, flatMap12((now2) => pipe(schedule.step(now2, error2, state), flatMap12(([state2, _, decision]) => isDone5(decision) ? fail2(error2) : pipe(sleep2(millis(start2(decision.intervals) - now2)), as3({
    state: state2
  })))))));
}, scoped3, scopedDiscard = (effect) => scopedContext(pipe(effect, as3(empty6()))), scopedContext = (effect) => {
  const scoped4 = Object.create(proto3);
  scoped4._op_layer = OP_SCOPED;
  scoped4.effect = effect;
  return scoped4;
}, scope3, service2 = (tag) => fromEffect4(tag, tag), succeed11, succeedContext = (context5) => {
  return fromEffectContext(succeed(context5));
}, empty41, suspend3 = (evaluate2) => {
  const suspend4 = Object.create(proto3);
  suspend4._op_layer = OP_SUSPEND;
  suspend4.evaluate = evaluate2;
  return suspend4;
}, sync7, syncContext = (evaluate2) => {
  return fromEffectContext(sync(evaluate2));
}, tap4, tapError3, tapErrorCause3, toRuntime = (self) => pipe(scopeWith((scope4) => buildWithScope(self, scope4)), flatMap12((context5) => pipe(runtime3(), provideContext(context5)))), toRuntimeWithMemoMap, provide, provideMerge, zipWith11, unwrapEffect = (self) => {
  const tag = GenericTag("effect/Layer/unwrapEffect/Layer.Layer<R1, E1, A>");
  return flatMap17(fromEffect4(tag, self), (context5) => get5(context5, tag));
}, unwrapScoped = (self) => {
  const tag = GenericTag("effect/Layer/unwrapScoped/Layer.Layer<R1, E1, A>");
  return flatMap17(scoped3(tag, self), (context5) => get5(context5, tag));
}, annotateLogs2, annotateSpans2, withSpan2 = function() {
  const dataFirst = typeof arguments[0] !== "string";
  const name = dataFirst ? arguments[1] : arguments[0];
  const options = addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]);
  if (dataFirst) {
    const self = arguments[0];
    return unwrapScoped(map14(options?.onEnd ? tap2(makeSpanScoped(name, options), (span2) => addFinalizer2((exit3) => options.onEnd(span2, exit3))) : makeSpanScoped(name, options), (span2) => withParentSpan2(self, span2)));
  }
  return (self) => unwrapScoped(map14(options?.onEnd ? tap2(makeSpanScoped(name, options), (span2) => addFinalizer2((exit3) => options.onEnd(span2, exit3))) : makeSpanScoped(name, options), (span2) => withParentSpan2(self, span2)));
}, withParentSpan2, provideSomeLayer, provideSomeRuntime, effect_provide;
var init_layer = __esm(() => {
  init_Cause();
  init_Clock();
  init_Context();
  init_Duration();
  init_FiberRefsPatch();
  init_Function();
  init_HashMap();
  init_Predicate();
  init_ScheduleDecision();
  init_ScheduleIntervals();
  init_Scope();
  init_core_effect();
  init_core();
  init_circular();
  init_fiberRuntime();
  init_circular2();
  init_ref();
  init_runtime();
  init_runtimeFlags();
  init_synchronizedRef();
  init_tracer();
  LayerTypeId = /* @__PURE__ */ Symbol.for(LayerSymbolKey);
  layerVariance = {
    _RIn: (_) => _,
    _E: (_) => _,
    _ROut: (_) => _
  };
  proto3 = {
    [LayerTypeId]: layerVariance,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  MemoMapTypeId = /* @__PURE__ */ Symbol.for(MemoMapTypeIdKey);
  CurrentMemoMap = /* @__PURE__ */ Reference2()("effect/Layer/CurrentMemoMap", {
    defaultValue: () => unsafeMakeMemoMap()
  });
  MemoMapImpl = class MemoMapImpl {
    ref;
    [MemoMapTypeId];
    constructor(ref) {
      this.ref = ref;
      this[MemoMapTypeId] = MemoMapTypeId;
    }
    getOrElseMemoize(layer, scope3) {
      return pipe(modifyEffect(this.ref, (map25) => {
        const inMap = map25.get(layer);
        if (inMap !== undefined) {
          const [acquire, release] = inMap;
          const cached3 = pipe(acquire, flatMap12(([patch13, b]) => pipe(patchFiberRefs(patch13), as3(b))), onExit(exitMatch({
            onFailure: () => void_3,
            onSuccess: () => scopeAddFinalizerExit(scope3, release)
          })));
          return succeed([cached3, map25]);
        }
        return pipe(make36(0), flatMap12((observers) => pipe(deferredMake(), flatMap12((deferred) => pipe(make36(() => void_3), map14((finalizerRef) => {
          const resource = uninterruptibleMask((restore) => pipe(scopeMake2(), flatMap12((innerScope) => pipe(restore(flatMap12(makeBuilder(layer, innerScope, true), (f) => diffFiberRefs(f(this)))), exit, flatMap12((exit3) => {
            switch (exit3._tag) {
              case OP_FAILURE: {
                return pipe(deferredFailCause(deferred, exit3.effect_instruction_i0), zipRight2(scopeClose(innerScope, exit3)), zipRight2(failCause(exit3.effect_instruction_i0)));
              }
              case OP_SUCCESS: {
                return pipe(set6(finalizerRef, (exit4) => pipe(scopeClose(innerScope, exit4), whenEffect(modify7(observers, (n) => [n === 1, n - 1])), asVoid2)), zipRight2(update3(observers, (n) => n + 1)), zipRight2(scopeAddFinalizerExit(scope3, (exit4) => pipe(sync(() => map25.delete(layer)), zipRight2(get13(finalizerRef)), flatMap12((finalizer) => finalizer(exit4))))), zipRight2(deferredSucceed(deferred, exit3.effect_instruction_i0)), as3(exit3.effect_instruction_i0[1]));
              }
            }
          })))));
          const memoized = [pipe(deferredAwait(deferred), onExit(exitMatchEffect({
            onFailure: () => void_3,
            onSuccess: () => update3(observers, (n) => n + 1)
          }))), (exit3) => pipe(get13(finalizerRef), flatMap12((finalizer) => finalizer(exit3)))];
          return [resource, isFresh(layer) ? map25 : map25.set(layer, memoized)];
        }))))));
      }), flatten8);
    }
  };
  makeMemoMap = /* @__PURE__ */ suspend(() => map14(makeSynchronized(new Map), (ref) => new MemoMapImpl(ref)));
  buildWithScope = /* @__PURE__ */ dual(2, (self, scope3) => flatMap12(makeMemoMap, (memoMap) => buildWithMemoMap(self, memoMap, scope3)));
  buildWithMemoMap = /* @__PURE__ */ dual(3, (self, memoMap, scope3) => flatMap12(makeBuilder(self, scope3), (run2) => provideService(run2(memoMap), CurrentMemoMap, memoMap)));
  catchAll3 = /* @__PURE__ */ dual(2, (self, onFailure) => match19(self, {
    onFailure,
    onSuccess: succeedContext
  }));
  catchAllCause3 = /* @__PURE__ */ dual(2, (self, onFailure) => matchCause3(self, {
    onFailure,
    onSuccess: succeedContext
  }));
  flatMap17 = /* @__PURE__ */ dual(2, (self, f) => match19(self, {
    onFailure: fail10,
    onSuccess: f
  }));
  flatten12 = /* @__PURE__ */ dual(2, (self, tag) => flatMap17(self, get5(tag)));
  fromEffect4 = /* @__PURE__ */ dual(2, (a, b) => {
    const tagFirst = isTag2(a);
    const tag = tagFirst ? a : b;
    const effect = tagFirst ? b : a;
    return fromEffectContext(map14(effect, (service2) => make8(tag, service2)));
  });
  fiberRefLocally2 = /* @__PURE__ */ dual(3, (self, ref, value2) => locallyEffect(self, fiberRefLocally(ref, value2)));
  locallyEffect = /* @__PURE__ */ dual(2, (self, f) => {
    const locally2 = Object.create(proto3);
    locally2._op_layer = "Locally";
    locally2.self = self;
    locally2.f = f;
    return locally2;
  });
  fiberRefLocallyWith2 = /* @__PURE__ */ dual(3, (self, ref, value2) => locallyEffect(self, fiberRefLocallyWith(ref, value2)));
  map25 = /* @__PURE__ */ dual(2, (self, f) => flatMap17(self, (context5) => succeedContext(f(context5))));
  mapError4 = /* @__PURE__ */ dual(2, (self, f) => catchAll3(self, (error2) => failSync4(() => f(error2))));
  matchCause3 = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => {
    const fold = Object.create(proto3);
    fold._op_layer = OP_FOLD;
    fold.layer = self;
    fold.failureK = onFailure;
    fold.successK = onSuccess;
    return fold;
  });
  match19 = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => matchCause3(self, {
    onFailure: (cause2) => {
      const failureOrCause3 = failureOrCause2(cause2);
      switch (failureOrCause3._tag) {
        case "Left": {
          return onFailure(failureOrCause3.left);
        }
        case "Right": {
          return failCause8(failureOrCause3.right);
        }
      }
    },
    onSuccess
  }));
  merge6 = /* @__PURE__ */ dual(2, (self, that) => zipWith11(self, that, (a, b) => merge3(a, b)));
  orElse7 = /* @__PURE__ */ dual(2, (self, that) => catchAll3(self, that));
  project = /* @__PURE__ */ dual(4, (self, tagA, tagB, f) => map25(self, (context5) => make8(tagB, f(unsafeGet3(context5, tagA)))));
  retry2 = /* @__PURE__ */ dual(2, (self, schedule) => suspend3(() => {
    const stateTag = GenericTag("effect/Layer/retry/{ state: unknown }");
    return pipe(succeed11(stateTag, {
      state: schedule.initial
    }), flatMap17((env) => retryLoop(self, schedule, stateTag, pipe(env, get5(stateTag)).state)));
  }));
  scoped3 = /* @__PURE__ */ dual(2, (a, b) => {
    const tagFirst = isTag2(a);
    const tag = tagFirst ? a : b;
    const effect = tagFirst ? b : a;
    return scopedContext(map14(effect, (service2) => make8(tag, service2)));
  });
  scope3 = /* @__PURE__ */ scopedContext(/* @__PURE__ */ map14(/* @__PURE__ */ acquireRelease2(/* @__PURE__ */ scopeMake2(), (scope4, exit3) => scope4.close(exit3)), (scope4) => make8(Scope, scope4)));
  succeed11 = /* @__PURE__ */ dual(2, (a, b) => {
    const tagFirst = isTag2(a);
    const tag = tagFirst ? a : b;
    const resource = tagFirst ? b : a;
    return fromEffectContext(succeed(make8(tag, resource)));
  });
  empty41 = /* @__PURE__ */ succeedContext(/* @__PURE__ */ empty6());
  sync7 = /* @__PURE__ */ dual(2, (a, b) => {
    const tagFirst = isTag2(a);
    const tag = tagFirst ? a : b;
    const evaluate2 = tagFirst ? b : a;
    return fromEffectContext(sync(() => make8(tag, evaluate2())));
  });
  tap4 = /* @__PURE__ */ dual(2, (self, f) => flatMap17(self, (context5) => fromEffectContext(as3(f(context5), context5))));
  tapError3 = /* @__PURE__ */ dual(2, (self, f) => catchAll3(self, (e) => fromEffectContext(flatMap12(f(e), () => fail2(e)))));
  tapErrorCause3 = /* @__PURE__ */ dual(2, (self, f) => catchAllCause3(self, (cause2) => fromEffectContext(flatMap12(f(cause2), () => failCause(cause2)))));
  toRuntimeWithMemoMap = /* @__PURE__ */ dual(2, (self, memoMap) => flatMap12(scopeWith((scope4) => buildWithMemoMap(self, memoMap, scope4)), (context5) => pipe(runtime3(), provideContext(context5))));
  provide = /* @__PURE__ */ dual(2, (self, that) => suspend3(() => {
    const provideTo = Object.create(proto3);
    provideTo._op_layer = OP_PROVIDE;
    provideTo.first = Object.create(proto3, {
      _op_layer: {
        value: OP_PROVIDE_MERGE,
        enumerable: true
      },
      first: {
        value: context4(),
        enumerable: true
      },
      second: {
        value: Array.isArray(that) ? mergeAll4(...that) : that
      },
      zipK: {
        value: (a, b) => pipe(a, merge3(b))
      }
    });
    provideTo.second = self;
    return provideTo;
  }));
  provideMerge = /* @__PURE__ */ dual(2, (that, self) => {
    const zipWith11 = Object.create(proto3);
    zipWith11._op_layer = OP_PROVIDE_MERGE;
    zipWith11.first = self;
    zipWith11.second = provide(that, self);
    zipWith11.zipK = (a, b) => {
      return pipe(a, merge3(b));
    };
    return zipWith11;
  });
  zipWith11 = /* @__PURE__ */ dual(3, (self, that, f) => suspend3(() => {
    const zipWith12 = Object.create(proto3);
    zipWith12._op_layer = OP_ZIP_WITH2;
    zipWith12.first = self;
    zipWith12.second = that;
    zipWith12.zipK = f;
    return zipWith12;
  }));
  annotateLogs2 = /* @__PURE__ */ dual((args2) => isLayer(args2[0]), function() {
    const args2 = arguments;
    return fiberRefLocallyWith2(args2[0], currentLogAnnotations, typeof args2[1] === "string" ? set4(args2[1], args2[2]) : (annotations2) => Object.entries(args2[1]).reduce((acc, [key, value2]) => set4(acc, key, value2), annotations2));
  });
  annotateSpans2 = /* @__PURE__ */ dual((args2) => isLayer(args2[0]), function() {
    const args2 = arguments;
    return fiberRefLocallyWith2(args2[0], currentTracerSpanAnnotations, typeof args2[1] === "string" ? set4(args2[1], args2[2]) : (annotations2) => Object.entries(args2[1]).reduce((acc, [key, value2]) => set4(acc, key, value2), annotations2));
  });
  withParentSpan2 = /* @__PURE__ */ dual(2, (self, span2) => provide(self, succeedContext(make8(spanTag, span2))));
  provideSomeLayer = /* @__PURE__ */ dual(2, (self, layer) => scopedWith((scope4) => flatMap12(buildWithScope(layer, scope4), (context5) => provideSomeContext(self, context5))));
  provideSomeRuntime = /* @__PURE__ */ dual(2, (self, rt) => {
    const patchRefs = diff9(defaultRuntime.fiberRefs, rt.fiberRefs);
    const patchFlags = diff7(defaultRuntime.runtimeFlags, rt.runtimeFlags);
    return uninterruptibleMask((restore) => withFiberRuntime((fiber) => {
      const oldContext = fiber.getFiberRef(currentContext);
      const oldRefs = fiber.getFiberRefs();
      const newRefs = patch10(fiber.id(), oldRefs)(patchRefs);
      const oldFlags = fiber.currentRuntimeFlags;
      const newFlags = patch7(patchFlags)(oldFlags);
      const rollbackRefs = diff9(newRefs, oldRefs);
      const rollbackFlags = diff7(newFlags, oldFlags);
      fiber.setFiberRefs(newRefs);
      fiber.currentRuntimeFlags = newFlags;
      return ensuring2(provideSomeContext(restore(self), merge3(oldContext, rt.context)), withFiberRuntime((fiber2) => {
        fiber2.setFiberRefs(patch10(fiber2.id(), fiber2.getFiberRefs())(rollbackRefs));
        fiber2.currentRuntimeFlags = patch7(rollbackFlags)(fiber2.currentRuntimeFlags);
        return void_3;
      }));
    }));
  });
  effect_provide = /* @__PURE__ */ dual(2, (self, source) => {
    if (Array.isArray(source)) {
      return provideSomeLayer(self, mergeAll4(...source));
    } else if (isLayer(source)) {
      return provideSomeLayer(self, source);
    } else if (isContext2(source)) {
      return provideSomeContext(self, source);
    } else if (TypeId21 in source) {
      return flatMap12(source.runtimeEffect, (rt) => provideSomeRuntime(self, rt));
    } else {
      return provideSomeRuntime(self, source);
    }
  });
});

// node_modules/effect/dist/esm/internal/console.js
var console2, consoleWith = (f) => fiberRefGetWith(currentServices, (services) => f(get5(services, consoleTag))), withConsole, withConsoleScoped = (console3) => fiberRefLocallyScopedWith(currentServices, add2(consoleTag, console3)), setConsole = (console3) => scopedDiscard(fiberRefLocallyScopedWith(currentServices, add2(consoleTag, console3))), assert2 = (condition, ...args2) => consoleWith((_) => _.assert(condition, ...args2)), clear2, count2 = (label) => consoleWith((_) => _.count(label)), countReset = (label) => consoleWith((_) => _.countReset(label)), debug2 = (...args2) => consoleWith((_) => _.debug(...args2)), dir = (item, options) => consoleWith((_) => _.dir(item, options)), dirxml = (...args2) => consoleWith((_) => _.dirxml(...args2)), error2 = (...args2) => consoleWith((_) => _.error(...args2)), group3 = (options) => consoleWith((_) => acquireRelease2(_.group(options), () => _.groupEnd)), info = (...args2) => consoleWith((_) => _.info(...args2)), log2 = (...args2) => consoleWith((_) => _.log(...args2)), table = (tabularData, properties) => consoleWith((_) => _.table(tabularData, properties)), time = (label) => consoleWith((_) => acquireRelease2(_.time(label), () => _.timeEnd(label))), timeLog = (label, ...args2) => consoleWith((_) => _.timeLog(label, ...args2)), trace = (...args2) => consoleWith((_) => _.trace(...args2)), warn = (...args2) => consoleWith((_) => _.warn(...args2)), withGroup, withTime;
var init_console2 = __esm(() => {
  init_Context();
  init_Function();
  init_core();
  init_defaultServices();
  init_console();
  init_fiberRuntime();
  init_layer();
  console2 = /* @__PURE__ */ map14(/* @__PURE__ */ fiberRefGet(currentServices), /* @__PURE__ */ get5(consoleTag));
  withConsole = /* @__PURE__ */ dual(2, (effect, value2) => fiberRefLocallyWith(effect, currentServices, add2(consoleTag, value2)));
  clear2 = /* @__PURE__ */ consoleWith((_) => _.clear);
  withGroup = /* @__PURE__ */ dual((args2) => isEffect(args2[0]), (self, options) => consoleWith((_) => acquireUseRelease(_.group(options), () => self, () => _.groupEnd)));
  withTime = /* @__PURE__ */ dual((args2) => isEffect(args2[0]), (self, label) => consoleWith((_) => acquireUseRelease(_.time(label), () => self, () => _.timeEnd(label))));
});

// node_modules/effect/dist/esm/internal/query.js
var currentCache, currentCacheEnabled, fromRequest = (request, dataSource) => flatMap12(isEffect(dataSource) ? dataSource : succeed(dataSource), (ds) => fiberIdWith((id3) => {
  const proxy = new Proxy(request, {});
  return fiberRefGetWith(currentCacheEnabled, (cacheEnabled) => {
    if (cacheEnabled) {
      const cached3 = fiberRefGetWith(currentCache, (cache) => flatMap12(cache.getEither(proxy), (orNew) => {
        switch (orNew._tag) {
          case "Left": {
            if (orNew.left.listeners.interrupted) {
              return flatMap12(cache.invalidateWhen(proxy, (entry) => entry.handle === orNew.left.handle), () => cached3);
            }
            orNew.left.listeners.increment();
            return uninterruptibleMask((restore) => flatMap12(exit(blocked(empty21, restore(deferredAwait(orNew.left.handle)))), (exit3) => {
              orNew.left.listeners.decrement();
              return exit3;
            }));
          }
          case "Right": {
            orNew.right.listeners.increment();
            return uninterruptibleMask((restore) => flatMap12(exit(blocked(single(ds, makeEntry({
              request: proxy,
              result: orNew.right.handle,
              listeners: orNew.right.listeners,
              ownerId: id3,
              state: {
                completed: false
              }
            })), restore(deferredAwait(orNew.right.handle)))), () => {
              orNew.right.listeners.decrement();
              return deferredAwait(orNew.right.handle);
            }));
          }
        }
      }));
      return cached3;
    }
    const listeners = new Listeners;
    listeners.increment();
    return flatMap12(deferredMake(), (ref) => ensuring2(blocked(single(ds, makeEntry({
      request: proxy,
      result: ref,
      listeners,
      ownerId: id3,
      state: {
        completed: false
      }
    })), deferredAwait(ref)), sync(() => listeners.decrement())));
  });
})), cacheRequest = (request, result2) => {
  return fiberRefGetWith(currentCacheEnabled, (cacheEnabled) => {
    if (cacheEnabled) {
      return fiberRefGetWith(currentCache, (cache) => flatMap12(cache.getEither(request), (orNew) => {
        switch (orNew._tag) {
          case "Left": {
            return void_3;
          }
          case "Right": {
            return deferredComplete(orNew.right.handle, result2);
          }
        }
      }));
    }
    return void_3;
  });
}, withRequestCaching, withRequestCache;
var init_query = __esm(() => {
  init_Duration();
  init_Function();
  init_GlobalValue();
  init_blockedRequests();
  init_cache();
  init_core();
  init_fiberRuntime();
  init_request();
  currentCache = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentCache"), () => fiberRefUnsafeMake(unsafeMakeWith(65536, () => map14(deferredMake(), (handle) => ({
    listeners: new Listeners,
    handle
  })), () => seconds(60))));
  currentCacheEnabled = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/FiberRef/currentCacheEnabled"), () => fiberRefUnsafeMake(false));
  withRequestCaching = /* @__PURE__ */ dual(2, (self, strategy) => fiberRefLocally(self, currentCacheEnabled, strategy));
  withRequestCache = /* @__PURE__ */ dual(2, (self, cache) => fiberRefLocally(self, currentCache, cache));
});

// node_modules/effect/dist/esm/Request.js
var exports_Request = {};
__export(exports_Request, {
  tagged: () => tagged5,
  succeed: () => succeed12,
  of: () => of6,
  makeEntry: () => makeEntry2,
  makeCache: () => makeCache,
  isRequest: () => isRequest2,
  isEntry: () => isEntry2,
  interruptWhenPossible: () => interruptWhenPossible2,
  failCause: () => failCause9,
  fail: () => fail11,
  completeEffect: () => completeEffect2,
  complete: () => complete4,
  TaggedClass: () => TaggedClass3,
  RequestTypeId: () => RequestTypeId2,
  EntryTypeId: () => EntryTypeId2,
  Class: () => Class5
});
var RequestTypeId2, isRequest2, of6, tagged5, Class5, TaggedClass3, complete4, interruptWhenPossible2, completeEffect2, fail11, failCause9, succeed12, makeCache = (options) => make49({
  ...options,
  lookup: () => map14(deferredMake(), (handle) => ({
    listeners: new Listeners,
    handle
  }))
}), EntryTypeId2, isEntry2, makeEntry2;
var init_Request = __esm(() => {
  init_blockedRequests();
  init_cache();
  init_core();
  init_fiberRuntime();
  init_request();
  RequestTypeId2 = RequestTypeId;
  isRequest2 = isRequest;
  of6 = of5;
  tagged5 = tagged3;
  Class5 = Class3;
  TaggedClass3 = TaggedClass;
  complete4 = complete2;
  interruptWhenPossible2 = interruptWhenPossible;
  completeEffect2 = completeEffect;
  fail11 = fail7;
  failCause9 = failCause6;
  succeed12 = succeed8;
  EntryTypeId2 = /* @__PURE__ */ Symbol.for("effect/RequestBlock.Entry");
  isEntry2 = isEntry;
  makeEntry2 = makeEntry;
});

// node_modules/effect/dist/esm/Effect.js
var exports_Effect = {};
__export(exports_Effect, {
  zipWith: () => zipWith12,
  zipRight: () => zipRight7,
  zipLeft: () => zipLeft7,
  zip: () => zip12,
  yieldNow: () => yieldNow4,
  withUnhandledErrorLogLevel: () => withUnhandledErrorLogLevel2,
  withTracerTiming: () => withTracerTiming2,
  withTracerScoped: () => withTracerScoped2,
  withTracerEnabled: () => withTracerEnabled2,
  withTracer: () => withTracer2,
  withSpanScoped: () => withSpanScoped2,
  withSpan: () => withSpan3,
  withSchedulingPriority: () => withSchedulingPriority2,
  withScheduler: () => withScheduler2,
  withRuntimeFlagsPatchScoped: () => withRuntimeFlagsPatchScoped,
  withRuntimeFlagsPatch: () => withRuntimeFlagsPatch,
  withRequestCaching: () => withRequestCaching2,
  withRequestCache: () => withRequestCache2,
  withRequestBatching: () => withRequestBatching2,
  withRandomScoped: () => withRandomScoped2,
  withRandom: () => withRandom2,
  withParentSpan: () => withParentSpan3,
  withMetric: () => withMetric2,
  withMaxOpsBeforeYield: () => withMaxOpsBeforeYield2,
  withLogSpan: () => withLogSpan2,
  withFiberRuntime: () => withFiberRuntime2,
  withEarlyRelease: () => withEarlyRelease2,
  withConsoleScoped: () => withConsoleScoped2,
  withConsole: () => withConsole2,
  withConfigProviderScoped: () => withConfigProviderScoped2,
  withConfigProvider: () => withConfigProvider2,
  withConcurrency: () => withConcurrency3,
  withClockScoped: () => withClockScoped2,
  withClock: () => withClock2,
  whileLoop: () => whileLoop3,
  whenRef: () => whenRef2,
  whenLogLevel: () => whenLogLevel2,
  whenFiberRef: () => whenFiberRef2,
  whenEffect: () => whenEffect2,
  when: () => when3,
  void: () => _void,
  validateWith: () => validateWith2,
  validateFirst: () => validateFirst2,
  validateAll: () => validateAll2,
  validate: () => validate2,
  using: () => using2,
  useSpan: () => useSpan2,
  updateService: () => updateService3,
  updateFiberRefs: () => updateFiberRefs3,
  unsandbox: () => unsandbox2,
  unsafeMakeSemaphore: () => unsafeMakeSemaphore2,
  unsafeMakeLatch: () => unsafeMakeLatch2,
  unlessEffect: () => unlessEffect2,
  unless: () => unless2,
  uninterruptibleMask: () => uninterruptibleMask3,
  uninterruptible: () => uninterruptible3,
  tryPromise: () => tryPromise3,
  tryMapPromise: () => tryMapPromise2,
  tryMap: () => tryMap2,
  try: () => try_4,
  transposeOption: () => transposeOption2,
  transposeMapOption: () => transposeMapOption,
  transplant: () => transplant2,
  tracerWith: () => tracerWith4,
  tracer: () => tracer2,
  timeoutTo: () => timeoutTo2,
  timeoutOption: () => timeoutOption3,
  timeoutFailCause: () => timeoutFailCause2,
  timeoutFail: () => timeoutFail2,
  timeout: () => timeout3,
  timedWith: () => timedWith2,
  timed: () => timed2,
  tapErrorTag: () => tapErrorTag2,
  tapErrorCause: () => tapErrorCause4,
  tapError: () => tapError4,
  tapDefect: () => tapDefect3,
  tapBoth: () => tapBoth2,
  tap: () => tap5,
  takeWhile: () => takeWhile5,
  takeUntil: () => takeUntil2,
  tagMetricsScoped: () => tagMetricsScoped2,
  tagMetrics: () => tagMetrics2,
  sync: () => sync8,
  suspend: () => suspend4,
  supervised: () => supervised2,
  summarized: () => summarized2,
  succeedSome: () => succeedSome3,
  succeedNone: () => succeedNone3,
  succeed: () => succeed13,
  step: () => step3,
  spanLinks: () => spanLinks2,
  spanAnnotations: () => spanAnnotations2,
  sleep: () => sleep5,
  setFiberRefs: () => setFiberRefs2,
  serviceOptional: () => serviceOptional2,
  serviceOption: () => serviceOption3,
  serviceMembers: () => serviceMembers2,
  serviceFunctions: () => serviceFunctions2,
  serviceFunctionEffect: () => serviceFunctionEffect2,
  serviceFunction: () => serviceFunction2,
  serviceConstants: () => serviceConstants2,
  sequentialFinalizers: () => sequentialFinalizers2,
  scopedWith: () => scopedWith2,
  scoped: () => scoped4,
  scopeWith: () => scopeWith2,
  scope: () => scope4,
  scheduleFrom: () => scheduleFrom,
  scheduleForked: () => scheduleForked2,
  schedule: () => schedule,
  sandbox: () => sandbox3,
  runtime: () => runtime4,
  runSyncExit: () => runSyncExit2,
  runSync: () => runSync2,
  runRequestBlock: () => runRequestBlock2,
  runPromiseExit: () => runPromiseExit2,
  runPromise: () => runPromise2,
  runFork: () => runFork2,
  runCallback: () => runCallback,
  retryOrElse: () => retryOrElse,
  retry: () => retry3,
  request: () => request,
  replicateEffect: () => replicateEffect3,
  replicate: () => replicate5,
  repeatOrElse: () => repeatOrElse,
  repeatN: () => repeatN2,
  repeat: () => repeat3,
  reduceWhile: () => reduceWhile2,
  reduceRight: () => reduceRight5,
  reduceEffect: () => reduceEffect3,
  reduce: () => reduce17,
  randomWith: () => randomWith3,
  random: () => random3,
  raceWith: () => raceWith2,
  raceFirst: () => raceFirst3,
  raceAll: () => raceAll3,
  race: () => race3,
  provideServiceEffect: () => provideServiceEffect3,
  provideService: () => provideService5,
  provide: () => provide2,
  promise: () => promise3,
  patchRuntimeFlags: () => patchRuntimeFlags,
  patchFiberRefs: () => patchFiberRefs2,
  partition: () => partition9,
  parallelFinalizers: () => parallelFinalizers2,
  parallelErrors: () => parallelErrors2,
  orElseSucceed: () => orElseSucceed3,
  orElseFail: () => orElseFail2,
  orElse: () => orElse8,
  orDieWith: () => orDieWith2,
  orDie: () => orDie4,
  optionFromOptional: () => optionFromOptional2,
  option: () => option4,
  once: () => once3,
  onInterrupt: () => onInterrupt3,
  onExit: () => onExit3,
  onError: () => onError3,
  none: () => none9,
  never: () => never5,
  negate: () => negate4,
  metricLabels: () => metricLabels2,
  mergeAll: () => mergeAll5,
  merge: () => merge7,
  matchEffect: () => matchEffect4,
  matchCauseEffect: () => matchCauseEffect3,
  matchCause: () => matchCause4,
  match: () => match20,
  mapInputContext: () => mapInputContext3,
  mapErrorCause: () => mapErrorCause4,
  mapError: () => mapError5,
  mapBoth: () => mapBoth6,
  mapAccum: () => mapAccum4,
  map: () => map26,
  makeSpanScoped: () => makeSpanScoped2,
  makeSpan: () => makeSpan2,
  makeSemaphore: () => makeSemaphore2,
  makeLatch: () => makeLatch2,
  loop: () => loop2,
  logWithLevel: () => logWithLevel2,
  logWarning: () => logWarning2,
  logTrace: () => logTrace2,
  logInfo: () => logInfo2,
  logFatal: () => logFatal2,
  logError: () => logError2,
  logDebug: () => logDebug2,
  logAnnotations: () => logAnnotations2,
  log: () => log3,
  locallyWith: () => locallyWith,
  locallyScopedWith: () => locallyScopedWith,
  locallyScoped: () => locallyScoped,
  locally: () => locally2,
  linkSpans: () => linkSpans2,
  linkSpanCurrent: () => linkSpanCurrent2,
  liftPredicate: () => liftPredicate5,
  let: () => let_7,
  labelMetricsScoped: () => labelMetricsScoped2,
  labelMetrics: () => labelMetrics2,
  iterate: () => iterate2,
  isSuccess: () => isSuccess3,
  isFailure: () => isFailure5,
  isEffect: () => isEffect2,
  intoDeferred: () => intoDeferred2,
  interruptibleMask: () => interruptibleMask2,
  interruptible: () => interruptible4,
  interruptWith: () => interruptWith3,
  interrupt: () => interrupt8,
  inheritFiberRefs: () => inheritFiberRefs2,
  ignoreLogged: () => ignoreLogged3,
  ignore: () => ignore3,
  if: () => if_2,
  head: () => head7,
  getRuntimeFlags: () => getRuntimeFlags,
  getFiberRefs: () => getFiberRefs,
  gen: () => gen6,
  functionWithSpan: () => functionWithSpan2,
  fromNullable: () => fromNullable5,
  fromFiberEffect: () => fromFiberEffect2,
  fromFiber: () => fromFiber2,
  forkWithErrorHandler: () => forkWithErrorHandler2,
  forkScoped: () => forkScoped3,
  forkIn: () => forkIn3,
  forkDaemon: () => forkDaemon3,
  forkAll: () => forkAll2,
  fork: () => fork4,
  forever: () => forever4,
  forEach: () => forEach16,
  fnUntraced: () => fnUntraced2,
  fn: () => fn,
  flipWith: () => flipWith2,
  flip: () => flip5,
  flatten: () => flatten13,
  flatMap: () => flatMap18,
  firstSuccessOf: () => firstSuccessOf2,
  findFirst: () => findFirst10,
  finalizersMask: () => finalizersMask2,
  filterOrFail: () => filterOrFail3,
  filterOrElse: () => filterOrElse2,
  filterOrDieMessage: () => filterOrDieMessage2,
  filterOrDie: () => filterOrDie2,
  filterMap: () => filterMap11,
  filterEffectOrFail: () => filterEffectOrFail2,
  filterEffectOrElse: () => filterEffectOrElse2,
  filter: () => filter16,
  fiberIdWith: () => fiberIdWith2,
  fiberId: () => fiberId2,
  failSync: () => failSync5,
  failCauseSync: () => failCauseSync5,
  failCause: () => failCause10,
  fail: () => fail12,
  exit: () => exit3,
  exists: () => exists4,
  every: () => every13,
  eventually: () => eventually2,
  ensuringChildren: () => ensuringChildren2,
  ensuringChild: () => ensuringChild2,
  ensuring: () => ensuring4,
  either: () => either6,
  dropWhile: () => dropWhile4,
  dropUntil: () => dropUntil2,
  disconnect: () => disconnect2,
  diffFiberRefs: () => diffFiberRefs2,
  dieSync: () => dieSync4,
  dieMessage: () => dieMessage2,
  die: () => die8,
  descriptorWith: () => descriptorWith2,
  descriptor: () => descriptor2,
  delay: () => delay3,
  daemonChildren: () => daemonChildren2,
  custom: () => custom3,
  currentSpan: () => currentSpan2,
  currentParentSpan: () => currentParentSpan2,
  contextWithEffect: () => contextWithEffect2,
  contextWith: () => contextWith2,
  context: () => context5,
  consoleWith: () => consoleWith2,
  console: () => console3,
  configProviderWith: () => configProviderWith2,
  clockWith: () => clockWith4,
  clock: () => clock2,
  checkInterruptible: () => checkInterruptible2,
  cause: () => cause2,
  catchTags: () => catchTags2,
  catchTag: () => catchTag3,
  catchSomeDefect: () => catchSomeDefect2,
  catchSomeCause: () => catchSomeCause2,
  catchSome: () => catchSome2,
  catchIf: () => catchIf3,
  catchAllDefect: () => catchAllDefect3,
  catchAllCause: () => catchAllCause4,
  catchAll: () => catchAll4,
  catch: () => _catch2,
  cachedWithTTL: () => cachedWithTTL,
  cachedInvalidateWithTTL: () => cachedInvalidateWithTTL2,
  cachedFunction: () => cachedFunction2,
  cached: () => cached3,
  cacheRequestResult: () => cacheRequestResult,
  blocked: () => blocked2,
  bindTo: () => bindTo7,
  bindAll: () => bindAll2,
  bind: () => bind7,
  awaitAllChildren: () => awaitAllChildren2,
  asyncEffect: () => asyncEffect2,
  async: () => async2,
  asVoid: () => asVoid6,
  asSomeError: () => asSomeError2,
  asSome: () => asSome3,
  as: () => as8,
  ap: () => ap3,
  annotateSpans: () => annotateSpans3,
  annotateLogsScoped: () => annotateLogsScoped2,
  annotateLogs: () => annotateLogs3,
  annotateCurrentSpan: () => annotateCurrentSpan2,
  andThen: () => andThen11,
  allowInterrupt: () => allowInterrupt2,
  allWith: () => allWith2,
  allSuccesses: () => allSuccesses2,
  all: () => all11,
  addFinalizer: () => addFinalizer4,
  acquireUseRelease: () => acquireUseRelease3,
  acquireReleaseInterruptible: () => acquireReleaseInterruptible2,
  acquireRelease: () => acquireRelease3,
  Tag: () => Tag3,
  Service: () => Service,
  EffectTypeId: () => EffectTypeId4,
  Do: () => Do6
});
function defineLength(length5, fn2) {
  return Object.defineProperty(fn2, "length", {
    value: length5,
    configurable: true
  });
}
function fnApply(options) {
  let effect;
  let fnError = undefined;
  if (isGeneratorFunction(options.body)) {
    effect = fromIterator(() => options.body.apply(options.self, options.args));
  } else {
    try {
      effect = options.body.apply(options.self, options.args);
    } catch (error3) {
      fnError = error3;
      effect = die8(error3);
    }
  }
  if (options.pipeables.length > 0) {
    try {
      for (const x2 of options.pipeables) {
        effect = x2(effect, ...options.args);
      }
    } catch (error3) {
      effect = fnError ? failCause10(sequential(die(fnError), die(error3))) : die8(error3);
    }
  }
  let cache = false;
  const captureStackTrace = () => {
    if (cache !== false) {
      return cache;
    }
    if (options.errorCall.stack) {
      const stackDef = options.errorDef.stack.trim().split(`
`);
      const stackCall = options.errorCall.stack.trim().split(`
`);
      cache = `${stackDef.slice(2).join(`
`).trim()}
${stackCall.slice(2).join(`
`).trim()}`;
      return cache;
    }
  };
  const opts = options.spanOptions && "captureStackTrace" in options.spanOptions ? options.spanOptions : {
    captureStackTrace,
    ...options.spanOptions
  };
  return withSpan3(effect, options.spanName, opts);
}
var EffectTypeId4, isEffect2, cachedWithTTL, cachedInvalidateWithTTL2, cached3, cachedFunction2, once3, all11, allWith2, allSuccesses2, dropUntil2, dropWhile4, takeUntil2, takeWhile5, every13, exists4, filter16, filterMap11, findFirst10, forEach16, head7, mergeAll5, partition9, reduce17, reduceWhile2, reduceRight5, reduceEffect3, replicate5, replicateEffect3, validateAll2, validateFirst2, async2, asyncEffect2, custom3, withFiberRuntime2, fail12, failSync5, failCause10, failCauseSync5, die8, dieMessage2, dieSync4, gen6, never5, none9, promise3, succeed13, succeedNone3, succeedSome3, suspend4, sync8, _void, yieldNow4, _catch2, catchAll4, catchAllCause4, catchAllDefect3, catchIf3, catchSome2, catchSomeCause2, catchSomeDefect2, catchTag3, catchTags2, cause2, eventually2, ignore3, ignoreLogged3, parallelErrors2, sandbox3, retry3, retryOrElse, try_4, tryMap2, tryMapPromise2, tryPromise3, unsandbox2, allowInterrupt2, checkInterruptible2, disconnect2, interrupt8, interruptWith3, interruptible4, interruptibleMask2, onInterrupt3, uninterruptible3, uninterruptibleMask3, liftPredicate5, as8, asSome3, asSomeError2, asVoid6, flip5, flipWith2, map26, mapAccum4, mapBoth6, mapError5, mapErrorCause4, merge7, negate4, acquireRelease3, acquireReleaseInterruptible2, acquireUseRelease3, addFinalizer4, ensuring4, onError3, onExit3, parallelFinalizers2, sequentialFinalizers2, finalizersMask2, scope4, scopeWith2, scopedWith2, scoped4, using2, withEarlyRelease2, awaitAllChildren2, daemonChildren2, descriptor2, descriptorWith2, diffFiberRefs2, ensuringChild2, ensuringChildren2, fiberId2, fiberIdWith2, fork4, forkDaemon3, forkAll2, forkIn3, forkScoped3, forkWithErrorHandler2, fromFiber2, fromFiberEffect2, supervised2, transplant2, withConcurrency3, withScheduler2, withSchedulingPriority2, withMaxOpsBeforeYield2, clock2, clockWith4, withClockScoped2, withClock2, console3, consoleWith2, withConsoleScoped2, withConsole2, delay3, sleep5, timed2, timedWith2, timeout3, timeoutOption3, timeoutFail2, timeoutFailCause2, timeoutTo2, configProviderWith2, withConfigProvider2, withConfigProviderScoped2, context5, contextWith2, contextWithEffect2, mapInputContext3, provide2, provideService5, provideServiceEffect3, serviceFunction2, serviceFunctionEffect2, serviceFunctions2, serviceConstants2, serviceMembers2, serviceOption3, serviceOptional2, updateService3, Do6, bind7, bindAll2, bindTo7, let_7, option4, either6, exit3, intoDeferred2, if_2, filterOrDie2, filterOrDieMessage2, filterOrElse2, filterOrFail3, filterEffectOrElse2, filterEffectOrFail2, unless2, unlessEffect2, when3, whenEffect2, whenFiberRef2, whenRef2, flatMap18, andThen11, flatten13, race3, raceAll3, raceFirst3, raceWith2, summarized2, tap5, tapBoth2, tapDefect3, tapError4, tapErrorTag2, tapErrorCause4, forever4, iterate2, loop2, repeat3, repeatN2, repeatOrElse, schedule, scheduleForked2, scheduleFrom, whileLoop3, getFiberRefs, inheritFiberRefs2, locally2, locallyWith, locallyScoped, locallyScopedWith, patchFiberRefs2, setFiberRefs2, updateFiberRefs3, isFailure5, isSuccess3, match20, matchCause4, matchCauseEffect3, matchEffect4, log3, logWithLevel2 = (level, ...message) => logWithLevel(level)(...message), logTrace2, logDebug2, logInfo2, logWarning2, logError2, logFatal2, withLogSpan2, annotateLogs3, annotateLogsScoped2, logAnnotations2, withUnhandledErrorLogLevel2, whenLogLevel2, orDie4, orDieWith2, orElse8, orElseFail2, orElseSucceed3, firstSuccessOf2, random3, randomWith3, withRandom2, withRandomScoped2, runtime4, getRuntimeFlags, patchRuntimeFlags, withRuntimeFlagsPatch, withRuntimeFlagsPatchScoped, tagMetrics2, labelMetrics2, tagMetricsScoped2, labelMetricsScoped2, metricLabels2, withMetric2, unsafeMakeSemaphore2, makeSemaphore2, unsafeMakeLatch2, makeLatch2, runFork2, runCallback, runPromise2, runPromiseExit2, runSync2, runSyncExit2, validate2, validateWith2, zip12, zipLeft7, zipRight7, zipWith12, ap3, blocked2, runRequestBlock2, step3, request, cacheRequestResult, withRequestBatching2, withRequestCaching2, withRequestCache2, tracer2, tracerWith4, withTracer2, withTracerScoped2, withTracerEnabled2, withTracerTiming2, annotateSpans3, annotateCurrentSpan2, currentSpan2, currentParentSpan2, spanAnnotations2, spanLinks2, linkSpans2, linkSpanCurrent2, makeSpan2, makeSpanScoped2, useSpan2, withSpan3, functionWithSpan2, withSpanScoped2, withParentSpan3, fromNullable5, optionFromOptional2, transposeOption2 = (self) => {
  return isNone(self) ? succeedNone3 : map26(self.value, some2);
}, transposeMapOption, makeTagProxy = (TagClass) => {
  const cache = new Map;
  return new Proxy(TagClass, {
    get(target, prop, receiver) {
      if (prop in target) {
        return Reflect.get(target, prop, receiver);
      }
      if (cache.has(prop)) {
        return cache.get(prop);
      }
      const fn = (...args2) => andThen6(target, (s) => {
        if (typeof s[prop] === "function") {
          cache.set(prop, (...args3) => andThen6(target, (s2) => s2[prop](...args3)));
          return s[prop](...args2);
        }
        cache.set(prop, andThen6(target, (s2) => s2[prop]));
        return s[prop];
      });
      const cn = andThen6(target, (s) => s[prop]);
      Object.assign(fn, cn);
      Object.setPrototypeOf(fn, Object.getPrototypeOf(cn));
      cache.set(prop, fn);
      return fn;
    }
  });
}, Tag3 = (id3) => () => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 2;
  const creationError = new Error;
  Error.stackTraceLimit = limit;
  function TagClass() {}
  Object.setPrototypeOf(TagClass, TagProto);
  TagClass.key = id3;
  Object.defineProperty(TagClass, "use", {
    get() {
      return (body) => andThen6(this, body);
    }
  });
  Object.defineProperty(TagClass, "stack", {
    get() {
      return creationError.stack;
    }
  });
  return makeTagProxy(TagClass);
}, Service = function() {
  return function() {
    const [id3, maker] = arguments;
    const proxy = "accessors" in maker ? maker["accessors"] : false;
    const limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 2;
    const creationError = new Error;
    Error.stackTraceLimit = limit;
    let patchState = "unchecked";
    const TagClass = function(service3) {
      if (patchState === "unchecked") {
        const proto4 = Object.getPrototypeOf(service3);
        if (proto4 === Object.prototype || proto4 === null) {
          patchState = "plain";
        } else {
          const selfProto = Object.getPrototypeOf(this);
          Object.setPrototypeOf(selfProto, proto4);
          patchState = "patched";
        }
      }
      if (patchState === "plain") {
        Object.assign(this, service3);
      } else if (patchState === "patched") {
        Object.setPrototypeOf(service3, Object.getPrototypeOf(this));
        return service3;
      }
    };
    TagClass.prototype._tag = id3;
    Object.defineProperty(TagClass, "make", {
      get() {
        return (service3) => new this(service3);
      }
    });
    Object.defineProperty(TagClass, "use", {
      get() {
        return (body) => andThen6(this, body);
      }
    });
    TagClass.key = id3;
    Object.assign(TagClass, TagProto);
    Object.defineProperty(TagClass, "stack", {
      get() {
        return creationError.stack;
      }
    });
    const hasDeps = "dependencies" in maker && maker.dependencies.length > 0;
    const layerName = hasDeps ? "DefaultWithoutDependencies" : "Default";
    let layerCache;
    if ("effect" in maker) {
      Object.defineProperty(TagClass, layerName, {
        get() {
          return layerCache ??= fromEffect4(TagClass, map26(maker.effect, (_) => new this(_)));
        }
      });
    } else if ("scoped" in maker) {
      Object.defineProperty(TagClass, layerName, {
        get() {
          return layerCache ??= scoped3(TagClass, map26(maker.scoped, (_) => new this(_)));
        }
      });
    } else if ("sync" in maker) {
      Object.defineProperty(TagClass, layerName, {
        get() {
          return layerCache ??= sync7(TagClass, () => new this(maker.sync()));
        }
      });
    } else {
      Object.defineProperty(TagClass, layerName, {
        get() {
          return layerCache ??= succeed11(TagClass, new this(maker.succeed));
        }
      });
    }
    if (hasDeps) {
      let layerWithDepsCache;
      Object.defineProperty(TagClass, "Default", {
        get() {
          return layerWithDepsCache ??= provide(this.DefaultWithoutDependencies, maker.dependencies);
        }
      });
    }
    return proxy === true ? makeTagProxy(TagClass) : TagClass;
  };
}, fn = function(nameOrBody, ...pipeables) {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 2;
  const errorDef = new Error;
  Error.stackTraceLimit = limit;
  if (typeof nameOrBody !== "string") {
    return defineLength(nameOrBody.length, function(...args2) {
      const limit2 = Error.stackTraceLimit;
      Error.stackTraceLimit = 2;
      const errorCall = new Error;
      Error.stackTraceLimit = limit2;
      return fnApply({
        self: this,
        body: nameOrBody,
        args: args2,
        pipeables,
        spanName: "<anonymous>",
        spanOptions: {
          context: DisablePropagation.context(true)
        },
        errorDef,
        errorCall
      });
    });
  }
  const name = nameOrBody;
  const options = pipeables[0];
  return (body, ...pipeables2) => defineLength(body.length, function(...args2) {
    const limit2 = Error.stackTraceLimit;
    Error.stackTraceLimit = 2;
    const errorCall = new Error;
    Error.stackTraceLimit = limit2;
    return fnApply({
      self: this,
      body,
      args: args2,
      pipeables: pipeables2,
      spanName: name,
      spanOptions: options,
      errorDef,
      errorCall
    });
  });
}, fnUntraced2;
var init_Effect = __esm(() => {
  init_Function();
  init_cause();
  init_console2();
  init_context2();
  init_core_effect();
  init_core();
  init_defaultServices();
  init_circular();
  init_fiberRuntime();
  init_layer();
  init_option();
  init_query();
  init_runtime();
  init_schedule();
  init_tracer();
  init_Request();
  init_Scheduler();
  init_Utils();
  EffectTypeId4 = EffectTypeId2;
  isEffect2 = isEffect;
  cachedWithTTL = cached2;
  cachedInvalidateWithTTL2 = cachedInvalidateWithTTL;
  cached3 = memoize;
  cachedFunction2 = cachedFunction;
  once3 = once;
  all11 = all9;
  allWith2 = allWith;
  allSuccesses2 = allSuccesses;
  dropUntil2 = dropUntil;
  dropWhile4 = dropWhile3;
  takeUntil2 = takeUntil;
  takeWhile5 = takeWhile4;
  every13 = every11;
  exists4 = exists3;
  filter16 = filter14;
  filterMap11 = filterMap9;
  findFirst10 = findFirst7;
  forEach16 = forEach15;
  head7 = head6;
  mergeAll5 = mergeAll3;
  partition9 = partition8;
  reduce17 = reduce12;
  reduceWhile2 = reduceWhile;
  reduceRight5 = reduceRight4;
  reduceEffect3 = reduceEffect;
  replicate5 = replicate4;
  replicateEffect3 = replicateEffect2;
  validateAll2 = validateAll;
  validateFirst2 = validateFirst;
  async2 = async_;
  asyncEffect2 = asyncEffect;
  custom3 = custom2;
  withFiberRuntime2 = withFiberRuntime;
  fail12 = fail2;
  failSync5 = failSync;
  failCause10 = failCause;
  failCauseSync5 = failCauseSync;
  die8 = die2;
  dieMessage2 = dieMessage;
  dieSync4 = dieSync;
  gen6 = gen4;
  never5 = never;
  none9 = none6;
  promise3 = promise;
  succeed13 = succeed;
  succeedNone3 = succeedNone;
  succeedSome3 = succeedSome;
  suspend4 = suspend;
  sync8 = sync;
  _void = void_3;
  yieldNow4 = yieldNow;
  _catch2 = _catch;
  catchAll4 = catchAll;
  catchAllCause4 = catchAllCause;
  catchAllDefect3 = catchAllDefect;
  catchIf3 = catchIf;
  catchSome2 = catchSome;
  catchSomeCause2 = catchSomeCause;
  catchSomeDefect2 = catchSomeDefect;
  catchTag3 = catchTag;
  catchTags2 = catchTags;
  cause2 = cause;
  eventually2 = eventually;
  ignore3 = ignore;
  ignoreLogged3 = ignoreLogged;
  parallelErrors2 = parallelErrors;
  sandbox3 = sandbox;
  retry3 = retry_combined;
  retryOrElse = retryOrElse_Effect;
  try_4 = try_2;
  tryMap2 = tryMap;
  tryMapPromise2 = tryMapPromise;
  tryPromise3 = tryPromise;
  unsandbox2 = unsandbox;
  allowInterrupt2 = allowInterrupt;
  checkInterruptible2 = checkInterruptible;
  disconnect2 = disconnect;
  interrupt8 = interrupt2;
  interruptWith3 = interruptWith;
  interruptible4 = interruptible2;
  interruptibleMask2 = interruptibleMask;
  onInterrupt3 = onInterrupt;
  uninterruptible3 = uninterruptible;
  uninterruptibleMask3 = uninterruptibleMask;
  liftPredicate5 = liftPredicate4;
  as8 = as3;
  asSome3 = asSome;
  asSomeError2 = asSomeError;
  asVoid6 = asVoid2;
  flip5 = flip3;
  flipWith2 = flipWith;
  map26 = map14;
  mapAccum4 = mapAccum3;
  mapBoth6 = mapBoth3;
  mapError5 = mapError;
  mapErrorCause4 = mapErrorCause2;
  merge7 = merge5;
  negate4 = negate3;
  acquireRelease3 = acquireRelease2;
  acquireReleaseInterruptible2 = acquireReleaseInterruptible;
  acquireUseRelease3 = acquireUseRelease;
  addFinalizer4 = addFinalizer2;
  ensuring4 = ensuring2;
  onError3 = onError;
  onExit3 = onExit;
  parallelFinalizers2 = parallelFinalizers;
  sequentialFinalizers2 = sequentialFinalizers;
  finalizersMask2 = finalizersMask;
  scope4 = scope2;
  scopeWith2 = scopeWith;
  scopedWith2 = scopedWith;
  scoped4 = scopedEffect;
  using2 = using;
  withEarlyRelease2 = withEarlyRelease;
  awaitAllChildren2 = awaitAllChildren;
  daemonChildren2 = daemonChildren;
  descriptor2 = descriptor;
  descriptorWith2 = descriptorWith;
  diffFiberRefs2 = diffFiberRefs;
  ensuringChild2 = ensuringChild;
  ensuringChildren2 = ensuringChildren;
  fiberId2 = fiberId;
  fiberIdWith2 = fiberIdWith;
  fork4 = fork2;
  forkDaemon3 = forkDaemon2;
  forkAll2 = forkAll;
  forkIn3 = forkIn2;
  forkScoped3 = forkScoped2;
  forkWithErrorHandler2 = forkWithErrorHandler;
  fromFiber2 = fromFiber;
  fromFiberEffect2 = fromFiberEffect;
  supervised2 = supervised;
  transplant2 = transplant;
  withConcurrency3 = withConcurrency;
  withScheduler2 = withScheduler;
  withSchedulingPriority2 = withSchedulingPriority;
  withMaxOpsBeforeYield2 = withMaxOpsBeforeYield;
  clock2 = clock;
  clockWith4 = clockWith3;
  withClockScoped2 = withClockScoped;
  withClock2 = withClock;
  console3 = console2;
  consoleWith2 = consoleWith;
  withConsoleScoped2 = withConsoleScoped;
  withConsole2 = withConsole;
  delay3 = delay;
  sleep5 = sleep3;
  timed2 = timed;
  timedWith2 = timedWith;
  timeout3 = timeout2;
  timeoutOption3 = timeoutOption2;
  timeoutFail2 = timeoutFail;
  timeoutFailCause2 = timeoutFailCause;
  timeoutTo2 = timeoutTo;
  configProviderWith2 = configProviderWith;
  withConfigProvider2 = withConfigProvider;
  withConfigProviderScoped2 = withConfigProviderScoped;
  context5 = context2;
  contextWith2 = contextWith;
  contextWithEffect2 = contextWithEffect;
  mapInputContext3 = mapInputContext;
  provide2 = effect_provide;
  provideService5 = provideService;
  provideServiceEffect3 = provideServiceEffect;
  serviceFunction2 = serviceFunction;
  serviceFunctionEffect2 = serviceFunctionEffect;
  serviceFunctions2 = serviceFunctions;
  serviceConstants2 = serviceConstants;
  serviceMembers2 = serviceMembers;
  serviceOption3 = serviceOption;
  serviceOptional2 = serviceOptional;
  updateService3 = updateService;
  Do6 = Do4;
  bind7 = bind5;
  bindAll2 = bindAll;
  bindTo7 = bindTo5;
  let_7 = let_5;
  option4 = option2;
  either6 = either3;
  exit3 = exit;
  intoDeferred2 = intoDeferred;
  if_2 = if_;
  filterOrDie2 = filterOrDie;
  filterOrDieMessage2 = filterOrDieMessage;
  filterOrElse2 = filterOrElse;
  filterOrFail3 = filterOrFail;
  filterEffectOrElse2 = filterEffectOrElse;
  filterEffectOrFail2 = filterEffectOrFail;
  unless2 = unless;
  unlessEffect2 = unlessEffect;
  when3 = when;
  whenEffect2 = whenEffect;
  whenFiberRef2 = whenFiberRef;
  whenRef2 = whenRef;
  flatMap18 = flatMap12;
  andThen11 = andThen6;
  flatten13 = flatten8;
  race3 = race2;
  raceAll3 = raceAll2;
  raceFirst3 = raceFirst2;
  raceWith2 = raceWith;
  summarized2 = summarized;
  tap5 = tap2;
  tapBoth2 = tapBoth;
  tapDefect3 = tapDefect;
  tapError4 = tapError;
  tapErrorTag2 = tapErrorTag;
  tapErrorCause4 = tapErrorCause;
  forever4 = forever;
  iterate2 = iterate;
  loop2 = loop;
  repeat3 = repeat_combined;
  repeatN2 = repeatN;
  repeatOrElse = repeatOrElse_Effect;
  schedule = schedule_Effect;
  scheduleForked2 = scheduleForked;
  scheduleFrom = scheduleFrom_Effect;
  whileLoop3 = whileLoop;
  getFiberRefs = fiberRefs3;
  inheritFiberRefs2 = inheritFiberRefs;
  locally2 = fiberRefLocally;
  locallyWith = fiberRefLocallyWith;
  locallyScoped = fiberRefLocallyScoped;
  locallyScopedWith = fiberRefLocallyScopedWith;
  patchFiberRefs2 = patchFiberRefs;
  setFiberRefs2 = setFiberRefs;
  updateFiberRefs3 = updateFiberRefs;
  isFailure5 = isFailure3;
  isSuccess3 = isSuccess2;
  match20 = match8;
  matchCause4 = matchCause;
  matchCauseEffect3 = matchCauseEffect;
  matchEffect4 = matchEffect;
  log3 = log;
  logTrace2 = logTrace;
  logDebug2 = logDebug;
  logInfo2 = logInfo;
  logWarning2 = logWarning;
  logError2 = logError;
  logFatal2 = logFatal;
  withLogSpan2 = withLogSpan;
  annotateLogs3 = annotateLogs;
  annotateLogsScoped2 = annotateLogsScoped;
  logAnnotations2 = logAnnotations;
  withUnhandledErrorLogLevel2 = withUnhandledErrorLogLevel;
  whenLogLevel2 = whenLogLevel;
  orDie4 = orDie;
  orDieWith2 = orDieWith;
  orElse8 = orElse3;
  orElseFail2 = orElseFail;
  orElseSucceed3 = orElseSucceed;
  firstSuccessOf2 = firstSuccessOf;
  random3 = random2;
  randomWith3 = randomWith;
  withRandom2 = withRandom;
  withRandomScoped2 = withRandomScoped;
  runtime4 = runtime3;
  getRuntimeFlags = runtimeFlags;
  patchRuntimeFlags = updateRuntimeFlags;
  withRuntimeFlagsPatch = withRuntimeFlags;
  withRuntimeFlagsPatchScoped = withRuntimeFlagsScoped;
  tagMetrics2 = tagMetrics;
  labelMetrics2 = labelMetrics;
  tagMetricsScoped2 = tagMetricsScoped;
  labelMetricsScoped2 = labelMetricsScoped;
  metricLabels2 = metricLabels;
  withMetric2 = withMetric;
  unsafeMakeSemaphore2 = unsafeMakeSemaphore;
  makeSemaphore2 = makeSemaphore;
  unsafeMakeLatch2 = unsafeMakeLatch;
  makeLatch2 = makeLatch;
  runFork2 = unsafeForkEffect;
  runCallback = unsafeRunEffect;
  runPromise2 = unsafeRunPromiseEffect;
  runPromiseExit2 = unsafeRunPromiseExitEffect;
  runSync2 = unsafeRunSyncEffect;
  runSyncExit2 = unsafeRunSyncExitEffect;
  validate2 = validate;
  validateWith2 = validateWith;
  zip12 = zipOptions;
  zipLeft7 = zipLeftOptions;
  zipRight7 = zipRightOptions;
  zipWith12 = zipWithOptions;
  ap3 = /* @__PURE__ */ dual(2, (self, that) => zipWith12(self, that, (f, a) => f(a)));
  blocked2 = blocked;
  runRequestBlock2 = runRequestBlock;
  step3 = step2;
  request = /* @__PURE__ */ dual((args2) => isRequest2(args2[0]), fromRequest);
  cacheRequestResult = cacheRequest;
  withRequestBatching2 = withRequestBatching;
  withRequestCaching2 = withRequestCaching;
  withRequestCache2 = withRequestCache;
  tracer2 = tracer;
  tracerWith4 = tracerWith;
  withTracer2 = withTracer;
  withTracerScoped2 = withTracerScoped;
  withTracerEnabled2 = withTracerEnabled;
  withTracerTiming2 = withTracerTiming;
  annotateSpans3 = annotateSpans;
  annotateCurrentSpan2 = annotateCurrentSpan;
  currentSpan2 = currentSpan;
  currentParentSpan2 = currentParentSpan;
  spanAnnotations2 = spanAnnotations;
  spanLinks2 = spanLinks;
  linkSpans2 = linkSpans;
  linkSpanCurrent2 = linkSpanCurrent;
  makeSpan2 = makeSpan;
  makeSpanScoped2 = makeSpanScoped;
  useSpan2 = useSpan;
  withSpan3 = withSpan;
  functionWithSpan2 = functionWithSpan;
  withSpanScoped2 = withSpanScoped;
  withParentSpan3 = withParentSpan;
  fromNullable5 = fromNullable4;
  optionFromOptional2 = optionFromOptional;
  transposeMapOption = /* @__PURE__ */ dual(2, (self, f) => isNone(self) ? succeedNone3 : map26(f(self.value), some2));
  fnUntraced2 = fnUntraced;
});

// node_modules/effect/dist/esm/FiberRef.js
var exports_FiberRef = {};
__export(exports_FiberRef, {
  updateSomeAndGet: () => updateSomeAndGet3,
  updateSome: () => updateSome3,
  updateAndGet: () => updateAndGet4,
  update: () => update7,
  unsafeMakeSupervisor: () => unsafeMakeSupervisor,
  unsafeMakePatch: () => unsafeMakePatch,
  unsafeMakeHashSet: () => unsafeMakeHashSet,
  unsafeMakeContext: () => unsafeMakeContext,
  unsafeMake: () => unsafeMake12,
  unhandledErrorLogLevel: () => unhandledErrorLogLevel,
  set: () => set9,
  reset: () => reset2,
  modifySome: () => modifySome3,
  modify: () => modify11,
  makeWith: () => makeWith3,
  makeRuntimeFlags: () => makeRuntimeFlags,
  makeContext: () => makeContext2,
  make: () => make60,
  interruptedCause: () => interruptedCause,
  getWith: () => getWith,
  getAndUpdateSome: () => getAndUpdateSome3,
  getAndUpdate: () => getAndUpdate4,
  getAndSet: () => getAndSet4,
  get: () => get15,
  delete: () => _delete,
  currentTracerTimingEnabled: () => currentTracerTimingEnabled2,
  currentTracerSpanLinks: () => currentTracerSpanLinks2,
  currentTracerSpanAnnotations: () => currentTracerSpanAnnotations2,
  currentTracerEnabled: () => currentTracerEnabled2,
  currentSupervisor: () => currentSupervisor2,
  currentSchedulingPriority: () => currentSchedulingPriority2,
  currentScheduler: () => currentScheduler2,
  currentRuntimeFlags: () => currentRuntimeFlags2,
  currentRequestCacheEnabled: () => currentRequestCacheEnabled,
  currentRequestCache: () => currentRequestCache,
  currentRequestBatchingEnabled: () => currentRequestBatchingEnabled,
  currentMinimumLogLevel: () => currentMinimumLogLevel2,
  currentMetricLabels: () => currentMetricLabels2,
  currentMaxOpsBeforeYield: () => currentMaxOpsBeforeYield2,
  currentLoggers: () => currentLoggers2,
  currentLogSpan: () => currentLogSpan2,
  currentLogLevel: () => currentLogLevel2,
  currentLogAnnotations: () => currentLogAnnotations2,
  currentContext: () => currentContext2,
  currentConcurrency: () => currentConcurrency2,
  FiberRefTypeId: () => FiberRefTypeId2
});
var FiberRefTypeId2, make60, makeWith3, makeContext2, makeRuntimeFlags, unsafeMake12, unsafeMakeHashSet, unsafeMakeContext, unsafeMakeSupervisor, unsafeMakePatch, get15, getAndSet4, getAndUpdate4, getAndUpdateSome3, getWith, set9, _delete, reset2, modify11, modifySome3, update7, updateSome3, updateAndGet4, updateSomeAndGet3, currentConcurrency2, currentRequestBatchingEnabled, currentRequestCache, currentRequestCacheEnabled, currentContext2, currentSchedulingPriority2, currentMaxOpsBeforeYield2, unhandledErrorLogLevel, currentLogAnnotations2, currentLoggers2, currentLogLevel2, currentMinimumLogLevel2, currentLogSpan2, currentRuntimeFlags2, currentScheduler2, currentSupervisor2, currentMetricLabels2, currentTracerEnabled2, currentTracerTimingEnabled2, currentTracerSpanAnnotations2, currentTracerSpanLinks2, interruptedCause;
var init_FiberRef = __esm(() => {
  init_core();
  init_fiberRuntime();
  init_query();
  init_Scheduler();
  FiberRefTypeId2 = FiberRefTypeId;
  make60 = fiberRefMake;
  makeWith3 = fiberRefMakeWith;
  makeContext2 = fiberRefMakeContext;
  makeRuntimeFlags = fiberRefMakeRuntimeFlags;
  unsafeMake12 = fiberRefUnsafeMake;
  unsafeMakeHashSet = fiberRefUnsafeMakeHashSet;
  unsafeMakeContext = fiberRefUnsafeMakeContext;
  unsafeMakeSupervisor = fiberRefUnsafeMakeSupervisor;
  unsafeMakePatch = fiberRefUnsafeMakePatch;
  get15 = fiberRefGet;
  getAndSet4 = fiberRefGetAndSet;
  getAndUpdate4 = fiberRefGetAndUpdate;
  getAndUpdateSome3 = fiberRefGetAndUpdateSome;
  getWith = fiberRefGetWith;
  set9 = fiberRefSet;
  _delete = fiberRefDelete;
  reset2 = fiberRefReset;
  modify11 = fiberRefModify;
  modifySome3 = fiberRefModifySome;
  update7 = fiberRefUpdate;
  updateSome3 = fiberRefUpdateSome;
  updateAndGet4 = fiberRefUpdateAndGet;
  updateSomeAndGet3 = fiberRefUpdateSomeAndGet;
  currentConcurrency2 = currentConcurrency;
  currentRequestBatchingEnabled = currentRequestBatching;
  currentRequestCache = currentCache;
  currentRequestCacheEnabled = currentCacheEnabled;
  currentContext2 = currentContext;
  currentSchedulingPriority2 = currentSchedulingPriority;
  currentMaxOpsBeforeYield2 = currentMaxOpsBeforeYield;
  unhandledErrorLogLevel = currentUnhandledErrorLogLevel;
  currentLogAnnotations2 = currentLogAnnotations;
  currentLoggers2 = currentLoggers;
  currentLogLevel2 = currentLogLevel;
  currentMinimumLogLevel2 = currentMinimumLogLevel;
  currentLogSpan2 = currentLogSpan;
  currentRuntimeFlags2 = currentRuntimeFlags;
  currentScheduler2 = currentScheduler;
  currentSupervisor2 = currentSupervisor;
  currentMetricLabels2 = currentMetricLabels;
  currentTracerEnabled2 = currentTracerEnabled;
  currentTracerTimingEnabled2 = currentTracerTimingEnabled;
  currentTracerSpanAnnotations2 = currentTracerSpanAnnotations;
  currentTracerSpanLinks2 = currentTracerSpanLinks;
  interruptedCause = currentInterruptedCause;
});

// node_modules/effect/dist/esm/internal/layer/circular.js
var minimumLogLevel = (level) => scopedDiscard(fiberRefLocallyScoped(currentMinimumLogLevel, level)), withMinimumLogLevel, addLogger = (logger) => scopedDiscard(fiberRefLocallyScopedWith(currentLoggers, add4(logger))), addLoggerEffect = (effect) => unwrapEffect(map14(effect, addLogger)), addLoggerScoped = (effect) => unwrapScoped(map14(effect, addLogger)), removeLogger = (logger) => scopedDiscard(fiberRefLocallyScopedWith(currentLoggers, remove6(logger))), replaceLogger, replaceLoggerEffect, replaceLoggerScoped, addSupervisor = (supervisor) => scopedDiscard(fiberRefLocallyScopedWith(currentSupervisor, (current) => new Zip(current, supervisor))), enableCooperativeYielding, enableInterruption, enableOpSupervision, enableRuntimeMetrics, enableWindDown, disableCooperativeYielding, disableInterruption, disableOpSupervision, disableRuntimeMetrics, disableWindDown, setConfigProvider = (configProvider) => scopedDiscard(withConfigProviderScoped(configProvider)), parentSpan = (span2) => succeedContext(make8(spanTag, span2)), span2 = (name, options) => {
  options = addSpanStackTrace(options);
  return scoped3(spanTag, options?.onEnd ? tap2(makeSpanScoped(name, options), (span3) => addFinalizer2((exit4) => options.onEnd(span3, exit4))) : makeSpanScoped(name, options));
}, setTracer = (tracer3) => scopedDiscard(withTracerScoped(tracer3));
var init_circular3 = __esm(() => {
  init_Context();
  init_Function();
  init_HashSet();
  init_core();
  init_fiberRuntime();
  init_layer();
  init_runtimeFlags();
  init_runtimeFlagsPatch();
  init_supervisor();
  init_tracer();
  withMinimumLogLevel = /* @__PURE__ */ dual(2, (self, level) => fiberRefLocally(currentMinimumLogLevel, level)(self));
  replaceLogger = /* @__PURE__ */ dual(2, (self, that) => flatMap17(removeLogger(self), () => addLogger(that)));
  replaceLoggerEffect = /* @__PURE__ */ dual(2, (self, that) => flatMap17(removeLogger(self), () => addLoggerEffect(that)));
  replaceLoggerScoped = /* @__PURE__ */ dual(2, (self, that) => flatMap17(removeLogger(self), () => addLoggerScoped(that)));
  enableCooperativeYielding = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ enable(CooperativeYielding)));
  enableInterruption = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ enable(Interruption)));
  enableOpSupervision = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ enable(OpSupervision)));
  enableRuntimeMetrics = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ enable(RuntimeMetrics)));
  enableWindDown = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ enable(WindDown)));
  disableCooperativeYielding = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ disable(CooperativeYielding)));
  disableInterruption = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ disable(Interruption)));
  disableOpSupervision = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ disable(OpSupervision)));
  disableRuntimeMetrics = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ disable(RuntimeMetrics)));
  disableWindDown = /* @__PURE__ */ scopedDiscard(/* @__PURE__ */ withRuntimeFlagsScoped(/* @__PURE__ */ disable(WindDown)));
});

// node_modules/effect/dist/esm/Layer.js
var exports_Layer = {};
__export(exports_Layer, {
  zipWith: () => zipWith13,
  withSpan: () => withSpan4,
  withParentSpan: () => withParentSpan4,
  updateService: () => updateService4,
  unwrapScoped: () => unwrapScoped2,
  unwrapEffect: () => unwrapEffect2,
  toRuntimeWithMemoMap: () => toRuntimeWithMemoMap2,
  toRuntime: () => toRuntime2,
  tapErrorCause: () => tapErrorCause5,
  tapError: () => tapError5,
  tap: () => tap6,
  syncContext: () => syncContext2,
  sync: () => sync9,
  suspend: () => suspend5,
  succeedContext: () => succeedContext2,
  succeed: () => succeed14,
  span: () => span3,
  setUnhandledErrorLogLevel: () => setUnhandledErrorLogLevel,
  setTracerTiming: () => setTracerTiming,
  setTracerEnabled: () => setTracerEnabled,
  setTracer: () => setTracer2,
  setScheduler: () => setScheduler,
  setRequestCaching: () => setRequestCaching,
  setRequestCache: () => setRequestCache,
  setRequestBatching: () => setRequestBatching,
  setConfigProvider: () => setConfigProvider2,
  setClock: () => setClock,
  service: () => service3,
  scopedDiscard: () => scopedDiscard2,
  scopedContext: () => scopedContext2,
  scoped: () => scoped5,
  scope: () => scope5,
  retry: () => retry4,
  provideMerge: () => provideMerge2,
  provide: () => provide3,
  project: () => project2,
  passthrough: () => passthrough3,
  parentSpan: () => parentSpan2,
  orElse: () => orElse9,
  orDie: () => orDie5,
  mergeAll: () => mergeAll6,
  merge: () => merge8,
  memoize: () => memoize3,
  matchCause: () => matchCause5,
  match: () => match21,
  mapError: () => mapError6,
  map: () => map27,
  makeMemoMap: () => makeMemoMap2,
  locallyWith: () => locallyWith2,
  locallyScoped: () => locallyScoped2,
  locallyEffect: () => locallyEffect2,
  locally: () => locally3,
  launch: () => launch2,
  isLayer: () => isLayer2,
  isFresh: () => isFresh2,
  function: () => fromFunction3,
  fresh: () => fresh2,
  flatten: () => flatten14,
  flatMap: () => flatMap19,
  fiberRefLocallyScopedWith: () => fiberRefLocallyScopedWith3,
  failSync: () => failSync6,
  failCauseSync: () => failCauseSync6,
  failCause: () => failCause11,
  fail: () => fail13,
  extendScope: () => extendScope2,
  empty: () => empty42,
  effectDiscard: () => effectDiscard,
  effectContext: () => effectContext,
  effect: () => effect,
  discard: () => discard2,
  dieSync: () => dieSync5,
  die: () => die9,
  context: () => context6,
  catchAllCause: () => catchAllCause5,
  catchAll: () => catchAll5,
  buildWithScope: () => buildWithScope2,
  buildWithMemoMap: () => buildWithMemoMap2,
  build: () => build2,
  annotateSpans: () => annotateSpans4,
  annotateLogs: () => annotateLogs4,
  MemoMapTypeId: () => MemoMapTypeId2,
  LayerTypeId: () => LayerTypeId2,
  CurrentMemoMap: () => CurrentMemoMap2
});
var LayerTypeId2, MemoMapTypeId2, CurrentMemoMap2, isLayer2, isFresh2, annotateLogs4, annotateSpans4, build2, buildWithScope2, catchAll5, catchAllCause5, context6, die9, dieSync5, discard2, effect, effectDiscard, effectContext, empty42, extendScope2, fail13, failSync6, failCause11, failCauseSync6, flatMap19, flatten14, fresh2, fromFunction3, launch2, map27, mapError6, match21, matchCause5, memoize3, merge8, mergeAll6, orDie5, orElse9, passthrough3, project2, locallyEffect2, locally3, locallyWith2, locallyScoped2, fiberRefLocallyScopedWith3, retry4, scope5, scoped5, scopedDiscard2, scopedContext2, service3, succeed14, succeedContext2, suspend5, sync9, syncContext2, tap6, tapError5, tapErrorCause5, toRuntime2, toRuntimeWithMemoMap2, provide3, provideMerge2, zipWith13, unwrapEffect2, unwrapScoped2, setClock = (clock3) => scopedDiscard2(fiberRefLocallyScopedWith(currentServices, add2(clockTag, clock3))), setConfigProvider2, parentSpan2, setRequestBatching = (requestBatching) => scopedDiscard2(fiberRefLocallyScoped(currentRequestBatching, requestBatching)), setRequestCaching = (requestCaching) => scopedDiscard2(fiberRefLocallyScoped(currentCacheEnabled, requestCaching)), setRequestCache = (cache) => scopedDiscard2(isEffect(cache) ? flatMap12(cache, (x2) => fiberRefLocallyScoped(currentCache, x2)) : fiberRefLocallyScoped(currentCache, cache)), setScheduler = (scheduler2) => scopedDiscard2(fiberRefLocallyScoped(currentScheduler, scheduler2)), span3, setTracer2, setTracerEnabled = (enabled2) => scopedDiscard2(fiberRefLocallyScoped(currentTracerEnabled, enabled2)), setTracerTiming = (enabled2) => scopedDiscard2(fiberRefLocallyScoped(currentTracerTimingEnabled, enabled2)), setUnhandledErrorLogLevel = (level) => scopedDiscard2(fiberRefLocallyScoped(currentUnhandledErrorLogLevel, level)), withSpan4, withParentSpan4, makeMemoMap2, buildWithMemoMap2, updateService4;
var init_Layer = __esm(() => {
  init_Context();
  init_Function();
  init_clock();
  init_core();
  init_defaultServices();
  init_fiberRuntime();
  init_layer();
  init_circular3();
  init_query();
  init_Scheduler();
  LayerTypeId2 = LayerTypeId;
  MemoMapTypeId2 = MemoMapTypeId;
  CurrentMemoMap2 = CurrentMemoMap;
  isLayer2 = isLayer;
  isFresh2 = isFresh;
  annotateLogs4 = annotateLogs2;
  annotateSpans4 = annotateSpans2;
  build2 = build;
  buildWithScope2 = buildWithScope;
  catchAll5 = catchAll3;
  catchAllCause5 = catchAllCause3;
  context6 = context4;
  die9 = die7;
  dieSync5 = dieSync3;
  discard2 = discard;
  effect = fromEffect4;
  effectDiscard = fromEffectDiscard;
  effectContext = fromEffectContext;
  empty42 = empty41;
  extendScope2 = extendScope;
  fail13 = fail10;
  failSync6 = failSync4;
  failCause11 = failCause8;
  failCauseSync6 = failCauseSync4;
  flatMap19 = flatMap17;
  flatten14 = flatten12;
  fresh2 = fresh;
  fromFunction3 = fromFunction2;
  launch2 = launch;
  map27 = map25;
  mapError6 = mapError4;
  match21 = match19;
  matchCause5 = matchCause3;
  memoize3 = memoize2;
  merge8 = merge6;
  mergeAll6 = mergeAll4;
  orDie5 = orDie3;
  orElse9 = orElse7;
  passthrough3 = passthrough2;
  project2 = project;
  locallyEffect2 = locallyEffect;
  locally3 = fiberRefLocally2;
  locallyWith2 = fiberRefLocallyWith2;
  locallyScoped2 = fiberRefLocallyScoped2;
  fiberRefLocallyScopedWith3 = fiberRefLocallyScopedWith2;
  retry4 = retry2;
  scope5 = scope3;
  scoped5 = scoped3;
  scopedDiscard2 = scopedDiscard;
  scopedContext2 = scopedContext;
  service3 = service2;
  succeed14 = succeed11;
  succeedContext2 = succeedContext;
  suspend5 = suspend3;
  sync9 = sync7;
  syncContext2 = syncContext;
  tap6 = tap4;
  tapError5 = tapError3;
  tapErrorCause5 = tapErrorCause3;
  toRuntime2 = toRuntime;
  toRuntimeWithMemoMap2 = toRuntimeWithMemoMap;
  provide3 = provide;
  provideMerge2 = provideMerge;
  zipWith13 = zipWith11;
  unwrapEffect2 = unwrapEffect;
  unwrapScoped2 = unwrapScoped;
  setConfigProvider2 = setConfigProvider;
  parentSpan2 = parentSpan;
  span3 = span2;
  setTracer2 = setTracer;
  withSpan4 = withSpan2;
  withParentSpan4 = withParentSpan2;
  makeMemoMap2 = makeMemoMap;
  buildWithMemoMap2 = buildWithMemoMap;
  updateService4 = /* @__PURE__ */ dual(3, (layer, tag, f) => provide3(layer, map27(context6(), (c) => add2(c, tag, f(unsafeGet3(c, tag))))));
});

// node_modules/effect/dist/esm/internal/queue.js
var EnqueueSymbolKey = "effect/QueueEnqueue", EnqueueTypeId, DequeueSymbolKey = "effect/QueueDequeue", DequeueTypeId, QueueStrategySymbolKey = "effect/QueueStrategy", QueueStrategyTypeId, BackingQueueSymbolKey = "effect/BackingQueue", BackingQueueTypeId, queueStrategyVariance, backingQueueVariance, enqueueVariance, dequeueVariance, QueueImpl, takeRemainderLoop = (self, min10, max13, acc) => {
  if (max13 < min10) {
    return succeed(acc);
  }
  return pipe(takeUpTo(self, max13), flatMap12((bs) => {
    const remaining = min10 - bs.length;
    if (remaining === 1) {
      return pipe(take5(self), map14((b) => pipe(acc, appendAll3(bs), append3(b))));
    }
    if (remaining > 1) {
      return pipe(take5(self), flatMap12((b) => takeRemainderLoop(self, remaining - 1, max13 - bs.length - 1, pipe(acc, appendAll3(bs), append3(b)))));
    }
    return succeed(pipe(acc, appendAll3(bs)));
  }));
}, isQueue = (u) => isEnqueue(u) && isDequeue(u), isEnqueue = (u) => hasProperty(u, EnqueueTypeId), isDequeue = (u) => hasProperty(u, DequeueTypeId), bounded2 = (requestedCapacity) => pipe(sync(() => bounded(requestedCapacity)), flatMap12((queue) => make61(backingQueueFromMutableQueue(queue), backPressureStrategy()))), dropping = (requestedCapacity) => pipe(sync(() => bounded(requestedCapacity)), flatMap12((queue) => make61(backingQueueFromMutableQueue(queue), droppingStrategy()))), sliding = (requestedCapacity) => pipe(sync(() => bounded(requestedCapacity)), flatMap12((queue) => make61(backingQueueFromMutableQueue(queue), slidingStrategy()))), unbounded2 = () => pipe(sync(() => unbounded()), flatMap12((queue) => make61(backingQueueFromMutableQueue(queue), droppingStrategy()))), unsafeMake13 = (queue, takers, shutdownHook, shutdownFlag, strategy) => {
  return new QueueImpl(queue, takers, shutdownHook, shutdownFlag, strategy);
}, make61 = (queue, strategy) => pipe(deferredMake(), map14((deferred) => unsafeMake13(queue, unbounded(), deferred, make15(false), strategy))), BackingQueueFromMutableQueue, backingQueueFromMutableQueue = (mutable2) => new BackingQueueFromMutableQueue(mutable2), capacity2 = (self) => self.capacity(), size17 = (self) => self.size, isFull2 = (self) => self.isFull, isEmpty15 = (self) => self.isEmpty, isShutdown = (self) => self.isShutdown, awaitShutdown = (self) => self.awaitShutdown, shutdown = (self) => self.shutdown, offer2, unsafeOffer, offerAll2, poll5 = (self) => map14(self.takeUpTo(1), head3), take5 = (self) => self.take, takeAll = (self) => self.takeAll, takeUpTo, takeBetween, takeN, backPressureStrategy = () => new BackPressureStrategy, droppingStrategy = () => new DroppingStrategy, slidingStrategy = () => new SlidingStrategy, BackPressureStrategy, DroppingStrategy, SlidingStrategy, unsafeCompleteDeferred = (deferred, a) => {
  return deferredUnsafeDone(deferred, succeed(a));
}, unsafeOfferAll = (queue, as9) => {
  return pipe(queue, offerAll(as9));
}, unsafePollAll = (queue) => {
  return pipe(queue, pollUpTo(Number.POSITIVE_INFINITY));
}, unsafePollN = (queue, max13) => {
  return pipe(queue, pollUpTo(max13));
}, unsafeRemove = (queue, a) => {
  unsafeOfferAll(queue, pipe(unsafePollAll(queue), filter5((b) => a !== b)));
}, unsafeCompleteTakers = (strategy, queue, takers) => {
  let keepPolling = true;
  while (keepPolling && queue.length() !== 0) {
    const taker = pipe(takers, poll2(EmptyMutableQueue));
    if (taker !== EmptyMutableQueue) {
      const element = queue.poll(EmptyMutableQueue);
      if (element !== EmptyMutableQueue) {
        unsafeCompleteDeferred(taker, element);
        strategy.unsafeOnQueueEmptySpace(queue, takers);
      } else {
        unsafeOfferAll(takers, pipe(unsafePollAll(takers), prepend3(taker)));
      }
      keepPolling = true;
    } else {
      keepPolling = false;
    }
  }
  if (keepPolling && queue.length() === 0 && !isEmpty10(takers)) {
    strategy.onCompleteTakersWithEmptyQueue(takers);
  }
};
var init_queue = __esm(() => {
  init_Array();
  init_Chunk();
  init_Effectable();
  init_Function();
  init_MutableQueue();
  init_MutableRef();
  init_Option();
  init_Predicate();
  init_core();
  init_fiberRuntime();
  EnqueueTypeId = /* @__PURE__ */ Symbol.for(EnqueueSymbolKey);
  DequeueTypeId = /* @__PURE__ */ Symbol.for(DequeueSymbolKey);
  QueueStrategyTypeId = /* @__PURE__ */ Symbol.for(QueueStrategySymbolKey);
  BackingQueueTypeId = /* @__PURE__ */ Symbol.for(BackingQueueSymbolKey);
  queueStrategyVariance = {
    _A: (_) => _
  };
  backingQueueVariance = {
    _A: (_) => _
  };
  enqueueVariance = {
    _In: (_) => _
  };
  dequeueVariance = {
    _Out: (_) => _
  };
  QueueImpl = class QueueImpl extends Class2 {
    queue;
    takers;
    shutdownHook;
    shutdownFlag;
    strategy;
    [EnqueueTypeId] = enqueueVariance;
    [DequeueTypeId] = dequeueVariance;
    constructor(queue, takers, shutdownHook, shutdownFlag, strategy) {
      super();
      this.queue = queue;
      this.takers = takers;
      this.shutdownHook = shutdownHook;
      this.shutdownFlag = shutdownFlag;
      this.strategy = strategy;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    commit() {
      return this.take;
    }
    capacity() {
      return this.queue.capacity();
    }
    get size() {
      return suspend(() => catchAll(this.unsafeSize(), () => interrupt2));
    }
    unsafeSize() {
      if (get8(this.shutdownFlag)) {
        return none2();
      }
      return some3(this.queue.length() - length3(this.takers) + this.strategy.surplusSize());
    }
    get isEmpty() {
      return map14(this.size, (size17) => size17 <= 0);
    }
    get isFull() {
      return map14(this.size, (size17) => size17 >= this.capacity());
    }
    get shutdown() {
      return uninterruptible(withFiberRuntime((state) => {
        pipe(this.shutdownFlag, set3(true));
        return pipe(forEachConcurrentDiscard(unsafePollAll(this.takers), (d) => deferredInterruptWith(d, state.id()), false, false), zipRight2(this.strategy.shutdown), whenEffect(deferredSucceed(this.shutdownHook, undefined)), asVoid2);
      }));
    }
    get isShutdown() {
      return sync(() => get8(this.shutdownFlag));
    }
    get awaitShutdown() {
      return deferredAwait(this.shutdownHook);
    }
    isActive() {
      return !get8(this.shutdownFlag);
    }
    unsafeOffer(value2) {
      if (get8(this.shutdownFlag)) {
        return false;
      }
      let noRemaining;
      if (this.queue.length() === 0) {
        const taker = pipe(this.takers, poll2(EmptyMutableQueue));
        if (taker !== EmptyMutableQueue) {
          unsafeCompleteDeferred(taker, value2);
          noRemaining = true;
        } else {
          noRemaining = false;
        }
      } else {
        noRemaining = false;
      }
      if (noRemaining) {
        return true;
      }
      const succeeded = this.queue.offer(value2);
      unsafeCompleteTakers(this.strategy, this.queue, this.takers);
      return succeeded;
    }
    offer(value2) {
      return suspend(() => {
        if (get8(this.shutdownFlag)) {
          return interrupt2;
        }
        let noRemaining;
        if (this.queue.length() === 0) {
          const taker = pipe(this.takers, poll2(EmptyMutableQueue));
          if (taker !== EmptyMutableQueue) {
            unsafeCompleteDeferred(taker, value2);
            noRemaining = true;
          } else {
            noRemaining = false;
          }
        } else {
          noRemaining = false;
        }
        if (noRemaining) {
          return succeed(true);
        }
        const succeeded = this.queue.offer(value2);
        unsafeCompleteTakers(this.strategy, this.queue, this.takers);
        return succeeded ? succeed(true) : this.strategy.handleSurplus([value2], this.queue, this.takers, this.shutdownFlag);
      });
    }
    offerAll(iterable) {
      return suspend(() => {
        if (get8(this.shutdownFlag)) {
          return interrupt2;
        }
        const values10 = fromIterable2(iterable);
        const pTakers = this.queue.length() === 0 ? fromIterable2(unsafePollN(this.takers, values10.length)) : empty4;
        const [forTakers, remaining] = pipe(values10, splitAt(pTakers.length));
        for (let i2 = 0;i2 < pTakers.length; i2++) {
          const taker = pTakers[i2];
          const item = forTakers[i2];
          unsafeCompleteDeferred(taker, item);
        }
        if (remaining.length === 0) {
          return succeed(true);
        }
        const surplus = this.queue.offerAll(remaining);
        unsafeCompleteTakers(this.strategy, this.queue, this.takers);
        return isEmpty2(surplus) ? succeed(true) : this.strategy.handleSurplus(surplus, this.queue, this.takers, this.shutdownFlag);
      });
    }
    get take() {
      return withFiberRuntime((state) => {
        if (get8(this.shutdownFlag)) {
          return interrupt2;
        }
        const item = this.queue.poll(EmptyMutableQueue);
        if (item !== EmptyMutableQueue) {
          this.strategy.unsafeOnQueueEmptySpace(this.queue, this.takers);
          return succeed(item);
        } else {
          const deferred = deferredUnsafeMake(state.id());
          return pipe(suspend(() => {
            pipe(this.takers, offer(deferred));
            unsafeCompleteTakers(this.strategy, this.queue, this.takers);
            return get8(this.shutdownFlag) ? interrupt2 : deferredAwait(deferred);
          }), onInterrupt(() => {
            return sync(() => unsafeRemove(this.takers, deferred));
          }));
        }
      });
    }
    get takeAll() {
      return suspend(() => {
        return get8(this.shutdownFlag) ? interrupt2 : sync(() => {
          const values10 = this.queue.pollUpTo(Number.POSITIVE_INFINITY);
          this.strategy.unsafeOnQueueEmptySpace(this.queue, this.takers);
          return fromIterable3(values10);
        });
      });
    }
    takeUpTo(max13) {
      return suspend(() => get8(this.shutdownFlag) ? interrupt2 : sync(() => {
        const values10 = this.queue.pollUpTo(max13);
        this.strategy.unsafeOnQueueEmptySpace(this.queue, this.takers);
        return fromIterable3(values10);
      }));
    }
    takeBetween(min10, max13) {
      return suspend(() => takeRemainderLoop(this, min10, max13, empty7()));
    }
  };
  BackingQueueFromMutableQueue = class BackingQueueFromMutableQueue {
    mutable;
    [BackingQueueTypeId] = backingQueueVariance;
    constructor(mutable2) {
      this.mutable = mutable2;
    }
    poll(def) {
      return poll2(this.mutable, def);
    }
    pollUpTo(limit) {
      return pollUpTo(this.mutable, limit);
    }
    offerAll(elements) {
      return offerAll(this.mutable, elements);
    }
    offer(element) {
      return offer(this.mutable, element);
    }
    capacity() {
      return capacity(this.mutable);
    }
    length() {
      return length3(this.mutable);
    }
  };
  offer2 = /* @__PURE__ */ dual(2, (self, value2) => self.offer(value2));
  unsafeOffer = /* @__PURE__ */ dual(2, (self, value2) => self.unsafeOffer(value2));
  offerAll2 = /* @__PURE__ */ dual(2, (self, iterable) => self.offerAll(iterable));
  takeUpTo = /* @__PURE__ */ dual(2, (self, max13) => self.takeUpTo(max13));
  takeBetween = /* @__PURE__ */ dual(3, (self, min10, max13) => self.takeBetween(min10, max13));
  takeN = /* @__PURE__ */ dual(2, (self, n) => self.takeBetween(n, n));
  BackPressureStrategy = class BackPressureStrategy {
    [QueueStrategyTypeId] = queueStrategyVariance;
    putters = /* @__PURE__ */ unbounded();
    surplusSize() {
      return length3(this.putters);
    }
    onCompleteTakersWithEmptyQueue(takers) {
      while (!isEmpty10(this.putters) && !isEmpty10(takers)) {
        const taker = poll2(takers, undefined);
        const putter = poll2(this.putters, undefined);
        if (putter[2]) {
          unsafeCompleteDeferred(putter[1], true);
        }
        unsafeCompleteDeferred(taker, putter[0]);
      }
    }
    get shutdown() {
      return pipe(fiberId, flatMap12((fiberId3) => pipe(sync(() => unsafePollAll(this.putters)), flatMap12((putters) => forEachConcurrentDiscard(putters, ([_, deferred, isLastItem]) => isLastItem ? pipe(deferredInterruptWith(deferred, fiberId3), asVoid2) : void_3, false, false)))));
    }
    handleSurplus(iterable, queue, takers, isShutdown2) {
      return withFiberRuntime((state) => {
        const deferred = deferredUnsafeMake(state.id());
        return pipe(suspend(() => {
          this.unsafeOffer(iterable, deferred);
          this.unsafeOnQueueEmptySpace(queue, takers);
          unsafeCompleteTakers(this, queue, takers);
          return get8(isShutdown2) ? interrupt2 : deferredAwait(deferred);
        }), onInterrupt(() => sync(() => this.unsafeRemove(deferred))));
      });
    }
    unsafeOnQueueEmptySpace(queue, takers) {
      let keepPolling = true;
      while (keepPolling && (queue.capacity() === Number.POSITIVE_INFINITY || queue.length() < queue.capacity())) {
        const putter = pipe(this.putters, poll2(EmptyMutableQueue));
        if (putter === EmptyMutableQueue) {
          keepPolling = false;
        } else {
          const offered = queue.offer(putter[0]);
          if (offered && putter[2]) {
            unsafeCompleteDeferred(putter[1], true);
          } else if (!offered) {
            unsafeOfferAll(this.putters, pipe(unsafePollAll(this.putters), prepend3(putter)));
          }
          unsafeCompleteTakers(this, queue, takers);
        }
      }
    }
    unsafeOffer(iterable, deferred) {
      const stuff = fromIterable2(iterable);
      for (let i2 = 0;i2 < stuff.length; i2++) {
        const value2 = stuff[i2];
        if (i2 === stuff.length - 1) {
          pipe(this.putters, offer([value2, deferred, true]));
        } else {
          pipe(this.putters, offer([value2, deferred, false]));
        }
      }
    }
    unsafeRemove(deferred) {
      unsafeOfferAll(this.putters, pipe(unsafePollAll(this.putters), filter5(([, _]) => _ !== deferred)));
    }
  };
  DroppingStrategy = class DroppingStrategy {
    [QueueStrategyTypeId] = queueStrategyVariance;
    surplusSize() {
      return 0;
    }
    get shutdown() {
      return void_3;
    }
    onCompleteTakersWithEmptyQueue() {}
    handleSurplus(_iterable, _queue, _takers, _isShutdown) {
      return succeed(false);
    }
    unsafeOnQueueEmptySpace(_queue, _takers) {}
  };
  SlidingStrategy = class SlidingStrategy {
    [QueueStrategyTypeId] = queueStrategyVariance;
    surplusSize() {
      return 0;
    }
    get shutdown() {
      return void_3;
    }
    onCompleteTakersWithEmptyQueue() {}
    handleSurplus(iterable, queue, takers, _isShutdown) {
      return sync(() => {
        this.unsafeOffer(queue, iterable);
        unsafeCompleteTakers(this, queue, takers);
        return true;
      });
    }
    unsafeOnQueueEmptySpace(_queue, _takers) {}
    unsafeOffer(queue, iterable) {
      const iterator = iterable[Symbol.iterator]();
      let next4;
      let offering = true;
      while (!(next4 = iterator.next()).done && offering) {
        if (queue.capacity() === 0) {
          return;
        }
        queue.poll(EmptyMutableQueue);
        offering = queue.offer(next4.value);
      }
    }
  };
});

// node_modules/effect/dist/esm/internal/pubsub.js
class BoundedPubSubArb {
  capacity;
  replayBuffer;
  array;
  publisherIndex = 0;
  subscribers;
  subscriberCount = 0;
  subscribersIndex = 0;
  constructor(capacity4, replayBuffer) {
    this.capacity = capacity4;
    this.replayBuffer = replayBuffer;
    this.array = Array.from({
      length: capacity4
    });
    this.subscribers = Array.from({
      length: capacity4
    });
  }
  replayWindow() {
    return this.replayBuffer ? new ReplayWindowImpl(this.replayBuffer) : emptyReplayWindow;
  }
  isEmpty() {
    return this.publisherIndex === this.subscribersIndex;
  }
  isFull() {
    return this.publisherIndex === this.subscribersIndex + this.capacity;
  }
  size() {
    return this.publisherIndex - this.subscribersIndex;
  }
  publish(value2) {
    if (this.isFull()) {
      return false;
    }
    if (this.subscriberCount !== 0) {
      const index = this.publisherIndex % this.capacity;
      this.array[index] = value2;
      this.subscribers[index] = this.subscriberCount;
      this.publisherIndex += 1;
    }
    if (this.replayBuffer) {
      this.replayBuffer.offer(value2);
    }
    return true;
  }
  publishAll(elements) {
    if (this.subscriberCount === 0) {
      if (this.replayBuffer) {
        this.replayBuffer.offerAll(elements);
      }
      return empty7();
    }
    const chunk3 = fromIterable3(elements);
    const n = chunk3.length;
    const size19 = this.publisherIndex - this.subscribersIndex;
    const available = this.capacity - size19;
    const forPubSub = Math.min(n, available);
    if (forPubSub === 0) {
      return chunk3;
    }
    let iteratorIndex = 0;
    const publishAllIndex = this.publisherIndex + forPubSub;
    while (this.publisherIndex !== publishAllIndex) {
      const a = unsafeGet4(chunk3, iteratorIndex++);
      const index = this.publisherIndex % this.capacity;
      this.array[index] = a;
      this.subscribers[index] = this.subscriberCount;
      this.publisherIndex += 1;
      if (this.replayBuffer) {
        this.replayBuffer.offer(a);
      }
    }
    return drop3(chunk3, iteratorIndex);
  }
  slide() {
    if (this.subscribersIndex !== this.publisherIndex) {
      const index = this.subscribersIndex % this.capacity;
      this.array[index] = AbsentValue;
      this.subscribers[index] = 0;
      this.subscribersIndex += 1;
    }
    if (this.replayBuffer) {
      this.replayBuffer.slide();
    }
  }
  subscribe() {
    this.subscriberCount += 1;
    return new BoundedPubSubArbSubscription(this, this.publisherIndex, false);
  }
}

class BoundedPubSubArbSubscription {
  self;
  subscriberIndex;
  unsubscribed;
  constructor(self, subscriberIndex, unsubscribed) {
    this.self = self;
    this.subscriberIndex = subscriberIndex;
    this.unsubscribed = unsubscribed;
  }
  isEmpty() {
    return this.unsubscribed || this.self.publisherIndex === this.subscriberIndex || this.self.publisherIndex === this.self.subscribersIndex;
  }
  size() {
    if (this.unsubscribed) {
      return 0;
    }
    return this.self.publisherIndex - Math.max(this.subscriberIndex, this.self.subscribersIndex);
  }
  poll(default_) {
    if (this.unsubscribed) {
      return default_;
    }
    this.subscriberIndex = Math.max(this.subscriberIndex, this.self.subscribersIndex);
    if (this.subscriberIndex !== this.self.publisherIndex) {
      const index = this.subscriberIndex % this.self.capacity;
      const elem = this.self.array[index];
      this.self.subscribers[index] -= 1;
      if (this.self.subscribers[index] === 0) {
        this.self.array[index] = AbsentValue;
        this.self.subscribersIndex += 1;
      }
      this.subscriberIndex += 1;
      return elem;
    }
    return default_;
  }
  pollUpTo(n) {
    if (this.unsubscribed) {
      return empty7();
    }
    this.subscriberIndex = Math.max(this.subscriberIndex, this.self.subscribersIndex);
    const size19 = this.self.publisherIndex - this.subscriberIndex;
    const toPoll = Math.min(n, size19);
    if (toPoll <= 0) {
      return empty7();
    }
    const builder = [];
    const pollUpToIndex = this.subscriberIndex + toPoll;
    while (this.subscriberIndex !== pollUpToIndex) {
      const index = this.subscriberIndex % this.self.capacity;
      const a = this.self.array[index];
      this.self.subscribers[index] -= 1;
      if (this.self.subscribers[index] === 0) {
        this.self.array[index] = AbsentValue;
        this.self.subscribersIndex += 1;
      }
      builder.push(a);
      this.subscriberIndex += 1;
    }
    return fromIterable3(builder);
  }
  unsubscribe() {
    if (!this.unsubscribed) {
      this.unsubscribed = true;
      this.self.subscriberCount -= 1;
      this.subscriberIndex = Math.max(this.subscriberIndex, this.self.subscribersIndex);
      while (this.subscriberIndex !== this.self.publisherIndex) {
        const index = this.subscriberIndex % this.self.capacity;
        this.self.subscribers[index] -= 1;
        if (this.self.subscribers[index] === 0) {
          this.self.array[index] = AbsentValue;
          this.self.subscribersIndex += 1;
        }
        this.subscriberIndex += 1;
      }
    }
  }
}

class BoundedPubSubPow2 {
  capacity;
  replayBuffer;
  array;
  mask;
  publisherIndex = 0;
  subscribers;
  subscriberCount = 0;
  subscribersIndex = 0;
  constructor(capacity4, replayBuffer) {
    this.capacity = capacity4;
    this.replayBuffer = replayBuffer;
    this.array = Array.from({
      length: capacity4
    });
    this.mask = capacity4 - 1;
    this.subscribers = Array.from({
      length: capacity4
    });
  }
  replayWindow() {
    return this.replayBuffer ? new ReplayWindowImpl(this.replayBuffer) : emptyReplayWindow;
  }
  isEmpty() {
    return this.publisherIndex === this.subscribersIndex;
  }
  isFull() {
    return this.publisherIndex === this.subscribersIndex + this.capacity;
  }
  size() {
    return this.publisherIndex - this.subscribersIndex;
  }
  publish(value2) {
    if (this.isFull()) {
      return false;
    }
    if (this.subscriberCount !== 0) {
      const index = this.publisherIndex & this.mask;
      this.array[index] = value2;
      this.subscribers[index] = this.subscriberCount;
      this.publisherIndex += 1;
    }
    if (this.replayBuffer) {
      this.replayBuffer.offer(value2);
    }
    return true;
  }
  publishAll(elements) {
    if (this.subscriberCount === 0) {
      if (this.replayBuffer) {
        this.replayBuffer.offerAll(elements);
      }
      return empty7();
    }
    const chunk3 = fromIterable3(elements);
    const n = chunk3.length;
    const size19 = this.publisherIndex - this.subscribersIndex;
    const available = this.capacity - size19;
    const forPubSub = Math.min(n, available);
    if (forPubSub === 0) {
      return chunk3;
    }
    let iteratorIndex = 0;
    const publishAllIndex = this.publisherIndex + forPubSub;
    while (this.publisherIndex !== publishAllIndex) {
      const elem = unsafeGet4(chunk3, iteratorIndex++);
      const index = this.publisherIndex & this.mask;
      this.array[index] = elem;
      this.subscribers[index] = this.subscriberCount;
      this.publisherIndex += 1;
      if (this.replayBuffer) {
        this.replayBuffer.offer(elem);
      }
    }
    return drop3(chunk3, iteratorIndex);
  }
  slide() {
    if (this.subscribersIndex !== this.publisherIndex) {
      const index = this.subscribersIndex & this.mask;
      this.array[index] = AbsentValue;
      this.subscribers[index] = 0;
      this.subscribersIndex += 1;
    }
    if (this.replayBuffer) {
      this.replayBuffer.slide();
    }
  }
  subscribe() {
    this.subscriberCount += 1;
    return new BoundedPubSubPow2Subscription(this, this.publisherIndex, false);
  }
}

class BoundedPubSubPow2Subscription {
  self;
  subscriberIndex;
  unsubscribed;
  constructor(self, subscriberIndex, unsubscribed) {
    this.self = self;
    this.subscriberIndex = subscriberIndex;
    this.unsubscribed = unsubscribed;
  }
  isEmpty() {
    return this.unsubscribed || this.self.publisherIndex === this.subscriberIndex || this.self.publisherIndex === this.self.subscribersIndex;
  }
  size() {
    if (this.unsubscribed) {
      return 0;
    }
    return this.self.publisherIndex - Math.max(this.subscriberIndex, this.self.subscribersIndex);
  }
  poll(default_) {
    if (this.unsubscribed) {
      return default_;
    }
    this.subscriberIndex = Math.max(this.subscriberIndex, this.self.subscribersIndex);
    if (this.subscriberIndex !== this.self.publisherIndex) {
      const index = this.subscriberIndex & this.self.mask;
      const elem = this.self.array[index];
      this.self.subscribers[index] -= 1;
      if (this.self.subscribers[index] === 0) {
        this.self.array[index] = AbsentValue;
        this.self.subscribersIndex += 1;
      }
      this.subscriberIndex += 1;
      return elem;
    }
    return default_;
  }
  pollUpTo(n) {
    if (this.unsubscribed) {
      return empty7();
    }
    this.subscriberIndex = Math.max(this.subscriberIndex, this.self.subscribersIndex);
    const size19 = this.self.publisherIndex - this.subscriberIndex;
    const toPoll = Math.min(n, size19);
    if (toPoll <= 0) {
      return empty7();
    }
    const builder = [];
    const pollUpToIndex = this.subscriberIndex + toPoll;
    while (this.subscriberIndex !== pollUpToIndex) {
      const index = this.subscriberIndex & this.self.mask;
      const elem = this.self.array[index];
      this.self.subscribers[index] -= 1;
      if (this.self.subscribers[index] === 0) {
        this.self.array[index] = AbsentValue;
        this.self.subscribersIndex += 1;
      }
      builder.push(elem);
      this.subscriberIndex += 1;
    }
    return fromIterable3(builder);
  }
  unsubscribe() {
    if (!this.unsubscribed) {
      this.unsubscribed = true;
      this.self.subscriberCount -= 1;
      this.subscriberIndex = Math.max(this.subscriberIndex, this.self.subscribersIndex);
      while (this.subscriberIndex !== this.self.publisherIndex) {
        const index = this.subscriberIndex & this.self.mask;
        this.self.subscribers[index] -= 1;
        if (this.self.subscribers[index] === 0) {
          this.self.array[index] = AbsentValue;
          this.self.subscribersIndex += 1;
        }
        this.subscriberIndex += 1;
      }
    }
  }
}

class BoundedPubSubSingle {
  replayBuffer;
  publisherIndex = 0;
  subscriberCount = 0;
  subscribers = 0;
  value = AbsentValue;
  capacity = 1;
  constructor(replayBuffer) {
    this.replayBuffer = replayBuffer;
  }
  replayWindow() {
    return this.replayBuffer ? new ReplayWindowImpl(this.replayBuffer) : emptyReplayWindow;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
  isEmpty() {
    return this.subscribers === 0;
  }
  isFull() {
    return !this.isEmpty();
  }
  size() {
    return this.isEmpty() ? 0 : 1;
  }
  publish(value2) {
    if (this.isFull()) {
      return false;
    }
    if (this.subscriberCount !== 0) {
      this.value = value2;
      this.subscribers = this.subscriberCount;
      this.publisherIndex += 1;
    }
    if (this.replayBuffer) {
      this.replayBuffer.offer(value2);
    }
    return true;
  }
  publishAll(elements) {
    if (this.subscriberCount === 0) {
      if (this.replayBuffer) {
        this.replayBuffer.offerAll(elements);
      }
      return empty7();
    }
    const chunk3 = fromIterable3(elements);
    if (isEmpty2(chunk3)) {
      return chunk3;
    }
    if (this.publish(unsafeHead2(chunk3))) {
      return drop3(chunk3, 1);
    } else {
      return chunk3;
    }
  }
  slide() {
    if (this.isFull()) {
      this.subscribers = 0;
      this.value = AbsentValue;
    }
    if (this.replayBuffer) {
      this.replayBuffer.slide();
    }
  }
  subscribe() {
    this.subscriberCount += 1;
    return new BoundedPubSubSingleSubscription(this, this.publisherIndex, false);
  }
}

class BoundedPubSubSingleSubscription {
  self;
  subscriberIndex;
  unsubscribed;
  constructor(self, subscriberIndex, unsubscribed) {
    this.self = self;
    this.subscriberIndex = subscriberIndex;
    this.unsubscribed = unsubscribed;
  }
  isEmpty() {
    return this.unsubscribed || this.self.subscribers === 0 || this.subscriberIndex === this.self.publisherIndex;
  }
  size() {
    return this.isEmpty() ? 0 : 1;
  }
  poll(default_) {
    if (this.isEmpty()) {
      return default_;
    }
    const elem = this.self.value;
    this.self.subscribers -= 1;
    if (this.self.subscribers === 0) {
      this.self.value = AbsentValue;
    }
    this.subscriberIndex += 1;
    return elem;
  }
  pollUpTo(n) {
    if (this.isEmpty() || n < 1) {
      return empty7();
    }
    const a = this.self.value;
    this.self.subscribers -= 1;
    if (this.self.subscribers === 0) {
      this.self.value = AbsentValue;
    }
    this.subscriberIndex += 1;
    return of3(a);
  }
  unsubscribe() {
    if (!this.unsubscribed) {
      this.unsubscribed = true;
      this.self.subscriberCount -= 1;
      if (this.subscriberIndex !== this.self.publisherIndex) {
        this.self.subscribers -= 1;
        if (this.self.subscribers === 0) {
          this.self.value = AbsentValue;
        }
      }
    }
  }
}

class UnboundedPubSub {
  replayBuffer;
  publisherHead = {
    value: AbsentValue,
    subscribers: 0,
    next: null
  };
  publisherTail = this.publisherHead;
  publisherIndex = 0;
  subscribersIndex = 0;
  capacity = Number.MAX_SAFE_INTEGER;
  constructor(replayBuffer) {
    this.replayBuffer = replayBuffer;
  }
  replayWindow() {
    return this.replayBuffer ? new ReplayWindowImpl(this.replayBuffer) : emptyReplayWindow;
  }
  isEmpty() {
    return this.publisherHead === this.publisherTail;
  }
  isFull() {
    return false;
  }
  size() {
    return this.publisherIndex - this.subscribersIndex;
  }
  publish(value2) {
    const subscribers = this.publisherTail.subscribers;
    if (subscribers !== 0) {
      this.publisherTail.next = {
        value: value2,
        subscribers,
        next: null
      };
      this.publisherTail = this.publisherTail.next;
      this.publisherIndex += 1;
    }
    if (this.replayBuffer) {
      this.replayBuffer.offer(value2);
    }
    return true;
  }
  publishAll(elements) {
    if (this.publisherTail.subscribers !== 0) {
      for (const a of elements) {
        this.publish(a);
      }
    } else if (this.replayBuffer) {
      this.replayBuffer.offerAll(elements);
    }
    return empty7();
  }
  slide() {
    if (this.publisherHead !== this.publisherTail) {
      this.publisherHead = this.publisherHead.next;
      this.publisherHead.value = AbsentValue;
      this.subscribersIndex += 1;
    }
    if (this.replayBuffer) {
      this.replayBuffer.slide();
    }
  }
  subscribe() {
    this.publisherTail.subscribers += 1;
    return new UnboundedPubSubSubscription(this, this.publisherTail, this.publisherIndex, false);
  }
}

class UnboundedPubSubSubscription {
  self;
  subscriberHead;
  subscriberIndex;
  unsubscribed;
  constructor(self, subscriberHead, subscriberIndex, unsubscribed) {
    this.self = self;
    this.subscriberHead = subscriberHead;
    this.subscriberIndex = subscriberIndex;
    this.unsubscribed = unsubscribed;
  }
  isEmpty() {
    if (this.unsubscribed) {
      return true;
    }
    let empty43 = true;
    let loop3 = true;
    while (loop3) {
      if (this.subscriberHead === this.self.publisherTail) {
        loop3 = false;
      } else {
        if (this.subscriberHead.next.value !== AbsentValue) {
          empty43 = false;
          loop3 = false;
        } else {
          this.subscriberHead = this.subscriberHead.next;
          this.subscriberIndex += 1;
        }
      }
    }
    return empty43;
  }
  size() {
    if (this.unsubscribed) {
      return 0;
    }
    return this.self.publisherIndex - Math.max(this.subscriberIndex, this.self.subscribersIndex);
  }
  poll(default_) {
    if (this.unsubscribed) {
      return default_;
    }
    let loop3 = true;
    let polled = default_;
    while (loop3) {
      if (this.subscriberHead === this.self.publisherTail) {
        loop3 = false;
      } else {
        const elem = this.subscriberHead.next.value;
        if (elem !== AbsentValue) {
          polled = elem;
          this.subscriberHead.subscribers -= 1;
          if (this.subscriberHead.subscribers === 0) {
            this.self.publisherHead = this.self.publisherHead.next;
            this.self.publisherHead.value = AbsentValue;
            this.self.subscribersIndex += 1;
          }
          loop3 = false;
        }
        this.subscriberHead = this.subscriberHead.next;
        this.subscriberIndex += 1;
      }
    }
    return polled;
  }
  pollUpTo(n) {
    const builder = [];
    const default_ = AbsentValue;
    let i2 = 0;
    while (i2 !== n) {
      const a = this.poll(default_);
      if (a === default_) {
        i2 = n;
      } else {
        builder.push(a);
        i2 += 1;
      }
    }
    return fromIterable3(builder);
  }
  unsubscribe() {
    if (!this.unsubscribed) {
      this.unsubscribed = true;
      this.self.publisherTail.subscribers -= 1;
      while (this.subscriberHead !== this.self.publisherTail) {
        if (this.subscriberHead.next.value !== AbsentValue) {
          this.subscriberHead.subscribers -= 1;
          if (this.subscriberHead.subscribers === 0) {
            this.self.publisherHead = this.self.publisherHead.next;
            this.self.publisherHead.value = AbsentValue;
            this.self.subscribersIndex += 1;
          }
        }
        this.subscriberHead = this.subscriberHead.next;
      }
    }
  }
}

class BackPressureStrategy2 {
  publishers = /* @__PURE__ */ unbounded();
  get shutdown() {
    return flatMap12(fiberId, (fiberId3) => flatMap12(sync(() => unsafePollAllQueue(this.publishers)), (publishers) => forEachConcurrentDiscard(publishers, ([_, deferred, last6]) => last6 ? pipe(deferredInterruptWith(deferred, fiberId3), asVoid2) : void_3, false, false)));
  }
  handleSurplus(pubsub, subscribers, elements, isShutdown3) {
    return withFiberRuntime((state) => {
      const deferred = deferredUnsafeMake(state.id());
      return pipe(suspend(() => {
        this.unsafeOffer(elements, deferred);
        this.unsafeOnPubSubEmptySpace(pubsub, subscribers);
        this.unsafeCompleteSubscribers(pubsub, subscribers);
        return get8(isShutdown3) ? interrupt2 : deferredAwait(deferred);
      }), onInterrupt(() => sync(() => this.unsafeRemove(deferred))));
    });
  }
  unsafeOnPubSubEmptySpace(pubsub, subscribers) {
    let keepPolling = true;
    while (keepPolling && !pubsub.isFull()) {
      const publisher = pipe(this.publishers, poll2(EmptyMutableQueue));
      if (publisher === EmptyMutableQueue) {
        keepPolling = false;
      } else {
        const published = pubsub.publish(publisher[0]);
        if (published && publisher[2]) {
          unsafeCompleteDeferred2(publisher[1], true);
        } else if (!published) {
          unsafeOfferAll2(this.publishers, pipe(unsafePollAllQueue(this.publishers), prepend3(publisher)));
        }
        this.unsafeCompleteSubscribers(pubsub, subscribers);
      }
    }
  }
  unsafeCompletePollers(pubsub, subscribers, subscription, pollers) {
    return unsafeStrategyCompletePollers(this, pubsub, subscribers, subscription, pollers);
  }
  unsafeCompleteSubscribers(pubsub, subscribers) {
    return unsafeStrategyCompleteSubscribers(this, pubsub, subscribers);
  }
  unsafeOffer(elements, deferred) {
    const iterator = elements[Symbol.iterator]();
    let next4 = iterator.next();
    if (!next4.done) {
      while (true) {
        const value2 = next4.value;
        next4 = iterator.next();
        if (next4.done) {
          pipe(this.publishers, offer([value2, deferred, true]));
          break;
        }
        pipe(this.publishers, offer([value2, deferred, false]));
      }
    }
  }
  unsafeRemove(deferred) {
    unsafeOfferAll2(this.publishers, pipe(unsafePollAllQueue(this.publishers), filter5(([_, a]) => a !== deferred)));
  }
}

class DroppingStrategy2 {
  get shutdown() {
    return void_3;
  }
  handleSurplus(_pubsub, _subscribers, _elements, _isShutdown) {
    return succeed(false);
  }
  unsafeOnPubSubEmptySpace(_pubsub, _subscribers) {}
  unsafeCompletePollers(pubsub, subscribers, subscription, pollers) {
    return unsafeStrategyCompletePollers(this, pubsub, subscribers, subscription, pollers);
  }
  unsafeCompleteSubscribers(pubsub, subscribers) {
    return unsafeStrategyCompleteSubscribers(this, pubsub, subscribers);
  }
}

class SlidingStrategy2 {
  get shutdown() {
    return void_3;
  }
  handleSurplus(pubsub, subscribers, elements, _isShutdown) {
    return sync(() => {
      this.unsafeSlidingPublish(pubsub, elements);
      this.unsafeCompleteSubscribers(pubsub, subscribers);
      return true;
    });
  }
  unsafeOnPubSubEmptySpace(_pubsub, _subscribers) {}
  unsafeCompletePollers(pubsub, subscribers, subscription, pollers) {
    return unsafeStrategyCompletePollers(this, pubsub, subscribers, subscription, pollers);
  }
  unsafeCompleteSubscribers(pubsub, subscribers) {
    return unsafeStrategyCompleteSubscribers(this, pubsub, subscribers);
  }
  unsafeSlidingPublish(pubsub, elements) {
    const it = elements[Symbol.iterator]();
    let next4 = it.next();
    if (!next4.done && pubsub.capacity > 0) {
      let a = next4.value;
      let loop3 = true;
      while (loop3) {
        pubsub.slide();
        const pub = pubsub.publish(a);
        if (pub && (next4 = it.next()) && !next4.done) {
          a = next4.value;
        } else if (pub) {
          loop3 = false;
        }
      }
    }
  }
}

class ReplayBuffer {
  capacity;
  constructor(capacity4) {
    this.capacity = capacity4;
  }
  head = {
    value: AbsentValue,
    next: null
  };
  tail = this.head;
  size = 0;
  index = 0;
  slide() {
    this.index++;
  }
  offer(a) {
    this.tail.value = a;
    this.tail.next = {
      value: AbsentValue,
      next: null
    };
    this.tail = this.tail.next;
    if (this.size === this.capacity) {
      this.head = this.head.next;
    } else {
      this.size += 1;
    }
  }
  offerAll(as9) {
    for (const a of as9) {
      this.offer(a);
    }
  }
}

class ReplayWindowImpl {
  buffer;
  head;
  index;
  remaining;
  constructor(buffer) {
    this.buffer = buffer;
    this.index = buffer.index;
    this.remaining = buffer.size;
    this.head = buffer.head;
  }
  fastForward() {
    while (this.index < this.buffer.index) {
      this.head = this.head.next;
      this.index++;
    }
  }
  take() {
    if (this.remaining === 0) {
      return;
    } else if (this.index < this.buffer.index) {
      this.fastForward();
    }
    this.remaining--;
    const value2 = this.head.value;
    this.head = this.head.next;
    return value2;
  }
  takeN(n) {
    if (this.remaining === 0) {
      return empty7();
    } else if (this.index < this.buffer.index) {
      this.fastForward();
    }
    const len = Math.min(n, this.remaining);
    const items = new Array(len);
    for (let i2 = 0;i2 < len; i2++) {
      const value2 = this.head.value;
      this.head = this.head.next;
      items[i2] = value2;
    }
    this.remaining -= len;
    return unsafeFromArray(items);
  }
  takeAll() {
    return this.takeN(this.remaining);
  }
}
var AbsentValue, addSubscribers = (subscription, pollers) => (subscribers) => {
  if (!subscribers.has(subscription)) {
    subscribers.set(subscription, new Set);
  }
  const set10 = subscribers.get(subscription);
  set10.add(pollers);
}, removeSubscribers = (subscription, pollers) => (subscribers) => {
  if (!subscribers.has(subscription)) {
    return;
  }
  const set10 = subscribers.get(subscription);
  set10.delete(pollers);
  if (set10.size === 0) {
    subscribers.delete(subscription);
  }
}, bounded3 = (capacity3) => suspend(() => {
  const pubsub = makeBoundedPubSub(capacity3);
  return makePubSub(pubsub, new BackPressureStrategy2);
}), dropping2 = (capacity3) => suspend(() => {
  const pubsub = makeBoundedPubSub(capacity3);
  return makePubSub(pubsub, new DroppingStrategy2);
}), sliding2 = (capacity3) => suspend(() => {
  const pubsub = makeBoundedPubSub(capacity3);
  return makePubSub(pubsub, new SlidingStrategy2);
}), unbounded3 = (options) => suspend(() => {
  const pubsub = makeUnboundedPubSub(options);
  return makePubSub(pubsub, new DroppingStrategy2);
}), capacity3 = (self) => self.capacity(), size18 = (self) => self.size, isFull3 = (self) => self.isFull, isEmpty16 = (self) => self.isEmpty, shutdown2 = (self) => self.shutdown, isShutdown2 = (self) => self.isShutdown, awaitShutdown2 = (self) => self.awaitShutdown, publish, publishAll, subscribe = (self) => self.subscribe, makeBoundedPubSub = (capacity4) => {
  const options = typeof capacity4 === "number" ? {
    capacity: capacity4
  } : capacity4;
  ensureCapacity(options.capacity);
  const replayBuffer = options.replay && options.replay > 0 ? new ReplayBuffer(Math.ceil(options.replay)) : undefined;
  if (options.capacity === 1) {
    return new BoundedPubSubSingle(replayBuffer);
  } else if (nextPow2(options.capacity) === options.capacity) {
    return new BoundedPubSubPow2(options.capacity, replayBuffer);
  } else {
    return new BoundedPubSubArb(options.capacity, replayBuffer);
  }
}, makeUnboundedPubSub = (options) => new UnboundedPubSub(options?.replay ? new ReplayBuffer(options.replay) : undefined), makeSubscription = (pubsub, subscribers, strategy) => map14(deferredMake(), (deferred) => unsafeMakeSubscription(pubsub, subscribers, pubsub.subscribe(), unbounded(), deferred, make15(false), strategy)), unsafeMakeSubscription = (pubsub, subscribers, subscription, pollers, shutdownHook, shutdownFlag, strategy) => new SubscriptionImpl(pubsub, subscribers, subscription, pollers, shutdownHook, shutdownFlag, strategy, pubsub.replayWindow()), SubscriptionImpl, takeRemainderLoop2 = (self, min10, max13, acc) => {
  if (max13 < min10) {
    return succeed(acc);
  }
  return pipe(self.takeUpTo(max13), flatMap12((bs) => {
    const remaining = min10 - bs.length;
    if (remaining === 1) {
      return pipe(self.take, map14((b) => pipe(acc, appendAll3(bs), append3(b))));
    }
    if (remaining > 1) {
      return pipe(self.take, flatMap12((b) => takeRemainderLoop2(self, remaining - 1, max13 - bs.length - 1, pipe(acc, appendAll3(bs), append3(b)))));
    }
    return succeed(pipe(acc, appendAll3(bs)));
  }));
}, PubSubImpl, makePubSub = (pubsub, strategy) => flatMap12(scopeMake2(), (scope6) => map14(deferredMake(), (deferred) => unsafeMakePubSub(pubsub, new Map, scope6, deferred, make15(false), strategy))), unsafeMakePubSub = (pubsub, subscribers, scope6, shutdownHook, shutdownFlag, strategy) => new PubSubImpl(pubsub, subscribers, scope6, shutdownHook, shutdownFlag, strategy), ensureCapacity = (capacity4) => {
  if (capacity4 <= 0) {
    throw new InvalidPubSubCapacityException(`Cannot construct PubSub with capacity of ${capacity4}`);
  }
}, unsafeCompleteDeferred2 = (deferred, a) => {
  deferredUnsafeDone(deferred, succeed(a));
}, unsafeOfferAll2 = (queue, as9) => {
  return pipe(queue, offerAll(as9));
}, unsafePollAllQueue = (queue) => {
  return pipe(queue, pollUpTo(Number.POSITIVE_INFINITY));
}, unsafePollAllSubscription = (subscription) => {
  return subscription.pollUpTo(Number.POSITIVE_INFINITY);
}, unsafePollN2 = (subscription, max13) => {
  return subscription.pollUpTo(max13);
}, unsafePublishAll = (pubsub, as9) => {
  return pubsub.publishAll(as9);
}, unsafeRemove2 = (queue, value2) => {
  unsafeOfferAll2(queue, pipe(unsafePollAllQueue(queue), filter5((elem) => elem !== value2)));
}, unsafeStrategyCompletePollers = (strategy, pubsub, subscribers, subscription, pollers) => {
  let keepPolling = true;
  while (keepPolling && !subscription.isEmpty()) {
    const poller = pipe(pollers, poll2(EmptyMutableQueue));
    if (poller === EmptyMutableQueue) {
      pipe(subscribers, removeSubscribers(subscription, pollers));
      if (isEmpty10(pollers)) {
        keepPolling = false;
      } else {
        pipe(subscribers, addSubscribers(subscription, pollers));
      }
    } else {
      const pollResult = subscription.poll(EmptyMutableQueue);
      if (pollResult === EmptyMutableQueue) {
        unsafeOfferAll2(pollers, pipe(unsafePollAllQueue(pollers), prepend3(poller)));
      } else {
        unsafeCompleteDeferred2(poller, pollResult);
        strategy.unsafeOnPubSubEmptySpace(pubsub, subscribers);
      }
    }
  }
}, unsafeStrategyCompleteSubscribers = (strategy, pubsub, subscribers) => {
  for (const [subscription, pollersSet] of subscribers) {
    for (const pollers of pollersSet) {
      strategy.unsafeCompletePollers(pubsub, subscribers, subscription, pollers);
    }
  }
}, emptyReplayWindow;
var init_pubsub = __esm(() => {
  init_Chunk();
  init_Effectable();
  init_Function();
  init_MutableQueue();
  init_MutableRef();
  init_Number();
  init_Option();
  init_core();
  init_executionStrategy();
  init_fiberRuntime();
  init_queue();
  AbsentValue = /* @__PURE__ */ Symbol.for("effect/PubSub/AbsentValue");
  publish = /* @__PURE__ */ dual(2, (self, value2) => self.publish(value2));
  publishAll = /* @__PURE__ */ dual(2, (self, elements) => self.publishAll(elements));
  SubscriptionImpl = class SubscriptionImpl extends Class2 {
    pubsub;
    subscribers;
    subscription;
    pollers;
    shutdownHook;
    shutdownFlag;
    strategy;
    replayWindow;
    [DequeueTypeId] = dequeueVariance;
    constructor(pubsub, subscribers, subscription, pollers, shutdownHook, shutdownFlag, strategy, replayWindow) {
      super();
      this.pubsub = pubsub;
      this.subscribers = subscribers;
      this.subscription = subscription;
      this.pollers = pollers;
      this.shutdownHook = shutdownHook;
      this.shutdownFlag = shutdownFlag;
      this.strategy = strategy;
      this.replayWindow = replayWindow;
    }
    commit() {
      return this.take;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    capacity() {
      return this.pubsub.capacity;
    }
    isActive() {
      return !get8(this.shutdownFlag);
    }
    get size() {
      return suspend(() => get8(this.shutdownFlag) ? interrupt2 : succeed(this.subscription.size() + this.replayWindow.remaining));
    }
    unsafeSize() {
      if (get8(this.shutdownFlag)) {
        return none2();
      }
      return some3(this.subscription.size() + this.replayWindow.remaining);
    }
    get isFull() {
      return suspend(() => get8(this.shutdownFlag) ? interrupt2 : succeed(this.subscription.size() === this.capacity()));
    }
    get isEmpty() {
      return map14(this.size, (size19) => size19 === 0);
    }
    get shutdown() {
      return uninterruptible(withFiberRuntime((state) => {
        set3(this.shutdownFlag, true);
        return pipe(forEachParUnbounded(unsafePollAllQueue(this.pollers), (d) => deferredInterruptWith(d, state.id()), false), zipRight2(sync(() => {
          this.subscribers.delete(this.subscription);
          this.subscription.unsubscribe();
          this.strategy.unsafeOnPubSubEmptySpace(this.pubsub, this.subscribers);
        })), whenEffect(deferredSucceed(this.shutdownHook, undefined)), asVoid2);
      }));
    }
    get isShutdown() {
      return sync(() => get8(this.shutdownFlag));
    }
    get awaitShutdown() {
      return deferredAwait(this.shutdownHook);
    }
    get take() {
      return withFiberRuntime((state) => {
        if (get8(this.shutdownFlag)) {
          return interrupt2;
        }
        if (this.replayWindow.remaining > 0) {
          const message2 = this.replayWindow.take();
          return succeed(message2);
        }
        const message = isEmpty10(this.pollers) ? this.subscription.poll(EmptyMutableQueue) : EmptyMutableQueue;
        if (message === EmptyMutableQueue) {
          const deferred = deferredUnsafeMake(state.id());
          return pipe(suspend(() => {
            pipe(this.pollers, offer(deferred));
            pipe(this.subscribers, addSubscribers(this.subscription, this.pollers));
            this.strategy.unsafeCompletePollers(this.pubsub, this.subscribers, this.subscription, this.pollers);
            return get8(this.shutdownFlag) ? interrupt2 : deferredAwait(deferred);
          }), onInterrupt(() => sync(() => unsafeRemove2(this.pollers, deferred))));
        } else {
          this.strategy.unsafeOnPubSubEmptySpace(this.pubsub, this.subscribers);
          return succeed(message);
        }
      });
    }
    get takeAll() {
      return suspend(() => {
        if (get8(this.shutdownFlag)) {
          return interrupt2;
        }
        const as9 = isEmpty10(this.pollers) ? unsafePollAllSubscription(this.subscription) : empty7();
        this.strategy.unsafeOnPubSubEmptySpace(this.pubsub, this.subscribers);
        if (this.replayWindow.remaining > 0) {
          return succeed(appendAll3(this.replayWindow.takeAll(), as9));
        }
        return succeed(as9);
      });
    }
    takeUpTo(max13) {
      return suspend(() => {
        if (get8(this.shutdownFlag)) {
          return interrupt2;
        }
        let replay = undefined;
        if (this.replayWindow.remaining >= max13) {
          const as10 = this.replayWindow.takeN(max13);
          return succeed(as10);
        } else if (this.replayWindow.remaining > 0) {
          replay = this.replayWindow.takeAll();
          max13 = max13 - replay.length;
        }
        const as9 = isEmpty10(this.pollers) ? unsafePollN2(this.subscription, max13) : empty7();
        this.strategy.unsafeOnPubSubEmptySpace(this.pubsub, this.subscribers);
        return replay ? succeed(appendAll3(replay, as9)) : succeed(as9);
      });
    }
    takeBetween(min10, max13) {
      return suspend(() => takeRemainderLoop2(this, min10, max13, empty7()));
    }
  };
  PubSubImpl = class PubSubImpl {
    pubsub;
    subscribers;
    scope;
    shutdownHook;
    shutdownFlag;
    strategy;
    [EnqueueTypeId] = enqueueVariance;
    [DequeueTypeId] = dequeueVariance;
    constructor(pubsub, subscribers, scope6, shutdownHook, shutdownFlag, strategy) {
      this.pubsub = pubsub;
      this.subscribers = subscribers;
      this.scope = scope6;
      this.shutdownHook = shutdownHook;
      this.shutdownFlag = shutdownFlag;
      this.strategy = strategy;
    }
    capacity() {
      return this.pubsub.capacity;
    }
    get size() {
      return suspend(() => get8(this.shutdownFlag) ? interrupt2 : sync(() => this.pubsub.size()));
    }
    unsafeSize() {
      if (get8(this.shutdownFlag)) {
        return none2();
      }
      return some3(this.pubsub.size());
    }
    get isFull() {
      return map14(this.size, (size19) => size19 === this.capacity());
    }
    get isEmpty() {
      return map14(this.size, (size19) => size19 === 0);
    }
    get awaitShutdown() {
      return deferredAwait(this.shutdownHook);
    }
    get isShutdown() {
      return sync(() => get8(this.shutdownFlag));
    }
    get shutdown() {
      return uninterruptible(withFiberRuntime((state) => {
        pipe(this.shutdownFlag, set3(true));
        return pipe(this.scope.close(exitInterrupt(state.id())), zipRight2(this.strategy.shutdown), whenEffect(deferredSucceed(this.shutdownHook, undefined)), asVoid2);
      }));
    }
    publish(value2) {
      return suspend(() => {
        if (get8(this.shutdownFlag)) {
          return interrupt2;
        }
        if (this.pubsub.publish(value2)) {
          this.strategy.unsafeCompleteSubscribers(this.pubsub, this.subscribers);
          return succeed(true);
        }
        return this.strategy.handleSurplus(this.pubsub, this.subscribers, of3(value2), this.shutdownFlag);
      });
    }
    isActive() {
      return !get8(this.shutdownFlag);
    }
    unsafeOffer(value2) {
      if (get8(this.shutdownFlag)) {
        return false;
      }
      if (this.pubsub.publish(value2)) {
        this.strategy.unsafeCompleteSubscribers(this.pubsub, this.subscribers);
        return true;
      }
      return false;
    }
    publishAll(elements) {
      return suspend(() => {
        if (get8(this.shutdownFlag)) {
          return interrupt2;
        }
        const surplus = unsafePublishAll(this.pubsub, elements);
        this.strategy.unsafeCompleteSubscribers(this.pubsub, this.subscribers);
        if (isEmpty2(surplus)) {
          return succeed(true);
        }
        return this.strategy.handleSurplus(this.pubsub, this.subscribers, surplus, this.shutdownFlag);
      });
    }
    get subscribe() {
      const acquire = tap2(all9([this.scope.fork(sequential2), makeSubscription(this.pubsub, this.subscribers, this.strategy)]), (tuple6) => tuple6[0].addFinalizer(() => tuple6[1].shutdown));
      return map14(acquireRelease2(acquire, (tuple6, exit4) => tuple6[0].close(exit4)), (tuple6) => tuple6[1]);
    }
    offer(value2) {
      return this.publish(value2);
    }
    offerAll(elements) {
      return this.publishAll(elements);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  emptyReplayWindow = {
    remaining: 0,
    take: () => {
      return;
    },
    takeN: () => empty7(),
    takeAll: () => empty7()
  };
});

// node_modules/effect/dist/esm/PubSub.js
var exports_PubSub = {};
__export(exports_PubSub, {
  unbounded: () => unbounded4,
  subscribe: () => subscribe2,
  sliding: () => sliding3,
  size: () => size19,
  shutdown: () => shutdown3,
  publishAll: () => publishAll2,
  publish: () => publish2,
  isShutdown: () => isShutdown3,
  isFull: () => isFull4,
  isEmpty: () => isEmpty17,
  dropping: () => dropping3,
  capacity: () => capacity4,
  bounded: () => bounded4,
  awaitShutdown: () => awaitShutdown3
});
var bounded4, dropping3, sliding3, unbounded4, capacity4, size19, isFull4, isEmpty17, shutdown3, isShutdown3, awaitShutdown3, publish2, publishAll2, subscribe2;
var init_PubSub = __esm(() => {
  init_pubsub();
  bounded4 = bounded3;
  dropping3 = dropping2;
  sliding3 = sliding2;
  unbounded4 = unbounded3;
  capacity4 = capacity3;
  size19 = size18;
  isFull4 = isFull3;
  isEmpty17 = isEmpty16;
  shutdown3 = shutdown2;
  isShutdown3 = isShutdown2;
  awaitShutdown3 = awaitShutdown2;
  publish2 = publish;
  publishAll2 = publishAll;
  subscribe2 = subscribe;
});

// node_modules/effect/dist/esm/Queue.js
var exports_Queue = {};
__export(exports_Queue, {
  unsafeOffer: () => unsafeOffer2,
  unbounded: () => unbounded5,
  takeUpTo: () => takeUpTo2,
  takeN: () => takeN2,
  takeBetween: () => takeBetween2,
  takeAll: () => takeAll2,
  take: () => take6,
  slidingStrategy: () => slidingStrategy2,
  sliding: () => sliding4,
  size: () => size20,
  shutdown: () => shutdown4,
  poll: () => poll6,
  offerAll: () => offerAll3,
  offer: () => offer3,
  make: () => make62,
  isShutdown: () => isShutdown4,
  isQueue: () => isQueue2,
  isFull: () => isFull5,
  isEnqueue: () => isEnqueue2,
  isEmpty: () => isEmpty18,
  isDequeue: () => isDequeue2,
  droppingStrategy: () => droppingStrategy2,
  dropping: () => dropping4,
  capacity: () => capacity5,
  bounded: () => bounded5,
  backPressureStrategy: () => backPressureStrategy2,
  awaitShutdown: () => awaitShutdown4,
  QueueStrategyTypeId: () => QueueStrategyTypeId2,
  EnqueueTypeId: () => EnqueueTypeId2,
  DequeueTypeId: () => DequeueTypeId2,
  BackingQueueTypeId: () => BackingQueueTypeId2
});
var EnqueueTypeId2, DequeueTypeId2, QueueStrategyTypeId2, BackingQueueTypeId2, isQueue2, isDequeue2, isEnqueue2, backPressureStrategy2, droppingStrategy2, slidingStrategy2, make62, bounded5, dropping4, sliding4, unbounded5, capacity5, size20, isEmpty18, isFull5, isShutdown4, awaitShutdown4, shutdown4, offer3, unsafeOffer2, offerAll3, poll6, take6, takeAll2, takeUpTo2, takeBetween2, takeN2;
var init_Queue = __esm(() => {
  init_queue();
  EnqueueTypeId2 = EnqueueTypeId;
  DequeueTypeId2 = DequeueTypeId;
  QueueStrategyTypeId2 = QueueStrategyTypeId;
  BackingQueueTypeId2 = BackingQueueTypeId;
  isQueue2 = isQueue;
  isDequeue2 = isDequeue;
  isEnqueue2 = isEnqueue;
  backPressureStrategy2 = backPressureStrategy;
  droppingStrategy2 = droppingStrategy;
  slidingStrategy2 = slidingStrategy;
  make62 = make61;
  bounded5 = bounded2;
  dropping4 = dropping;
  sliding4 = sliding;
  unbounded5 = unbounded2;
  capacity5 = capacity2;
  size20 = size17;
  isEmpty18 = isEmpty15;
  isFull5 = isFull2;
  isShutdown4 = isShutdown;
  awaitShutdown4 = awaitShutdown;
  shutdown4 = shutdown;
  offer3 = offer2;
  unsafeOffer2 = unsafeOffer;
  offerAll3 = offerAll2;
  poll6 = poll5;
  take6 = take5;
  takeAll2 = takeAll;
  takeUpTo2 = takeUpTo;
  takeBetween2 = takeBetween;
  takeN2 = takeN;
});

// node_modules/effect/dist/esm/internal/opCodes/channelChildExecutorDecision.js
var OP_CONTINUE2 = "Continue", OP_CLOSE = "Close", OP_YIELD2 = "Yield";

// node_modules/effect/dist/esm/internal/channel/childExecutorDecision.js
var ChildExecutorDecisionSymbolKey = "effect/ChannelChildExecutorDecision", ChildExecutorDecisionTypeId, proto4, Continue = (_) => {
  const op = Object.create(proto4);
  op._tag = OP_CONTINUE2;
  return op;
}, Close = (value2) => {
  const op = Object.create(proto4);
  op._tag = OP_CLOSE;
  op.value = value2;
  return op;
}, Yield2 = (_) => {
  const op = Object.create(proto4);
  op._tag = OP_YIELD2;
  return op;
}, isChildExecutorDecision = (u) => hasProperty(u, ChildExecutorDecisionTypeId), isContinue3 = (self) => self._tag === OP_CONTINUE2, isClose = (self) => self._tag === OP_CLOSE, isYield = (self) => self._tag === OP_YIELD2, match22;
var init_childExecutorDecision = __esm(() => {
  init_Function();
  init_Predicate();
  ChildExecutorDecisionTypeId = /* @__PURE__ */ Symbol.for(ChildExecutorDecisionSymbolKey);
  proto4 = {
    [ChildExecutorDecisionTypeId]: ChildExecutorDecisionTypeId
  };
  match22 = /* @__PURE__ */ dual(2, (self, {
    onClose,
    onContinue,
    onYield
  }) => {
    switch (self._tag) {
      case OP_CONTINUE2: {
        return onContinue();
      }
      case OP_CLOSE: {
        return onClose(self.value);
      }
      case OP_YIELD2: {
        return onYield();
      }
    }
  });
});

// node_modules/effect/dist/esm/internal/opCodes/continuation.js
var OP_CONTINUATION_K = "ContinuationK", OP_CONTINUATION_FINALIZER = "ContinuationFinalizer";

// node_modules/effect/dist/esm/internal/channel/continuation.js
var ContinuationTypeId, continuationVariance, ContinuationKImpl, ContinuationFinalizerImpl;
var init_continuation = __esm(() => {
  init_Exit();
  ContinuationTypeId = /* @__PURE__ */ Symbol.for("effect/ChannelContinuation");
  continuationVariance = {
    _Env: (_) => _,
    _InErr: (_) => _,
    _InElem: (_) => _,
    _InDone: (_) => _,
    _OutErr: (_) => _,
    _OutDone: (_) => _,
    _OutErr2: (_) => _,
    _OutElem: (_) => _,
    _OutDone2: (_) => _
  };
  ContinuationKImpl = class ContinuationKImpl {
    onSuccess;
    onHalt;
    _tag = OP_CONTINUATION_K;
    [ContinuationTypeId] = continuationVariance;
    constructor(onSuccess, onHalt) {
      this.onSuccess = onSuccess;
      this.onHalt = onHalt;
    }
    onExit(exit4) {
      return isFailure2(exit4) ? this.onHalt(exit4.cause) : this.onSuccess(exit4.value);
    }
  };
  ContinuationFinalizerImpl = class ContinuationFinalizerImpl {
    finalizer;
    _tag = OP_CONTINUATION_FINALIZER;
    [ContinuationTypeId] = continuationVariance;
    constructor(finalizer) {
      this.finalizer = finalizer;
    }
  };
});

// node_modules/effect/dist/esm/internal/opCodes/channelUpstreamPullStrategy.js
var OP_PULL_AFTER_NEXT = "PullAfterNext", OP_PULL_AFTER_ALL_ENQUEUED = "PullAfterAllEnqueued";

// node_modules/effect/dist/esm/internal/channel/upstreamPullStrategy.js
var UpstreamPullStrategySymbolKey = "effect/ChannelUpstreamPullStrategy", UpstreamPullStrategyTypeId, upstreamPullStrategyVariance, proto5, PullAfterNext = (emitSeparator) => {
  const op = Object.create(proto5);
  op._tag = OP_PULL_AFTER_NEXT;
  op.emitSeparator = emitSeparator;
  return op;
}, PullAfterAllEnqueued = (emitSeparator) => {
  const op = Object.create(proto5);
  op._tag = OP_PULL_AFTER_ALL_ENQUEUED;
  op.emitSeparator = emitSeparator;
  return op;
}, isUpstreamPullStrategy = (u) => hasProperty(u, UpstreamPullStrategyTypeId), isPullAfterNext = (self) => self._tag === OP_PULL_AFTER_NEXT, isPullAfterAllEnqueued = (self) => self._tag === OP_PULL_AFTER_ALL_ENQUEUED, match23;
var init_upstreamPullStrategy = __esm(() => {
  init_Function();
  init_Predicate();
  UpstreamPullStrategyTypeId = /* @__PURE__ */ Symbol.for(UpstreamPullStrategySymbolKey);
  upstreamPullStrategyVariance = {
    _A: (_) => _
  };
  proto5 = {
    [UpstreamPullStrategyTypeId]: upstreamPullStrategyVariance
  };
  match23 = /* @__PURE__ */ dual(2, (self, {
    onAllEnqueued,
    onNext
  }) => {
    switch (self._tag) {
      case OP_PULL_AFTER_NEXT: {
        return onNext(self.emitSeparator);
      }
      case OP_PULL_AFTER_ALL_ENQUEUED: {
        return onAllEnqueued(self.emitSeparator);
      }
    }
  });
});

// node_modules/effect/dist/esm/internal/opCodes/channel.js
var OP_BRACKET_OUT = "BracketOut", OP_BRIDGE = "Bridge", OP_CONCAT_ALL = "ConcatAll", OP_EMIT = "Emit", OP_ENSURING = "Ensuring", OP_FAIL3 = "Fail", OP_FOLD2 = "Fold", OP_FROM_EFFECT2 = "FromEffect", OP_PIPE_TO = "PipeTo", OP_PROVIDE2 = "Provide", OP_READ = "Read", OP_SUCCEED = "Succeed", OP_SUCCEED_NOW = "SucceedNow", OP_SUSPEND2 = "Suspend";

// node_modules/effect/dist/esm/internal/core-stream.js
var ChannelSymbolKey = "effect/Channel", ChannelTypeId3, channelVariance2, proto6, isChannel = (u) => hasProperty(u, ChannelTypeId3) || isEffect2(u), acquireReleaseOut, catchAllCause6, collectElements = (self) => {
  return suspend6(() => {
    const builder = [];
    return flatMap20(pipeTo(self, collectElementsReader(builder)), (value2) => sync10(() => [fromIterable3(builder), value2]));
  });
}, collectElementsReader = (builder) => readWith({
  onInput: (outElem) => flatMap20(sync10(() => {
    builder.push(outElem);
  }), () => collectElementsReader(builder)),
  onFailure: fail14,
  onDone: succeedNow
}), concatAll = (channels) => concatAllWith(channels, constVoid, constVoid), concatAllWith = (channels, f, g) => {
  const op = Object.create(proto6);
  op._tag = OP_CONCAT_ALL;
  op.combineInners = f;
  op.combineAll = g;
  op.onPull = () => PullAfterNext(none2());
  op.onEmit = () => Continue;
  op.value = () => channels;
  op.k = identity;
  return op;
}, concatMapWith, concatMapWithCustom, embedInput, ensuringWith, fail14 = (error3) => failCause12(fail8(error3)), failSync7 = (evaluate2) => failCauseSync7(() => fail8(evaluate2())), failCause12 = (cause3) => failCauseSync7(() => cause3), failCauseSync7 = (evaluate2) => {
  const op = Object.create(proto6);
  op._tag = OP_FAIL3;
  op.error = evaluate2;
  return op;
}, flatMap20, foldCauseChannel, fromEffect5 = (effect2) => {
  const op = Object.create(proto6);
  op._tag = OP_FROM_EFFECT2;
  op.effect = () => effect2;
  return op;
}, pipeTo, provideContext4, readOrFail = (error3) => {
  const op = Object.create(proto6);
  op._tag = OP_READ;
  op.more = succeed15;
  op.done = new ContinuationKImpl(() => fail14(error3), () => fail14(error3));
  return op;
}, readWith = (options) => readWithCause({
  onInput: options.onInput,
  onFailure: (cause3) => match(failureOrCause2(cause3), {
    onLeft: options.onFailure,
    onRight: failCause12
  }),
  onDone: options.onDone
}), readWithCause = (options) => {
  const op = Object.create(proto6);
  op._tag = OP_READ;
  op.more = options.onInput;
  op.done = new ContinuationKImpl(options.onDone, options.onFailure);
  return op;
}, succeed15 = (value2) => sync10(() => value2), succeedNow = (result2) => {
  const op = Object.create(proto6);
  op._tag = OP_SUCCEED_NOW;
  op.terminal = result2;
  return op;
}, suspend6 = (evaluate2) => {
  const op = Object.create(proto6);
  op._tag = OP_SUSPEND2;
  op.channel = evaluate2;
  return op;
}, sync10 = (evaluate2) => {
  const op = Object.create(proto6);
  op._tag = OP_SUCCEED;
  op.evaluate = evaluate2;
  return op;
}, void_8, write2 = (out) => {
  const op = Object.create(proto6);
  op._tag = OP_EMIT;
  op.out = out;
  return op;
};
var init_core_stream = __esm(() => {
  init_Cause();
  init_Chunk();
  init_Effect();
  init_Either();
  init_Function();
  init_Option();
  init_Predicate();
  init_childExecutorDecision();
  init_continuation();
  init_upstreamPullStrategy();
  ChannelTypeId3 = /* @__PURE__ */ Symbol.for(ChannelSymbolKey);
  channelVariance2 = {
    _Env: (_) => _,
    _InErr: (_) => _,
    _InElem: (_) => _,
    _InDone: (_) => _,
    _OutErr: (_) => _,
    _OutElem: (_) => _,
    _OutDone: (_) => _
  };
  proto6 = {
    [ChannelTypeId3]: channelVariance2,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  acquireReleaseOut = /* @__PURE__ */ dual(2, (self, release) => {
    const op = Object.create(proto6);
    op._tag = OP_BRACKET_OUT;
    op.acquire = () => self;
    op.finalizer = release;
    return op;
  });
  catchAllCause6 = /* @__PURE__ */ dual(2, (self, f) => {
    const op = Object.create(proto6);
    op._tag = OP_FOLD2;
    op.channel = self;
    op.k = new ContinuationKImpl(succeed15, f);
    return op;
  });
  concatMapWith = /* @__PURE__ */ dual(4, (self, f, g, h2) => {
    const op = Object.create(proto6);
    op._tag = OP_CONCAT_ALL;
    op.combineInners = g;
    op.combineAll = h2;
    op.onPull = () => PullAfterNext(none2());
    op.onEmit = () => Continue;
    op.value = () => self;
    op.k = f;
    return op;
  });
  concatMapWithCustom = /* @__PURE__ */ dual(6, (self, f, g, h2, onPull, onEmit) => {
    const op = Object.create(proto6);
    op._tag = OP_CONCAT_ALL;
    op.combineInners = g;
    op.combineAll = h2;
    op.onPull = onPull;
    op.onEmit = onEmit;
    op.value = () => self;
    op.k = f;
    return op;
  });
  embedInput = /* @__PURE__ */ dual(2, (self, input) => {
    const op = Object.create(proto6);
    op._tag = OP_BRIDGE;
    op.input = input;
    op.channel = self;
    return op;
  });
  ensuringWith = /* @__PURE__ */ dual(2, (self, finalizer) => {
    const op = Object.create(proto6);
    op._tag = OP_ENSURING;
    op.channel = self;
    op.finalizer = finalizer;
    return op;
  });
  flatMap20 = /* @__PURE__ */ dual(2, (self, f) => {
    const op = Object.create(proto6);
    op._tag = OP_FOLD2;
    op.channel = self;
    op.k = new ContinuationKImpl(f, failCause12);
    return op;
  });
  foldCauseChannel = /* @__PURE__ */ dual(2, (self, options) => {
    const op = Object.create(proto6);
    op._tag = OP_FOLD2;
    op.channel = self;
    op.k = new ContinuationKImpl(options.onSuccess, options.onFailure);
    return op;
  });
  pipeTo = /* @__PURE__ */ dual(2, (self, that) => {
    const op = Object.create(proto6);
    op._tag = OP_PIPE_TO;
    op.left = () => self;
    op.right = () => that;
    return op;
  });
  provideContext4 = /* @__PURE__ */ dual(2, (self, env) => {
    const op = Object.create(proto6);
    op._tag = OP_PROVIDE2;
    op.context = () => env;
    op.inner = self;
    return op;
  });
  void_8 = /* @__PURE__ */ succeedNow(undefined);
});

// node_modules/effect/dist/esm/internal/opCodes/channelState.js
var OP_DONE3 = "Done", OP_EMIT2 = "Emit", OP_FROM_EFFECT3 = "FromEffect", OP_READ2 = "Read";

// node_modules/effect/dist/esm/internal/channel/channelState.js
var ChannelStateTypeId, channelStateVariance, proto7, Done2 = () => {
  const op = Object.create(proto7);
  op._tag = OP_DONE3;
  return op;
}, Emit = () => {
  const op = Object.create(proto7);
  op._tag = OP_EMIT2;
  return op;
}, fromEffect6 = (effect2) => {
  const op = Object.create(proto7);
  op._tag = OP_FROM_EFFECT3;
  op.effect = effect2;
  return op;
}, Read = (upstream, onEffect, onEmit, onDone) => {
  const op = Object.create(proto7);
  op._tag = OP_READ2;
  op.upstream = upstream;
  op.onEffect = onEffect;
  op.onEmit = onEmit;
  op.onDone = onDone;
  return op;
}, isFromEffect = (self) => self._tag === OP_FROM_EFFECT3, effect2 = (self) => isFromEffect(self) ? self.effect : _void, effectOrUndefinedIgnored = (self) => isFromEffect(self) ? ignore3(self.effect) : undefined;
var init_channelState = __esm(() => {
  init_Effect();
  init_Predicate();
  ChannelStateTypeId = /* @__PURE__ */ Symbol.for("effect/ChannelState");
  channelStateVariance = {
    _E: (_) => _,
    _R: (_) => _
  };
  proto7 = {
    [ChannelStateTypeId]: channelStateVariance
  };
});

// node_modules/effect/dist/esm/internal/channel/subexecutor.js
class PullFromChild {
  childExecutor;
  parentSubexecutor;
  onEmit;
  _tag = OP_PULL_FROM_CHILD;
  constructor(childExecutor, parentSubexecutor, onEmit) {
    this.childExecutor = childExecutor;
    this.parentSubexecutor = parentSubexecutor;
    this.onEmit = onEmit;
  }
  close(exit4) {
    const fin1 = this.childExecutor.close(exit4);
    const fin2 = this.parentSubexecutor.close(exit4);
    if (fin1 !== undefined && fin2 !== undefined) {
      return zipWith12(exit3(fin1), exit3(fin2), (exit1, exit22) => pipe(exit1, zipRight3(exit22)));
    } else if (fin1 !== undefined) {
      return fin1;
    } else if (fin2 !== undefined) {
      return fin2;
    } else {
      return;
    }
  }
  enqueuePullFromChild(_child) {
    return this;
  }
}

class PullFromUpstream {
  upstreamExecutor;
  createChild;
  lastDone;
  activeChildExecutors;
  combineChildResults;
  combineWithChildResult;
  onPull;
  onEmit;
  _tag = OP_PULL_FROM_UPSTREAM;
  constructor(upstreamExecutor, createChild, lastDone, activeChildExecutors, combineChildResults, combineWithChildResult, onPull, onEmit) {
    this.upstreamExecutor = upstreamExecutor;
    this.createChild = createChild;
    this.lastDone = lastDone;
    this.activeChildExecutors = activeChildExecutors;
    this.combineChildResults = combineChildResults;
    this.combineWithChildResult = combineWithChildResult;
    this.onPull = onPull;
    this.onEmit = onEmit;
  }
  close(exit4) {
    const fin1 = this.upstreamExecutor.close(exit4);
    const fins = [...this.activeChildExecutors.map((child) => child !== undefined ? child.childExecutor.close(exit4) : undefined), fin1];
    const result2 = fins.reduce((acc, next4) => {
      if (acc !== undefined && next4 !== undefined) {
        return zipWith12(acc, exit3(next4), (exit1, exit22) => zipRight3(exit1, exit22));
      } else if (acc !== undefined) {
        return acc;
      } else if (next4 !== undefined) {
        return exit3(next4);
      } else {
        return;
      }
    }, undefined);
    return result2 === undefined ? result2 : result2;
  }
  enqueuePullFromChild(child) {
    return new PullFromUpstream(this.upstreamExecutor, this.createChild, this.lastDone, [...this.activeChildExecutors, child], this.combineChildResults, this.combineWithChildResult, this.onPull, this.onEmit);
  }
}

class DrainChildExecutors {
  upstreamExecutor;
  lastDone;
  activeChildExecutors;
  upstreamDone;
  combineChildResults;
  combineWithChildResult;
  onPull;
  _tag = OP_DRAIN_CHILD_EXECUTORS;
  constructor(upstreamExecutor, lastDone, activeChildExecutors, upstreamDone, combineChildResults, combineWithChildResult, onPull) {
    this.upstreamExecutor = upstreamExecutor;
    this.lastDone = lastDone;
    this.activeChildExecutors = activeChildExecutors;
    this.upstreamDone = upstreamDone;
    this.combineChildResults = combineChildResults;
    this.combineWithChildResult = combineWithChildResult;
    this.onPull = onPull;
  }
  close(exit4) {
    const fin1 = this.upstreamExecutor.close(exit4);
    const fins = [...this.activeChildExecutors.map((child) => child !== undefined ? child.childExecutor.close(exit4) : undefined), fin1];
    const result2 = fins.reduce((acc, next4) => {
      if (acc !== undefined && next4 !== undefined) {
        return zipWith12(acc, exit3(next4), (exit1, exit22) => zipRight3(exit1, exit22));
      } else if (acc !== undefined) {
        return acc;
      } else if (next4 !== undefined) {
        return exit3(next4);
      } else {
        return;
      }
    }, undefined);
    return result2 === undefined ? result2 : result2;
  }
  enqueuePullFromChild(child) {
    return new DrainChildExecutors(this.upstreamExecutor, this.lastDone, [...this.activeChildExecutors, child], this.upstreamDone, this.combineChildResults, this.combineWithChildResult, this.onPull);
  }
}

class Emit2 {
  value;
  next;
  _tag = OP_EMIT3;
  constructor(value2, next4) {
    this.value = value2;
    this.next = next4;
  }
  close(exit4) {
    const result2 = this.next.close(exit4);
    return result2 === undefined ? result2 : result2;
  }
  enqueuePullFromChild(_child) {
    return this;
  }
}
var OP_PULL_FROM_CHILD = "PullFromChild", OP_PULL_FROM_UPSTREAM = "PullFromUpstream", OP_DRAIN_CHILD_EXECUTORS = "DrainChildExecutors", OP_EMIT3 = "Emit";
var init_subexecutor = __esm(() => {
  init_Effect();
  init_Exit();
  init_Function();
});

// node_modules/effect/dist/esm/internal/opCodes/channelUpstreamPullRequest.js
var OP_PULLED = "Pulled", OP_NO_UPSTREAM = "NoUpstream";

// node_modules/effect/dist/esm/internal/channel/upstreamPullRequest.js
var UpstreamPullRequestSymbolKey = "effect/ChannelUpstreamPullRequest", UpstreamPullRequestTypeId, upstreamPullRequestVariance, proto8, Pulled = (value2) => {
  const op = Object.create(proto8);
  op._tag = OP_PULLED;
  op.value = value2;
  return op;
}, NoUpstream = (activeDownstreamCount) => {
  const op = Object.create(proto8);
  op._tag = OP_NO_UPSTREAM;
  op.activeDownstreamCount = activeDownstreamCount;
  return op;
}, isUpstreamPullRequest = (u) => hasProperty(u, UpstreamPullRequestTypeId), isPulled = (self) => self._tag === OP_PULLED, isNoUpstream = (self) => self._tag === OP_NO_UPSTREAM, match24;
var init_upstreamPullRequest = __esm(() => {
  init_Function();
  init_Predicate();
  UpstreamPullRequestTypeId = /* @__PURE__ */ Symbol.for(UpstreamPullRequestSymbolKey);
  upstreamPullRequestVariance = {
    _A: (_) => _
  };
  proto8 = {
    [UpstreamPullRequestTypeId]: upstreamPullRequestVariance
  };
  match24 = /* @__PURE__ */ dual(2, (self, {
    onNoUpstream,
    onPulled
  }) => {
    switch (self._tag) {
      case OP_PULLED: {
        return onPulled(self.value);
      }
      case OP_NO_UPSTREAM: {
        return onNoUpstream(self.activeDownstreamCount);
      }
    }
  });
});

// node_modules/effect/dist/esm/internal/channel/channelExecutor.js
class ChannelExecutor {
  _activeSubexecutor = undefined;
  _cancelled = undefined;
  _closeLastSubstream = undefined;
  _currentChannel;
  _done = undefined;
  _doneStack = [];
  _emitted = undefined;
  _executeCloseLastSubstream;
  _input = undefined;
  _inProgressFinalizer = undefined;
  _providedEnv;
  constructor(initialChannel, providedEnv, executeCloseLastSubstream) {
    this._currentChannel = initialChannel;
    this._executeCloseLastSubstream = executeCloseLastSubstream;
    this._providedEnv = providedEnv;
  }
  run() {
    let result2 = undefined;
    while (result2 === undefined) {
      if (this._cancelled !== undefined) {
        result2 = this.processCancellation();
      } else if (this._activeSubexecutor !== undefined) {
        result2 = this.runSubexecutor();
      } else {
        try {
          if (this._currentChannel === undefined) {
            result2 = Done2();
          } else {
            if (isEffect2(this._currentChannel)) {
              this._currentChannel = fromEffect5(this._currentChannel);
            }
            switch (this._currentChannel._tag) {
              case OP_BRACKET_OUT: {
                result2 = this.runBracketOut(this._currentChannel);
                break;
              }
              case OP_BRIDGE: {
                const bridgeInput = this._currentChannel.input;
                this._currentChannel = this._currentChannel.channel;
                if (this._input !== undefined) {
                  const inputExecutor = this._input;
                  this._input = undefined;
                  const drainer = () => flatMap18(bridgeInput.awaitRead(), () => suspend4(() => {
                    const state = inputExecutor.run();
                    switch (state._tag) {
                      case OP_DONE3: {
                        return match7(inputExecutor.getDone(), {
                          onFailure: (cause3) => bridgeInput.error(cause3),
                          onSuccess: (value2) => bridgeInput.done(value2)
                        });
                      }
                      case OP_EMIT2: {
                        return flatMap18(bridgeInput.emit(inputExecutor.getEmit()), () => drainer());
                      }
                      case OP_FROM_EFFECT3: {
                        return matchCauseEffect3(state.effect, {
                          onFailure: (cause3) => bridgeInput.error(cause3),
                          onSuccess: () => drainer()
                        });
                      }
                      case OP_READ2: {
                        return readUpstream(state, () => drainer(), (cause3) => bridgeInput.error(cause3));
                      }
                    }
                  }));
                  result2 = fromEffect6(flatMap18(forkDaemon3(interruptible4(drainer())), (fiber) => sync8(() => this.addFinalizer((exit4) => flatMap18(interrupt7(fiber), () => suspend4(() => {
                    const effect3 = this.restorePipe(exit4, inputExecutor);
                    return effect3 !== undefined ? effect3 : _void;
                  }))))));
                }
                break;
              }
              case OP_CONCAT_ALL: {
                const executor = new ChannelExecutor(this._currentChannel.value(), this._providedEnv, (effect3) => sync8(() => {
                  const prevLastClose = this._closeLastSubstream === undefined ? _void : this._closeLastSubstream;
                  this._closeLastSubstream = pipe(prevLastClose, zipRight7(effect3));
                }));
                executor._input = this._input;
                const channel = this._currentChannel;
                this._activeSubexecutor = new PullFromUpstream(executor, (value2) => channel.k(value2), undefined, [], (x2, y) => channel.combineInners(x2, y), (x2, y) => channel.combineAll(x2, y), (request2) => channel.onPull(request2), (value2) => channel.onEmit(value2));
                this._closeLastSubstream = undefined;
                this._currentChannel = undefined;
                break;
              }
              case OP_EMIT: {
                this._emitted = this._currentChannel.out;
                this._currentChannel = this._activeSubexecutor !== undefined ? undefined : void_8;
                result2 = Emit();
                break;
              }
              case OP_ENSURING: {
                this.runEnsuring(this._currentChannel);
                break;
              }
              case OP_FAIL3: {
                result2 = this.doneHalt(this._currentChannel.error());
                break;
              }
              case OP_FOLD2: {
                this._doneStack.push(this._currentChannel.k);
                this._currentChannel = this._currentChannel.channel;
                break;
              }
              case OP_FROM_EFFECT2: {
                const effect3 = this._providedEnv === undefined ? this._currentChannel.effect() : pipe(this._currentChannel.effect(), provide2(this._providedEnv));
                result2 = fromEffect6(matchCauseEffect3(effect3, {
                  onFailure: (cause3) => {
                    const state = this.doneHalt(cause3);
                    return state !== undefined && isFromEffect(state) ? state.effect : _void;
                  },
                  onSuccess: (value2) => {
                    const state = this.doneSucceed(value2);
                    return state !== undefined && isFromEffect(state) ? state.effect : _void;
                  }
                }));
                break;
              }
              case OP_PIPE_TO: {
                const previousInput = this._input;
                const leftExec = new ChannelExecutor(this._currentChannel.left(), this._providedEnv, (effect3) => this._executeCloseLastSubstream(effect3));
                leftExec._input = previousInput;
                this._input = leftExec;
                this.addFinalizer((exit4) => {
                  const effect3 = this.restorePipe(exit4, previousInput);
                  return effect3 !== undefined ? effect3 : _void;
                });
                this._currentChannel = this._currentChannel.right();
                break;
              }
              case OP_PROVIDE2: {
                const previousEnv = this._providedEnv;
                this._providedEnv = this._currentChannel.context();
                this._currentChannel = this._currentChannel.inner;
                this.addFinalizer(() => sync8(() => {
                  this._providedEnv = previousEnv;
                }));
                break;
              }
              case OP_READ: {
                const read2 = this._currentChannel;
                result2 = Read(this._input, identity, (emitted) => {
                  try {
                    this._currentChannel = read2.more(emitted);
                  } catch (error3) {
                    this._currentChannel = read2.done.onExit(die4(error3));
                  }
                  return;
                }, (exit4) => {
                  const onExit4 = (exit5) => {
                    return read2.done.onExit(exit5);
                  };
                  this._currentChannel = onExit4(exit4);
                  return;
                });
                break;
              }
              case OP_SUCCEED: {
                result2 = this.doneSucceed(this._currentChannel.evaluate());
                break;
              }
              case OP_SUCCEED_NOW: {
                result2 = this.doneSucceed(this._currentChannel.terminal);
                break;
              }
              case OP_SUSPEND2: {
                this._currentChannel = this._currentChannel.channel();
                break;
              }
              default: {
                this._currentChannel._tag;
              }
            }
          }
        } catch (error3) {
          this._currentChannel = failCause12(die6(error3));
        }
      }
    }
    return result2;
  }
  getDone() {
    return this._done;
  }
  getEmit() {
    return this._emitted;
  }
  cancelWith(exit4) {
    this._cancelled = exit4;
  }
  clearInProgressFinalizer() {
    this._inProgressFinalizer = undefined;
  }
  storeInProgressFinalizer(finalizer) {
    this._inProgressFinalizer = finalizer;
  }
  popAllFinalizers(exit4) {
    const finalizers = [];
    let next4 = this._doneStack.pop();
    while (next4) {
      if (next4._tag === "ContinuationFinalizer") {
        finalizers.push(next4.finalizer);
      }
      next4 = this._doneStack.pop();
    }
    const effect3 = finalizers.length === 0 ? _void : runFinalizers(finalizers, exit4);
    this.storeInProgressFinalizer(effect3);
    return effect3;
  }
  popNextFinalizers() {
    const builder = [];
    while (this._doneStack.length !== 0) {
      const cont = this._doneStack[this._doneStack.length - 1];
      if (cont._tag === OP_CONTINUATION_K) {
        return builder;
      }
      builder.push(cont);
      this._doneStack.pop();
    }
    return builder;
  }
  restorePipe(exit4, prev) {
    const currInput = this._input;
    this._input = prev;
    if (currInput !== undefined) {
      const effect3 = currInput.close(exit4);
      return effect3;
    }
    return _void;
  }
  close(exit4) {
    let runInProgressFinalizers = undefined;
    const finalizer = this._inProgressFinalizer;
    if (finalizer !== undefined) {
      runInProgressFinalizers = pipe(finalizer, ensuring4(sync8(() => this.clearInProgressFinalizer())));
    }
    let closeSelf = undefined;
    const selfFinalizers = this.popAllFinalizers(exit4);
    if (selfFinalizers !== undefined) {
      closeSelf = pipe(selfFinalizers, ensuring4(sync8(() => this.clearInProgressFinalizer())));
    }
    const closeSubexecutors = this._activeSubexecutor === undefined ? undefined : this._activeSubexecutor.close(exit4);
    if (closeSubexecutors === undefined && runInProgressFinalizers === undefined && closeSelf === undefined) {
      return;
    }
    return pipe(exit3(ifNotNull(closeSubexecutors)), zip12(exit3(ifNotNull(runInProgressFinalizers))), zip12(exit3(ifNotNull(closeSelf))), map26(([[exit1, exit22], exit32]) => pipe(exit1, zipRight3(exit22), zipRight3(exit32))), uninterruptible3, flatMap18((exit5) => suspend4(() => exit5)));
  }
  doneSucceed(value2) {
    if (this._doneStack.length === 0) {
      this._done = succeed3(value2);
      this._currentChannel = undefined;
      return Done2();
    }
    const head8 = this._doneStack[this._doneStack.length - 1];
    if (head8._tag === OP_CONTINUATION_K) {
      this._doneStack.pop();
      this._currentChannel = head8.onSuccess(value2);
      return;
    }
    const finalizers = this.popNextFinalizers();
    if (this._doneStack.length === 0) {
      this._doneStack = finalizers.reverse();
      this._done = succeed3(value2);
      this._currentChannel = undefined;
      return Done2();
    }
    const finalizerEffect = runFinalizers(finalizers.map((f) => f.finalizer), succeed3(value2));
    this.storeInProgressFinalizer(finalizerEffect);
    const effect3 = pipe(finalizerEffect, ensuring4(sync8(() => this.clearInProgressFinalizer())), uninterruptible3, flatMap18(() => sync8(() => this.doneSucceed(value2))));
    return fromEffect6(effect3);
  }
  doneHalt(cause3) {
    if (this._doneStack.length === 0) {
      this._done = failCause3(cause3);
      this._currentChannel = undefined;
      return Done2();
    }
    const head8 = this._doneStack[this._doneStack.length - 1];
    if (head8._tag === OP_CONTINUATION_K) {
      this._doneStack.pop();
      try {
        this._currentChannel = head8.onHalt(cause3);
      } catch (error3) {
        this._currentChannel = failCause12(die6(error3));
      }
      return;
    }
    const finalizers = this.popNextFinalizers();
    if (this._doneStack.length === 0) {
      this._doneStack = finalizers.reverse();
      this._done = failCause3(cause3);
      this._currentChannel = undefined;
      return Done2();
    }
    const finalizerEffect = runFinalizers(finalizers.map((f) => f.finalizer), failCause3(cause3));
    this.storeInProgressFinalizer(finalizerEffect);
    const effect3 = pipe(finalizerEffect, ensuring4(sync8(() => this.clearInProgressFinalizer())), uninterruptible3, flatMap18(() => sync8(() => this.doneHalt(cause3))));
    return fromEffect6(effect3);
  }
  processCancellation() {
    this._currentChannel = undefined;
    this._done = this._cancelled;
    this._cancelled = undefined;
    return Done2();
  }
  runBracketOut(bracketOut) {
    const effect3 = uninterruptible3(matchCauseEffect3(this.provide(bracketOut.acquire()), {
      onFailure: (cause3) => sync8(() => {
        this._currentChannel = failCause12(cause3);
      }),
      onSuccess: (out) => sync8(() => {
        this.addFinalizer((exit4) => this.provide(bracketOut.finalizer(out, exit4)));
        this._currentChannel = write2(out);
      })
    }));
    return fromEffect6(effect3);
  }
  provide(effect3) {
    if (this._providedEnv === undefined) {
      return effect3;
    }
    return pipe(effect3, provide2(this._providedEnv));
  }
  runEnsuring(ensuring5) {
    this.addFinalizer(ensuring5.finalizer);
    this._currentChannel = ensuring5.channel;
  }
  addFinalizer(f) {
    this._doneStack.push(new ContinuationFinalizerImpl(f));
  }
  runSubexecutor() {
    const subexecutor = this._activeSubexecutor;
    switch (subexecutor._tag) {
      case OP_PULL_FROM_CHILD: {
        return this.pullFromChild(subexecutor.childExecutor, subexecutor.parentSubexecutor, subexecutor.onEmit, subexecutor);
      }
      case OP_PULL_FROM_UPSTREAM: {
        return this.pullFromUpstream(subexecutor);
      }
      case OP_DRAIN_CHILD_EXECUTORS: {
        return this.drainChildExecutors(subexecutor);
      }
      case OP_EMIT3: {
        this._emitted = subexecutor.value;
        this._activeSubexecutor = subexecutor.next;
        return Emit();
      }
    }
  }
  replaceSubexecutor(nextSubExec) {
    this._currentChannel = undefined;
    this._activeSubexecutor = nextSubExec;
  }
  finishWithExit(exit4) {
    const state = match7(exit4, {
      onFailure: (cause3) => this.doneHalt(cause3),
      onSuccess: (value2) => this.doneSucceed(value2)
    });
    this._activeSubexecutor = undefined;
    return state === undefined ? _void : effect2(state);
  }
  finishSubexecutorWithCloseEffect(subexecutorDone, ...closeFuncs) {
    this.addFinalizer(() => pipe(closeFuncs, forEach16((closeFunc) => pipe(sync8(() => closeFunc(subexecutorDone)), flatMap18((closeEffect) => closeEffect !== undefined ? closeEffect : _void)), {
      discard: true
    })));
    const state = pipe(subexecutorDone, match7({
      onFailure: (cause3) => this.doneHalt(cause3),
      onSuccess: (value2) => this.doneSucceed(value2)
    }));
    this._activeSubexecutor = undefined;
    return state;
  }
  applyUpstreamPullStrategy(upstreamFinished, queue, strategy) {
    switch (strategy._tag) {
      case OP_PULL_AFTER_NEXT: {
        const shouldPrepend = !upstreamFinished || queue.some((subexecutor) => subexecutor !== undefined);
        return [strategy.emitSeparator, shouldPrepend ? [undefined, ...queue] : queue];
      }
      case OP_PULL_AFTER_ALL_ENQUEUED: {
        const shouldEnqueue = !upstreamFinished || queue.some((subexecutor) => subexecutor !== undefined);
        return [strategy.emitSeparator, shouldEnqueue ? [...queue, undefined] : queue];
      }
    }
  }
  pullFromChild(childExecutor, parentSubexecutor, onEmitted, subexecutor) {
    return Read(childExecutor, identity, (emitted) => {
      const childExecutorDecision = onEmitted(emitted);
      switch (childExecutorDecision._tag) {
        case OP_CONTINUE2: {
          break;
        }
        case OP_CLOSE: {
          this.finishWithDoneValue(childExecutor, parentSubexecutor, childExecutorDecision.value);
          break;
        }
        case OP_YIELD2: {
          const modifiedParent = parentSubexecutor.enqueuePullFromChild(subexecutor);
          this.replaceSubexecutor(modifiedParent);
          break;
        }
      }
      this._activeSubexecutor = new Emit2(emitted, this._activeSubexecutor);
      return;
    }, match7({
      onFailure: (cause3) => {
        const state = this.handleSubexecutorFailure(childExecutor, parentSubexecutor, cause3);
        return state === undefined ? undefined : effectOrUndefinedIgnored(state);
      },
      onSuccess: (doneValue) => {
        this.finishWithDoneValue(childExecutor, parentSubexecutor, doneValue);
        return;
      }
    }));
  }
  finishWithDoneValue(childExecutor, parentSubexecutor, doneValue) {
    const subexecutor = parentSubexecutor;
    switch (subexecutor._tag) {
      case OP_PULL_FROM_UPSTREAM: {
        const modifiedParent = new PullFromUpstream(subexecutor.upstreamExecutor, subexecutor.createChild, subexecutor.lastDone !== undefined ? subexecutor.combineChildResults(subexecutor.lastDone, doneValue) : doneValue, subexecutor.activeChildExecutors, subexecutor.combineChildResults, subexecutor.combineWithChildResult, subexecutor.onPull, subexecutor.onEmit);
        this._closeLastSubstream = childExecutor.close(succeed3(doneValue));
        this.replaceSubexecutor(modifiedParent);
        break;
      }
      case OP_DRAIN_CHILD_EXECUTORS: {
        const modifiedParent = new DrainChildExecutors(subexecutor.upstreamExecutor, subexecutor.lastDone !== undefined ? subexecutor.combineChildResults(subexecutor.lastDone, doneValue) : doneValue, subexecutor.activeChildExecutors, subexecutor.upstreamDone, subexecutor.combineChildResults, subexecutor.combineWithChildResult, subexecutor.onPull);
        this._closeLastSubstream = childExecutor.close(succeed3(doneValue));
        this.replaceSubexecutor(modifiedParent);
        break;
      }
      default: {
        break;
      }
    }
  }
  handleSubexecutorFailure(childExecutor, parentSubexecutor, cause3) {
    return this.finishSubexecutorWithCloseEffect(failCause3(cause3), (exit4) => parentSubexecutor.close(exit4), (exit4) => childExecutor.close(exit4));
  }
  pullFromUpstream(subexecutor) {
    if (subexecutor.activeChildExecutors.length === 0) {
      return this.performPullFromUpstream(subexecutor);
    }
    const activeChild = subexecutor.activeChildExecutors[0];
    const parentSubexecutor = new PullFromUpstream(subexecutor.upstreamExecutor, subexecutor.createChild, subexecutor.lastDone, subexecutor.activeChildExecutors.slice(1), subexecutor.combineChildResults, subexecutor.combineWithChildResult, subexecutor.onPull, subexecutor.onEmit);
    if (activeChild === undefined) {
      return this.performPullFromUpstream(parentSubexecutor);
    }
    this.replaceSubexecutor(new PullFromChild(activeChild.childExecutor, parentSubexecutor, activeChild.onEmit));
    return;
  }
  performPullFromUpstream(subexecutor) {
    return Read(subexecutor.upstreamExecutor, (effect3) => {
      const closeLastSubstream = this._closeLastSubstream === undefined ? _void : this._closeLastSubstream;
      this._closeLastSubstream = undefined;
      return pipe(this._executeCloseLastSubstream(closeLastSubstream), zipRight7(effect3));
    }, (emitted) => {
      if (this._closeLastSubstream !== undefined) {
        const closeLastSubstream = this._closeLastSubstream;
        this._closeLastSubstream = undefined;
        return pipe(this._executeCloseLastSubstream(closeLastSubstream), map26(() => {
          const childExecutor2 = new ChannelExecutor(subexecutor.createChild(emitted), this._providedEnv, this._executeCloseLastSubstream);
          childExecutor2._input = this._input;
          const [emitSeparator2, updatedChildExecutors2] = this.applyUpstreamPullStrategy(false, subexecutor.activeChildExecutors, subexecutor.onPull(Pulled(emitted)));
          this._activeSubexecutor = new PullFromChild(childExecutor2, new PullFromUpstream(subexecutor.upstreamExecutor, subexecutor.createChild, subexecutor.lastDone, updatedChildExecutors2, subexecutor.combineChildResults, subexecutor.combineWithChildResult, subexecutor.onPull, subexecutor.onEmit), subexecutor.onEmit);
          if (isSome2(emitSeparator2)) {
            this._activeSubexecutor = new Emit2(emitSeparator2.value, this._activeSubexecutor);
          }
          return;
        }));
      }
      const childExecutor = new ChannelExecutor(subexecutor.createChild(emitted), this._providedEnv, this._executeCloseLastSubstream);
      childExecutor._input = this._input;
      const [emitSeparator, updatedChildExecutors] = this.applyUpstreamPullStrategy(false, subexecutor.activeChildExecutors, subexecutor.onPull(Pulled(emitted)));
      this._activeSubexecutor = new PullFromChild(childExecutor, new PullFromUpstream(subexecutor.upstreamExecutor, subexecutor.createChild, subexecutor.lastDone, updatedChildExecutors, subexecutor.combineChildResults, subexecutor.combineWithChildResult, subexecutor.onPull, subexecutor.onEmit), subexecutor.onEmit);
      if (isSome2(emitSeparator)) {
        this._activeSubexecutor = new Emit2(emitSeparator.value, this._activeSubexecutor);
      }
      return;
    }, (exit4) => {
      if (subexecutor.activeChildExecutors.some((subexecutor2) => subexecutor2 !== undefined)) {
        const drain = new DrainChildExecutors(subexecutor.upstreamExecutor, subexecutor.lastDone, [undefined, ...subexecutor.activeChildExecutors], subexecutor.upstreamExecutor.getDone(), subexecutor.combineChildResults, subexecutor.combineWithChildResult, subexecutor.onPull);
        if (this._closeLastSubstream !== undefined) {
          const closeLastSubstream2 = this._closeLastSubstream;
          this._closeLastSubstream = undefined;
          return pipe(this._executeCloseLastSubstream(closeLastSubstream2), map26(() => this.replaceSubexecutor(drain)));
        }
        this.replaceSubexecutor(drain);
        return;
      }
      const closeLastSubstream = this._closeLastSubstream;
      const state = this.finishSubexecutorWithCloseEffect(pipe(exit4, map15((a) => subexecutor.combineWithChildResult(subexecutor.lastDone, a))), () => closeLastSubstream, (exit5) => subexecutor.upstreamExecutor.close(exit5));
      return state === undefined ? undefined : effectOrUndefinedIgnored(state);
    });
  }
  drainChildExecutors(subexecutor) {
    if (subexecutor.activeChildExecutors.length === 0) {
      const lastClose = this._closeLastSubstream;
      if (lastClose !== undefined) {
        this.addFinalizer(() => succeed13(lastClose));
      }
      return this.finishSubexecutorWithCloseEffect(subexecutor.upstreamDone, () => lastClose, (exit4) => subexecutor.upstreamExecutor.close(exit4));
    }
    const activeChild = subexecutor.activeChildExecutors[0];
    const rest = subexecutor.activeChildExecutors.slice(1);
    if (activeChild === undefined) {
      const [emitSeparator, remainingExecutors] = this.applyUpstreamPullStrategy(true, rest, subexecutor.onPull(NoUpstream(rest.reduce((n, curr) => curr !== undefined ? n + 1 : n, 0))));
      this.replaceSubexecutor(new DrainChildExecutors(subexecutor.upstreamExecutor, subexecutor.lastDone, remainingExecutors, subexecutor.upstreamDone, subexecutor.combineChildResults, subexecutor.combineWithChildResult, subexecutor.onPull));
      if (isSome2(emitSeparator)) {
        this._emitted = emitSeparator.value;
        return Emit();
      }
      return;
    }
    const parentSubexecutor = new DrainChildExecutors(subexecutor.upstreamExecutor, subexecutor.lastDone, rest, subexecutor.upstreamDone, subexecutor.combineChildResults, subexecutor.combineWithChildResult, subexecutor.onPull);
    this.replaceSubexecutor(new PullFromChild(activeChild.childExecutor, parentSubexecutor, activeChild.onEmit));
    return;
  }
}
var ifNotNull = (effect3) => effect3 !== undefined ? effect3 : _void, runFinalizers = (finalizers, exit4) => {
  return pipe(forEach16(finalizers, (fin) => exit3(fin(exit4))), map26((exits) => pipe(all7(exits), getOrElse2(() => void_4))), flatMap18((exit5) => suspend4(() => exit5)));
}, readUpstream = (r, onSuccess, onFailure) => {
  const readStack = [r];
  const read2 = () => {
    const current = readStack.pop();
    if (current === undefined || current.upstream === undefined) {
      return dieMessage2("Unexpected end of input for channel execution");
    }
    const state = current.upstream.run();
    switch (state._tag) {
      case OP_EMIT2: {
        const emitEffect = current.onEmit(current.upstream.getEmit());
        if (readStack.length === 0) {
          if (emitEffect === undefined) {
            return suspend4(onSuccess);
          }
          return pipe(emitEffect, matchCauseEffect3({
            onFailure,
            onSuccess
          }));
        }
        if (emitEffect === undefined) {
          return suspend4(() => read2());
        }
        return pipe(emitEffect, matchCauseEffect3({
          onFailure,
          onSuccess: () => read2()
        }));
      }
      case OP_DONE3: {
        const doneEffect = current.onDone(current.upstream.getDone());
        if (readStack.length === 0) {
          if (doneEffect === undefined) {
            return suspend4(onSuccess);
          }
          return pipe(doneEffect, matchCauseEffect3({
            onFailure,
            onSuccess
          }));
        }
        if (doneEffect === undefined) {
          return suspend4(() => read2());
        }
        return pipe(doneEffect, matchCauseEffect3({
          onFailure,
          onSuccess: () => read2()
        }));
      }
      case OP_FROM_EFFECT3: {
        readStack.push(current);
        return pipe(current.onEffect(state.effect), catchAllCause4((cause3) => suspend4(() => {
          const doneEffect = current.onDone(failCause3(cause3));
          return doneEffect === undefined ? _void : doneEffect;
        })), matchCauseEffect3({
          onFailure,
          onSuccess: () => read2()
        }));
      }
      case OP_READ2: {
        readStack.push(current);
        readStack.push(state);
        return suspend4(() => read2());
      }
    }
  };
  return read2();
}, runIn, runScopedInterpret = (channelState, exec) => {
  const op = channelState;
  switch (op._tag) {
    case OP_FROM_EFFECT3: {
      return pipe(op.effect, flatMap18(() => runScopedInterpret(exec.run(), exec)));
    }
    case OP_EMIT2: {
      return runScopedInterpret(exec.run(), exec);
    }
    case OP_DONE3: {
      return suspend4(() => exec.getDone());
    }
    case OP_READ2: {
      return readUpstream(op, () => runScopedInterpret(exec.run(), exec), failCause10);
    }
  }
};
var init_channelExecutor = __esm(() => {
  init_Cause();
  init_Deferred();
  init_Effect();
  init_ExecutionStrategy();
  init_Exit();
  init_Fiber();
  init_FiberId();
  init_Function();
  init_HashSet();
  init_Option();
  init_Scope();
  init_core_stream();
  init_channelState();
  init_continuation();
  init_subexecutor();
  init_upstreamPullRequest();
  runIn = /* @__PURE__ */ dual(2, (self, scope6) => {
    const run2 = (channelDeferred, scopeDeferred, scope7) => acquireUseRelease3(sync8(() => new ChannelExecutor(self, undefined, identity)), (exec) => suspend4(() => runScopedInterpret(exec.run(), exec).pipe(intoDeferred2(channelDeferred), zipRight7(_await(channelDeferred)), zipLeft7(_await(scopeDeferred)))), (exec, exit4) => {
      const finalize = exec.close(exit4);
      if (finalize === undefined) {
        return _void;
      }
      return tapErrorCause4(finalize, (cause3) => addFinalizer3(scope7, failCause10(cause3)));
    });
    return uninterruptibleMask3((restore) => all11([fork3(scope6, sequential3), make24(), make24()]).pipe(flatMap18(([child, channelDeferred, scopeDeferred]) => restore(run2(channelDeferred, scopeDeferred, child)).pipe(forkIn3(scope6), flatMap18((fiber) => scope6.addFinalizer((exit4) => {
      const interruptors3 = isFailure2(exit4) ? interruptors2(exit4.cause) : undefined;
      return isDone(channelDeferred).pipe(flatMap18((isDone6) => isDone6 ? succeed2(scopeDeferred, undefined).pipe(zipRight7(_await3(fiber)), zipRight7(inheritAll2(fiber))) : succeed2(scopeDeferred, undefined).pipe(zipRight7(interruptors3 && size6(interruptors3) > 0 ? interruptAs(fiber, combineAll4(interruptors3)) : interrupt7(fiber)), zipRight7(inheritAll2(fiber)))));
    }).pipe(zipRight7(restore(_await(channelDeferred)))))))));
  });
});

// node_modules/effect/dist/esm/internal/opCodes/channelMergeDecision.js
var OP_DONE4 = "Done", OP_AWAIT = "Await";

// node_modules/effect/dist/esm/internal/channel/mergeDecision.js
var MergeDecisionSymbolKey = "effect/ChannelMergeDecision", MergeDecisionTypeId, proto9, Done3 = (effect3) => {
  const op = Object.create(proto9);
  op._tag = OP_DONE4;
  op.effect = effect3;
  return op;
}, Await = (f) => {
  const op = Object.create(proto9);
  op._tag = OP_AWAIT;
  op.f = f;
  return op;
}, AwaitConst = (effect3) => Await(() => effect3), isMergeDecision = (u) => hasProperty(u, MergeDecisionTypeId), match25;
var init_mergeDecision = __esm(() => {
  init_Function();
  init_Predicate();
  MergeDecisionTypeId = /* @__PURE__ */ Symbol.for(MergeDecisionSymbolKey);
  proto9 = {
    [MergeDecisionTypeId]: {
      _R: (_) => _,
      _E0: (_) => _,
      _Z0: (_) => _,
      _E: (_) => _,
      _Z: (_) => _
    }
  };
  match25 = /* @__PURE__ */ dual(2, (self, {
    onAwait,
    onDone
  }) => {
    const op = self;
    switch (op._tag) {
      case OP_DONE4:
        return onDone(op.effect);
      case OP_AWAIT:
        return onAwait(op.f);
    }
  });
});

// node_modules/effect/dist/esm/internal/opCodes/channelMergeState.js
var OP_BOTH_RUNNING = "BothRunning", OP_LEFT_DONE = "LeftDone", OP_RIGHT_DONE = "RightDone";

// node_modules/effect/dist/esm/internal/channel/mergeState.js
var MergeStateSymbolKey = "effect/ChannelMergeState", MergeStateTypeId, proto10, BothRunning = (left3, right3) => {
  const op = Object.create(proto10);
  op._tag = OP_BOTH_RUNNING;
  op.left = left3;
  op.right = right3;
  return op;
}, LeftDone = (f) => {
  const op = Object.create(proto10);
  op._tag = OP_LEFT_DONE;
  op.f = f;
  return op;
}, RightDone = (f) => {
  const op = Object.create(proto10);
  op._tag = OP_RIGHT_DONE;
  op.f = f;
  return op;
}, isMergeState = (u) => hasProperty(u, MergeStateTypeId), isBothRunning = (self) => {
  return self._tag === OP_BOTH_RUNNING;
}, isLeftDone = (self) => {
  return self._tag === OP_LEFT_DONE;
}, isRightDone = (self) => {
  return self._tag === OP_RIGHT_DONE;
}, match26;
var init_mergeState = __esm(() => {
  init_Function();
  init_Predicate();
  MergeStateTypeId = /* @__PURE__ */ Symbol.for(MergeStateSymbolKey);
  proto10 = {
    [MergeStateTypeId]: MergeStateTypeId
  };
  match26 = /* @__PURE__ */ dual(2, (self, {
    onBothRunning,
    onLeftDone,
    onRightDone
  }) => {
    switch (self._tag) {
      case OP_BOTH_RUNNING: {
        return onBothRunning(self.left, self.right);
      }
      case OP_LEFT_DONE: {
        return onLeftDone(self.f);
      }
      case OP_RIGHT_DONE: {
        return onRightDone(self.f);
      }
    }
  });
});

// node_modules/effect/dist/esm/internal/opCodes/channelMergeStrategy.js
var OP_BACK_PRESSURE = "BackPressure", OP_BUFFER_SLIDING = "BufferSliding";

// node_modules/effect/dist/esm/internal/channel/mergeStrategy.js
var MergeStrategySymbolKey = "effect/ChannelMergeStrategy", MergeStrategyTypeId, proto11, BackPressure = (_) => {
  const op = Object.create(proto11);
  op._tag = OP_BACK_PRESSURE;
  return op;
}, BufferSliding = (_) => {
  const op = Object.create(proto11);
  op._tag = OP_BUFFER_SLIDING;
  return op;
}, isMergeStrategy = (u) => hasProperty(u, MergeStrategyTypeId), isBackPressure = (self) => self._tag === OP_BACK_PRESSURE, isBufferSliding = (self) => self._tag === OP_BUFFER_SLIDING, match27;
var init_mergeStrategy = __esm(() => {
  init_Function();
  init_Predicate();
  MergeStrategyTypeId = /* @__PURE__ */ Symbol.for(MergeStrategySymbolKey);
  proto11 = {
    [MergeStrategyTypeId]: MergeStrategyTypeId
  };
  match27 = /* @__PURE__ */ dual(2, (self, {
    onBackPressure,
    onBufferSliding
  }) => {
    switch (self._tag) {
      case OP_BACK_PRESSURE: {
        return onBackPressure();
      }
      case OP_BUFFER_SLIDING: {
        return onBufferSliding();
      }
    }
  });
});

// node_modules/effect/dist/esm/internal/channel/singleProducerAsyncInput.js
class SingleProducerAsyncInputImpl {
  ref;
  constructor(ref) {
    this.ref = ref;
  }
  awaitRead() {
    return flatten13(modify8(this.ref, (state) => state._tag === OP_STATE_EMPTY ? [_await(state.notifyProducer), state] : [_void, state]));
  }
  get close() {
    return fiberIdWith2((fiberId3) => this.error(interrupt6(fiberId3)));
  }
  done(value2) {
    return flatten13(modify8(this.ref, (state) => {
      switch (state._tag) {
        case OP_STATE_EMPTY: {
          return [_await(state.notifyProducer), state];
        }
        case OP_STATE_EMIT: {
          return [forEach16(state.notifyConsumers, (deferred) => succeed2(deferred, left2(value2)), {
            discard: true
          }), stateDone(value2)];
        }
        case OP_STATE_ERROR: {
          return [interrupt8, state];
        }
        case OP_STATE_DONE2: {
          return [interrupt8, state];
        }
      }
    }));
  }
  emit(element) {
    return flatMap18(make24(), (deferred) => flatten13(modify8(this.ref, (state) => {
      switch (state._tag) {
        case OP_STATE_EMPTY: {
          return [_await(state.notifyProducer), state];
        }
        case OP_STATE_EMIT: {
          const notifyConsumer = state.notifyConsumers[0];
          const notifyConsumers = state.notifyConsumers.slice(1);
          if (notifyConsumer !== undefined) {
            return [succeed2(notifyConsumer, right2(element)), notifyConsumers.length === 0 ? stateEmpty(deferred) : stateEmit(notifyConsumers)];
          }
          throw new Error("Bug: Channel.SingleProducerAsyncInput.emit - Queue was empty! please report an issue at https://github.com/Effect-TS/effect/issues");
        }
        case OP_STATE_ERROR: {
          return [interrupt8, state];
        }
        case OP_STATE_DONE2: {
          return [interrupt8, state];
        }
      }
    })));
  }
  error(cause3) {
    return flatten13(modify8(this.ref, (state) => {
      switch (state._tag) {
        case OP_STATE_EMPTY: {
          return [_await(state.notifyProducer), state];
        }
        case OP_STATE_EMIT: {
          return [forEach16(state.notifyConsumers, (deferred) => failCause2(deferred, cause3), {
            discard: true
          }), stateError(cause3)];
        }
        case OP_STATE_ERROR: {
          return [interrupt8, state];
        }
        case OP_STATE_DONE2: {
          return [interrupt8, state];
        }
      }
    }));
  }
  get take() {
    return this.takeWith((cause3) => failCause3(map22(cause3, left2)), (elem) => succeed3(elem), (done9) => fail4(right2(done9)));
  }
  takeWith(onError4, onElement, onDone) {
    return flatMap18(make24(), (deferred) => flatten13(modify8(this.ref, (state) => {
      switch (state._tag) {
        case OP_STATE_EMPTY: {
          return [zipRight7(succeed2(state.notifyProducer, undefined), matchCause4(_await(deferred), {
            onFailure: onError4,
            onSuccess: match({
              onLeft: onDone,
              onRight: onElement
            })
          })), stateEmit([deferred])];
        }
        case OP_STATE_EMIT: {
          return [matchCause4(_await(deferred), {
            onFailure: onError4,
            onSuccess: match({
              onLeft: onDone,
              onRight: onElement
            })
          }), stateEmit([...state.notifyConsumers, deferred])];
        }
        case OP_STATE_ERROR: {
          return [succeed13(onError4(state.cause)), state];
        }
        case OP_STATE_DONE2: {
          return [succeed13(onDone(state.done)), state];
        }
      }
    })));
  }
}
var OP_STATE_EMPTY = "Empty", OP_STATE_EMIT = "Emit", OP_STATE_ERROR = "Error", OP_STATE_DONE2 = "Done", stateEmpty = (notifyProducer) => ({
  _tag: OP_STATE_EMPTY,
  notifyProducer
}), stateEmit = (notifyConsumers) => ({
  _tag: OP_STATE_EMIT,
  notifyConsumers
}), stateError = (cause3) => ({
  _tag: OP_STATE_ERROR,
  cause: cause3
}), stateDone = (done9) => ({
  _tag: OP_STATE_DONE2,
  done: done9
}), make63 = () => pipe(make24(), flatMap18((deferred) => make37(stateEmpty(deferred))), map26((ref) => new SingleProducerAsyncInputImpl(ref)));
var init_singleProducerAsyncInput = __esm(() => {
  init_Cause();
  init_Deferred();
  init_Effect();
  init_Either();
  init_Exit();
  init_Function();
  init_Ref();
});

// node_modules/effect/dist/esm/internal/channel.js
var acquireUseRelease4 = (acquire, use2, release) => flatMap20(fromEffect5(make37(() => _void)), (ref) => pipe(fromEffect5(uninterruptible3(tap5(acquire, (a) => set7(ref, (exit4) => release(a, exit4))))), flatMap20(use2), ensuringWith((exit4) => flatMap18(get14(ref), (f) => f(exit4))))), as9, asVoid7 = (self) => map28(self, constVoid), buffer = (options) => suspend6(() => {
  const doBuffer = (empty43, isEmpty19, ref) => unwrap2(modify8(ref, (inElem) => isEmpty19(inElem) ? [readWith({
    onInput: (input) => flatMap20(write2(input), () => doBuffer(empty43, isEmpty19, ref)),
    onFailure: (error3) => fail14(error3),
    onDone: (done9) => succeedNow(done9)
  }), inElem] : [flatMap20(write2(inElem), () => doBuffer(empty43, isEmpty19, ref)), empty43]));
  return doBuffer(options.empty, options.isEmpty, options.ref);
}), bufferChunk = (ref) => buffer({
  empty: empty7(),
  isEmpty: isEmpty2,
  ref
}), catchAll6, concatMap, collect2, concatOut = (self) => concatAll(self), mapInput7, mapInputEffect2, mapInputError, mapInputErrorEffect, mapInputIn, mapInputInEffect, doneCollect = (self) => suspend6(() => {
  const builder = [];
  return pipe(pipeTo(self, doneCollectReader(builder)), flatMap20((outDone) => succeed15([unsafeFromArray(builder), outDone])));
}), doneCollectReader = (builder) => {
  return readWith({
    onInput: (outElem) => flatMap20(sync10(() => {
      builder.push(outElem);
    }), () => doneCollectReader(builder)),
    onFailure: fail14,
    onDone: succeed15
  });
}, drain = (self) => {
  const drainer = readWithCause({
    onInput: () => drainer,
    onFailure: failCause12,
    onDone: succeed15
  });
  return pipeTo(self, drainer);
}, emitCollect = (self) => flatMap20(doneCollect(self), write2), ensuring5, context7 = () => fromEffect5(context5()), contextWith3 = (f) => map28(context7(), f), contextWithChannel = (f) => flatMap20(context7(), f), contextWithEffect3 = (f) => mapEffect5(context7(), f), flatten15 = (self) => flatMap20(self, identity), foldChannel, fromEither3 = (either7) => suspend6(() => match(either7, {
  onLeft: fail14,
  onRight: succeed15
})), fromInput = (input) => unwrap2(input.takeWith(failCause12, (elem) => flatMap20(write2(elem), () => fromInput(input)), succeed15)), fromPubSub = (pubsub) => unwrapScoped3(map26(subscribe2(pubsub), fromQueue)), fromPubSubScoped = (pubsub) => map26(subscribe2(pubsub), fromQueue), fromOption6 = (option5) => suspend6(() => match2(option5, {
  onNone: () => fail14(none2()),
  onSome: succeed15
})), fromQueue = (queue) => suspend6(() => fromQueueInternal(queue)), fromQueueInternal = (queue) => pipe(fromEffect5(take6(queue)), flatMap20(match({
  onLeft: match7({
    onFailure: failCause12,
    onSuccess: succeedNow
  }),
  onRight: (elem) => flatMap20(write2(elem), () => fromQueueInternal(queue))
}))), identityChannel = () => readWith({
  onInput: (input) => flatMap20(write2(input), () => identityChannel()),
  onFailure: fail14,
  onDone: succeedNow
}), interruptWhen, interruptWhenDeferred, map28, mapEffect5, mapError7, mapErrorCause5, mapOut, mapOutEffect, mapOutEffectPar, mergeAll7 = (options) => {
  return (channels) => mergeAllWith(options)(channels, constVoid);
}, mergeAllUnbounded = (channels) => mergeAllWith({
  concurrency: "unbounded"
})(channels, constVoid), mergeAllUnboundedWith = (channels, f) => mergeAllWith({
  concurrency: "unbounded"
})(channels, f), mergeAllWith = ({
  bufferSize = 16,
  concurrency,
  mergeStrategy = BackPressure()
}) => (channels, f) => unwrapScopedWith((scope6) => gen6(function* () {
  const concurrencyN = concurrency === "unbounded" ? Number.MAX_SAFE_INTEGER : concurrency;
  const input = yield* make63();
  const queueReader = fromInput(input);
  const queue = yield* bounded5(bufferSize);
  yield* addFinalizer3(scope6, shutdown4(queue));
  const cancelers = yield* unbounded5();
  yield* addFinalizer3(scope6, shutdown4(cancelers));
  const lastDone = yield* make37(none2());
  const errorSignal = yield* make24();
  const withPermits = (yield* makeSemaphore2(concurrencyN)).withPermits;
  const pull = yield* toPullIn(pipeTo(queueReader, channels), scope6);
  function evaluatePull(pull2) {
    return pull2.pipe(flatMap18(match({
      onLeft: (done9) => succeed13(some3(done9)),
      onRight: (outElem) => as8(offer3(queue, succeed13(right2(outElem))), none2())
    })), repeat3({
      until: (_) => isSome2(_)
    }), flatMap18((outDone) => update4(lastDone, match2({
      onNone: () => some3(outDone.value),
      onSome: (lastDone2) => some3(f(lastDone2, outDone.value))
    }))), catchAllCause4((cause3) => isInterrupted3(cause3) ? failCause10(cause3) : offer3(queue, failCause10(cause3)).pipe(zipRight7(succeed2(errorSignal, undefined)), asVoid6)));
  }
  yield* pull.pipe(matchCauseEffect3({
    onFailure: (cause3) => offer3(queue, failCause10(cause3)).pipe(zipRight7(succeed13(false))),
    onSuccess: match({
      onLeft: (outDone) => raceWith2(interruptible4(_await(errorSignal)), interruptible4(withPermits(concurrencyN)(_void)), {
        onSelfDone: (_, permitAcquisition) => as8(interrupt7(permitAcquisition), false),
        onOtherDone: (_, failureAwait) => zipRight7(interrupt7(failureAwait), get14(lastDone).pipe(flatMap18(match2({
          onNone: () => offer3(queue, succeed13(left2(outDone))),
          onSome: (lastDone2) => offer3(queue, succeed13(left2(f(lastDone2, outDone))))
        })), as8(false)))
      }),
      onRight: (channel) => match27(mergeStrategy, {
        onBackPressure: () => gen6(function* () {
          const latch = yield* make24();
          const raceEffects = scopedWith2((scope7) => toPullIn(pipeTo(queueReader, channel), scope7).pipe(flatMap18((pull2) => race3(exit3(evaluatePull(pull2)), exit3(interruptible4(_await(errorSignal))))), flatMap18(identity)));
          yield* succeed2(latch, undefined).pipe(zipRight7(raceEffects), withPermits(1), forkIn3(scope6));
          yield* _await(latch);
          const errored = yield* isDone(errorSignal);
          return !errored;
        }),
        onBufferSliding: () => gen6(function* () {
          const canceler = yield* make24();
          const latch = yield* make24();
          const size21 = yield* size20(cancelers);
          yield* take6(cancelers).pipe(flatMap18((canceler2) => succeed2(canceler2, undefined)), when3(() => size21 >= concurrencyN));
          yield* offer3(cancelers, canceler);
          const raceEffects = scopedWith2((scope7) => toPullIn(pipeTo(queueReader, channel), scope7).pipe(flatMap18((pull2) => exit3(evaluatePull(pull2)).pipe(race3(exit3(interruptible4(_await(errorSignal)))), race3(exit3(interruptible4(_await(canceler)))))), flatMap18(identity)));
          yield* succeed2(latch, undefined).pipe(zipRight7(raceEffects), withPermits(1), forkIn3(scope6));
          yield* _await(latch);
          const errored = yield* isDone(errorSignal);
          return !errored;
        })
      })
    })
  }), repeat3({
    while: (_) => _
  }), forkIn3(scope6));
  const consumer = pipe(take6(queue), flatten13, matchCause4({
    onFailure: failCause12,
    onSuccess: match({
      onLeft: succeedNow,
      onRight: (outElem) => flatMap20(write2(outElem), () => consumer)
    })
  }), unwrap2);
  return embedInput(consumer, input);
})), mergeMap, mergeOut, mergeOutWith, mergeWith2, never6, orDie6, orDieWith3, orElse10, pipeToOrFail, provideService6, provideLayer, mapInputContext4, provideSomeLayer2, read2 = () => readOrFail(none2()), repeated = (self) => flatMap20(self, () => repeated(self)), run2 = (self) => scopedWith2((scope6) => runIn(self, scope6)), runCollect = (self) => run2(collectElements(self)), runDrain = (self) => run2(drain(self)), runScoped = (self) => scopeWith2((scope6) => runIn(self, scope6)), scoped6 = (effect3) => unwrap2(uninterruptibleMask3((restore) => map26(make55(), (scope6) => acquireReleaseOut(tapErrorCause4(restore(extend3(effect3, scope6)), (cause3) => close(scope6, failCause3(cause3))), (_, exit4) => close(scope6, exit4))))), scopedWith3 = (f) => unwrapScoped3(map26(scope4, (scope6) => flatMap20(fromEffect5(f(scope6)), write2))), splitLines = () => suspend6(() => {
  let stringBuilder = "";
  let midCRLF = false;
  const splitLinesChunk = (chunk3) => {
    const chunkBuilder = [];
    map7(chunk3, (str) => {
      if (str.length !== 0) {
        let from = 0;
        let indexOfCR = str.indexOf("\r");
        let indexOfLF = str.indexOf(`
`);
        if (midCRLF) {
          if (indexOfLF === 0) {
            chunkBuilder.push(stringBuilder);
            stringBuilder = "";
            from = 1;
            indexOfLF = str.indexOf(`
`, from);
          } else {
            stringBuilder = stringBuilder + "\r";
          }
          midCRLF = false;
        }
        while (indexOfCR !== -1 || indexOfLF !== -1) {
          if (indexOfCR === -1 || indexOfLF !== -1 && indexOfLF < indexOfCR) {
            if (stringBuilder.length === 0) {
              chunkBuilder.push(str.substring(from, indexOfLF));
            } else {
              chunkBuilder.push(stringBuilder + str.substring(from, indexOfLF));
              stringBuilder = "";
            }
            from = indexOfLF + 1;
            indexOfLF = str.indexOf(`
`, from);
          } else {
            if (str.length === indexOfCR + 1) {
              midCRLF = true;
              indexOfCR = -1;
            } else {
              if (indexOfLF === indexOfCR + 1) {
                if (stringBuilder.length === 0) {
                  chunkBuilder.push(str.substring(from, indexOfCR));
                } else {
                  stringBuilder = stringBuilder + str.substring(from, indexOfCR);
                  chunkBuilder.push(stringBuilder);
                  stringBuilder = "";
                }
                from = indexOfCR + 2;
                indexOfCR = str.indexOf("\r", from);
                indexOfLF = str.indexOf(`
`, from);
              } else {
                indexOfCR = str.indexOf("\r", indexOfCR + 1);
              }
            }
          }
        }
        if (midCRLF) {
          stringBuilder = stringBuilder + str.substring(from, str.length - 1);
        } else {
          stringBuilder = stringBuilder + str.substring(from, str.length);
        }
      }
    });
    return unsafeFromArray(chunkBuilder);
  };
  const loop3 = readWithCause({
    onInput: (input) => {
      const out = splitLinesChunk(input);
      return isEmpty2(out) ? loop3 : flatMap20(write2(out), () => loop3);
    },
    onFailure: (cause3) => stringBuilder.length === 0 ? failCause12(cause3) : flatMap20(write2(of3(stringBuilder)), () => failCause12(cause3)),
    onDone: (done9) => stringBuilder.length === 0 ? succeed15(done9) : flatMap20(write2(of3(stringBuilder)), () => succeed15(done9))
  });
  return loop3;
}), toPubSub = (pubsub) => toQueue(pubsub), toPull = (self) => flatMap18(scope4, (scope6) => toPullIn(self, scope6)), toPullIn, interpretToPull = (channelState, exec) => {
  const state = channelState;
  switch (state._tag) {
    case OP_DONE3: {
      return match7(exec.getDone(), {
        onFailure: failCause10,
        onSuccess: (done9) => succeed13(left2(done9))
      });
    }
    case OP_EMIT2: {
      return succeed13(right2(exec.getEmit()));
    }
    case OP_FROM_EFFECT3: {
      return pipe(state.effect, flatMap18(() => interpretToPull(exec.run(), exec)));
    }
    case OP_READ2: {
      return readUpstream(state, () => interpretToPull(exec.run(), exec), (cause3) => failCause10(cause3));
    }
  }
}, toQueue = (queue) => suspend6(() => toQueueInternal(queue)), toQueueInternal = (queue) => {
  return readWithCause({
    onInput: (elem) => flatMap20(fromEffect5(offer3(queue, right2(elem))), () => toQueueInternal(queue)),
    onFailure: (cause3) => fromEffect5(pipe(offer3(queue, left2(failCause3(cause3))))),
    onDone: (done9) => fromEffect5(pipe(offer3(queue, left2(succeed3(done9)))))
  });
}, unwrap2 = (channel) => flatten15(fromEffect5(channel)), unwrapScoped3 = (self) => concatAllWith(scoped6(self), (d, _) => d, (d, _) => d), unwrapScopedWith = (f) => concatAllWith(scopedWith3(f), (d, _) => d, (d, _) => d), updateService5, withSpan5 = function() {
  const dataFirst = typeof arguments[0] !== "string";
  const name = dataFirst ? arguments[1] : arguments[0];
  const options = addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]);
  const acquire = all11([makeSpan2(name, options), context5(), clock2, get15(currentTracerTimingEnabled2)]);
  if (dataFirst) {
    const self = arguments[0];
    return acquireUseRelease4(acquire, ([span4, context8]) => provideContext4(self, add2(context8, spanTag, span4)), ([span4, , clock3, timingEnabled], exit4) => endSpan(span4, exit4, clock3, timingEnabled));
  }
  return (self) => acquireUseRelease4(acquire, ([span4, context8]) => provideContext4(self, add2(context8, spanTag, span4)), ([span4, , clock3, timingEnabled], exit4) => endSpan(span4, exit4, clock3, timingEnabled));
}, writeAll = (...outs) => writeChunk(fromIterable3(outs)), writeChunk = (outs) => writeChunkWriter(0, outs.length, outs), writeChunkWriter = (idx, len, chunk3) => {
  return idx === len ? void_8 : pipe(write2(pipe(chunk3, unsafeGet4(idx))), flatMap20(() => writeChunkWriter(idx + 1, len, chunk3)));
}, zip13, zipLeft8, zipRight8, ChannelExceptionTypeId, ChannelException = (error3) => ({
  _tag: "ChannelException",
  [ChannelExceptionTypeId]: ChannelExceptionTypeId,
  error: error3
}), isChannelException = (u) => hasProperty(u, ChannelExceptionTypeId);
var init_channel = __esm(() => {
  init_Cause();
  init_Chunk();
  init_Context();
  init_Deferred();
  init_Effect();
  init_Either();
  init_Equal();
  init_Exit();
  init_Fiber();
  init_FiberRef();
  init_Function();
  init_Layer();
  init_Option();
  init_Predicate();
  init_PubSub();
  init_Queue();
  init_Ref();
  init_Scope();
  init_channelExecutor();
  init_mergeDecision();
  init_mergeState();
  init_mergeStrategy();
  init_singleProducerAsyncInput();
  init_core_effect();
  init_core_stream();
  init_tracer();
  as9 = /* @__PURE__ */ dual(2, (self, value2) => map28(self, () => value2));
  catchAll6 = /* @__PURE__ */ dual(2, (self, f) => catchAllCause6(self, (cause3) => match(failureOrCause2(cause3), {
    onLeft: f,
    onRight: failCause12
  })));
  concatMap = /* @__PURE__ */ dual(2, (self, f) => concatMapWith(self, f, () => {
    return;
  }, () => {
    return;
  }));
  collect2 = /* @__PURE__ */ dual(2, (self, pf) => {
    const collector = readWith({
      onInput: (out) => match2(pf(out), {
        onNone: () => collector,
        onSome: (out2) => flatMap20(write2(out2), () => collector)
      }),
      onFailure: fail14,
      onDone: succeedNow
    });
    return pipeTo(self, collector);
  });
  mapInput7 = /* @__PURE__ */ dual(2, (self, f) => {
    const reader = readWith({
      onInput: (inElem) => flatMap20(write2(inElem), () => reader),
      onFailure: fail14,
      onDone: (done9) => succeedNow(f(done9))
    });
    return pipeTo(reader, self);
  });
  mapInputEffect2 = /* @__PURE__ */ dual(2, (self, f) => {
    const reader = readWith({
      onInput: (inElem) => flatMap20(write2(inElem), () => reader),
      onFailure: fail14,
      onDone: (done9) => fromEffect5(f(done9))
    });
    return pipeTo(reader, self);
  });
  mapInputError = /* @__PURE__ */ dual(2, (self, f) => {
    const reader = readWith({
      onInput: (inElem) => flatMap20(write2(inElem), () => reader),
      onFailure: (error3) => fail14(f(error3)),
      onDone: succeedNow
    });
    return pipeTo(reader, self);
  });
  mapInputErrorEffect = /* @__PURE__ */ dual(2, (self, f) => {
    const reader = readWith({
      onInput: (inElem) => flatMap20(write2(inElem), () => reader),
      onFailure: (error3) => fromEffect5(f(error3)),
      onDone: succeedNow
    });
    return pipeTo(reader, self);
  });
  mapInputIn = /* @__PURE__ */ dual(2, (self, f) => {
    const reader = readWith({
      onInput: (inElem) => flatMap20(write2(f(inElem)), () => reader),
      onFailure: fail14,
      onDone: succeedNow
    });
    return pipeTo(reader, self);
  });
  mapInputInEffect = /* @__PURE__ */ dual(2, (self, f) => {
    const reader = readWith({
      onInput: (inElem) => flatMap20(flatMap20(fromEffect5(f(inElem)), write2), () => reader),
      onFailure: fail14,
      onDone: succeedNow
    });
    return pipeTo(reader, self);
  });
  ensuring5 = /* @__PURE__ */ dual(2, (self, finalizer) => ensuringWith(self, () => finalizer));
  foldChannel = /* @__PURE__ */ dual(2, (self, options) => foldCauseChannel(self, {
    onFailure: (cause3) => {
      const either7 = failureOrCause2(cause3);
      switch (either7._tag) {
        case "Left": {
          return options.onFailure(either7.left);
        }
        case "Right": {
          return failCause12(either7.right);
        }
      }
    },
    onSuccess: options.onSuccess
  }));
  interruptWhen = /* @__PURE__ */ dual(2, (self, effect3) => mergeWith2(self, {
    other: fromEffect5(effect3),
    onSelfDone: (selfDone) => Done3(suspend4(() => selfDone)),
    onOtherDone: (effectDone) => Done3(suspend4(() => effectDone))
  }));
  interruptWhenDeferred = /* @__PURE__ */ dual(2, (self, deferred) => interruptWhen(self, _await(deferred)));
  map28 = /* @__PURE__ */ dual(2, (self, f) => flatMap20(self, (a) => sync10(() => f(a))));
  mapEffect5 = /* @__PURE__ */ dual(2, (self, f) => flatMap20(self, (z2) => fromEffect5(f(z2))));
  mapError7 = /* @__PURE__ */ dual(2, (self, f) => mapErrorCause5(self, map22(f)));
  mapErrorCause5 = /* @__PURE__ */ dual(2, (self, f) => catchAllCause6(self, (cause3) => failCause12(f(cause3))));
  mapOut = /* @__PURE__ */ dual(2, (self, f) => {
    const reader = readWith({
      onInput: (outElem) => flatMap20(write2(f(outElem)), () => reader),
      onFailure: fail14,
      onDone: succeedNow
    });
    return pipeTo(self, reader);
  });
  mapOutEffect = /* @__PURE__ */ dual(2, (self, f) => {
    const reader = readWithCause({
      onInput: (outElem) => pipe(fromEffect5(f(outElem)), flatMap20(write2), flatMap20(() => reader)),
      onFailure: failCause12,
      onDone: succeedNow
    });
    return pipeTo(self, reader);
  });
  mapOutEffectPar = /* @__PURE__ */ dual(3, (self, f, n) => unwrapScopedWith((scope6) => gen6(function* () {
    const input = yield* make63();
    const queueReader = fromInput(input);
    const queue = yield* bounded5(n);
    yield* addFinalizer3(scope6, shutdown4(queue));
    const errorSignal = yield* make24();
    const withPermits = n === Number.POSITIVE_INFINITY ? (_) => identity : (yield* makeSemaphore2(n)).withPermits;
    const pull = yield* queueReader.pipe(pipeTo(self), toPullIn(scope6));
    yield* pull.pipe(matchCauseEffect3({
      onFailure: (cause3) => offer3(queue, failCause10(cause3)),
      onSuccess: match({
        onLeft: (outDone) => zipRight7(interruptible4(withPermits(n)(_void)), asVoid6(offer3(queue, succeed13(left2(outDone))))),
        onRight: (outElem) => gen6(function* () {
          const deferred = yield* make24();
          const latch = yield* make24();
          yield* offer3(queue, map26(_await(deferred), right2));
          yield* succeed2(latch, undefined).pipe(zipRight7(uninterruptibleMask3((restore) => exit3(restore(_await(errorSignal))).pipe(raceFirst3(exit3(restore(f(outElem)))), flatMap18(identity))).pipe(tapErrorCause4((cause3) => failCause2(errorSignal, cause3)), intoDeferred2(deferred))), withPermits(1), forkIn3(scope6));
          yield* _await(latch);
        })
      })
    }), forever4, interruptible4, forkIn3(scope6));
    const consumer = unwrap2(matchCause4(flatten13(take6(queue)), {
      onFailure: failCause12,
      onSuccess: match({
        onLeft: succeedNow,
        onRight: (outElem) => flatMap20(write2(outElem), () => consumer)
      })
    }));
    return embedInput(consumer, input);
  })));
  mergeMap = /* @__PURE__ */ dual(3, (self, f, options) => mergeAll7(options)(mapOut(self, f)));
  mergeOut = /* @__PURE__ */ dual(2, (self, n) => mergeAll7({
    concurrency: n
  })(mapOut(self, identity)));
  mergeOutWith = /* @__PURE__ */ dual(3, (self, n, f) => mergeAllWith({
    concurrency: n
  })(mapOut(self, identity), f));
  mergeWith2 = /* @__PURE__ */ dual(2, (self, options) => {
    function merge9(scope6) {
      return gen6(function* () {
        const input = yield* make63();
        const queueReader = fromInput(input);
        const pullL = yield* toPullIn(pipeTo(queueReader, self), scope6);
        const pullR = yield* toPullIn(pipeTo(queueReader, options.other), scope6);
        function handleSide(exit4, fiber, pull) {
          return (done9, both3, single2) => {
            function onDecision2(decision) {
              const op = decision;
              if (op._tag === OP_DONE4) {
                return succeed13(fromEffect5(zipRight7(interrupt7(fiber), op.effect)));
              }
              return map26(_await3(fiber), match7({
                onFailure: (cause3) => fromEffect5(op.f(failCause3(cause3))),
                onSuccess: match({
                  onLeft: (done10) => fromEffect5(op.f(succeed3(done10))),
                  onRight: (elem) => zipRight8(write2(elem), go2(single2(op.f)))
                })
              }));
            }
            return match7(exit4, {
              onFailure: (cause3) => onDecision2(done9(failCause3(cause3))),
              onSuccess: match({
                onLeft: (z2) => onDecision2(done9(succeed3(z2))),
                onRight: (elem) => succeed13(flatMap20(write2(elem), () => flatMap20(fromEffect5(forkIn3(interruptible4(pull), scope6)), (leftFiber) => go2(both3(leftFiber, fiber)))))
              })
            });
          };
        }
        function go2(state) {
          switch (state._tag) {
            case OP_BOTH_RUNNING: {
              const leftJoin = interruptible4(join4(state.left));
              const rightJoin = interruptible4(join4(state.right));
              return unwrap2(raceWith2(leftJoin, rightJoin, {
                onSelfDone: (leftExit, rf) => zipRight7(interrupt7(rf), handleSide(leftExit, state.right, pullL)(options.onSelfDone, BothRunning, (f) => LeftDone(f))),
                onOtherDone: (rightExit, lf) => zipRight7(interrupt7(lf), handleSide(rightExit, state.left, pullR)(options.onOtherDone, (left3, right3) => BothRunning(right3, left3), (f) => RightDone(f)))
              }));
            }
            case OP_LEFT_DONE: {
              return unwrap2(map26(exit3(pullR), match7({
                onFailure: (cause3) => fromEffect5(state.f(failCause3(cause3))),
                onSuccess: match({
                  onLeft: (done9) => fromEffect5(state.f(succeed3(done9))),
                  onRight: (elem) => flatMap20(write2(elem), () => go2(LeftDone(state.f)))
                })
              })));
            }
            case OP_RIGHT_DONE: {
              return unwrap2(map26(exit3(pullL), match7({
                onFailure: (cause3) => fromEffect5(state.f(failCause3(cause3))),
                onSuccess: match({
                  onLeft: (done9) => fromEffect5(state.f(succeed3(done9))),
                  onRight: (elem) => flatMap20(write2(elem), () => go2(RightDone(state.f)))
                })
              })));
            }
          }
        }
        return fromEffect5(withFiberRuntime2((parent) => {
          const inherit = withFiberRuntime2((state) => {
            state.transferChildren(parent.scope());
            return _void;
          });
          const leftFiber = interruptible4(pullL).pipe(ensuring4(inherit), forkIn3(scope6));
          const rightFiber = interruptible4(pullR).pipe(ensuring4(inherit), forkIn3(scope6));
          return zipWith12(leftFiber, rightFiber, (left3, right3) => BothRunning(left3, right3));
        })).pipe(flatMap20(go2), embedInput(input));
      });
    }
    return unwrapScopedWith(merge9);
  });
  never6 = /* @__PURE__ */ fromEffect5(never5);
  orDie6 = /* @__PURE__ */ dual(2, (self, error3) => orDieWith3(self, error3));
  orDieWith3 = /* @__PURE__ */ dual(2, (self, f) => catchAll6(self, (e) => failCauseSync7(() => die6(f(e)))));
  orElse10 = /* @__PURE__ */ dual(2, (self, that) => catchAll6(self, that));
  pipeToOrFail = /* @__PURE__ */ dual(2, (self, that) => suspend6(() => {
    let channelException = undefined;
    const reader = readWith({
      onInput: (outElem) => flatMap20(write2(outElem), () => reader),
      onFailure: (outErr) => {
        channelException = ChannelException(outErr);
        return failCause12(die6(channelException));
      },
      onDone: succeedNow
    });
    const writer = readWithCause({
      onInput: (outElem) => pipe(write2(outElem), flatMap20(() => writer)),
      onFailure: (cause3) => isDieType2(cause3) && isChannelException(cause3.defect) && equals(cause3.defect, channelException) ? fail14(cause3.defect.error) : failCause12(cause3),
      onDone: succeedNow
    });
    return pipeTo(pipeTo(pipeTo(self, reader), that), writer);
  }));
  provideService6 = /* @__PURE__ */ dual(3, (self, tag, service4) => {
    return flatMap20(context7(), (context8) => provideContext4(self, add2(context8, tag, service4)));
  });
  provideLayer = /* @__PURE__ */ dual(2, (self, layer) => unwrapScopedWith((scope6) => map26(buildWithScope2(layer, scope6), (context8) => provideContext4(self, context8))));
  mapInputContext4 = /* @__PURE__ */ dual(2, (self, f) => contextWithChannel((context8) => provideContext4(self, f(context8))));
  provideSomeLayer2 = /* @__PURE__ */ dual(2, (self, layer) => provideLayer(self, merge8(context6(), layer)));
  toPullIn = /* @__PURE__ */ dual(2, (self, scope6) => zip12(sync8(() => new ChannelExecutor(self, undefined, identity)), runtime4()).pipe(tap5(([executor, runtime5]) => addFinalizerExit(scope6, (exit4) => {
    const finalizer = executor.close(exit4);
    return finalizer !== undefined ? provide2(finalizer, runtime5) : _void;
  })), uninterruptible3, map26(([executor]) => suspend4(() => interpretToPull(executor.run(), executor)))));
  updateService5 = /* @__PURE__ */ dual(3, (self, tag, f) => mapInputContext4(self, (context8) => merge3(context8, make8(tag, f(unsafeGet3(context8, tag))))));
  zip13 = /* @__PURE__ */ dual((args2) => isChannel(args2[1]), (self, that, options) => options?.concurrent ? mergeWith2(self, {
    other: that,
    onSelfDone: (exit1) => Await((exit22) => suspend4(() => zip6(exit1, exit22))),
    onOtherDone: (exit22) => Await((exit1) => suspend4(() => zip6(exit1, exit22)))
  }) : flatMap20(self, (a) => map28(that, (b) => [a, b])));
  zipLeft8 = /* @__PURE__ */ dual((args2) => isChannel(args2[1]), (self, that, options) => options?.concurrent ? map28(zip13(self, that, {
    concurrent: true
  }), (tuple6) => tuple6[0]) : flatMap20(self, (z2) => as9(that, z2)));
  zipRight8 = /* @__PURE__ */ dual((args2) => isChannel(args2[1]), (self, that, options) => options?.concurrent ? map28(zip13(self, that, {
    concurrent: true
  }), (tuple6) => tuple6[1]) : flatMap20(self, () => that));
  ChannelExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Channel/ChannelException");
});

// node_modules/effect/dist/esm/internal/sink.js
var SinkTypeId3, sinkVariance2, SinkImpl, isSink = (u) => hasProperty(u, SinkTypeId3), suspend7 = (evaluate2) => new SinkImpl(suspend6(() => toChannel(evaluate2()))), as10, collectAll = () => new SinkImpl(collectAllLoop(empty7())), collectAllLoop = (acc) => readWithCause({
  onInput: (chunk3) => collectAllLoop(pipe(acc, appendAll3(chunk3))),
  onFailure: failCause12,
  onDone: () => succeed15(acc)
}), collectAllN = (n) => suspend7(() => fromChannel(collectAllNLoop(n, empty7()))), collectAllNLoop = (n, acc) => readWithCause({
  onInput: (chunk3) => {
    const [collected, leftovers] = splitAt2(chunk3, n);
    if (collected.length < n) {
      return collectAllNLoop(n - collected.length, appendAll3(acc, collected));
    }
    if (isEmpty2(leftovers)) {
      return succeed15(appendAll3(acc, collected));
    }
    return flatMap20(write2(leftovers), () => succeed15(appendAll3(acc, collected)));
  },
  onFailure: failCause12,
  onDone: () => succeed15(acc)
}), collectAllFrom = (self) => collectAllWhileWith(self, {
  initial: empty7(),
  while: constTrue,
  body: (chunk3, a) => pipe(chunk3, append3(a))
}), collectAllToMap = (key, merge9) => {
  return pipe(foldLeftChunks(empty11(), (map29, chunk3) => pipe(chunk3, reduce4(map29, (map30, input) => {
    const k = key(input);
    const v = pipe(map30, has5(k)) ? merge9(pipe(map30, unsafeGet6(k)), input) : input;
    return pipe(map30, set4(k, v));
  }))));
}, collectAllToMapN = (n, key, merge9) => {
  return foldWeighted({
    initial: empty11(),
    maxCost: n,
    cost: (acc, input) => pipe(acc, has5(key(input))) ? 0 : 1,
    body: (acc, input) => {
      const k = key(input);
      const v = pipe(acc, has5(k)) ? merge9(pipe(acc, unsafeGet6(k)), input) : input;
      return pipe(acc, set4(k, v));
    }
  });
}, collectAllToSet = () => foldLeftChunks(empty10(), (acc, chunk3) => pipe(chunk3, reduce4(acc, (acc2, input) => pipe(acc2, add4(input))))), collectAllToSetN = (n) => foldWeighted({
  initial: empty10(),
  maxCost: n,
  cost: (acc, input) => has4(acc, input) ? 0 : 1,
  body: (acc, input) => add4(acc, input)
}), collectAllUntil = (p) => {
  return pipe(fold([empty7(), true], (tuple6) => tuple6[1], ([chunk3, _], input) => [pipe(chunk3, append3(input)), !p(input)]), map29((tuple6) => tuple6[0]));
}, collectAllUntilEffect = (p) => {
  return pipe(foldEffect([empty7(), true], (tuple6) => tuple6[1], ([chunk3, _], input) => pipe(p(input), map26((bool) => [pipe(chunk3, append3(input)), !bool]))), map29((tuple6) => tuple6[0]));
}, collectAllWhile = (predicate) => fromChannel(collectAllWhileReader(predicate, empty7())), collectAllWhileReader = (predicate, done9) => readWith({
  onInput: (input) => {
    const [collected, leftovers] = pipe(toReadonlyArray(input), span(predicate));
    if (leftovers.length === 0) {
      return collectAllWhileReader(predicate, pipe(done9, appendAll3(unsafeFromArray(collected))));
    }
    return pipe(write2(unsafeFromArray(leftovers)), zipRight8(succeed15(pipe(done9, appendAll3(unsafeFromArray(collected))))));
  },
  onFailure: fail14,
  onDone: () => succeed15(done9)
}), collectAllWhileEffect = (predicate) => fromChannel(collectAllWhileEffectReader(predicate, empty7())), collectAllWhileEffectReader = (predicate, done9) => readWith({
  onInput: (input) => pipe(fromEffect5(pipe(input, takeWhile5(predicate), map26(unsafeFromArray))), flatMap20((collected) => {
    const leftovers = pipe(input, drop3(collected.length));
    if (isEmpty2(leftovers)) {
      return collectAllWhileEffectReader(predicate, pipe(done9, appendAll3(collected)));
    }
    return pipe(write2(leftovers), zipRight8(succeed15(pipe(done9, appendAll3(collected)))));
  })),
  onFailure: fail14,
  onDone: () => succeed15(done9)
}), collectAllWhileWith, collectAllWhileWithLoop = (self, leftoversRef, upstreamDoneRef, currentResult, p, f) => {
  return pipe(toChannel(self), doneCollect, foldChannel({
    onFailure: fail14,
    onSuccess: ([leftovers, doneValue]) => p(doneValue) ? pipe(fromEffect5(set7(leftoversRef, flatten5(leftovers))), flatMap20(() => pipe(fromEffect5(get14(upstreamDoneRef)), flatMap20((upstreamDone) => {
      const accumulatedResult = f(currentResult, doneValue);
      return upstreamDone ? pipe(write2(flatten5(leftovers)), as9(accumulatedResult)) : collectAllWhileWithLoop(self, leftoversRef, upstreamDoneRef, accumulatedResult, p, f);
    })))) : pipe(write2(flatten5(leftovers)), as9(currentResult))
  }));
}, collectLeftover = (self) => new SinkImpl(pipe(collectElements(toChannel(self)), map28(([chunks, z2]) => [z2, flatten5(chunks)]))), mapInput8, mapInputEffect3, mapInputChunks, mapInputChunksEffect, die10 = (defect) => failCause13(die6(defect)), dieMessage3 = (message) => failCause13(die6(new RuntimeException2(message))), dieSync6 = (evaluate2) => failCauseSync8(() => die6(evaluate2())), dimap, dimapEffect, dimapChunks, dimapChunksEffect, drain2, drop5 = (n) => suspend7(() => new SinkImpl(dropLoop(n))), dropLoop = (n) => readWith({
  onInput: (input) => {
    const dropped = pipe(input, drop3(n));
    const leftover = Math.max(n - input.length, 0);
    const more = isEmpty2(input) || leftover > 0;
    if (more) {
      return dropLoop(leftover);
    }
    return pipe(write2(dropped), zipRight8(identityChannel()));
  },
  onFailure: fail14,
  onDone: () => void_8
}), dropUntil3 = (predicate) => new SinkImpl(pipe(toChannel(dropWhile5((input) => !predicate(input))), pipeToOrFail(toChannel(drop5(1))))), dropUntilEffect = (predicate) => suspend7(() => new SinkImpl(dropUntilEffectReader(predicate))), dropUntilEffectReader = (predicate) => readWith({
  onInput: (input) => pipe(input, dropUntil2(predicate), map26((leftover) => {
    const more = leftover.length === 0;
    return more ? dropUntilEffectReader(predicate) : pipe(write2(unsafeFromArray(leftover)), zipRight8(identityChannel()));
  }), unwrap2),
  onFailure: fail14,
  onDone: () => void_8
}), dropWhile5 = (predicate) => new SinkImpl(dropWhileReader(predicate)), dropWhileReader = (predicate) => readWith({
  onInput: (input) => {
    const out = pipe(input, dropWhile2(predicate));
    if (isEmpty2(out)) {
      return dropWhileReader(predicate);
    }
    return pipe(write2(out), zipRight8(identityChannel()));
  },
  onFailure: fail14,
  onDone: succeedNow
}), dropWhileEffect = (predicate) => suspend7(() => new SinkImpl(dropWhileEffectReader(predicate))), dropWhileEffectReader = (predicate) => readWith({
  onInput: (input) => pipe(input, dropWhile4(predicate), map26((leftover) => {
    const more = leftover.length === 0;
    return more ? dropWhileEffectReader(predicate) : pipe(write2(unsafeFromArray(leftover)), zipRight8(identityChannel()));
  }), unwrap2),
  onFailure: fail14,
  onDone: () => void_8
}), ensuring6, ensuringWith2, context8 = () => fromEffect7(context5()), contextWith4 = (f) => pipe(context8(), map29(f)), contextWithEffect4 = (f) => pipe(context8(), mapEffect6(f)), contextWithSink = (f) => new SinkImpl(unwrap2(pipe(contextWith2((context9) => toChannel(f(context9)))))), every14 = (predicate) => fold(true, identity, (acc, input) => acc && predicate(input)), fail15 = (e) => new SinkImpl(fail14(e)), failSync8 = (evaluate2) => new SinkImpl(failSync7(evaluate2)), failCause13 = (cause3) => new SinkImpl(failCause12(cause3)), failCauseSync8 = (evaluate2) => new SinkImpl(failCauseSync7(evaluate2)), filterInput = (f) => {
  return (self) => pipe(self, mapInputChunks(filter5(f)));
}, filterInputEffect, findEffect, fold = (s, contFn, f) => suspend7(() => new SinkImpl(foldReader(s, contFn, f))), foldReader = (s, contFn, f) => {
  if (!contFn(s)) {
    return succeedNow(s);
  }
  return readWith({
    onInput: (input) => {
      const [nextS, leftovers] = foldChunkSplit(s, input, contFn, f, 0, input.length);
      if (isNonEmpty2(leftovers)) {
        return pipe(write2(leftovers), as9(nextS));
      }
      return foldReader(nextS, contFn, f);
    },
    onFailure: fail14,
    onDone: () => succeedNow(s)
  });
}, foldChunkSplit = (s, chunk3, contFn, f, index, length5) => {
  if (index === length5) {
    return [s, empty7()];
  }
  const s1 = f(s, pipe(chunk3, unsafeGet4(index)));
  if (contFn(s1)) {
    return foldChunkSplit(s1, chunk3, contFn, f, index + 1, length5);
  }
  return [s1, pipe(chunk3, drop3(index + 1))];
}, foldSink, foldChunks = (s, contFn, f) => suspend7(() => new SinkImpl(foldChunksReader(s, contFn, f))), foldChunksReader = (s, contFn, f) => {
  if (!contFn(s)) {
    return succeedNow(s);
  }
  return readWith({
    onInput: (input) => foldChunksReader(f(s, input), contFn, f),
    onFailure: fail14,
    onDone: () => succeedNow(s)
  });
}, foldChunksEffect = (s, contFn, f) => suspend7(() => new SinkImpl(foldChunksEffectReader(s, contFn, f))), foldChunksEffectReader = (s, contFn, f) => {
  if (!contFn(s)) {
    return succeedNow(s);
  }
  return readWith({
    onInput: (input) => pipe(fromEffect5(f(s, input)), flatMap20((s2) => foldChunksEffectReader(s2, contFn, f))),
    onFailure: fail14,
    onDone: () => succeedNow(s)
  });
}, foldEffect = (s, contFn, f) => suspend7(() => new SinkImpl(foldEffectReader(s, contFn, f))), foldEffectReader = (s, contFn, f) => {
  if (!contFn(s)) {
    return succeedNow(s);
  }
  return readWith({
    onInput: (input) => pipe(fromEffect5(foldChunkSplitEffect(s, input, contFn, f)), flatMap20(([nextS, leftovers]) => pipe(leftovers, match2({
      onNone: () => foldEffectReader(nextS, contFn, f),
      onSome: (leftover) => pipe(write2(leftover), as9(nextS))
    })))),
    onFailure: fail14,
    onDone: () => succeedNow(s)
  });
}, foldChunkSplitEffect = (s, chunk3, contFn, f) => foldChunkSplitEffectInternal(s, chunk3, 0, chunk3.length, contFn, f), foldChunkSplitEffectInternal = (s, chunk3, index, length5, contFn, f) => {
  if (index === length5) {
    return succeed13([s, none2()]);
  }
  return pipe(f(s, pipe(chunk3, unsafeGet4(index))), flatMap18((s1) => contFn(s1) ? foldChunkSplitEffectInternal(s1, chunk3, index + 1, length5, contFn, f) : succeed13([s1, some3(pipe(chunk3, drop3(index + 1)))])));
}, foldLeft = (s, f) => ignoreLeftover(fold(s, constTrue, f)), foldLeftChunks = (s, f) => foldChunks(s, constTrue, f), foldLeftChunksEffect = (s, f) => ignoreLeftover(foldChunksEffect(s, constTrue, f)), foldLeftEffect = (s, f) => foldEffect(s, constTrue, f), foldUntil = (s, max13, f) => pipe(fold([s, 0], (tuple6) => tuple6[1] < max13, ([output, count3], input) => [f(output, input), count3 + 1]), map29((tuple6) => tuple6[0])), foldUntilEffect = (s, max13, f) => pipe(foldEffect([s, 0], (tuple6) => tuple6[1] < max13, ([output, count3], input) => pipe(f(output, input), map26((s2) => [s2, count3 + 1]))), map29((tuple6) => tuple6[0])), foldWeighted = (options) => foldWeightedDecompose({
  ...options,
  decompose: of3
}), foldWeightedDecompose = (options) => suspend7(() => new SinkImpl(foldWeightedDecomposeLoop(options.initial, 0, false, options.maxCost, options.cost, options.decompose, options.body))), foldWeightedDecomposeLoop = (s, cost, dirty, max13, costFn, decompose, f) => readWith({
  onInput: (input) => {
    const [nextS, nextCost, nextDirty, leftovers] = foldWeightedDecomposeFold(input, 0, s, cost, dirty, max13, costFn, decompose, f);
    if (isNonEmpty2(leftovers)) {
      return pipe(write2(leftovers), zipRight8(succeedNow(nextS)));
    }
    if (cost > max13) {
      return succeedNow(nextS);
    }
    return foldWeightedDecomposeLoop(nextS, nextCost, nextDirty, max13, costFn, decompose, f);
  },
  onFailure: fail14,
  onDone: () => succeedNow(s)
}), foldWeightedDecomposeFold = (input, index, s, cost, dirty, max13, costFn, decompose, f) => {
  if (index === input.length) {
    return [s, cost, dirty, empty7()];
  }
  const elem = pipe(input, unsafeGet4(index));
  const total = cost + costFn(s, elem);
  if (total <= max13) {
    return foldWeightedDecomposeFold(input, index + 1, f(s, elem), total, true, max13, costFn, decompose, f);
  }
  const decomposed = decompose(elem);
  if (decomposed.length <= 1 && !dirty) {
    return [f(s, elem), total, true, pipe(input, drop3(index + 1))];
  }
  if (decomposed.length <= 1 && dirty) {
    return [s, cost, dirty, pipe(input, drop3(index))];
  }
  const next4 = pipe(decomposed, appendAll3(pipe(input, drop3(index + 1))));
  return foldWeightedDecomposeFold(next4, 0, s, cost, dirty, max13, costFn, decompose, f);
}, foldWeightedDecomposeEffect = (options) => suspend7(() => new SinkImpl(foldWeightedDecomposeEffectLoop(options.initial, options.maxCost, options.cost, options.decompose, options.body, 0, false))), foldWeightedEffect = (options) => foldWeightedDecomposeEffect({
  ...options,
  decompose: (input) => succeed13(of3(input))
}), foldWeightedDecomposeEffectLoop = (s, max13, costFn, decompose, f, cost, dirty) => readWith({
  onInput: (input) => pipe(fromEffect5(foldWeightedDecomposeEffectFold(s, max13, costFn, decompose, f, input, dirty, cost, 0)), flatMap20(([nextS, nextCost, nextDirty, leftovers]) => {
    if (isNonEmpty2(leftovers)) {
      return pipe(write2(leftovers), zipRight8(succeedNow(nextS)));
    }
    if (cost > max13) {
      return succeedNow(nextS);
    }
    return foldWeightedDecomposeEffectLoop(nextS, max13, costFn, decompose, f, nextCost, nextDirty);
  })),
  onFailure: fail14,
  onDone: () => succeedNow(s)
}), foldWeightedDecomposeEffectFold = (s, max13, costFn, decompose, f, input, dirty, cost, index) => {
  if (index === input.length) {
    return succeed13([s, cost, dirty, empty7()]);
  }
  const elem = pipe(input, unsafeGet4(index));
  return pipe(costFn(s, elem), map26((newCost) => cost + newCost), flatMap18((total) => {
    if (total <= max13) {
      return pipe(f(s, elem), flatMap18((s2) => foldWeightedDecomposeEffectFold(s2, max13, costFn, decompose, f, input, true, total, index + 1)));
    }
    return pipe(decompose(elem), flatMap18((decomposed) => {
      if (decomposed.length <= 1 && !dirty) {
        return pipe(f(s, elem), map26((s2) => [s2, total, true, pipe(input, drop3(index + 1))]));
      }
      if (decomposed.length <= 1 && dirty) {
        return succeed13([s, cost, dirty, pipe(input, drop3(index))]);
      }
      const next4 = pipe(decomposed, appendAll3(pipe(input, drop3(index + 1))));
      return foldWeightedDecomposeEffectFold(s, max13, costFn, decompose, f, next4, dirty, cost, 0);
    }));
  }));
}, flatMap21, forEach17 = (f) => {
  const process3 = readWithCause({
    onInput: (input) => pipe(fromEffect5(forEach16(input, (v) => f(v), {
      discard: true
    })), flatMap20(() => process3)),
    onFailure: failCause12,
    onDone: () => void_8
  });
  return new SinkImpl(process3);
}, forEachChunk = (f) => {
  const process3 = readWithCause({
    onInput: (input) => pipe(fromEffect5(f(input)), flatMap20(() => process3)),
    onFailure: failCause12,
    onDone: () => void_8
  });
  return new SinkImpl(process3);
}, forEachWhile = (f) => {
  const process3 = readWithCause({
    onInput: (input) => forEachWhileReader(f, input, 0, input.length, process3),
    onFailure: failCause12,
    onDone: () => void_8
  });
  return new SinkImpl(process3);
}, forEachWhileReader = (f, input, index, length5, cont) => {
  if (index === length5) {
    return cont;
  }
  return pipe(fromEffect5(f(pipe(input, unsafeGet4(index)))), flatMap20((bool) => bool ? forEachWhileReader(f, input, index + 1, length5, cont) : write2(pipe(input, drop3(index)))), catchAll6((error3) => pipe(write2(pipe(input, drop3(index))), zipRight8(fail14(error3)))));
}, forEachChunkWhile = (f) => {
  const reader = readWith({
    onInput: (input) => pipe(fromEffect5(f(input)), flatMap20((cont) => cont ? reader : void_8)),
    onFailure: fail14,
    onDone: () => void_8
  });
  return new SinkImpl(reader);
}, fromChannel = (channel) => new SinkImpl(channel), fromEffect7 = (effect3) => new SinkImpl(fromEffect5(effect3)), fromPubSub2 = (pubsub, options) => fromQueue2(pubsub, options), fromPush = (push) => new SinkImpl(unwrapScoped3(pipe(push, map26(fromPushPull)))), fromPushPull = (push) => readWith({
  onInput: (input) => foldChannel(fromEffect5(push(some3(input))), {
    onFailure: ([either7, leftovers]) => match(either7, {
      onLeft: (error3) => pipe(write2(leftovers), zipRight8(fail14(error3))),
      onRight: (z2) => pipe(write2(leftovers), zipRight8(succeedNow(z2)))
    }),
    onSuccess: () => fromPushPull(push)
  }),
  onFailure: fail14,
  onDone: () => foldChannel(fromEffect5(push(none2())), {
    onFailure: ([either7, leftovers]) => match(either7, {
      onLeft: (error3) => pipe(write2(leftovers), zipRight8(fail14(error3))),
      onRight: (z2) => pipe(write2(leftovers), zipRight8(succeedNow(z2)))
    }),
    onSuccess: () => fromEffect5(dieMessage2("BUG: Sink.fromPush - please report an issue at https://github.com/Effect-TS/effect/issues"))
  })
}), fromQueue2 = (queue, options) => options?.shutdown ? unwrapScoped4(map26(acquireRelease3(succeed13(queue), shutdown4), fromQueue2)) : forEachChunk((input) => pipe(offerAll3(queue, input))), head8 = () => fold(none2(), isNone2, (option5, input) => match2(option5, {
  onNone: () => some3(input),
  onSome: () => option5
})), ignoreLeftover = (self) => new SinkImpl(drain(toChannel(self))), last6 = () => foldLeftChunks(none2(), (s, input) => orElse2(last2(input), () => s)), leftover = (chunk3) => new SinkImpl(suspend6(() => write2(chunk3))), map29, mapEffect6, mapError8, mapLeftover, never7, orElse11, provideContext5, race4, raceBoth, raceWith3, refineOrDie, refineOrDieWith, some15 = (predicate) => fold(false, (bool) => !bool, (acc, input) => acc || predicate(input)), splitWhere3, splitWhereSplitter = (written, leftovers, f) => readWithCause({
  onInput: (input) => {
    if (isEmpty2(input)) {
      return splitWhereSplitter(written, leftovers, f);
    }
    if (written) {
      const index2 = indexWhere(input, f);
      if (index2 === -1) {
        return zipRight8(write2(input), splitWhereSplitter(true, leftovers, f));
      }
      const [left4, right4] = splitAt2(input, index2);
      return zipRight8(write2(left4), fromEffect5(set7(leftovers, right4)));
    }
    const index = indexWhere(input, f, 1);
    if (index === -1) {
      return zipRight8(write2(input), splitWhereSplitter(true, leftovers, f));
    }
    const [left3, right3] = pipe(input, splitAt2(Math.max(index, 1)));
    return zipRight8(write2(left3), fromEffect5(set7(leftovers, right3)));
  },
  onFailure: failCause12,
  onDone: succeed15
}), indexWhere = (self, predicate, from = 0) => {
  const iterator = self[Symbol.iterator]();
  let index = 0;
  let result2 = -1;
  let next4;
  while (result2 < 0 && (next4 = iterator.next()) && !next4.done) {
    const a = next4.value;
    if (index >= from && predicate(a)) {
      result2 = index;
    }
    index = index + 1;
  }
  return result2;
}, succeed16 = (a) => new SinkImpl(succeed15(a)), sum5, summarized3, sync11 = (evaluate2) => new SinkImpl(sync10(evaluate2)), take7 = (n) => pipe(foldChunks(empty7(), (chunk3) => chunk3.length < n, (acc, chunk3) => pipe(acc, appendAll3(chunk3))), flatMap21((acc) => {
  const [taken, leftover2] = pipe(acc, splitAt2(n));
  return new SinkImpl(pipe(write2(leftover2), zipRight8(succeedNow(taken))));
})), toChannel = (self) => isEffect2(self) ? toChannel(fromEffect7(self)) : self.channel, unwrap3 = (effect3) => new SinkImpl(unwrap2(pipe(effect3, map26((sink) => toChannel(sink))))), unwrapScoped4 = (effect3) => new SinkImpl(unwrapScoped3(effect3.pipe(map26((sink) => toChannel(sink))))), unwrapScopedWith2 = (f) => new SinkImpl(unwrapScopedWith((scope6) => f(scope6).pipe(map26((sink) => toChannel(sink))))), withDuration = (self) => pipe(self, summarized3(currentTimeMillis2, (start3, end3) => millis(end3 - start3))), zip14, zipLeft9, zipRight9, zipWith14, channelToSink = (self) => new SinkImpl(self), count3, mkString, timed3;
var init_sink = __esm(() => {
  init_Array();
  init_Cause();
  init_Chunk();
  init_Clock();
  init_Duration();
  init_Effect();
  init_Either();
  init_Exit();
  init_Function();
  init_HashMap();
  init_HashSet();
  init_Option();
  init_Predicate();
  init_PubSub();
  init_Queue();
  init_Ref();
  init_Scope();
  init_channel();
  init_mergeDecision();
  init_core_stream();
  SinkTypeId3 = /* @__PURE__ */ Symbol.for("effect/Sink");
  sinkVariance2 = {
    _A: (_) => _,
    _In: (_) => _,
    _L: (_) => _,
    _E: (_) => _,
    _R: (_) => _
  };
  SinkImpl = class SinkImpl {
    channel;
    [SinkTypeId3] = sinkVariance2;
    constructor(channel) {
      this.channel = channel;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  as10 = /* @__PURE__ */ dual(2, (self, a) => pipe(self, map29(() => a)));
  collectAllWhileWith = /* @__PURE__ */ dual(2, (self, options) => {
    const refs = pipe(make37(empty7()), zip12(make37(false)));
    const newChannel = pipe(fromEffect5(refs), flatMap20(([leftoversRef, upstreamDoneRef]) => {
      const upstreamMarker = readWith({
        onInput: (input) => pipe(write2(input), flatMap20(() => upstreamMarker)),
        onFailure: fail14,
        onDone: (done9) => pipe(fromEffect5(set7(upstreamDoneRef, true)), as9(done9))
      });
      return pipe(upstreamMarker, pipeTo(bufferChunk(leftoversRef)), pipeTo(collectAllWhileWithLoop(self, leftoversRef, upstreamDoneRef, options.initial, options.while, options.body)));
    }));
    return new SinkImpl(newChannel);
  });
  mapInput8 = /* @__PURE__ */ dual(2, (self, f) => pipe(self, mapInputChunks(map7(f))));
  mapInputEffect3 = /* @__PURE__ */ dual(2, (self, f) => mapInputChunksEffect(self, (chunk3) => map26(forEach16(chunk3, (v) => f(v)), unsafeFromArray)));
  mapInputChunks = /* @__PURE__ */ dual(2, (self, f) => {
    const loop3 = readWith({
      onInput: (chunk3) => pipe(write2(f(chunk3)), flatMap20(() => loop3)),
      onFailure: fail14,
      onDone: succeed15
    });
    return new SinkImpl(pipe(loop3, pipeTo(toChannel(self))));
  });
  mapInputChunksEffect = /* @__PURE__ */ dual(2, (self, f) => {
    const loop3 = readWith({
      onInput: (chunk3) => pipe(fromEffect5(f(chunk3)), flatMap20(write2), flatMap20(() => loop3)),
      onFailure: fail14,
      onDone: succeed15
    });
    return new SinkImpl(pipe(loop3, pipeToOrFail(toChannel(self))));
  });
  dimap = /* @__PURE__ */ dual(2, (self, options) => map29(mapInput8(self, options.onInput), options.onDone));
  dimapEffect = /* @__PURE__ */ dual(2, (self, options) => mapEffect6(mapInputEffect3(self, options.onInput), options.onDone));
  dimapChunks = /* @__PURE__ */ dual(2, (self, options) => map29(mapInputChunks(self, options.onInput), options.onDone));
  dimapChunksEffect = /* @__PURE__ */ dual(2, (self, options) => mapEffect6(mapInputChunksEffect(self, options.onInput), options.onDone));
  drain2 = /* @__PURE__ */ new SinkImpl(/* @__PURE__ */ drain(/* @__PURE__ */ identityChannel()));
  ensuring6 = /* @__PURE__ */ dual(2, (self, finalizer) => new SinkImpl(pipe(self, toChannel, ensuring5(finalizer))));
  ensuringWith2 = /* @__PURE__ */ dual(2, (self, finalizer) => new SinkImpl(pipe(self, toChannel, ensuringWith(finalizer))));
  filterInputEffect = /* @__PURE__ */ dual(2, (self, f) => mapInputChunksEffect(self, (chunk3) => map26(filter16(chunk3, f), unsafeFromArray)));
  findEffect = /* @__PURE__ */ dual(2, (self, f) => {
    const newChannel = pipe(fromEffect5(pipe(make37(empty7()), zip12(make37(false)))), flatMap20(([leftoversRef, upstreamDoneRef]) => {
      const upstreamMarker = readWith({
        onInput: (input) => pipe(write2(input), flatMap20(() => upstreamMarker)),
        onFailure: fail14,
        onDone: (done9) => pipe(fromEffect5(set7(upstreamDoneRef, true)), as9(done9))
      });
      const loop3 = foldChannel(collectElements(toChannel(self)), {
        onFailure: fail14,
        onSuccess: ([leftovers, doneValue]) => pipe(fromEffect5(f(doneValue)), flatMap20((satisfied) => pipe(fromEffect5(set7(leftoversRef, flatten5(leftovers))), zipRight8(pipe(fromEffect5(get14(upstreamDoneRef)), flatMap20((upstreamDone) => {
          if (satisfied) {
            return pipe(write2(flatten5(leftovers)), as9(some3(doneValue)));
          }
          if (upstreamDone) {
            return pipe(write2(flatten5(leftovers)), as9(none2()));
          }
          return loop3;
        }))))))
      });
      return pipe(upstreamMarker, pipeTo(bufferChunk(leftoversRef)), pipeTo(loop3));
    }));
    return new SinkImpl(newChannel);
  });
  foldSink = /* @__PURE__ */ dual(2, (self, options) => {
    const newChannel = pipe(toChannel(self), collectElements, foldChannel({
      onFailure: (error3) => toChannel(options.onFailure(error3)),
      onSuccess: ([leftovers, z2]) => suspend6(() => {
        const leftoversRef = {
          ref: pipe(leftovers, filter5(isNonEmpty2))
        };
        const refReader = pipe(sync10(() => {
          const ref = leftoversRef.ref;
          leftoversRef.ref = empty7();
          return ref;
        }), flatMap20((chunk3) => writeChunk(chunk3)));
        const passthrough4 = identityChannel();
        const continuationSink = pipe(refReader, zipRight8(passthrough4), pipeTo(toChannel(options.onSuccess(z2))));
        return flatMap20(collectElements(continuationSink), ([newLeftovers, z1]) => pipe(succeed15(leftoversRef.ref), flatMap20(writeChunk), zipRight8(writeChunk(newLeftovers)), as9(z1)));
      })
    }));
    return new SinkImpl(newChannel);
  });
  flatMap21 = /* @__PURE__ */ dual(2, (self, f) => foldSink(self, {
    onFailure: fail15,
    onSuccess: f
  }));
  map29 = /* @__PURE__ */ dual(2, (self, f) => {
    return new SinkImpl(pipe(toChannel(self), map28(f)));
  });
  mapEffect6 = /* @__PURE__ */ dual(2, (self, f) => new SinkImpl(pipe(toChannel(self), mapEffect5(f))));
  mapError8 = /* @__PURE__ */ dual(2, (self, f) => new SinkImpl(pipe(toChannel(self), mapError7(f))));
  mapLeftover = /* @__PURE__ */ dual(2, (self, f) => new SinkImpl(pipe(toChannel(self), mapOut(map7(f)))));
  never7 = /* @__PURE__ */ fromEffect7(never5);
  orElse11 = /* @__PURE__ */ dual(2, (self, that) => new SinkImpl(pipe(toChannel(self), orElse10(() => toChannel(that())))));
  provideContext5 = /* @__PURE__ */ dual(2, (self, context9) => new SinkImpl(pipe(toChannel(self), provideContext4(context9))));
  race4 = /* @__PURE__ */ dual(2, (self, that) => pipe(self, raceBoth(that), map29(merge)));
  raceBoth = /* @__PURE__ */ dual((args2) => isSink(args2[1]), (self, that, options) => raceWith3(self, {
    other: that,
    onSelfDone: (selfDone) => Done3(map26(selfDone, left2)),
    onOtherDone: (thatDone) => Done3(map26(thatDone, right2)),
    capacity: options?.capacity ?? 16
  }));
  raceWith3 = /* @__PURE__ */ dual(2, (self, options) => {
    function race5(scope6) {
      return gen6(function* () {
        const pubsub = yield* bounded4(options?.capacity ?? 16);
        const subscription1 = yield* extend3(subscribe2(pubsub), scope6);
        const subscription2 = yield* extend3(subscribe2(pubsub), scope6);
        const reader = toPubSub(pubsub);
        const writer = fromQueue(subscription1).pipe(pipeTo(toChannel(self)), zipLeft8(fromEffect5(shutdown4(subscription1))), mergeWith2({
          other: fromQueue(subscription2).pipe(pipeTo(toChannel(options.other)), zipLeft8(fromEffect5(shutdown4(subscription2)))),
          onSelfDone: options.onSelfDone,
          onOtherDone: options.onOtherDone
        }));
        const racedChannel = mergeWith2(reader, {
          other: writer,
          onSelfDone: () => Await(identity),
          onOtherDone: (exit4) => Done3(exit4)
        });
        return new SinkImpl(racedChannel);
      });
    }
    return unwrapScopedWith2(race5);
  });
  refineOrDie = /* @__PURE__ */ dual(2, (self, pf) => pipe(self, refineOrDieWith(pf, identity)));
  refineOrDieWith = /* @__PURE__ */ dual(3, (self, pf, f) => {
    const newChannel = pipe(self, toChannel, catchAll6((error3) => match2(pf(error3), {
      onNone: () => failCauseSync7(() => die6(f(error3))),
      onSome: fail14
    })));
    return new SinkImpl(newChannel);
  });
  splitWhere3 = /* @__PURE__ */ dual(2, (self, f) => {
    const newChannel = pipe(fromEffect5(make37(empty7())), flatMap20((ref) => pipe(splitWhereSplitter(false, ref, f), pipeToOrFail(toChannel(self)), collectElements, flatMap20(([leftovers, z2]) => pipe(fromEffect5(get14(ref)), flatMap20((leftover2) => pipe(write2(pipe(leftover2, appendAll3(flatten5(leftovers)))), zipRight8(succeed15(z2)))))))));
    return new SinkImpl(newChannel);
  });
  sum5 = /* @__PURE__ */ foldLeftChunks(0, (acc, chunk3) => acc + reduce4(chunk3, 0, (s, a) => s + a));
  summarized3 = /* @__PURE__ */ dual(3, (self, summary6, f) => {
    const newChannel = pipe(fromEffect5(summary6), flatMap20((start3) => pipe(self, toChannel, flatMap20((done9) => pipe(fromEffect5(summary6), map28((end3) => [done9, f(start3, end3)]))))));
    return new SinkImpl(newChannel);
  });
  zip14 = /* @__PURE__ */ dual((args2) => isSink(args2[1]), (self, that, options) => zipWith14(self, that, (z2, z22) => [z2, z22], options));
  zipLeft9 = /* @__PURE__ */ dual((args2) => isSink(args2[1]), (self, that, options) => zipWith14(self, that, (z2, _) => z2, options));
  zipRight9 = /* @__PURE__ */ dual((args2) => isSink(args2[1]), (self, that, options) => zipWith14(self, that, (_, z2) => z2, options));
  zipWith14 = /* @__PURE__ */ dual((args2) => isSink(args2[1]), (self, that, f, options) => options?.concurrent ? raceWith3(self, {
    other: that,
    onSelfDone: match7({
      onFailure: (cause3) => Done3(failCause10(cause3)),
      onSuccess: (leftZ) => Await(match7({
        onFailure: failCause10,
        onSuccess: (rightZ) => succeed13(f(leftZ, rightZ))
      }))
    }),
    onOtherDone: match7({
      onFailure: (cause3) => Done3(failCause10(cause3)),
      onSuccess: (rightZ) => Await(match7({
        onFailure: failCause10,
        onSuccess: (leftZ) => succeed13(f(leftZ, rightZ))
      }))
    })
  }) : flatMap21(self, (z2) => map29(that, (z22) => f(z2, z22))));
  count3 = /* @__PURE__ */ foldLeftChunks(0, (acc, chunk3) => acc + chunk3.length);
  mkString = /* @__PURE__ */ suspend7(() => {
    const strings = [];
    return pipe(foldLeftChunks(undefined, (_, elems) => map7(elems, (elem) => {
      strings.push(String(elem));
    })), map29(() => strings.join("")));
  });
  timed3 = /* @__PURE__ */ pipe(/* @__PURE__ */ withDuration(drain2), /* @__PURE__ */ map29((tuple6) => tuple6[1]));
});

// node_modules/effect/dist/esm/MergeDecision.js
var exports_MergeDecision = {};
__export(exports_MergeDecision, {
  match: () => match28,
  isMergeDecision: () => isMergeDecision2,
  MergeDecisionTypeId: () => MergeDecisionTypeId2,
  Done: () => Done4,
  AwaitConst: () => AwaitConst2,
  Await: () => Await2
});
var MergeDecisionTypeId2, Done4, Await2, AwaitConst2, isMergeDecision2, match28;
var init_MergeDecision = __esm(() => {
  init_mergeDecision();
  MergeDecisionTypeId2 = MergeDecisionTypeId;
  Done4 = Done3;
  Await2 = Await;
  AwaitConst2 = AwaitConst;
  isMergeDecision2 = isMergeDecision;
  match28 = match25;
});

// node_modules/effect/dist/esm/internal/rcRef.js
var TypeId22, stateEmpty2, stateClosed, variance8, RcRefImpl, make64 = (options) => withFiberRuntime((fiber) => {
  const context9 = fiber.getFiberRef(currentContext);
  const scope6 = get5(context9, scopeTag);
  const ref = new RcRefImpl(options.acquire, context9, scope6, options.idleTimeToLive ? decode(options.idleTimeToLive) : undefined);
  return as3(scope6.addFinalizer(() => ref.semaphore.withPermits(1)(suspend(() => {
    const close2 = ref.state._tag === "Acquired" ? scopeClose(ref.state.scope, exitVoid) : void_3;
    ref.state = stateClosed;
    return close2;
  }))), ref);
}), get16 = (self_) => {
  const self = self_;
  return uninterruptibleMask((restore) => suspend(() => {
    switch (self.state._tag) {
      case "Closed": {
        return interrupt2;
      }
      case "Acquired": {
        self.state.refCount++;
        return self.state.fiber ? as3(interruptFiber(self.state.fiber), self.state) : succeed(self.state);
      }
      case "Empty": {
        return scopeMake2().pipe(bindTo5("scope"), bind5("value", ({
          scope: scope6
        }) => restore(fiberRefLocally(self.acquire, currentContext, add2(self.context, scopeTag, scope6)))), map14(({
          scope: scope6,
          value: value2
        }) => {
          const state = {
            _tag: "Acquired",
            value: value2,
            scope: scope6,
            fiber: undefined,
            refCount: 1
          };
          self.state = state;
          return state;
        }));
      }
    }
  })).pipe(self.semaphore.withPermits(1), bindTo5("state"), bind5("scope", () => scopeTag), tap2(({
    scope: scope6,
    state
  }) => scope6.addFinalizer(() => suspend(() => {
    state.refCount--;
    if (state.refCount > 0) {
      return void_3;
    }
    if (self.idleTimeToLive === undefined) {
      self.state = stateEmpty2;
      return scopeClose(state.scope, exitVoid);
    }
    return sleep3(self.idleTimeToLive).pipe(interruptible2, zipRight2(suspend(() => {
      if (self.state._tag === "Acquired" && self.state.refCount === 0) {
        self.state = stateEmpty2;
        return scopeClose(state.scope, exitVoid);
      }
      return void_3;
    })), ensuring2(sync(() => {
      state.fiber = undefined;
    })), forkIn2(self.scope), tap2((fiber) => {
      state.fiber = fiber;
    }), self.semaphore.withPermits(1));
  }))), map14(({
    state
  }) => state.value));
};
var init_rcRef = __esm(() => {
  init_Context();
  init_Duration();
  init_Effectable();
  init_Function();
  init_Readable();
  init_core_effect();
  init_core();
  init_circular();
  init_fiberRuntime();
  TypeId22 = /* @__PURE__ */ Symbol.for("effect/RcRef");
  stateEmpty2 = {
    _tag: "Empty"
  };
  stateClosed = {
    _tag: "Closed"
  };
  variance8 = {
    _A: identity,
    _E: identity
  };
  RcRefImpl = class RcRefImpl extends Class2 {
    acquire;
    context;
    scope;
    idleTimeToLive;
    [TypeId22] = variance8;
    [TypeId15] = TypeId15;
    state = stateEmpty2;
    semaphore = /* @__PURE__ */ unsafeMakeSemaphore(1);
    constructor(acquire, context9, scope6, idleTimeToLive) {
      super();
      this.acquire = acquire;
      this.context = context9;
      this.scope = scope6;
      this.idleTimeToLive = idleTimeToLive;
      this.get = get16(this);
    }
    get;
    commit() {
      return this.get;
    }
  };
});

// node_modules/effect/dist/esm/RcRef.js
var exports_RcRef = {};
__export(exports_RcRef, {
  make: () => make65,
  get: () => get17,
  TypeId: () => TypeId23
});
var TypeId23, make65, get17;
var init_RcRef = __esm(() => {
  init_rcRef();
  TypeId23 = TypeId22;
  make65 = make64;
  get17 = get16;
});

// node_modules/effect/dist/esm/Runtime.js
var exports_Runtime = {};
__export(exports_Runtime, {
  updateRuntimeFlags: () => updateRuntimeFlags3,
  updateFiberRefs: () => updateFiberRefs4,
  updateContext: () => updateContext3,
  setFiberRef: () => setFiberRef2,
  runSyncExit: () => runSyncExit3,
  runSync: () => runSync3,
  runPromiseExit: () => runPromiseExit3,
  runPromise: () => runPromise3,
  runFork: () => runFork3,
  runCallback: () => runCallback2,
  provideService: () => provideService7,
  makeFiberFailure: () => makeFiberFailure,
  make: () => make66,
  isFiberFailure: () => isFiberFailure2,
  isAsyncFiberException: () => isAsyncFiberException2,
  enableRuntimeFlag: () => enableRuntimeFlag2,
  disableRuntimeFlag: () => disableRuntimeFlag2,
  deleteFiberRef: () => deleteFiberRef2,
  defaultRuntimeFlags: () => defaultRuntimeFlags2,
  defaultRuntime: () => defaultRuntime2,
  FiberFailureId: () => FiberFailureId2,
  FiberFailureCauseId: () => FiberFailureCauseId2
});
var runFork3, runSyncExit3, runSync3, runCallback2, runPromise3, runPromiseExit3, defaultRuntime2, defaultRuntimeFlags2, make66, FiberFailureId2, FiberFailureCauseId2, isAsyncFiberException2, isFiberFailure2, makeFiberFailure, updateRuntimeFlags3, enableRuntimeFlag2, disableRuntimeFlag2, updateContext3, provideService7, updateFiberRefs4, setFiberRef2, deleteFiberRef2;
var init_Runtime = __esm(() => {
  init_runtime();
  runFork3 = unsafeFork3;
  runSyncExit3 = unsafeRunSyncExit;
  runSync3 = unsafeRunSync;
  runCallback2 = unsafeRunCallback;
  runPromise3 = unsafeRunPromise;
  runPromiseExit3 = unsafeRunPromiseExit;
  defaultRuntime2 = defaultRuntime;
  defaultRuntimeFlags2 = defaultRuntimeFlags;
  make66 = make59;
  FiberFailureId2 = /* @__PURE__ */ Symbol.for("effect/Runtime/FiberFailure");
  FiberFailureCauseId2 = FiberFailureCauseId;
  isAsyncFiberException2 = isAsyncFiberException;
  isFiberFailure2 = isFiberFailure;
  makeFiberFailure = fiberFailure;
  updateRuntimeFlags3 = updateRuntimeFlags2;
  enableRuntimeFlag2 = enableRuntimeFlag;
  disableRuntimeFlag2 = disableRuntimeFlag;
  updateContext3 = updateContext2;
  provideService7 = provideService4;
  updateFiberRefs4 = updateFiberRefs2;
  setFiberRef2 = setFiberRef;
  deleteFiberRef2 = deleteFiberRef;
});

// node_modules/effect/dist/esm/Schedule.js
var exports_Schedule = {};
__export(exports_Schedule, {
  zipWith: () => zipWith15,
  zipRight: () => zipRight10,
  zipLeft: () => zipLeft10,
  windowed: () => windowed2,
  whileOutputEffect: () => whileOutputEffect2,
  whileOutput: () => whileOutput2,
  whileInputEffect: () => whileInputEffect2,
  whileInput: () => whileInput2,
  upTo: () => upTo2,
  untilOutputEffect: () => untilOutputEffect2,
  untilOutput: () => untilOutput2,
  untilInputEffect: () => untilInputEffect2,
  untilInput: () => untilInput2,
  unionWith: () => unionWith3,
  union: () => union14,
  unfold: () => unfold4,
  tapOutput: () => tapOutput2,
  tapInput: () => tapInput2,
  sync: () => sync12,
  succeed: () => succeed17,
  stop: () => stop2,
  spaced: () => spaced2,
  secondOfMinute: () => secondOfMinute2,
  run: () => run3,
  resetWhen: () => resetWhen2,
  resetAfter: () => resetAfter2,
  repetitions: () => repetitions2,
  repeatForever: () => repeatForever,
  reduceEffect: () => reduceEffect4,
  reduce: () => reduce18,
  recurs: () => recurs2,
  recurWhileEffect: () => recurWhileEffect2,
  recurWhile: () => recurWhile2,
  recurUpTo: () => recurUpTo2,
  recurUntilOption: () => recurUntilOption2,
  recurUntilEffect: () => recurUntilEffect2,
  recurUntil: () => recurUntil2,
  provideService: () => provideService8,
  provideContext: () => provideContext6,
  passthrough: () => passthrough4,
  once: () => once4,
  onDecision: () => onDecision2,
  modifyDelayEffect: () => modifyDelayEffect2,
  modifyDelay: () => modifyDelay2,
  minuteOfHour: () => minuteOfHour2,
  mapInputEffect: () => mapInputEffect4,
  mapInputContext: () => mapInputContext5,
  mapInput: () => mapInput9,
  mapEffect: () => mapEffect7,
  mapBothEffect: () => mapBothEffect2,
  mapBoth: () => mapBoth7,
  map: () => map30,
  makeWithState: () => makeWithState2,
  linear: () => linear3,
  jitteredWith: () => jitteredWith2,
  jittered: () => jittered2,
  isSchedule: () => isSchedule2,
  intersectWith: () => intersectWith2,
  intersect: () => intersect6,
  identity: () => identity4,
  hourOfDay: () => hourOfDay2,
  fromFunction: () => fromFunction4,
  fromDelays: () => fromDelays2,
  fromDelay: () => fromDelay2,
  forever: () => forever5,
  fixed: () => fixed2,
  fibonacci: () => fibonacci2,
  exponential: () => exponential3,
  ensuring: () => ensuring7,
  elapsed: () => elapsed2,
  eitherWith: () => eitherWith2,
  either: () => either7,
  duration: () => duration2,
  driver: () => driver2,
  delays: () => delays2,
  delayedSchedule: () => delayedSchedule2,
  delayedEffect: () => delayedEffect2,
  delayed: () => delayed2,
  dayOfWeek: () => dayOfWeek2,
  dayOfMonth: () => dayOfMonth2,
  cron: () => cron2,
  count: () => count4,
  compose: () => compose5,
  collectWhileEffect: () => collectWhileEffect2,
  collectWhile: () => collectWhile2,
  collectUntilEffect: () => collectUntilEffect2,
  collectUntil: () => collectUntil2,
  collectAllOutputs: () => collectAllOutputs2,
  collectAllInputs: () => collectAllInputs2,
  checkEffect: () => checkEffect2,
  check: () => check3,
  bothInOut: () => bothInOut2,
  asVoid: () => asVoid8,
  as: () => as11,
  andThenEither: () => andThenEither2,
  andThen: () => andThen12,
  addDelayEffect: () => addDelayEffect2,
  addDelay: () => addDelay2,
  ScheduleTypeId: () => ScheduleTypeId2,
  ScheduleDriverTypeId: () => ScheduleDriverTypeId2
});
var ScheduleTypeId2, ScheduleDriverTypeId2, makeWithState2, isSchedule2, addDelay2, addDelayEffect2, andThen12, andThenEither2, as11, asVoid8, bothInOut2, check3, checkEffect2, collectAllInputs2, collectAllOutputs2, collectUntil2, collectUntilEffect2, collectWhile2, collectWhileEffect2, compose5, mapInput9, mapInputEffect4, mapInputContext5, count4, cron2, secondOfMinute2, minuteOfHour2, hourOfDay2, dayOfMonth2, dayOfWeek2, delayed2, delayedEffect2, delayedSchedule2, delays2, mapBoth7, mapBothEffect2, driver2, duration2, either7, eitherWith2, elapsed2, ensuring7, exponential3, fibonacci2, fixed2, forever5, fromDelay2, fromDelays2, fromFunction4, identity4, passthrough4, intersect6, intersectWith2, jittered2, jitteredWith2, linear3, map30, mapEffect7, modifyDelay2, modifyDelayEffect2, onDecision2, once4, provideContext6, provideService8, recurUntil2, recurUntilEffect2, recurUntilOption2, recurUpTo2, recurWhile2, recurWhileEffect2, recurs2, reduce18, reduceEffect4, repeatForever, repetitions2, resetAfter2, resetWhen2, run3, spaced2, stop2, succeed17, sync12, tapInput2, tapOutput2, unfold4, union14, unionWith3, untilInput2, untilInputEffect2, untilOutput2, untilOutputEffect2, upTo2, whileInput2, whileInputEffect2, whileOutput2, whileOutputEffect2, windowed2, zipLeft10, zipRight10, zipWith15;
var init_Schedule = __esm(() => {
  init_schedule();
  ScheduleTypeId2 = ScheduleTypeId;
  ScheduleDriverTypeId2 = ScheduleDriverTypeId;
  makeWithState2 = makeWithState;
  isSchedule2 = isSchedule;
  addDelay2 = addDelay;
  addDelayEffect2 = addDelayEffect;
  andThen12 = andThen10;
  andThenEither2 = andThenEither;
  as11 = as7;
  asVoid8 = asVoid5;
  bothInOut2 = bothInOut;
  check3 = check2;
  checkEffect2 = checkEffect;
  collectAllInputs2 = collectAllInputs;
  collectAllOutputs2 = collectAllOutputs;
  collectUntil2 = collectUntil;
  collectUntilEffect2 = collectUntilEffect;
  collectWhile2 = collectWhile;
  collectWhileEffect2 = collectWhileEffect;
  compose5 = compose4;
  mapInput9 = mapInput6;
  mapInputEffect4 = mapInputEffect;
  mapInputContext5 = mapInputContext2;
  count4 = count;
  cron2 = cron;
  secondOfMinute2 = secondOfMinute;
  minuteOfHour2 = minuteOfHour;
  hourOfDay2 = hourOfDay;
  dayOfMonth2 = dayOfMonth;
  dayOfWeek2 = dayOfWeek;
  delayed2 = delayed;
  delayedEffect2 = delayedEffect;
  delayedSchedule2 = delayedSchedule;
  delays2 = delays;
  mapBoth7 = mapBoth5;
  mapBothEffect2 = mapBothEffect;
  driver2 = driver;
  duration2 = duration;
  either7 = either5;
  eitherWith2 = eitherWith;
  elapsed2 = elapsed;
  ensuring7 = ensuring3;
  exponential3 = exponential2;
  fibonacci2 = fibonacci;
  fixed2 = fixed;
  forever5 = forever3;
  fromDelay2 = fromDelay;
  fromDelays2 = fromDelays;
  fromFunction4 = fromFunction;
  identity4 = identity3;
  passthrough4 = passthrough;
  intersect6 = intersect5;
  intersectWith2 = intersectWith;
  jittered2 = jittered;
  jitteredWith2 = jitteredWith;
  linear3 = linear2;
  map30 = map23;
  mapEffect7 = mapEffect3;
  modifyDelay2 = modifyDelay;
  modifyDelayEffect2 = modifyDelayEffect;
  onDecision2 = onDecision;
  once4 = once2;
  provideContext6 = provideContext3;
  provideService8 = provideService3;
  recurUntil2 = recurUntil;
  recurUntilEffect2 = recurUntilEffect;
  recurUntilOption2 = recurUntilOption;
  recurUpTo2 = recurUpTo;
  recurWhile2 = recurWhile;
  recurWhileEffect2 = recurWhileEffect;
  recurs2 = recurs;
  reduce18 = reduce16;
  reduceEffect4 = reduceEffect2;
  repeatForever = forever3;
  repetitions2 = repetitions;
  resetAfter2 = resetAfter;
  resetWhen2 = resetWhen;
  run3 = run;
  spaced2 = spaced;
  stop2 = stop;
  succeed17 = succeed9;
  sync12 = sync6;
  tapInput2 = tapInput;
  tapOutput2 = tapOutput;
  unfold4 = unfold3;
  union14 = union13;
  unionWith3 = unionWith2;
  untilInput2 = untilInput;
  untilInputEffect2 = untilInputEffect;
  untilOutput2 = untilOutput;
  untilOutputEffect2 = untilOutputEffect;
  upTo2 = upTo;
  whileInput2 = whileInput;
  whileInputEffect2 = whileInputEffect;
  whileOutput2 = whileOutput;
  whileOutputEffect2 = whileOutputEffect;
  windowed2 = windowed;
  zipLeft10 = zipLeft5;
  zipRight10 = zipRight5;
  zipWith15 = zipWith9;
});

// node_modules/effect/dist/esm/internal/opCodes/streamHaltStrategy.js
var OP_LEFT = "Left", OP_RIGHT = "Right", OP_BOTH = "Both", OP_EITHER = "Either";

// node_modules/effect/dist/esm/internal/stream/haltStrategy.js
var Left, Right, Both, Either, fromInput2 = (input) => {
  switch (input) {
    case "left":
      return Left;
    case "right":
      return Right;
    case "both":
      return Both;
    case "either":
      return Either;
    default:
      return input;
  }
}, isLeft3 = (self) => self._tag === OP_LEFT, isRight3 = (self) => self._tag === OP_RIGHT, isBoth = (self) => self._tag === OP_BOTH, isEither3 = (self) => self._tag === OP_EITHER, match29;
var init_haltStrategy = __esm(() => {
  init_Function();
  Left = {
    _tag: OP_LEFT
  };
  Right = {
    _tag: OP_RIGHT
  };
  Both = {
    _tag: OP_BOTH
  };
  Either = {
    _tag: OP_EITHER
  };
  match29 = /* @__PURE__ */ dual(2, (self, options) => {
    switch (self._tag) {
      case OP_LEFT: {
        return options.onLeft();
      }
      case OP_RIGHT: {
        return options.onRight();
      }
      case OP_BOTH: {
        return options.onBoth();
      }
      case OP_EITHER: {
        return options.onEither();
      }
    }
  });
});

// node_modules/effect/dist/esm/StreamHaltStrategy.js
var exports_StreamHaltStrategy = {};
__export(exports_StreamHaltStrategy, {
  match: () => match30,
  isRight: () => isRight4,
  isLeft: () => isLeft4,
  isEither: () => isEither4,
  isBoth: () => isBoth2,
  fromInput: () => fromInput3,
  Right: () => Right2,
  Left: () => Left2,
  Either: () => Either2,
  Both: () => Both2
});
var Left2, Right2, Both2, Either2, fromInput3, isLeft4, isRight4, isBoth2, isEither4, match30;
var init_StreamHaltStrategy = __esm(() => {
  init_haltStrategy();
  Left2 = Left;
  Right2 = Right;
  Both2 = Both;
  Either2 = Either;
  fromInput3 = fromInput2;
  isLeft4 = isLeft3;
  isRight4 = isRight3;
  isBoth2 = isBoth;
  isEither4 = isEither3;
  match30 = match29;
});

// node_modules/effect/dist/esm/internal/stm/versioned.js
class Versioned {
  value;
  constructor(value2) {
    this.value = value2;
  }
}

// node_modules/effect/dist/esm/internal/stm/entry.js
var make67 = (ref, isNew) => ({
  ref,
  isNew,
  isChanged: false,
  expected: ref.versioned,
  newValue: ref.versioned.value
}), unsafeGet8 = (self) => {
  return self.newValue;
}, unsafeSet = (self, value2) => {
  self.isChanged = true;
  self.newValue = value2;
}, commit = (self) => {
  self.ref.versioned = new Versioned(self.newValue);
}, copy3 = (self) => ({
  ref: self.ref,
  isNew: self.isNew,
  isChanged: self.isChanged,
  expected: self.expected,
  newValue: self.newValue
}), isInvalid = (self) => {
  return self.ref.versioned !== self.expected;
}, isChanged = (self) => {
  return self.isChanged;
};
var init_entry = () => {};

// node_modules/effect/dist/esm/internal/stm/journal.js
var JournalAnalysisInvalid = "Invalid", JournalAnalysisReadWrite = "ReadWrite", JournalAnalysisReadOnly = "ReadOnly", commitJournal = (journal) => {
  for (const entry of journal) {
    commit(entry[1]);
  }
}, analyzeJournal = (journal) => {
  let val = JournalAnalysisReadOnly;
  for (const [, entry] of journal) {
    val = isInvalid(entry) ? JournalAnalysisInvalid : isChanged(entry) ? JournalAnalysisReadWrite : val;
    if (val === JournalAnalysisInvalid) {
      return val;
    }
  }
  return val;
}, prepareResetJournal = (journal) => {
  const saved = new Map;
  for (const entry of journal) {
    saved.set(entry[0], copy3(entry[1]));
  }
  return () => {
    journal.clear();
    for (const entry of saved) {
      journal.set(entry[0], entry[1]);
    }
  };
}, collectTodos = (journal) => {
  const allTodos = new Map;
  for (const [, entry] of journal) {
    for (const todo of entry.ref.todos) {
      allTodos.set(todo[0], todo[1]);
    }
    entry.ref.todos = new Map;
  }
  return allTodos;
}, execTodos = (todos) => {
  const todosSorted = Array.from(todos.entries()).sort((x2, y) => x2[0] - y[0]);
  for (const [_, todo] of todosSorted) {
    todo();
  }
}, addTodo = (txnId, journal, todoEffect) => {
  let added = false;
  for (const [, entry] of journal) {
    if (!entry.ref.todos.has(txnId)) {
      entry.ref.todos.set(txnId, todoEffect);
      added = true;
    }
  }
  return added;
};
var init_journal = __esm(() => {
  init_entry();
});

// node_modules/effect/dist/esm/internal/stm/opCodes/stm.js
var OP_WITH_STM_RUNTIME = "WithSTMRuntime", OP_ON_FAILURE2 = "OnFailure", OP_ON_RETRY = "OnRetry", OP_ON_SUCCESS2 = "OnSuccess", OP_PROVIDE3 = "Provide", OP_SYNC2 = "Sync", OP_SUCCEED2 = "Succeed", OP_RETRY = "Retry", OP_FAIL4 = "Fail", OP_DIE2 = "Die", OP_INTERRUPT2 = "Interrupt";

// node_modules/effect/dist/esm/internal/stm/opCodes/tExit.js
var OP_FAIL5 = "Fail", OP_DIE3 = "Die", OP_INTERRUPT3 = "Interrupt", OP_SUCCEED3 = "Succeed", OP_RETRY2 = "Retry";

// node_modules/effect/dist/esm/internal/stm/opCodes/tryCommit.js
var OP_DONE5 = "Done", OP_SUSPEND3 = "Suspend";

// node_modules/effect/dist/esm/internal/stm/opCodes/stmState.js
var OP_DONE6 = "Done", OP_INTERRUPTED = "Interrupted", OP_RUNNING2 = "Running";

// node_modules/effect/dist/esm/internal/stm/stmState.js
var STMStateSymbolKey = "effect/STM/State", STMStateTypeId, isSTMState = (u) => hasProperty(u, STMStateTypeId), isRunning3 = (self) => {
  return self._tag === OP_RUNNING2;
}, isDone6 = (self) => {
  return self._tag === OP_DONE6;
}, done9 = (exit4) => {
  return {
    [STMStateTypeId]: STMStateTypeId,
    _tag: OP_DONE6,
    exit: exit4,
    [symbol2]() {
      return pipe(hash(STMStateSymbolKey), combine2(hash(OP_DONE6)), combine2(hash(exit4)), cached(this));
    },
    [symbol3](that) {
      return isSTMState(that) && that._tag === OP_DONE6 && equals(exit4, that.exit);
    }
  };
}, interruptedHash, interrupted3, runningHash, running3, fromTExit = (tExit) => {
  switch (tExit._tag) {
    case OP_FAIL5: {
      return done9(fail4(tExit.error));
    }
    case OP_DIE3: {
      return done9(die4(tExit.defect));
    }
    case OP_INTERRUPT3: {
      return done9(interrupt4(tExit.fiberId));
    }
    case OP_SUCCEED3: {
      return done9(succeed3(tExit.value));
    }
    case OP_RETRY2: {
      throw new Error("BUG: STM.STMState.fromTExit - please report an issue at https://github.com/Effect-TS/effect/issues");
    }
  }
};
var init_stmState = __esm(() => {
  init_Equal();
  init_Exit();
  init_Function();
  init_Hash();
  init_Predicate();
  STMStateTypeId = /* @__PURE__ */ Symbol.for(STMStateSymbolKey);
  interruptedHash = /* @__PURE__ */ pipe(/* @__PURE__ */ hash(STMStateSymbolKey), /* @__PURE__ */ combine2(/* @__PURE__ */ hash(OP_INTERRUPTED)), /* @__PURE__ */ combine2(/* @__PURE__ */ hash("interrupted")));
  interrupted3 = {
    [STMStateTypeId]: STMStateTypeId,
    _tag: OP_INTERRUPTED,
    [symbol2]() {
      return interruptedHash;
    },
    [symbol3](that) {
      return isSTMState(that) && that._tag === OP_INTERRUPTED;
    }
  };
  runningHash = /* @__PURE__ */ pipe(/* @__PURE__ */ hash(STMStateSymbolKey), /* @__PURE__ */ combine2(/* @__PURE__ */ hash(OP_RUNNING2)), /* @__PURE__ */ combine2(/* @__PURE__ */ hash("running")));
  running3 = {
    [STMStateTypeId]: STMStateTypeId,
    _tag: OP_RUNNING2,
    [symbol2]() {
      return runningHash;
    },
    [symbol3](that) {
      return isSTMState(that) && that._tag === OP_RUNNING2;
    }
  };
});

// node_modules/effect/dist/esm/internal/stm/tExit.js
var TExitSymbolKey = "effect/TExit", TExitTypeId, variance9, isExit2 = (u) => hasProperty(u, TExitTypeId), isSuccess4 = (self) => {
  return self._tag === OP_SUCCEED3;
}, isRetry = (self) => {
  return self._tag === OP_RETRY2;
}, fail16 = (error3) => ({
  [TExitTypeId]: variance9,
  _tag: OP_FAIL5,
  error: error3,
  [symbol2]() {
    return pipe(hash(TExitSymbolKey), combine2(hash(OP_FAIL5)), combine2(hash(error3)), cached(this));
  },
  [symbol3](that) {
    return isExit2(that) && that._tag === OP_FAIL5 && equals(error3, that.error);
  }
}), die11 = (defect) => ({
  [TExitTypeId]: variance9,
  _tag: OP_DIE3,
  defect,
  [symbol2]() {
    return pipe(hash(TExitSymbolKey), combine2(hash(OP_DIE3)), combine2(hash(defect)), cached(this));
  },
  [symbol3](that) {
    return isExit2(that) && that._tag === OP_DIE3 && equals(defect, that.defect);
  }
}), interrupt9 = (fiberId3) => ({
  [TExitTypeId]: variance9,
  _tag: OP_INTERRUPT3,
  fiberId: fiberId3,
  [symbol2]() {
    return pipe(hash(TExitSymbolKey), combine2(hash(OP_INTERRUPT3)), combine2(hash(fiberId3)), cached(this));
  },
  [symbol3](that) {
    return isExit2(that) && that._tag === OP_INTERRUPT3 && equals(fiberId3, that.fiberId);
  }
}), succeed18 = (value2) => ({
  [TExitTypeId]: variance9,
  _tag: OP_SUCCEED3,
  value: value2,
  [symbol2]() {
    return pipe(hash(TExitSymbolKey), combine2(hash(OP_SUCCEED3)), combine2(hash(value2)), cached(this));
  },
  [symbol3](that) {
    return isExit2(that) && that._tag === OP_SUCCEED3 && equals(value2, that.value);
  }
}), retryHash, retry5;
var init_tExit = __esm(() => {
  init_Equal();
  init_Function();
  init_Hash();
  init_Predicate();
  TExitTypeId = /* @__PURE__ */ Symbol.for(TExitSymbolKey);
  variance9 = {
    _A: (_) => _,
    _E: (_) => _
  };
  retryHash = /* @__PURE__ */ pipe(/* @__PURE__ */ hash(TExitSymbolKey), /* @__PURE__ */ combine2(/* @__PURE__ */ hash(OP_RETRY2)), /* @__PURE__ */ combine2(/* @__PURE__ */ hash("retry")));
  retry5 = {
    [TExitTypeId]: variance9,
    _tag: OP_RETRY2,
    [symbol2]() {
      return retryHash;
    },
    [symbol3](that) {
      return isExit2(that) && isRetry(that);
    }
  };
});

// node_modules/effect/dist/esm/internal/stm/tryCommit.js
var done10 = (exit4) => {
  return {
    _tag: OP_DONE5,
    exit: exit4
  };
}, suspend8 = (journal) => {
  return {
    _tag: OP_SUSPEND3,
    journal
  };
};
var init_tryCommit = () => {};

// node_modules/effect/dist/esm/internal/stm/txnId.js
var txnCounter, make68 = () => {
  const newId = txnCounter.ref + 1;
  txnCounter.ref = newId;
  return newId;
};
var init_txnId = __esm(() => {
  txnCounter = {
    ref: 0
  };
});

// node_modules/effect/dist/esm/internal/stm/core.js
class STMDriver {
  self;
  journal;
  fiberId;
  contStack = [];
  env;
  constructor(self, journal, fiberId3, r0) {
    this.self = self;
    this.journal = journal;
    this.fiberId = fiberId3;
    this.env = r0;
  }
  getEnv() {
    return this.env;
  }
  pushStack(cont) {
    this.contStack.push(cont);
  }
  popStack() {
    return this.contStack.pop();
  }
  nextSuccess() {
    let current = this.popStack();
    while (current !== undefined && current.effect_instruction_i0 !== OP_ON_SUCCESS2) {
      current = this.popStack();
    }
    return current;
  }
  nextFailure() {
    let current = this.popStack();
    while (current !== undefined && current.effect_instruction_i0 !== OP_ON_FAILURE2) {
      current = this.popStack();
    }
    return current;
  }
  nextRetry() {
    let current = this.popStack();
    while (current !== undefined && current.effect_instruction_i0 !== OP_ON_RETRY) {
      current = this.popStack();
    }
    return current;
  }
  run() {
    let curr = this.self;
    let exit4 = undefined;
    while (exit4 === undefined && curr !== undefined) {
      try {
        const current = curr;
        if (current) {
          switch (current._op) {
            case "Tag": {
              curr = effect3((_, __, env) => unsafeGet3(env, current));
              break;
            }
            case "Left": {
              curr = fail17(current.left);
              break;
            }
            case "None": {
              curr = fail17(new NoSuchElementException3);
              break;
            }
            case "Right": {
              curr = succeed19(current.right);
              break;
            }
            case "Some": {
              curr = succeed19(current.value);
              break;
            }
            case "Commit": {
              switch (current.effect_instruction_i0) {
                case OP_DIE2: {
                  exit4 = die11(internalCall(() => current.effect_instruction_i1()));
                  break;
                }
                case OP_FAIL4: {
                  const cont = this.nextFailure();
                  if (cont === undefined) {
                    exit4 = fail16(internalCall(() => current.effect_instruction_i1()));
                  } else {
                    curr = internalCall(() => cont.effect_instruction_i2(internalCall(() => current.effect_instruction_i1())));
                  }
                  break;
                }
                case OP_RETRY: {
                  const cont = this.nextRetry();
                  if (cont === undefined) {
                    exit4 = retry5;
                  } else {
                    curr = internalCall(() => cont.effect_instruction_i2());
                  }
                  break;
                }
                case OP_INTERRUPT2: {
                  exit4 = interrupt9(this.fiberId);
                  break;
                }
                case OP_WITH_STM_RUNTIME: {
                  curr = internalCall(() => current.effect_instruction_i1(this));
                  break;
                }
                case OP_ON_SUCCESS2:
                case OP_ON_FAILURE2:
                case OP_ON_RETRY: {
                  this.pushStack(current);
                  curr = current.effect_instruction_i1;
                  break;
                }
                case OP_PROVIDE3: {
                  const env = this.env;
                  this.env = internalCall(() => current.effect_instruction_i2(env));
                  curr = pipe(current.effect_instruction_i1, ensuring8(sync13(() => this.env = env)));
                  break;
                }
                case OP_SUCCEED2: {
                  const value2 = current.effect_instruction_i1;
                  const cont = this.nextSuccess();
                  if (cont === undefined) {
                    exit4 = succeed18(value2);
                  } else {
                    curr = internalCall(() => cont.effect_instruction_i2(value2));
                  }
                  break;
                }
                case OP_SYNC2: {
                  const value2 = internalCall(() => current.effect_instruction_i1());
                  const cont = this.nextSuccess();
                  if (cont === undefined) {
                    exit4 = succeed18(value2);
                  } else {
                    curr = internalCall(() => cont.effect_instruction_i2(value2));
                  }
                  break;
                }
              }
              break;
            }
          }
        }
      } catch (e) {
        curr = die12(e);
      }
    }
    return exit4;
  }
}
var STMSymbolKey2 = "effect/STM", STMTypeId2, stmVariance, STMPrimitive, isSTM = (u) => hasProperty(u, STMTypeId2), commit2 = (self) => unsafeAtomically(self, constVoid, constVoid), unsafeAtomically = (self, onDone, onInterrupt4) => withFiberRuntime((state) => {
  const fiberId3 = state.id();
  const env = state.getFiberRef(currentContext2);
  const scheduler2 = state.getFiberRef(currentScheduler2);
  const priority = state.getFiberRef(currentSchedulingPriority2);
  const commitResult = tryCommitSync(fiberId3, self, env, scheduler2, priority);
  switch (commitResult._tag) {
    case OP_DONE5: {
      onDone(commitResult.exit);
      return commitResult.exit;
    }
    case OP_SUSPEND3: {
      const txnId = make68();
      const state2 = {
        value: running3
      };
      const effect3 = async2((k) => tryCommitAsync(fiberId3, self, txnId, state2, env, scheduler2, priority, k));
      return uninterruptibleMask3((restore) => pipe(restore(effect3), catchAllCause4((cause3) => {
        let currentState = state2.value;
        if (isRunning3(currentState)) {
          state2.value = interrupted3;
        }
        currentState = state2.value;
        if (isDone6(currentState)) {
          onDone(currentState.exit);
          return currentState.exit;
        }
        onInterrupt4();
        return failCause10(cause3);
      })));
    }
  }
}), tryCommit = (fiberId3, stm, state, env, scheduler2, priority) => {
  const journal = new Map;
  const tExit = new STMDriver(stm, journal, fiberId3, env).run();
  const analysis = analyzeJournal(journal);
  if (analysis === JournalAnalysisReadWrite) {
    commitJournal(journal);
  } else if (analysis === JournalAnalysisInvalid) {
    throw new Error("BUG: STM.TryCommit.tryCommit - please report an issue at https://github.com/Effect-TS/effect/issues");
  }
  switch (tExit._tag) {
    case OP_SUCCEED3: {
      state.value = fromTExit(tExit);
      return completeTodos(succeed3(tExit.value), journal, scheduler2, priority);
    }
    case OP_FAIL5: {
      state.value = fromTExit(tExit);
      const cause3 = fail8(tExit.error);
      return completeTodos(failCause3(cause3), journal, scheduler2, priority);
    }
    case OP_DIE3: {
      state.value = fromTExit(tExit);
      const cause3 = die6(tExit.defect);
      return completeTodos(failCause3(cause3), journal, scheduler2, priority);
    }
    case OP_INTERRUPT3: {
      state.value = fromTExit(tExit);
      const cause3 = interrupt6(fiberId3);
      return completeTodos(failCause3(cause3), journal, scheduler2, priority);
    }
    case OP_RETRY2: {
      return suspend8(journal);
    }
  }
}, tryCommitSync = (fiberId3, stm, env, scheduler2, priority) => {
  const journal = new Map;
  const tExit = new STMDriver(stm, journal, fiberId3, env).run();
  const analysis = analyzeJournal(journal);
  if (analysis === JournalAnalysisReadWrite && isSuccess4(tExit)) {
    commitJournal(journal);
  } else if (analysis === JournalAnalysisInvalid) {
    throw new Error("BUG: STM.TryCommit.tryCommitSync - please report an issue at https://github.com/Effect-TS/effect/issues");
  }
  switch (tExit._tag) {
    case OP_SUCCEED3: {
      return completeTodos(succeed3(tExit.value), journal, scheduler2, priority);
    }
    case OP_FAIL5: {
      const cause3 = fail8(tExit.error);
      return completeTodos(failCause3(cause3), journal, scheduler2, priority);
    }
    case OP_DIE3: {
      const cause3 = die6(tExit.defect);
      return completeTodos(failCause3(cause3), journal, scheduler2, priority);
    }
    case OP_INTERRUPT3: {
      const cause3 = interrupt6(fiberId3);
      return completeTodos(failCause3(cause3), journal, scheduler2, priority);
    }
    case OP_RETRY2: {
      return suspend8(journal);
    }
  }
}, tryCommitAsync = (fiberId3, self, txnId, state, context9, scheduler2, priority, k) => {
  if (isRunning3(state.value)) {
    const result2 = tryCommit(fiberId3, self, state, context9, scheduler2, priority);
    switch (result2._tag) {
      case OP_DONE5: {
        completeTryCommit(result2.exit, k);
        break;
      }
      case OP_SUSPEND3: {
        addTodo(txnId, result2.journal, () => tryCommitAsync(fiberId3, self, txnId, state, context9, scheduler2, priority, k));
        break;
      }
    }
  }
}, completeTodos = (exit4, journal, scheduler2, priority) => {
  const todos = collectTodos(journal);
  if (todos.size > 0) {
    scheduler2.scheduleTask(() => execTodos(todos), priority);
  }
  return done10(exit4);
}, completeTryCommit = (exit4, k) => {
  k(exit4);
}, context9 = () => effect3((_, __, env) => env), contextWith5 = (f) => map31(context9(), f), contextWithSTM = (f) => flatMap22(context9(), f), catchAll7, mapInputContext6, die12 = (defect) => dieSync7(() => defect), dieMessage4 = (message) => dieSync7(() => new RuntimeException2(message)), dieSync7 = (evaluate2) => {
  const stm = new STMPrimitive(OP_DIE2);
  stm.effect_instruction_i1 = evaluate2;
  return stm;
}, effect3 = (f) => withSTMRuntime((_) => succeed19(f(_.journal, _.fiberId, _.getEnv()))), ensuring8, fail17 = (error3) => failSync9(() => error3), failSync9 = (evaluate2) => {
  const stm = new STMPrimitive(OP_FAIL4);
  stm.effect_instruction_i1 = evaluate2;
  return stm;
}, flatMap22, matchSTM, withSTMRuntime = (f) => {
  const stm = new STMPrimitive(OP_WITH_STM_RUNTIME);
  stm.effect_instruction_i1 = f;
  return stm;
}, interrupt10, interruptAs2 = (fiberId3) => {
  const stm = new STMPrimitive(OP_INTERRUPT2);
  stm.effect_instruction_i1 = fiberId3;
  return stm;
}, map31, orTry, retry6, succeed19 = (value2) => {
  const stm = new STMPrimitive(OP_SUCCEED2);
  stm.effect_instruction_i1 = value2;
  return stm;
}, sync13 = (evaluate2) => {
  const stm = new STMPrimitive(OP_SYNC2);
  stm.effect_instruction_i1 = evaluate2;
  return stm;
}, zip15, zipLeft11, zipRight11, zipWith16;
var init_core2 = __esm(() => {
  init_Cause();
  init_Context();
  init_Effect();
  init_Either();
  init_Equal();
  init_Exit();
  init_FiberRef();
  init_Function();
  init_Hash();
  init_Predicate();
  init_Utils();
  init_core_stream();
  init_core();
  init_effectable();
  init_singleShotGen();
  init_sink();
  init_journal();
  init_stmState();
  init_tExit();
  init_tryCommit();
  init_txnId();
  STMTypeId2 = /* @__PURE__ */ Symbol.for(STMSymbolKey2);
  stmVariance = {
    _R: (_) => _,
    _E: (_) => _,
    _A: (_) => _
  };
  STMPrimitive = class STMPrimitive {
    effect_instruction_i0;
    _op = OP_COMMIT;
    effect_instruction_i1 = undefined;
    effect_instruction_i2 = undefined;
    [EffectTypeId4];
    [StreamTypeId];
    [SinkTypeId3];
    [ChannelTypeId3];
    get [STMTypeId2]() {
      return stmVariance;
    }
    constructor(effect_instruction_i0) {
      this.effect_instruction_i0 = effect_instruction_i0;
      this[EffectTypeId4] = effectVariance;
      this[StreamTypeId] = stmVariance;
      this[SinkTypeId3] = stmVariance;
      this[ChannelTypeId3] = stmVariance;
    }
    [symbol3](that) {
      return this === that;
    }
    [symbol2]() {
      return cached(this, random(this));
    }
    [Symbol.iterator]() {
      return new SingleShotGen2(new YieldWrap(this));
    }
    commit() {
      return unsafeAtomically(this, constVoid, constVoid);
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  catchAll7 = /* @__PURE__ */ dual(2, (self, f) => {
    const stm = new STMPrimitive(OP_ON_FAILURE2);
    stm.effect_instruction_i1 = self;
    stm.effect_instruction_i2 = f;
    return stm;
  });
  mapInputContext6 = /* @__PURE__ */ dual(2, (self, f) => {
    const stm = new STMPrimitive(OP_PROVIDE3);
    stm.effect_instruction_i1 = self;
    stm.effect_instruction_i2 = f;
    return stm;
  });
  ensuring8 = /* @__PURE__ */ dual(2, (self, finalizer) => matchSTM(self, {
    onFailure: (e) => zipRight11(finalizer, fail17(e)),
    onSuccess: (a) => zipRight11(finalizer, succeed19(a))
  }));
  flatMap22 = /* @__PURE__ */ dual(2, (self, f) => {
    const stm = new STMPrimitive(OP_ON_SUCCESS2);
    stm.effect_instruction_i1 = self;
    stm.effect_instruction_i2 = f;
    return stm;
  });
  matchSTM = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => pipe(self, map31(right2), catchAll7((e) => pipe(onFailure(e), map31(left2))), flatMap22((either8) => {
    switch (either8._tag) {
      case "Left": {
        return succeed19(either8.left);
      }
      case "Right": {
        return onSuccess(either8.right);
      }
    }
  })));
  interrupt10 = /* @__PURE__ */ withSTMRuntime((_) => {
    const stm = new STMPrimitive(OP_INTERRUPT2);
    stm.effect_instruction_i1 = _.fiberId;
    return stm;
  });
  map31 = /* @__PURE__ */ dual(2, (self, f) => pipe(self, flatMap22((a) => sync13(() => f(a)))));
  orTry = /* @__PURE__ */ dual(2, (self, that) => {
    const stm = new STMPrimitive(OP_ON_RETRY);
    stm.effect_instruction_i1 = self;
    stm.effect_instruction_i2 = that;
    return stm;
  });
  retry6 = /* @__PURE__ */ new STMPrimitive(OP_RETRY);
  zip15 = /* @__PURE__ */ dual(2, (self, that) => pipe(self, zipWith16(that, (a, a1) => [a, a1])));
  zipLeft11 = /* @__PURE__ */ dual(2, (self, that) => pipe(self, flatMap22((a) => pipe(that, map31(() => a)))));
  zipRight11 = /* @__PURE__ */ dual(2, (self, that) => pipe(self, flatMap22(() => that)));
  zipWith16 = /* @__PURE__ */ dual(3, (self, that, f) => pipe(self, flatMap22((a) => pipe(that, map31((b) => f(a, b))))));
});

// node_modules/effect/dist/esm/internal/stm/opCodes/strategy.js
var OP_BACKPRESSURE_STRATEGY = "BackPressure", OP_DROPPING_STRATEGY = "Dropping", OP_SLIDING_STRATEGY = "Sliding";

// node_modules/effect/dist/esm/internal/stm/stm.js
var acquireUseRelease5, as12, asSome4 = (self) => pipe(self, map31(some3)), asSomeError3 = (self) => pipe(self, mapError9(some3)), asVoid9 = (self) => pipe(self, map31(constVoid)), attempt = (evaluate2) => suspend9(() => {
  try {
    return succeed19(evaluate2());
  } catch (defect) {
    return fail17(defect);
  }
}), bind8, bindTo8, let_8, catchSome3, catchTag4, catchTags3, check4 = (predicate) => suspend9(() => predicate() ? void_9 : retry6), collect3, collectSTM, commitEither = (self) => flatten13(commit2(either8(self))), cond = (predicate, error3, result2) => {
  return suspend9(() => predicate() ? sync13(result2) : failSync9(error3));
}, either8 = (self) => match31(self, {
  onFailure: left2,
  onSuccess: right2
}), eventually3 = (self) => matchSTM(self, {
  onFailure: () => eventually3(self),
  onSuccess: succeed19
}), every15, exists5, fiberId3, filter17, filterNot, filterOrDie3, filterOrDieMessage3, filterOrElse3, filterOrFail4, flatten16 = (self) => flatMap22(self, identity), flip6 = (self) => matchSTM(self, {
  onFailure: succeed19,
  onSuccess: fail17
}), flipWith3, match31, forEach18, fromEither4 = (either9) => {
  switch (either9._tag) {
    case "Left": {
      return fail17(either9.left);
    }
    case "Right": {
      return succeed19(either9.right);
    }
  }
}, fromOption7 = (option5) => match2(option5, {
  onNone: () => fail17(none2()),
  onSome: succeed19
}), gen7 = (...args2) => suspend9(() => {
  const f = args2.length === 1 ? args2[0] : args2[1].bind(args2[0]);
  const iterator = f(pipe);
  const state = iterator.next();
  const run4 = (state2) => state2.done ? succeed19(state2.value) : flatMap22(yieldWrapGet(state2.value), (val) => run4(iterator.next(val)));
  return run4(state);
}), head9 = (self) => pipe(self, matchSTM({
  onFailure: (e) => fail17(some3(e)),
  onSuccess: (a) => {
    const i2 = a[Symbol.iterator]();
    const res = i2.next();
    if (res.done) {
      return fail17(none2());
    } else {
      return succeed19(res.value);
    }
  }
})), if_3, ignore4 = (self) => match31(self, {
  onFailure: () => void_9,
  onSuccess: () => void_9
}), isFailure6 = (self) => match31(self, {
  onFailure: constTrue,
  onSuccess: constFalse
}), isSuccess5 = (self) => match31(self, {
  onFailure: constFalse,
  onSuccess: constTrue
}), iterate3 = (initial, options) => iterateLoop(initial, options.while, options.body), iterateLoop = (initial, cont, body) => {
  if (cont(initial)) {
    return pipe(body(initial), flatMap22((z2) => iterateLoop(z2, cont, body)));
  }
  return succeed19(initial);
}, loop3 = (initial, options) => options.discard ? loopDiscardLoop(initial, options.while, options.step, options.body) : map31(loopLoop(initial, options.while, options.step, options.body), (a) => Array.from(a)), loopLoop = (initial, cont, inc, body) => {
  if (cont(initial)) {
    return pipe(body(initial), flatMap22((a) => pipe(loopLoop(inc(initial), cont, inc, body), map31(append3(a)))));
  }
  return succeed19(empty7());
}, loopDiscardLoop = (initial, cont, inc, body) => {
  if (cont(initial)) {
    return pipe(body(initial), flatMap22(() => loopDiscardLoop(inc(initial), cont, inc, body)));
  }
  return void_9;
}, mapAttempt, mapBoth8, mapError9, merge9 = (self) => matchSTM(self, {
  onFailure: (e) => succeed19(e),
  onSuccess: succeed19
}), mergeAll8, negate5 = (self) => pipe(self, map31((b) => !b)), none10 = (self) => matchSTM(self, {
  onFailure: (e) => fail17(some3(e)),
  onSuccess: match2({
    onNone: () => void_9,
    onSome: () => fail17(none2())
  })
}), option5 = (self) => match31(self, {
  onFailure: () => none2(),
  onSuccess: some3
}), orDie7 = (self) => pipe(self, orDieWith4(identity)), orDieWith4, orElse12, orElseEither6, orElseFail3, orElseOptional, orElseSucceed4, provideContext7, provideSomeContext2, provideService9, provideServiceSTM, reduce19, reduceAll, reduceRight6, refineOrDie2, refineOrDieWith2, reject, rejectSTM, repeatUntil, repeatUntilLoop = (self, predicate) => flatMap22(self, (a) => predicate(a) ? succeed19(a) : repeatUntilLoop(self, predicate)), repeatWhile, repeatWhileLoop = (self, predicate) => pipe(flatMap22(self, (a) => predicate(a) ? repeatWhileLoop(self, predicate) : succeed19(a))), replicate6, replicateSTM, replicateSTMDiscard, retryUntil, retryWhile, partition10, some16 = (self) => matchSTM(self, {
  onFailure: (e) => fail17(some3(e)),
  onSuccess: match2({
    onNone: () => fail17(none2()),
    onSome: succeed19
  })
}), all12 = (input, options) => {
  if (Symbol.iterator in input) {
    return forEach18(input, identity, options);
  } else if (options?.discard) {
    return forEach18(Object.values(input), identity, options);
  }
  return map31(forEach18(Object.entries(input), ([_, e]) => map31(e, (a) => [_, a])), (values10) => {
    const res = {};
    for (const [k, v] of values10) {
      res[k] = v;
    }
    return res;
  });
}, succeedNone4, succeedSome4 = (value2) => succeed19(some3(value2)), summarized4, suspend9 = (evaluate2) => flatten16(sync13(evaluate2)), tap7, tapBoth3, tapError6, try_5 = (arg) => {
  const evaluate2 = typeof arg === "function" ? arg : arg.try;
  return suspend9(() => {
    try {
      return succeed19(evaluate2());
    } catch (error3) {
      return fail17("catch" in arg ? arg.catch(error3) : error3);
    }
  });
}, void_9, unless3, unlessSTM, unsome = (self) => matchSTM(self, {
  onFailure: match2({
    onNone: () => succeed19(none2()),
    onSome: fail17
  }),
  onSuccess: (a) => succeed19(some3(a))
}), validateAll3, validateFirst3, when4, whenSTM;
var init_stm = __esm(() => {
  init_Array();
  init_Cause();
  init_Chunk();
  init_Context();
  init_Effect();
  init_Either();
  init_Exit();
  init_Function();
  init_Option();
  init_Predicate();
  init_Utils();
  init_core();
  init_core2();
  init_journal();
  init_stmState();
  acquireUseRelease5 = /* @__PURE__ */ dual(3, (acquire, use2, release) => uninterruptibleMask3((restore) => {
    let state = running3;
    return pipe(restore(unsafeAtomically(acquire, (exit4) => {
      state = done9(exit4);
    }, () => {
      state = interrupted3;
    })), matchCauseEffect3({
      onFailure: (cause3) => {
        if (isDone6(state) && isSuccess(state.exit)) {
          return pipe(release(state.exit.value), matchCauseEffect3({
            onFailure: (cause22) => failCause10(parallel4(cause3, cause22)),
            onSuccess: () => failCause10(cause3)
          }));
        }
        return failCause10(cause3);
      },
      onSuccess: (a) => pipe(restore(use2(a)), matchCauseEffect3({
        onFailure: (cause3) => pipe(release(a), matchCauseEffect3({
          onFailure: (cause22) => failCause10(parallel4(cause3, cause22)),
          onSuccess: () => failCause10(cause3)
        })),
        onSuccess: (a2) => pipe(release(a), as8(a2))
      }))
    }));
  }));
  as12 = /* @__PURE__ */ dual(2, (self, value2) => pipe(self, map31(() => value2)));
  bind8 = /* @__PURE__ */ dual(3, (self, tag, f) => flatMap22(self, (k) => map31(f(k), (a) => ({
    ...k,
    [tag]: a
  }))));
  bindTo8 = /* @__PURE__ */ dual(2, (self, tag) => map31(self, (a) => ({
    [tag]: a
  })));
  let_8 = /* @__PURE__ */ dual(3, (self, tag, f) => map31(self, (k) => ({
    ...k,
    [tag]: f(k)
  })));
  catchSome3 = /* @__PURE__ */ dual(2, (self, pf) => catchAll7(self, (e) => getOrElse2(pf(e), () => fail17(e))));
  catchTag4 = /* @__PURE__ */ dual(3, (self, k, f) => catchAll7(self, (e) => {
    if ("_tag" in e && e["_tag"] === k) {
      return f(e);
    }
    return fail17(e);
  }));
  catchTags3 = /* @__PURE__ */ dual(2, (self, cases) => catchAll7(self, (e) => {
    const keys7 = Object.keys(cases);
    if ("_tag" in e && keys7.includes(e["_tag"])) {
      return cases[e["_tag"]](e);
    }
    return fail17(e);
  }));
  collect3 = /* @__PURE__ */ dual(2, (self, pf) => collectSTM(self, (a) => map2(pf(a), succeed19)));
  collectSTM = /* @__PURE__ */ dual(2, (self, pf) => matchSTM(self, {
    onFailure: fail17,
    onSuccess: (a) => {
      const option5 = pf(a);
      return isSome2(option5) ? option5.value : retry6;
    }
  }));
  every15 = /* @__PURE__ */ dual(2, (iterable, predicate) => pipe(flatMap22(sync13(() => iterable[Symbol.iterator]()), (iterator) => {
    const loop3 = suspend9(() => {
      const next4 = iterator.next();
      if (next4.done) {
        return succeed19(true);
      }
      return pipe(predicate(next4.value), flatMap22((bool) => bool ? loop3 : succeed19(bool)));
    });
    return loop3;
  })));
  exists5 = /* @__PURE__ */ dual(2, (iterable, predicate) => flatMap22(sync13(() => iterable[Symbol.iterator]()), (iterator) => {
    const loop3 = suspend9(() => {
      const next4 = iterator.next();
      if (next4.done) {
        return succeed19(false);
      }
      return flatMap22(predicate(next4.value), (bool) => bool ? succeed19(bool) : loop3);
    });
    return loop3;
  }));
  fiberId3 = /* @__PURE__ */ effect3((_, fiberId4) => fiberId4);
  filter17 = /* @__PURE__ */ dual(2, (iterable, predicate) => Array.from(iterable).reduce((acc, curr) => pipe(acc, zipWith16(predicate(curr), (as13, p) => {
    if (p) {
      as13.push(curr);
      return as13;
    }
    return as13;
  })), succeed19([])));
  filterNot = /* @__PURE__ */ dual(2, (iterable, predicate) => filter17(iterable, (a) => negate5(predicate(a))));
  filterOrDie3 = /* @__PURE__ */ dual(3, (self, predicate, defect) => filterOrElse3(self, predicate, () => dieSync7(defect)));
  filterOrDieMessage3 = /* @__PURE__ */ dual(3, (self, predicate, message) => filterOrElse3(self, predicate, () => dieMessage4(message)));
  filterOrElse3 = /* @__PURE__ */ dual(3, (self, predicate, orElse12) => flatMap22(self, (a) => predicate(a) ? succeed19(a) : orElse12(a)));
  filterOrFail4 = /* @__PURE__ */ dual(3, (self, predicate, orFailWith) => filterOrElse3(self, predicate, (a) => failSync9(() => orFailWith(a))));
  flipWith3 = /* @__PURE__ */ dual(2, (self, f) => flip6(f(flip6(self))));
  match31 = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => matchSTM(self, {
    onFailure: (e) => succeed19(onFailure(e)),
    onSuccess: (a) => succeed19(onSuccess(a))
  }));
  forEach18 = /* @__PURE__ */ dual((args2) => isIterable(args2[0]), (iterable, f, options) => {
    if (options?.discard) {
      return pipe(sync13(() => iterable[Symbol.iterator]()), flatMap22((iterator) => {
        const loop3 = suspend9(() => {
          const next4 = iterator.next();
          if (next4.done) {
            return void_9;
          }
          return pipe(f(next4.value), flatMap22(() => loop3));
        });
        return loop3;
      }));
    }
    return suspend9(() => fromIterable2(iterable).reduce((acc, curr) => zipWith16(acc, f(curr), (array6, elem) => {
      array6.push(elem);
      return array6;
    }), succeed19([])));
  });
  if_3 = /* @__PURE__ */ dual((args2) => typeof args2[0] === "boolean" || isSTM(args2[0]), (self, {
    onFalse,
    onTrue
  }) => {
    if (typeof self === "boolean") {
      return self ? onTrue : onFalse;
    }
    return flatMap22(self, (bool) => bool ? onTrue : onFalse);
  });
  mapAttempt = /* @__PURE__ */ dual(2, (self, f) => matchSTM(self, {
    onFailure: (e) => fail17(e),
    onSuccess: (a) => attempt(() => f(a))
  }));
  mapBoth8 = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => matchSTM(self, {
    onFailure: (e) => fail17(onFailure(e)),
    onSuccess: (a) => succeed19(onSuccess(a))
  }));
  mapError9 = /* @__PURE__ */ dual(2, (self, f) => matchSTM(self, {
    onFailure: (e) => fail17(f(e)),
    onSuccess: succeed19
  }));
  mergeAll8 = /* @__PURE__ */ dual(3, (iterable, zero3, f) => suspend9(() => Array.from(iterable).reduce((acc, curr) => pipe(acc, zipWith16(curr, f)), succeed19(zero3))));
  orDieWith4 = /* @__PURE__ */ dual(2, (self, f) => pipe(self, mapError9(f), catchAll7(die12)));
  orElse12 = /* @__PURE__ */ dual(2, (self, that) => flatMap22(effect3((journal) => prepareResetJournal(journal)), (reset3) => pipe(orTry(self, () => flatMap22(sync13(reset3), that)), catchAll7(() => flatMap22(sync13(reset3), that)))));
  orElseEither6 = /* @__PURE__ */ dual(2, (self, that) => orElse12(map31(self, left2), () => map31(that(), right2)));
  orElseFail3 = /* @__PURE__ */ dual(2, (self, error3) => orElse12(self, () => failSync9(error3)));
  orElseOptional = /* @__PURE__ */ dual(2, (self, that) => catchAll7(self, match2({
    onNone: that,
    onSome: (e) => fail17(some3(e))
  })));
  orElseSucceed4 = /* @__PURE__ */ dual(2, (self, value2) => orElse12(self, () => sync13(value2)));
  provideContext7 = /* @__PURE__ */ dual(2, (self, env) => mapInputContext6(self, (_) => env));
  provideSomeContext2 = /* @__PURE__ */ dual(2, (self, context10) => mapInputContext6(self, (parent) => merge3(parent, context10)));
  provideService9 = /* @__PURE__ */ dual(3, (self, tag, resource) => provideServiceSTM(self, tag, succeed19(resource)));
  provideServiceSTM = /* @__PURE__ */ dual(3, (self, tag, stm) => contextWithSTM((env) => flatMap22(stm, (service4) => provideContext7(self, add2(env, tag, service4)))));
  reduce19 = /* @__PURE__ */ dual(3, (iterable, zero3, f) => suspend9(() => Array.from(iterable).reduce((acc, curr) => pipe(acc, flatMap22((s) => f(s, curr))), succeed19(zero3))));
  reduceAll = /* @__PURE__ */ dual(3, (iterable, initial, f) => suspend9(() => Array.from(iterable).reduce((acc, curr) => pipe(acc, zipWith16(curr, f)), initial)));
  reduceRight6 = /* @__PURE__ */ dual(3, (iterable, zero3, f) => suspend9(() => Array.from(iterable).reduceRight((acc, curr) => pipe(acc, flatMap22((s) => f(s, curr))), succeed19(zero3))));
  refineOrDie2 = /* @__PURE__ */ dual(2, (self, pf) => refineOrDieWith2(self, pf, identity));
  refineOrDieWith2 = /* @__PURE__ */ dual(3, (self, pf, f) => catchAll7(self, (e) => match2(pf(e), {
    onNone: () => die12(f(e)),
    onSome: fail17
  })));
  reject = /* @__PURE__ */ dual(2, (self, pf) => rejectSTM(self, (a) => map2(pf(a), fail17)));
  rejectSTM = /* @__PURE__ */ dual(2, (self, pf) => flatMap22(self, (a) => match2(pf(a), {
    onNone: () => succeed19(a),
    onSome: flatMap22(fail17)
  })));
  repeatUntil = /* @__PURE__ */ dual(2, (self, predicate) => repeatUntilLoop(self, predicate));
  repeatWhile = /* @__PURE__ */ dual(2, (self, predicate) => repeatWhileLoop(self, predicate));
  replicate6 = /* @__PURE__ */ dual(2, (self, n) => Array.from({
    length: n
  }, () => self));
  replicateSTM = /* @__PURE__ */ dual(2, (self, n) => all12(replicate6(self, n)));
  replicateSTMDiscard = /* @__PURE__ */ dual(2, (self, n) => all12(replicate6(self, n), {
    discard: true
  }));
  retryUntil = /* @__PURE__ */ dual(2, (self, predicate) => matchSTM(self, {
    onFailure: fail17,
    onSuccess: (a) => predicate(a) ? succeed19(a) : retry6
  }));
  retryWhile = /* @__PURE__ */ dual(2, (self, predicate) => matchSTM(self, {
    onFailure: fail17,
    onSuccess: (a) => !predicate(a) ? succeed19(a) : retry6
  }));
  partition10 = /* @__PURE__ */ dual(2, (elements, f) => pipe(forEach18(elements, (a) => either8(f(a))), map31((as13) => partitionMap6(as13, identity))));
  succeedNone4 = /* @__PURE__ */ succeed19(/* @__PURE__ */ none2());
  summarized4 = /* @__PURE__ */ dual(3, (self, summary6, f) => flatMap22(summary6, (start3) => flatMap22(self, (value2) => map31(summary6, (end3) => [f(start3, end3), value2]))));
  tap7 = /* @__PURE__ */ dual(2, (self, f) => flatMap22(self, (a) => as12(f(a), a)));
  tapBoth3 = /* @__PURE__ */ dual(2, (self, {
    onFailure,
    onSuccess
  }) => matchSTM(self, {
    onFailure: (e) => pipe(onFailure(e), zipRight11(fail17(e))),
    onSuccess: (a) => pipe(onSuccess(a), as12(a))
  }));
  tapError6 = /* @__PURE__ */ dual(2, (self, f) => matchSTM(self, {
    onFailure: (e) => zipRight11(f(e), fail17(e)),
    onSuccess: succeed19
  }));
  void_9 = /* @__PURE__ */ succeed19(undefined);
  unless3 = /* @__PURE__ */ dual(2, (self, predicate) => suspend9(() => predicate() ? succeedNone4 : asSome4(self)));
  unlessSTM = /* @__PURE__ */ dual(2, (self, predicate) => flatMap22(predicate, (bool) => bool ? succeedNone4 : asSome4(self)));
  validateAll3 = /* @__PURE__ */ dual(2, (elements, f) => flatMap22(partition10(elements, f), ([errors2, values10]) => isNonEmptyArray2(errors2) ? fail17(errors2) : succeed19(values10)));
  validateFirst3 = /* @__PURE__ */ dual(2, (elements, f) => flip6(forEach18(elements, (a) => flip6(f(a)))));
  when4 = /* @__PURE__ */ dual(2, (self, predicate) => suspend9(() => predicate() ? asSome4(self) : succeedNone4));
  whenSTM = /* @__PURE__ */ dual(2, (self, predicate) => flatMap22(predicate, (bool) => bool ? asSome4(self) : succeedNone4));
});

// node_modules/effect/dist/esm/internal/stm/tRef.js
var TRefSymbolKey = "effect/TRef", TRefTypeId, tRefVariance, TRefImpl, make69 = (value2) => effect3((journal) => {
  const ref = new TRefImpl(value2);
  journal.set(ref, make67(ref, true));
  return ref;
}), get18 = (self) => self.modify((a) => [a, a]), set10, getAndSet5, getAndUpdate5, getAndUpdateSome4, setAndGet4, modify12, modifySome4, update8, updateAndGet5, updateSome4, updateSomeAndGet4, getOrMakeEntry = (self, journal) => {
  if (journal.has(self)) {
    return journal.get(self);
  }
  const entry = make67(self, false);
  journal.set(self, entry);
  return entry;
}, unsafeGet9, unsafeSet2;
var init_tRef = __esm(() => {
  init_Function();
  init_Option();
  init_core2();
  init_entry();
  TRefTypeId = /* @__PURE__ */ Symbol.for(TRefSymbolKey);
  tRefVariance = {
    _A: (_) => _
  };
  TRefImpl = class TRefImpl {
    [TRefTypeId] = tRefVariance;
    todos;
    versioned;
    constructor(value2) {
      this.versioned = new Versioned(value2);
      this.todos = new Map;
    }
    modify(f) {
      return effect3((journal) => {
        const entry = getOrMakeEntry(this, journal);
        const [retValue, newValue] = f(unsafeGet8(entry));
        unsafeSet(entry, newValue);
        return retValue;
      });
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  set10 = /* @__PURE__ */ dual(2, (self, value2) => self.modify(() => [undefined, value2]));
  getAndSet5 = /* @__PURE__ */ dual(2, (self, value2) => self.modify((a) => [a, value2]));
  getAndUpdate5 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [a, f(a)]));
  getAndUpdateSome4 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => match2(f(a), {
    onNone: () => [a, a],
    onSome: (b) => [a, b]
  })));
  setAndGet4 = /* @__PURE__ */ dual(2, (self, value2) => self.modify(() => [value2, value2]));
  modify12 = /* @__PURE__ */ dual(2, (self, f) => self.modify(f));
  modifySome4 = /* @__PURE__ */ dual(3, (self, fallback, f) => self.modify((a) => match2(f(a), {
    onNone: () => [fallback, a],
    onSome: (b) => b
  })));
  update8 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [undefined, f(a)]));
  updateAndGet5 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => {
    const b = f(a);
    return [b, b];
  }));
  updateSome4 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [undefined, match2(f(a), {
    onNone: () => a,
    onSome: (b) => b
  })]));
  updateSomeAndGet4 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => match2(f(a), {
    onNone: () => [a, a],
    onSome: (b) => [b, b]
  })));
  unsafeGet9 = /* @__PURE__ */ dual(2, (self, journal) => unsafeGet8(getOrMakeEntry(self, journal)));
  unsafeSet2 = /* @__PURE__ */ dual(3, (self, value2, journal) => {
    const entry = getOrMakeEntry(self, journal);
    unsafeSet(entry, value2);
    return;
  });
});

// node_modules/effect/dist/esm/internal/stm/tQueue.js
var TEnqueueSymbolKey = "effect/TQueue/TEnqueue", TEnqueueTypeId, TDequeueSymbolKey = "effect/TQueue/TDequeue", TDequeueTypeId, BackPressure2, Dropping, Sliding, tDequeueVariance, tEnqueueVariance, TQueueImpl, isTQueue = (u) => {
  return isTEnqueue(u) && isTDequeue(u);
}, isTEnqueue = (u) => hasProperty(u, TEnqueueTypeId), isTDequeue = (u) => hasProperty(u, TDequeueTypeId), awaitShutdown5 = (self) => self.awaitShutdown, bounded6 = (requestedCapacity) => makeQueue(requestedCapacity, BackPressure2), capacity6 = (self) => {
  return self.capacity();
}, dropping5 = (requestedCapacity) => makeQueue(requestedCapacity, Dropping), isEmpty19 = (self) => self.isEmpty, isFull6 = (self) => self.isFull, isShutdown5 = (self) => self.isShutdown, offer4, offerAll4, peek = (self) => self.peek, peekOption = (self) => self.peekOption, poll7 = (self) => pipe(self.takeUpTo(1), map31(head2)), seek, seekLoop = (self, predicate) => flatMap22(self.take, (a) => predicate(a) ? succeed19(a) : seekLoop(self, predicate)), shutdown5 = (self) => self.shutdown, size21 = (self) => self.size, sliding5 = (requestedCapacity) => makeQueue(requestedCapacity, Sliding), take8 = (self) => self.take, takeAll3 = (self) => self.takeAll, takeBetween3, takeN3, takeUpTo3, unbounded6 = () => makeQueue(Number.MAX_SAFE_INTEGER, Dropping), makeQueue = (requestedCapacity, strategy) => map31(make69([]), (ref) => new TQueueImpl(ref, requestedCapacity, strategy));
var init_tQueue = __esm(() => {
  init_Array();
  init_Chunk();
  init_Function();
  init_Option();
  init_Predicate();
  init_core2();
  init_stm();
  init_tRef();
  TEnqueueTypeId = /* @__PURE__ */ Symbol.for(TEnqueueSymbolKey);
  TDequeueTypeId = /* @__PURE__ */ Symbol.for(TDequeueSymbolKey);
  BackPressure2 = {
    _tag: OP_BACKPRESSURE_STRATEGY
  };
  Dropping = {
    _tag: OP_DROPPING_STRATEGY
  };
  Sliding = {
    _tag: OP_SLIDING_STRATEGY
  };
  tDequeueVariance = {
    _Out: (_) => _
  };
  tEnqueueVariance = {
    _In: (_) => _
  };
  TQueueImpl = class TQueueImpl {
    ref;
    requestedCapacity;
    strategy;
    [TDequeueTypeId] = tDequeueVariance;
    [TEnqueueTypeId] = tEnqueueVariance;
    constructor(ref, requestedCapacity, strategy) {
      this.ref = ref;
      this.requestedCapacity = requestedCapacity;
      this.strategy = strategy;
    }
    capacity() {
      return this.requestedCapacity;
    }
    size = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      const queue = unsafeGet9(this.ref, runtime5.journal);
      if (queue === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      return succeed19(queue.length);
    });
    isFull = /* @__PURE__ */ map31(this.size, (size21) => size21 === this.requestedCapacity);
    isEmpty = /* @__PURE__ */ map31(this.size, (size21) => size21 === 0);
    shutdown = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      unsafeSet2(this.ref, undefined, runtime5.journal);
      return void_9;
    });
    isShutdown = /* @__PURE__ */ effect3((journal) => {
      const queue = unsafeGet9(this.ref, journal);
      return queue === undefined;
    });
    awaitShutdown = /* @__PURE__ */ flatMap22(this.isShutdown, (isShutdown5) => isShutdown5 ? void_9 : retry6);
    offer(value2) {
      return withSTMRuntime((runtime5) => {
        const queue = pipe(this.ref, unsafeGet9(runtime5.journal));
        if (queue === undefined) {
          return interruptAs2(runtime5.fiberId);
        }
        if (queue.length < this.requestedCapacity) {
          queue.push(value2);
          unsafeSet2(this.ref, queue, runtime5.journal);
          return succeed19(true);
        }
        switch (this.strategy._tag) {
          case OP_BACKPRESSURE_STRATEGY: {
            return retry6;
          }
          case OP_DROPPING_STRATEGY: {
            return succeed19(false);
          }
          case OP_SLIDING_STRATEGY: {
            if (queue.length === 0) {
              return succeed19(true);
            }
            queue.shift();
            queue.push(value2);
            unsafeSet2(this.ref, queue, runtime5.journal);
            return succeed19(true);
          }
        }
      });
    }
    offerAll(iterable) {
      return withSTMRuntime((runtime5) => {
        const as13 = Array.from(iterable);
        const queue = unsafeGet9(this.ref, runtime5.journal);
        if (queue === undefined) {
          return interruptAs2(runtime5.fiberId);
        }
        if (queue.length + as13.length <= this.requestedCapacity) {
          unsafeSet2(this.ref, [...queue, ...as13], runtime5.journal);
          return succeed19(true);
        }
        switch (this.strategy._tag) {
          case OP_BACKPRESSURE_STRATEGY: {
            return retry6;
          }
          case OP_DROPPING_STRATEGY: {
            const forQueue = as13.slice(0, this.requestedCapacity - queue.length);
            unsafeSet2(this.ref, [...queue, ...forQueue], runtime5.journal);
            return succeed19(false);
          }
          case OP_SLIDING_STRATEGY: {
            const forQueue = as13.slice(0, this.requestedCapacity - queue.length);
            const toDrop = queue.length + forQueue.length - this.requestedCapacity;
            const newQueue = queue.slice(toDrop);
            unsafeSet2(this.ref, [...newQueue, ...forQueue], runtime5.journal);
            return succeed19(true);
          }
        }
      });
    }
    peek = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      const queue = unsafeGet9(this.ref, runtime5.journal);
      if (queue === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      if (queue.length === 0) {
        return retry6;
      }
      return succeed19(queue[0]);
    });
    peekOption = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      const queue = unsafeGet9(this.ref, runtime5.journal);
      if (queue === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      return succeed19(fromNullable2(queue[0]));
    });
    take = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      const queue = unsafeGet9(this.ref, runtime5.journal);
      if (queue === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      if (queue.length === 0) {
        return retry6;
      }
      const dequeued = queue.shift();
      unsafeSet2(this.ref, queue, runtime5.journal);
      return succeed19(dequeued);
    });
    takeAll = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      const queue = unsafeGet9(this.ref, runtime5.journal);
      if (queue === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      unsafeSet2(this.ref, [], runtime5.journal);
      return succeed19(queue);
    });
    takeUpTo(max13) {
      return withSTMRuntime((runtime5) => {
        const queue = unsafeGet9(this.ref, runtime5.journal);
        if (queue === undefined) {
          return interruptAs2(runtime5.fiberId);
        }
        const [toTake, remaining] = splitAt2(unsafeFromArray(queue), max13);
        unsafeSet2(this.ref, Array.from(remaining), runtime5.journal);
        return succeed19(Array.from(toTake));
      });
    }
  };
  offer4 = /* @__PURE__ */ dual(2, (self, value2) => self.offer(value2));
  offerAll4 = /* @__PURE__ */ dual(2, (self, iterable) => self.offerAll(iterable));
  seek = /* @__PURE__ */ dual(2, (self, predicate) => seekLoop(self, predicate));
  takeBetween3 = /* @__PURE__ */ dual(3, (self, min10, max13) => suspend9(() => {
    const takeRemainder = (min11, max14, acc) => {
      if (max14 < min11) {
        return succeed19(acc);
      }
      return pipe(self.takeUpTo(max14), flatMap22((taken) => {
        const remaining = min11 - taken.length;
        if (remaining === 1) {
          return pipe(self.take, map31((a) => pipe(acc, appendAll3(unsafeFromArray(taken)), append3(a))));
        }
        if (remaining > 1) {
          return pipe(self.take, flatMap22((a) => takeRemainder(remaining - 1, max14 - taken.length - 1, pipe(acc, appendAll3(unsafeFromArray(taken)), append3(a)))));
        }
        return succeed19(pipe(acc, appendAll3(unsafeFromArray(taken))));
      }));
    };
    return map31(takeRemainder(min10, max13, empty7()), (c) => Array.from(c));
  }));
  takeN3 = /* @__PURE__ */ dual(2, (self, n) => pipe(self, takeBetween3(n, n)));
  takeUpTo3 = /* @__PURE__ */ dual(2, (self, max13) => self.takeUpTo(max13));
});

// node_modules/effect/dist/esm/internal/stm/tPubSub.js
var TPubSubSymbolKey = "effect/TPubSub", TPubSubTypeId, AbsentValue2, makeNode2 = (head10, subscribers, tail5) => ({
  head: head10,
  subscribers,
  tail: tail5
}), TPubSubImpl, TPubSubSubscriptionImpl, makeTPubSub = (requestedCapacity, strategy) => pipe(all12([make69(undefined), make69(0)]), flatMap22(([empty43, pubsubSize]) => pipe(all12([make69(empty43), make69(empty43), make69(0), make69(empty10())]), map31(([publisherHead, publisherTail, subscriberCount, subscribers]) => new TPubSubImpl(pubsubSize, publisherHead, publisherTail, requestedCapacity, strategy, subscriberCount, subscribers))))), makeSubscription2 = (pubsubSize, publisherHead, publisherTail, requestedCapacity, subscriberCount, subscribers) => pipe(get18(publisherTail), flatMap22((currentPublisherTail) => pipe(all12([make69(currentPublisherTail), get18(subscriberCount), get18(subscribers)]), tap7(([_, currentSubscriberCount]) => pipe(subscriberCount, set10(currentSubscriberCount + 1))), tap7(([subscriberHead, _, currentSubscribers]) => pipe(subscribers, set10(pipe(currentSubscribers, add4(subscriberHead))))), map31(([subscriberHead]) => new TPubSubSubscriptionImpl(pubsubSize, publisherHead, requestedCapacity, subscriberHead, subscriberCount, subscribers))))), awaitShutdown6 = (self) => self.awaitShutdown, bounded7 = (requestedCapacity) => makeTPubSub(requestedCapacity, BackPressure2), capacity7 = (self) => self.capacity(), dropping6 = (requestedCapacity) => makeTPubSub(requestedCapacity, Dropping), isEmpty20 = (self) => self.isEmpty, isFull7 = (self) => self.isFull, isShutdown6 = (self) => self.isShutdown, publish3, publishAll3, size22 = (self) => self.size, shutdown6 = (self) => self.shutdown, sliding6 = (requestedCapacity) => makeTPubSub(requestedCapacity, Sliding), subscribe3 = (self) => makeSubscription2(self.pubsubSize, self.publisherHead, self.publisherTail, self.requestedCapacity, self.subscriberCount, self.subscribers), subscribeScoped = (self) => acquireRelease3(subscribe3(self), (dequeue) => shutdown5(dequeue)), unbounded7 = () => makeTPubSub(Number.MAX_SAFE_INTEGER, Dropping);
var init_tPubSub = __esm(() => {
  init_Array();
  init_Effect();
  init_Function();
  init_HashSet();
  init_Option();
  init_core2();
  init_stm();
  init_tQueue();
  init_tRef();
  TPubSubTypeId = /* @__PURE__ */ Symbol.for(TPubSubSymbolKey);
  AbsentValue2 = /* @__PURE__ */ Symbol.for("effect/TPubSub/AbsentValue");
  TPubSubImpl = class TPubSubImpl {
    pubsubSize;
    publisherHead;
    publisherTail;
    requestedCapacity;
    strategy;
    subscriberCount;
    subscribers;
    [TPubSubTypeId] = {
      _A: (_) => _
    };
    [TEnqueueTypeId] = tEnqueueVariance;
    constructor(pubsubSize, publisherHead, publisherTail, requestedCapacity, strategy, subscriberCount, subscribers) {
      this.pubsubSize = pubsubSize;
      this.publisherHead = publisherHead;
      this.publisherTail = publisherTail;
      this.requestedCapacity = requestedCapacity;
      this.strategy = strategy;
      this.subscriberCount = subscriberCount;
      this.subscribers = subscribers;
    }
    isShutdown = /* @__PURE__ */ effect3((journal) => {
      const currentPublisherTail = unsafeGet9(this.publisherTail, journal);
      return currentPublisherTail === undefined;
    });
    awaitShutdown = /* @__PURE__ */ flatMap22(this.isShutdown, (isShutdown6) => isShutdown6 ? void_9 : retry6);
    capacity() {
      return this.requestedCapacity;
    }
    size = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      const currentPublisherTail = unsafeGet9(this.publisherTail, runtime5.journal);
      if (currentPublisherTail === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      return succeed19(unsafeGet9(this.pubsubSize, runtime5.journal));
    });
    isEmpty = /* @__PURE__ */ map31(this.size, (size22) => size22 === 0);
    isFull = /* @__PURE__ */ map31(this.size, (size22) => size22 === this.capacity());
    offer(value2) {
      return withSTMRuntime((runtime5) => {
        const currentPublisherTail = unsafeGet9(this.publisherTail, runtime5.journal);
        if (currentPublisherTail === undefined) {
          return interruptAs2(runtime5.fiberId);
        }
        const currentSubscriberCount = unsafeGet9(this.subscriberCount, runtime5.journal);
        if (currentSubscriberCount === 0) {
          return succeed19(true);
        }
        const currentPubSubSize = unsafeGet9(this.pubsubSize, runtime5.journal);
        if (currentPubSubSize < this.requestedCapacity) {
          const updatedPublisherTail = new TRefImpl(undefined);
          const updatedNode = makeNode2(value2, currentSubscriberCount, updatedPublisherTail);
          unsafeSet2(currentPublisherTail, updatedNode, runtime5.journal);
          unsafeSet2(this.publisherTail, updatedPublisherTail, runtime5.journal);
          unsafeSet2(this.pubsubSize, currentPubSubSize + 1, runtime5.journal);
          return succeed19(true);
        }
        switch (this.strategy._tag) {
          case OP_BACKPRESSURE_STRATEGY: {
            return retry6;
          }
          case OP_DROPPING_STRATEGY: {
            return succeed19(false);
          }
          case OP_SLIDING_STRATEGY: {
            if (this.requestedCapacity > 0) {
              let currentPublisherHead = unsafeGet9(this.publisherHead, runtime5.journal);
              let loop4 = true;
              while (loop4) {
                const node = unsafeGet9(currentPublisherHead, runtime5.journal);
                if (node === undefined) {
                  return retry6;
                }
                const head10 = node.head;
                const tail5 = node.tail;
                if (head10 !== AbsentValue2) {
                  const updatedNode2 = makeNode2(AbsentValue2, node.subscribers, node.tail);
                  unsafeSet2(currentPublisherHead, updatedNode2, runtime5.journal);
                  unsafeSet2(this.publisherHead, tail5, runtime5.journal);
                  loop4 = false;
                } else {
                  currentPublisherHead = tail5;
                }
              }
            }
            const updatedPublisherTail = new TRefImpl(undefined);
            const updatedNode = makeNode2(value2, currentSubscriberCount, updatedPublisherTail);
            unsafeSet2(currentPublisherTail, updatedNode, runtime5.journal);
            unsafeSet2(this.publisherTail, updatedPublisherTail, runtime5.journal);
            return succeed19(true);
          }
        }
      });
    }
    offerAll(iterable) {
      return map31(forEach18(iterable, (a) => this.offer(a)), every3(identity));
    }
    shutdown = /* @__PURE__ */ effect3((journal) => {
      const currentPublisherTail = unsafeGet9(this.publisherTail, journal);
      if (currentPublisherTail !== undefined) {
        unsafeSet2(this.publisherTail, undefined, journal);
        const currentSubscribers = unsafeGet9(this.subscribers, journal);
        forEach6(currentSubscribers, (subscriber) => {
          unsafeSet2(subscriber, undefined, journal);
        });
        unsafeSet2(this.subscribers, empty10(), journal);
      }
    });
  };
  TPubSubSubscriptionImpl = class TPubSubSubscriptionImpl {
    pubsubSize;
    publisherHead;
    requestedCapacity;
    subscriberHead;
    subscriberCount;
    subscribers;
    [TPubSubTypeId] = TPubSubTypeId;
    [TDequeueTypeId] = tDequeueVariance;
    constructor(pubsubSize, publisherHead, requestedCapacity, subscriberHead, subscriberCount, subscribers) {
      this.pubsubSize = pubsubSize;
      this.publisherHead = publisherHead;
      this.requestedCapacity = requestedCapacity;
      this.subscriberHead = subscriberHead;
      this.subscriberCount = subscriberCount;
      this.subscribers = subscribers;
    }
    isShutdown = /* @__PURE__ */ effect3((journal) => {
      const currentSubscriberHead = unsafeGet9(this.subscriberHead, journal);
      return currentSubscriberHead === undefined;
    });
    awaitShutdown = /* @__PURE__ */ flatMap22(this.isShutdown, (isShutdown6) => isShutdown6 ? void_9 : retry6);
    capacity() {
      return this.requestedCapacity;
    }
    size = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      let currentSubscriberHead = unsafeGet9(this.subscriberHead, runtime5.journal);
      if (currentSubscriberHead === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      let loop4 = true;
      let size22 = 0;
      while (loop4) {
        const node = unsafeGet9(currentSubscriberHead, runtime5.journal);
        if (node === undefined) {
          loop4 = false;
        } else {
          const head10 = node.head;
          const tail5 = node.tail;
          if (head10 !== AbsentValue2) {
            size22 = size22 + 1;
            if (size22 >= Number.MAX_SAFE_INTEGER) {
              loop4 = false;
            }
          }
          currentSubscriberHead = tail5;
        }
      }
      return succeed19(size22);
    });
    isEmpty = /* @__PURE__ */ map31(this.size, (size22) => size22 === 0);
    isFull = /* @__PURE__ */ map31(this.size, (size22) => size22 === this.capacity());
    peek = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      let currentSubscriberHead = unsafeGet9(this.subscriberHead, runtime5.journal);
      if (currentSubscriberHead === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      let value2 = AbsentValue2;
      let loop4 = true;
      while (loop4) {
        const node = unsafeGet9(currentSubscriberHead, runtime5.journal);
        if (node === undefined) {
          return retry6;
        }
        const head10 = node.head;
        const tail5 = node.tail;
        if (head10 !== AbsentValue2) {
          value2 = head10;
          loop4 = false;
        } else {
          currentSubscriberHead = tail5;
        }
      }
      return succeed19(value2);
    });
    peekOption = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      let currentSubscriberHead = unsafeGet9(this.subscriberHead, runtime5.journal);
      if (currentSubscriberHead === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      let value2 = none2();
      let loop4 = true;
      while (loop4) {
        const node = unsafeGet9(currentSubscriberHead, runtime5.journal);
        if (node === undefined) {
          value2 = none2();
          loop4 = false;
        } else {
          const head10 = node.head;
          const tail5 = node.tail;
          if (head10 !== AbsentValue2) {
            value2 = some3(head10);
            loop4 = false;
          } else {
            currentSubscriberHead = tail5;
          }
        }
      }
      return succeed19(value2);
    });
    shutdown = /* @__PURE__ */ effect3((journal) => {
      let currentSubscriberHead = unsafeGet9(this.subscriberHead, journal);
      if (currentSubscriberHead !== undefined) {
        unsafeSet2(this.subscriberHead, undefined, journal);
        let loop4 = true;
        while (loop4) {
          const node = unsafeGet9(currentSubscriberHead, journal);
          if (node === undefined) {
            loop4 = false;
          } else {
            const head10 = node.head;
            const tail5 = node.tail;
            if (head10 !== AbsentValue2) {
              const subscribers = node.subscribers;
              if (subscribers === 1) {
                const size22 = unsafeGet9(this.pubsubSize, journal);
                const updatedNode = makeNode2(AbsentValue2, 0, tail5);
                unsafeSet2(currentSubscriberHead, updatedNode, journal);
                unsafeSet2(this.publisherHead, tail5, journal);
                unsafeSet2(this.pubsubSize, size22 - 1, journal);
              } else {
                const updatedNode = makeNode2(head10, subscribers - 1, tail5);
                unsafeSet2(currentSubscriberHead, updatedNode, journal);
              }
            }
            currentSubscriberHead = tail5;
          }
        }
        const currentSubscriberCount = unsafeGet9(this.subscriberCount, journal);
        unsafeSet2(this.subscriberCount, currentSubscriberCount - 1, journal);
        unsafeSet2(this.subscribers, remove6(unsafeGet9(this.subscribers, journal), this.subscriberHead), journal);
      }
    });
    take = /* @__PURE__ */ withSTMRuntime((runtime5) => {
      let currentSubscriberHead = unsafeGet9(this.subscriberHead, runtime5.journal);
      if (currentSubscriberHead === undefined) {
        return interruptAs2(runtime5.fiberId);
      }
      let value2 = AbsentValue2;
      let loop4 = true;
      while (loop4) {
        const node = unsafeGet9(currentSubscriberHead, runtime5.journal);
        if (node === undefined) {
          return retry6;
        }
        const head10 = node.head;
        const tail5 = node.tail;
        if (head10 !== AbsentValue2) {
          const subscribers = node.subscribers;
          if (subscribers === 1) {
            const size22 = unsafeGet9(this.pubsubSize, runtime5.journal);
            const updatedNode = makeNode2(AbsentValue2, 0, tail5);
            unsafeSet2(currentSubscriberHead, updatedNode, runtime5.journal);
            unsafeSet2(this.publisherHead, tail5, runtime5.journal);
            unsafeSet2(this.pubsubSize, size22 - 1, runtime5.journal);
          } else {
            const updatedNode = makeNode2(head10, subscribers - 1, tail5);
            unsafeSet2(currentSubscriberHead, updatedNode, runtime5.journal);
          }
          unsafeSet2(this.subscriberHead, tail5, runtime5.journal);
          value2 = head10;
          loop4 = false;
        } else {
          currentSubscriberHead = tail5;
        }
      }
      return succeed19(value2);
    });
    takeAll = /* @__PURE__ */ this.takeUpTo(Number.POSITIVE_INFINITY);
    takeUpTo(max13) {
      return withSTMRuntime((runtime5) => {
        let currentSubscriberHead = unsafeGet9(this.subscriberHead, runtime5.journal);
        if (currentSubscriberHead === undefined) {
          return interruptAs2(runtime5.fiberId);
        }
        const builder = [];
        let n = 0;
        while (n !== max13) {
          const node = unsafeGet9(currentSubscriberHead, runtime5.journal);
          if (node === undefined) {
            n = max13;
          } else {
            const head10 = node.head;
            const tail5 = node.tail;
            if (head10 !== AbsentValue2) {
              const subscribers = node.subscribers;
              if (subscribers === 1) {
                const size22 = unsafeGet9(this.pubsubSize, runtime5.journal);
                const updatedNode = makeNode2(AbsentValue2, 0, tail5);
                unsafeSet2(currentSubscriberHead, updatedNode, runtime5.journal);
                unsafeSet2(this.publisherHead, tail5, runtime5.journal);
                unsafeSet2(this.pubsubSize, size22 - 1, runtime5.journal);
              } else {
                const updatedNode = makeNode2(head10, subscribers - 1, tail5);
                unsafeSet2(currentSubscriberHead, updatedNode, runtime5.journal);
              }
              builder.push(head10);
              n = n + 1;
            }
            currentSubscriberHead = tail5;
          }
        }
        unsafeSet2(this.subscriberHead, currentSubscriberHead, runtime5.journal);
        return succeed19(builder);
      });
    }
  };
  publish3 = /* @__PURE__ */ dual(2, (self, value2) => self.offer(value2));
  publishAll3 = /* @__PURE__ */ dual(2, (self, iterable) => self.offerAll(iterable));
});

// node_modules/effect/dist/esm/TPubSub.js
var exports_TPubSub = {};
__export(exports_TPubSub, {
  unbounded: () => unbounded8,
  subscribeScoped: () => subscribeScoped2,
  subscribe: () => subscribe4,
  sliding: () => sliding7,
  size: () => size23,
  shutdown: () => shutdown7,
  publishAll: () => publishAll4,
  publish: () => publish4,
  isShutdown: () => isShutdown7,
  isFull: () => isFull8,
  isEmpty: () => isEmpty21,
  dropping: () => dropping7,
  capacity: () => capacity8,
  bounded: () => bounded8,
  awaitShutdown: () => awaitShutdown7,
  TPubSubTypeId: () => TPubSubTypeId2
});
var TPubSubTypeId2, awaitShutdown7, bounded8, capacity8, dropping7, isEmpty21, isFull8, shutdown7, isShutdown7, publish4, publishAll4, size23, sliding7, subscribe4, subscribeScoped2, unbounded8;
var init_TPubSub = __esm(() => {
  init_tPubSub();
  TPubSubTypeId2 = TPubSubTypeId;
  awaitShutdown7 = awaitShutdown6;
  bounded8 = bounded7;
  capacity8 = capacity7;
  dropping7 = dropping6;
  isEmpty21 = isEmpty20;
  isFull8 = isFull7;
  shutdown7 = shutdown6;
  isShutdown7 = isShutdown6;
  publish4 = publish3;
  publishAll4 = publishAll3;
  size23 = size22;
  sliding7 = sliding6;
  subscribe4 = subscribe3;
  subscribeScoped2 = subscribeScoped;
  unbounded8 = unbounded7;
});

// node_modules/effect/dist/esm/TQueue.js
var exports_TQueue = {};
__export(exports_TQueue, {
  unbounded: () => unbounded9,
  takeUpTo: () => takeUpTo4,
  takeN: () => takeN4,
  takeBetween: () => takeBetween4,
  takeAll: () => takeAll4,
  take: () => take9,
  sliding: () => sliding8,
  size: () => size24,
  shutdown: () => shutdown8,
  seek: () => seek2,
  poll: () => poll8,
  peekOption: () => peekOption2,
  peek: () => peek2,
  offerAll: () => offerAll5,
  offer: () => offer5,
  isTQueue: () => isTQueue2,
  isTEnqueue: () => isTEnqueue2,
  isTDequeue: () => isTDequeue2,
  isShutdown: () => isShutdown8,
  isFull: () => isFull9,
  isEmpty: () => isEmpty22,
  dropping: () => dropping8,
  capacity: () => capacity9,
  bounded: () => bounded9,
  awaitShutdown: () => awaitShutdown8,
  TEnqueueTypeId: () => TEnqueueTypeId2,
  TDequeueTypeId: () => TDequeueTypeId2
});
var TDequeueTypeId2, TEnqueueTypeId2, isTQueue2, isTDequeue2, isTEnqueue2, awaitShutdown8, bounded9, capacity9, dropping8, isEmpty22, isFull9, isShutdown8, offer5, offerAll5, peek2, peekOption2, poll8, seek2, shutdown8, size24, sliding8, take9, takeAll4, takeBetween4, takeN4, takeUpTo4, unbounded9;
var init_TQueue = __esm(() => {
  init_tQueue();
  TDequeueTypeId2 = TDequeueTypeId;
  TEnqueueTypeId2 = TEnqueueTypeId;
  isTQueue2 = isTQueue;
  isTDequeue2 = isTDequeue;
  isTEnqueue2 = isTEnqueue;
  awaitShutdown8 = awaitShutdown5;
  bounded9 = bounded6;
  capacity9 = capacity6;
  dropping8 = dropping5;
  isEmpty22 = isEmpty19;
  isFull9 = isFull6;
  isShutdown8 = isShutdown5;
  offer5 = offer4;
  offerAll5 = offerAll4;
  peek2 = peek;
  peekOption2 = peekOption;
  poll8 = poll7;
  seek2 = seek;
  shutdown8 = shutdown5;
  size24 = size21;
  sliding8 = sliding5;
  take9 = take8;
  takeAll4 = takeAll3;
  takeBetween4 = takeBetween3;
  takeN4 = takeN3;
  takeUpTo4 = takeUpTo3;
  unbounded9 = unbounded6;
});

// node_modules/effect/dist/esm/internal/ringBuffer.js
class RingBuffer {
  capacity;
  array;
  size = 0;
  current = 0;
  constructor(capacity10) {
    this.capacity = capacity10;
    this.array = Array.from({
      length: capacity10
    }, constUndefined);
  }
  head() {
    return fromNullable2(this.array[this.current]);
  }
  lastOrNull() {
    if (this.size === 0) {
      return;
    }
    const index = this.current === 0 ? this.array.length - 1 : this.current - 1;
    return this.array[index] ?? undefined;
  }
  put(value2) {
    this.array[this.current] = value2;
    this.increment();
  }
  dropLast() {
    if (this.size > 0) {
      this.decrement();
      this.array[this.current] = undefined;
    }
  }
  toChunk() {
    const begin = this.current - this.size;
    const newArray = begin < 0 ? [...this.array.slice(this.capacity + begin, this.capacity), ...this.array.slice(0, this.current)] : this.array.slice(begin, this.current);
    return fromIterable3(newArray);
  }
  increment() {
    if (this.size < this.capacity) {
      this.size += 1;
    }
    this.current = (this.current + 1) % this.capacity;
  }
  decrement() {
    this.size -= 1;
    if (this.current > 0) {
      this.current -= 1;
    } else {
      this.current = this.capacity - 1;
    }
  }
}
var init_ringBuffer = __esm(() => {
  init_Chunk();
  init_Function();
  init_Option();
});

// node_modules/effect/dist/esm/internal/stream/debounceState.js
var OP_NOT_STARTED = "NotStarted", OP_PREVIOUS = "Previous", OP_CURRENT = "Current", notStarted, previous = (fiber) => ({
  _tag: OP_PREVIOUS,
  fiber
}), current = (fiber) => ({
  _tag: OP_CURRENT,
  fiber
});
var init_debounceState = __esm(() => {
  notStarted = {
    _tag: OP_NOT_STARTED
  };
});

// node_modules/effect/dist/esm/internal/stream/emit.js
var make70 = (emit) => {
  const ops = {
    chunk(as13) {
      return this(succeed13(as13));
    },
    die(defect) {
      return this(die8(defect));
    },
    dieMessage(message) {
      return this(dieMessage2(message));
    },
    done(exit4) {
      return this(suspend4(() => mapBoth4(exit4, {
        onFailure: some3,
        onSuccess: of3
      })));
    },
    end() {
      return this(fail12(none2()));
    },
    fail(e) {
      return this(fail12(some3(e)));
    },
    fromEffect(effect4) {
      return this(mapBoth6(effect4, {
        onFailure: some3,
        onSuccess: of3
      }));
    },
    fromEffectChunk(effect4) {
      return this(pipe(effect4, mapError5(some3)));
    },
    halt(cause3) {
      return this(failCause10(pipe(cause3, map22(some3))));
    },
    single(value2) {
      return this(succeed13(of3(value2)));
    }
  };
  return Object.assign(emit, ops);
}, makePush = (queue, scheduler2) => {
  let finished = false;
  let buffer2 = [];
  let running4 = false;
  function array6(items) {
    if (finished)
      return false;
    if (items.length <= 50000) {
      buffer2.push.apply(buffer2, items);
    } else {
      for (let i2 = 0;i2 < items.length; i2++) {
        buffer2.push(items[0]);
      }
    }
    if (!running4) {
      running4 = true;
      scheduler2.scheduleTask(flush, 0);
    }
    return true;
  }
  function flush() {
    running4 = false;
    if (buffer2.length > 0) {
      queue.unsafeOffer(buffer2);
      buffer2 = [];
    }
  }
  function done11(exit4) {
    if (finished)
      return;
    finished = true;
    if (exit4._tag === "Success") {
      buffer2.push(exit4.value);
    }
    flush();
    queue.unsafeOffer(exit4._tag === "Success" ? void_4 : exit4);
  }
  return {
    single(value2) {
      if (finished)
        return false;
      buffer2.push(value2);
      if (!running4) {
        running4 = true;
        scheduler2.scheduleTask(flush, 0);
      }
      return true;
    },
    array: array6,
    chunk(chunk3) {
      return array6(toReadonlyArray(chunk3));
    },
    done: done11,
    end() {
      if (finished)
        return;
      finished = true;
      flush();
      queue.unsafeOffer(void_4);
    },
    halt(cause3) {
      return done11(failCause3(cause3));
    },
    fail(error3) {
      return done11(fail4(error3));
    },
    die(defect) {
      return done11(die4(defect));
    },
    dieMessage(message) {
      return done11(die4(new Error(message)));
    }
  };
};
var init_emit = __esm(() => {
  init_Cause();
  init_Chunk();
  init_Effect();
  init_Exit();
  init_Function();
  init_Option();
});

// node_modules/effect/dist/esm/internal/stream/handoff.js
var HandoffTypeId, OP_HANDOFF_STATE_EMPTY = "Empty", OP_HANDOFF_STATE_FULL = "Full", handoffStateEmpty = (notifyConsumer) => ({
  _tag: OP_HANDOFF_STATE_EMPTY,
  notifyConsumer
}), handoffStateFull = (value2, notifyProducer) => ({
  _tag: OP_HANDOFF_STATE_FULL,
  value: value2,
  notifyProducer
}), handoffStateMatch = (onEmpty, onFull) => {
  return (self) => {
    switch (self._tag) {
      case OP_HANDOFF_STATE_EMPTY: {
        return onEmpty(self.notifyConsumer);
      }
      case OP_HANDOFF_STATE_FULL: {
        return onFull(self.value, self.notifyProducer);
      }
    }
  };
}, handoffVariance, make71 = () => pipe(make24(), flatMap18((deferred) => make37(handoffStateEmpty(deferred))), map26((ref) => ({
  [HandoffTypeId]: handoffVariance,
  ref
}))), offer6, take10 = (self) => flatMap18(make24(), (deferred) => flatten13(modify8(self.ref, (state) => pipe(state, handoffStateMatch((notifyConsumer) => [flatMap18(_await(notifyConsumer), () => take10(self)), state], (value2, notifyProducer) => [as8(succeed2(notifyProducer, undefined), value2), handoffStateEmpty(deferred)])))));
var init_handoff = __esm(() => {
  init_Deferred();
  init_Effect();
  init_Function();
  init_Option();
  init_Ref();
  HandoffTypeId = /* @__PURE__ */ Symbol.for("effect/Stream/Handoff");
  handoffVariance = {
    _A: (_) => _
  };
  offer6 = /* @__PURE__ */ dual(2, (self, value2) => {
    return flatMap18(make24(), (deferred) => flatten13(modify8(self.ref, (state) => pipe(state, handoffStateMatch((notifyConsumer) => [zipRight7(succeed2(notifyConsumer, undefined), _await(deferred)), handoffStateFull(value2, deferred)], (_, notifyProducer) => [flatMap18(_await(notifyProducer), () => pipe(self, offer6(value2))), state])))));
  });
});

// node_modules/effect/dist/esm/internal/stream/handoffSignal.js
var OP_EMIT4 = "Emit", OP_HALT = "Halt", OP_END = "End", emit = (elements) => ({
  _tag: OP_EMIT4,
  elements
}), halt = (cause3) => ({
  _tag: OP_HALT,
  cause: cause3
}), end3 = (reason) => ({
  _tag: OP_END,
  reason
});

// node_modules/effect/dist/esm/internal/take.js
var TakeSymbolKey = "effect/Take", TakeTypeId, takeVariance, TakeImpl, chunk3 = (chunk4) => new TakeImpl(succeed3(chunk4)), die13 = (defect) => new TakeImpl(die4(defect)), dieMessage5 = (message) => new TakeImpl(die4(new RuntimeException2(message))), done11 = (self) => suspend4(() => self.exit), end4, fail18 = (error3) => new TakeImpl(fail4(some3(error3))), failCause14 = (cause3) => new TakeImpl(failCause3(pipe(cause3, map22(some3)))), fromEffect8 = (effect4) => matchCause4(effect4, {
  onFailure: failCause14,
  onSuccess: of7
}), fromExit = (exit4) => new TakeImpl(pipe(exit4, mapBoth4({
  onFailure: some3,
  onSuccess: of3
}))), fromPull = (pull) => matchCause4(pull, {
  onFailure: (cause3) => match2(flipCauseOption2(cause3), {
    onNone: () => end4,
    onSome: failCause14
  }),
  onSuccess: chunk3
}), isDone7 = (self) => match7(self.exit, {
  onFailure: (cause3) => isNone2(flipCauseOption2(cause3)),
  onSuccess: constFalse
}), isFailure7 = (self) => match7(self.exit, {
  onFailure: (cause3) => isSome2(flipCauseOption2(cause3)),
  onSuccess: constFalse
}), isSuccess6 = (self) => match7(self.exit, {
  onFailure: constFalse,
  onSuccess: constTrue
}), make72 = (exit4) => new TakeImpl(exit4), match32, matchEffect5, map32, of7 = (value2) => new TakeImpl(succeed3(of3(value2))), tap8;
var init_take = __esm(() => {
  init_Cause();
  init_Chunk();
  init_Effect();
  init_Exit();
  init_Function();
  init_Option();
  TakeTypeId = /* @__PURE__ */ Symbol.for(TakeSymbolKey);
  takeVariance = {
    _A: (_) => _,
    _E: (_) => _
  };
  TakeImpl = class TakeImpl {
    exit;
    [TakeTypeId] = takeVariance;
    constructor(exit4) {
      this.exit = exit4;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  end4 = /* @__PURE__ */ new TakeImpl(/* @__PURE__ */ fail4(/* @__PURE__ */ none2()));
  match32 = /* @__PURE__ */ dual(2, (self, {
    onEnd,
    onFailure,
    onSuccess
  }) => match7(self.exit, {
    onFailure: (cause3) => match2(flipCauseOption2(cause3), {
      onNone: onEnd,
      onSome: onFailure
    }),
    onSuccess
  }));
  matchEffect5 = /* @__PURE__ */ dual(2, (self, {
    onEnd,
    onFailure,
    onSuccess
  }) => matchEffect2(self.exit, {
    onFailure: (cause3) => match2(flipCauseOption2(cause3), {
      onNone: () => onEnd,
      onSome: onFailure
    }),
    onSuccess
  }));
  map32 = /* @__PURE__ */ dual(2, (self, f) => new TakeImpl(pipe(self.exit, map15(map7(f)))));
  tap8 = /* @__PURE__ */ dual(2, (self, f) => pipe(self.exit, forEachEffect(f), asVoid6));
});

// node_modules/effect/dist/esm/internal/stream/pull.js
var end5 = () => fail12(none2()), failCause15 = (cause3) => mapError5(failCause10(cause3), some3);
var init_pull = __esm(() => {
  init_Chunk();
  init_Effect();
  init_Option();
  init_Queue();
  init_take();
});

// node_modules/effect/dist/esm/internal/stream/sinkEndReason.js
var OP_SCHEDULE_END = "ScheduleEnd", OP_UPSTREAM_END = "UpstreamEnd", ScheduleEnd, UpstreamEnd;
var init_sinkEndReason = __esm(() => {
  ScheduleEnd = {
    _tag: OP_SCHEDULE_END
  };
  UpstreamEnd = {
    _tag: OP_UPSTREAM_END
  };
});

// node_modules/effect/dist/esm/internal/stream/zipAllState.js
var OP_DRAIN_LEFT = "DrainLeft", OP_DRAIN_RIGHT = "DrainRight", OP_PULL_BOTH = "PullBoth", OP_PULL_LEFT = "PullLeft", OP_PULL_RIGHT = "PullRight", DrainLeft, DrainRight, PullBoth, PullLeft = (rightChunk) => ({
  _tag: OP_PULL_LEFT,
  rightChunk
}), PullRight = (leftChunk) => ({
  _tag: OP_PULL_RIGHT,
  leftChunk
});
var init_zipAllState = __esm(() => {
  DrainLeft = {
    _tag: OP_DRAIN_LEFT
  };
  DrainRight = {
    _tag: OP_DRAIN_RIGHT
  };
  PullBoth = {
    _tag: OP_PULL_BOTH
  };
});

// node_modules/effect/dist/esm/internal/stream/zipChunksState.js
var OP_PULL_BOTH2 = "PullBoth", OP_PULL_LEFT2 = "PullLet", OP_PULL_RIGHT2 = "PullRight", PullBoth2, PullLeft2 = (rightChunk) => ({
  _tag: OP_PULL_LEFT2,
  rightChunk
}), PullRight2 = (leftChunk) => ({
  _tag: OP_PULL_RIGHT2,
  leftChunk
});
var init_zipChunksState = __esm(() => {
  PullBoth2 = {
    _tag: OP_PULL_BOTH2
  };
});

// node_modules/effect/dist/esm/internal/stream.js
class StreamRechunker {
  n;
  builder = [];
  pos = 0;
  constructor(n) {
    this.n = n;
  }
  isEmpty() {
    return this.pos === 0;
  }
  write(elem) {
    this.builder.push(elem);
    this.pos += 1;
    if (this.pos === this.n) {
      const result2 = unsafeFromArray(this.builder);
      this.builder = [];
      this.pos = 0;
      return result2;
    }
    return;
  }
  emitIfNotEmpty() {
    if (this.pos !== 0) {
      return write2(unsafeFromArray(this.builder));
    }
    return void_8;
  }
}
var StreamSymbolKey = "effect/Stream", StreamTypeId3, streamVariance, StreamImpl, isStream = (u) => hasProperty(u, StreamTypeId3) || isEffect2(u), DefaultChunkSize = 4096, accumulate = (self) => chunks(accumulateChunks(self)), accumulateChunks = (self) => {
  const accumulator = (s) => readWith({
    onInput: (input) => {
      const next4 = appendAll3(s, input);
      return flatMap20(write2(next4), () => accumulator(next4));
    },
    onFailure: fail14,
    onDone: () => void_8
  });
  return new StreamImpl(pipeTo(toChannel2(self), accumulator(empty7())));
}, acquireRelease4 = (acquire, release) => scoped7(acquireRelease3(acquire, release)), aggregate, aggregateWithin, aggregateWithinEither, as13, queueFromBufferOptions = (bufferSize) => {
  if (bufferSize === "unbounded") {
    return unbounded5();
  } else if (typeof bufferSize === "number" || bufferSize === undefined) {
    return bounded5(bufferSize ?? 16);
  }
  switch (bufferSize.strategy) {
    case "dropping":
      return dropping4(bufferSize.bufferSize ?? 16);
    case "sliding":
      return sliding4(bufferSize.bufferSize ?? 16);
    default:
      return bounded5(bufferSize.bufferSize ?? 16);
  }
}, _async = (register2, bufferSize) => acquireRelease3(queueFromBufferOptions(bufferSize), (queue) => shutdown4(queue)).pipe(flatMap18((output) => runtime4().pipe(flatMap18((runtime5) => sync8(() => {
  const runPromiseExit4 = runPromiseExit3(runtime5);
  const canceler = register2(make70((resume2) => fromPull(resume2).pipe(flatMap18((take11) => offer3(output, take11)), asVoid6, runPromiseExit4).then((exit4) => {
    if (isFailure2(exit4)) {
      if (!isInterrupted3(exit4.cause)) {
        throw squash(exit4.cause);
      }
    }
  })));
  return canceler;
})), map26((value2) => {
  const loop4 = take6(output).pipe(flatMap18((take11) => done11(take11)), match20({
    onFailure: (maybeError) => fromEffect5(shutdown4(output)).pipe(zipRight8(match2(maybeError, {
      onNone: () => void_8,
      onSome: (error3) => fail14(error3)
    }))),
    onSuccess: (chunk4) => write2(chunk4).pipe(flatMap20(() => loop4))
  }), unwrap2);
  return fromChannel2(loop4).pipe(ensuring9(value2 ?? _void));
}))), unwrapScoped5), asyncEffect3 = (register2, bufferSize) => pipe(acquireRelease3(queueFromBufferOptions(bufferSize), (queue) => shutdown4(queue)), flatMap18((output) => pipe(runtime4(), flatMap18((runtime5) => pipe(register2(make70((k) => pipe(fromPull(k), flatMap18((take11) => offer3(output, take11)), asVoid6, runPromiseExit3(runtime5)).then((exit4) => {
  if (isFailure2(exit4)) {
    if (!isInterrupted3(exit4.cause)) {
      throw squash(exit4.cause);
    }
  }
}))), map26(() => {
  const loop4 = pipe(take6(output), flatMap18(done11), match20({
    onFailure: (maybeError) => pipe(fromEffect5(shutdown4(output)), zipRight8(match2(maybeError, {
      onNone: () => void_8,
      onSome: fail14
    }))),
    onSuccess: (chunk4) => pipe(write2(chunk4), flatMap20(() => loop4))
  }), unwrap2);
  return loop4;
}))))), unwrapScoped3, fromChannel2), queueFromBufferOptionsPush = (options) => {
  if (options?.bufferSize === "unbounded" || options?.bufferSize === undefined && options?.strategy === undefined) {
    return unbounded5();
  }
  switch (options?.strategy) {
    case "sliding":
      return sliding4(options.bufferSize ?? 16);
    default:
      return dropping4(options?.bufferSize ?? 16);
  }
}, asyncPush = (register2, options) => acquireRelease3(queueFromBufferOptionsPush(options), shutdown4).pipe(tap5((queue) => getWith(currentScheduler2, (scheduler2) => register2(makePush(queue, scheduler2)))), map26((queue) => {
  const loop4 = flatMap20(take6(queue), (item) => isExit(item) ? isSuccess(item) ? void_8 : failCause12(item.cause) : zipRight8(write2(unsafeFromArray(item)), loop4));
  return loop4;
}), unwrapScoped3, fromChannel2), asyncScoped = (register2, bufferSize) => pipe(acquireRelease3(queueFromBufferOptions(bufferSize), (queue) => shutdown4(queue)), flatMap18((output) => pipe(runtime4(), flatMap18((runtime5) => pipe(register2(make70((k) => pipe(fromPull(k), flatMap18((take11) => offer3(output, take11)), asVoid6, runPromiseExit3(runtime5)).then((exit4) => {
  if (isFailure2(exit4)) {
    if (!isInterrupted3(exit4.cause)) {
      throw squash(exit4.cause);
    }
  }
}))), zipRight7(make37(false)), flatMap18((ref) => pipe(get14(ref), map26((isDone8) => isDone8 ? end5() : pipe(take6(output), flatMap18(done11), onError3(() => pipe(set7(ref, true), zipRight7(shutdown4(output)))))))))))), scoped7, flatMap23(repeatEffectChunkOption)), branchAfter, broadcast, broadcastDynamic, share, broadcastedQueues, broadcastedQueuesDynamic, buffer2, bufferChunks, bufferChunksDropping, bufferChunksSliding, bufferDropping, bufferSliding, bufferUnbounded = (self) => {
  const queue = toQueue2(self, {
    strategy: "unbounded"
  });
  return new StreamImpl(unwrapScoped3(map26(queue, (queue2) => {
    const process3 = pipe(fromEffect5(take6(queue2)), flatMap20(match32({
      onEnd: () => void_8,
      onFailure: failCause12,
      onSuccess: (value2) => flatMap20(write2(value2), () => process3)
    })));
    return process3;
  })));
}, bufferSignal = (scoped7, bufferChannel) => {
  const producer = (queue, ref) => {
    const terminate = (take11) => pipe(get14(ref), tap5(_await), zipRight7(make24()), flatMap18((deferred) => pipe(offer3(queue, [take11, deferred]), zipRight7(set7(ref, deferred)), zipRight7(_await(deferred)))), asVoid6, fromEffect5);
    return readWithCause({
      onInput: (input) => pipe(make24(), flatMap18((deferred) => pipe(offer3(queue, [chunk3(input), deferred]), flatMap18((added) => pipe(set7(ref, deferred), when3(() => added))))), asVoid6, fromEffect5, flatMap20(() => producer(queue, ref))),
      onFailure: (error3) => terminate(failCause14(error3)),
      onDone: () => terminate(end4)
    });
  };
  const consumer = (queue) => {
    const process3 = pipe(fromEffect5(take6(queue)), flatMap20(([take11, deferred]) => zipRight8(fromEffect5(succeed2(deferred, undefined)), match32(take11, {
      onEnd: () => void_8,
      onFailure: failCause12,
      onSuccess: (value2) => pipe(write2(value2), flatMap20(() => process3))
    }))));
    return process3;
  };
  return unwrapScoped3(pipe(scoped7, flatMap18((queue) => pipe(make24(), tap5((start3) => succeed2(start3, undefined)), flatMap18((start3) => pipe(make37(start3), flatMap18((ref) => pipe(bufferChannel, pipeTo(producer(queue, ref)), runScoped, forkScoped3)), as8(consumer(queue))))))));
}, catchAll8, catchAllCause7, catchSome4, catchSomeCause3, catchTag5, catchTags4, changes = (self) => pipe(self, changesWith((x2, y) => equals(y)(x2))), changesWith, changesWithEffect, chunks = (self) => pipe(self, mapChunks(of3)), chunksWith, unsome2 = (effect4) => catchAll4(asSome3(effect4), (o) => o._tag === "None" ? succeedNone3 : fail12(o.value)), combine16, combineChunks, concat3, concatAll2 = (streams) => suspend10(() => pipe(streams, reduce4(empty43, (x2, y) => concat3(y)(x2)))), cross, crossLeft, crossRight, crossWith, debounce, die14 = (defect) => fromEffect9(die8(defect)), dieSync8 = (evaluate2) => fromEffect9(dieSync4(evaluate2)), dieMessage6 = (message) => fromEffect9(dieMessage2(message)), distributedWith, distributedWithDynamicId, newDistributedWithDynamicId = () => {
  const current2 = distributedWithDynamicId.ref;
  distributedWithDynamicId.ref = current2 + 1;
  return current2;
}, distributedWithDynamic, distributedWithDynamicCallback, drain3 = (self) => new StreamImpl(drain(toChannel2(self))), drainFork, drop6, dropRight3, dropUntil4, dropUntilEffect2, dropWhile6, dropWhileEffect2, either9 = (self) => pipe(self, map33(right2), catchAll8((error3) => make73(left2(error3)))), empty43, ensuring9, ensuringWith3, context10 = () => fromEffect9(context5()), contextWith6 = (f) => pipe(context10(), map33(f)), contextWithEffect5 = (f) => pipe(context10(), mapEffectSequential(f)), contextWithStream = (f) => pipe(context10(), flatMap23(f)), execute = (effect4) => drain3(fromEffect9(effect4)), fail19 = (error3) => fromEffectOption(fail12(some3(error3))), failSync10 = (evaluate2) => fromEffectOption(failSync5(() => some3(evaluate2()))), failCause16 = (cause3) => fromEffect9(failCause10(cause3)), failCauseSync9 = (evaluate2) => fromEffect9(failCauseSync5(evaluate2)), filter18, filterEffect, filterMap12, filterMapEffect, filterMapWhile4, filterMapWhileEffect, finalizer = (finalizer2) => acquireRelease4(_void, () => finalizer2), find3, findEffect2, flatMap23, matchConcurrency = (concurrency, sequential5, bounded10) => {
  switch (concurrency) {
    case undefined:
      return sequential5();
    case "unbounded":
      return bounded10(Number.MAX_SAFE_INTEGER);
    default:
      return concurrency > 1 ? bounded10(concurrency) : sequential5();
  }
}, flatMapParSwitchBuffer, flatten17, flattenChunks = (self) => {
  const flatten18 = readWithCause({
    onInput: (chunks2) => flatMap20(writeChunk(chunks2), () => flatten18),
    onFailure: failCause12,
    onDone: () => void_8
  });
  return new StreamImpl(pipe(toChannel2(self), pipeTo(flatten18)));
}, flattenEffect, flattenExitOption = (self) => {
  const processChunk = (chunk4, cont) => {
    const [toEmit, rest] = pipe(chunk4, splitWhere2((exit4) => !isSuccess(exit4)));
    const next4 = pipe(head3(rest), match2({
      onNone: () => cont,
      onSome: match7({
        onFailure: (cause3) => match2(flipCauseOption2(cause3), {
          onNone: () => void_8,
          onSome: failCause12
        }),
        onSuccess: () => void_8
      })
    }));
    return pipe(write2(pipe(toEmit, filterMap5((exit4) => isSuccess(exit4) ? some3(exit4.value) : none2()))), flatMap20(() => next4));
  };
  const process3 = readWithCause({
    onInput: (chunk4) => processChunk(chunk4, process3),
    onFailure: (cause3) => failCause12(cause3),
    onDone: () => void_8
  });
  return new StreamImpl(pipe(toChannel2(self), pipeTo(process3)));
}, flattenIterables = (self) => pipe(self, map33(fromIterable3), flattenChunks), flattenTake = (self) => flattenChunks(flattenExitOption(pipe(self, map33((take11) => take11.exit)))), forever6 = (self) => new StreamImpl(repeated(toChannel2(self))), fromAsyncIterable = (iterable, onError4) => pipe(acquireRelease3(sync8(() => iterable[Symbol.asyncIterator]()), (iterator) => iterator.return ? promise3(async () => iterator.return()) : _void), map26((iterator) => repeatEffectOption(pipe(tryPromise3({
  try: async () => iterator.next(),
  catch: (reason) => some3(onError4(reason))
}), flatMap18((result2) => result2.done ? fail12(none2()) : succeed13(result2.value))))), unwrapScoped5), fromChannel2 = (channel) => new StreamImpl(channel), toChannel2 = (stream2) => {
  if ("channel" in stream2) {
    return stream2.channel;
  } else if (isEffect2(stream2)) {
    return toChannel2(fromEffect9(stream2));
  } else {
    throw new TypeError(`Expected a Stream.`);
  }
}, fromChunk = (chunk4) => new StreamImpl(isEmpty2(chunk4) ? void_8 : write2(chunk4)), fromChunkPubSub = (pubsub, options) => {
  if (options?.scoped) {
    const effect4 = map26(subscribe2(pubsub), fromChunkQueue);
    return options.shutdown ? map26(effect4, ensuring9(shutdown3(pubsub))) : effect4;
  }
  const stream2 = flatMap23(scoped7(subscribe2(pubsub)), fromChunkQueue);
  return options?.shutdown ? ensuring9(stream2, shutdown3(pubsub)) : stream2;
}, fromChunkQueue = (queue, options) => pipe(take6(queue), catchAllCause4((cause3) => pipe(isShutdown4(queue), flatMap18((isShutdown9) => isShutdown9 && isInterrupted3(cause3) ? end5() : failCause15(cause3)))), repeatEffectChunkOption, options?.shutdown ? ensuring9(shutdown4(queue)) : identity), fromChunks = (...chunks2) => pipe(fromIterable17(chunks2), flatMap23(fromChunk)), fromEffect9 = (effect4) => pipe(effect4, mapError5(some3), fromEffectOption), fromEffectOption = (effect4) => new StreamImpl(unwrap2(match20(effect4, {
  onFailure: match2({
    onNone: () => void_8,
    onSome: fail14
  }),
  onSuccess: (a) => write2(of3(a))
}))), fromPubSub3 = (pubsub, options) => {
  const maxChunkSize = options?.maxChunkSize ?? DefaultChunkSize;
  if (options?.scoped) {
    const effect4 = map26(subscribe2(pubsub), (queue) => fromQueue3(queue, {
      maxChunkSize,
      shutdown: true
    }));
    return options.shutdown ? map26(effect4, ensuring9(shutdown3(pubsub))) : effect4;
  }
  const stream2 = flatMap23(scoped7(subscribe2(pubsub)), (queue) => fromQueue3(queue, {
    maxChunkSize
  }));
  return options?.shutdown ? ensuring9(stream2, shutdown3(pubsub)) : stream2;
}, fromTPubSub = (pubsub) => {
  return unwrapScoped5(map26(subscribeScoped2(pubsub), (queue) => fromTQueue(queue)));
}, fromIterable17 = (iterable) => suspend10(() => isChunk(iterable) ? fromChunk(iterable) : fromIteratorSucceed(iterable[Symbol.iterator]())), fromIterableEffect = (effect4) => pipe(effect4, map26(fromIterable17), unwrap4), fromIteratorSucceed = (iterator, maxChunkSize = DefaultChunkSize) => {
  return pipe(sync8(() => {
    let builder = [];
    const loop4 = (iterator2) => pipe(sync8(() => {
      let next4 = iterator2.next();
      if (maxChunkSize === 1) {
        if (next4.done) {
          return void_8;
        }
        return pipe(write2(of3(next4.value)), flatMap20(() => loop4(iterator2)));
      }
      builder = [];
      let count5 = 0;
      while (next4.done === false) {
        builder.push(next4.value);
        count5 = count5 + 1;
        if (count5 >= maxChunkSize) {
          break;
        }
        next4 = iterator2.next();
      }
      if (count5 > 0) {
        return pipe(write2(unsafeFromArray(builder)), flatMap20(() => loop4(iterator2)));
      }
      return void_8;
    }), unwrap2);
    return new StreamImpl(loop4(iterator));
  }), unwrap4);
}, fromPull2 = (effect4) => pipe(effect4, map26(repeatEffectChunkOption), unwrapScoped5), fromQueue3 = (queue, options) => pipe(takeBetween2(queue, 1, options?.maxChunkSize ?? DefaultChunkSize), catchAllCause4((cause3) => pipe(isShutdown4(queue), flatMap18((isShutdown9) => isShutdown9 && isInterrupted3(cause3) ? end5() : failCause15(cause3)))), repeatEffectChunkOption, options?.shutdown ? ensuring9(shutdown4(queue)) : identity), fromTQueue = (queue) => pipe(take9(queue), map26(of3), catchAllCause4((cause3) => pipe(isShutdown8(queue), flatMap18((isShutdown9) => isShutdown9 && isInterrupted3(cause3) ? end5() : failCause15(cause3)))), repeatEffectChunkOption), fromSchedule = (schedule2) => pipe(driver2(schedule2), map26((driver3) => repeatEffectOption(driver3.next(undefined))), unwrap4), fromReadableStream = (...args2) => {
  const evaluate2 = args2.length === 1 ? args2[0].evaluate : args2[0];
  const onError4 = args2.length === 1 ? args2[0].onError : args2[1];
  const releaseLockOnEnd = args2.length === 1 ? args2[0].releaseLockOnEnd === true : false;
  return unwrapScoped5(map26(acquireRelease3(sync8(() => evaluate2().getReader()), (reader) => releaseLockOnEnd ? sync8(() => reader.releaseLock()) : promise3(() => reader.cancel())), (reader) => repeatEffectOption(flatMap18(tryPromise3({
    try: () => reader.read(),
    catch: (reason) => some3(onError4(reason))
  }), ({
    done: done12,
    value: value2
  }) => done12 ? fail12(none2()) : succeed13(value2)))));
}, fromReadableStreamByob = (...args2) => {
  const evaluate2 = args2.length === 1 ? args2[0].evaluate : args2[0];
  const onError4 = args2.length === 1 ? args2[0].onError : args2[1];
  const allocSize = (args2.length === 1 ? args2[0].bufferSize : args2[2]) ?? 4096;
  const releaseLockOnEnd = args2.length === 1 ? args2[0].releaseLockOnEnd === true : false;
  return unwrapScoped5(map26(acquireRelease3(sync8(() => evaluate2().getReader({
    mode: "byob"
  })), (reader) => releaseLockOnEnd ? sync8(() => reader.releaseLock()) : promise3(() => reader.cancel())), (reader) => catchAll8(forever6(readChunkStreamByobReader(reader, onError4, allocSize)), (error3) => error3 === EOF ? empty43 : fail19(error3))));
}, EOF, readChunkStreamByobReader = (reader, onError4, size25) => {
  const buffer3 = new ArrayBuffer(size25);
  return paginateEffect(0, (offset) => flatMap18(tryPromise3({
    try: () => reader.read(new Uint8Array(buffer3, offset, buffer3.byteLength - offset)),
    catch: (reason) => onError4(reason)
  }), ({
    done: done12,
    value: value2
  }) => {
    if (done12) {
      return fail12(EOF);
    }
    const newOffset = offset + value2.byteLength;
    return succeed13([value2, newOffset >= buffer3.byteLength ? none2() : some3(newOffset)]);
  }));
}, groupAdjacentBy, grouped, groupedWithin, haltWhen, haltAfter, haltWhenDeferred, identityStream = () => new StreamImpl(identityChannel()), interleave, interleaveWith, intersperse3, intersperseAffixes, interruptAfter2, interruptWhen2, interruptWhenDeferred2, iterate4 = (value2, next4) => unfold5(value2, (a) => some3([a, next4(a)])), make73 = (...as14) => fromIterable17(as14), map33, mapAccum5, mapAccumEffect, mapBoth9, mapChunks, mapChunksEffect, mapConcat, mapConcatChunk, mapConcatChunkEffect, mapConcatEffect, mapEffectSequential, mapEffectPar, mapError10, mapErrorCause6, merge10, mergeAll9, mergeWithTag, mergeEither, mergeLeft, mergeRight, mergeWith3, mkString2 = (self) => run4(self, mkString), never8, onEnd, onError4, onDone, onStart, orDie8 = (self) => pipe(self, orDieWith5(identity)), orDieWith5, orElse13, orElseEither7, orElseFail4, orElseIfEmpty, orElseIfEmptyChunk, orElseIfEmptyStream, orElseSucceed5, paginate = (s, f) => paginateChunk(s, (s2) => {
  const page = f(s2);
  return [of3(page[0]), page[1]];
}), paginateChunk = (s, f) => {
  const loop4 = (s2) => {
    const page = f(s2);
    return match2(page[1], {
      onNone: () => zipRight8(write2(page[0]), void_8),
      onSome: (s3) => flatMap20(write2(page[0]), () => loop4(s3))
    });
  };
  return new StreamImpl(suspend6(() => loop4(s)));
}, paginateChunkEffect = (s, f) => {
  const loop4 = (s2) => unwrap2(map26(f(s2), ([chunk4, option6]) => match2(option6, {
    onNone: () => zipRight8(write2(chunk4), void_8),
    onSome: (s3) => flatMap20(write2(chunk4), () => loop4(s3))
  })));
  return new StreamImpl(suspend6(() => loop4(s)));
}, paginateEffect = (s, f) => paginateChunkEffect(s, (s2) => pipe(f(s2), map26(([a, s3]) => [of3(a), s3]))), peel, partition11, partitionEither, pipeThrough, pipeThroughChannel, pipeThroughChannelOrFail, prepend6, provideContext8, provideLayer2, provideService10, provideServiceEffect4, provideServiceStream, mapInputContext7, provideSomeLayer3, range4 = (min10, max13, chunkSize = DefaultChunkSize) => suspend10(() => {
  if (min10 > max13) {
    return empty43;
  }
  const go2 = (min11, max14, chunkSize2) => {
    const remaining = max14 - min11 + 1;
    if (remaining > chunkSize2) {
      return pipe(write2(range3(min11, min11 + chunkSize2 - 1)), flatMap20(() => go2(min11 + chunkSize2, max14, chunkSize2)));
    }
    return write2(range3(min11, min11 + remaining - 1));
  };
  return new StreamImpl(go2(min10, max13, chunkSize));
}), race5, raceAll4 = (...streams) => make24().pipe(map26((halt2) => {
  let winner = null;
  return mergeAll9(streams.map((stream2, index) => stream2.pipe(takeWhile6(() => {
    if (winner === null) {
      winner = index;
      unsafeDone(halt2, void_4);
      return true;
    }
    return winner === index;
  }), interruptWhen2(_await(halt2).pipe(flatMap18(() => winner === index ? never5 : _void))))), {
    concurrency: streams.length
  });
}), unwrap4), rechunk, rechunkProcess = (rechunker, target) => readWithCause({
  onInput: (chunk4) => {
    if (chunk4.length === target && rechunker.isEmpty()) {
      return flatMap20(write2(chunk4), () => rechunkProcess(rechunker, target));
    }
    if (chunk4.length > 0) {
      const chunks2 = [];
      let result2 = undefined;
      let index = 0;
      while (index < chunk4.length) {
        while (index < chunk4.length && result2 === undefined) {
          result2 = rechunker.write(pipe(chunk4, unsafeGet4(index)));
          index = index + 1;
        }
        if (result2 !== undefined) {
          chunks2.push(result2);
          result2 = undefined;
        }
      }
      return flatMap20(writeAll(...chunks2), () => rechunkProcess(rechunker, target));
    }
    return suspend6(() => rechunkProcess(rechunker, target));
  },
  onFailure: (cause3) => zipRight8(rechunker.emitIfNotEmpty(), failCause12(cause3)),
  onDone: () => rechunker.emitIfNotEmpty()
}), refineOrDie3, refineOrDieWith3, repeat4, repeatEffect = (effect4) => repeatEffectOption(pipe(effect4, mapError5(some3))), repeatEffectChunk = (effect4) => repeatEffectChunkOption(pipe(effect4, mapError5(some3))), repeatEffectChunkOption = (effect4) => unfoldChunkEffect(effect4, (effect5) => pipe(map26(effect5, (chunk4) => some3([chunk4, effect5])), catchAll4(match2({
  onNone: () => succeed13(none2()),
  onSome: fail12
})))), repeatEffectOption = (effect4) => repeatEffectChunkOption(pipe(effect4, map26(of3))), repeatEither, repeatElements, repeatElementsWith, repeatValue = (value2) => new StreamImpl(repeated(write2(of3(value2)))), repeatWith, repeatWithSchedule = (value2, schedule2) => repeatEffectWithSchedule(succeed13(value2), schedule2), repeatEffectWithSchedule = (effect4, schedule2) => flatMap23(fromEffect9(zip12(effect4, driver2(schedule2))), ([a, driver3]) => concat3(succeed20(a), unfoldEffect(a, (s) => matchEffect4(driver3.next(s), {
  onFailure: succeed13,
  onSuccess: () => map26(effect4, (nextA) => some3([nextA, nextA]))
})))), retry7, run4, runCollect2 = (self) => run4(self, collectAll()), runCount = (self) => run4(self, count3), runDrain2 = (self) => run4(self, drain2), runFold, runFoldEffect, runFoldScoped, runFoldScopedEffect, runFoldWhile, runFoldWhileEffect, runFoldWhileScoped, runFoldWhileScopedEffect, runForEach, runForEachChunk, runForEachChunkScoped, runForEachScoped, runForEachWhile, runForEachWhileScoped, runHead = (self) => run4(self, head8()), runIntoPubSub, runIntoPubSubScoped, runIntoQueue, runIntoQueueElementsScoped, runIntoQueueScoped, runLast = (self) => run4(self, last6()), runScoped2, runSum = (self) => run4(self, sum5), scan3, scanReduce, scanReduceEffect, schedule2, scheduleWith, scanEffect, scoped7 = (effect4) => new StreamImpl(ensuring5(scoped6(pipe(effect4, map26(of3))), _void)), scopedWith4 = (f) => new StreamImpl(scopedWith3((scope6) => f(scope6).pipe(map26(of3)))), some17 = (self) => pipe(self, mapError10(some3), someOrFail(() => none2())), someOrElse, someOrFail, sliding9, slidingSize, split4, splitOnChunk, splitLines2 = (self) => pipeThroughChannel(self, splitLines()), succeed20 = (value2) => fromChunk(of3(value2)), sync14 = (evaluate2) => suspend10(() => fromChunk(of3(evaluate2()))), suspend10 = (stream2) => new StreamImpl(suspend6(() => toChannel2(stream2()))), take11, takeRight4, takeUntil3, takeUntilEffect, takeWhile6, tap9, tapBoth4, tapError7, tapErrorCause6, tapSink, throttle, throttleEffect, throttleEnforceEffect = (self, cost, units, duration3, burst) => {
  const loop4 = (tokens, timestampMillis) => readWithCause({
    onInput: (input) => pipe(cost(input), zip12(currentTimeMillis2), map26(([weight, currentTimeMillis3]) => {
      const elapsed3 = currentTimeMillis3 - timestampMillis;
      const cycles = elapsed3 / toMillis(duration3);
      const sum6 = tokens + cycles * units;
      const max13 = units + burst < 0 ? Number.POSITIVE_INFINITY : units + burst;
      const available = sum6 < 0 ? max13 : Math.min(sum6, max13);
      if (weight <= available) {
        return pipe(write2(input), flatMap20(() => loop4(available - weight, currentTimeMillis3)));
      }
      return loop4(tokens, timestampMillis);
    }), unwrap2),
    onFailure: failCause12,
    onDone: () => void_8
  });
  const throttled = pipe(currentTimeMillis2, map26((currentTimeMillis3) => loop4(units, currentTimeMillis3)), unwrap2);
  return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(throttled)));
}, throttleShapeEffect = (self, costFn, units, duration3, burst) => {
  const loop4 = (tokens, timestampMillis) => readWithCause({
    onInput: (input) => pipe(costFn(input), zip12(currentTimeMillis2), map26(([weight, currentTimeMillis3]) => {
      const elapsed3 = currentTimeMillis3 - timestampMillis;
      const cycles = elapsed3 / toMillis(duration3);
      const sum6 = tokens + cycles * units;
      const max13 = units + burst < 0 ? Number.POSITIVE_INFINITY : units + burst;
      const available = sum6 < 0 ? max13 : Math.min(sum6, max13);
      const remaining = available - weight;
      const waitCycles = remaining >= 0 ? 0 : -remaining / units;
      const delay4 = millis(Math.max(0, waitCycles * toMillis(duration3)));
      if (greaterThan5(delay4, zero2)) {
        return pipe(fromEffect5(sleep2(delay4)), zipRight8(write2(input)), flatMap20(() => loop4(remaining, currentTimeMillis3)));
      }
      return flatMap20(write2(input), () => loop4(remaining, currentTimeMillis3));
    }), unwrap2),
    onFailure: failCause12,
    onDone: () => void_8
  });
  const throttled = pipe(currentTimeMillis2, map26((currentTimeMillis3) => loop4(units, currentTimeMillis3)), unwrap2);
  return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(throttled)));
}, tick = (interval) => repeatWithSchedule(undefined, spaced2(interval)), timeout4, timeoutFail3, timeoutFailCause3, timeoutTo3, pubsubFromOptions = (options) => {
  if (typeof options === "number") {
    return bounded4(options);
  } else if (options.capacity === "unbounded") {
    return unbounded4({
      replay: options.replay
    });
  }
  switch (options.strategy) {
    case "dropping":
      return dropping3(options);
    case "sliding":
      return sliding3(options);
    default:
      return bounded4(options);
  }
}, toPubSub2, toPull2 = (self) => map26(toPull(toChannel2(self)), (pull) => pipe(pull, mapError5(some3), flatMap18(match({
  onLeft: () => fail12(none2()),
  onRight: succeed13
})))), toQueue2, toQueueOfElements, toReadableStream, toReadableStreamEffect, toReadableStreamRuntime, transduce, unfold5 = (s, f) => unfoldChunk(s, (s2) => pipe(f(s2), map2(([a, s3]) => [of3(a), s3]))), unfoldChunk = (s, f) => {
  const loop4 = (s2) => match2(f(s2), {
    onNone: () => void_8,
    onSome: ([chunk4, s3]) => flatMap20(write2(chunk4), () => loop4(s3))
  });
  return new StreamImpl(suspend6(() => loop4(s)));
}, unfoldChunkEffect = (s, f) => suspend10(() => {
  const loop4 = (s2) => unwrap2(map26(f(s2), match2({
    onNone: () => void_8,
    onSome: ([chunk4, s3]) => flatMap20(write2(chunk4), () => loop4(s3))
  })));
  return new StreamImpl(loop4(s));
}), unfoldEffect = (s, f) => unfoldChunkEffect(s, (s2) => pipe(f(s2), map26(map2(([a, s3]) => [of3(a), s3])))), void_10, unwrap4 = (effect4) => flatten17(fromEffect9(effect4)), unwrapScoped5 = (effect4) => flatten17(scoped7(effect4)), unwrapScopedWith3 = (f) => flatten17(scopedWith4((scope6) => f(scope6))), updateService6, when5, whenCase = (evaluate2, pf) => whenCaseEffect(pf)(sync8(evaluate2)), whenCaseEffect, whenEffect3, withSpan6 = function() {
  const dataFirst = typeof arguments[0] !== "string";
  const name = dataFirst ? arguments[1] : arguments[0];
  const options = addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]);
  if (dataFirst) {
    const self = arguments[0];
    return new StreamImpl(withSpan5(toChannel2(self), name, options));
  }
  return (self) => new StreamImpl(withSpan5(toChannel2(self), name, options));
}, zip16, zipFlatten, zipAll, zipAllLeft, zipAllRight, zipAllSortedByKey, zipAllSortedByKeyLeft, zipAllSortedByKeyRight, zipAllSortedByKeyWith, zipAllWith, zipLatest, zipLatestAll = (...streams) => {
  if (streams.length === 0) {
    return empty43;
  } else if (streams.length === 1) {
    return map33(streams[0], (x2) => [x2]);
  }
  const [head10, ...tail5] = streams;
  return zipLatestWith(head10, zipLatestAll(...tail5), (first3, second) => [first3, ...second]);
}, zipLatestWith, zipLeft12, zipRight12, zipWith17, zipWithChunks, zipWithIndex = (self) => pipe(self, mapAccum5(0, (index, a) => [index + 1, [a, index]])), zipWithNext = (self) => {
  const process3 = (last7) => readWithCause({
    onInput: (input) => {
      const [newLast, chunk4] = mapAccum2(input, last7, (prev, curr) => [some3(curr), pipe(prev, map2((a) => [a, curr]))]);
      const output = filterMap5(chunk4, (option6) => isSome2(option6) ? some3([option6.value[0], some3(option6.value[1])]) : none2());
      return flatMap20(write2(output), () => process3(newLast));
    },
    onFailure: failCause12,
    onDone: () => match2(last7, {
      onNone: () => void_8,
      onSome: (value2) => zipRight8(write2(of3([value2, none2()])), void_8)
    })
  });
  return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(process3(none2()))));
}, zipWithPrevious = (self) => pipe(self, mapAccum5(none2(), (prev, curr) => [some3(curr), [prev, curr]])), zipWithPreviousAndNext = (self) => pipe(zipWithNext(zipWithPrevious(self)), map33(([[prev, curr], next4]) => [prev, curr, pipe(next4, map2((tuple6) => tuple6[1]))])), zipChunks = (left3, right3, f) => {
  if (left3.length > right3.length) {
    return [pipe(left3, take3(right3.length), zipWith5(right3, f)), left2(pipe(left3, drop3(right3.length)))];
  }
  return [pipe(left3, zipWith5(pipe(right3, take3(left3.length)), f)), right2(pipe(right3, drop3(left3.length)))];
}, Do7, bind9, bindTo9, let_9, channelToStream = (self) => {
  return new StreamImpl(self);
}, decodeText, encodeText = (self) => suspend10(() => {
  const encoder = new TextEncoder;
  return map33(self, (s) => encoder.encode(s));
}), fromEventListener = (target, type, options) => asyncPush((emit2) => acquireRelease3(sync8(() => target.addEventListener(type, emit2.single, options)), () => sync8(() => target.removeEventListener(type, emit2.single, options))), {
  bufferSize: typeof options === "object" ? options.bufferSize : undefined
});
var init_stream = __esm(() => {
  init_Cause();
  init_Chunk();
  init_Clock();
  init_Context();
  init_Deferred();
  init_Duration();
  init_Effect();
  init_Either();
  init_Equal();
  init_Exit();
  init_Fiber();
  init_FiberRef();
  init_Function();
  init_Layer();
  init_MergeDecision();
  init_Option();
  init_Predicate();
  init_PubSub();
  init_Queue();
  init_RcRef();
  init_Ref();
  init_Runtime();
  init_Schedule();
  init_StreamHaltStrategy();
  init_TPubSub();
  init_TQueue();
  init_Tuple();
  init_channel();
  init_channelExecutor();
  init_mergeStrategy();
  init_core_stream();
  init_doNotation();
  init_ringBuffer();
  init_sink();
  init_debounceState();
  init_emit();
  init_haltStrategy();
  init_handoff();
  init_pull();
  init_sinkEndReason();
  init_zipAllState();
  init_zipChunksState();
  init_take();
  init_tracer();
  StreamTypeId3 = /* @__PURE__ */ Symbol.for(StreamSymbolKey);
  streamVariance = {
    _R: (_) => _,
    _E: (_) => _,
    _A: (_) => _
  };
  StreamImpl = class StreamImpl {
    channel;
    [StreamTypeId3] = streamVariance;
    constructor(channel) {
      this.channel = channel;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  aggregate = /* @__PURE__ */ dual(2, (self, sink) => aggregateWithin(self, sink, forever5));
  aggregateWithin = /* @__PURE__ */ dual(3, (self, sink, schedule2) => filterMap12(aggregateWithinEither(self, sink, schedule2), (_) => match(_, {
    onLeft: none2,
    onRight: some3
  })));
  aggregateWithinEither = /* @__PURE__ */ dual(3, (self, sink, schedule2) => {
    const layer = all11([make71(), make37(ScheduleEnd), make37(empty7()), driver2(schedule2), make37(false), make37(false)]);
    return fromEffect9(layer).pipe(flatMap23(([handoff, sinkEndReason, sinkLeftovers, scheduleDriver, consumed, endAfterEmit]) => {
      const handoffProducer = readWithCause({
        onInput: (input) => flatMap20(fromEffect5(pipe(handoff, offer6(emit(input)), when3(() => isNonEmpty2(input)))), () => handoffProducer),
        onFailure: (cause3) => fromEffect5(offer6(handoff, halt(cause3))),
        onDone: () => fromEffect5(offer6(handoff, end3(UpstreamEnd)))
      });
      const handoffConsumer = pipe(getAndSet3(sinkLeftovers, empty7()), flatMap18((leftovers) => {
        if (isNonEmpty2(leftovers)) {
          return pipe(set7(consumed, true), zipRight7(succeed13(pipe(write2(leftovers), flatMap20(() => handoffConsumer)))));
        }
        return pipe(take10(handoff), map26((signal) => {
          switch (signal._tag) {
            case OP_EMIT4: {
              return pipe(fromEffect5(set7(consumed, true)), zipRight8(write2(signal.elements)), zipRight8(fromEffect5(get14(endAfterEmit))), flatMap20((bool) => bool ? void_8 : handoffConsumer));
            }
            case OP_HALT: {
              return failCause12(signal.cause);
            }
            case OP_END: {
              if (signal.reason._tag === OP_SCHEDULE_END) {
                return pipe(get14(consumed), map26((bool) => bool ? fromEffect5(pipe(set7(sinkEndReason, ScheduleEnd), zipRight7(set7(endAfterEmit, true)))) : pipe(fromEffect5(pipe(set7(sinkEndReason, ScheduleEnd), zipRight7(set7(endAfterEmit, true)))), flatMap20(() => handoffConsumer))), unwrap2);
              }
              return pipe(set7(sinkEndReason, signal.reason), zipRight7(set7(endAfterEmit, true)), fromEffect5);
            }
          }
        }));
      }), unwrap2);
      const timeout4 = (lastB) => scheduleDriver.next(lastB);
      const scheduledAggregator = (sinkFiber, scheduleFiber, scope6) => {
        const forkSink = pipe(set7(consumed, false), zipRight7(set7(endAfterEmit, false)), zipRight7(pipe(handoffConsumer, pipeToOrFail(toChannel(sink)), collectElements, run2, forkIn3(scope6))));
        const handleSide = (leftovers, b, c) => pipe(set7(sinkLeftovers, flatten5(leftovers)), zipRight7(map26(get14(sinkEndReason), (reason) => {
          switch (reason._tag) {
            case OP_SCHEDULE_END: {
              return pipe(all11([get14(consumed), forkSink, pipe(timeout4(some3(b)), forkIn3(scope6))]), map26(([wasConsumed, sinkFiber2, scheduleFiber2]) => {
                const toWrite = pipe(c, match2({
                  onNone: () => of3(right2(b)),
                  onSome: (c2) => make9(right2(b), left2(c2))
                }));
                if (wasConsumed) {
                  return pipe(write2(toWrite), flatMap20(() => scheduledAggregator(sinkFiber2, scheduleFiber2, scope6)));
                }
                return scheduledAggregator(sinkFiber2, scheduleFiber2, scope6);
              }), unwrap2);
            }
            case OP_UPSTREAM_END: {
              return pipe(get14(consumed), map26((wasConsumed) => wasConsumed ? write2(of3(right2(b))) : void_8), unwrap2);
            }
          }
        })), unwrap2);
        return unwrap2(raceWith2(join4(sinkFiber), join4(scheduleFiber), {
          onSelfDone: (sinkExit, _) => pipe(interrupt7(scheduleFiber), zipRight7(pipe(suspend4(() => sinkExit), map26(([leftovers, b]) => handleSide(leftovers, b, none2()))))),
          onOtherDone: (scheduleExit, _) => matchCauseEffect3(suspend4(() => scheduleExit), {
            onFailure: (cause3) => match(failureOrCause2(cause3), {
              onLeft: () => pipe(handoff, offer6(end3(ScheduleEnd)), forkDaemon3, zipRight7(pipe(join4(sinkFiber), map26(([leftovers, b]) => handleSide(leftovers, b, none2()))))),
              onRight: (cause4) => pipe(handoff, offer6(halt(cause4)), forkDaemon3, zipRight7(pipe(join4(sinkFiber), map26(([leftovers, b]) => handleSide(leftovers, b, none2())))))
            }),
            onSuccess: (c) => pipe(handoff, offer6(end3(ScheduleEnd)), forkDaemon3, zipRight7(pipe(join4(sinkFiber), map26(([leftovers, b]) => handleSide(leftovers, b, some3(c))))))
          })
        }));
      };
      return unwrapScopedWith3((scope6) => pipeTo(toChannel2(self), handoffProducer).pipe(run2, forkIn3(scope6), zipRight7(pipeToOrFail(handoffConsumer, toChannel(sink)).pipe(collectElements, run2, forkIn3(scope6), flatMap18((sinkFiber) => timeout4(none2()).pipe(forkIn3(scope6), map26((scheduleFiber) => new StreamImpl(scheduledAggregator(sinkFiber, scheduleFiber, scope6)))))))));
    }));
  });
  as13 = /* @__PURE__ */ dual(2, (self, value2) => map33(self, () => value2));
  branchAfter = /* @__PURE__ */ dual(3, (self, n, f) => suspend10(() => {
    const buffering = (acc) => readWith({
      onInput: (input) => {
        const nextSize = acc.length + input.length;
        if (nextSize >= n) {
          const [b1, b2] = pipe(input, splitAt2(n - acc.length));
          return running4(pipe(acc, appendAll3(b1)), b2);
        }
        return buffering(pipe(acc, appendAll3(input)));
      },
      onFailure: fail14,
      onDone: () => running4(acc, empty7())
    });
    const running4 = (prefix, leftover2) => pipeTo(zipRight8(write2(leftover2), identityChannel()), toChannel2(f(prefix)));
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(buffering(empty7()))));
  }));
  broadcast = /* @__PURE__ */ dual(3, (self, n, maximumLag) => pipe(self, broadcastedQueues(n, maximumLag), map26((tuple6) => tuple6.map((queue) => flattenTake(fromQueue3(queue, {
    shutdown: true
  }))))));
  broadcastDynamic = /* @__PURE__ */ dual(2, (self, maximumLag) => map26(toPubSub2(self, maximumLag), (pubsub) => flattenTake(fromPubSub3(pubsub))));
  share = /* @__PURE__ */ dual(2, (self, options) => map26(make65({
    acquire: broadcastDynamic(self, options),
    idleTimeToLive: options.idleTimeToLive
  }), (rcRef) => unwrapScoped5(get17(rcRef))));
  broadcastedQueues = /* @__PURE__ */ dual(3, (self, n, maximumLag) => flatMap18(pubsubFromOptions(maximumLag), (pubsub) => pipe(all11(Array.from({
    length: n
  }, () => subscribe2(pubsub))), tap5(() => forkScoped3(runIntoPubSubScoped(self, pubsub))))));
  broadcastedQueuesDynamic = /* @__PURE__ */ dual(2, (self, maximumLag) => map26(toPubSub2(self, maximumLag), subscribe2));
  buffer2 = /* @__PURE__ */ dual(2, (self, options) => {
    if (options.capacity === "unbounded") {
      return bufferUnbounded(self);
    } else if (options.strategy === "dropping") {
      return bufferDropping(self, options.capacity);
    } else if (options.strategy === "sliding") {
      return bufferSliding(self, options.capacity);
    }
    const queue = toQueueOfElements(self, options);
    return new StreamImpl(unwrapScoped3(map26(queue, (queue2) => {
      const process3 = pipe(fromEffect5(take6(queue2)), flatMap20(match7({
        onFailure: (cause3) => pipe(flipCauseOption2(cause3), match2({
          onNone: () => void_8,
          onSome: failCause12
        })),
        onSuccess: (value2) => flatMap20(write2(of3(value2)), () => process3)
      })));
      return process3;
    })));
  });
  bufferChunks = /* @__PURE__ */ dual(2, (self, options) => {
    if (options.strategy === "dropping") {
      return bufferChunksDropping(self, options.capacity);
    } else if (options.strategy === "sliding") {
      return bufferChunksSliding(self, options.capacity);
    }
    const queue = toQueue2(self, options);
    return new StreamImpl(unwrapScoped3(map26(queue, (queue2) => {
      const process3 = pipe(fromEffect5(take6(queue2)), flatMap20(match32({
        onEnd: () => void_8,
        onFailure: failCause12,
        onSuccess: (value2) => pipe(write2(value2), flatMap20(() => process3))
      })));
      return process3;
    })));
  });
  bufferChunksDropping = /* @__PURE__ */ dual(2, (self, capacity10) => {
    const queue = acquireRelease3(dropping4(capacity10), (queue2) => shutdown4(queue2));
    return new StreamImpl(bufferSignal(queue, toChannel2(self)));
  });
  bufferChunksSliding = /* @__PURE__ */ dual(2, (self, capacity10) => {
    const queue = acquireRelease3(sliding4(capacity10), (queue2) => shutdown4(queue2));
    return new StreamImpl(bufferSignal(queue, toChannel2(self)));
  });
  bufferDropping = /* @__PURE__ */ dual(2, (self, capacity10) => {
    const queue = acquireRelease3(dropping4(capacity10), (queue2) => shutdown4(queue2));
    return new StreamImpl(bufferSignal(queue, toChannel2(rechunk(1)(self))));
  });
  bufferSliding = /* @__PURE__ */ dual(2, (self, capacity10) => {
    const queue = acquireRelease3(sliding4(capacity10), (queue2) => shutdown4(queue2));
    return new StreamImpl(bufferSignal(queue, toChannel2(pipe(self, rechunk(1)))));
  });
  catchAll8 = /* @__PURE__ */ dual(2, (self, f) => catchAllCause7(self, (cause3) => match(failureOrCause2(cause3), {
    onLeft: f,
    onRight: failCause16
  })));
  catchAllCause7 = /* @__PURE__ */ dual(2, (self, f) => new StreamImpl(pipe(toChannel2(self), catchAllCause6((cause3) => toChannel2(f(cause3))))));
  catchSome4 = /* @__PURE__ */ dual(2, (self, pf) => pipe(self, catchAll8((error3) => pipe(pf(error3), getOrElse2(() => fail19(error3))))));
  catchSomeCause3 = /* @__PURE__ */ dual(2, (self, pf) => pipe(self, catchAllCause7((cause3) => pipe(pf(cause3), getOrElse2(() => failCause16(cause3))))));
  catchTag5 = /* @__PURE__ */ dual(3, (self, k, f) => catchAll8(self, (e) => {
    if ("_tag" in e && e["_tag"] === k) {
      return f(e);
    }
    return fail19(e);
  }));
  catchTags4 = /* @__PURE__ */ dual(2, (self, cases) => catchAll8(self, (e) => {
    const keys7 = Object.keys(cases);
    if ("_tag" in e && keys7.includes(e["_tag"])) {
      return cases[e["_tag"]](e);
    }
    return fail19(e);
  }));
  changesWith = /* @__PURE__ */ dual(2, (self, f) => {
    const writer = (last7) => readWithCause({
      onInput: (input) => {
        const [newLast, newChunk] = reduce4(input, [last7, empty7()], ([option6, outputs], output) => {
          if (isSome2(option6) && f(option6.value, output)) {
            return [some3(output), outputs];
          }
          return [some3(output), pipe(outputs, append3(output))];
        });
        return flatMap20(write2(newChunk), () => writer(newLast));
      },
      onFailure: failCause12,
      onDone: () => void_8
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(writer(none2()))));
  });
  changesWithEffect = /* @__PURE__ */ dual(2, (self, f) => {
    const writer = (last7) => readWithCause({
      onInput: (input) => pipe(input, reduce17([last7, empty7()], ([option6, outputs], output) => {
        if (isSome2(option6)) {
          return pipe(f(option6.value, output), map26((bool) => bool ? [some3(output), outputs] : [some3(output), pipe(outputs, append3(output))]));
        }
        return succeed13([some3(output), pipe(outputs, append3(output))]);
      }), fromEffect5, flatMap20(([newLast, newChunk]) => pipe(write2(newChunk), flatMap20(() => writer(newLast))))),
      onFailure: failCause12,
      onDone: () => void_8
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(writer(none2()))));
  });
  chunksWith = /* @__PURE__ */ dual(2, (self, f) => flattenChunks(f(chunks(self))));
  combine16 = /* @__PURE__ */ dual(4, (self, that, s, f) => {
    function producer(handoff, latch) {
      return fromEffect5(take10(latch)).pipe(zipRight8(readWithCause({
        onInput: (input) => flatMap20(fromEffect5(offer6(handoff, succeed3(input))), () => producer(handoff, latch)),
        onFailure: (cause3) => fromEffect5(offer6(handoff, failCause3(pipe(cause3, map22(some3))))),
        onDone: () => flatMap20(fromEffect5(offer6(handoff, fail4(none2()))), () => producer(handoff, latch))
      })));
    }
    return new StreamImpl(unwrapScopedWith((scope6) => all11([make71(), make71(), make71(), make71()]).pipe(tap5(([left3, _, latchL]) => toChannel2(self).pipe(concatMap(writeChunk), pipeTo(producer(left3, latchL)), runIn(scope6), forkIn3(scope6))), tap5(([, right3, _, rightL]) => toChannel2(that).pipe(concatMap(writeChunk), pipeTo(producer(right3, rightL)), runIn(scope6), forkIn3(scope6))), map26(([left3, right3, latchL, latchR]) => {
      const pullLeft = offer6(latchL, undefined).pipe(zipRight7(take10(left3).pipe(flatMap18(identity))));
      const pullRight = offer6(latchR, undefined).pipe(zipRight7(take10(right3).pipe(flatMap18(identity))));
      return toChannel2(unfoldEffect(s, (s2) => flatMap18(f(s2, pullLeft, pullRight), unsome2)));
    }))));
  });
  combineChunks = /* @__PURE__ */ dual(4, (self, that, s, f) => {
    const producer = (handoff, latch) => zipRight8(fromEffect5(take10(latch)), readWithCause({
      onInput: (input) => flatMap20(fromEffect5(pipe(handoff, offer6(chunk3(input)))), () => producer(handoff, latch)),
      onFailure: (cause3) => fromEffect5(offer6(handoff, failCause14(cause3))),
      onDone: () => fromEffect5(offer6(handoff, end4))
    }));
    return new StreamImpl(unwrapScopedWith((scope6) => all11([make71(), make71(), make71(), make71()]).pipe(tap5(([left3, _, latchL]) => pipeTo(toChannel2(self), producer(left3, latchL)).pipe(runIn(scope6), forkIn3(scope6))), tap5(([_, right3, __, latchR]) => pipeTo(toChannel2(that), producer(right3, latchR)).pipe(runIn(scope6), forkIn3(scope6))), map26(([left3, right3, latchL, latchR]) => {
      const pullLeft = offer6(latchL, undefined).pipe(zipRight7(take10(left3).pipe(flatMap18(done11))));
      const pullRight = offer6(latchR, undefined).pipe(zipRight7(take10(right3).pipe(flatMap18(done11))));
      return toChannel2(unfoldChunkEffect(s, (s2) => flatMap18(f(s2, pullLeft, pullRight), unsome2)));
    }))));
  });
  concat3 = /* @__PURE__ */ dual(2, (self, that) => new StreamImpl(pipe(toChannel2(self), zipRight8(toChannel2(that)))));
  cross = /* @__PURE__ */ dual(2, (left3, right3) => pipe(left3, crossWith(right3, (a, a2) => [a, a2])));
  crossLeft = /* @__PURE__ */ dual(2, (left3, right3) => pipe(left3, crossWith(right3, (a, _) => a)));
  crossRight = /* @__PURE__ */ dual(2, (left3, right3) => flatMap23(left3, () => right3));
  crossWith = /* @__PURE__ */ dual(3, (left3, right3, f) => pipe(left3, flatMap23((a) => pipe(right3, map33((b) => f(a, b))))));
  debounce = /* @__PURE__ */ dual(2, (self, duration3) => unwrapScopedWith3((scope6) => gen6(function* () {
    const handoff = yield* make71();
    function enqueue(last7) {
      return sleep2(duration3).pipe(as8(last7), forkIn3(scope6), map26((fiber) => consumer(previous(fiber))));
    }
    const producer = readWithCause({
      onInput: (input) => match2(last2(input), {
        onNone: () => producer,
        onSome: (elem) => fromEffect5(offer6(handoff, emit(of3(elem)))).pipe(flatMap20(() => producer))
      }),
      onFailure: (cause3) => fromEffect5(offer6(handoff, halt(cause3))),
      onDone: () => fromEffect5(offer6(handoff, end3(UpstreamEnd)))
    });
    function consumer(state) {
      switch (state._tag) {
        case OP_NOT_STARTED: {
          return unwrap2(take10(handoff).pipe(map26((signal) => {
            switch (signal._tag) {
              case OP_EMIT4: {
                return unwrap2(enqueue(signal.elements));
              }
              case OP_HALT: {
                return failCause12(signal.cause);
              }
              case OP_END: {
                return void_8;
              }
            }
          })));
        }
        case OP_PREVIOUS: {
          return unwrap2(take10(handoff).pipe(forkIn3(scope6), flatMap18((handoffFiber) => raceWith2(join4(state.fiber), join4(handoffFiber), {
            onSelfDone: (leftExit, current2) => match7(leftExit, {
              onFailure: (cause3) => interrupt7(current2).pipe(as8(failCause12(cause3))),
              onSuccess: (chunk4) => interrupt7(current2).pipe(zipRight7(succeed13(write2(chunk4).pipe(flatMap20(() => consumer(current(handoffFiber)))))))
            }),
            onOtherDone: (rightExit, previous2) => match7(rightExit, {
              onFailure: (cause3) => interrupt7(previous2).pipe(as8(failCause12(cause3))),
              onSuccess: (signal) => {
                switch (signal._tag) {
                  case OP_EMIT4: {
                    return interrupt7(previous2).pipe(zipRight7(enqueue(signal.elements)));
                  }
                  case OP_HALT: {
                    return interrupt7(previous2).pipe(as8(failCause12(signal.cause)));
                  }
                  case OP_END: {
                    return join4(previous2).pipe(map26((chunk4) => write2(chunk4).pipe(zipRight8(void_8))));
                  }
                }
              }
            })
          }))));
        }
        case OP_CURRENT: {
          return unwrap2(join4(state.fiber).pipe(map26((signal) => {
            switch (signal._tag) {
              case OP_EMIT4: {
                return unwrap2(enqueue(signal.elements));
              }
              case OP_HALT: {
                return failCause12(signal.cause);
              }
              case OP_END: {
                return void_8;
              }
            }
          })));
        }
      }
    }
    return scopedWith4((scope7) => pipeTo(toChannel2(self), producer).pipe(runIn(scope7), forkIn3(scope7))).pipe(crossRight(new StreamImpl(consumer(notStarted))));
  })));
  distributedWith = /* @__PURE__ */ dual(2, (self, options) => pipe(make24(), flatMap18((deferred) => pipe(self, distributedWithDynamic({
    maximumLag: options.maximumLag,
    decide: (a) => flatMap18(_await(deferred), (f) => f(a))
  }), flatMap18((next4) => pipe(all11(map7(range3(0, options.size - 1), (id3) => map26(next4, ([key, queue]) => [[key, id3], queue]))), map26(unsafeFromArray), flatMap18((entries3) => {
    const [mappings, queues] = reduceRight2(entries3, [new Map, empty7()], ([mappings2, queues2], [mapping, queue]) => [mappings2.set(mapping[0], mapping[1]), pipe(queues2, prepend3(queue))]);
    return pipe(succeed2(deferred, (a) => map26(options.decide(a), (f) => (key) => pipe(f(mappings.get(key))))), as8(Array.from(queues)));
  })))))));
  distributedWithDynamicId = {
    ref: 0
  };
  distributedWithDynamic = /* @__PURE__ */ dual(2, (self, options) => distributedWithDynamicCallback(self, options.maximumLag, options.decide, () => _void));
  distributedWithDynamicCallback = /* @__PURE__ */ dual(4, (self, maximumLag, decide, done12) => pipe(acquireRelease3(make37(new Map), (ref, _) => pipe(get14(ref), flatMap18((queues) => pipe(queues.values(), forEach16(shutdown4))))), flatMap18((queuesRef) => gen6(function* () {
    const offer7 = (a) => pipe(decide(a), flatMap18((shouldProcess) => pipe(get14(queuesRef), flatMap18((queues) => pipe(queues.entries(), reduce17(empty7(), (acc, [id3, queue]) => {
      if (shouldProcess(id3)) {
        return pipe(offer3(queue, succeed3(a)), matchCauseEffect3({
          onFailure: (cause3) => isInterrupted3(cause3) ? succeed13(pipe(acc, prepend3(id3))) : failCause10(cause3),
          onSuccess: () => succeed13(acc)
        }));
      }
      return succeed13(acc);
    }), flatMap18((ids3) => {
      if (isNonEmpty2(ids3)) {
        return pipe(update4(queuesRef, (map33) => {
          for (const id3 of ids3) {
            map33.delete(id3);
          }
          return map33;
        }));
      }
      return _void;
    }))))), asVoid6);
    const queuesLock = yield* makeSemaphore2(1);
    const newQueue = yield* make37(pipe(bounded5(maximumLag), flatMap18((queue) => {
      const id3 = newDistributedWithDynamicId();
      return pipe(update4(queuesRef, (map33) => map33.set(id3, queue)), as8([id3, queue]));
    })));
    const finalize = (endTake) => queuesLock.withPermits(1)(pipe(set7(newQueue, pipe(bounded5(1), tap5((queue) => offer3(queue, endTake)), flatMap18((queue) => {
      const id3 = newDistributedWithDynamicId();
      return pipe(update4(queuesRef, (map33) => map33.set(id3, queue)), as8(make3(id3, queue)));
    }))), zipRight7(pipe(get14(queuesRef), flatMap18((map33) => pipe(fromIterable3(map33.values()), forEach16((queue) => pipe(offer3(queue, endTake), catchSomeCause2((cause3) => isInterrupted3(cause3) ? some3(_void) : none2()))))))), zipRight7(done12(endTake)), asVoid6));
    yield* pipe(self, runForEachScoped(offer7), matchCauseEffect3({
      onFailure: (cause3) => finalize(failCause3(pipe(cause3, map22(some3)))),
      onSuccess: () => finalize(fail4(none2()))
    }), forkScoped3);
    return queuesLock.withPermits(1)(flatten13(get14(newQueue)));
  }))));
  drainFork = /* @__PURE__ */ dual(2, (self, that) => fromEffect9(make24()).pipe(flatMap23((backgroundDied) => scopedWith4((scope6) => toChannel2(that).pipe(drain, runIn(scope6), catchAllCause4((cause3) => failCause2(backgroundDied, cause3)), forkIn3(scope6))).pipe(crossRight(interruptWhenDeferred2(self, backgroundDied))))));
  drop6 = /* @__PURE__ */ dual(2, (self, n) => {
    const loop4 = (r) => readWith({
      onInput: (input) => {
        const dropped = pipe(input, drop3(r));
        const leftover2 = Math.max(0, r - input.length);
        const more = isEmpty2(input) || leftover2 > 0;
        if (more) {
          return loop4(leftover2);
        }
        return pipe(write2(dropped), zipRight8(identityChannel()));
      },
      onFailure: fail14,
      onDone: () => void_8
    });
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(loop4(n))));
  });
  dropRight3 = /* @__PURE__ */ dual(2, (self, n) => {
    if (n <= 0) {
      return identityStream();
    }
    return suspend10(() => {
      const queue = new RingBuffer(n);
      const reader = readWith({
        onInput: (input) => {
          const outputs = pipe(input, filterMap5((elem) => {
            const head10 = queue.head();
            queue.put(elem);
            return head10;
          }));
          return pipe(write2(outputs), flatMap20(() => reader));
        },
        onFailure: fail14,
        onDone: () => void_8
      });
      return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(reader)));
    });
  });
  dropUntil4 = /* @__PURE__ */ dual(2, (self, predicate) => drop6(dropWhile6(self, (a) => !predicate(a)), 1));
  dropUntilEffect2 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const loop4 = readWith({
      onInput: (input) => pipe(dropUntil2(input, predicate), map26(unsafeFromArray), map26((leftover2) => {
        const more = isEmpty2(leftover2);
        if (more) {
          return suspend6(() => loop4);
        }
        return pipe(write2(leftover2), zipRight8(identityChannel()));
      }), unwrap2),
      onFailure: fail14,
      onDone: () => void_8
    });
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(loop4)));
  });
  dropWhile6 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const loop4 = readWith({
      onInput: (input) => {
        const output = dropWhile2(input, predicate);
        if (isEmpty2(output)) {
          return suspend6(() => loop4);
        }
        return zipRight8(write2(output), identityChannel());
      },
      onFailure: fail14,
      onDone: succeedNow
    });
    return new StreamImpl(pipeToOrFail(toChannel2(self), loop4));
  });
  dropWhileEffect2 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const loop4 = readWith({
      onInput: (input) => pipe(dropWhile4(input, predicate), map26(unsafeFromArray), map26((leftover2) => {
        const more = isEmpty2(leftover2);
        if (more) {
          return suspend6(() => loop4);
        }
        return zipRight8(write2(leftover2), identityChannel());
      }), unwrap2),
      onFailure: fail14,
      onDone: () => void_8
    });
    return new StreamImpl(pipeToOrFail(toChannel2(self), loop4));
  });
  empty43 = /* @__PURE__ */ new StreamImpl(void_8);
  ensuring9 = /* @__PURE__ */ dual(2, (self, finalizer) => new StreamImpl(pipe(toChannel2(self), ensuring5(finalizer))));
  ensuringWith3 = /* @__PURE__ */ dual(2, (self, finalizer) => new StreamImpl(ensuringWith(toChannel2(self), finalizer)));
  filter18 = /* @__PURE__ */ dual(2, (self, predicate) => mapChunks(self, filter5(predicate)));
  filterEffect = /* @__PURE__ */ dual(2, (self, f) => {
    const loop4 = (iterator) => {
      const next4 = iterator.next();
      if (next4.done) {
        return readWithCause({
          onInput: (input) => loop4(input[Symbol.iterator]()),
          onFailure: failCause12,
          onDone: succeed15
        });
      } else {
        return pipe(f(next4.value), map26((bool) => bool ? pipe(write2(of3(next4.value)), flatMap20(() => loop4(iterator))) : loop4(iterator)), unwrap2);
      }
    };
    return new StreamImpl(suspend6(() => pipe(toChannel2(self), pipeTo(loop4(empty7()[Symbol.iterator]())))));
  });
  filterMap12 = /* @__PURE__ */ dual(2, (self, pf) => mapChunks(self, filterMap5(pf)));
  filterMapEffect = /* @__PURE__ */ dual(2, (self, pf) => suspend10(() => {
    const loop4 = (iterator) => {
      const next4 = iterator.next();
      if (next4.done) {
        return readWithCause({
          onInput: (input) => loop4(input[Symbol.iterator]()),
          onFailure: failCause12,
          onDone: succeed15
        });
      } else {
        return pipe(pf(next4.value), match2({
          onNone: () => sync8(() => loop4(iterator)),
          onSome: map26((a2) => flatMap20(write2(of3(a2)), () => loop4(iterator)))
        }), unwrap2);
      }
    };
    return new StreamImpl(pipe(toChannel2(self), pipeTo(loop4(empty7()[Symbol.iterator]()))));
  }));
  filterMapWhile4 = /* @__PURE__ */ dual(2, (self, pf) => {
    const loop4 = readWith({
      onInput: (input) => {
        const mapped = filterMapWhile3(input, pf);
        if (mapped.length === input.length) {
          return pipe(write2(mapped), flatMap20(() => loop4));
        }
        return write2(mapped);
      },
      onFailure: fail14,
      onDone: succeed15
    });
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(loop4)));
  });
  filterMapWhileEffect = /* @__PURE__ */ dual(2, (self, pf) => suspend10(() => {
    const loop4 = (iterator) => {
      const next4 = iterator.next();
      if (next4.done) {
        return readWithCause({
          onInput: (input) => loop4(input[Symbol.iterator]()),
          onFailure: failCause12,
          onDone: succeed15
        });
      } else {
        return unwrap2(match2(pf(next4.value), {
          onNone: () => succeed13(void_8),
          onSome: map26((a2) => flatMap20(write2(of3(a2)), () => loop4(iterator)))
        }));
      }
    };
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(loop4(empty7()[Symbol.iterator]()))));
  }));
  find3 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const loop4 = readWith({
      onInput: (input) => match2(findFirst3(input, predicate), {
        onNone: () => loop4,
        onSome: (n) => write2(of3(n))
      }),
      onFailure: fail14,
      onDone: () => void_8
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(loop4)));
  });
  findEffect2 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const loop4 = readWith({
      onInput: (input) => pipe(findFirst10(input, predicate), map26(match2({
        onNone: () => loop4,
        onSome: (n) => write2(of3(n))
      })), unwrap2),
      onFailure: fail14,
      onDone: () => void_8
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(loop4)));
  });
  flatMap23 = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, f, options) => {
    const bufferSize = options?.bufferSize ?? 16;
    if (options?.switch) {
      return matchConcurrency(options?.concurrency, () => flatMapParSwitchBuffer(self, 1, bufferSize, f), (n) => flatMapParSwitchBuffer(self, n, bufferSize, f));
    }
    return matchConcurrency(options?.concurrency, () => new StreamImpl(concatMap(toChannel2(self), (as14) => pipe(as14, map7((a) => toChannel2(f(a))), reduce4(void_8, (left3, right3) => pipe(left3, zipRight8(right3)))))), (_) => new StreamImpl(pipe(toChannel2(self), concatMap(writeChunk), mergeMap((out) => toChannel2(f(out)), options))));
  });
  flatMapParSwitchBuffer = /* @__PURE__ */ dual(4, (self, n, bufferSize, f) => new StreamImpl(pipe(toChannel2(self), concatMap(writeChunk), mergeMap((out) => toChannel2(f(out)), {
    concurrency: n,
    mergeStrategy: BufferSliding(),
    bufferSize
  }))));
  flatten17 = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, options) => flatMap23(self, identity, options));
  flattenEffect = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, options) => options?.unordered ? flatMap23(self, (a) => fromEffect9(a), {
    concurrency: options.concurrency
  }) : matchConcurrency(options?.concurrency, () => mapEffectSequential(self, identity), (n) => new StreamImpl(pipe(toChannel2(self), concatMap(writeChunk), mapOutEffectPar(identity, n), mapOut(of3)))));
  EOF = /* @__PURE__ */ Symbol.for("effect/Stream/EOF");
  groupAdjacentBy = /* @__PURE__ */ dual(2, (self, f) => {
    const groupAdjacentByChunk = (state, chunk4) => {
      if (isEmpty2(chunk4)) {
        return [state, empty7()];
      }
      const builder = [];
      let from = 0;
      let until = 0;
      let key = undefined;
      let previousChunk = empty7();
      switch (state._tag) {
        case "Some": {
          const tuple6 = state.value;
          key = tuple6[0];
          let loop4 = true;
          while (loop4 && until < chunk4.length) {
            const input = unsafeGet4(chunk4, until);
            const updatedKey = f(input);
            if (!equals(key, updatedKey)) {
              const previousChunk2 = tuple6[1];
              const additionalChunk = unsafeFromArray(Array.from(chunk4).slice(from, until));
              const group4 = appendAll3(previousChunk2, additionalChunk);
              builder.push([key, group4]);
              key = updatedKey;
              from = until;
              loop4 = false;
            }
            until = until + 1;
          }
          if (loop4) {
            previousChunk = tuple6[1];
          }
          break;
        }
        case "None": {
          key = f(unsafeGet4(chunk4, until));
          until = until + 1;
          break;
        }
      }
      while (until < chunk4.length) {
        const input = unsafeGet4(chunk4, until);
        const updatedKey = f(input);
        if (!equals(key, updatedKey)) {
          builder.push([key, unsafeFromArray(Array.from(chunk4).slice(from, until))]);
          key = updatedKey;
          from = until;
        }
        until = until + 1;
      }
      const nonEmptyChunk = appendAll3(previousChunk, unsafeFromArray(Array.from(chunk4).slice(from, until)));
      const output = unsafeFromArray(builder);
      return [some3([key, nonEmptyChunk]), output];
    };
    const groupAdjacent = (state) => readWithCause({
      onInput: (input) => {
        const [updatedState, output] = groupAdjacentByChunk(state, input);
        return isEmpty2(output) ? groupAdjacent(updatedState) : flatMap20(write2(output), () => groupAdjacent(updatedState));
      },
      onFailure: (cause3) => match2(state, {
        onNone: () => failCause12(cause3),
        onSome: (output) => flatMap20(write2(of3(output)), () => failCause12(cause3))
      }),
      onDone: (done12) => match2(state, {
        onNone: () => succeedNow(done12),
        onSome: (output) => flatMap20(write2(of3(output)), () => succeedNow(done12))
      })
    });
    return new StreamImpl(pipeToOrFail(toChannel2(self), groupAdjacent(none2())));
  });
  grouped = /* @__PURE__ */ dual(2, (self, chunkSize) => pipe(self, rechunk(chunkSize), chunks));
  groupedWithin = /* @__PURE__ */ dual(3, (self, chunkSize, duration3) => aggregateWithin(self, collectAllN(chunkSize), spaced2(duration3)));
  haltWhen = /* @__PURE__ */ dual(2, (self, effect4) => {
    const writer = (fiber) => pipe(poll4(fiber), map26(match2({
      onNone: () => readWith({
        onInput: (input) => flatMap20(write2(input), () => writer(fiber)),
        onFailure: fail14,
        onDone: () => void_8
      }),
      onSome: match7({
        onFailure: failCause12,
        onSuccess: () => void_8
      })
    })), unwrap2);
    return new StreamImpl(unwrapScopedWith((scope6) => effect4.pipe(forkIn3(scope6), map26((fiber) => toChannel2(self).pipe(pipeTo(writer(fiber)))))));
  });
  haltAfter = /* @__PURE__ */ dual(2, (self, duration3) => pipe(self, haltWhen(sleep2(duration3))));
  haltWhenDeferred = /* @__PURE__ */ dual(2, (self, deferred) => {
    const writer = pipe(poll(deferred), map26(match2({
      onNone: () => readWith({
        onInput: (input) => pipe(write2(input), flatMap20(() => writer)),
        onFailure: fail14,
        onDone: () => void_8
      }),
      onSome: (effect4) => unwrap2(match20(effect4, {
        onFailure: fail14,
        onSuccess: () => void_8
      }))
    })), unwrap2);
    return new StreamImpl(pipe(toChannel2(self), pipeTo(writer)));
  });
  interleave = /* @__PURE__ */ dual(2, (self, that) => pipe(self, interleaveWith(that, forever6(make73(true, false)))));
  interleaveWith = /* @__PURE__ */ dual(3, (self, that, decider) => {
    const producer = (handoff) => readWithCause({
      onInput: (value2) => flatMap20(fromEffect5(offer6(handoff, of7(value2))), () => producer(handoff)),
      onFailure: (cause3) => fromEffect5(offer6(handoff, failCause14(cause3))),
      onDone: () => fromEffect5(offer6(handoff, end4))
    });
    return new StreamImpl(unwrapScopedWith((scope6) => pipe(make71(), zip12(make71()), tap5(([left3]) => toChannel2(self).pipe(concatMap(writeChunk), pipeTo(producer(left3)), runIn(scope6), forkIn3(scope6))), tap5(([_, right3]) => toChannel2(that).pipe(concatMap(writeChunk), pipeTo(producer(right3)), runIn(scope6), forkIn3(scope6))), map26(([left3, right3]) => {
      const process3 = (leftDone, rightDone) => readWithCause({
        onInput: (bool) => {
          if (bool && !leftDone) {
            return pipe(fromEffect5(take10(left3)), flatMap20(match32({
              onEnd: () => rightDone ? void_8 : process3(true, rightDone),
              onFailure: failCause12,
              onSuccess: (chunk4) => pipe(write2(chunk4), flatMap20(() => process3(leftDone, rightDone)))
            })));
          }
          if (!bool && !rightDone) {
            return pipe(fromEffect5(take10(right3)), flatMap20(match32({
              onEnd: () => leftDone ? void_8 : process3(leftDone, true),
              onFailure: failCause12,
              onSuccess: (chunk4) => pipe(write2(chunk4), flatMap20(() => process3(leftDone, rightDone)))
            })));
          }
          return process3(leftDone, rightDone);
        },
        onFailure: failCause12,
        onDone: () => void_8
      });
      return pipe(toChannel2(decider), concatMap(writeChunk), pipeTo(process3(false, false)));
    }))));
  });
  intersperse3 = /* @__PURE__ */ dual(2, (self, element) => new StreamImpl(pipe(toChannel2(self), pipeToOrFail(suspend6(() => {
    const writer = (isFirst) => readWithCause({
      onInput: (chunk4) => {
        const builder = [];
        let flagResult = isFirst;
        for (const output of chunk4) {
          if (flagResult) {
            flagResult = false;
            builder.push(output);
          } else {
            builder.push(element);
            builder.push(output);
          }
        }
        return pipe(write2(unsafeFromArray(builder)), flatMap20(() => writer(flagResult)));
      },
      onFailure: failCause12,
      onDone: () => void_8
    });
    return writer(true);
  })))));
  intersperseAffixes = /* @__PURE__ */ dual(2, (self, {
    end: end6,
    middle,
    start: start3
  }) => pipe(make73(start3), concat3(pipe(self, intersperse3(middle))), concat3(make73(end6))));
  interruptAfter2 = /* @__PURE__ */ dual(2, (self, duration3) => pipe(self, interruptWhen2(sleep2(duration3))));
  interruptWhen2 = /* @__PURE__ */ dual(2, (self, effect4) => new StreamImpl(pipe(toChannel2(self), interruptWhen(effect4))));
  interruptWhenDeferred2 = /* @__PURE__ */ dual(2, (self, deferred) => new StreamImpl(pipe(toChannel2(self), interruptWhenDeferred(deferred))));
  map33 = /* @__PURE__ */ dual(2, (self, f) => new StreamImpl(pipe(toChannel2(self), mapOut(map7(f)))));
  mapAccum5 = /* @__PURE__ */ dual(3, (self, s, f) => {
    const accumulator = (s2) => readWith({
      onInput: (input) => {
        const [nextS, chunk4] = mapAccum2(input, s2, f);
        return flatMap20(write2(chunk4), () => accumulator(nextS));
      },
      onFailure: fail14,
      onDone: () => void_8
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(accumulator(s))));
  });
  mapAccumEffect = /* @__PURE__ */ dual(3, (self, s, f) => suspend10(() => {
    const accumulator = (s2) => readWith({
      onInput: (input) => pipe(suspend4(() => {
        const outputs = [];
        const emit2 = (output) => sync8(() => {
          outputs.push(output);
        });
        return pipe(input, reduce17(s2, (s3, a) => pipe(f(s3, a), flatMap18(([s4, a2]) => pipe(emit2(a2), as8(s4))))), match20({
          onFailure: (error3) => {
            if (outputs.length !== 0) {
              return zipRight8(write2(unsafeFromArray(outputs)), fail14(error3));
            }
            return fail14(error3);
          },
          onSuccess: (s3) => flatMap20(write2(unsafeFromArray(outputs)), () => accumulator(s3))
        }));
      }), unwrap2),
      onFailure: fail14,
      onDone: () => void_8
    });
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(accumulator(s))));
  }));
  mapBoth9 = /* @__PURE__ */ dual(2, (self, options) => pipe(self, mapError10(options.onFailure), map33(options.onSuccess)));
  mapChunks = /* @__PURE__ */ dual(2, (self, f) => new StreamImpl(pipe(toChannel2(self), mapOut(f))));
  mapChunksEffect = /* @__PURE__ */ dual(2, (self, f) => new StreamImpl(pipe(toChannel2(self), mapOutEffect(f))));
  mapConcat = /* @__PURE__ */ dual(2, (self, f) => pipe(self, mapConcatChunk((a) => fromIterable3(f(a)))));
  mapConcatChunk = /* @__PURE__ */ dual(2, (self, f) => pipe(self, mapChunks(flatMap5(f))));
  mapConcatChunkEffect = /* @__PURE__ */ dual(2, (self, f) => pipe(self, mapEffectSequential(f), mapConcatChunk(identity)));
  mapConcatEffect = /* @__PURE__ */ dual(2, (self, f) => pipe(self, mapEffectSequential((a) => pipe(f(a), map26(fromIterable3))), mapConcatChunk(identity)));
  mapEffectSequential = /* @__PURE__ */ dual(2, (self, f) => {
    const loop4 = (iterator) => {
      const next4 = iterator.next();
      if (next4.done) {
        return readWithCause({
          onInput: (elem) => loop4(elem[Symbol.iterator]()),
          onFailure: failCause12,
          onDone: succeed15
        });
      } else {
        const value2 = next4.value;
        return unwrap2(map26(f(value2), (a2) => flatMap20(write2(of3(a2)), () => loop4(iterator))));
      }
    };
    return new StreamImpl(pipe(toChannel2(self), pipeTo(suspend6(() => loop4(empty7()[Symbol.iterator]())))));
  });
  mapEffectPar = /* @__PURE__ */ dual(3, (self, n, f) => new StreamImpl(pipe(toChannel2(self), concatMap(writeChunk), mapOutEffectPar(f, n), mapOut(of3))));
  mapError10 = /* @__PURE__ */ dual(2, (self, f) => new StreamImpl(pipe(toChannel2(self), mapError7(f))));
  mapErrorCause6 = /* @__PURE__ */ dual(2, (self, f) => new StreamImpl(pipe(toChannel2(self), mapErrorCause5(f))));
  merge10 = /* @__PURE__ */ dual((args2) => isStream(args2[1]), (self, that, options) => mergeWith3(self, that, {
    onSelf: identity,
    onOther: identity,
    haltStrategy: options?.haltStrategy
  }));
  mergeAll9 = /* @__PURE__ */ dual((args2) => (Symbol.iterator in args2[0]), (streams, options) => flatten17(fromIterable17(streams), options));
  mergeWithTag = /* @__PURE__ */ dual(2, (streams, options) => {
    const keys7 = Object.keys(streams);
    const values10 = keys7.map((key) => streams[key].pipe(map33((value2) => ({
      _tag: key,
      value: value2
    }))));
    return mergeAll9(values10, options);
  });
  mergeEither = /* @__PURE__ */ dual(2, (self, that) => mergeWith3(self, that, {
    onSelf: left2,
    onOther: right2
  }));
  mergeLeft = /* @__PURE__ */ dual(2, (left3, right3) => pipe(left3, merge10(drain3(right3))));
  mergeRight = /* @__PURE__ */ dual(2, (left3, right3) => pipe(drain3(left3), merge10(right3)));
  mergeWith3 = /* @__PURE__ */ dual(3, (self, other, options) => {
    const strategy = options.haltStrategy ? fromInput2(options.haltStrategy) : Both2;
    const handler = (terminate) => (exit4) => terminate || !isSuccess(exit4) ? Done4(suspend4(() => exit4)) : Await2((exit5) => suspend4(() => exit5));
    return new StreamImpl(mergeWith2(toChannel2(map33(self, options.onSelf)), {
      other: toChannel2(map33(other, options.onOther)),
      onSelfDone: handler(strategy._tag === "Either" || strategy._tag === "Left"),
      onOtherDone: handler(strategy._tag === "Either" || strategy._tag === "Right")
    }));
  });
  never8 = /* @__PURE__ */ fromEffect9(never5);
  onEnd = /* @__PURE__ */ dual(2, (self, effect4) => concat3(self, drain3(fromEffect9(effect4))));
  onError4 = /* @__PURE__ */ dual(2, (self, cleanup) => pipe(self, catchAllCause7((cause3) => fromEffect9(pipe(cleanup(cause3), zipRight7(failCause10(cause3)))))));
  onDone = /* @__PURE__ */ dual(2, (self, cleanup) => new StreamImpl(pipe(toChannel2(self), ensuringWith((exit4) => isSuccess(exit4) ? cleanup() : _void))));
  onStart = /* @__PURE__ */ dual(2, (self, effect4) => unwrap4(as8(effect4, self)));
  orDieWith5 = /* @__PURE__ */ dual(2, (self, f) => new StreamImpl(pipe(toChannel2(self), orDieWith3(f))));
  orElse13 = /* @__PURE__ */ dual(2, (self, that) => new StreamImpl(pipe(toChannel2(self), orElse10(() => toChannel2(that())))));
  orElseEither7 = /* @__PURE__ */ dual(2, (self, that) => pipe(self, map33(left2), orElse13(() => pipe(that(), map33(right2)))));
  orElseFail4 = /* @__PURE__ */ dual(2, (self, error3) => pipe(self, orElse13(() => failSync10(error3))));
  orElseIfEmpty = /* @__PURE__ */ dual(2, (self, element) => pipe(self, orElseIfEmptyChunk(() => of3(element()))));
  orElseIfEmptyChunk = /* @__PURE__ */ dual(2, (self, chunk4) => pipe(self, orElseIfEmptyStream(() => new StreamImpl(write2(chunk4())))));
  orElseIfEmptyStream = /* @__PURE__ */ dual(2, (self, stream2) => {
    const writer = readWith({
      onInput: (input) => {
        if (isEmpty2(input)) {
          return suspend6(() => writer);
        }
        return pipe(write2(input), zipRight8(identityChannel()));
      },
      onFailure: fail14,
      onDone: () => suspend6(() => toChannel2(stream2()))
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(writer)));
  });
  orElseSucceed5 = /* @__PURE__ */ dual(2, (self, value2) => pipe(self, orElse13(() => sync14(value2))));
  peel = /* @__PURE__ */ dual(2, (self, sink) => {
    const OP_EMIT5 = "Emit";
    const OP_HALT2 = "Halt";
    const OP_END2 = "End";
    return pipe(make24(), flatMap18((deferred) => pipe(make71(), map26((handoff) => {
      const consumer = foldSink(collectLeftover(sink), {
        onFailure: (error3) => zipRight9(fromEffect7(fail3(deferred, error3)), fail15(error3)),
        onSuccess: ([z2, leftovers]) => {
          const loop4 = readWithCause({
            onInput: (elements) => flatMap20(fromEffect5(offer6(handoff, {
              _tag: OP_EMIT5,
              elements
            })), () => loop4),
            onFailure: (cause3) => zipRight8(fromEffect5(offer6(handoff, {
              _tag: OP_HALT2,
              cause: cause3
            })), failCause12(cause3)),
            onDone: (_) => zipRight8(fromEffect5(offer6(handoff, {
              _tag: OP_END2
            })), void_8)
          });
          return fromChannel(pipe(fromEffect5(succeed2(deferred, z2)), zipRight8(fromEffect5(pipe(handoff, offer6({
            _tag: OP_EMIT5,
            elements: leftovers
          })))), zipRight8(loop4)));
        }
      });
      const producer = pipe(take10(handoff), map26((signal) => {
        switch (signal._tag) {
          case OP_EMIT5: {
            return pipe(write2(signal.elements), flatMap20(() => producer));
          }
          case OP_HALT2: {
            return failCause12(signal.cause);
          }
          case OP_END2: {
            return void_8;
          }
        }
      }), unwrap2);
      return pipe(self, tapErrorCause6((cause3) => failCause2(deferred, cause3)), run4(consumer), forkScoped3, zipRight7(_await(deferred)), map26((z2) => [z2, new StreamImpl(producer)]));
    }))), flatten13);
  });
  partition11 = /* @__PURE__ */ dual((args2) => typeof args2[1] === "function", (self, predicate, options) => partitionEither(self, (a) => succeed13(predicate(a) ? right2(a) : left2(a)), options));
  partitionEither = /* @__PURE__ */ dual((args2) => typeof args2[1] === "function", (self, predicate, options) => pipe(mapEffectSequential(self, predicate), distributedWith({
    size: 2,
    maximumLag: options?.bufferSize ?? 16,
    decide: match({
      onLeft: () => succeed13((n) => n === 0),
      onRight: () => succeed13((n) => n === 1)
    })
  }), flatMap18(([queue1, queue2]) => succeed13([filterMap12(flattenExitOption(fromQueue3(queue1, {
    shutdown: true
  })), (_) => match(_, {
    onLeft: some3,
    onRight: none2
  })), filterMap12(flattenExitOption(fromQueue3(queue2, {
    shutdown: true
  })), (_) => match(_, {
    onLeft: none2,
    onRight: some3
  }))]))));
  pipeThrough = /* @__PURE__ */ dual(2, (self, sink) => new StreamImpl(pipe(toChannel2(self), pipeToOrFail(toChannel(sink)))));
  pipeThroughChannel = /* @__PURE__ */ dual(2, (self, channel) => new StreamImpl(pipeTo(toChannel2(self), channel)));
  pipeThroughChannelOrFail = /* @__PURE__ */ dual(2, (self, chan) => new StreamImpl(pipe(toChannel2(self), pipeToOrFail(chan))));
  prepend6 = /* @__PURE__ */ dual(2, (self, values10) => new StreamImpl(zipRight8(write2(values10), toChannel2(self))));
  provideContext8 = /* @__PURE__ */ dual(2, (self, context11) => new StreamImpl(pipe(toChannel2(self), provideContext4(context11))));
  provideLayer2 = /* @__PURE__ */ dual(2, (self, layer) => new StreamImpl(unwrapScopedWith((scope6) => buildWithScope2(layer, scope6).pipe(map26((env) => pipe(toChannel2(self), provideContext4(env)))))));
  provideService10 = /* @__PURE__ */ dual(3, (self, tag, resource) => provideServiceEffect4(self, tag, succeed13(resource)));
  provideServiceEffect4 = /* @__PURE__ */ dual(3, (self, tag, effect4) => provideServiceStream(self, tag, fromEffect9(effect4)));
  provideServiceStream = /* @__PURE__ */ dual(3, (self, tag, stream2) => contextWithStream((env) => flatMap23(stream2, (service4) => pipe(self, provideContext8(add2(env, tag, service4))))));
  mapInputContext7 = /* @__PURE__ */ dual(2, (self, f) => contextWithStream((env) => pipe(self, provideContext8(f(env)))));
  provideSomeLayer3 = /* @__PURE__ */ dual(2, (self, layer) => pipe(self, provideLayer2(pipe(context6(), merge8(layer)))));
  race5 = /* @__PURE__ */ dual(2, (left3, right3) => raceAll4(left3, right3));
  rechunk = /* @__PURE__ */ dual(2, (self, n) => suspend10(() => {
    const target = Math.max(n, 1);
    const process3 = rechunkProcess(new StreamRechunker(target), target);
    return new StreamImpl(pipe(toChannel2(self), pipeTo(process3)));
  }));
  refineOrDie3 = /* @__PURE__ */ dual(2, (self, pf) => pipe(self, refineOrDieWith3(pf, identity)));
  refineOrDieWith3 = /* @__PURE__ */ dual(3, (self, pf, f) => new StreamImpl(catchAll6(toChannel2(self), (error3) => match2(pf(error3), {
    onNone: () => failCause12(die6(f(error3))),
    onSome: fail14
  }))));
  repeat4 = /* @__PURE__ */ dual(2, (self, schedule2) => filterMap12(repeatEither(self, schedule2), (_) => match(_, {
    onLeft: none2,
    onRight: some3
  })));
  repeatEither = /* @__PURE__ */ dual(2, (self, schedule2) => repeatWith(self, schedule2, {
    onElement: (a) => right2(a),
    onSchedule: left2
  }));
  repeatElements = /* @__PURE__ */ dual(2, (self, schedule2) => filterMap12(repeatElementsWith(self, schedule2, {
    onElement: (a) => some3(a),
    onSchedule: none2
  }), identity));
  repeatElementsWith = /* @__PURE__ */ dual(3, (self, schedule2, options) => {
    const driver3 = pipe(driver2(schedule2), map26((driver4) => {
      const feed = (input) => match2(head3(input), {
        onNone: () => loop4,
        onSome: (a) => zipRight8(write2(of3(options.onElement(a))), step4(pipe(input, drop3(1)), a))
      });
      const step4 = (input, a) => {
        const advance = pipe(driver4.next(a), as8(pipe(write2(of3(options.onElement(a))), flatMap20(() => step4(input, a)))));
        const reset3 = pipe(driver4.last, orDie4, flatMap18((b) => pipe(driver4.reset, map26(() => pipe(write2(of3(options.onSchedule(b))), zipRight8(feed(input)))))));
        return pipe(advance, orElse8(() => reset3), unwrap2);
      };
      const loop4 = readWith({
        onInput: feed,
        onFailure: fail14,
        onDone: () => void_8
      });
      return loop4;
    }), unwrap2);
    return new StreamImpl(pipe(toChannel2(self), pipeTo(driver3)));
  });
  repeatWith = /* @__PURE__ */ dual(3, (self, schedule2, options) => {
    return pipe(driver2(schedule2), map26((driver3) => {
      const scheduleOutput = pipe(driver3.last, orDie4, map26(options.onSchedule));
      const process3 = pipe(self, map33(options.onElement), toChannel2);
      const loop4 = unwrap2(match20(driver3.next(undefined), {
        onFailure: () => void_8,
        onSuccess: () => pipe(process3, zipRight8(pipe(scheduleOutput, map26((c) => pipe(write2(of3(c)), flatMap20(() => loop4))), unwrap2)))
      }));
      return new StreamImpl(pipe(process3, zipRight8(loop4)));
    }), unwrap4);
  });
  retry7 = /* @__PURE__ */ dual(2, (self, schedule2) => driver2(schedule2).pipe(map26((driver3) => {
    const loop4 = toChannel2(self).pipe(mapOutEffect((out) => as8(driver3.reset, out)), catchAll6((error3) => driver3.next(error3).pipe(match20({
      onFailure: () => fail14(error3),
      onSuccess: () => loop4
    }), unwrap2)));
    return loop4;
  }), unwrap2, fromChannel2));
  run4 = /* @__PURE__ */ dual(2, (self, sink) => toChannel2(self).pipe(pipeToOrFail(toChannel(sink)), runDrain));
  runFold = /* @__PURE__ */ dual(3, (self, s, f) => runFoldWhile(self, s, constTrue, f));
  runFoldEffect = /* @__PURE__ */ dual(3, (self, s, f) => runFoldWhileEffect(self, s, constTrue, f));
  runFoldScoped = /* @__PURE__ */ dual(3, (self, s, f) => pipe(self, runFoldWhileScoped(s, constTrue, f)));
  runFoldScopedEffect = /* @__PURE__ */ dual(3, (self, s, f) => pipe(self, runFoldWhileScopedEffect(s, constTrue, f)));
  runFoldWhile = /* @__PURE__ */ dual(4, (self, s, cont, f) => run4(self, fold(s, cont, f)));
  runFoldWhileEffect = /* @__PURE__ */ dual(4, (self, s, cont, f) => run4(self, foldEffect(s, cont, f)));
  runFoldWhileScoped = /* @__PURE__ */ dual(4, (self, s, cont, f) => pipe(self, runScoped2(fold(s, cont, f))));
  runFoldWhileScopedEffect = /* @__PURE__ */ dual(4, (self, s, cont, f) => pipe(self, runScoped2(foldEffect(s, cont, f))));
  runForEach = /* @__PURE__ */ dual(2, (self, f) => run4(self, forEach17(f)));
  runForEachChunk = /* @__PURE__ */ dual(2, (self, f) => run4(self, forEachChunk(f)));
  runForEachChunkScoped = /* @__PURE__ */ dual(2, (self, f) => pipe(self, runScoped2(forEachChunk(f))));
  runForEachScoped = /* @__PURE__ */ dual(2, (self, f) => pipe(self, runScoped2(forEach17(f))));
  runForEachWhile = /* @__PURE__ */ dual(2, (self, f) => run4(self, forEachWhile(f)));
  runForEachWhileScoped = /* @__PURE__ */ dual(2, (self, f) => pipe(self, runScoped2(forEachWhile(f))));
  runIntoPubSub = /* @__PURE__ */ dual(2, (self, pubsub) => pipe(self, runIntoQueue(pubsub)));
  runIntoPubSubScoped = /* @__PURE__ */ dual(2, (self, pubsub) => pipe(self, runIntoQueueScoped(pubsub)));
  runIntoQueue = /* @__PURE__ */ dual(2, (self, queue) => pipe(self, runIntoQueueScoped(queue), scoped4));
  runIntoQueueElementsScoped = /* @__PURE__ */ dual(2, (self, queue) => {
    const writer = readWithCause({
      onInput: (input) => flatMap20(fromEffect5(offerAll3(queue, map7(input, succeed3))), () => writer),
      onFailure: (cause3) => fromEffect5(offer3(queue, failCause3(map22(cause3, some3)))),
      onDone: () => fromEffect5(offer3(queue, fail4(none2())))
    });
    return pipe(pipeTo(toChannel2(self), writer), drain, runScoped, asVoid6);
  });
  runIntoQueueScoped = /* @__PURE__ */ dual(2, (self, queue) => {
    const writer = readWithCause({
      onInput: (input) => flatMap20(write2(chunk3(input)), () => writer),
      onFailure: (cause3) => write2(failCause14(cause3)),
      onDone: () => write2(end4)
    });
    return pipe(pipeTo(toChannel2(self), writer), mapOutEffect((take11) => offer3(queue, take11)), drain, runScoped, asVoid6);
  });
  runScoped2 = /* @__PURE__ */ dual(2, (self, sink) => pipe(toChannel2(self), pipeToOrFail(toChannel(sink)), drain, runScoped));
  scan3 = /* @__PURE__ */ dual(3, (self, s, f) => pipe(self, scanEffect(s, (s2, a) => succeed13(f(s2, a)))));
  scanReduce = /* @__PURE__ */ dual(2, (self, f) => pipe(self, scanReduceEffect((a2, a) => succeed13(f(a2, a)))));
  scanReduceEffect = /* @__PURE__ */ dual(2, (self, f) => pipe(self, mapAccumEffect(none2(), (option6, a) => {
    switch (option6._tag) {
      case "None": {
        return succeed13([some3(a), a]);
      }
      case "Some": {
        return pipe(f(option6.value, a), map26((b) => [some3(b), b]));
      }
    }
  })));
  schedule2 = /* @__PURE__ */ dual(2, (self, schedule3) => filterMap12(scheduleWith(self, schedule3, {
    onElement: some3,
    onSchedule: none2
  }), identity));
  scheduleWith = /* @__PURE__ */ dual(3, (self, schedule3, options) => {
    const loop4 = (driver3, iterator) => {
      const next4 = iterator.next();
      if (next4.done) {
        return readWithCause({
          onInput: (chunk4) => loop4(driver3, chunk4[Symbol.iterator]()),
          onFailure: failCause12,
          onDone: succeedNow
        });
      }
      return unwrap2(matchEffect4(driver3.next(next4.value), {
        onFailure: () => pipe(driver3.last, orDie4, map26((b) => pipe(write2(make9(options.onElement(next4.value), options.onSchedule(b))), flatMap20(() => loop4(driver3, iterator)))), zipLeft7(driver3.reset)),
        onSuccess: () => succeed13(pipe(write2(of3(options.onElement(next4.value))), flatMap20(() => loop4(driver3, iterator))))
      }));
    };
    return new StreamImpl(pipe(fromEffect5(driver2(schedule3)), flatMap20((driver3) => pipe(toChannel2(self), pipeTo(loop4(driver3, empty7()[Symbol.iterator]()))))));
  });
  scanEffect = /* @__PURE__ */ dual(3, (self, s, f) => new StreamImpl(pipe(write2(of3(s)), flatMap20(() => toChannel2(pipe(self, mapAccumEffect(s, (s2, a) => pipe(f(s2, a), map26((s3) => [s3, s3])))))))));
  someOrElse = /* @__PURE__ */ dual(2, (self, fallback) => pipe(self, map33(getOrElse2(fallback))));
  someOrFail = /* @__PURE__ */ dual(2, (self, error3) => mapEffectSequential(self, match2({
    onNone: () => failSync5(error3),
    onSome: succeed13
  })));
  sliding9 = /* @__PURE__ */ dual(2, (self, chunkSize) => slidingSize(self, chunkSize, 1));
  slidingSize = /* @__PURE__ */ dual(3, (self, chunkSize, stepSize) => {
    if (chunkSize <= 0 || stepSize <= 0) {
      return die14(new IllegalArgumentException2("Invalid bounds - `chunkSize` and `stepSize` must be greater than zero"));
    }
    return new StreamImpl(suspend6(() => {
      const queue = new RingBuffer(chunkSize);
      const emitOnStreamEnd = (queueSize, channelEnd) => {
        if (queueSize < chunkSize) {
          const items = queue.toChunk();
          const result3 = isEmpty2(items) ? empty7() : of3(items);
          return pipe(write2(result3), flatMap20(() => channelEnd));
        }
        const lastEmitIndex = queueSize - (queueSize - chunkSize) % stepSize;
        if (lastEmitIndex === queueSize) {
          return channelEnd;
        }
        const leftovers = queueSize - (lastEmitIndex - chunkSize + stepSize);
        const lastItems = pipe(queue.toChunk(), takeRight2(leftovers));
        const result2 = isEmpty2(lastItems) ? empty7() : of3(lastItems);
        return pipe(write2(result2), flatMap20(() => channelEnd));
      };
      const reader = (queueSize) => readWithCause({
        onInput: (input) => flatMap20(write2(filterMap5(input, (element, index) => {
          queue.put(element);
          const currentIndex = queueSize + index + 1;
          if (currentIndex < chunkSize || (currentIndex - chunkSize) % stepSize > 0) {
            return none2();
          }
          return some3(queue.toChunk());
        })), () => reader(queueSize + input.length)),
        onFailure: (cause3) => emitOnStreamEnd(queueSize, failCause12(cause3)),
        onDone: () => emitOnStreamEnd(queueSize, void_8)
      });
      return pipe(toChannel2(self), pipeTo(reader(0)));
    }));
  });
  split4 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const split5 = (leftovers, input) => {
      const [chunk4, remaining] = pipe(leftovers, appendAll3(input), splitWhere2(predicate));
      if (isEmpty2(chunk4) || isEmpty2(remaining)) {
        return loop4(pipe(chunk4, appendAll3(pipe(remaining, drop3(1)))));
      }
      return pipe(write2(of3(chunk4)), flatMap20(() => split5(empty7(), pipe(remaining, drop3(1)))));
    };
    const loop4 = (leftovers) => readWith({
      onInput: (input) => split5(leftovers, input),
      onFailure: fail14,
      onDone: () => {
        if (isEmpty2(leftovers)) {
          return void_8;
        }
        if (isNone2(pipe(leftovers, findFirst3(predicate)))) {
          return zipRight8(write2(of3(leftovers)), void_8);
        }
        return zipRight8(split5(empty7(), leftovers), void_8);
      }
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(loop4(empty7()))));
  });
  splitOnChunk = /* @__PURE__ */ dual(2, (self, delimiter) => {
    const next4 = (leftover2, delimiterIndex) => readWithCause({
      onInput: (inputChunk) => {
        let buffer3;
        const [carry, delimiterCursor] = pipe(inputChunk, reduce4([pipe(leftover2, getOrElse2(() => empty7())), delimiterIndex], ([carry2, delimiterCursor2], a) => {
          const concatenated = pipe(carry2, append3(a));
          if (delimiterCursor2 < delimiter.length && equals(a, pipe(delimiter, unsafeGet4(delimiterCursor2)))) {
            if (delimiterCursor2 + 1 === delimiter.length) {
              if (buffer3 === undefined) {
                buffer3 = [];
              }
              buffer3.push(pipe(concatenated, take3(concatenated.length - delimiter.length)));
              return [empty7(), 0];
            }
            return [concatenated, delimiterCursor2 + 1];
          }
          return [concatenated, equals(a, pipe(delimiter, unsafeGet4(0))) ? 1 : 0];
        }));
        const output = buffer3 === undefined ? empty7() : unsafeFromArray(buffer3);
        return flatMap20(write2(output), () => next4(isNonEmpty2(carry) ? some3(carry) : none2(), delimiterCursor));
      },
      onFailure: (cause3) => match2(leftover2, {
        onNone: () => failCause12(cause3),
        onSome: (chunk4) => zipRight8(write2(of3(chunk4)), failCause12(cause3))
      }),
      onDone: (done12) => match2(leftover2, {
        onNone: () => succeed15(done12),
        onSome: (chunk4) => zipRight8(write2(of3(chunk4)), succeed15(done12))
      })
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(next4(none2(), 0))));
  });
  take11 = /* @__PURE__ */ dual(2, (self, n) => {
    if (!Number.isInteger(n)) {
      return die14(new IllegalArgumentException2(`${n} must be an integer`));
    }
    const loop4 = (n2) => readWith({
      onInput: (input) => {
        const taken = pipe(input, take3(Math.min(n2, Number.POSITIVE_INFINITY)));
        const leftover2 = Math.max(0, n2 - taken.length);
        const more = leftover2 > 0;
        if (more) {
          return pipe(write2(taken), flatMap20(() => loop4(leftover2)));
        }
        return write2(taken);
      },
      onFailure: fail14,
      onDone: succeed15
    });
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(0 < n ? loop4(n) : void_8)));
  });
  takeRight4 = /* @__PURE__ */ dual(2, (self, n) => {
    if (n <= 0) {
      return empty43;
    }
    return new StreamImpl(pipe(succeed13(new RingBuffer(n)), map26((queue) => {
      const reader = readWith({
        onInput: (input) => {
          for (const element of input) {
            queue.put(element);
          }
          return reader;
        },
        onFailure: fail14,
        onDone: () => pipe(write2(queue.toChunk()), zipRight8(void_8))
      });
      return pipe(toChannel2(self), pipeTo(reader));
    }), unwrap2));
  });
  takeUntil3 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const loop4 = readWith({
      onInput: (input) => {
        const taken = pipe(input, takeWhile3((a) => !predicate(a)));
        const last7 = pipe(input, drop3(taken.length), take3(1));
        if (isEmpty2(last7)) {
          return pipe(write2(taken), flatMap20(() => loop4));
        }
        return write2(pipe(taken, appendAll3(last7)));
      },
      onFailure: fail14,
      onDone: succeed15
    });
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(loop4)));
  });
  takeUntilEffect = /* @__PURE__ */ dual(2, (self, predicate) => {
    const loop4 = (iterator) => {
      const next4 = iterator.next();
      if (next4.done) {
        return readWithCause({
          onInput: (elem) => loop4(elem[Symbol.iterator]()),
          onFailure: failCause12,
          onDone: succeed15
        });
      }
      return pipe(predicate(next4.value), map26((bool) => bool ? write2(of3(next4.value)) : pipe(write2(of3(next4.value)), flatMap20(() => loop4(iterator)))), unwrap2);
    };
    return new StreamImpl(pipe(toChannel2(self), pipeTo(loop4(empty7()[Symbol.iterator]()))));
  });
  takeWhile6 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const loop4 = readWith({
      onInput: (input) => {
        const taken = pipe(input, takeWhile3(predicate));
        const more = taken.length === input.length;
        if (more) {
          return pipe(write2(taken), flatMap20(() => loop4));
        }
        return write2(taken);
      },
      onFailure: fail14,
      onDone: succeed15
    });
    return new StreamImpl(pipe(toChannel2(self), pipeToOrFail(loop4)));
  });
  tap9 = /* @__PURE__ */ dual(2, (self, f) => mapEffectSequential(self, (a) => as8(f(a), a)));
  tapBoth4 = /* @__PURE__ */ dual(2, (self, options) => pipe(self, tapError7(options.onFailure), tap9(options.onSuccess)));
  tapError7 = /* @__PURE__ */ dual(2, (self, f) => catchAll8(self, (error3) => fromEffect9(zipRight7(f(error3), fail12(error3)))));
  tapErrorCause6 = /* @__PURE__ */ dual(2, (self, f) => {
    const loop4 = readWithCause({
      onInput: (chunk4) => flatMap20(write2(chunk4), () => loop4),
      onFailure: (cause3) => fromEffect5(zipRight7(f(cause3), failCause10(cause3))),
      onDone: succeedNow
    });
    return new StreamImpl(pipe(toChannel2(self), pipeTo(loop4)));
  });
  tapSink = /* @__PURE__ */ dual(2, (self, sink) => pipe(fromEffect9(all11([bounded5(1), make24()])), flatMap23(([queue, deferred]) => {
    const right3 = flattenTake(fromQueue3(queue, {
      maxChunkSize: 1
    }));
    const loop4 = readWithCause({
      onInput: (chunk4) => pipe(fromEffect5(offer3(queue, chunk3(chunk4))), foldCauseChannel({
        onFailure: () => flatMap20(write2(chunk4), () => identityChannel()),
        onSuccess: () => flatMap20(write2(chunk4), () => loop4)
      })),
      onFailure: (cause3) => pipe(fromEffect5(offer3(queue, failCause14(cause3))), foldCauseChannel({
        onFailure: () => failCause12(cause3),
        onSuccess: () => failCause12(cause3)
      })),
      onDone: () => pipe(fromEffect5(offer3(queue, end4)), foldCauseChannel({
        onFailure: () => void_8,
        onSuccess: () => void_8
      }))
    });
    return pipe(new StreamImpl(pipe(pipeTo(toChannel2(self), loop4), ensuring5(zipRight7(forkDaemon3(offer3(queue, end4)), _await(deferred))))), merge10(execute(pipe(run4(right3, sink), ensuring4(zipRight7(shutdown4(queue), succeed2(deferred, undefined)))))));
  })));
  throttle = /* @__PURE__ */ dual(2, (self, options) => throttleEffect(self, {
    ...options,
    cost: (chunk4) => succeed13(options.cost(chunk4))
  }));
  throttleEffect = /* @__PURE__ */ dual(2, (self, options) => {
    if (options.strategy === "enforce") {
      return throttleEnforceEffect(self, options.cost, options.units, options.duration, options.burst ?? 0);
    }
    return throttleShapeEffect(self, options.cost, options.units, options.duration, options.burst ?? 0);
  });
  timeout4 = /* @__PURE__ */ dual(2, (self, duration3) => pipe(toPull2(self), map26(timeoutFail2({
    onTimeout: () => none2(),
    duration: duration3
  })), fromPull2));
  timeoutFail3 = /* @__PURE__ */ dual(3, (self, error3, duration3) => pipe(self, timeoutTo3(duration3, failSync10(error3))));
  timeoutFailCause3 = /* @__PURE__ */ dual(3, (self, cause3, duration3) => pipe(toPull2(self), map26(timeoutFailCause2({
    onTimeout: () => map22(cause3(), some3),
    duration: duration3
  })), fromPull2));
  timeoutTo3 = /* @__PURE__ */ dual(3, (self, duration3, that) => {
    const StreamTimeout = new RuntimeException2("Stream Timeout");
    return pipe(self, timeoutFailCause3(() => die6(StreamTimeout), duration3), catchSomeCause3((cause3) => isDieType2(cause3) && isRuntimeException2(cause3.defect) && cause3.defect.message !== undefined && cause3.defect.message === "Stream Timeout" ? some3(that) : none2()));
  });
  toPubSub2 = /* @__PURE__ */ dual(2, (self, capacity10) => pipe(acquireRelease3(pubsubFromOptions(capacity10), (pubsub) => shutdown3(pubsub)), tap5((pubsub) => pipe(self, runIntoPubSubScoped(pubsub), forkScoped3))));
  toQueue2 = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, options) => tap5(acquireRelease3(options?.strategy === "unbounded" ? unbounded5() : options?.strategy === "dropping" ? dropping4(options.capacity ?? 2) : options?.strategy === "sliding" ? sliding4(options.capacity ?? 2) : bounded5(options?.capacity ?? 2), (queue) => shutdown4(queue)), (queue) => forkScoped3(runIntoQueueScoped(self, queue))));
  toQueueOfElements = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, options) => tap5(acquireRelease3(bounded5(options?.capacity ?? 2), (queue) => shutdown4(queue)), (queue) => forkScoped3(runIntoQueueElementsScoped(self, queue))));
  toReadableStream = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, options) => toReadableStreamRuntime(self, defaultRuntime2, options));
  toReadableStreamEffect = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, options) => map26(runtime4(), (runtime5) => toReadableStreamRuntime(self, runtime5, options)));
  toReadableStreamRuntime = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, runtime5, options) => {
    const runFork4 = runFork3(runtime5);
    let currentResolve = undefined;
    let fiber = undefined;
    const latch = unsafeMakeLatch2(false);
    return new ReadableStream({
      start(controller) {
        fiber = runFork4(runForEachChunk(self, (chunk4) => latch.whenOpen(sync8(() => {
          latch.unsafeClose();
          for (const item of chunk4) {
            controller.enqueue(item);
          }
          currentResolve();
          currentResolve = undefined;
        }))));
        fiber.addObserver((exit4) => {
          if (exit4._tag === "Failure") {
            controller.error(squash(exit4.cause));
          } else {
            controller.close();
          }
        });
      },
      pull() {
        return new Promise((resolve) => {
          currentResolve = resolve;
          runSync2(latch.open);
        });
      },
      cancel() {
        if (!fiber)
          return;
        return runPromise2(asVoid6(interrupt7(fiber)));
      }
    }, options?.strategy);
  });
  transduce = /* @__PURE__ */ dual(2, (self, sink) => {
    const newChannel = suspend6(() => {
      const leftovers = {
        ref: empty7()
      };
      const upstreamDone = {
        ref: false
      };
      const buffer3 = suspend6(() => {
        const leftover2 = leftovers.ref;
        if (isEmpty2(leftover2)) {
          return readWith({
            onInput: (input) => pipe(write2(input), flatMap20(() => buffer3)),
            onFailure: fail14,
            onDone: succeedNow
          });
        }
        leftovers.ref = empty7();
        return pipe(writeChunk(leftover2), flatMap20(() => buffer3));
      });
      const concatAndGet = (chunk4) => {
        const leftover2 = leftovers.ref;
        const concatenated = appendAll3(leftover2, filter5(chunk4, (chunk5) => chunk5.length !== 0));
        leftovers.ref = concatenated;
        return concatenated;
      };
      const upstreamMarker = readWith({
        onInput: (input) => flatMap20(write2(input), () => upstreamMarker),
        onFailure: fail14,
        onDone: (done12) => zipRight8(sync10(() => {
          upstreamDone.ref = true;
        }), succeedNow(done12))
      });
      const transducer = pipe(sink, toChannel, collectElements, flatMap20(([leftover2, z2]) => pipe(succeed15([upstreamDone.ref, concatAndGet(leftover2)]), flatMap20(([done12, newLeftovers]) => {
        const nextChannel = done12 && isEmpty2(newLeftovers) ? void_8 : transducer;
        return pipe(write2(of3(z2)), flatMap20(() => nextChannel));
      }))));
      return pipe(toChannel2(self), pipeTo(upstreamMarker), pipeTo(buffer3), pipeToOrFail(transducer));
    });
    return new StreamImpl(newChannel);
  });
  void_10 = /* @__PURE__ */ succeed20(undefined);
  updateService6 = /* @__PURE__ */ dual(3, (self, tag, f) => pipe(self, mapInputContext7((context11) => pipe(context11, add2(tag, f(pipe(context11, unsafeGet3(tag))))))));
  when5 = /* @__PURE__ */ dual(2, (self, test) => pipe(self, whenEffect3(sync8(test))));
  whenCaseEffect = /* @__PURE__ */ dual(2, (self, pf) => pipe(fromEffect9(self), flatMap23((a) => pipe(pf(a), getOrElse2(() => empty43)))));
  whenEffect3 = /* @__PURE__ */ dual(2, (self, effect4) => pipe(fromEffect9(effect4), flatMap23((bool) => bool ? self : empty43)));
  zip16 = /* @__PURE__ */ dual(2, (self, that) => pipe(self, zipWith17(that, (a, a2) => [a, a2])));
  zipFlatten = /* @__PURE__ */ dual(2, (self, that) => pipe(self, zipWith17(that, (a, a2) => [...a, a2])));
  zipAll = /* @__PURE__ */ dual(2, (self, options) => zipAllWith(self, {
    other: options.other,
    onSelf: (a) => [a, options.defaultOther],
    onOther: (a2) => [options.defaultSelf, a2],
    onBoth: (a, a2) => [a, a2]
  }));
  zipAllLeft = /* @__PURE__ */ dual(3, (self, other, defaultSelf) => zipAllWith(self, {
    other,
    onSelf: identity,
    onOther: () => defaultSelf,
    onBoth: (a) => a
  }));
  zipAllRight = /* @__PURE__ */ dual(3, (self, other, defaultRight) => zipAllWith(self, {
    other,
    onSelf: () => defaultRight,
    onOther: identity,
    onBoth: (_, a2) => a2
  }));
  zipAllSortedByKey = /* @__PURE__ */ dual(2, (self, options) => zipAllSortedByKeyWith(self, {
    other: options.other,
    onSelf: (a) => [a, options.defaultOther],
    onOther: (a2) => [options.defaultSelf, a2],
    onBoth: (a, a2) => [a, a2],
    order: options.order
  }));
  zipAllSortedByKeyLeft = /* @__PURE__ */ dual(2, (self, options) => zipAllSortedByKeyWith(self, {
    other: options.other,
    onSelf: identity,
    onOther: () => options.defaultSelf,
    onBoth: (a) => a,
    order: options.order
  }));
  zipAllSortedByKeyRight = /* @__PURE__ */ dual(2, (self, options) => zipAllSortedByKeyWith(self, {
    other: options.other,
    onSelf: () => options.defaultOther,
    onOther: identity,
    onBoth: (_, a2) => a2,
    order: options.order
  }));
  zipAllSortedByKeyWith = /* @__PURE__ */ dual(2, (self, options) => {
    const pull = (state, pullLeft, pullRight) => {
      switch (state._tag) {
        case OP_DRAIN_LEFT: {
          return pipe(pullLeft, match20({
            onFailure: fail4,
            onSuccess: (leftChunk) => succeed3([map7(leftChunk, ([k, a]) => [k, options.onSelf(a)]), DrainLeft])
          }));
        }
        case OP_DRAIN_RIGHT: {
          return pipe(pullRight, match20({
            onFailure: fail4,
            onSuccess: (rightChunk) => succeed3([map7(rightChunk, ([k, a2]) => [k, options.onOther(a2)]), DrainRight])
          }));
        }
        case OP_PULL_BOTH: {
          return pipe(unsome2(pullLeft), zip12(unsome2(pullRight), {
            concurrent: true
          }), matchEffect4({
            onFailure: (error3) => succeed13(fail4(some3(error3))),
            onSuccess: ([leftOption, rightOption]) => {
              if (isSome2(leftOption) && isSome2(rightOption)) {
                if (isEmpty2(leftOption.value) && isEmpty2(rightOption.value)) {
                  return pull(PullBoth, pullLeft, pullRight);
                }
                if (isEmpty2(leftOption.value)) {
                  return pull(PullLeft(rightOption.value), pullLeft, pullRight);
                }
                if (isEmpty2(rightOption.value)) {
                  return pull(PullRight(leftOption.value), pullLeft, pullRight);
                }
                return succeed13(succeed3(merge11(leftOption.value, rightOption.value)));
              }
              if (isSome2(leftOption) && isNone2(rightOption)) {
                if (isEmpty2(leftOption.value)) {
                  return pull(DrainLeft, pullLeft, pullRight);
                }
                return succeed13(succeed3([pipe(leftOption.value, map7(([k, a]) => [k, options.onSelf(a)])), DrainLeft]));
              }
              if (isNone2(leftOption) && isSome2(rightOption)) {
                if (isEmpty2(rightOption.value)) {
                  return pull(DrainRight, pullLeft, pullRight);
                }
                return succeed13(succeed3([pipe(rightOption.value, map7(([k, a2]) => [k, options.onOther(a2)])), DrainRight]));
              }
              return succeed13(fail4(none2()));
            }
          }));
        }
        case OP_PULL_LEFT: {
          return matchEffect4(pullLeft, {
            onFailure: match2({
              onNone: () => succeed13(succeed3([pipe(state.rightChunk, map7(([k, a2]) => [k, options.onOther(a2)])), DrainRight])),
              onSome: (error3) => succeed13(fail4(some3(error3)))
            }),
            onSuccess: (leftChunk) => isEmpty2(leftChunk) ? pull(PullLeft(state.rightChunk), pullLeft, pullRight) : succeed13(succeed3(merge11(leftChunk, state.rightChunk)))
          });
        }
        case OP_PULL_RIGHT: {
          return matchEffect4(pullRight, {
            onFailure: match2({
              onNone: () => succeed13(succeed3([map7(state.leftChunk, ([k, a]) => [k, options.onSelf(a)]), DrainLeft])),
              onSome: (error3) => succeed13(fail4(some3(error3)))
            }),
            onSuccess: (rightChunk) => isEmpty2(rightChunk) ? pull(PullRight(state.leftChunk), pullLeft, pullRight) : succeed13(succeed3(merge11(state.leftChunk, rightChunk)))
          });
        }
      }
    };
    const merge11 = (leftChunk, rightChunk) => {
      const hasNext = (chunk4, index) => index < chunk4.length - 1;
      const builder = [];
      let state = undefined;
      let leftIndex = 0;
      let rightIndex = 0;
      let leftTuple = pipe(leftChunk, unsafeGet4(leftIndex));
      let rightTuple = pipe(rightChunk, unsafeGet4(rightIndex));
      let k1 = leftTuple[0];
      let a = leftTuple[1];
      let k2 = rightTuple[0];
      let a2 = rightTuple[1];
      let loop4 = true;
      while (loop4) {
        const compare = options.order(k1, k2);
        if (compare === 0) {
          builder.push([k1, options.onBoth(a, a2)]);
          if (hasNext(leftChunk, leftIndex) && hasNext(rightChunk, rightIndex)) {
            leftIndex = leftIndex + 1;
            rightIndex = rightIndex + 1;
            leftTuple = pipe(leftChunk, unsafeGet4(leftIndex));
            rightTuple = pipe(rightChunk, unsafeGet4(rightIndex));
            k1 = leftTuple[0];
            a = leftTuple[1];
            k2 = rightTuple[0];
            a2 = rightTuple[1];
          } else if (hasNext(leftChunk, leftIndex)) {
            state = PullRight(pipe(leftChunk, drop3(leftIndex + 1)));
            loop4 = false;
          } else if (hasNext(rightChunk, rightIndex)) {
            state = PullLeft(pipe(rightChunk, drop3(rightIndex + 1)));
            loop4 = false;
          } else {
            state = PullBoth;
            loop4 = false;
          }
        } else if (compare < 0) {
          builder.push([k1, options.onSelf(a)]);
          if (hasNext(leftChunk, leftIndex)) {
            leftIndex = leftIndex + 1;
            leftTuple = pipe(leftChunk, unsafeGet4(leftIndex));
            k1 = leftTuple[0];
            a = leftTuple[1];
          } else {
            const rightBuilder = [];
            rightBuilder.push(rightTuple);
            while (hasNext(rightChunk, rightIndex)) {
              rightIndex = rightIndex + 1;
              rightTuple = pipe(rightChunk, unsafeGet4(rightIndex));
              rightBuilder.push(rightTuple);
            }
            state = PullLeft(unsafeFromArray(rightBuilder));
            loop4 = false;
          }
        } else {
          builder.push([k2, options.onOther(a2)]);
          if (hasNext(rightChunk, rightIndex)) {
            rightIndex = rightIndex + 1;
            rightTuple = pipe(rightChunk, unsafeGet4(rightIndex));
            k2 = rightTuple[0];
            a2 = rightTuple[1];
          } else {
            const leftBuilder = [];
            leftBuilder.push(leftTuple);
            while (hasNext(leftChunk, leftIndex)) {
              leftIndex = leftIndex + 1;
              leftTuple = pipe(leftChunk, unsafeGet4(leftIndex));
              leftBuilder.push(leftTuple);
            }
            state = PullRight(unsafeFromArray(leftBuilder));
            loop4 = false;
          }
        }
      }
      return [unsafeFromArray(builder), state];
    };
    return combineChunks(self, options.other, PullBoth, pull);
  });
  zipAllWith = /* @__PURE__ */ dual(2, (self, options) => {
    const pull = (state, pullLeft, pullRight) => {
      switch (state._tag) {
        case OP_DRAIN_LEFT: {
          return matchEffect4(pullLeft, {
            onFailure: (error3) => succeed13(fail4(error3)),
            onSuccess: (leftChunk) => succeed13(succeed3([map7(leftChunk, options.onSelf), DrainLeft]))
          });
        }
        case OP_DRAIN_RIGHT: {
          return matchEffect4(pullRight, {
            onFailure: (error3) => succeed13(fail4(error3)),
            onSuccess: (rightChunk) => succeed13(succeed3([map7(rightChunk, options.onOther), DrainRight]))
          });
        }
        case OP_PULL_BOTH: {
          return pipe(unsome2(pullLeft), zip12(unsome2(pullRight), {
            concurrent: true
          }), matchEffect4({
            onFailure: (error3) => succeed13(fail4(some3(error3))),
            onSuccess: ([leftOption, rightOption]) => {
              if (isSome2(leftOption) && isSome2(rightOption)) {
                if (isEmpty2(leftOption.value) && isEmpty2(rightOption.value)) {
                  return pull(PullBoth, pullLeft, pullRight);
                }
                if (isEmpty2(leftOption.value)) {
                  return pull(PullLeft(rightOption.value), pullLeft, pullRight);
                }
                if (isEmpty2(rightOption.value)) {
                  return pull(PullRight(leftOption.value), pullLeft, pullRight);
                }
                return succeed13(succeed3(zip17(leftOption.value, rightOption.value, options.onBoth)));
              }
              if (isSome2(leftOption) && isNone2(rightOption)) {
                return succeed13(succeed3([map7(leftOption.value, options.onSelf), DrainLeft]));
              }
              if (isNone2(leftOption) && isSome2(rightOption)) {
                return succeed13(succeed3([map7(rightOption.value, options.onOther), DrainRight]));
              }
              return succeed13(fail4(none2()));
            }
          }));
        }
        case OP_PULL_LEFT: {
          return matchEffect4(pullLeft, {
            onFailure: match2({
              onNone: () => succeed13(succeed3([map7(state.rightChunk, options.onOther), DrainRight])),
              onSome: (error3) => succeed13(fail4(some3(error3)))
            }),
            onSuccess: (leftChunk) => {
              if (isEmpty2(leftChunk)) {
                return pull(PullLeft(state.rightChunk), pullLeft, pullRight);
              }
              if (isEmpty2(state.rightChunk)) {
                return pull(PullRight(leftChunk), pullLeft, pullRight);
              }
              return succeed13(succeed3(zip17(leftChunk, state.rightChunk, options.onBoth)));
            }
          });
        }
        case OP_PULL_RIGHT: {
          return matchEffect4(pullRight, {
            onFailure: match2({
              onNone: () => succeed13(succeed3([map7(state.leftChunk, options.onSelf), DrainLeft])),
              onSome: (error3) => succeed13(fail4(some3(error3)))
            }),
            onSuccess: (rightChunk) => {
              if (isEmpty2(rightChunk)) {
                return pull(PullRight(state.leftChunk), pullLeft, pullRight);
              }
              if (isEmpty2(state.leftChunk)) {
                return pull(PullLeft(rightChunk), pullLeft, pullRight);
              }
              return succeed13(succeed3(zip17(state.leftChunk, rightChunk, options.onBoth)));
            }
          });
        }
      }
    };
    const zip17 = (leftChunk, rightChunk, f) => {
      const [output, either10] = zipChunks(leftChunk, rightChunk, f);
      switch (either10._tag) {
        case "Left": {
          if (isEmpty2(either10.left)) {
            return [output, PullBoth];
          }
          return [output, PullRight(either10.left)];
        }
        case "Right": {
          if (isEmpty2(either10.right)) {
            return [output, PullBoth];
          }
          return [output, PullLeft(either10.right)];
        }
      }
    };
    return combineChunks(self, options.other, PullBoth, pull);
  });
  zipLatest = /* @__PURE__ */ dual(2, (left3, right3) => pipe(left3, zipLatestWith(right3, (a, a2) => [a, a2])));
  zipLatestWith = /* @__PURE__ */ dual(3, (left3, right3, f) => {
    const pullNonEmpty = (pull) => pipe(pull, flatMap18((chunk4) => isEmpty2(chunk4) ? pullNonEmpty(pull) : succeed13(chunk4)));
    return pipe(toPull2(left3), map26(pullNonEmpty), zip12(pipe(toPull2(right3), map26(pullNonEmpty))), flatMap18(([left4, right4]) => pipe(fromEffectOption(raceWith2(left4, right4, {
      onSelfDone: (leftDone, rightFiber) => pipe(suspend4(() => leftDone), zipWith12(join4(rightFiber), (l, r) => [l, r, true])),
      onOtherDone: (rightDone, leftFiber) => pipe(suspend4(() => rightDone), zipWith12(join4(leftFiber), (l, r) => [r, l, false]))
    })), flatMap23(([l, r, leftFirst]) => pipe(fromEffect9(make37([unsafeLast(l), unsafeLast(r)])), flatMap23((latest) => pipe(fromChunk(leftFirst ? pipe(r, map7((a2) => f(unsafeLast(l), a2))) : pipe(l, map7((a) => f(a, unsafeLast(r))))), concat3(pipe(repeatEffectOption(left4), mergeEither(repeatEffectOption(right4)), mapEffectSequential(match({
      onLeft: (leftChunk) => pipe(modify8(latest, ([_, rightLatest]) => [pipe(leftChunk, map7((a) => f(a, rightLatest))), [unsafeLast(leftChunk), rightLatest]])),
      onRight: (rightChunk) => pipe(modify8(latest, ([leftLatest, _]) => [pipe(rightChunk, map7((a2) => f(leftLatest, a2))), [leftLatest, unsafeLast(rightChunk)]]))
    })), flatMap23(fromChunk))))))), toPull2)), fromPull2);
  });
  zipLeft12 = /* @__PURE__ */ dual(2, (left3, right3) => pipe(left3, zipWithChunks(right3, (left4, right4) => {
    if (left4.length > right4.length) {
      return [pipe(left4, take3(right4.length)), left2(pipe(left4, take3(right4.length)))];
    }
    return [left4, right2(pipe(right4, drop3(left4.length)))];
  })));
  zipRight12 = /* @__PURE__ */ dual(2, (left3, right3) => pipe(left3, zipWithChunks(right3, (left4, right4) => {
    if (left4.length > right4.length) {
      return [right4, left2(pipe(left4, take3(right4.length)))];
    }
    return [pipe(right4, take3(left4.length)), right2(pipe(right4, drop3(left4.length)))];
  })));
  zipWith17 = /* @__PURE__ */ dual(3, (left3, right3, f) => pipe(left3, zipWithChunks(right3, (leftChunk, rightChunk) => zipChunks(leftChunk, rightChunk, f))));
  zipWithChunks = /* @__PURE__ */ dual(3, (self, that, f) => {
    const pull = (state, pullLeft, pullRight) => {
      switch (state._tag) {
        case OP_PULL_BOTH2: {
          return pipe(unsome2(pullLeft), zip12(unsome2(pullRight), {
            concurrent: true
          }), matchEffect4({
            onFailure: (error3) => succeed13(fail4(some3(error3))),
            onSuccess: ([leftOption, rightOption]) => {
              if (isSome2(leftOption) && isSome2(rightOption)) {
                if (isEmpty2(leftOption.value) && isEmpty2(rightOption.value)) {
                  return pull(PullBoth2, pullLeft, pullRight);
                }
                if (isEmpty2(leftOption.value)) {
                  return pull(PullLeft2(rightOption.value), pullLeft, pullRight);
                }
                if (isEmpty2(rightOption.value)) {
                  return pull(PullRight2(leftOption.value), pullLeft, pullRight);
                }
                return succeed13(succeed3(zip17(leftOption.value, rightOption.value)));
              }
              return succeed13(fail4(none2()));
            }
          }));
        }
        case OP_PULL_LEFT2: {
          return matchEffect4(pullLeft, {
            onFailure: (error3) => succeed13(fail4(error3)),
            onSuccess: (leftChunk) => {
              if (isEmpty2(leftChunk)) {
                return pull(PullLeft2(state.rightChunk), pullLeft, pullRight);
              }
              if (isEmpty2(state.rightChunk)) {
                return pull(PullRight2(leftChunk), pullLeft, pullRight);
              }
              return succeed13(succeed3(zip17(leftChunk, state.rightChunk)));
            }
          });
        }
        case OP_PULL_RIGHT2: {
          return matchEffect4(pullRight, {
            onFailure: (error3) => succeed13(fail4(error3)),
            onSuccess: (rightChunk) => {
              if (isEmpty2(rightChunk)) {
                return pull(PullRight2(state.leftChunk), pullLeft, pullRight);
              }
              if (isEmpty2(state.leftChunk)) {
                return pull(PullLeft2(rightChunk), pullLeft, pullRight);
              }
              return succeed13(succeed3(zip17(state.leftChunk, rightChunk)));
            }
          });
        }
      }
    };
    const zip17 = (leftChunk, rightChunk) => {
      const [output, either10] = f(leftChunk, rightChunk);
      switch (either10._tag) {
        case "Left": {
          if (isEmpty2(either10.left)) {
            return [output, PullBoth2];
          }
          return [output, PullRight2(either10.left)];
        }
        case "Right": {
          if (isEmpty2(either10.right)) {
            return [output, PullBoth2];
          }
          return [output, PullLeft2(either10.right)];
        }
      }
    };
    return pipe(self, combineChunks(that, PullBoth2, pull));
  });
  Do7 = /* @__PURE__ */ succeed20({});
  bind9 = /* @__PURE__ */ dual((args2) => typeof args2[0] !== "string", (self, tag, f, options) => flatMap23(self, (k) => map33(f(k), (a) => ({
    ...k,
    [tag]: a
  })), options));
  bindTo9 = /* @__PURE__ */ bindTo(map33);
  let_9 = /* @__PURE__ */ let_(map33);
  decodeText = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, encoding = "utf-8") => suspend10(() => {
    const decoder = new TextDecoder(encoding);
    return map33(self, (s) => decoder.decode(s));
  }));
});

// node_modules/effect/dist/esm/Channel.js
var exports_Channel = {};
__export(exports_Channel, {
  zipRight: () => zipRight13,
  zipLeft: () => zipLeft13,
  zip: () => zip17,
  writeChunk: () => writeChunk2,
  writeAll: () => writeAll2,
  write: () => write3,
  withSpan: () => withSpan7,
  void: () => void_11,
  updateService: () => updateService7,
  unwrapScopedWith: () => unwrapScopedWith4,
  unwrapScoped: () => unwrapScoped6,
  unwrap: () => unwrap5,
  toStream: () => toStream,
  toSink: () => toSink,
  toQueue: () => toQueue3,
  toPullIn: () => toPullIn2,
  toPull: () => toPull3,
  toPubSub: () => toPubSub3,
  sync: () => sync15,
  suspend: () => suspend11,
  succeed: () => succeed21,
  splitLines: () => splitLines3,
  scopedWith: () => scopedWith5,
  scoped: () => scoped8,
  runScoped: () => runScoped3,
  runDrain: () => runDrain3,
  runCollect: () => runCollect3,
  run: () => run5,
  repeated: () => repeated2,
  readWithCause: () => readWithCause2,
  readWith: () => readWith2,
  readOrFail: () => readOrFail2,
  read: () => read3,
  provideSomeLayer: () => provideSomeLayer4,
  provideService: () => provideService11,
  provideLayer: () => provideLayer3,
  provideContext: () => provideContext9,
  pipeToOrFail: () => pipeToOrFail2,
  pipeTo: () => pipeTo2,
  orElse: () => orElse14,
  orDieWith: () => orDieWith6,
  orDie: () => orDie9,
  never: () => never9,
  mergeWith: () => mergeWith4,
  mergeOutWith: () => mergeOutWith2,
  mergeOut: () => mergeOut2,
  mergeMap: () => mergeMap2,
  mergeAllWith: () => mergeAllWith2,
  mergeAllUnboundedWith: () => mergeAllUnboundedWith2,
  mergeAllUnbounded: () => mergeAllUnbounded2,
  mergeAll: () => mergeAll10,
  mapOutEffectPar: () => mapOutEffectPar2,
  mapOutEffect: () => mapOutEffect2,
  mapOut: () => mapOut2,
  mapInputInEffect: () => mapInputInEffect2,
  mapInputIn: () => mapInputIn2,
  mapInputErrorEffect: () => mapInputErrorEffect2,
  mapInputError: () => mapInputError2,
  mapInputEffect: () => mapInputEffect5,
  mapInputContext: () => mapInputContext8,
  mapInput: () => mapInput10,
  mapErrorCause: () => mapErrorCause7,
  mapError: () => mapError11,
  mapEffect: () => mapEffect8,
  map: () => map34,
  isChannelException: () => isChannelException2,
  isChannel: () => isChannel2,
  interruptWhenDeferred: () => interruptWhenDeferred3,
  interruptWhen: () => interruptWhen3,
  identity: () => identity5,
  fromQueue: () => fromQueue4,
  fromPubSubScoped: () => fromPubSubScoped2,
  fromPubSub: () => fromPubSub4,
  fromOption: () => fromOption8,
  fromInput: () => fromInput4,
  fromEither: () => fromEither5,
  fromEffect: () => fromEffect10,
  foldChannel: () => foldChannel2,
  foldCauseChannel: () => foldCauseChannel2,
  flatten: () => flatten18,
  flatMap: () => flatMap24,
  failSync: () => failSync11,
  failCauseSync: () => failCauseSync10,
  failCause: () => failCause17,
  fail: () => fail20,
  ensuringWith: () => ensuringWith4,
  ensuring: () => ensuring10,
  emitCollect: () => emitCollect2,
  embedInput: () => embedInput2,
  drain: () => drain4,
  doneCollect: () => doneCollect2,
  contextWithEffect: () => contextWithEffect6,
  contextWithChannel: () => contextWithChannel2,
  contextWith: () => contextWith7,
  context: () => context11,
  concatOut: () => concatOut2,
  concatMapWithCustom: () => concatMapWithCustom2,
  concatMapWith: () => concatMapWith2,
  concatMap: () => concatMap2,
  concatAllWith: () => concatAllWith2,
  concatAll: () => concatAll3,
  collect: () => collect4,
  catchAllCause: () => catchAllCause8,
  catchAll: () => catchAll9,
  bufferChunk: () => bufferChunk2,
  buffer: () => buffer3,
  asVoid: () => asVoid10,
  as: () => as14,
  acquireUseRelease: () => acquireUseRelease6,
  acquireReleaseOut: () => acquireReleaseOut2,
  ChannelTypeId: () => ChannelTypeId4,
  ChannelExceptionTypeId: () => ChannelExceptionTypeId2,
  ChannelException: () => ChannelException2
});
var ChannelTypeId4, ChannelExceptionTypeId2, isChannel2, acquireUseRelease6, acquireReleaseOut2, as14, asVoid10, buffer3, bufferChunk2, catchAll9, catchAllCause8, concatAll3, concatAllWith2, concatMap2, concatMapWith2, concatMapWithCustom2, collect4, concatOut2, mapInput10, mapInputEffect5, mapInputError2, mapInputErrorEffect2, mapInputIn2, mapInputInEffect2, doneCollect2, drain4, embedInput2, emitCollect2, ensuring10, ensuringWith4, context11, contextWith7, contextWithChannel2, contextWithEffect6, fail20, failSync11, failCause17, failCauseSync10, flatMap24, flatten18, foldChannel2, foldCauseChannel2, fromEffect10, fromEither5, fromInput4, fromPubSub4, fromPubSubScoped2, fromOption8, fromQueue4, identity5, interruptWhen3, interruptWhenDeferred3, map34, mapEffect8, mapError11, mapErrorCause7, mapOut2, mapOutEffect2, mapOutEffectPar2, mergeAll10, mergeAllUnbounded2, mergeAllUnboundedWith2, mergeAllWith2, mergeMap2, mergeOut2, mergeOutWith2, mergeWith4, never9, orDie9, orDieWith6, orElse14, pipeTo2, pipeToOrFail2, provideContext9, provideLayer3, mapInputContext8, provideSomeLayer4, provideService11, read3, readOrFail2, readWith2, readWithCause2, repeated2, run5, runCollect3, runDrain3, runScoped3, scoped8, scopedWith5, splitLines3, succeed21, suspend11, sync15, toPubSub3, toPull3, toPullIn2, toQueue3, toSink, toStream, void_11, unwrap5, unwrapScoped6, unwrapScopedWith4, updateService7, withSpan7, write3, writeAll2, writeChunk2, zip17, zipLeft13, zipRight13, ChannelException2, isChannelException2;
var init_Channel = __esm(() => {
  init_channel();
  init_core_stream();
  init_sink();
  init_stream();
  ChannelTypeId4 = ChannelTypeId3;
  ChannelExceptionTypeId2 = ChannelExceptionTypeId;
  isChannel2 = isChannel;
  acquireUseRelease6 = acquireUseRelease4;
  acquireReleaseOut2 = acquireReleaseOut;
  as14 = as9;
  asVoid10 = asVoid7;
  buffer3 = buffer;
  bufferChunk2 = bufferChunk;
  catchAll9 = catchAll6;
  catchAllCause8 = catchAllCause6;
  concatAll3 = concatAll;
  concatAllWith2 = concatAllWith;
  concatMap2 = concatMap;
  concatMapWith2 = concatMapWith;
  concatMapWithCustom2 = concatMapWithCustom;
  collect4 = collect2;
  concatOut2 = concatOut;
  mapInput10 = mapInput7;
  mapInputEffect5 = mapInputEffect2;
  mapInputError2 = mapInputError;
  mapInputErrorEffect2 = mapInputErrorEffect;
  mapInputIn2 = mapInputIn;
  mapInputInEffect2 = mapInputInEffect;
  doneCollect2 = doneCollect;
  drain4 = drain;
  embedInput2 = embedInput;
  emitCollect2 = emitCollect;
  ensuring10 = ensuring5;
  ensuringWith4 = ensuringWith;
  context11 = context7;
  contextWith7 = contextWith3;
  contextWithChannel2 = contextWithChannel;
  contextWithEffect6 = contextWithEffect3;
  fail20 = fail14;
  failSync11 = failSync7;
  failCause17 = failCause12;
  failCauseSync10 = failCauseSync7;
  flatMap24 = flatMap20;
  flatten18 = flatten15;
  foldChannel2 = foldChannel;
  foldCauseChannel2 = foldCauseChannel;
  fromEffect10 = fromEffect5;
  fromEither5 = fromEither3;
  fromInput4 = fromInput;
  fromPubSub4 = fromPubSub;
  fromPubSubScoped2 = fromPubSubScoped;
  fromOption8 = fromOption6;
  fromQueue4 = fromQueue;
  identity5 = identityChannel;
  interruptWhen3 = interruptWhen;
  interruptWhenDeferred3 = interruptWhenDeferred;
  map34 = map28;
  mapEffect8 = mapEffect5;
  mapError11 = mapError7;
  mapErrorCause7 = mapErrorCause5;
  mapOut2 = mapOut;
  mapOutEffect2 = mapOutEffect;
  mapOutEffectPar2 = mapOutEffectPar;
  mergeAll10 = mergeAll7;
  mergeAllUnbounded2 = mergeAllUnbounded;
  mergeAllUnboundedWith2 = mergeAllUnboundedWith;
  mergeAllWith2 = mergeAllWith;
  mergeMap2 = mergeMap;
  mergeOut2 = mergeOut;
  mergeOutWith2 = mergeOutWith;
  mergeWith4 = mergeWith2;
  never9 = never6;
  orDie9 = orDie6;
  orDieWith6 = orDieWith3;
  orElse14 = orElse10;
  pipeTo2 = pipeTo;
  pipeToOrFail2 = pipeToOrFail;
  provideContext9 = provideContext4;
  provideLayer3 = provideLayer;
  mapInputContext8 = mapInputContext4;
  provideSomeLayer4 = provideSomeLayer2;
  provideService11 = provideService6;
  read3 = read2;
  readOrFail2 = readOrFail;
  readWith2 = readWith;
  readWithCause2 = readWithCause;
  repeated2 = repeated;
  run5 = run2;
  runCollect3 = runCollect;
  runDrain3 = runDrain;
  runScoped3 = runScoped;
  scoped8 = scoped6;
  scopedWith5 = scopedWith3;
  splitLines3 = splitLines;
  succeed21 = succeed15;
  suspend11 = suspend6;
  sync15 = sync10;
  toPubSub3 = toPubSub;
  toPull3 = toPull;
  toPullIn2 = toPullIn;
  toQueue3 = toQueue;
  toSink = channelToSink;
  toStream = channelToStream;
  void_11 = void_8;
  unwrap5 = unwrap2;
  unwrapScoped6 = unwrapScoped3;
  unwrapScopedWith4 = unwrapScopedWith;
  updateService7 = updateService5;
  withSpan7 = withSpan5;
  write3 = write2;
  writeAll2 = writeAll;
  writeChunk2 = writeChunk;
  zip17 = zip13;
  zipLeft13 = zipLeft8;
  zipRight13 = zipRight8;
  ChannelException2 = ChannelException;
  isChannelException2 = isChannelException;
});

// node_modules/effect/dist/esm/ChildExecutorDecision.js
var exports_ChildExecutorDecision = {};
__export(exports_ChildExecutorDecision, {
  match: () => match33,
  isYield: () => isYield2,
  isContinue: () => isContinue4,
  isClose: () => isClose2,
  isChildExecutorDecision: () => isChildExecutorDecision2,
  Yield: () => Yield3,
  Continue: () => Continue2,
  Close: () => Close2,
  ChildExecutorDecisionTypeId: () => ChildExecutorDecisionTypeId2
});
var ChildExecutorDecisionTypeId2, Continue2, Close2, Yield3, isChildExecutorDecision2, isContinue4, isClose2, isYield2, match33;
var init_ChildExecutorDecision = __esm(() => {
  init_childExecutorDecision();
  ChildExecutorDecisionTypeId2 = ChildExecutorDecisionTypeId;
  Continue2 = Continue;
  Close2 = Close;
  Yield3 = Yield2;
  isChildExecutorDecision2 = isChildExecutorDecision;
  isContinue4 = isContinue3;
  isClose2 = isClose;
  isYield2 = isYield;
  match33 = match22;
});

// node_modules/effect/dist/esm/ConfigError.js
var exports_ConfigError = {};
__export(exports_ConfigError, {
  reduceWithContext: () => reduceWithContext4,
  prefixed: () => prefixed2,
  isUnsupported: () => isUnsupported2,
  isSourceUnavailable: () => isSourceUnavailable2,
  isOr: () => isOr2,
  isMissingDataOnly: () => isMissingDataOnly2,
  isMissingData: () => isMissingData2,
  isInvalidData: () => isInvalidData2,
  isConfigError: () => isConfigError2,
  isAnd: () => isAnd2,
  Unsupported: () => Unsupported2,
  SourceUnavailable: () => SourceUnavailable2,
  Or: () => Or2,
  MissingData: () => MissingData2,
  InvalidData: () => InvalidData2,
  ConfigErrorTypeId: () => ConfigErrorTypeId2,
  And: () => And2
});
var ConfigErrorTypeId2, And2, Or2, MissingData2, InvalidData2, SourceUnavailable2, Unsupported2, isConfigError2, isAnd2, isOr2, isInvalidData2, isMissingData2, isMissingDataOnly2, isSourceUnavailable2, isUnsupported2, prefixed2, reduceWithContext4;
var init_ConfigError = __esm(() => {
  init_configError();
  ConfigErrorTypeId2 = ConfigErrorTypeId;
  And2 = And;
  Or2 = Or;
  MissingData2 = MissingData;
  InvalidData2 = InvalidData;
  SourceUnavailable2 = SourceUnavailable;
  Unsupported2 = Unsupported;
  isConfigError2 = isConfigError;
  isAnd2 = isAnd;
  isOr2 = isOr;
  isInvalidData2 = isInvalidData;
  isMissingData2 = isMissingData;
  isMissingDataOnly2 = isMissingDataOnly;
  isSourceUnavailable2 = isSourceUnavailable;
  isUnsupported2 = isUnsupported;
  prefixed2 = prefixed;
  reduceWithContext4 = reduceWithContext2;
});

// node_modules/effect/dist/esm/internal/redacted.js
var RedactedSymbolKey = "effect/Redacted", redactedRegistry, RedactedTypeId, proto12, isRedacted = (u) => hasProperty(u, RedactedTypeId), make74 = (value2) => {
  const redacted = Object.create(proto12);
  redactedRegistry.set(redacted, value2);
  return redacted;
}, value2 = (self) => {
  if (redactedRegistry.has(self)) {
    return redactedRegistry.get(self);
  } else {
    throw new Error("Unable to get redacted value");
  }
}, unsafeWipe = (self) => redactedRegistry.delete(self);
var init_redacted = __esm(() => {
  init_Equal();
  init_Function();
  init_GlobalValue();
  init_Hash();
  init_Inspectable();
  init_Predicate();
  redactedRegistry = /* @__PURE__ */ globalValue("effect/Redacted/redactedRegistry", () => new WeakMap);
  RedactedTypeId = /* @__PURE__ */ Symbol.for(RedactedSymbolKey);
  proto12 = {
    [RedactedTypeId]: {
      _A: (_) => _
    },
    pipe() {
      return pipeArguments(this, arguments);
    },
    toString() {
      return "<redacted>";
    },
    toJSON() {
      return "<redacted>";
    },
    [NodeInspectSymbol]() {
      return "<redacted>";
    },
    [symbol2]() {
      return pipe(hash(RedactedSymbolKey), combine2(hash(redactedRegistry.get(this))), cached(this));
    },
    [symbol3](that) {
      return isRedacted(that) && equals(redactedRegistry.get(this), redactedRegistry.get(that));
    }
  };
});

// node_modules/effect/dist/esm/internal/secret.js
var SecretSymbolKey = "effect/Secret", SecretTypeId, isSecret = (u) => hasProperty(u, SecretTypeId), SecretProto, make75 = (bytes) => {
  const secret = Object.create(SecretProto);
  Object.defineProperty(secret, "toString", {
    enumerable: false,
    value() {
      return "Secret(<redacted>)";
    }
  });
  Object.defineProperty(secret, "toJSON", {
    enumerable: false,
    value() {
      return "<redacted>";
    }
  });
  Object.defineProperty(secret, "raw", {
    enumerable: false,
    value: bytes
  });
  redactedRegistry.set(secret, bytes.map((byte) => String.fromCharCode(byte)).join(""));
  return secret;
}, fromIterable18 = (iterable) => make75(fromIterable2(iterable).map((char2) => char2.charCodeAt(0))), fromString3 = (text) => {
  return make75(text.split("").map((char2) => char2.charCodeAt(0)));
}, value3 = (self) => {
  return self.raw.map((byte) => String.fromCharCode(byte)).join("");
}, unsafeWipe2 = (self) => {
  for (let i2 = 0;i2 < self.raw.length; i2++) {
    self.raw[i2] = 0;
  }
  redactedRegistry.delete(self);
};
var init_secret = __esm(() => {
  init_Array();
  init_Predicate();
  init_redacted();
  SecretTypeId = /* @__PURE__ */ Symbol.for(SecretSymbolKey);
  SecretProto = {
    ...proto12,
    [SecretTypeId]: SecretTypeId
  };
});

// node_modules/effect/dist/esm/internal/config.js
var ConfigSymbolKey = "effect/Config", ConfigTypeId, configVariance, proto13, boolean4 = (name) => {
  const config2 = primitive("a boolean property", (text) => {
    switch (text) {
      case "true":
      case "yes":
      case "on":
      case "1": {
        return right2(true);
      }
      case "false":
      case "no":
      case "off":
      case "0": {
        return right2(false);
      }
      default: {
        const error3 = InvalidData([], `Expected a boolean value but received ${text}`);
        return left2(error3);
      }
    }
  });
  return name === undefined ? config2 : nested3(config2, name);
}, url = (name) => {
  const config2 = primitive("an URL property", (text) => try_({
    try: () => new URL(text),
    catch: (_) => InvalidData([], `Expected an URL value but received ${text}`)
  }));
  return name === undefined ? config2 : nested3(config2, name);
}, array6 = (config2, name) => {
  return pipe(chunk4(config2, name), map35(toArray2));
}, chunk4 = (config2, name) => {
  return map35(name === undefined ? repeat5(config2) : nested3(repeat5(config2), name), unsafeFromArray);
}, date2 = (name) => {
  const config2 = primitive("a date property", (text) => {
    const result2 = Date.parse(text);
    if (Number.isNaN(result2)) {
      return left2(InvalidData([], `Expected a Date value but received ${text}`));
    }
    return right2(new Date(result2));
  });
  return name === undefined ? config2 : nested3(config2, name);
}, fail21 = (message) => {
  const fail22 = Object.create(proto13);
  fail22._tag = OP_FAIL2;
  fail22.message = message;
  fail22.parse = () => left2(Unsupported([], message));
  return fail22;
}, number4 = (name) => {
  const config2 = primitive("a number property", (text) => {
    const result2 = Number(text);
    if (Number.isNaN(result2)) {
      return left2(InvalidData([], `Expected a number value but received ${text}`));
    }
    return right2(result2);
  });
  return name === undefined ? config2 : nested3(config2, name);
}, integer2 = (name) => {
  const config2 = primitive("an integer property", (text) => {
    const result2 = Number(text);
    if (!Number.isInteger(result2)) {
      return left2(InvalidData([], `Expected an integer value but received ${text}`));
    }
    return right2(result2);
  });
  return name === undefined ? config2 : nested3(config2, name);
}, literal = (...literals) => (name) => {
  const valuesString = literals.map(String).join(", ");
  const config2 = primitive(`one of (${valuesString})`, (text) => {
    const found = literals.find((value4) => String(value4) === text);
    if (found === undefined) {
      return left2(InvalidData([], `Expected one of (${valuesString}) but received ${text}`));
    }
    return right2(found);
  });
  return name === undefined ? config2 : nested3(config2, name);
}, logLevel = (name) => {
  const config2 = mapOrFail(string5(), (value4) => {
    const label = value4.toUpperCase();
    const level = allLogLevels.find((level2) => level2.label === label);
    return level === undefined ? left2(InvalidData([], `Expected a log level but received ${value4}`)) : right2(level);
  });
  return name === undefined ? config2 : nested3(config2, name);
}, duration3 = (name) => {
  const config2 = mapOrFail(string5(), (value4) => {
    const duration4 = decodeUnknown(value4);
    return fromOption2(duration4, () => InvalidData([], `Expected a duration but received ${value4}`));
  });
  return name === undefined ? config2 : nested3(config2, name);
}, map35, mapAttempt2, mapOrFail, nested3, orElse15, orElseIf, option6 = (self) => {
  return pipe(self, map35(some3), orElseIf({
    orElse: () => succeed22(none2()),
    if: isMissingDataOnly2
  }));
}, primitive = (description, parse4) => {
  const primitive2 = Object.create(proto13);
  primitive2._tag = OP_PRIMITIVE;
  primitive2.description = description;
  primitive2.parse = parse4;
  return primitive2;
}, repeat5 = (self) => {
  const repeat6 = Object.create(proto13);
  repeat6._tag = OP_SEQUENCE;
  repeat6.config = self;
  return repeat6;
}, secret = (name) => {
  const config2 = primitive("a secret property", (text) => right2(fromString3(text)));
  return name === undefined ? config2 : nested3(config2, name);
}, redacted = (nameOrConfig) => {
  const config2 = isConfig(nameOrConfig) ? nameOrConfig : string5(nameOrConfig);
  return map35(config2, make74);
}, hashSet3 = (config2, name) => {
  const newConfig = map35(chunk4(config2), fromIterable6);
  return name === undefined ? newConfig : nested3(newConfig, name);
}, string5 = (name) => {
  const config2 = primitive("a text property", right2);
  return name === undefined ? config2 : nested3(config2, name);
}, nonEmptyString = (name) => {
  const config2 = primitive("a non-empty text property", liftPredicate((text) => text.length > 0, () => MissingData([], "Expected a non-empty string")));
  return name === undefined ? config2 : nested3(config2, name);
}, all13 = (arg) => {
  if (Array.isArray(arg)) {
    return tuple6(arg);
  } else if (Symbol.iterator in arg) {
    return tuple6([...arg]);
  }
  return struct6(arg);
}, struct6 = (r) => {
  const entries3 = Object.entries(r);
  let result2 = pipe(entries3[0][1], map35((value4) => ({
    [entries3[0][0]]: value4
  })));
  if (entries3.length === 1) {
    return result2;
  }
  const rest = entries3.slice(1);
  for (const [key, config2] of rest) {
    result2 = pipe(result2, zipWith18(config2, (record3, value4) => ({
      ...record3,
      [key]: value4
    })));
  }
  return result2;
}, succeed22 = (value4) => {
  const constant3 = Object.create(proto13);
  constant3._tag = OP_CONSTANT;
  constant3.value = value4;
  constant3.parse = () => right2(value4);
  return constant3;
}, suspend12 = (config2) => {
  const lazy = Object.create(proto13);
  lazy._tag = OP_LAZY;
  lazy.config = config2;
  return lazy;
}, sync16 = (value4) => {
  return suspend12(() => succeed22(value4()));
}, hashMap3 = (config2, name) => {
  const table2 = Object.create(proto13);
  table2._tag = OP_HASHMAP;
  table2.valueConfig = config2;
  return name === undefined ? table2 : nested3(table2, name);
}, isConfig = (u) => hasProperty(u, ConfigTypeId), tuple6 = (tuple7) => {
  if (tuple7.length === 0) {
    return succeed22([]);
  }
  if (tuple7.length === 1) {
    return map35(tuple7[0], (x2) => [x2]);
  }
  let result2 = map35(tuple7[0], (x2) => [x2]);
  for (let i2 = 1;i2 < tuple7.length; i2++) {
    const config2 = tuple7[i2];
    result2 = pipe(result2, zipWith18(config2, (tuple8, value4) => [...tuple8, value4]));
  }
  return result2;
}, unwrap6 = (wrapped) => {
  if (isConfig(wrapped)) {
    return wrapped;
  }
  return struct6(Object.fromEntries(Object.entries(wrapped).map(([k, a]) => [k, unwrap6(a)])));
}, validate3, withDefault, withDescription, zip18, zipWith18;
var init_config2 = __esm(() => {
  init_Chunk();
  init_ConfigError();
  init_Duration();
  init_Either();
  init_Function();
  init_HashSet();
  init_Option();
  init_Predicate();
  init_configError();
  init_core();
  init_defaultServices();
  init_effectable();
  init_redacted();
  init_secret();
  ConfigTypeId = /* @__PURE__ */ Symbol.for(ConfigSymbolKey);
  configVariance = {
    _A: (_) => _
  };
  proto13 = {
    ...CommitPrototype,
    [ConfigTypeId]: configVariance,
    commit() {
      return config(this);
    }
  };
  map35 = /* @__PURE__ */ dual(2, (self, f) => mapOrFail(self, (a) => right2(f(a))));
  mapAttempt2 = /* @__PURE__ */ dual(2, (self, f) => mapOrFail(self, (a) => {
    try {
      return right2(f(a));
    } catch (error3) {
      return left2(InvalidData([], error3 instanceof Error ? error3.message : `${error3}`));
    }
  }));
  mapOrFail = /* @__PURE__ */ dual(2, (self, f) => {
    const mapOrFail2 = Object.create(proto13);
    mapOrFail2._tag = OP_MAP_OR_FAIL;
    mapOrFail2.original = self;
    mapOrFail2.mapOrFail = f;
    return mapOrFail2;
  });
  nested3 = /* @__PURE__ */ dual(2, (self, name) => {
    const nested4 = Object.create(proto13);
    nested4._tag = OP_NESTED;
    nested4.name = name;
    nested4.config = self;
    return nested4;
  });
  orElse15 = /* @__PURE__ */ dual(2, (self, that) => {
    const fallback = Object.create(proto13);
    fallback._tag = OP_FALLBACK;
    fallback.first = self;
    fallback.second = suspend12(that);
    fallback.condition = constTrue;
    return fallback;
  });
  orElseIf = /* @__PURE__ */ dual(2, (self, options) => {
    const fallback = Object.create(proto13);
    fallback._tag = OP_FALLBACK;
    fallback.first = self;
    fallback.second = suspend12(options.orElse);
    fallback.condition = options.if;
    return fallback;
  });
  validate3 = /* @__PURE__ */ dual(2, (self, {
    message,
    validation
  }) => mapOrFail(self, (a) => {
    if (validation(a)) {
      return right2(a);
    }
    return left2(InvalidData([], message));
  }));
  withDefault = /* @__PURE__ */ dual(2, (self, def) => orElseIf(self, {
    orElse: () => succeed22(def),
    if: isMissingDataOnly2
  }));
  withDescription = /* @__PURE__ */ dual(2, (self, description) => {
    const described = Object.create(proto13);
    described._tag = OP_DESCRIBED;
    described.config = self;
    described.description = description;
    return described;
  });
  zip18 = /* @__PURE__ */ dual(2, (self, that) => zipWith18(self, that, (a, b) => [a, b]));
  zipWith18 = /* @__PURE__ */ dual(3, (self, that, f) => {
    const zipWith19 = Object.create(proto13);
    zipWith19._tag = OP_ZIP_WITH;
    zipWith19.left = self;
    zipWith19.right = that;
    zipWith19.zip = f;
    return zipWith19;
  });
});

// node_modules/effect/dist/esm/Config.js
var exports_Config = {};
__export(exports_Config, {
  zipWith: () => zipWith19,
  zip: () => zip19,
  withDescription: () => withDescription2,
  withDefault: () => withDefault2,
  validate: () => validate4,
  url: () => url2,
  unwrap: () => unwrap7,
  sync: () => sync17,
  suspend: () => suspend13,
  succeed: () => succeed23,
  string: () => string6,
  secret: () => secret2,
  repeat: () => repeat6,
  redacted: () => redacted2,
  primitive: () => primitive2,
  orElseIf: () => orElseIf2,
  orElse: () => orElse16,
  option: () => option7,
  number: () => number5,
  nonEmptyString: () => nonEmptyString2,
  nested: () => nested4,
  mapOrFail: () => mapOrFail2,
  mapAttempt: () => mapAttempt3,
  map: () => map36,
  logLevel: () => logLevel2,
  literal: () => literal2,
  isConfig: () => isConfig2,
  integer: () => integer3,
  hashSet: () => hashSet4,
  hashMap: () => hashMap4,
  fail: () => fail22,
  duration: () => duration4,
  date: () => date3,
  chunk: () => chunk5,
  boolean: () => boolean5,
  array: () => array7,
  all: () => all14,
  ConfigTypeId: () => ConfigTypeId2
});
var ConfigTypeId2, all14, array7, boolean5, url2, chunk5, date3, fail22, number5, integer3, literal2, logLevel2, duration4, isConfig2, map36, mapAttempt3, mapOrFail2, nested4, orElse16, orElseIf2, option7, primitive2, repeat6, secret2, redacted2, hashSet4, string6, nonEmptyString2, succeed23, suspend13, sync17, hashMap4, unwrap7, validate4, withDefault2, withDescription2, zip19, zipWith19;
var init_Config = __esm(() => {
  init_config2();
  ConfigTypeId2 = ConfigTypeId;
  all14 = all13;
  array7 = array6;
  boolean5 = boolean4;
  url2 = url;
  chunk5 = chunk4;
  date3 = date2;
  fail22 = fail21;
  number5 = number4;
  integer3 = integer2;
  literal2 = literal;
  logLevel2 = logLevel;
  duration4 = duration3;
  isConfig2 = isConfig;
  map36 = map35;
  mapAttempt3 = mapAttempt2;
  mapOrFail2 = mapOrFail;
  nested4 = nested3;
  orElse16 = orElse15;
  orElseIf2 = orElseIf;
  option7 = option6;
  primitive2 = primitive;
  repeat6 = repeat5;
  secret2 = secret;
  redacted2 = redacted;
  hashSet4 = hashSet3;
  string6 = string5;
  nonEmptyString2 = nonEmptyString;
  succeed23 = succeed22;
  suspend13 = suspend12;
  sync17 = sync16;
  hashMap4 = hashMap3;
  unwrap7 = unwrap6;
  validate4 = validate3;
  withDefault2 = withDefault;
  withDescription2 = withDescription;
  zip19 = zip18;
  zipWith19 = zipWith18;
});

// node_modules/effect/dist/esm/ConfigProvider.js
var exports_ConfigProvider = {};
__export(exports_ConfigProvider, {
  within: () => within2,
  upperCase: () => upperCase3,
  unnested: () => unnested3,
  snakeCase: () => snakeCase3,
  orElse: () => orElse17,
  nested: () => nested5,
  mapInputPath: () => mapInputPath2,
  makeFlat: () => makeFlat2,
  make: () => make76,
  lowerCase: () => lowerCase3,
  kebabCase: () => kebabCase3,
  fromMap: () => fromMap2,
  fromJson: () => fromJson2,
  fromFlat: () => fromFlat2,
  fromEnv: () => fromEnv2,
  constantCase: () => constantCase3,
  FlatConfigProviderTypeId: () => FlatConfigProviderTypeId2,
  ConfigProviderTypeId: () => ConfigProviderTypeId2,
  ConfigProvider: () => ConfigProvider
});
var ConfigProviderTypeId2, FlatConfigProviderTypeId2, ConfigProvider, make76, makeFlat2, fromEnv2, fromFlat2, fromJson2, fromMap2, constantCase3, mapInputPath2, kebabCase3, lowerCase3, nested5, orElse17, unnested3, snakeCase3, upperCase3, within2;
var init_ConfigProvider = __esm(() => {
  init_configProvider();
  ConfigProviderTypeId2 = ConfigProviderTypeId;
  FlatConfigProviderTypeId2 = FlatConfigProviderTypeId;
  ConfigProvider = configProviderTag;
  make76 = make29;
  makeFlat2 = makeFlat;
  fromEnv2 = fromEnv;
  fromFlat2 = fromFlat;
  fromJson2 = fromJson;
  fromMap2 = fromMap;
  constantCase3 = constantCase2;
  mapInputPath2 = mapInputPath;
  kebabCase3 = kebabCase2;
  lowerCase3 = lowerCase2;
  nested5 = nested2;
  orElse17 = orElse4;
  unnested3 = unnested2;
  snakeCase3 = snakeCase2;
  upperCase3 = upperCase2;
  within2 = within;
});

// node_modules/effect/dist/esm/ConfigProviderPathPatch.js
var exports_ConfigProviderPathPatch = {};
__export(exports_ConfigProviderPathPatch, {
  unnested: () => unnested4,
  nested: () => nested6,
  mapName: () => mapName2,
  empty: () => empty44,
  andThen: () => andThen13
});
var empty44, andThen13, mapName2, nested6, unnested4;
var init_ConfigProviderPathPatch = __esm(() => {
  init_pathPatch();
  empty44 = empty25;
  andThen13 = andThen7;
  mapName2 = mapName;
  nested6 = nested;
  unnested4 = unnested;
});

// node_modules/effect/dist/esm/Console.js
var exports_Console = {};
__export(exports_Console, {
  withTime: () => withTime2,
  withGroup: () => withGroup2,
  withConsole: () => withConsole3,
  warn: () => warn2,
  trace: () => trace2,
  timeLog: () => timeLog2,
  time: () => time2,
  table: () => table2,
  setConsole: () => setConsole2,
  log: () => log4,
  info: () => info2,
  group: () => group4,
  error: () => error3,
  dirxml: () => dirxml2,
  dir: () => dir2,
  debug: () => debug3,
  countReset: () => countReset2,
  count: () => count5,
  consoleWith: () => consoleWith3,
  clear: () => clear3,
  assert: () => assert3,
  TypeId: () => TypeId24,
  Console: () => Console
});
var TypeId24, Console, withConsole3, setConsole2, consoleWith3, assert3, clear3, count5, countReset2, debug3, dir2, dirxml2, error3, group4, info2, log4, table2, time2, timeLog2, trace2, warn2, withGroup2, withTime2;
var init_Console = __esm(() => {
  init_console2();
  init_console();
  TypeId24 = TypeId14;
  Console = consoleTag;
  withConsole3 = withConsole;
  setConsole2 = setConsole;
  consoleWith3 = consoleWith;
  assert3 = assert2;
  clear3 = clear2;
  count5 = count2;
  countReset2 = countReset;
  debug3 = debug2;
  dir2 = dir;
  dirxml2 = dirxml;
  error3 = error2;
  group4 = group3;
  info2 = info;
  log4 = log2;
  table2 = table;
  time2 = time;
  timeLog2 = timeLog;
  trace2 = trace;
  warn2 = warn;
  withGroup2 = withGroup;
  withTime2 = withTime;
});

// node_modules/effect/dist/esm/DateTime.js
var exports_DateTime = {};
__export(exports_DateTime, {
  zonedOffsetIso: () => zonedOffsetIso2,
  zonedOffset: () => zonedOffset2,
  zoneUnsafeMakeNamed: () => zoneUnsafeMakeNamed2,
  zoneToString: () => zoneToString2,
  zoneMakeOffset: () => zoneMakeOffset2,
  zoneMakeNamedEffect: () => zoneMakeNamedEffect2,
  zoneMakeNamed: () => zoneMakeNamed2,
  zoneMakeLocal: () => zoneMakeLocal2,
  zoneFromString: () => zoneFromString2,
  withDateUtc: () => withDateUtc2,
  withDate: () => withDate2,
  withCurrentZoneOffset: () => withCurrentZoneOffset,
  withCurrentZoneNamed: () => withCurrentZoneNamed,
  withCurrentZoneLocal: () => withCurrentZoneLocal,
  withCurrentZone: () => withCurrentZone,
  unsafeSetZoneNamed: () => unsafeSetZoneNamed2,
  unsafeNow: () => unsafeNow2,
  unsafeMakeZoned: () => unsafeMakeZoned2,
  unsafeMake: () => unsafeMake14,
  unsafeIsPast: () => unsafeIsPast2,
  unsafeIsFuture: () => unsafeIsFuture2,
  unsafeFromDate: () => unsafeFromDate2,
  toUtc: () => toUtc2,
  toPartsUtc: () => toPartsUtc2,
  toParts: () => toParts2,
  toEpochMillis: () => toEpochMillis2,
  toDateUtc: () => toDateUtc2,
  toDate: () => toDate2,
  subtractDuration: () => subtractDuration2,
  subtract: () => subtract6,
  startOf: () => startOf2,
  setZoneOffset: () => setZoneOffset2,
  setZoneNamed: () => setZoneNamed2,
  setZoneCurrent: () => setZoneCurrent,
  setZone: () => setZone2,
  setPartsUtc: () => setPartsUtc2,
  setParts: () => setParts2,
  removeTime: () => removeTime2,
  nowInCurrentZone: () => nowInCurrentZone,
  nowAsDate: () => nowAsDate2,
  now: () => now2,
  nearest: () => nearest2,
  mutateUtc: () => mutateUtc2,
  mutate: () => mutate6,
  min: () => min10,
  max: () => max13,
  match: () => match34,
  mapEpochMillis: () => mapEpochMillis2,
  makeZonedFromString: () => makeZonedFromString2,
  makeZoned: () => makeZoned2,
  make: () => make77,
  lessThanOrEqualTo: () => lessThanOrEqualTo7,
  lessThan: () => lessThan14,
  layerCurrentZoneOffset: () => layerCurrentZoneOffset,
  layerCurrentZoneNamed: () => layerCurrentZoneNamed,
  layerCurrentZoneLocal: () => layerCurrentZoneLocal,
  layerCurrentZone: () => layerCurrentZone,
  isZoned: () => isZoned2,
  isUtc: () => isUtc2,
  isTimeZoneOffset: () => isTimeZoneOffset2,
  isTimeZoneNamed: () => isTimeZoneNamed2,
  isTimeZone: () => isTimeZone2,
  isPast: () => isPast2,
  isFuture: () => isFuture2,
  isDateTime: () => isDateTime2,
  greaterThanOrEqualTo: () => greaterThanOrEqualTo7,
  greaterThan: () => greaterThan10,
  getPartUtc: () => getPartUtc2,
  getPart: () => getPart2,
  formatUtc: () => formatUtc2,
  formatLocal: () => formatLocal2,
  formatIsoZoned: () => formatIsoZoned2,
  formatIsoOffset: () => formatIsoOffset2,
  formatIsoDateUtc: () => formatIsoDateUtc2,
  formatIsoDate: () => formatIsoDate2,
  formatIso: () => formatIso3,
  formatIntl: () => formatIntl2,
  format: () => format7,
  endOf: () => endOf2,
  distanceDurationEither: () => distanceDurationEither2,
  distanceDuration: () => distanceDuration2,
  distance: () => distance2,
  clamp: () => clamp8,
  between: () => between7,
  addDuration: () => addDuration2,
  add: () => add7,
  TypeId: () => TypeId25,
  TimeZoneTypeId: () => TimeZoneTypeId2,
  Order: () => Order11,
  Equivalence: () => Equivalence9,
  CurrentTimeZone: () => CurrentTimeZone
});
var TypeId25, TimeZoneTypeId2, isDateTime2, isTimeZone2, isTimeZoneOffset2, isTimeZoneNamed2, isUtc2, isZoned2, Equivalence9, Order11, clamp8, unsafeFromDate2, unsafeMake14, unsafeMakeZoned2, makeZoned2, make77, makeZonedFromString2, now2, nowAsDate2, unsafeNow2, toUtc2, setZone2, setZoneOffset2, zoneUnsafeMakeNamed2, zoneMakeOffset2, zoneMakeNamed2, zoneMakeNamedEffect2, zoneMakeLocal2, zoneFromString2, zoneToString2, setZoneNamed2, unsafeSetZoneNamed2, distance2, distanceDurationEither2, distanceDuration2, min10, max13, greaterThan10, greaterThanOrEqualTo7, lessThan14, lessThanOrEqualTo7, between7, isFuture2, unsafeIsFuture2, isPast2, unsafeIsPast2, toDateUtc2, toDate2, zonedOffset2, zonedOffsetIso2, toEpochMillis2, removeTime2, toParts2, toPartsUtc2, getPartUtc2, getPart2, setParts2, setPartsUtc2, CurrentTimeZone, setZoneCurrent = (self) => map26(CurrentTimeZone, (zone) => setZone2(self, zone)), withCurrentZone, withCurrentZoneLocal = (effect4) => provideServiceEffect3(effect4, CurrentTimeZone, sync8(zoneMakeLocal2)), withCurrentZoneOffset, withCurrentZoneNamed, nowInCurrentZone, mutate6, mutateUtc2, mapEpochMillis2, withDate2, withDateUtc2, match34, addDuration2, subtractDuration2, add7, subtract6, startOf2, endOf2, nearest2, format7, formatLocal2, formatUtc2, formatIntl2, formatIso3, formatIsoDate2, formatIsoDateUtc2, formatIsoOffset2, formatIsoZoned2, layerCurrentZone = (zone) => succeed14(CurrentTimeZone, zone), layerCurrentZoneOffset = (offset) => succeed14(CurrentTimeZone, zoneMakeOffset(offset)), layerCurrentZoneNamed = (zoneId) => effect(CurrentTimeZone, zoneMakeNamedEffect(zoneId)), layerCurrentZoneLocal;
var init_DateTime = __esm(() => {
  init_Context();
  init_Effect();
  init_Function();
  init_dateTime();
  init_Layer();
  TypeId25 = TypeId19;
  TimeZoneTypeId2 = TimeZoneTypeId;
  isDateTime2 = isDateTime;
  isTimeZone2 = isTimeZone;
  isTimeZoneOffset2 = isTimeZoneOffset;
  isTimeZoneNamed2 = isTimeZoneNamed;
  isUtc2 = isUtc;
  isZoned2 = isZoned;
  Equivalence9 = Equivalence6;
  Order11 = Order8;
  clamp8 = clamp7;
  unsafeFromDate2 = unsafeFromDate;
  unsafeMake14 = unsafeMake11;
  unsafeMakeZoned2 = unsafeMakeZoned;
  makeZoned2 = makeZoned;
  make77 = make56;
  makeZonedFromString2 = makeZonedFromString;
  now2 = now;
  nowAsDate2 = nowAsDate;
  unsafeNow2 = unsafeNow;
  toUtc2 = toUtc;
  setZone2 = setZone;
  setZoneOffset2 = setZoneOffset;
  zoneUnsafeMakeNamed2 = zoneUnsafeMakeNamed;
  zoneMakeOffset2 = zoneMakeOffset;
  zoneMakeNamed2 = zoneMakeNamed;
  zoneMakeNamedEffect2 = zoneMakeNamedEffect;
  zoneMakeLocal2 = zoneMakeLocal;
  zoneFromString2 = zoneFromString;
  zoneToString2 = zoneToString;
  setZoneNamed2 = setZoneNamed;
  unsafeSetZoneNamed2 = unsafeSetZoneNamed;
  distance2 = distance;
  distanceDurationEither2 = distanceDurationEither;
  distanceDuration2 = distanceDuration;
  min10 = min9;
  max13 = max12;
  greaterThan10 = greaterThan9;
  greaterThanOrEqualTo7 = greaterThanOrEqualTo6;
  lessThan14 = lessThan13;
  lessThanOrEqualTo7 = lessThanOrEqualTo6;
  between7 = between6;
  isFuture2 = isFuture;
  unsafeIsFuture2 = unsafeIsFuture;
  isPast2 = isPast;
  unsafeIsPast2 = unsafeIsPast;
  toDateUtc2 = toDateUtc;
  toDate2 = toDate;
  zonedOffset2 = zonedOffset;
  zonedOffsetIso2 = zonedOffsetIso;
  toEpochMillis2 = toEpochMillis;
  removeTime2 = removeTime;
  toParts2 = toParts;
  toPartsUtc2 = toPartsUtc;
  getPartUtc2 = getPartUtc;
  getPart2 = getPart;
  setParts2 = setParts;
  setPartsUtc2 = setPartsUtc;
  CurrentTimeZone = class CurrentTimeZone extends (/* @__PURE__ */ Tag2("effect/DateTime/CurrentTimeZone")()) {
  };
  withCurrentZone = /* @__PURE__ */ dual(2, (effect4, zone) => provideService5(effect4, CurrentTimeZone, zone));
  withCurrentZoneOffset = /* @__PURE__ */ dual(2, (effect4, offset) => provideService5(effect4, CurrentTimeZone, zoneMakeOffset2(offset)));
  withCurrentZoneNamed = /* @__PURE__ */ dual(2, (effect4, zone) => provideServiceEffect3(effect4, CurrentTimeZone, zoneMakeNamedEffect2(zone)));
  nowInCurrentZone = /* @__PURE__ */ flatMap18(now2, setZoneCurrent);
  mutate6 = mutate5;
  mutateUtc2 = mutateUtc;
  mapEpochMillis2 = mapEpochMillis;
  withDate2 = withDate;
  withDateUtc2 = withDateUtc;
  match34 = match15;
  addDuration2 = addDuration;
  subtractDuration2 = subtractDuration;
  add7 = add6;
  subtract6 = subtract5;
  startOf2 = startOf;
  endOf2 = endOf;
  nearest2 = nearest;
  format7 = format6;
  formatLocal2 = formatLocal;
  formatUtc2 = formatUtc;
  formatIntl2 = formatIntl;
  formatIso3 = formatIso2;
  formatIsoDate2 = formatIsoDate;
  formatIsoDateUtc2 = formatIsoDateUtc;
  formatIsoOffset2 = formatIsoOffset;
  formatIsoZoned2 = formatIsoZoned;
  layerCurrentZoneLocal = /* @__PURE__ */ sync9(CurrentTimeZone, zoneMakeLocal2);
});

// node_modules/effect/dist/esm/DefaultServices.js
var exports_DefaultServices = {};
__export(exports_DefaultServices, {
  liveServices: () => liveServices2,
  currentServices: () => currentServices2
});
var liveServices2, currentServices2;
var init_DefaultServices = __esm(() => {
  init_defaultServices();
  liveServices2 = liveServices;
  currentServices2 = currentServices;
});

// node_modules/effect/dist/esm/internal/encoding/common.js
var DecodeExceptionTypeId, DecodeException = (input, message) => {
  const out = {
    _tag: "DecodeException",
    [DecodeExceptionTypeId]: DecodeExceptionTypeId,
    input
  };
  if (isString2(message)) {
    out.message = message;
  }
  return out;
}, isDecodeException = (u) => hasProperty(u, DecodeExceptionTypeId), EncodeExceptionTypeId, EncodeException = (input, message) => {
  const out = {
    _tag: "EncodeException",
    [EncodeExceptionTypeId]: EncodeExceptionTypeId,
    input
  };
  if (isString2(message)) {
    out.message = message;
  }
  return out;
}, isEncodeException = (u) => hasProperty(u, EncodeExceptionTypeId), encoder, decoder;
var init_common = __esm(() => {
  init_Predicate();
  DecodeExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Encoding/errors/Decode");
  EncodeExceptionTypeId = /* @__PURE__ */ Symbol.for("effect/Encoding/errors/Encode");
  encoder = /* @__PURE__ */ new TextEncoder;
  decoder = /* @__PURE__ */ new TextDecoder;
});

// node_modules/effect/dist/esm/internal/encoding/base64.js
function getBase64Code(charCode) {
  if (charCode >= base64codes.length) {
    throw new TypeError(`Invalid character ${String.fromCharCode(charCode)}`);
  }
  const code2 = base64codes[charCode];
  if (code2 === 255) {
    throw new TypeError(`Invalid character ${String.fromCharCode(charCode)}`);
  }
  return code2;
}
var encode = (bytes) => {
  const length5 = bytes.length;
  let result2 = "";
  let i2;
  for (i2 = 2;i2 < length5; i2 += 3) {
    result2 += base64abc[bytes[i2 - 2] >> 2];
    result2 += base64abc[(bytes[i2 - 2] & 3) << 4 | bytes[i2 - 1] >> 4];
    result2 += base64abc[(bytes[i2 - 1] & 15) << 2 | bytes[i2] >> 6];
    result2 += base64abc[bytes[i2] & 63];
  }
  if (i2 === length5 + 1) {
    result2 += base64abc[bytes[i2 - 2] >> 2];
    result2 += base64abc[(bytes[i2 - 2] & 3) << 4];
    result2 += "==";
  }
  if (i2 === length5) {
    result2 += base64abc[bytes[i2 - 2] >> 2];
    result2 += base64abc[(bytes[i2 - 2] & 3) << 4 | bytes[i2 - 1] >> 4];
    result2 += base64abc[(bytes[i2 - 1] & 15) << 2];
    result2 += "=";
  }
  return result2;
}, decode2 = (str) => {
  const stripped = stripCrlf(str);
  const length5 = stripped.length;
  if (length5 % 4 !== 0) {
    return left2(DecodeException(stripped, `Length must be a multiple of 4, but is ${length5}`));
  }
  const index = stripped.indexOf("=");
  if (index !== -1 && (index < length5 - 2 || index === length5 - 2 && stripped[length5 - 1] !== "=")) {
    return left2(DecodeException(stripped, "Found a '=' character, but it is not at the end"));
  }
  try {
    const missingOctets = stripped.endsWith("==") ? 2 : stripped.endsWith("=") ? 1 : 0;
    const result2 = new Uint8Array(3 * (length5 / 4) - missingOctets);
    for (let i2 = 0, j = 0;i2 < length5; i2 += 4, j += 3) {
      const buffer4 = getBase64Code(stripped.charCodeAt(i2)) << 18 | getBase64Code(stripped.charCodeAt(i2 + 1)) << 12 | getBase64Code(stripped.charCodeAt(i2 + 2)) << 6 | getBase64Code(stripped.charCodeAt(i2 + 3));
      result2[j] = buffer4 >> 16;
      result2[j + 1] = buffer4 >> 8 & 255;
      result2[j + 2] = buffer4 & 255;
    }
    return right2(result2);
  } catch (e) {
    return left2(DecodeException(stripped, e instanceof Error ? e.message : "Invalid input"));
  }
}, stripCrlf = (str) => str.replace(/[\n\r]/g, ""), base64abc, base64codes;
var init_base642 = __esm(() => {
  init_Either();
  init_common();
  base64abc = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"];
  base64codes = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255, 255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51];
});

// node_modules/effect/dist/esm/internal/encoding/base64Url.js
var encode2 = (data) => encode(data).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_"), decode3 = (str) => {
  const stripped = stripCrlf(str);
  const length5 = stripped.length;
  if (length5 % 4 === 1) {
    return left2(DecodeException(stripped, `Length should be a multiple of 4, but is ${length5}`));
  }
  if (!/^[-_A-Z0-9]*?={0,2}$/i.test(stripped)) {
    return left2(DecodeException(stripped, "Invalid input"));
  }
  let sanitized = length5 % 4 === 2 ? `${stripped}==` : length5 % 4 === 3 ? `${stripped}=` : stripped;
  sanitized = sanitized.replace(/-/g, "+").replace(/_/g, "/");
  return decode2(sanitized);
};
var init_base64Url = __esm(() => {
  init_Either();
  init_base642();
  init_common();
});

// node_modules/effect/dist/esm/internal/encoding/hex.js
var encode3 = (bytes) => {
  let result2 = "";
  for (let i2 = 0;i2 < bytes.length; ++i2) {
    result2 += bytesToHex[bytes[i2]];
  }
  return result2;
}, decode4 = (str) => {
  const bytes = new TextEncoder().encode(str);
  if (bytes.length % 2 !== 0) {
    return left2(DecodeException(str, `Length must be a multiple of 2, but is ${bytes.length}`));
  }
  try {
    const length5 = bytes.length / 2;
    const result2 = new Uint8Array(length5);
    for (let i2 = 0;i2 < length5; i2++) {
      const a = fromHexChar(bytes[i2 * 2]);
      const b = fromHexChar(bytes[i2 * 2 + 1]);
      result2[i2] = a << 4 | b;
    }
    return right2(result2);
  } catch (e) {
    return left2(DecodeException(str, e instanceof Error ? e.message : "Invalid input"));
  }
}, bytesToHex, fromHexChar = (byte) => {
  if (48 <= byte && byte <= 57) {
    return byte - 48;
  }
  if (97 <= byte && byte <= 102) {
    return byte - 97 + 10;
  }
  if (65 <= byte && byte <= 70) {
    return byte - 65 + 10;
  }
  throw new TypeError("Invalid input");
};
var init_hex = __esm(() => {
  init_Either();
  init_common();
  bytesToHex = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
});

// node_modules/effect/dist/esm/Encoding.js
var exports_Encoding = {};
__export(exports_Encoding, {
  isEncodeException: () => isEncodeException2,
  isDecodeException: () => isDecodeException2,
  encodeUriComponent: () => encodeUriComponent,
  encodeHex: () => encodeHex,
  encodeBase64Url: () => encodeBase64Url,
  encodeBase64: () => encodeBase64,
  decodeUriComponent: () => decodeUriComponent,
  decodeHexString: () => decodeHexString,
  decodeHex: () => decodeHex,
  decodeBase64UrlString: () => decodeBase64UrlString,
  decodeBase64Url: () => decodeBase64Url,
  decodeBase64String: () => decodeBase64String,
  decodeBase64: () => decodeBase64,
  EncodeExceptionTypeId: () => EncodeExceptionTypeId2,
  EncodeException: () => EncodeException2,
  DecodeExceptionTypeId: () => DecodeExceptionTypeId2,
  DecodeException: () => DecodeException2
});
var encodeBase64 = (input) => typeof input === "string" ? encode(encoder.encode(input)) : encode(input), decodeBase64 = (str) => decode2(str), decodeBase64String = (str) => map(decodeBase64(str), (_) => decoder.decode(_)), encodeBase64Url = (input) => typeof input === "string" ? encode2(encoder.encode(input)) : encode2(input), decodeBase64Url = (str) => decode3(str), decodeBase64UrlString = (str) => map(decodeBase64Url(str), (_) => decoder.decode(_)), encodeHex = (input) => typeof input === "string" ? encode3(encoder.encode(input)) : encode3(input), decodeHex = (str) => decode4(str), decodeHexString = (str) => map(decodeHex(str), (_) => decoder.decode(_)), encodeUriComponent = (str) => try_({
  try: () => encodeURIComponent(str),
  catch: (e) => EncodeException2(str, e instanceof Error ? e.message : "Invalid input")
}), decodeUriComponent = (str) => try_({
  try: () => decodeURIComponent(str),
  catch: (e) => DecodeException2(str, e instanceof Error ? e.message : "Invalid input")
}), DecodeExceptionTypeId2, DecodeException2, isDecodeException2, EncodeExceptionTypeId2, EncodeException2, isEncodeException2;
var init_Encoding = __esm(() => {
  init_Either();
  init_base642();
  init_base64Url();
  init_common();
  init_hex();
  DecodeExceptionTypeId2 = DecodeExceptionTypeId;
  DecodeException2 = DecodeException;
  isDecodeException2 = isDecodeException;
  EncodeExceptionTypeId2 = EncodeExceptionTypeId;
  EncodeException2 = EncodeException;
  isEncodeException2 = isEncodeException;
});

// node_modules/effect/dist/esm/FiberHandle.js
var exports_FiberHandle = {};
__export(exports_FiberHandle, {
  unsafeSet: () => unsafeSet3,
  unsafeGet: () => unsafeGet10,
  set: () => set11,
  runtimePromise: () => runtimePromise,
  runtime: () => runtime5,
  run: () => run6,
  makeRuntimePromise: () => makeRuntimePromise,
  makeRuntime: () => makeRuntime,
  make: () => make78,
  join: () => join5,
  isFiberHandle: () => isFiberHandle,
  get: () => get19,
  clear: () => clear4,
  awaitEmpty: () => awaitEmpty,
  TypeId: () => TypeId26
});
var TypeId26, isFiberHandle = (u) => hasProperty(u, TypeId26), Proto3, unsafeMake15 = (deferred) => {
  const self = Object.create(Proto3);
  self.state = {
    _tag: "Open",
    fiber: undefined
  };
  self.deferred = deferred;
  return self;
}, make78 = () => acquireRelease3(map26(make24(), (deferred) => unsafeMake15(deferred)), (handle) => withFiberRuntime2((parent) => {
  const state = handle.state;
  if (state._tag === "Closed")
    return _void;
  handle.state = {
    _tag: "Closed"
  };
  return state.fiber ? intoDeferred2(asVoid6(interruptAs(state.fiber, combine5(parent.id(), internalFiberId))), handle.deferred) : done2(handle.deferred, void_4);
})), makeRuntime = () => flatMap18(make78(), (self) => runtime5(self)()), makeRuntimePromise = () => flatMap18(make78(), (self) => runtimePromise(self)()), internalFiberIdId = -1, internalFiberId, isInternalInterruption, unsafeSet3, set11, unsafeGet10 = (self) => self.state._tag === "Closed" ? none2() : fromNullable2(self.state.fiber), get19 = (self) => suspend4(() => unsafeGet10(self)), clear4 = (self) => uninterruptibleMask3((restore) => withFiberRuntime2((fiber) => {
  if (self.state._tag === "Closed" || self.state.fiber === undefined) {
    return _void;
  }
  return zipRight7(restore(interruptAs(self.state.fiber, combine5(fiber.id(), internalFiberId))), sync8(() => {
    if (self.state._tag === "Open") {
      self.state.fiber = undefined;
    }
  }));
})), constInterruptedFiber, run6 = function() {
  const self = arguments[0];
  if (isEffect2(arguments[1])) {
    return runImpl(self, arguments[1], arguments[2]);
  }
  const options = arguments[1];
  return (effect4) => runImpl(self, effect4, options);
}, runImpl = (self, effect4, options) => fiberIdWith2((fiberId4) => {
  if (self.state._tag === "Closed") {
    return interrupt8;
  } else if (self.state.fiber !== undefined && options?.onlyIfMissing === true) {
    return sync8(constInterruptedFiber);
  }
  return tap5(forkDaemon3(effect4), (fiber) => unsafeSet3(self, fiber, {
    ...options,
    interruptAs: fiberId4
  }));
}), runtime5 = (self) => () => map26(runtime4(), (runtime6) => {
  const runFork4 = runFork3(runtime6);
  return (effect4, options) => {
    if (self.state._tag === "Closed") {
      return constInterruptedFiber();
    } else if (self.state.fiber !== undefined && options?.onlyIfMissing === true) {
      return constInterruptedFiber();
    }
    const fiber = runFork4(effect4, options);
    unsafeSet3(self, fiber, options);
    return fiber;
  };
}), runtimePromise = (self) => () => map26(runtime5(self)(), (runFork4) => (effect4, options) => new Promise((resolve, reject2) => runFork4(effect4, options).addObserver((exit4) => {
  if (isSuccess(exit4)) {
    resolve(exit4.value);
  } else {
    reject2(squash(exit4.cause));
  }
}))), join5 = (self) => _await(self.deferred), awaitEmpty = (self) => suspend4(() => {
  if (self.state._tag === "Closed" || self.state.fiber === undefined) {
    return _void;
  }
  return _await3(self.state.fiber);
});
var init_FiberHandle = __esm(() => {
  init_Cause();
  init_Deferred();
  init_Effect();
  init_Exit();
  init_Fiber();
  init_FiberId();
  init_Function();
  init_HashSet();
  init_Inspectable();
  init_Option();
  init_Predicate();
  init_Runtime();
  TypeId26 = /* @__PURE__ */ Symbol.for("effect/FiberHandle");
  Proto3 = {
    [TypeId26]: TypeId26,
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "FiberHandle",
        state: this.state
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  internalFiberId = /* @__PURE__ */ make17(internalFiberIdId, 0);
  isInternalInterruption = /* @__PURE__ */ reduceWithContext3(undefined, {
    emptyCase: constFalse,
    failCase: constFalse,
    dieCase: constFalse,
    interruptCase: (_, fiberId4) => has4(ids2(fiberId4), internalFiberIdId),
    sequentialCase: (_, left3, right3) => left3 || right3,
    parallelCase: (_, left3, right3) => left3 || right3
  });
  unsafeSet3 = /* @__PURE__ */ dual((args2) => isFiberHandle(args2[0]), (self, fiber, options) => {
    if (self.state._tag === "Closed") {
      fiber.unsafeInterruptAsFork(combine5(options?.interruptAs ?? none4, internalFiberId));
      return;
    } else if (self.state.fiber !== undefined) {
      if (options?.onlyIfMissing === true) {
        fiber.unsafeInterruptAsFork(combine5(options?.interruptAs ?? none4, internalFiberId));
        return;
      } else if (self.state.fiber === fiber) {
        return;
      }
      self.state.fiber.unsafeInterruptAsFork(combine5(options?.interruptAs ?? none4, internalFiberId));
      self.state.fiber = undefined;
    }
    self.state.fiber = fiber;
    fiber.addObserver((exit4) => {
      if (self.state._tag === "Open" && fiber === self.state.fiber) {
        self.state.fiber = undefined;
      }
      if (isFailure2(exit4) && (options?.propagateInterruption === true ? !isInternalInterruption(exit4.cause) : !isInterruptedOnly2(exit4.cause))) {
        unsafeDone(self.deferred, exit4);
      }
    });
  });
  set11 = /* @__PURE__ */ dual((args2) => isFiberHandle(args2[0]), (self, fiber, options) => fiberIdWith2((fiberId4) => sync8(() => unsafeSet3(self, fiber, {
    interruptAs: fiberId4,
    onlyIfMissing: options?.onlyIfMissing,
    propagateInterruption: options?.propagateInterruption
  }))));
  constInterruptedFiber = /* @__PURE__ */ function() {
    let fiber = undefined;
    return () => {
      if (fiber === undefined) {
        fiber = runFork2(interrupt8);
      }
      return fiber;
    };
  }();
});

// node_modules/effect/dist/esm/FiberMap.js
var exports_FiberMap = {};
__export(exports_FiberMap, {
  unsafeSet: () => unsafeSet4,
  unsafeHas: () => unsafeHas,
  unsafeGet: () => unsafeGet11,
  size: () => size25,
  set: () => set12,
  runtimePromise: () => runtimePromise2,
  runtime: () => runtime6,
  run: () => run7,
  remove: () => remove11,
  makeRuntimePromise: () => makeRuntimePromise2,
  makeRuntime: () => makeRuntime2,
  make: () => make79,
  join: () => join6,
  isFiberMap: () => isFiberMap,
  has: () => has10,
  get: () => get20,
  clear: () => clear5,
  awaitEmpty: () => awaitEmpty2,
  TypeId: () => TypeId27
});
var TypeId27, isFiberMap = (u) => hasProperty(u, TypeId27), Proto4, unsafeMake16 = (backing, deferred) => {
  const self = Object.create(Proto4);
  self.state = {
    _tag: "Open",
    backing
  };
  self.deferred = deferred;
  return self;
}, make79 = () => acquireRelease3(map26(make24(), (deferred) => unsafeMake16(empty23(), deferred)), (map37) => withFiberRuntime2((parent) => {
  const state = map37.state;
  if (state._tag === "Closed")
    return _void;
  map37.state = {
    _tag: "Closed"
  };
  return interruptAllAs2(map4(state.backing, ([, fiber]) => fiber), combine5(parent.id(), internalFiberId2)).pipe(intoDeferred2(map37.deferred));
})), makeRuntime2 = () => flatMap18(make79(), (self) => runtime6(self)()), makeRuntimePromise2 = () => flatMap18(make79(), (self) => runtimePromise2(self)()), internalFiberIdId2 = -1, internalFiberId2, isInternalInterruption2, unsafeSet4, set12, unsafeGet11, get20, unsafeHas, has10, remove11, clear5 = (self) => withFiberRuntime2((clearFiber) => {
  if (self.state._tag === "Closed") {
    return _void;
  }
  return forEach16(self.state.backing, ([, fiber]) => interruptAs(fiber, combine5(clearFiber.id(), internalFiberId2)));
}), constInterruptedFiber2, run7 = function() {
  const self = arguments[0];
  if (isEffect2(arguments[2])) {
    return runImpl2(self, arguments[1], arguments[2], arguments[3]);
  }
  const key = arguments[1];
  const options = arguments[2];
  return (effect4) => runImpl2(self, key, effect4, options);
}, runImpl2 = (self, key, effect4, options) => fiberIdWith2((fiberId4) => {
  if (self.state._tag === "Closed") {
    return interrupt8;
  } else if (options?.onlyIfMissing === true && unsafeHas(self, key)) {
    return sync8(constInterruptedFiber2);
  }
  return tap5(forkDaemon3(effect4), (fiber) => unsafeSet4(self, key, fiber, {
    ...options,
    interruptAs: fiberId4
  }));
}), runtime6 = (self) => () => map26(runtime4(), (runtime7) => {
  const runFork4 = runFork3(runtime7);
  return (key, effect4, options) => {
    if (self.state._tag === "Closed") {
      return constInterruptedFiber2();
    } else if (options?.onlyIfMissing === true && unsafeHas(self, key)) {
      return constInterruptedFiber2();
    }
    const fiber = runFork4(effect4, options);
    unsafeSet4(self, key, fiber, options);
    return fiber;
  };
}), runtimePromise2 = (self) => () => map26(runtime6(self)(), (runFork4) => (key, effect4, options) => new Promise((resolve, reject2) => runFork4(key, effect4, options).addObserver((exit4) => {
  if (isSuccess(exit4)) {
    resolve(exit4.value);
  } else {
    reject2(squash(exit4.cause));
  }
}))), size25 = (self) => sync8(() => self.state._tag === "Closed" ? 0 : size10(self.state.backing)), join6 = (self) => _await(self.deferred), awaitEmpty2 = (self) => whileLoop3({
  while: () => self.state._tag === "Open" && size10(self.state.backing) > 0,
  body: () => _await3(unsafeHead(self)[1]),
  step: constVoid
});
var init_FiberMap = __esm(() => {
  init_Cause();
  init_Deferred();
  init_Effect();
  init_Exit();
  init_Fiber();
  init_FiberId();
  init_Function();
  init_HashSet();
  init_Inspectable();
  init_Iterable();
  init_MutableHashMap();
  init_Option();
  init_Predicate();
  init_Runtime();
  TypeId27 = /* @__PURE__ */ Symbol.for("effect/FiberMap");
  Proto4 = {
    [TypeId27]: TypeId27,
    [Symbol.iterator]() {
      if (this.state._tag === "Closed") {
        return empty2();
      }
      return this.state.backing[Symbol.iterator]();
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "FiberMap",
        state: this.state
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  internalFiberId2 = /* @__PURE__ */ make17(internalFiberIdId2, 0);
  isInternalInterruption2 = /* @__PURE__ */ reduceWithContext3(undefined, {
    emptyCase: constFalse,
    failCase: constFalse,
    dieCase: constFalse,
    interruptCase: (_, fiberId4) => has4(ids2(fiberId4), internalFiberIdId2),
    sequentialCase: (_, left3, right3) => left3 || right3,
    parallelCase: (_, left3, right3) => left3 || right3
  });
  unsafeSet4 = /* @__PURE__ */ dual((args2) => isFiberMap(args2[0]), (self, key, fiber, options) => {
    if (self.state._tag === "Closed") {
      fiber.unsafeInterruptAsFork(combine5(options?.interruptAs ?? none4, internalFiberId2));
      return;
    }
    const previous2 = get10(self.state.backing, key);
    if (previous2._tag === "Some") {
      if (options?.onlyIfMissing === true) {
        fiber.unsafeInterruptAsFork(combine5(options?.interruptAs ?? none4, internalFiberId2));
        return;
      } else if (previous2.value === fiber) {
        return;
      }
      previous2.value.unsafeInterruptAsFork(combine5(options?.interruptAs ?? none4, internalFiberId2));
    }
    set5(self.state.backing, key, fiber);
    fiber.addObserver((exit4) => {
      if (self.state._tag === "Closed") {
        return;
      }
      const current2 = get10(self.state.backing, key);
      if (isSome2(current2) && fiber === current2.value) {
        remove8(self.state.backing, key);
      }
      if (isFailure2(exit4) && (options?.propagateInterruption === true ? !isInternalInterruption2(exit4.cause) : !isInterruptedOnly2(exit4.cause))) {
        unsafeDone(self.deferred, exit4);
      }
    });
  });
  set12 = /* @__PURE__ */ dual((args2) => isFiberMap(args2[0]), (self, key, fiber, options) => fiberIdWith2((fiberId4) => sync8(() => unsafeSet4(self, key, fiber, {
    ...options,
    interruptAs: fiberId4
  }))));
  unsafeGet11 = /* @__PURE__ */ dual(2, (self, key) => self.state._tag === "Closed" ? none2() : get10(self.state.backing, key));
  get20 = /* @__PURE__ */ dual(2, (self, key) => suspend4(() => unsafeGet11(self, key)));
  unsafeHas = /* @__PURE__ */ dual(2, (self, key) => self.state._tag === "Closed" ? false : has6(self.state.backing, key));
  has10 = /* @__PURE__ */ dual(2, (self, key) => sync8(() => unsafeHas(self, key)));
  remove11 = /* @__PURE__ */ dual(2, (self, key) => withFiberRuntime2((removeFiber) => {
    if (self.state._tag === "Closed") {
      return _void;
    }
    const fiber = get10(self.state.backing, key);
    if (fiber._tag === "None") {
      return _void;
    }
    return interruptAs(fiber.value, combine5(removeFiber.id(), internalFiberId2));
  }));
  constInterruptedFiber2 = /* @__PURE__ */ function() {
    let fiber = undefined;
    return () => {
      if (fiber === undefined) {
        fiber = runFork2(interrupt8);
      }
      return fiber;
    };
  }();
});

// node_modules/effect/dist/esm/FiberSet.js
var exports_FiberSet = {};
__export(exports_FiberSet, {
  unsafeAdd: () => unsafeAdd,
  size: () => size26,
  runtimePromise: () => runtimePromise3,
  runtime: () => runtime7,
  run: () => run8,
  makeRuntimePromise: () => makeRuntimePromise3,
  makeRuntime: () => makeRuntime3,
  make: () => make80,
  join: () => join7,
  isFiberSet: () => isFiberSet,
  clear: () => clear6,
  awaitEmpty: () => awaitEmpty3,
  add: () => add8,
  TypeId: () => TypeId28
});
var TypeId28, isFiberSet = (u) => hasProperty(u, TypeId28), Proto5, unsafeMake17 = (backing, deferred) => {
  const self = Object.create(Proto5);
  self.state = {
    _tag: "Open",
    backing
  };
  self.deferred = deferred;
  return self;
}, make80 = () => acquireRelease3(map26(make24(), (deferred) => unsafeMake17(new Set, deferred)), (set13) => withFiberRuntime2((parent) => {
  const state = set13.state;
  if (state._tag === "Closed")
    return _void;
  set13.state = {
    _tag: "Closed"
  };
  const fibers = state.backing;
  return interruptAllAs2(fibers, combine5(parent.id(), internalFiberId3)).pipe(intoDeferred2(set13.deferred));
})), makeRuntime3 = () => flatMap18(make80(), (self) => runtime7(self)()), makeRuntimePromise3 = () => flatMap18(make80(), (self) => runtimePromise3(self)()), internalFiberIdId3 = -1, internalFiberId3, isInternalInterruption3, unsafeAdd, add8, clear6 = (self) => withFiberRuntime2((clearFiber) => {
  if (self.state._tag === "Closed") {
    return _void;
  }
  return forEach16(self.state.backing, (fiber) => interruptAs(fiber, combine5(clearFiber.id(), internalFiberId3)));
}), constInterruptedFiber3, run8 = function() {
  const self = arguments[0];
  if (!isEffect2(arguments[1])) {
    const options = arguments[1];
    return (effect4) => runImpl3(self, effect4, options);
  }
  return runImpl3(self, arguments[1], arguments[2]);
}, runImpl3 = (self, effect4, options) => fiberIdWith2((fiberId4) => {
  if (self.state._tag === "Closed") {
    return sync8(constInterruptedFiber3);
  }
  return tap5(forkDaemon3(effect4), (fiber) => unsafeAdd(self, fiber, {
    ...options,
    interruptAs: fiberId4
  }));
}), runtime7 = (self) => () => map26(runtime4(), (runtime8) => {
  const runFork4 = runFork3(runtime8);
  return (effect4, options) => {
    if (self.state._tag === "Closed") {
      return constInterruptedFiber3();
    }
    const fiber = runFork4(effect4, options);
    unsafeAdd(self, fiber);
    return fiber;
  };
}), runtimePromise3 = (self) => () => map26(runtime7(self)(), (runFork4) => (effect4, options) => new Promise((resolve, reject2) => runFork4(effect4, options).addObserver((exit4) => {
  if (isSuccess(exit4)) {
    resolve(exit4.value);
  } else {
    reject2(squash(exit4.cause));
  }
}))), size26 = (self) => sync8(() => self.state._tag === "Closed" ? 0 : self.state.backing.size), join7 = (self) => _await(self.deferred), awaitEmpty3 = (self) => whileLoop3({
  while: () => self.state._tag === "Open" && self.state.backing.size > 0,
  body: () => _await3(unsafeHead(self)),
  step: constVoid
});
var init_FiberSet = __esm(() => {
  init_Cause();
  init_Deferred();
  init_Effect();
  init_Exit();
  init_Fiber();
  init_FiberId();
  init_Function();
  init_HashSet();
  init_Inspectable();
  init_Iterable();
  init_Predicate();
  init_Runtime();
  TypeId28 = /* @__PURE__ */ Symbol.for("effect/FiberSet");
  Proto5 = {
    [TypeId28]: TypeId28,
    [Symbol.iterator]() {
      if (this.state._tag === "Closed") {
        return empty2();
      }
      return this.state.backing[Symbol.iterator]();
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "FiberMap",
        state: this.state
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  internalFiberId3 = /* @__PURE__ */ make17(internalFiberIdId3, 0);
  isInternalInterruption3 = /* @__PURE__ */ reduceWithContext3(undefined, {
    emptyCase: constFalse,
    failCase: constFalse,
    dieCase: constFalse,
    interruptCase: (_, fiberId4) => has4(ids2(fiberId4), internalFiberIdId3),
    sequentialCase: (_, left3, right3) => left3 || right3,
    parallelCase: (_, left3, right3) => left3 || right3
  });
  unsafeAdd = /* @__PURE__ */ dual((args2) => isFiberSet(args2[0]), (self, fiber, options) => {
    if (self.state._tag === "Closed") {
      fiber.unsafeInterruptAsFork(combine5(options?.interruptAs ?? none4, internalFiberId3));
      return;
    } else if (self.state.backing.has(fiber)) {
      return;
    }
    self.state.backing.add(fiber);
    fiber.addObserver((exit4) => {
      if (self.state._tag === "Closed") {
        return;
      }
      self.state.backing.delete(fiber);
      if (isFailure2(exit4) && (options?.propagateInterruption === true ? !isInternalInterruption3(exit4.cause) : !isInterruptedOnly2(exit4.cause))) {
        unsafeDone(self.deferred, exit4);
      }
    });
  });
  add8 = /* @__PURE__ */ dual((args2) => isFiberSet(args2[0]), (self, fiber, options) => fiberIdWith2((fiberId4) => sync8(() => unsafeAdd(self, fiber, {
    ...options,
    interruptAs: fiberId4
  }))));
  constInterruptedFiber3 = /* @__PURE__ */ function() {
    let fiber = undefined;
    return () => {
      if (fiber === undefined) {
        fiber = runFork2(interrupt8);
      }
      return fiber;
    };
  }();
});

// node_modules/effect/dist/esm/internal/groupBy.js
var GroupBySymbolKey = "effect/GroupBy", GroupByTypeId, groupByVariance, isGroupBy = (u) => hasProperty(u, GroupByTypeId), evaluate2, filter19, first3, make81 = (grouped2) => ({
  [GroupByTypeId]: groupByVariance,
  pipe() {
    return pipeArguments(this, arguments);
  },
  grouped: grouped2
}), groupBy3, mapEffectOptions, bindEffect, mapDequeue = (dequeue, f) => new MapDequeue(dequeue, f), MapDequeue, groupByKey, groupByIterable;
var init_groupBy = __esm(() => {
  init_Cause();
  init_Chunk();
  init_Deferred();
  init_Effect();
  init_Effectable();
  init_Exit();
  init_Function();
  init_Option();
  init_Predicate();
  init_Queue();
  init_Ref();
  init_Scope();
  init_channel();
  init_channelExecutor();
  init_core_stream();
  init_stream();
  init_take();
  GroupByTypeId = /* @__PURE__ */ Symbol.for(GroupBySymbolKey);
  groupByVariance = {
    _R: (_) => _,
    _E: (_) => _,
    _K: (_) => _,
    _V: (_) => _
  };
  evaluate2 = /* @__PURE__ */ dual((args2) => isGroupBy(args2[0]), (self, f, options) => flatMap23(self.grouped, ([key, queue]) => f(key, flattenTake(fromQueue3(queue, {
    shutdown: true
  }))), {
    concurrency: "unbounded",
    bufferSize: options?.bufferSize ?? 16
  }));
  filter19 = /* @__PURE__ */ dual(2, (self, predicate) => make81(pipe(self.grouped, filterEffect((tuple7) => {
    if (predicate(tuple7[0])) {
      return pipe(succeed13(tuple7), as8(true));
    }
    return pipe(shutdown4(tuple7[1]), as8(false));
  }))));
  first3 = /* @__PURE__ */ dual(2, (self, n) => make81(pipe(zipWithIndex(self.grouped), filterEffect((tuple7) => {
    const index = tuple7[1];
    const queue = tuple7[0][1];
    if (index < n) {
      return pipe(succeed13(tuple7), as8(true));
    }
    return pipe(shutdown4(queue), as8(false));
  }), map33((tuple7) => tuple7[0]))));
  groupBy3 = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, f, options) => make81(unwrapScoped5(gen6(function* () {
    const decider = yield* make24();
    const output = yield* acquireRelease3(bounded5(options?.bufferSize ?? 16), (queue) => shutdown4(queue));
    const ref = yield* make37(new Map);
    const add9 = yield* pipe(mapEffectSequential(self, f), distributedWithDynamicCallback(options?.bufferSize ?? 16, ([key, value4]) => flatMap18(_await(decider), (f2) => f2(key, value4)), (exit4) => offer3(output, exit4)));
    yield* succeed2(decider, (key, _) => pipe(get14(ref), map26((map37) => fromNullable2(map37.get(key))), flatMap18(match2({
      onNone: () => flatMap18(add9, ([index, queue]) => zipRight7(update4(ref, (map37) => map37.set(key, index)), pipe(offer3(output, succeed3([key, mapDequeue(queue, (exit4) => new TakeImpl(pipe(exit4, map15((tuple7) => of3(tuple7[1])))))])), as8((n) => n === index)))),
      onSome: (index) => succeed13((n) => n === index)
    }))));
    return flattenExitOption(fromQueue3(output, {
      shutdown: true
    }));
  }))));
  mapEffectOptions = /* @__PURE__ */ dual((args2) => typeof args2[0] !== "function", (self, f, options) => {
    if (options?.key) {
      return evaluate2(groupByKey(self, options.key, {
        bufferSize: options.bufferSize
      }), (_, s) => mapEffectSequential(s, f));
    }
    return matchConcurrency(options?.concurrency, () => mapEffectSequential(self, f), (n) => options?.unordered ? flatMap23(self, (a) => fromEffect9(f(a)), {
      concurrency: n
    }) : mapEffectPar(self, n, f));
  });
  bindEffect = /* @__PURE__ */ dual((args2) => typeof args2[0] !== "string", (self, tag, f, options) => mapEffectOptions(self, (k) => map26(f(k), (a) => ({
    ...k,
    [tag]: a
  })), options));
  MapDequeue = class MapDequeue extends Class2 {
    dequeue;
    f;
    [DequeueTypeId2] = {
      _Out: (_) => _
    };
    constructor(dequeue, f) {
      super();
      this.dequeue = dequeue;
      this.f = f;
    }
    capacity() {
      return capacity5(this.dequeue);
    }
    get size() {
      return size20(this.dequeue);
    }
    unsafeSize() {
      return this.dequeue.unsafeSize();
    }
    get awaitShutdown() {
      return awaitShutdown4(this.dequeue);
    }
    isActive() {
      return this.dequeue.isActive();
    }
    get isShutdown() {
      return isShutdown4(this.dequeue);
    }
    get shutdown() {
      return shutdown4(this.dequeue);
    }
    get isFull() {
      return isFull5(this.dequeue);
    }
    get isEmpty() {
      return isEmpty18(this.dequeue);
    }
    get take() {
      return pipe(take6(this.dequeue), map26((a) => this.f(a)));
    }
    get takeAll() {
      return pipe(takeAll2(this.dequeue), map26(map7((a) => this.f(a))));
    }
    takeUpTo(max14) {
      return pipe(takeUpTo2(this.dequeue, max14), map26(map7((a) => this.f(a))));
    }
    takeBetween(min11, max14) {
      return pipe(takeBetween2(this.dequeue, min11, max14), map26(map7((a) => this.f(a))));
    }
    takeN(n) {
      return pipe(takeN2(this.dequeue, n), map26(map7((a) => this.f(a))));
    }
    poll() {
      return pipe(poll6(this.dequeue), map26(map2((a) => this.f(a))));
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    commit() {
      return this.take;
    }
  };
  groupByKey = /* @__PURE__ */ dual((args2) => typeof args2[0] !== "function", (self, f, options) => {
    const loop4 = (map37, outerQueue) => readWithCause({
      onInput: (input) => flatMap20(fromEffect5(forEach16(groupByIterable(input, f), ([key, values10]) => {
        const innerQueue = map37.get(key);
        if (innerQueue === undefined) {
          return pipe(bounded5(options?.bufferSize ?? 16), flatMap18((innerQueue2) => pipe(sync8(() => {
            map37.set(key, innerQueue2);
          }), zipRight7(offer3(outerQueue, of7([key, innerQueue2]))), zipRight7(pipe(offer3(innerQueue2, chunk3(values10)), catchSomeCause2((cause3) => isInterruptedOnly2(cause3) ? some3(_void) : none2()))))));
        }
        return catchSomeCause2(offer3(innerQueue, chunk3(values10)), (cause3) => isInterruptedOnly2(cause3) ? some3(_void) : none2());
      }, {
        discard: true
      })), () => loop4(map37, outerQueue)),
      onFailure: (cause3) => fromEffect5(offer3(outerQueue, failCause14(cause3))),
      onDone: () => pipe(fromEffect5(pipe(forEach16(map37.entries(), ([_, innerQueue]) => pipe(offer3(innerQueue, end4), catchSomeCause2((cause3) => isInterruptedOnly2(cause3) ? some3(_void) : none2())), {
        discard: true
      }), zipRight7(offer3(outerQueue, end4)))))
    });
    return make81(unwrapScopedWith3((scope6) => gen6(function* () {
      const map37 = new Map;
      const queue = yield* unbounded5();
      yield* addFinalizer3(scope6, shutdown4(queue));
      return yield* toChannel2(self).pipe(pipeTo(loop4(map37, queue)), drain, runIn(scope6), forkIn3(scope6), as8(flattenTake(fromQueue3(queue, {
        shutdown: true
      }))));
    })));
  });
  groupByIterable = /* @__PURE__ */ dual(2, (iterable, f) => {
    const builder = [];
    const iterator = iterable[Symbol.iterator]();
    const map37 = new Map;
    let next4;
    while ((next4 = iterator.next()) && !next4.done) {
      const value4 = next4.value;
      const key = f(value4);
      if (map37.has(key)) {
        const innerBuilder = map37.get(key);
        innerBuilder.push(value4);
      } else {
        const innerBuilder = [value4];
        builder.push([key, innerBuilder]);
        map37.set(key, innerBuilder);
      }
    }
    return unsafeFromArray(builder.map((tuple7) => [tuple7[0], unsafeFromArray(tuple7[1])]));
  });
});

// node_modules/effect/dist/esm/GroupBy.js
var exports_GroupBy = {};
__export(exports_GroupBy, {
  make: () => make82,
  first: () => first4,
  filter: () => filter20,
  evaluate: () => evaluate3,
  GroupByTypeId: () => GroupByTypeId2
});
var GroupByTypeId2, evaluate3, filter20, first4, make82;
var init_GroupBy = __esm(() => {
  init_groupBy();
  GroupByTypeId2 = GroupByTypeId;
  evaluate3 = evaluate2;
  filter20 = filter19;
  first4 = first3;
  make82 = make81;
});

// node_modules/effect/dist/esm/HKT.js
var exports_HKT = {};
var init_HKT = () => {};

// node_modules/effect/dist/esm/ParseResult.js
var exports_ParseResult = {};
__export(exports_ParseResult, {
  validateSync: () => validateSync,
  validatePromise: () => validatePromise,
  validateOption: () => validateOption,
  validateEither: () => validateEither,
  validate: () => validate5,
  try: () => _try,
  succeed: () => succeed24,
  parseError: () => parseError,
  orElse: () => orElse18,
  mergeInternalOptions: () => mergeInternalOptions,
  mapError: () => mapError12,
  mapBoth: () => mapBoth10,
  map: () => map37,
  isParseError: () => isParseError2,
  isComposite: () => isComposite3,
  is: () => is,
  getSearchTree: () => getSearchTree,
  getRefinementExpected: () => getRefinementExpected,
  getOption: () => getOption3,
  getLiterals: () => getLiterals,
  getFinalTransformation: () => getFinalTransformation,
  fromOption: () => fromOption9,
  flatMap: () => flatMap25,
  fail: () => fail23,
  encodeUnknownSync: () => encodeUnknownSync,
  encodeUnknownPromise: () => encodeUnknownPromise,
  encodeUnknownOption: () => encodeUnknownOption,
  encodeUnknownEither: () => encodeUnknownEither,
  encodeUnknown: () => encodeUnknown,
  encodeSync: () => encodeSync,
  encodePromise: () => encodePromise,
  encodeOption: () => encodeOption,
  encodeEither: () => encodeEither,
  encode: () => encode4,
  eitherOrUndefined: () => eitherOrUndefined,
  decodeUnknownSync: () => decodeUnknownSync,
  decodeUnknownPromise: () => decodeUnknownPromise,
  decodeUnknownOption: () => decodeUnknownOption,
  decodeUnknownEither: () => decodeUnknownEither,
  decodeUnknown: () => decodeUnknown2,
  decodeSync: () => decodeSync,
  decodePromise: () => decodePromise,
  decodeOption: () => decodeOption,
  decodeEither: () => decodeEither,
  decode: () => decode5,
  asserts: () => asserts,
  Unexpected: () => Unexpected,
  Type: () => Type2,
  TreeFormatter: () => TreeFormatter,
  Transformation: () => Transformation2,
  Refinement: () => Refinement2,
  Pointer: () => Pointer,
  ParseErrorTypeId: () => ParseErrorTypeId2,
  ParseError: () => ParseError2,
  Missing: () => Missing,
  Forbidden: () => Forbidden,
  Composite: () => Composite2,
  ArrayFormatter: () => ArrayFormatter
});

class Pointer {
  path;
  actual;
  issue;
  _tag = "Pointer";
  constructor(path, actual, issue) {
    this.path = path;
    this.actual = actual;
    this.issue = issue;
  }
}

class Unexpected {
  actual;
  message;
  _tag = "Unexpected";
  constructor(actual, message) {
    this.actual = actual;
    this.message = message;
  }
}

class Missing {
  ast;
  message;
  _tag = "Missing";
  actual = undefined;
  constructor(ast, message) {
    this.ast = ast;
    this.message = message;
  }
}

class Composite2 {
  ast;
  actual;
  issues;
  output;
  _tag = "Composite";
  constructor(ast, actual, issues, output) {
    this.ast = ast;
    this.actual = actual;
    this.issues = issues;
    this.output = output;
  }
}

class Refinement2 {
  ast;
  actual;
  kind;
  issue;
  _tag = "Refinement";
  constructor(ast, actual, kind, issue) {
    this.ast = ast;
    this.actual = actual;
    this.kind = kind;
    this.issue = issue;
  }
}

class Transformation2 {
  ast;
  actual;
  kind;
  issue;
  _tag = "Transformation";
  constructor(ast, actual, kind, issue) {
    this.ast = ast;
    this.actual = actual;
    this.kind = kind;
    this.issue = issue;
  }
}

class Type2 {
  ast;
  actual;
  message;
  _tag = "Type";
  constructor(ast, actual, message) {
    this.ast = ast;
    this.actual = actual;
    this.message = message;
  }
}

class Forbidden {
  ast;
  actual;
  message;
  _tag = "Forbidden";
  constructor(ast, actual, message) {
    this.ast = ast;
    this.actual = actual;
    this.message = message;
  }
}
function sortByIndex(es) {
  return es.sort(compare).map((t) => t[1]);
}
function getRefinementExpected(ast) {
  return getDescriptionAnnotation(ast).pipe(orElse2(() => getTitleAnnotation(ast)), orElse2(() => getAutoTitleAnnotation(ast)), orElse2(() => getIdentifierAnnotation(ast)), getOrElse2(() => `{ ${ast.from} | filter }`));
}
function getDefaultTypeMessage(issue) {
  if (issue.message !== undefined) {
    return issue.message;
  }
  const expected = isRefinement(issue.ast) ? getRefinementExpected(issue.ast) : String(issue.ast);
  return `Expected ${expected}, actual ${formatUnknown(issue.actual)}`;
}
var ParseErrorTypeId2, isParseError2 = (u) => hasProperty(u, ParseErrorTypeId2), ParseError2, parseError = (issue) => new ParseError2({
  issue
}), succeed24, fail23, _try, fromOption9, isEither5, flatMap25, map37, mapError12, eitherOrUndefined = (self) => {
  if (isEither5(self)) {
    return self;
  }
}, mapBoth10, orElse18, mergeInternalOptions = (options, overrideOptions) => {
  if (overrideOptions === undefined || isNumber2(overrideOptions)) {
    return options;
  }
  if (options === undefined) {
    return overrideOptions;
  }
  return {
    ...options,
    ...overrideOptions
  };
}, getEither = (ast, isDecoding, options) => {
  const parser = goMemo(ast, isDecoding);
  return (u, overrideOptions) => parser(u, mergeInternalOptions(options, overrideOptions));
}, getSync = (ast, isDecoding, options) => {
  const parser = getEither(ast, isDecoding, options);
  return (input, overrideOptions) => getOrThrowWith(parser(input, overrideOptions), parseError);
}, getOption3 = (ast, isDecoding, options) => {
  const parser = getEither(ast, isDecoding, options);
  return (input, overrideOptions) => getRight3(parser(input, overrideOptions));
}, getEffect = (ast, isDecoding, options) => {
  const parser = goMemo(ast, isDecoding);
  return (input, overrideOptions) => parser(input, {
    ...mergeInternalOptions(options, overrideOptions),
    isEffectAllowed: true
  });
}, decodeUnknownSync = (schema, options) => getSync(schema.ast, true, options), decodeUnknownOption = (schema, options) => getOption3(schema.ast, true, options), decodeUnknownEither = (schema, options) => getEither(schema.ast, true, options), decodeUnknownPromise = (schema, options) => {
  const parser = decodeUnknown2(schema, options);
  return (u, overrideOptions) => runPromise2(parser(u, overrideOptions));
}, decodeUnknown2 = (schema, options) => getEffect(schema.ast, true, options), encodeUnknownSync = (schema, options) => getSync(schema.ast, false, options), encodeUnknownOption = (schema, options) => getOption3(schema.ast, false, options), encodeUnknownEither = (schema, options) => getEither(schema.ast, false, options), encodeUnknownPromise = (schema, options) => {
  const parser = encodeUnknown(schema, options);
  return (u, overrideOptions) => runPromise2(parser(u, overrideOptions));
}, encodeUnknown = (schema, options) => getEffect(schema.ast, false, options), decodeSync, decodeOption, decodeEither, decodePromise, decode5, validateSync = (schema, options) => getSync(typeAST(schema.ast), true, options), validateOption = (schema, options) => getOption3(typeAST(schema.ast), true, options), validateEither = (schema, options) => getEither(typeAST(schema.ast), true, options), validatePromise = (schema, options) => {
  const parser = validate5(schema, options);
  return (u, overrideOptions) => runPromise2(parser(u, overrideOptions));
}, validate5 = (schema, options) => getEffect(typeAST(schema.ast), true, options), is = (schema, options) => {
  const parser = goMemo(typeAST(schema.ast), true);
  return (u, overrideOptions) => isRight2(parser(u, {
    exact: true,
    ...mergeInternalOptions(options, overrideOptions)
  }));
}, asserts = (schema, options) => {
  const parser = goMemo(typeAST(schema.ast), true);
  return (u, overrideOptions) => {
    const result2 = parser(u, {
      exact: true,
      ...mergeInternalOptions(options, overrideOptions)
    });
    if (isLeft2(result2)) {
      throw parseError(result2.left);
    }
  };
}, encodeSync, encodeOption, encodeEither, encodePromise, encode4, decodeMemoMap, encodeMemoMap, goMemo = (ast, isDecoding) => {
  const memoMap = isDecoding ? decodeMemoMap : encodeMemoMap;
  const memo2 = memoMap.get(ast);
  if (memo2) {
    return memo2;
  }
  const raw = go2(ast, isDecoding);
  const parseOptionsAnnotation = getParseOptionsAnnotation(ast);
  const parserWithOptions = isSome2(parseOptionsAnnotation) ? (i2, options) => raw(i2, mergeInternalOptions(options, parseOptionsAnnotation.value)) : raw;
  const decodingFallbackAnnotation = getDecodingFallbackAnnotation(ast);
  const parser = isDecoding && isSome2(decodingFallbackAnnotation) ? (i2, options) => handleForbidden(orElse18(parserWithOptions(i2, options), decodingFallbackAnnotation.value), ast, i2, options) : parserWithOptions;
  memoMap.set(ast, parser);
  return parser;
}, getConcurrency = (ast) => getOrUndefined2(getConcurrencyAnnotation(ast)), getBatching = (ast) => getOrUndefined2(getBatchingAnnotation(ast)), go2 = (ast, isDecoding) => {
  switch (ast._tag) {
    case "Refinement": {
      if (isDecoding) {
        const from = goMemo(ast.from, true);
        return (i2, options) => {
          options = options ?? defaultParseOption;
          const allErrors = options?.errors === "all";
          const result2 = flatMap25(orElse18(from(i2, options), (ef) => {
            const issue = new Refinement2(ast, i2, "From", ef);
            if (allErrors && hasStableFilter(ast) && isComposite3(ef)) {
              return match2(ast.filter(i2, options, ast), {
                onNone: () => left2(issue),
                onSome: (ep) => left2(new Composite2(ast, i2, [issue, new Refinement2(ast, i2, "Predicate", ep)]))
              });
            }
            return left2(issue);
          }), (a) => match2(ast.filter(a, options, ast), {
            onNone: () => right2(a),
            onSome: (ep) => left2(new Refinement2(ast, i2, "Predicate", ep))
          }));
          return handleForbidden(result2, ast, i2, options);
        };
      } else {
        const from = goMemo(typeAST(ast), true);
        const to = goMemo(dropRightRefinement(ast.from), false);
        return (i2, options) => handleForbidden(flatMap25(from(i2, options), (a) => to(a, options)), ast, i2, options);
      }
    }
    case "Transformation": {
      const transform3 = getFinalTransformation(ast.transformation, isDecoding);
      const from = isDecoding ? goMemo(ast.from, true) : goMemo(ast.to, false);
      const to = isDecoding ? goMemo(ast.to, true) : goMemo(ast.from, false);
      return (i2, options) => handleForbidden(flatMap25(mapError12(from(i2, options), (e) => new Transformation2(ast, i2, isDecoding ? "Encoded" : "Type", e)), (a) => flatMap25(mapError12(transform3(a, options ?? defaultParseOption, ast, i2), (e) => new Transformation2(ast, i2, "Transformation", e)), (i22) => mapError12(to(i22, options), (e) => new Transformation2(ast, i2, isDecoding ? "Type" : "Encoded", e)))), ast, i2, options);
    }
    case "Declaration": {
      const parse4 = isDecoding ? ast.decodeUnknown(...ast.typeParameters) : ast.encodeUnknown(...ast.typeParameters);
      return (i2, options) => handleForbidden(parse4(i2, options ?? defaultParseOption, ast), ast, i2, options);
    }
    case "Literal":
      return fromRefinement(ast, (u) => u === ast.literal);
    case "UniqueSymbol":
      return fromRefinement(ast, (u) => u === ast.symbol);
    case "UndefinedKeyword":
      return fromRefinement(ast, isUndefined);
    case "NeverKeyword":
      return fromRefinement(ast, isNever);
    case "UnknownKeyword":
    case "AnyKeyword":
    case "VoidKeyword":
      return right2;
    case "StringKeyword":
      return fromRefinement(ast, isString2);
    case "NumberKeyword":
      return fromRefinement(ast, isNumber2);
    case "BooleanKeyword":
      return fromRefinement(ast, isBoolean2);
    case "BigIntKeyword":
      return fromRefinement(ast, isBigInt);
    case "SymbolKeyword":
      return fromRefinement(ast, isSymbol);
    case "ObjectKeyword":
      return fromRefinement(ast, isObject2);
    case "Enums":
      return fromRefinement(ast, (u) => ast.enums.some(([_, value4]) => value4 === u));
    case "TemplateLiteral": {
      const regex = getTemplateLiteralRegExp(ast);
      return fromRefinement(ast, (u) => isString2(u) && regex.test(u));
    }
    case "TupleType": {
      const elements = ast.elements.map((e) => goMemo(e.type, isDecoding));
      const rest = ast.rest.map((annotatedAST) => goMemo(annotatedAST.type, isDecoding));
      let requiredTypes = ast.elements.filter((e) => !e.isOptional);
      if (ast.rest.length > 0) {
        requiredTypes = requiredTypes.concat(ast.rest.slice(1));
      }
      const requiredLen = requiredTypes.length;
      const expectedIndexes = ast.elements.length > 0 ? ast.elements.map((_, i2) => i2).join(" | ") : "never";
      const concurrency = getConcurrency(ast);
      const batching = getBatching(ast);
      return (input, options) => {
        if (!isArray2(input)) {
          return left2(new Type2(ast, input));
        }
        const allErrors = options?.errors === "all";
        const es = [];
        let stepKey = 0;
        const output = [];
        const len = input.length;
        for (let i3 = len;i3 <= requiredLen - 1; i3++) {
          const e = new Pointer(i3, input, new Missing(requiredTypes[i3 - len]));
          if (allErrors) {
            es.push([stepKey++, e]);
            continue;
          } else {
            return left2(new Composite2(ast, input, e, output));
          }
        }
        if (ast.rest.length === 0) {
          for (let i3 = ast.elements.length;i3 <= len - 1; i3++) {
            const e = new Pointer(i3, input, new Unexpected(input[i3], `is unexpected, expected: ${expectedIndexes}`));
            if (allErrors) {
              es.push([stepKey++, e]);
              continue;
            } else {
              return left2(new Composite2(ast, input, e, output));
            }
          }
        }
        let i2 = 0;
        let queue = undefined;
        for (;i2 < elements.length; i2++) {
          if (len < i2 + 1) {
            if (ast.elements[i2].isOptional) {
              continue;
            }
          } else {
            const parser = elements[i2];
            const te = parser(input[i2], options);
            if (isEither5(te)) {
              if (isLeft2(te)) {
                const e = new Pointer(i2, input, te.left);
                if (allErrors) {
                  es.push([stepKey++, e]);
                  continue;
                } else {
                  return left2(new Composite2(ast, input, e, sortByIndex(output)));
                }
              }
              output.push([stepKey++, te.right]);
            } else {
              const nk = stepKey++;
              const index = i2;
              if (!queue) {
                queue = [];
              }
              queue.push(({
                es: es2,
                output: output2
              }) => flatMap18(either6(te), (t) => {
                if (isLeft2(t)) {
                  const e = new Pointer(index, input, t.left);
                  if (allErrors) {
                    es2.push([nk, e]);
                    return _void;
                  } else {
                    return left2(new Composite2(ast, input, e, sortByIndex(output2)));
                  }
                }
                output2.push([nk, t.right]);
                return _void;
              }));
            }
          }
        }
        if (isNonEmptyReadonlyArray(rest)) {
          const [head10, ...tail5] = rest;
          for (;i2 < len - tail5.length; i2++) {
            const te = head10(input[i2], options);
            if (isEither5(te)) {
              if (isLeft2(te)) {
                const e = new Pointer(i2, input, te.left);
                if (allErrors) {
                  es.push([stepKey++, e]);
                  continue;
                } else {
                  return left2(new Composite2(ast, input, e, sortByIndex(output)));
                }
              } else {
                output.push([stepKey++, te.right]);
              }
            } else {
              const nk = stepKey++;
              const index = i2;
              if (!queue) {
                queue = [];
              }
              queue.push(({
                es: es2,
                output: output2
              }) => flatMap18(either6(te), (t) => {
                if (isLeft2(t)) {
                  const e = new Pointer(index, input, t.left);
                  if (allErrors) {
                    es2.push([nk, e]);
                    return _void;
                  } else {
                    return left2(new Composite2(ast, input, e, sortByIndex(output2)));
                  }
                } else {
                  output2.push([nk, t.right]);
                  return _void;
                }
              }));
            }
          }
          for (let j = 0;j < tail5.length; j++) {
            i2 += j;
            if (len < i2 + 1) {
              continue;
            } else {
              const te = tail5[j](input[i2], options);
              if (isEither5(te)) {
                if (isLeft2(te)) {
                  const e = new Pointer(i2, input, te.left);
                  if (allErrors) {
                    es.push([stepKey++, e]);
                    continue;
                  } else {
                    return left2(new Composite2(ast, input, e, sortByIndex(output)));
                  }
                }
                output.push([stepKey++, te.right]);
              } else {
                const nk = stepKey++;
                const index = i2;
                if (!queue) {
                  queue = [];
                }
                queue.push(({
                  es: es2,
                  output: output2
                }) => flatMap18(either6(te), (t) => {
                  if (isLeft2(t)) {
                    const e = new Pointer(index, input, t.left);
                    if (allErrors) {
                      es2.push([nk, e]);
                      return _void;
                    } else {
                      return left2(new Composite2(ast, input, e, sortByIndex(output2)));
                    }
                  }
                  output2.push([nk, t.right]);
                  return _void;
                }));
              }
            }
          }
        }
        const computeResult = ({
          es: es2,
          output: output2
        }) => isNonEmptyArray2(es2) ? left2(new Composite2(ast, input, sortByIndex(es2), sortByIndex(output2))) : right2(sortByIndex(output2));
        if (queue && queue.length > 0) {
          const cqueue = queue;
          return suspend4(() => {
            const state = {
              es: copy(es),
              output: copy(output)
            };
            return flatMap18(forEach16(cqueue, (f) => f(state), {
              concurrency,
              batching,
              discard: true
            }), () => computeResult(state));
          });
        }
        return computeResult({
          output,
          es
        });
      };
    }
    case "TypeLiteral": {
      if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {
        return fromRefinement(ast, isNotNullable);
      }
      const propertySignatures = [];
      const expectedKeysMap = {};
      const expectedKeys = [];
      for (const ps of ast.propertySignatures) {
        propertySignatures.push([goMemo(ps.type, isDecoding), ps]);
        expectedKeysMap[ps.name] = null;
        expectedKeys.push(ps.name);
      }
      const indexSignatures = ast.indexSignatures.map((is2) => [goMemo(is2.parameter, isDecoding), goMemo(is2.type, isDecoding), is2.parameter]);
      const expectedAST = Union.make(ast.indexSignatures.map((is2) => is2.parameter).concat(expectedKeys.map((key) => isSymbol(key) ? new UniqueSymbol(key) : new Literal(key))));
      const expected = goMemo(expectedAST, isDecoding);
      const concurrency = getConcurrency(ast);
      const batching = getBatching(ast);
      return (input, options) => {
        if (!isRecord(input)) {
          return left2(new Type2(ast, input));
        }
        const allErrors = options?.errors === "all";
        const es = [];
        let stepKey = 0;
        const onExcessPropertyError = options?.onExcessProperty === "error";
        const onExcessPropertyPreserve = options?.onExcessProperty === "preserve";
        const output = {};
        let inputKeys;
        if (onExcessPropertyError || onExcessPropertyPreserve) {
          inputKeys = ownKeys(input);
          for (const key of inputKeys) {
            const te = expected(key, options);
            if (isEither5(te) && isLeft2(te)) {
              if (onExcessPropertyError) {
                const e = new Pointer(key, input, new Unexpected(input[key], `is unexpected, expected: ${String(expectedAST)}`));
                if (allErrors) {
                  es.push([stepKey++, e]);
                  continue;
                } else {
                  return left2(new Composite2(ast, input, e, output));
                }
              } else {
                output[key] = input[key];
              }
            }
          }
        }
        let queue = undefined;
        const isExact = options?.exact === true;
        for (let i2 = 0;i2 < propertySignatures.length; i2++) {
          const ps = propertySignatures[i2][1];
          const name = ps.name;
          const hasKey = Object.prototype.hasOwnProperty.call(input, name);
          if (!hasKey) {
            if (ps.isOptional) {
              continue;
            } else if (isExact) {
              const e = new Pointer(name, input, new Missing(ps));
              if (allErrors) {
                es.push([stepKey++, e]);
                continue;
              } else {
                return left2(new Composite2(ast, input, e, output));
              }
            }
          }
          const parser = propertySignatures[i2][0];
          const te = parser(input[name], options);
          if (isEither5(te)) {
            if (isLeft2(te)) {
              const e = new Pointer(name, input, hasKey ? te.left : new Missing(ps));
              if (allErrors) {
                es.push([stepKey++, e]);
                continue;
              } else {
                return left2(new Composite2(ast, input, e, output));
              }
            }
            output[name] = te.right;
          } else {
            const nk = stepKey++;
            const index = name;
            if (!queue) {
              queue = [];
            }
            queue.push(({
              es: es2,
              output: output2
            }) => flatMap18(either6(te), (t) => {
              if (isLeft2(t)) {
                const e = new Pointer(index, input, hasKey ? t.left : new Missing(ps));
                if (allErrors) {
                  es2.push([nk, e]);
                  return _void;
                } else {
                  return left2(new Composite2(ast, input, e, output2));
                }
              }
              output2[index] = t.right;
              return _void;
            }));
          }
        }
        for (let i2 = 0;i2 < indexSignatures.length; i2++) {
          const indexSignature = indexSignatures[i2];
          const parameter = indexSignature[0];
          const type = indexSignature[1];
          const keys7 = getKeysForIndexSignature(input, indexSignature[2]);
          for (const key of keys7) {
            const keu = parameter(key, options);
            if (isEither5(keu) && isRight2(keu)) {
              const vpr = type(input[key], options);
              if (isEither5(vpr)) {
                if (isLeft2(vpr)) {
                  const e = new Pointer(key, input, vpr.left);
                  if (allErrors) {
                    es.push([stepKey++, e]);
                    continue;
                  } else {
                    return left2(new Composite2(ast, input, e, output));
                  }
                } else {
                  if (!Object.prototype.hasOwnProperty.call(expectedKeysMap, key)) {
                    output[key] = vpr.right;
                  }
                }
              } else {
                const nk = stepKey++;
                const index = key;
                if (!queue) {
                  queue = [];
                }
                queue.push(({
                  es: es2,
                  output: output2
                }) => flatMap18(either6(vpr), (tv) => {
                  if (isLeft2(tv)) {
                    const e = new Pointer(index, input, tv.left);
                    if (allErrors) {
                      es2.push([nk, e]);
                      return _void;
                    } else {
                      return left2(new Composite2(ast, input, e, output2));
                    }
                  } else {
                    if (!Object.prototype.hasOwnProperty.call(expectedKeysMap, key)) {
                      output2[key] = tv.right;
                    }
                    return _void;
                  }
                }));
              }
            }
          }
        }
        const computeResult = ({
          es: es2,
          output: output2
        }) => {
          if (isNonEmptyArray2(es2)) {
            return left2(new Composite2(ast, input, sortByIndex(es2), output2));
          }
          if (options?.propertyOrder === "original") {
            const keys7 = inputKeys || ownKeys(input);
            for (const name of expectedKeys) {
              if (keys7.indexOf(name) === -1) {
                keys7.push(name);
              }
            }
            const out = {};
            for (const key of keys7) {
              if (Object.prototype.hasOwnProperty.call(output2, key)) {
                out[key] = output2[key];
              }
            }
            return right2(out);
          }
          return right2(output2);
        };
        if (queue && queue.length > 0) {
          const cqueue = queue;
          return suspend4(() => {
            const state = {
              es: copy(es),
              output: Object.assign({}, output)
            };
            return flatMap18(forEach16(cqueue, (f) => f(state), {
              concurrency,
              batching,
              discard: true
            }), () => computeResult(state));
          });
        }
        return computeResult({
          es,
          output
        });
      };
    }
    case "Union": {
      const searchTree = getSearchTree(ast.types, isDecoding);
      const ownKeys2 = ownKeys(searchTree.keys);
      const ownKeysLen = ownKeys2.length;
      const astTypesLen = ast.types.length;
      const map38 = new Map;
      for (let i2 = 0;i2 < astTypesLen; i2++) {
        map38.set(ast.types[i2], goMemo(ast.types[i2], isDecoding));
      }
      const concurrency = getConcurrency(ast) ?? 1;
      const batching = getBatching(ast);
      return (input, options) => {
        const es = [];
        let stepKey = 0;
        let candidates = [];
        if (ownKeysLen > 0) {
          if (isRecordOrArray(input)) {
            for (let i2 = 0;i2 < ownKeysLen; i2++) {
              const name = ownKeys2[i2];
              const buckets = searchTree.keys[name].buckets;
              if (Object.prototype.hasOwnProperty.call(input, name)) {
                const literal3 = String(input[name]);
                if (Object.prototype.hasOwnProperty.call(buckets, literal3)) {
                  candidates = candidates.concat(buckets[literal3]);
                } else {
                  const {
                    candidates: candidates2,
                    literals
                  } = searchTree.keys[name];
                  const literalsUnion = Union.make(literals);
                  const errorAst = candidates2.length === astTypesLen ? new TypeLiteral([new PropertySignature(name, literalsUnion, false, true)], []) : Union.make(candidates2);
                  es.push([stepKey++, new Composite2(errorAst, input, new Pointer(name, input, new Type2(literalsUnion, input[name])))]);
                }
              } else {
                const {
                  candidates: candidates2,
                  literals
                } = searchTree.keys[name];
                const fakePropertySignature = new PropertySignature(name, Union.make(literals), false, true);
                const errorAst = candidates2.length === astTypesLen ? new TypeLiteral([fakePropertySignature], []) : Union.make(candidates2);
                es.push([stepKey++, new Composite2(errorAst, input, new Pointer(name, input, new Missing(fakePropertySignature)))]);
              }
            }
          } else {
            const errorAst = searchTree.candidates.length === astTypesLen ? ast : Union.make(searchTree.candidates);
            es.push([stepKey++, new Type2(errorAst, input)]);
          }
        }
        if (searchTree.otherwise.length > 0) {
          candidates = candidates.concat(searchTree.otherwise);
        }
        let queue = undefined;
        for (let i2 = 0;i2 < candidates.length; i2++) {
          const candidate = candidates[i2];
          const pr = map38.get(candidate)(input, options);
          if (isEither5(pr) && (!queue || queue.length === 0)) {
            if (isRight2(pr)) {
              return pr;
            } else {
              es.push([stepKey++, pr.left]);
            }
          } else {
            const nk = stepKey++;
            if (!queue) {
              queue = [];
            }
            queue.push((state) => suspend4(() => {
              if ("finalResult" in state) {
                return _void;
              } else {
                return flatMap18(either6(pr), (t) => {
                  if (isRight2(t)) {
                    state.finalResult = t;
                  } else {
                    state.es.push([nk, t.left]);
                  }
                  return _void;
                });
              }
            }));
          }
        }
        const computeResult = (es2) => isNonEmptyArray2(es2) ? es2.length === 1 && es2[0][1]._tag === "Type" ? left2(es2[0][1]) : left2(new Composite2(ast, input, sortByIndex(es2))) : left2(new Type2(ast, input));
        if (queue && queue.length > 0) {
          const cqueue = queue;
          return suspend4(() => {
            const state = {
              es: copy(es)
            };
            return flatMap18(forEach16(cqueue, (f) => f(state), {
              concurrency,
              batching,
              discard: true
            }), () => {
              if ("finalResult" in state) {
                return state.finalResult;
              }
              return computeResult(state.es);
            });
          });
        }
        return computeResult(es);
      };
    }
    case "Suspend": {
      const get21 = memoizeThunk(() => goMemo(annotations(ast.f(), ast.annotations), isDecoding));
      return (a, options) => get21()(a, options);
    }
  }
}, fromRefinement = (ast, refinement) => (u) => refinement(u) ? right2(u) : left2(new Type2(ast, u)), getLiterals = (ast, isDecoding) => {
  switch (ast._tag) {
    case "Declaration": {
      const annotation = getSurrogateAnnotation(ast);
      if (isSome2(annotation)) {
        return getLiterals(annotation.value, isDecoding);
      }
      break;
    }
    case "TypeLiteral": {
      const out = [];
      for (let i2 = 0;i2 < ast.propertySignatures.length; i2++) {
        const propertySignature = ast.propertySignatures[i2];
        const type = isDecoding ? encodedAST(propertySignature.type) : typeAST(propertySignature.type);
        if (isLiteral(type) && !propertySignature.isOptional) {
          out.push([propertySignature.name, type]);
        }
      }
      return out;
    }
    case "TupleType": {
      const out = [];
      for (let i2 = 0;i2 < ast.elements.length; i2++) {
        const element = ast.elements[i2];
        const type = isDecoding ? encodedAST(element.type) : typeAST(element.type);
        if (isLiteral(type) && !element.isOptional) {
          out.push([i2, type]);
        }
      }
      return out;
    }
    case "Refinement":
      return getLiterals(ast.from, isDecoding);
    case "Suspend":
      return getLiterals(ast.f(), isDecoding);
    case "Transformation":
      return getLiterals(isDecoding ? ast.from : ast.to, isDecoding);
  }
  return [];
}, getSearchTree = (members, isDecoding) => {
  const keys7 = {};
  const otherwise = [];
  const candidates = [];
  for (let i2 = 0;i2 < members.length; i2++) {
    const member = members[i2];
    const tags = getLiterals(member, isDecoding);
    if (tags.length > 0) {
      candidates.push(member);
      for (let j = 0;j < tags.length; j++) {
        const [key, literal3] = tags[j];
        const hash3 = String(literal3.literal);
        keys7[key] = keys7[key] || {
          buckets: {},
          literals: [],
          candidates: []
        };
        const buckets = keys7[key].buckets;
        if (Object.prototype.hasOwnProperty.call(buckets, hash3)) {
          if (j < tags.length - 1) {
            continue;
          }
          buckets[hash3].push(member);
          keys7[key].literals.push(literal3);
          keys7[key].candidates.push(member);
        } else {
          buckets[hash3] = [member];
          keys7[key].literals.push(literal3);
          keys7[key].candidates.push(member);
          break;
        }
      }
    } else {
      otherwise.push(member);
    }
  }
  return {
    keys: keys7,
    otherwise,
    candidates
  };
}, dropRightRefinement = (ast) => isRefinement(ast) ? dropRightRefinement(ast.from) : ast, handleForbidden = (effect4, ast, actual, options) => {
  if (options?.isEffectAllowed === true) {
    return effect4;
  }
  if (isEither5(effect4)) {
    return effect4;
  }
  const scheduler2 = new SyncScheduler;
  const fiber = runFork2(effect4, {
    scheduler: scheduler2
  });
  scheduler2.flush();
  const exit4 = fiber.unsafePoll();
  if (exit4) {
    if (isSuccess(exit4)) {
      return right2(exit4.value);
    }
    const cause3 = exit4.cause;
    if (isFailType2(cause3)) {
      return left2(cause3.error);
    }
    return left2(new Forbidden(ast, actual, pretty3(cause3)));
  }
  return left2(new Forbidden(ast, actual, "cannot be be resolved synchronously, this is caused by using runSync on an effect that performs async work"));
}, compare = ([a], [b]) => a > b ? 1 : a < b ? -1 : 0, getFinalTransformation = (transformation, isDecoding) => {
  switch (transformation._tag) {
    case "FinalTransformation":
      return isDecoding ? transformation.decode : transformation.encode;
    case "ComposeTransformation":
      return right2;
    case "TypeLiteralTransformation":
      return (input) => {
        let out = right2(input);
        for (const pst of transformation.propertySignatureTransformations) {
          const [from, to] = isDecoding ? [pst.from, pst.to] : [pst.to, pst.from];
          const transformation2 = isDecoding ? pst.decode : pst.encode;
          const f = (input2) => {
            const o = transformation2(Object.prototype.hasOwnProperty.call(input2, from) ? some3(input2[from]) : none2());
            delete input2[from];
            if (isSome2(o)) {
              input2[to] = o.value;
            }
            return input2;
          };
          out = map37(out, f);
        }
        return out;
      };
  }
}, makeTree = (value4, forest = []) => ({
  value: value4,
  forest
}), TreeFormatter, drawTree = (tree) => tree.value + draw(`
`, tree.forest), draw = (indentation, forest) => {
  let r = "";
  const len = forest.length;
  let tree;
  for (let i2 = 0;i2 < len; i2++) {
    tree = forest[i2];
    const isLast = i2 === len - 1;
    r += indentation + (isLast ? "└" : "├") + "─ " + tree.value;
    r += draw(indentation + (len > 1 && !isLast ? "│  " : "   "), tree.forest);
  }
  return r;
}, formatTransformationKind = (kind) => {
  switch (kind) {
    case "Encoded":
      return "Encoded side transformation failure";
    case "Transformation":
      return "Transformation process failure";
    case "Type":
      return "Type side transformation failure";
  }
}, formatRefinementKind = (kind) => {
  switch (kind) {
    case "From":
      return "From side refinement failure";
    case "Predicate":
      return "Predicate refinement failure";
  }
}, getAnnotated = (issue) => ("ast" in issue) ? some3(issue.ast) : none2(), Either_void, getCurrentMessage = (issue) => getAnnotated(issue).pipe(flatMap2(getMessageAnnotation), match2({
  onNone: () => Either_void,
  onSome: (messageAnnotation) => {
    const union15 = messageAnnotation(issue);
    if (isString2(union15)) {
      return right2({
        message: union15,
        override: false
      });
    }
    if (isEffect2(union15)) {
      return map26(union15, (message) => ({
        message,
        override: false
      }));
    }
    if (isString2(union15.message)) {
      return right2({
        message: union15.message,
        override: union15.override
      });
    }
    return map26(union15.message, (message) => ({
      message,
      override: union15.override
    }));
  }
})), createParseIssueGuard = (tag) => (issue) => issue._tag === tag, isComposite3, isRefinement2, isTransformation2, getMessage = (issue) => flatMap25(getCurrentMessage(issue), (currentMessage) => {
  if (currentMessage !== undefined) {
    const useInnerMessage = !currentMessage.override && (isComposite3(issue) || isRefinement2(issue) && issue.kind === "From" || isTransformation2(issue) && issue.kind !== "Transformation");
    return useInnerMessage ? isTransformation2(issue) || isRefinement2(issue) ? getMessage(issue.issue) : Either_void : right2(currentMessage.message);
  }
  return Either_void;
}), getParseIssueTitleAnnotation2 = (issue) => getAnnotated(issue).pipe(flatMap2(getParseIssueTitleAnnotation), flatMapNullable((annotation) => annotation(issue)), getOrUndefined2), formatTypeMessage = (issue) => map37(getMessage(issue), (message) => message ?? getParseIssueTitleAnnotation2(issue) ?? getDefaultTypeMessage(issue)), getParseIssueTitle = (issue) => getParseIssueTitleAnnotation2(issue) ?? String(issue.ast), formatForbiddenMessage = (issue) => issue.message ?? "is forbidden", formatUnexpectedMessage = (issue) => issue.message ?? "is unexpected", formatMissingMessage = (issue) => {
  const missingMessageAnnotation = getMissingMessageAnnotation(issue.ast);
  if (isSome2(missingMessageAnnotation)) {
    const annotation = missingMessageAnnotation.value();
    return isString2(annotation) ? right2(annotation) : annotation;
  }
  return right2(issue.message ?? "is missing");
}, formatTree = (issue) => {
  switch (issue._tag) {
    case "Type":
      return map37(formatTypeMessage(issue), makeTree);
    case "Forbidden":
      return right2(makeTree(getParseIssueTitle(issue), [makeTree(formatForbiddenMessage(issue))]));
    case "Unexpected":
      return right2(makeTree(formatUnexpectedMessage(issue)));
    case "Missing":
      return map37(formatMissingMessage(issue), makeTree);
    case "Transformation":
      return flatMap25(getMessage(issue), (message) => {
        if (message !== undefined) {
          return right2(makeTree(message));
        }
        return map37(formatTree(issue.issue), (tree) => makeTree(getParseIssueTitle(issue), [makeTree(formatTransformationKind(issue.kind), [tree])]));
      });
    case "Refinement":
      return flatMap25(getMessage(issue), (message) => {
        if (message !== undefined) {
          return right2(makeTree(message));
        }
        return map37(formatTree(issue.issue), (tree) => makeTree(getParseIssueTitle(issue), [makeTree(formatRefinementKind(issue.kind), [tree])]));
      });
    case "Pointer":
      return map37(formatTree(issue.issue), (tree) => makeTree(formatPath(issue.path), [tree]));
    case "Composite":
      return flatMap25(getMessage(issue), (message) => {
        if (message !== undefined) {
          return right2(makeTree(message));
        }
        const parseIssueTitle = getParseIssueTitle(issue);
        return isNonEmpty(issue.issues) ? map37(forEach16(issue.issues, formatTree), (forest) => makeTree(parseIssueTitle, forest)) : map37(formatTree(issue.issues), (tree) => makeTree(parseIssueTitle, [tree]));
      });
  }
}, makeArrayFormatterIssue = (_tag, path, message) => ({
  _tag,
  path,
  message
}), ArrayFormatter, getArrayFormatterIssues = (issue, parentTag, path) => {
  const _tag = issue._tag;
  switch (_tag) {
    case "Type":
      return map37(formatTypeMessage(issue), (message) => [makeArrayFormatterIssue(parentTag ?? _tag, path, message)]);
    case "Forbidden":
      return right2([makeArrayFormatterIssue(_tag, path, formatForbiddenMessage(issue))]);
    case "Unexpected":
      return right2([makeArrayFormatterIssue(_tag, path, formatUnexpectedMessage(issue))]);
    case "Missing":
      return map37(formatMissingMessage(issue), (message) => [makeArrayFormatterIssue(_tag, path, message)]);
    case "Pointer":
      return getArrayFormatterIssues(issue.issue, undefined, path.concat(issue.path));
    case "Composite":
      return flatMap25(getMessage(issue), (message) => {
        if (message !== undefined) {
          return right2([makeArrayFormatterIssue(_tag, path, message)]);
        }
        return isNonEmpty(issue.issues) ? map37(forEach16(issue.issues, (issue2) => getArrayFormatterIssues(issue2, undefined, path)), flatten3) : getArrayFormatterIssues(issue.issues, undefined, path);
      });
    case "Refinement":
      return flatMap25(getMessage(issue), (message) => {
        if (message !== undefined) {
          return right2([makeArrayFormatterIssue(_tag, path, message)]);
        }
        return getArrayFormatterIssues(issue.issue, issue.kind === "Predicate" ? _tag : undefined, path);
      });
    case "Transformation":
      return flatMap25(getMessage(issue), (message) => {
        if (message !== undefined) {
          return right2([makeArrayFormatterIssue(_tag, path, message)]);
        }
        return getArrayFormatterIssues(issue.issue, issue.kind === "Transformation" ? _tag : undefined, path);
      });
  }
};
var init_ParseResult = __esm(() => {
  init_Array();
  init_Cause();
  init_Data();
  init_Effect();
  init_Either();
  init_Exit();
  init_Function();
  init_GlobalValue();
  init_Inspectable();
  init_util();
  init_Option();
  init_Predicate();
  init_Scheduler();
  init_SchemaAST();
  ParseErrorTypeId2 = /* @__PURE__ */ Symbol.for("effect/Schema/ParseErrorTypeId");
  ParseError2 = class ParseError2 extends (/* @__PURE__ */ TaggedError2("ParseError")) {
    [ParseErrorTypeId2] = ParseErrorTypeId2;
    get message() {
      return this.toString();
    }
    toString() {
      return TreeFormatter.formatIssueSync(this.issue);
    }
    toJSON() {
      return {
        _id: "ParseError",
        message: this.toString()
      };
    }
    [NodeInspectSymbol]() {
      return this.toJSON();
    }
  };
  succeed24 = right2;
  fail23 = left2;
  _try = try_;
  fromOption9 = fromOption2;
  isEither5 = isEither2;
  flatMap25 = /* @__PURE__ */ dual(2, (self, f) => {
    return isEither5(self) ? match(self, {
      onLeft: left2,
      onRight: f
    }) : flatMap18(self, f);
  });
  map37 = /* @__PURE__ */ dual(2, (self, f) => {
    return isEither5(self) ? map(self, f) : map26(self, f);
  });
  mapError12 = /* @__PURE__ */ dual(2, (self, f) => {
    return isEither5(self) ? mapLeft(self, f) : mapError5(self, f);
  });
  mapBoth10 = /* @__PURE__ */ dual(2, (self, options) => {
    return isEither5(self) ? mapBoth(self, {
      onLeft: options.onFailure,
      onRight: options.onSuccess
    }) : mapBoth6(self, options);
  });
  orElse18 = /* @__PURE__ */ dual(2, (self, f) => {
    return isEither5(self) ? match(self, {
      onLeft: f,
      onRight: right2
    }) : catchAll4(self, f);
  });
  decodeSync = decodeUnknownSync;
  decodeOption = decodeUnknownOption;
  decodeEither = decodeUnknownEither;
  decodePromise = decodeUnknownPromise;
  decode5 = decodeUnknown2;
  encodeSync = encodeUnknownSync;
  encodeOption = encodeUnknownOption;
  encodeEither = encodeUnknownEither;
  encodePromise = encodeUnknownPromise;
  encode4 = encodeUnknown;
  decodeMemoMap = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/ParseResult/decodeMemoMap"), () => new WeakMap);
  encodeMemoMap = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/ParseResult/encodeMemoMap"), () => new WeakMap);
  TreeFormatter = {
    formatIssue: (issue) => map37(formatTree(issue), drawTree),
    formatIssueSync: (issue) => {
      const e = TreeFormatter.formatIssue(issue);
      return isEither5(e) ? getOrThrow(e) : runSync2(e);
    },
    formatError: (error4) => TreeFormatter.formatIssue(error4.issue),
    formatErrorSync: (error4) => TreeFormatter.formatIssueSync(error4.issue)
  };
  Either_void = /* @__PURE__ */ right2(undefined);
  isComposite3 = /* @__PURE__ */ createParseIssueGuard("Composite");
  isRefinement2 = /* @__PURE__ */ createParseIssueGuard("Refinement");
  isTransformation2 = /* @__PURE__ */ createParseIssueGuard("Transformation");
  ArrayFormatter = {
    formatIssue: (issue) => getArrayFormatterIssues(issue, undefined, []),
    formatIssueSync: (issue) => {
      const e = ArrayFormatter.formatIssue(issue);
      return isEither5(e) ? getOrThrow(e) : runSync2(e);
    },
    formatError: (error4) => ArrayFormatter.formatIssue(error4.issue),
    formatErrorSync: (error4) => ArrayFormatter.formatIssueSync(error4.issue)
  };
});

// node_modules/effect/dist/esm/JSONSchema.js
var exports_JSONSchema = {};
__export(exports_JSONSchema, {
  make: () => make83,
  fromAST: () => fromAST
});
function isContentSchemaSupported(options) {
  switch (options.target) {
    case "jsonSchema7":
      return false;
    case "jsonSchema2019-09":
    case "openApi3.1":
      return true;
  }
}
function isNullTypeKeywordSupported(options) {
  switch (options.target) {
    case "jsonSchema7":
    case "jsonSchema2019-09":
      return true;
    case "openApi3.1":
      return false;
  }
}
function isNullableKeywordSupported(options) {
  switch (options.target) {
    case "jsonSchema7":
    case "jsonSchema2019-09":
      return false;
    case "openApi3.1":
      return true;
  }
}
function getAdditionalProperties(options) {
  switch (options.additionalPropertiesStrategy) {
    case "allow":
      return true;
    case "strict":
      return false;
  }
}
var make83 = (schema) => {
  const definitions = {};
  const ast = isTransformation(schema.ast) && isParseJsonTransformation(schema.ast.from) ? schema.ast.to : schema.ast;
  const jsonSchema = fromAST(ast, {
    definitions
  });
  const out = {
    $schema,
    $defs: {},
    ...jsonSchema
  };
  if (isEmptyRecord(definitions)) {
    delete out.$defs;
  } else {
    out.$defs = definitions;
  }
  return out;
}, fromAST = (ast, options) => {
  const definitionPath = options.definitionPath ?? "#/$defs/";
  const getRef = (id3) => definitionPath + id3;
  const target = options.target ?? "jsonSchema7";
  const handleIdentifier = options.topLevelReferenceStrategy !== "skip";
  const additionalPropertiesStrategy = options.additionalPropertiesStrategy ?? "strict";
  return go3(ast, options.definitions, handleIdentifier, [], {
    getRef,
    target,
    additionalPropertiesStrategy
  });
}, constNever, constAny, constUnknown, constVoid2, constAnyObject, constEmpty2, $schema = "http://json-schema.org/draft-07/schema#", getJsonSchemaAnnotations = (ast, annotated) => {
  annotated ??= ast;
  const out = getSomes2({
    description: getDescriptionAnnotation(annotated),
    title: getTitleAnnotation(annotated),
    default: getDefaultAnnotation(annotated)
  });
  const oexamples = getExamplesAnnotation(annotated);
  if (isSome2(oexamples) && oexamples.value.length > 0) {
    const getOption4 = getOption3(ast, false);
    const examples = filterMap4(oexamples.value, (e) => getOption4(e));
    if (examples.length > 0) {
      out.examples = examples;
    }
  }
  return out;
}, removeDefaultJsonSchemaAnnotations = (jsonSchemaAnnotations, ast) => {
  if (jsonSchemaAnnotations["title"] === ast.annotations[TitleAnnotationId]) {
    delete jsonSchemaAnnotations["title"];
  }
  if (jsonSchemaAnnotations["description"] === ast.annotations[DescriptionAnnotationId]) {
    delete jsonSchemaAnnotations["description"];
  }
  return jsonSchemaAnnotations;
}, getASTJsonSchemaAnnotations = (ast) => {
  const jsonSchemaAnnotations = getJsonSchemaAnnotations(ast);
  switch (ast._tag) {
    case "StringKeyword":
      return removeDefaultJsonSchemaAnnotations(jsonSchemaAnnotations, stringKeyword);
    case "NumberKeyword":
      return removeDefaultJsonSchemaAnnotations(jsonSchemaAnnotations, numberKeyword);
    case "BooleanKeyword":
      return removeDefaultJsonSchemaAnnotations(jsonSchemaAnnotations, booleanKeyword);
    default:
      return jsonSchemaAnnotations;
  }
}, pruneUndefined2 = (ast) => {
  if (isNone2(getJSONSchemaAnnotation(ast))) {
    return pruneUndefined(ast, pruneUndefined2, (ast2) => pruneUndefined2(ast2.from));
  }
}, isParseJsonTransformation = (ast) => ast.annotations[SchemaIdAnnotationId] === ParseJsonSchemaId, isOverrideAnnotation = (jsonSchema) => {
  return "type" in jsonSchema || "oneOf" in jsonSchema || "anyOf" in jsonSchema || "const" in jsonSchema || "enum" in jsonSchema || "$ref" in jsonSchema;
}, isMergeableEnum = (jsonSchema) => {
  const len = Object.keys(jsonSchema).length;
  return "enum" in jsonSchema && (len === 1 || ("type" in jsonSchema) && len === 2);
}, addEnumType = (jsonSchema) => {
  if ("enum" in jsonSchema && !("type" in jsonSchema)) {
    const type = jsonSchema.enum.every(isString2) ? "string" : jsonSchema.enum.every(isNumber2) ? "number" : jsonSchema.enum.every(isBoolean2) ? "boolean" : undefined;
    if (type !== undefined) {
      return {
        type,
        ...jsonSchema
      };
    }
  }
  return jsonSchema;
}, mergeRefinements = (from, jsonSchema, annotations2) => {
  const out = {
    ...from,
    ...annotations2,
    ...jsonSchema
  };
  out.allOf ??= [];
  const handle = (name, filter21) => {
    if (name in jsonSchema && name in from) {
      out.allOf.unshift({
        [name]: from[name]
      });
      out.allOf = out.allOf.filter(filter21);
    }
  };
  handle("minLength", (i2) => i2.minLength > jsonSchema.minLength);
  handle("maxLength", (i2) => i2.maxLength < jsonSchema.maxLength);
  handle("pattern", (i2) => i2.pattern !== jsonSchema.pattern);
  handle("minItems", (i2) => i2.minItems > jsonSchema.minItems);
  handle("maxItems", (i2) => i2.maxItems < jsonSchema.maxItems);
  handle("minimum", (i2) => i2.minimum > jsonSchema.minimum);
  handle("maximum", (i2) => i2.maximum < jsonSchema.maximum);
  handle("exclusiveMinimum", (i2) => i2.exclusiveMinimum > jsonSchema.exclusiveMinimum);
  handle("exclusiveMaximum", (i2) => i2.exclusiveMaximum < jsonSchema.exclusiveMaximum);
  handle("multipleOf", (i2) => i2.multipleOf !== jsonSchema.multipleOf);
  if (out.allOf.length === 0) {
    delete out.allOf;
  }
  return out;
}, isNeverJSONSchema = (jsonSchema) => ("$id" in jsonSchema) && jsonSchema.$id === "/schemas/never", isAnyJSONSchema = (jsonSchema) => ("$id" in jsonSchema) && jsonSchema.$id === "/schemas/any", isUnknownJSONSchema = (jsonSchema) => ("$id" in jsonSchema) && jsonSchema.$id === "/schemas/unknown", isVoidJSONSchema = (jsonSchema) => ("$id" in jsonSchema) && jsonSchema.$id === "/schemas/void", shrink = (members) => {
  let i2 = members.findIndex(isAnyJSONSchema);
  if (i2 !== -1) {
    members = [members[i2]];
  }
  i2 = members.findIndex(isUnknownJSONSchema);
  if (i2 !== -1) {
    members = [members[i2]];
  }
  i2 = members.findIndex(isVoidJSONSchema);
  if (i2 !== -1) {
    members = [members[i2]];
  }
  return members;
}, go3 = (ast, $defs, handleIdentifier, path, options) => {
  if (handleIdentifier) {
    const identifier2 = getJSONIdentifier(ast);
    if (isSome2(identifier2)) {
      const id3 = identifier2.value;
      const out = {
        $ref: options.getRef(id3)
      };
      if (!has($defs, id3)) {
        $defs[id3] = out;
        $defs[id3] = go3(ast, $defs, false, path, options);
      }
      return out;
    }
  }
  const hook = getJSONSchemaAnnotation(ast);
  if (isSome2(hook)) {
    const handler = hook.value;
    if (isRefinement(ast)) {
      const t = getTransformationFrom(ast);
      if (t === undefined) {
        return mergeRefinements(go3(ast.from, $defs, handleIdentifier, path, options), handler, getJsonSchemaAnnotations(ast));
      } else if (!isOverrideAnnotation(handler)) {
        return go3(t, $defs, handleIdentifier, path, options);
      }
    }
    return handler;
  }
  const surrogate = getSurrogateAnnotation(ast);
  if (isSome2(surrogate)) {
    return go3(surrogate.value, $defs, handleIdentifier, path, options);
  }
  switch (ast._tag) {
    case "Declaration":
      throw new Error(getJSONSchemaMissingAnnotationErrorMessage(path, ast));
    case "Literal": {
      const literal3 = ast.literal;
      if (literal3 === null) {
        if (isNullTypeKeywordSupported(options)) {
          return {
            type: "null",
            ...getJsonSchemaAnnotations(ast)
          };
        } else {
          return {
            enum: [null],
            ...getJsonSchemaAnnotations(ast)
          };
        }
      } else if (isString2(literal3)) {
        return {
          type: "string",
          enum: [literal3],
          ...getJsonSchemaAnnotations(ast)
        };
      } else if (isNumber2(literal3)) {
        return {
          type: "number",
          enum: [literal3],
          ...getJsonSchemaAnnotations(ast)
        };
      } else if (isBoolean2(literal3)) {
        return {
          type: "boolean",
          enum: [literal3],
          ...getJsonSchemaAnnotations(ast)
        };
      }
      throw new Error(getJSONSchemaMissingAnnotationErrorMessage(path, ast));
    }
    case "UniqueSymbol":
      throw new Error(getJSONSchemaMissingAnnotationErrorMessage(path, ast));
    case "UndefinedKeyword":
      throw new Error(getJSONSchemaMissingAnnotationErrorMessage(path, ast));
    case "VoidKeyword":
      return {
        ...constVoid2,
        ...getJsonSchemaAnnotations(ast)
      };
    case "NeverKeyword":
      return {
        ...constNever,
        ...getJsonSchemaAnnotations(ast)
      };
    case "UnknownKeyword":
      return {
        ...constUnknown,
        ...getJsonSchemaAnnotations(ast)
      };
    case "AnyKeyword":
      return {
        ...constAny,
        ...getJsonSchemaAnnotations(ast)
      };
    case "ObjectKeyword":
      return {
        ...constAnyObject,
        ...getJsonSchemaAnnotations(ast)
      };
    case "StringKeyword":
      return {
        type: "string",
        ...getASTJsonSchemaAnnotations(ast)
      };
    case "NumberKeyword":
      return {
        type: "number",
        ...getASTJsonSchemaAnnotations(ast)
      };
    case "BooleanKeyword":
      return {
        type: "boolean",
        ...getASTJsonSchemaAnnotations(ast)
      };
    case "BigIntKeyword":
      throw new Error(getJSONSchemaMissingAnnotationErrorMessage(path, ast));
    case "SymbolKeyword":
      throw new Error(getJSONSchemaMissingAnnotationErrorMessage(path, ast));
    case "TupleType": {
      const elements = ast.elements.map((e, i2) => ({
        ...go3(e.type, $defs, true, path.concat(i2), options),
        ...getJsonSchemaAnnotations(e.type, e)
      }));
      const rest = ast.rest.map((annotatedAST) => ({
        ...go3(annotatedAST.type, $defs, true, path, options),
        ...getJsonSchemaAnnotations(annotatedAST.type, annotatedAST)
      }));
      const output = {
        type: "array"
      };
      const len = ast.elements.length;
      if (len > 0) {
        output.minItems = len - ast.elements.filter((element) => element.isOptional).length;
        output.items = elements;
      }
      const restLength = rest.length;
      if (restLength > 0) {
        const head10 = rest[0];
        const isHomogeneous = restLength === 1 && ast.elements.every((e) => e.type === ast.rest[0].type);
        if (isHomogeneous) {
          output.items = head10;
        } else {
          output.additionalItems = head10;
        }
        if (restLength > 1) {
          throw new Error(getJSONSchemaUnsupportedPostRestElementsErrorMessage(path));
        }
      } else {
        if (len > 0) {
          output.additionalItems = false;
        } else {
          output.maxItems = 0;
        }
      }
      return {
        ...output,
        ...getJsonSchemaAnnotations(ast)
      };
    }
    case "TypeLiteral": {
      if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {
        return {
          ...constEmpty2,
          ...getJsonSchemaAnnotations(ast)
        };
      }
      const output = {
        type: "object",
        required: [],
        properties: {},
        additionalProperties: getAdditionalProperties(options)
      };
      let patternProperties = undefined;
      let propertyNames = undefined;
      for (const is2 of ast.indexSignatures) {
        const pruned = pruneUndefined2(is2.type) ?? is2.type;
        const parameter = is2.parameter;
        switch (parameter._tag) {
          case "StringKeyword": {
            output.additionalProperties = go3(pruned, $defs, true, path, options);
            break;
          }
          case "TemplateLiteral": {
            patternProperties = go3(pruned, $defs, true, path, options);
            propertyNames = {
              type: "string",
              pattern: getTemplateLiteralRegExp(parameter).source
            };
            break;
          }
          case "Refinement": {
            patternProperties = go3(pruned, $defs, true, path, options);
            propertyNames = go3(parameter, $defs, true, path, options);
            break;
          }
          case "SymbolKeyword": {
            const indexSignaturePath = path.concat("[symbol]");
            output.additionalProperties = go3(pruned, $defs, true, indexSignaturePath, options);
            propertyNames = go3(parameter, $defs, true, indexSignaturePath, options);
            break;
          }
        }
      }
      for (let i2 = 0;i2 < ast.propertySignatures.length; i2++) {
        const ps = ast.propertySignatures[i2];
        const name = ps.name;
        if (isString2(name)) {
          const pruned = pruneUndefined2(ps.type);
          const type = pruned ?? ps.type;
          output.properties[name] = {
            ...go3(type, $defs, true, path.concat(ps.name), options),
            ...getJsonSchemaAnnotations(type, ps)
          };
          if (!ps.isOptional && pruned === undefined) {
            output.required.push(name);
          }
        } else {
          throw new Error(getJSONSchemaUnsupportedKeyErrorMessage(name, path));
        }
      }
      if (patternProperties !== undefined) {
        delete output.additionalProperties;
        output.patternProperties = {
          "": patternProperties
        };
      }
      if (propertyNames !== undefined) {
        output.propertyNames = propertyNames;
      }
      return {
        ...output,
        ...getJsonSchemaAnnotations(ast)
      };
    }
    case "Union": {
      const members = [];
      for (const type of ast.types) {
        const jsonSchema = go3(type, $defs, true, path, options);
        if (!isNeverJSONSchema(jsonSchema)) {
          const last7 = members[members.length - 1];
          if (isMergeableEnum(jsonSchema) && last7 !== undefined && isMergeableEnum(last7)) {
            members[members.length - 1] = {
              enum: last7.enum.concat(jsonSchema.enum)
            };
          } else {
            members.push(jsonSchema);
          }
        }
      }
      const anyOf = shrink(members);
      const finalize = (anyOf2) => {
        switch (anyOf2.length) {
          case 0:
            return {
              ...constNever,
              ...getJsonSchemaAnnotations(ast)
            };
          case 1: {
            return {
              ...addEnumType(anyOf2[0]),
              ...getJsonSchemaAnnotations(ast)
            };
          }
          default:
            return {
              anyOf: anyOf2.map(addEnumType),
              ...getJsonSchemaAnnotations(ast)
            };
        }
      };
      if (isNullableKeywordSupported(options)) {
        let nullable = false;
        const nonNullables = [];
        for (const s of anyOf) {
          if ("nullable" in s) {
            nullable = true;
            const nn = {
              ...s
            };
            delete nn.nullable;
            nonNullables.push(nn);
          } else if (isMergeableEnum(s)) {
            const nnes = s.enum.filter((e) => e !== null);
            if (nnes.length < s.enum.length) {
              nullable = true;
              if (nnes.length === 0) {
                continue;
              }
              const nn = {
                ...s
              };
              nn.enum = nnes;
              nonNullables.push(nn);
            }
          } else {
            nonNullables.push(s);
          }
        }
        if (nullable) {
          const out = finalize(nonNullables);
          if (!isAnyJSONSchema(out) && !isUnknownJSONSchema(out)) {
            out.nullable = nullable;
          }
          return out;
        }
      }
      return finalize(anyOf);
    }
    case "Enums": {
      const anyOf = ast.enums.map((e) => addEnumType({
        title: e[0],
        enum: [e[1]]
      }));
      return anyOf.length >= 1 ? {
        $comment: "/schemas/enums",
        anyOf,
        ...getJsonSchemaAnnotations(ast)
      } : {
        ...constNever,
        ...getJsonSchemaAnnotations(ast)
      };
    }
    case "Refinement": {
      if (getTransformationFrom(ast) === undefined) {
        throw new Error(getJSONSchemaMissingAnnotationErrorMessage(path, ast));
      }
      return go3(ast.from, $defs, handleIdentifier, path, options);
    }
    case "TemplateLiteral": {
      const regex = getTemplateLiteralRegExp(ast);
      return {
        type: "string",
        title: String(ast),
        description: "a template literal",
        pattern: regex.source,
        ...getJsonSchemaAnnotations(ast)
      };
    }
    case "Suspend": {
      const identifier2 = orElse2(getJSONIdentifier(ast), () => getJSONIdentifier(ast.f()));
      if (isNone2(identifier2)) {
        throw new Error(getJSONSchemaMissingIdentifierAnnotationErrorMessage(path, ast));
      }
      return go3(ast.f(), $defs, handleIdentifier, path, options);
    }
    case "Transformation": {
      if (isParseJsonTransformation(ast.from)) {
        const out = {
          type: "string",
          contentMediaType: "application/json"
        };
        if (isContentSchemaSupported(options)) {
          out["contentSchema"] = go3(ast.to, $defs, handleIdentifier, path, options);
        }
        return out;
      }
      let next4 = ast.from;
      if (isTypeLiteralTransformation(ast.transformation)) {
        const identifier2 = getIdentifierAnnotation(ast);
        if (isSome2(identifier2) && isNone2(getIdentifierAnnotation(next4))) {
          next4 = annotations(next4, {
            [IdentifierAnnotationId]: identifier2.value
          });
        }
        const title = getTitleAnnotation(ast);
        if (isSome2(title) && isNone2(getTitleAnnotation(next4))) {
          next4 = annotations(next4, {
            [TitleAnnotationId]: title.value
          });
        }
        const description = getDescriptionAnnotation(ast);
        if (isSome2(description) && isNone2(getDescriptionAnnotation(next4))) {
          next4 = annotations(next4, {
            [DescriptionAnnotationId]: description.value
          });
        }
      }
      return go3(next4, $defs, handleIdentifier, path, options);
    }
  }
};
var init_JSONSchema = __esm(() => {
  init_Array();
  init_errors();
  init_Option();
  init_ParseResult();
  init_Predicate();
  init_Record();
  init_SchemaAST();
  constNever = {
    $id: "/schemas/never",
    not: {}
  };
  constAny = {
    $id: "/schemas/any"
  };
  constUnknown = {
    $id: "/schemas/unknown"
  };
  constVoid2 = {
    $id: "/schemas/void"
  };
  constAnyObject = {
    $id: "/schemas/object",
    anyOf: [{
      type: "object"
    }, {
      type: "array"
    }]
  };
  constEmpty2 = {
    $id: "/schemas/{}",
    anyOf: [{
      type: "object"
    }, {
      type: "array"
    }]
  };
});

// node_modules/effect/dist/esm/internal/pool.js
var PoolTypeId, poolVariance, isPool = (u) => hasProperty(u, PoolTypeId), makeWith4 = (options) => uninterruptibleMask((restore) => flatMap12(context2(), (context12) => {
  const scope6 = get5(context12, scopeTag);
  const acquire = mapInputContext(options.acquire, (input) => merge3(context12, input));
  const pool = new PoolImpl(scope6, acquire, options.concurrency ?? 1, options.min, options.max, options.strategy, Math.min(Math.max(options.targetUtilization ?? 1, 0.1), 1));
  const initialize = tap2(forkDaemon2(restore(pool.resize)), (fiber) => scope6.addFinalizer(() => interruptFiber(fiber)));
  const runStrategy = tap2(forkDaemon2(restore(options.strategy.run(pool))), (fiber) => scope6.addFinalizer(() => interruptFiber(fiber)));
  return succeed(pool).pipe(zipLeft2(scope6.addFinalizer(() => pool.shutdown)), zipLeft2(initialize), zipLeft2(runStrategy));
})), make84 = (options) => makeWith4({
  ...options,
  min: options.size,
  max: options.size,
  strategy: strategyNoop()
}), makeWithTTL = (options) => flatMap12(options.timeToLiveStrategy === "creation" ? strategyCreationTTL(options.timeToLive) : strategyUsageTTL(options.timeToLive), (strategy) => makeWith4({
  ...options,
  strategy
})), get21 = (self) => self.get, invalidate, PoolImpl, strategyNoop = () => ({
  run: (_) => void_3,
  onAcquire: (_) => void_3,
  reclaim: (_) => succeedNone
}), strategyCreationTTL = (ttl) => clockWith((clock3) => map14(unbounded2(), (queue) => {
  const ttlMillis = toMillis(ttl);
  const creationTimes = new WeakMap;
  return identity({
    run: (pool) => {
      const process3 = (item) => suspend(() => {
        if (!pool.items.has(item) || pool.invalidated.has(item)) {
          return void_3;
        }
        const now3 = clock3.unsafeCurrentTimeMillis();
        const created = creationTimes.get(item);
        const remaining = ttlMillis - (now3 - created);
        return remaining > 0 ? delay(process3(item), remaining) : pool.invalidatePoolItem(item);
      });
      return queue.take.pipe(tap2(process3), forever);
    },
    onAcquire: (item) => suspend(() => {
      creationTimes.set(item, clock3.unsafeCurrentTimeMillis());
      return queue.offer(item);
    }),
    reclaim: (_) => succeedNone
  });
})), strategyUsageTTL = (ttl) => map14(unbounded2(), (queue) => {
  return identity({
    run: (pool) => {
      const process3 = suspend(() => {
        const excess = pool.activeSize - pool.targetSize;
        if (excess <= 0)
          return void_3;
        return queue.take.pipe(tap2((item) => pool.invalidatePoolItem(item)), zipRight2(process3));
      });
      return process3.pipe(delay(ttl), forever);
    },
    onAcquire: (item) => queue.offer(item),
    reclaim(pool) {
      return suspend(() => {
        if (pool.invalidated.size === 0) {
          return succeedNone;
        }
        const item = head(filter2(pool.invalidated, (item2) => !item2.disableReclaim));
        if (item._tag === "None") {
          return succeedNone;
        }
        pool.invalidated.delete(item.value);
        if (item.value.refCount < pool.concurrency) {
          pool.available.add(item.value);
        }
        return as3(queue.offer(item.value), item);
      });
    }
  });
}), reportUnhandledError = (cause3) => withFiberRuntime((fiber) => {
  const unhandledLogLevel = fiber.getFiberRef(currentUnhandledErrorLogLevel);
  if (unhandledLogLevel._tag === "Some") {
    fiber.log("Unhandled error in pool finalizer", cause3, unhandledLogLevel);
  }
  return void_3;
});
var init_pool = __esm(() => {
  init_Context();
  init_Duration();
  init_Effectable();
  init_Function();
  init_Iterable();
  init_Option();
  init_Predicate();
  init_core_effect();
  init_core();
  init_defaultServices();
  init_circular();
  init_fiberRuntime();
  init_queue();
  PoolTypeId = /* @__PURE__ */ Symbol.for("effect/Pool");
  poolVariance = {
    _E: (_) => _,
    _A: (_) => _
  };
  invalidate = /* @__PURE__ */ dual(2, (self, item) => self.invalidate(item));
  PoolImpl = class PoolImpl extends Class2 {
    scope;
    acquire;
    concurrency;
    minSize;
    maxSize;
    strategy;
    targetUtilization;
    [PoolTypeId];
    isShuttingDown = false;
    semaphore;
    items = /* @__PURE__ */ new Set;
    available = /* @__PURE__ */ new Set;
    availableLatch = /* @__PURE__ */ unsafeMakeLatch(false);
    invalidated = /* @__PURE__ */ new Set;
    waiters = 0;
    constructor(scope6, acquire, concurrency, minSize, maxSize, strategy, targetUtilization) {
      super();
      this.scope = scope6;
      this.acquire = acquire;
      this.concurrency = concurrency;
      this.minSize = minSize;
      this.maxSize = maxSize;
      this.strategy = strategy;
      this.targetUtilization = targetUtilization;
      this[PoolTypeId] = poolVariance;
      this.semaphore = unsafeMakeSemaphore(concurrency * maxSize);
    }
    allocate = /* @__PURE__ */ acquireUseRelease(/* @__PURE__ */ scopeMake2(), (scope6) => this.acquire.pipe(scopeExtend(scope6), exit, flatMap12((exit4) => {
      const item = {
        exit: exit4,
        finalizer: catchAllCause(scope6.close(exit4), reportUnhandledError),
        refCount: 0,
        disableReclaim: false
      };
      this.items.add(item);
      this.available.add(item);
      return as3(exit4._tag === "Success" ? this.strategy.onAcquire(item) : zipRight2(item.finalizer, this.strategy.onAcquire(item)), item);
    })), (scope6, exit4) => exit4._tag === "Failure" ? scope6.close(exit4) : void_3);
    get currentUsage() {
      let count6 = this.waiters;
      for (const item of this.items) {
        count6 += item.refCount;
      }
      return count6;
    }
    get targetSize() {
      if (this.isShuttingDown)
        return 0;
      const utilization = this.currentUsage / this.targetUtilization;
      const target = Math.ceil(utilization / this.concurrency);
      return Math.min(Math.max(this.minSize, target), this.maxSize);
    }
    get activeSize() {
      return this.items.size - this.invalidated.size;
    }
    resizeLoop = /* @__PURE__ */ suspend(() => {
      if (this.activeSize >= this.targetSize) {
        return void_3;
      }
      const toAcquire = this.targetSize - this.activeSize;
      return this.strategy.reclaim(this).pipe(flatMap12(match2({
        onNone: () => this.allocate,
        onSome: succeed
      })), replicateEffect2(toAcquire, {
        concurrency: toAcquire
      }), zipLeft2(this.availableLatch.open), flatMap12((items) => items.some((_) => _.exit._tag === "Failure") ? void_3 : this.resizeLoop));
    });
    resizeSemaphore = /* @__PURE__ */ unsafeMakeSemaphore(1);
    resize = /* @__PURE__ */ this.resizeSemaphore.withPermits(1)(this.resizeLoop);
    getPoolItem = /* @__PURE__ */ uninterruptibleMask((restore) => restore(this.semaphore.take(1)).pipe(zipRight2(scopeTag), flatMap12((scope6) => suspend(() => {
      this.waiters++;
      if (this.isShuttingDown) {
        return interrupt2;
      } else if (this.targetSize > this.activeSize) {
        const self = this;
        return flatMap12(this.resizeSemaphore.withPermitsIfAvailable(1)(forkIn2(interruptible2(this.resize), this.scope)), function loop() {
          if (self.isShuttingDown) {
            return interrupt2;
          } else if (self.available.size > 0) {
            return succeed(unsafeHead(self.available));
          }
          self.availableLatch.unsafeClose();
          return flatMap12(self.availableLatch.await, loop);
        });
      }
      return succeed(unsafeHead(this.available));
    }).pipe(ensuring2(sync(() => this.waiters--)), tap2((item) => {
      if (item.exit._tag === "Failure") {
        this.items.delete(item);
        this.invalidated.delete(item);
        this.available.delete(item);
        return this.semaphore.release(1);
      }
      item.refCount++;
      this.available.delete(item);
      if (item.refCount < this.concurrency) {
        this.available.add(item);
      }
      return scope6.addFinalizer(() => zipRight2(suspend(() => {
        item.refCount--;
        if (this.invalidated.has(item)) {
          return this.invalidatePoolItem(item);
        }
        this.available.add(item);
        return exitVoid;
      }), this.semaphore.release(1)));
    }), onInterrupt(() => this.semaphore.release(1))))));
    commit() {
      return this.get;
    }
    get = /* @__PURE__ */ flatMap12(/* @__PURE__ */ suspend(() => this.isShuttingDown ? interrupt2 : this.getPoolItem), (_) => _.exit);
    invalidate(item) {
      return suspend(() => {
        if (this.isShuttingDown)
          return void_3;
        for (const poolItem of this.items) {
          if (poolItem.exit._tag === "Success" && poolItem.exit.value === item) {
            poolItem.disableReclaim = true;
            return uninterruptible(this.invalidatePoolItem(poolItem));
          }
        }
        return void_3;
      });
    }
    invalidatePoolItem(poolItem) {
      return suspend(() => {
        if (!this.items.has(poolItem)) {
          return void_3;
        } else if (poolItem.refCount === 0) {
          this.items.delete(poolItem);
          this.available.delete(poolItem);
          this.invalidated.delete(poolItem);
          return zipRight2(poolItem.finalizer, forkIn2(interruptible2(this.resize), this.scope));
        }
        this.invalidated.add(poolItem);
        this.available.delete(poolItem);
        return void_3;
      });
    }
    get shutdown() {
      return suspend(() => {
        if (this.isShuttingDown)
          return void_3;
        this.isShuttingDown = true;
        const size27 = this.items.size;
        const semaphore = unsafeMakeSemaphore(size27);
        return forEachSequentialDiscard(this.items, (item) => {
          if (item.refCount > 0) {
            item.finalizer = zipLeft2(item.finalizer, semaphore.release(1));
            this.invalidated.add(item);
            return semaphore.take(1);
          }
          this.items.delete(item);
          this.available.delete(item);
          this.invalidated.delete(item);
          return item.finalizer;
        }).pipe(zipRight2(this.semaphore.releaseAll), zipRight2(this.availableLatch.open), zipRight2(semaphore.take(size27)));
      });
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
});

// node_modules/effect/dist/esm/internal/keyedPool.js
var KeyedPoolSymbolKey = "effect/KeyedPool", KeyedPoolTypeId, KeyedPoolMapValueSymbol, keyedPoolVariance, KeyedPoolImpl, Complete, isComplete = (u) => isTagged(u, "Complete") && (KeyedPoolMapValueSymbol in u), Pending, isPending = (u) => isTagged(u, "Pending") && (KeyedPoolMapValueSymbol in u), makeImpl4 = (get22, min11, max14, timeToLive) => pipe(all9([context2(), fiberId, sync(() => make15(empty11())), scopeMake2()]), map14(([context12, fiberId4, map38, scope6]) => {
  const getOrCreatePool = (key) => suspend(() => {
    let value4 = getOrUndefined2(get9(get8(map38), key));
    if (value4 === undefined) {
      return uninterruptibleMask((restore) => {
        const deferred = deferredUnsafeMake(fiberId4);
        value4 = new Pending(deferred);
        let previous2 = undefined;
        if (has5(get8(map38), key)) {
          previous2 = getOrUndefined2(get9(get8(map38), key));
        } else {
          update(map38, set4(key, value4));
        }
        if (previous2 === undefined) {
          return pipe(restore(scopeExtend(makeWithTTL({
            acquire: provideContext(get22(key), context12),
            min: min11(key),
            max: max14(key),
            timeToLive: getOrElse2(timeToLive(key), () => infinity)
          }), scope6)), matchCauseEffect({
            onFailure: (cause3) => {
              const current2 = getOrUndefined2(get9(get8(map38), key));
              if (equals(current2, value4)) {
                update(map38, remove7(key));
              }
              return zipRight2(deferredFailCause(deferred, cause3), failCause(cause3));
            },
            onSuccess: (pool) => {
              update(map38, set4(key, new Complete(pool)));
              return as3(deferredSucceed(deferred, pool), pool);
            }
          }));
        }
        switch (previous2._tag) {
          case "Complete": {
            return succeed(previous2.pool);
          }
          case "Pending": {
            return restore(deferredAwait(previous2.deferred));
          }
        }
      });
    }
    switch (value4._tag) {
      case "Complete": {
        return succeed(value4.pool);
      }
      case "Pending": {
        return deferredAwait(value4.deferred);
      }
    }
  });
  const activePools = suspend(() => forEachSequential(toValues2(get8(map38)), (value4) => {
    switch (value4._tag) {
      case "Complete": {
        return succeed(value4.pool);
      }
      case "Pending": {
        return deferredAwait(value4.deferred);
      }
    }
  }));
  return new KeyedPoolImpl(getOrCreatePool, activePools);
})), make85 = (options) => makeImpl4(options.acquire, () => options.size, () => options.size, () => none2()), makeWith5 = (options) => makeImpl4(options.acquire, options.size, options.size, () => none2()), makeWithTTL2 = (options) => {
  const timeToLive = decode(options.timeToLive);
  return makeImpl4(options.acquire, options.min, options.max, () => some3(timeToLive));
}, makeWithTTLBy = (options) => makeImpl4(options.acquire, options.min, options.max, (key) => some3(decode(options.timeToLive(key)))), get22, invalidate2;
var init_keyedPool = __esm(() => {
  init_Duration();
  init_Equal();
  init_Function();
  init_Hash();
  init_HashMap();
  init_MutableRef();
  init_Option();
  init_Predicate();
  init_core();
  init_fiberRuntime();
  init_pool();
  KeyedPoolTypeId = /* @__PURE__ */ Symbol.for(KeyedPoolSymbolKey);
  KeyedPoolMapValueSymbol = /* @__PURE__ */ Symbol.for("effect/KeyedPool/MapValue");
  keyedPoolVariance = {
    _K: (_) => _,
    _E: (_) => _,
    _A: (_) => _
  };
  KeyedPoolImpl = class KeyedPoolImpl {
    getOrCreatePool;
    activePools;
    [KeyedPoolTypeId] = keyedPoolVariance;
    constructor(getOrCreatePool, activePools) {
      this.getOrCreatePool = getOrCreatePool;
      this.activePools = activePools;
    }
    get(key) {
      return flatMap12(this.getOrCreatePool(key), get21);
    }
    invalidate(item) {
      return flatMap12(this.activePools, forEachSequentialDiscard((pool) => pool.invalidate(item)));
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  Complete = class Complete {
    pool;
    _tag = "Complete";
    [KeyedPoolMapValueSymbol] = KeyedPoolMapValueSymbol;
    constructor(pool) {
      this.pool = pool;
    }
    [symbol2]() {
      return pipe(string2("effect/KeyedPool/Complete"), combine2(hash(this.pool)), cached(this));
    }
    [symbol3](u) {
      return isComplete(u) && equals(this.pool, u.pool);
    }
  };
  Pending = class Pending {
    deferred;
    _tag = "Pending";
    [KeyedPoolMapValueSymbol] = KeyedPoolMapValueSymbol;
    constructor(deferred) {
      this.deferred = deferred;
    }
    [symbol2]() {
      return pipe(string2("effect/KeyedPool/Pending"), combine2(hash(this.deferred)), cached(this));
    }
    [symbol3](u) {
      return isPending(u) && equals(this.deferred, u.deferred);
    }
  };
  get22 = /* @__PURE__ */ dual(2, (self, key) => self.get(key));
  invalidate2 = /* @__PURE__ */ dual(2, (self, item) => self.invalidate(item));
});

// node_modules/effect/dist/esm/KeyedPool.js
var exports_KeyedPool = {};
__export(exports_KeyedPool, {
  makeWithTTLBy: () => makeWithTTLBy2,
  makeWithTTL: () => makeWithTTL3,
  makeWith: () => makeWith6,
  make: () => make86,
  invalidate: () => invalidate3,
  get: () => get23,
  KeyedPoolTypeId: () => KeyedPoolTypeId2
});
var KeyedPoolTypeId2, make86, makeWith6, makeWithTTL3, makeWithTTLBy2, get23, invalidate3;
var init_KeyedPool = __esm(() => {
  init_keyedPool();
  KeyedPoolTypeId2 = KeyedPoolTypeId;
  make86 = make85;
  makeWith6 = makeWith5;
  makeWithTTL3 = makeWithTTL2;
  makeWithTTLBy2 = makeWithTTLBy;
  get23 = get22;
  invalidate3 = invalidate2;
});

// node_modules/effect/dist/esm/internal/rcMap.js
var TypeId29, variance10, RcMapImpl, make87 = (options) => withFiberRuntime((fiber) => {
  const context12 = fiber.getFiberRef(currentContext);
  const scope6 = get5(context12, scopeTag);
  const self = new RcMapImpl(options.lookup, context12, scope6, options.idleTimeToLive ? decode(options.idleTimeToLive) : undefined, Math.max(options.capacity ?? Number.POSITIVE_INFINITY, 0));
  return as3(scope6.addFinalizer(() => suspend(() => {
    if (self.state._tag === "Closed") {
      return void_3;
    }
    const map38 = self.state.map;
    self.state = {
      _tag: "Closed"
    };
    return forEachSequentialDiscard(map38, ([, entry]) => scopeClose(entry.scope, exitVoid)).pipe(tap2(() => {
      clear(map38);
    }), self.semaphore.withPermits(1));
  })), self);
}), get24, getImpl, acquire, release = (self, key, entry) => clockWith3((clock3) => {
  entry.refCount--;
  if (entry.refCount > 0) {
    return void_3;
  } else if (self.state._tag === "Closed" || !has6(self.state.map, key) || self.idleTimeToLive === undefined) {
    if (self.state._tag === "Open") {
      remove8(self.state.map, key);
    }
    return scopeClose(entry.scope, exitVoid);
  }
  if (!isFinite2(self.idleTimeToLive)) {
    return void_3;
  }
  entry.expiresAt = clock3.unsafeCurrentTimeMillis() + toMillis(self.idleTimeToLive);
  if (entry.fiber)
    return void_3;
  return interruptibleMask(function loop(restore) {
    const now3 = clock3.unsafeCurrentTimeMillis();
    const remaining = entry.expiresAt - now3;
    if (remaining <= 0) {
      if (self.state._tag === "Closed" || entry.refCount > 0)
        return void_3;
      remove8(self.state.map, key);
      return restore(scopeClose(entry.scope, exitVoid));
    }
    return flatMap12(clock3.sleep(millis(remaining)), () => loop(restore));
  }).pipe(ensuring2(sync(() => {
    entry.fiber = undefined;
  })), forkIn2(self.scope), tap2((fiber) => {
    entry.fiber = fiber;
  }), self.semaphore.withPermits(1));
}), keys7 = (self) => {
  const impl = self;
  return suspend(() => impl.state._tag === "Closed" ? interrupt2 : succeed(keys4(impl.state.map)));
}, invalidate4, touch;
var init_rcMap = __esm(() => {
  init_Context();
  init_Duration();
  init_Function();
  init_MutableHashMap();
  init_core_effect();
  init_core();
  init_circular();
  init_fiberRuntime();
  TypeId29 = /* @__PURE__ */ Symbol.for("effect/RcMap");
  variance10 = {
    _K: identity,
    _A: identity,
    _E: identity
  };
  RcMapImpl = class RcMapImpl {
    lookup;
    context;
    scope;
    idleTimeToLive;
    capacity;
    [TypeId29];
    state = {
      _tag: "Open",
      map: /* @__PURE__ */ empty23()
    };
    semaphore = /* @__PURE__ */ unsafeMakeSemaphore(1);
    constructor(lookup, context12, scope6, idleTimeToLive, capacity10) {
      this.lookup = lookup;
      this.context = context12;
      this.scope = scope6;
      this.idleTimeToLive = idleTimeToLive;
      this.capacity = capacity10;
      this[TypeId29] = variance10;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  get24 = /* @__PURE__ */ dual(2, (self_, key) => {
    const self = self_;
    return uninterruptibleMask((restore) => getImpl(self, key, restore));
  });
  getImpl = /* @__PURE__ */ fnUntraced(function* (self, key, restore) {
    if (self.state._tag === "Closed") {
      return yield* interrupt2;
    }
    const state = self.state;
    const o = get10(state.map, key);
    let entry;
    if (o._tag === "Some") {
      entry = o.value;
      entry.refCount++;
    } else if (Number.isFinite(self.capacity) && size10(self.state.map) >= self.capacity) {
      return yield* fail2(new ExceededCapacityException(`RcMap attempted to exceed capacity of ${self.capacity}`));
    } else {
      entry = yield* self.semaphore.withPermits(1)(acquire(self, key, restore));
    }
    const scope6 = yield* scopeTag;
    yield* scope6.addFinalizer(() => entry.finalizer);
    return yield* restore(deferredAwait(entry.deferred));
  });
  acquire = /* @__PURE__ */ fnUntraced(function* (self, key, restore) {
    const scope6 = yield* scopeMake2();
    const deferred = yield* deferredMake();
    const acquire2 = self.lookup(key);
    const contextMap = new Map(self.context.unsafeMap);
    yield* restore(mapInputContext(acquire2, (inputContext) => {
      inputContext.unsafeMap.forEach((value4, key2) => {
        contextMap.set(key2, value4);
      });
      contextMap.set(scopeTag.key, scope6);
      return unsafeMake(contextMap);
    })).pipe(exit, flatMap12((exit4) => deferredDone(deferred, exit4)), forkIn2(scope6));
    const entry = {
      deferred,
      scope: scope6,
      finalizer: undefined,
      fiber: undefined,
      expiresAt: 0,
      refCount: 1
    };
    entry.finalizer = release(self, key, entry);
    if (self.state._tag === "Open") {
      set5(self.state.map, key, entry);
    }
    return entry;
  });
  invalidate4 = /* @__PURE__ */ dual(2, /* @__PURE__ */ fnUntraced(function* (self_, key) {
    const self = self_;
    if (self.state._tag === "Closed")
      return;
    const o = get10(self.state.map, key);
    if (o._tag === "None")
      return;
    const entry = o.value;
    remove8(self.state.map, key);
    if (entry.refCount > 0)
      return;
    yield* scopeClose(entry.scope, exitVoid);
    if (entry.fiber)
      yield* interruptFiber(entry.fiber);
  }));
  touch = /* @__PURE__ */ dual(2, (self_, key) => clockWith3((clock3) => {
    const self = self_;
    if (!self.idleTimeToLive || self.state._tag === "Closed")
      return void_3;
    const o = get10(self.state.map, key);
    if (o._tag === "None")
      return void_3;
    o.value.expiresAt = clock3.unsafeCurrentTimeMillis() + toMillis(self.idleTimeToLive);
    return void_3;
  }));
});

// node_modules/effect/dist/esm/RcMap.js
var exports_RcMap = {};
__export(exports_RcMap, {
  touch: () => touch2,
  make: () => make88,
  keys: () => keys8,
  invalidate: () => invalidate5,
  get: () => get25,
  TypeId: () => TypeId30
});
var TypeId30, make88, get25, keys8, invalidate5, touch2;
var init_RcMap = __esm(() => {
  init_rcMap();
  TypeId30 = TypeId29;
  make88 = make87;
  get25 = get24;
  keys8 = keys7;
  invalidate5 = invalidate4;
  touch2 = touch;
});

// node_modules/effect/dist/esm/LayerMap.js
var exports_LayerMap = {};
__export(exports_LayerMap, {
  make: () => make89,
  fromRecord: () => fromRecord3,
  TypeId: () => TypeId31,
  Service: () => Service2
});
var TypeId31, make89, fromRecord3 = (tagOrAccessor, layers, options) => make89(tagOrAccessor, (key) => layers[key], options), Service2 = () => (id3, options) => {
  const Err = globalThis.Error;
  const limit = Err.stackTraceLimit;
  Err.stackTraceLimit = 2;
  const creationError = new Err;
  Err.stackTraceLimit = limit;
  function TagClass() {}
  const TagClass_ = TagClass;
  Object.setPrototypeOf(TagClass, Object.getPrototypeOf(GenericTag(id3)));
  TagClass.key = id3;
  Object.defineProperty(TagClass, "stack", {
    get() {
      return creationError.stack;
    }
  });
  TagClass_.get = (key) => flatMap18(TagClass_, (layerMap) => layerMap.get(key));
  TagClass_.provide = (key) => (effect4) => flatMap18(TagClass_, (layerMap) => layerMap.provide(key)(effect4));
  TagClass_.invalidate = (key) => flatMap18(TagClass_, (layerMap) => layerMap.invalidate(key));
  TagClass_.DefaultWithoutDependencies = scoped5(TagClass_, "lookup" in options ? make89(options.provides, options.lookup, options) : fromRecord3(options.provides, options.layers, options));
  TagClass_.Default = options.dependencies && options.dependencies.length > 0 ? provide3(TagClass_.DefaultWithoutDependencies, options.dependencies) : TagClass_.DefaultWithoutDependencies;
  return TagClass;
};
var init_LayerMap = __esm(() => {
  init_Context();
  init_Effect();
  init_Function();
  init_Layer();
  init_RcMap();
  init_Scope();
  TypeId31 = /* @__PURE__ */ Symbol.for("effect/LayerMap");
  make89 = /* @__PURE__ */ fnUntraced2(function* (tagOrAccessor, lookup, options) {
    const context12 = yield* context5();
    const memoMap = context12.unsafeMap.has(CurrentMemoMap2.key) ? get5(context12, CurrentMemoMap2) : yield* makeMemoMap2;
    const rcMap = yield* make88({
      lookup: fnUntraced2(function* (key) {
        const scope6 = yield* scope4;
        const context13 = yield* buildWithMemoMap2(lookup(key), memoMap, scope6);
        const service4 = yield* provide2(tagOrAccessor, context13);
        return [context13, service4];
      }),
      idleTimeToLive: options?.idleTimeToLive
    });
    return identity({
      [TypeId31]: TypeId31,
      rcMap,
      get: (key) => map26(get25(rcMap, key), ([, service4]) => service4),
      provide: (key) => (effect4) => scopedWith2((scope6) => flatMap18(extend3(get25(rcMap, key), scope6), ([context13]) => provide2(effect4, context13))),
      invalidate: (key) => invalidate5(rcMap, key)
    });
  });
});

// node_modules/effect/dist/esm/internal/logger-circular.js
var test;
var init_logger_circular = __esm(() => {
  init_Cause();
  init_Function();
  init_HashMap();
  init_List();
  init_core();
  init_fiberId();
  init_fiberRefs();
  test = /* @__PURE__ */ dual(2, (self, input) => self.log({
    fiberId: none3,
    logLevel: logLevelInfo,
    message: input,
    cause: empty35,
    context: empty26(),
    spans: empty12(),
    annotations: empty11(),
    date: new Date
  }));
});

// node_modules/effect/dist/esm/Logger.js
var exports_Logger = {};
__export(exports_Logger, {
  zipRight: () => zipRight14,
  zipLeft: () => zipLeft14,
  zip: () => zip20,
  withSpanAnnotations: () => withSpanAnnotations,
  withMinimumLogLevel: () => withMinimumLogLevel2,
  withLeveledConsole: () => withLeveledConsole,
  withConsoleLog: () => withConsoleLog,
  withConsoleError: () => withConsoleError,
  tracerLogger: () => tracerLogger2,
  test: () => test2,
  sync: () => sync18,
  succeed: () => succeed25,
  structuredLogger: () => structuredLogger3,
  structured: () => structured,
  stringLogger: () => stringLogger2,
  simple: () => simple2,
  replaceScoped: () => replaceScoped,
  replaceEffect: () => replaceEffect,
  replace: () => replace6,
  remove: () => remove12,
  prettyLoggerDefault: () => prettyLoggerDefault2,
  prettyLogger: () => prettyLogger3,
  pretty: () => pretty5,
  none: () => none11,
  minimumLogLevel: () => minimumLogLevel2,
  mapInputOptions: () => mapInputOptions2,
  mapInput: () => mapInput11,
  map: () => map38,
  make: () => make90,
  logfmtLogger: () => logfmtLogger2,
  logFmt: () => logFmt,
  jsonLogger: () => jsonLogger3,
  json: () => json2,
  isLogger: () => isLogger2,
  filterLogLevel: () => filterLogLevel2,
  defaultLogger: () => defaultLogger2,
  batched: () => batched,
  addScoped: () => addScoped,
  addEffect: () => addEffect,
  add: () => add9,
  LoggerTypeId: () => LoggerTypeId2
});
var LoggerTypeId2, make90, add9, addEffect, addScoped, mapInput11, mapInputOptions2, filterLogLevel2, map38, batched, withConsoleLog, withLeveledConsole, withConsoleError, none11, remove12, replace6, replaceEffect, replaceScoped, simple2, succeed25, sync18, test2, withMinimumLogLevel2, withSpanAnnotations, zip20, zipLeft14, zipRight14, defaultLogger2, jsonLogger3, logfmtLogger2, stringLogger2, prettyLogger3, prettyLoggerDefault2, structuredLogger3, tracerLogger2, json2, logFmt, pretty5, structured, minimumLogLevel2, isLogger2;
var init_Logger = __esm(() => {
  init_fiberRuntime();
  init_circular3();
  init_logger_circular();
  init_logger();
  LoggerTypeId2 = LoggerTypeId;
  make90 = makeLogger;
  add9 = addLogger;
  addEffect = addLoggerEffect;
  addScoped = addLoggerScoped;
  mapInput11 = mapInput4;
  mapInputOptions2 = mapInputOptions;
  filterLogLevel2 = filterLogLevel;
  map38 = map19;
  batched = batchedLogger;
  withConsoleLog = loggerWithConsoleLog;
  withLeveledConsole = loggerWithLeveledLog;
  withConsoleError = loggerWithConsoleError;
  none11 = none7;
  remove12 = removeLogger;
  replace6 = replaceLogger;
  replaceEffect = replaceLoggerEffect;
  replaceScoped = replaceLoggerScoped;
  simple2 = simple;
  succeed25 = succeed6;
  sync18 = sync4;
  test2 = test;
  withMinimumLogLevel2 = withMinimumLogLevel;
  withSpanAnnotations = loggerWithSpanAnnotations;
  zip20 = zip8;
  zipLeft14 = zipLeft4;
  zipRight14 = zipRight4;
  defaultLogger2 = defaultLogger;
  jsonLogger3 = jsonLogger;
  logfmtLogger2 = logfmtLogger;
  stringLogger2 = stringLogger;
  prettyLogger3 = prettyLogger;
  prettyLoggerDefault2 = prettyLoggerDefault;
  structuredLogger3 = structuredLogger;
  tracerLogger2 = tracerLogger;
  json2 = /* @__PURE__ */ replace6(defaultLogger, jsonLogger2);
  logFmt = /* @__PURE__ */ replace6(defaultLogger, logFmtLogger);
  pretty5 = /* @__PURE__ */ replace6(defaultLogger, prettyLogger2);
  structured = /* @__PURE__ */ replace6(defaultLogger, structuredLogger2);
  minimumLogLevel2 = minimumLogLevel;
  isLogger2 = isLogger;
});

// node_modules/effect/dist/esm/internal/mailbox.js
var TypeId32, ReadonlyTypeId, empty45, exitEmpty, exitFalse, exitTrue, constDone, MailboxImpl, make91 = (capacity10) => withFiberRuntime((fiber) => succeed(new MailboxImpl(fiber.currentScheduler, typeof capacity10 === "number" ? capacity10 : capacity10?.capacity ?? Number.POSITIVE_INFINITY, typeof capacity10 === "number" ? "suspend" : capacity10?.strategy ?? "suspend"))), into, toChannel3 = (self) => {
  const loop4 = flatMap20(self.takeAll, ([messages, done12]) => done12 ? messages.length === 0 ? void_8 : write2(messages) : zipRight8(write2(messages), loop4));
  return loop4;
}, toStream2 = (self) => fromChannel2(toChannel3(self)), fromStream3;
var init_mailbox = __esm(() => {
  init_Array();
  init_Cause();
  init_Chunk();
  init_Effectable();
  init_Function();
  init_Inspectable();
  init_Iterable();
  init_Option();
  init_Predicate();
  init_channel();
  init_channelExecutor();
  init_core_stream();
  init_core();
  init_circular();
  init_fiberRuntime();
  init_stream();
  TypeId32 = /* @__PURE__ */ Symbol.for("effect/Mailbox");
  ReadonlyTypeId = /* @__PURE__ */ Symbol.for("effect/Mailbox/ReadonlyMailbox");
  empty45 = /* @__PURE__ */ empty7();
  exitEmpty = /* @__PURE__ */ exitSucceed(empty45);
  exitFalse = /* @__PURE__ */ exitSucceed(false);
  exitTrue = /* @__PURE__ */ exitSucceed(true);
  constDone = [empty45, true];
  MailboxImpl = class MailboxImpl extends Class2 {
    scheduler;
    capacity;
    strategy;
    [TypeId32] = TypeId32;
    [ReadonlyTypeId] = ReadonlyTypeId;
    state = {
      _tag: "Open",
      takers: /* @__PURE__ */ new Set,
      offers: /* @__PURE__ */ new Set,
      awaiters: /* @__PURE__ */ new Set
    };
    messages = [];
    messagesChunk = /* @__PURE__ */ empty7();
    constructor(scheduler2, capacity10, strategy) {
      super();
      this.scheduler = scheduler2;
      this.capacity = capacity10;
      this.strategy = strategy;
    }
    offer(message) {
      return suspend(() => {
        if (this.state._tag !== "Open") {
          return exitFalse;
        } else if (this.messages.length + this.messagesChunk.length >= this.capacity) {
          switch (this.strategy) {
            case "dropping":
              return exitFalse;
            case "suspend":
              if (this.capacity <= 0 && this.state.takers.size > 0) {
                this.messages.push(message);
                this.releaseTaker();
                return exitTrue;
              }
              return this.offerRemainingSingle(message);
            case "sliding":
              this.unsafeTake();
              this.messages.push(message);
              return exitTrue;
          }
        }
        this.messages.push(message);
        this.scheduleReleaseTaker();
        return exitTrue;
      });
    }
    unsafeOffer(message) {
      if (this.state._tag !== "Open") {
        return false;
      } else if (this.messages.length + this.messagesChunk.length >= this.capacity) {
        if (this.strategy === "sliding") {
          this.unsafeTake();
          this.messages.push(message);
          return true;
        } else if (this.capacity <= 0 && this.state.takers.size > 0) {
          this.messages.push(message);
          this.releaseTaker();
          return true;
        }
        return false;
      }
      this.messages.push(message);
      this.scheduleReleaseTaker();
      return true;
    }
    offerAll(messages) {
      return suspend(() => {
        if (this.state._tag !== "Open") {
          return succeed(fromIterable3(messages));
        }
        const remaining = this.unsafeOfferAllArray(messages);
        if (remaining.length === 0) {
          return exitEmpty;
        } else if (this.strategy === "dropping") {
          return succeed(unsafeFromArray(remaining));
        }
        return this.offerRemainingArray(remaining);
      });
    }
    unsafeOfferAll(messages) {
      return unsafeFromArray(this.unsafeOfferAllArray(messages));
    }
    unsafeOfferAllArray(messages) {
      if (this.state._tag !== "Open") {
        return fromIterable2(messages);
      } else if (this.capacity === Number.POSITIVE_INFINITY || this.strategy === "sliding") {
        if (this.messages.length > 0) {
          this.messagesChunk = appendAll3(this.messagesChunk, unsafeFromArray(this.messages));
        }
        if (this.strategy === "sliding") {
          this.messagesChunk = this.messagesChunk.pipe(appendAll3(fromIterable3(messages)), takeRight2(this.capacity));
        } else if (isChunk(messages)) {
          this.messagesChunk = appendAll3(this.messagesChunk, messages);
        } else {
          this.messages = fromIterable2(messages);
        }
        this.scheduleReleaseTaker();
        return [];
      }
      const free = this.capacity <= 0 ? this.state.takers.size : this.capacity - this.messages.length - this.messagesChunk.length;
      if (free === 0) {
        return fromIterable2(messages);
      }
      const remaining = [];
      let i2 = 0;
      for (const message of messages) {
        if (i2 < free) {
          this.messages.push(message);
        } else {
          remaining.push(message);
        }
        i2++;
      }
      this.scheduleReleaseTaker();
      return remaining;
    }
    fail(error4) {
      return this.done(exitFail(error4));
    }
    failCause(cause3) {
      return this.done(exitFailCause(cause3));
    }
    unsafeDone(exit4) {
      if (this.state._tag !== "Open") {
        return false;
      } else if (this.state.offers.size === 0 && this.messages.length === 0 && this.messagesChunk.length === 0) {
        this.finalize(exit4);
        return true;
      }
      this.state = {
        ...this.state,
        _tag: "Closing",
        exit: exit4
      };
      return true;
    }
    shutdown = /* @__PURE__ */ sync(() => {
      if (this.state._tag === "Done") {
        return true;
      }
      this.messages = [];
      this.messagesChunk = empty45;
      const offers = this.state.offers;
      this.finalize(this.state._tag === "Open" ? exitVoid : this.state.exit);
      if (offers.size > 0) {
        for (const entry of offers) {
          if (entry._tag === "Single") {
            entry.resume(exitFalse);
          } else {
            entry.resume(exitSucceed(unsafeFromArray(entry.remaining.slice(entry.offset))));
          }
        }
        offers.clear();
      }
      return true;
    });
    done(exit4) {
      return sync(() => this.unsafeDone(exit4));
    }
    end = /* @__PURE__ */ this.done(exitVoid);
    clear = /* @__PURE__ */ suspend(() => {
      if (this.state._tag === "Done") {
        return exitAs(this.state.exit, empty45);
      }
      const messages = this.unsafeTakeAll();
      this.releaseCapacity();
      return succeed(messages);
    });
    takeAll = /* @__PURE__ */ suspend(() => {
      if (this.state._tag === "Done") {
        return exitAs(this.state.exit, constDone);
      }
      const messages = this.unsafeTakeAll();
      if (messages.length === 0) {
        return zipRight2(this.awaitTake, this.takeAll);
      }
      return succeed([messages, this.releaseCapacity()]);
    });
    takeN(n) {
      return suspend(() => {
        if (this.state._tag === "Done") {
          return exitAs(this.state.exit, constDone);
        } else if (n <= 0) {
          return succeed([empty45, false]);
        }
        n = Math.min(n, this.capacity);
        let messages;
        if (n <= this.messagesChunk.length) {
          messages = take3(this.messagesChunk, n);
          this.messagesChunk = drop3(this.messagesChunk, n);
        } else if (n <= this.messages.length + this.messagesChunk.length) {
          this.messagesChunk = appendAll3(this.messagesChunk, unsafeFromArray(this.messages));
          this.messages = [];
          messages = take3(this.messagesChunk, n);
          this.messagesChunk = drop3(this.messagesChunk, n);
        } else {
          return zipRight2(this.awaitTake, this.takeN(n));
        }
        return succeed([messages, this.releaseCapacity()]);
      });
    }
    unsafeTake() {
      if (this.state._tag === "Done") {
        return exitZipRight(this.state.exit, exitFail(new NoSuchElementException3));
      }
      let message;
      if (this.messagesChunk.length > 0) {
        message = unsafeHead2(this.messagesChunk);
        this.messagesChunk = drop3(this.messagesChunk, 1);
      } else if (this.messages.length > 0) {
        message = this.messages[0];
        this.messagesChunk = drop3(unsafeFromArray(this.messages), 1);
        this.messages = [];
      } else if (this.capacity <= 0 && this.state.offers.size > 0) {
        this.capacity = 1;
        this.releaseCapacity();
        this.capacity = 0;
        return this.messages.length > 0 ? exitSucceed(this.messages.pop()) : undefined;
      } else {
        return;
      }
      this.releaseCapacity();
      return exitSucceed(message);
    }
    take = /* @__PURE__ */ suspend(() => this.unsafeTake() ?? zipRight2(this.awaitTake, this.take));
    await = /* @__PURE__ */ asyncInterrupt((resume2) => {
      if (this.state._tag === "Done") {
        return resume2(this.state.exit);
      }
      this.state.awaiters.add(resume2);
      return sync(() => {
        if (this.state._tag !== "Done") {
          this.state.awaiters.delete(resume2);
        }
      });
    });
    unsafeSize() {
      const size27 = this.messages.length + this.messagesChunk.length;
      return this.state._tag === "Done" ? none2() : some3(size27);
    }
    size = /* @__PURE__ */ sync(() => this.unsafeSize());
    commit() {
      return this.takeAll;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    toJSON() {
      return {
        _id: "effect/Mailbox",
        state: this.state._tag,
        size: this.unsafeSize().toJSON()
      };
    }
    toString() {
      return format2(this);
    }
    [NodeInspectSymbol]() {
      return format2(this);
    }
    offerRemainingSingle(message) {
      return asyncInterrupt((resume2) => {
        if (this.state._tag !== "Open") {
          return resume2(exitFalse);
        }
        const entry = {
          _tag: "Single",
          message,
          resume: resume2
        };
        this.state.offers.add(entry);
        return sync(() => {
          if (this.state._tag === "Open") {
            this.state.offers.delete(entry);
          }
        });
      });
    }
    offerRemainingArray(remaining) {
      return asyncInterrupt((resume2) => {
        if (this.state._tag !== "Open") {
          return resume2(exitSucceed(unsafeFromArray(remaining)));
        }
        const entry = {
          _tag: "Array",
          remaining,
          offset: 0,
          resume: resume2
        };
        this.state.offers.add(entry);
        return sync(() => {
          if (this.state._tag === "Open") {
            this.state.offers.delete(entry);
          }
        });
      });
    }
    releaseCapacity() {
      if (this.state._tag === "Done") {
        return this.state.exit._tag === "Success";
      } else if (this.state.offers.size === 0) {
        if (this.state._tag === "Closing" && this.messages.length === 0 && this.messagesChunk.length === 0) {
          this.finalize(this.state.exit);
          return this.state.exit._tag === "Success";
        }
        return false;
      }
      let n = this.capacity - this.messages.length - this.messagesChunk.length;
      for (const entry of this.state.offers) {
        if (n === 0)
          return false;
        else if (entry._tag === "Single") {
          this.messages.push(entry.message);
          n--;
          entry.resume(exitTrue);
          this.state.offers.delete(entry);
        } else {
          for (;entry.offset < entry.remaining.length; entry.offset++) {
            if (n === 0)
              return false;
            this.messages.push(entry.remaining[entry.offset]);
            n--;
          }
          entry.resume(exitEmpty);
          this.state.offers.delete(entry);
        }
      }
      return false;
    }
    awaitTake = /* @__PURE__ */ asyncInterrupt((resume2) => {
      if (this.state._tag === "Done") {
        return resume2(this.state.exit);
      }
      this.state.takers.add(resume2);
      return sync(() => {
        if (this.state._tag !== "Done") {
          this.state.takers.delete(resume2);
        }
      });
    });
    scheduleRunning = false;
    scheduleReleaseTaker() {
      if (this.scheduleRunning) {
        return;
      }
      this.scheduleRunning = true;
      this.scheduler.scheduleTask(this.releaseTaker, 0);
    }
    releaseTaker = () => {
      this.scheduleRunning = false;
      if (this.state._tag === "Done") {
        return;
      } else if (this.state.takers.size === 0) {
        return;
      }
      const taker = unsafeHead(this.state.takers);
      this.state.takers.delete(taker);
      taker(exitVoid);
    };
    unsafeTakeAll() {
      if (this.messagesChunk.length > 0) {
        const messages = this.messages.length > 0 ? appendAll3(this.messagesChunk, unsafeFromArray(this.messages)) : this.messagesChunk;
        this.messagesChunk = empty45;
        this.messages = [];
        return messages;
      } else if (this.messages.length > 0) {
        const messages = unsafeFromArray(this.messages);
        this.messages = [];
        return messages;
      } else if (this.state._tag !== "Done" && this.state.offers.size > 0) {
        this.capacity = 1;
        this.releaseCapacity();
        this.capacity = 0;
        return of3(this.messages.pop());
      }
      return empty45;
    }
    finalize(exit4) {
      if (this.state._tag === "Done") {
        return;
      }
      const openState = this.state;
      this.state = {
        _tag: "Done",
        exit: exit4
      };
      for (const taker of openState.takers) {
        taker(exit4);
      }
      openState.takers.clear();
      for (const awaiter of openState.awaiters) {
        awaiter(exit4);
      }
      openState.awaiters.clear();
    }
  };
  into = /* @__PURE__ */ dual(2, (effect4, self) => uninterruptibleMask((restore) => matchCauseEffect(restore(effect4), {
    onFailure: (cause3) => self.failCause(cause3),
    onSuccess: (_) => self.end
  })));
  fromStream3 = /* @__PURE__ */ dual((args2) => isStream(args2[0]), (self, options) => tap2(acquireRelease2(make91(options), (mailbox) => mailbox.shutdown), (mailbox) => {
    const writer = readWithCause({
      onInput: (input) => flatMap20(mailbox.offerAll(input), () => writer),
      onFailure: (cause3) => mailbox.failCause(cause3),
      onDone: () => mailbox.end
    });
    return unwrapScopedWith((scope6) => toChannel2(self).pipe(pipeTo(writer), runIn(scope6), forkIn2(scope6)));
  }));
});

// node_modules/effect/dist/esm/Mailbox.js
var exports_Mailbox = {};
__export(exports_Mailbox, {
  toStream: () => toStream3,
  toChannel: () => toChannel4,
  make: () => make92,
  isReadonlyMailbox: () => isReadonlyMailbox,
  isMailbox: () => isMailbox,
  into: () => into2,
  fromStream: () => fromStream4,
  TypeId: () => TypeId33,
  ReadonlyTypeId: () => ReadonlyTypeId2
});
var TypeId33, ReadonlyTypeId2, isMailbox = (u) => hasProperty(u, TypeId33), isReadonlyMailbox = (u) => hasProperty(u, ReadonlyTypeId2), make92, into2, toChannel4, toStream3, fromStream4;
var init_Mailbox = __esm(() => {
  init_mailbox();
  init_Predicate();
  TypeId33 = TypeId32;
  ReadonlyTypeId2 = ReadonlyTypeId;
  make92 = make91;
  into2 = into;
  toChannel4 = toChannel3;
  toStream3 = toStream2;
  fromStream4 = fromStream3;
});

// node_modules/effect/dist/esm/internal/managedRuntime.js
function provide4(managed, effect4) {
  return flatMap12(managed.runtimeEffect, (rt) => withFiberRuntime((fiber) => {
    fiber.setFiberRefs(rt.fiberRefs);
    fiber.currentRuntimeFlags = rt.runtimeFlags;
    return provideContext(effect4, rt.context);
  }));
}
var isManagedRuntime = (u) => hasProperty(u, TypeId21), ManagedRuntimeProto, make93 = (layer, memoMap) => {
  memoMap = memoMap ?? unsafeMakeMemoMap();
  const scope6 = unsafeRunSyncEffect(scopeMake2());
  let buildFiber;
  const runtimeEffect = withFiberRuntime((fiber) => {
    if (!buildFiber) {
      buildFiber = unsafeForkEffect(tap2(extend3(toRuntimeWithMemoMap(layer, memoMap), scope6), (rt) => {
        self.cachedRuntime = rt;
      }), {
        scope: scope6,
        scheduler: fiber.currentScheduler
      });
    }
    return flatten8(buildFiber.await);
  });
  const self = Object.assign(Object.create(ManagedRuntimeProto), {
    memoMap,
    scope: scope6,
    runtimeEffect,
    cachedRuntime: undefined,
    runtime() {
      return self.cachedRuntime === undefined ? unsafeRunPromiseEffect(self.runtimeEffect) : Promise.resolve(self.cachedRuntime);
    },
    dispose() {
      return unsafeRunPromiseEffect(self.disposeEffect);
    },
    disposeEffect: suspend(() => {
      self.runtimeEffect = die2("ManagedRuntime disposed");
      self.cachedRuntime = undefined;
      return close(self.scope, exitVoid);
    }),
    runFork(effect4, options) {
      return self.cachedRuntime === undefined ? unsafeForkEffect(provide4(self, effect4), options) : unsafeFork3(self.cachedRuntime)(effect4, options);
    },
    runSyncExit(effect4) {
      return self.cachedRuntime === undefined ? unsafeRunSyncExitEffect(provide4(self, effect4)) : unsafeRunSyncExit(self.cachedRuntime)(effect4);
    },
    runSync(effect4) {
      return self.cachedRuntime === undefined ? unsafeRunSyncEffect(provide4(self, effect4)) : unsafeRunSync(self.cachedRuntime)(effect4);
    },
    runPromiseExit(effect4, options) {
      return self.cachedRuntime === undefined ? unsafeRunPromiseExitEffect(provide4(self, effect4), options) : unsafeRunPromiseExit(self.cachedRuntime)(effect4, options);
    },
    runCallback(effect4, options) {
      return self.cachedRuntime === undefined ? unsafeRunCallback(defaultRuntime)(provide4(self, effect4), options) : unsafeRunCallback(self.cachedRuntime)(effect4, options);
    },
    runPromise(effect4, options) {
      return self.cachedRuntime === undefined ? unsafeRunPromiseEffect(provide4(self, effect4), options) : unsafeRunPromise(self.cachedRuntime)(effect4, options);
    }
  });
  return self;
};
var init_managedRuntime = __esm(() => {
  init_Effectable();
  init_Predicate();
  init_Scope();
  init_core();
  init_fiberRuntime();
  init_layer();
  init_circular2();
  init_runtime();
  ManagedRuntimeProto = {
    ...CommitPrototype2,
    [TypeId21]: TypeId21,
    pipe() {
      return pipeArguments(this, arguments);
    },
    commit() {
      return this.runtimeEffect;
    }
  };
});

// node_modules/effect/dist/esm/ManagedRuntime.js
var exports_ManagedRuntime = {};
__export(exports_ManagedRuntime, {
  make: () => make94,
  isManagedRuntime: () => isManagedRuntime2,
  TypeId: () => TypeId34
});
var TypeId34, isManagedRuntime2, make94;
var init_ManagedRuntime = __esm(() => {
  init_managedRuntime();
  init_circular2();
  TypeId34 = TypeId21;
  isManagedRuntime2 = isManagedRuntime;
  make94 = make93;
});

// node_modules/effect/dist/esm/internal/matcher.js
function makeTypeMatcher(cases) {
  const matcher = Object.create(TypeMatcherProto);
  matcher.cases = cases;
  return matcher;
}
function makeValueMatcher(provided, value4) {
  const matcher = Object.create(ValueMatcherProto);
  matcher.provided = provided;
  matcher.value = value4;
  return matcher;
}
var TypeId35, TypeMatcherProto, ValueMatcherProto, makeWhen = (guard, evaluate4) => ({
  _tag: "When",
  guard,
  evaluate: evaluate4
}), makeNot = (guard, evaluate4) => ({
  _tag: "Not",
  guard,
  evaluate: evaluate4
}), makePredicate = (pattern) => {
  if (typeof pattern === "function") {
    return pattern;
  } else if (Array.isArray(pattern)) {
    const predicates = pattern.map(makePredicate);
    const len = predicates.length;
    return (u) => {
      if (!Array.isArray(u)) {
        return false;
      }
      for (let i2 = 0;i2 < len; i2++) {
        if (predicates[i2](u[i2]) === false) {
          return false;
        }
      }
      return true;
    };
  } else if (pattern !== null && typeof pattern === "object") {
    const keysAndPredicates = Object.entries(pattern).map(([k, p]) => [k, makePredicate(p)]);
    const len = keysAndPredicates.length;
    return (u) => {
      if (typeof u !== "object" || u === null) {
        return false;
      }
      for (let i2 = 0;i2 < len; i2++) {
        const [key, predicate] = keysAndPredicates[i2];
        if (!(key in u) || predicate(u[key]) === false) {
          return false;
        }
      }
      return true;
    };
  }
  return (u) => u === pattern;
}, makeOrPredicate = (patterns) => {
  const predicates = patterns.map(makePredicate);
  const len = predicates.length;
  return (u) => {
    for (let i2 = 0;i2 < len; i2++) {
      if (predicates[i2](u) === true) {
        return true;
      }
    }
    return false;
  };
}, makeAndPredicate = (patterns) => {
  const predicates = patterns.map(makePredicate);
  const len = predicates.length;
  return (u) => {
    for (let i2 = 0;i2 < len; i2++) {
      if (predicates[i2](u) === false) {
        return false;
      }
    }
    return true;
  };
}, type = () => makeTypeMatcher([]), value4 = (i2) => makeValueMatcher(i2, left2(i2)), valueTags, typeTags = () => (fields) => {
  const match35 = tagsExhaustive(fields)(makeTypeMatcher([]));
  return (input) => match35(input);
}, withReturnType = () => (self) => self, when6 = (pattern, f) => (self) => self.add(makeWhen(makePredicate(pattern), f)), whenOr = (...args2) => (self) => {
  const onMatch = args2[args2.length - 1];
  const patterns = args2.slice(0, -1);
  return self.add(makeWhen(makeOrPredicate(patterns), onMatch));
}, whenAnd = (...args2) => (self) => {
  const onMatch = args2[args2.length - 1];
  const patterns = args2.slice(0, -1);
  return self.add(makeWhen(makeAndPredicate(patterns), onMatch));
}, discriminator = (field) => (...pattern) => {
  const f = pattern[pattern.length - 1];
  const values10 = pattern.slice(0, -1);
  const pred = values10.length === 1 ? (_) => _[field] === values10[0] : (_) => values10.includes(_[field]);
  return (self) => self.add(makeWhen(pred, f));
}, discriminatorStartsWith = (field) => (pattern, f) => {
  const pred = (_) => typeof _[field] === "string" && _[field].startsWith(pattern);
  return (self) => self.add(makeWhen(pred, f));
}, discriminators = (field) => (fields) => {
  const predicate = makeWhen((arg) => arg != null && (arg[field] in fields), (data) => fields[data[field]](data));
  return (self) => self.add(predicate);
}, discriminatorsExhaustive = (field) => (fields) => {
  const addCases = discriminators(field)(fields);
  return (matcher) => exhaustive(addCases(matcher));
}, tag, tagStartsWith, tags, tagsExhaustive, not3 = (pattern, f) => (self) => self.add(makeNot(makePredicate(pattern), f)), nonEmptyString3 = (u) => typeof u === "string" && u.length > 0, is2 = (...literals) => {
  const len = literals.length;
  return (u) => {
    for (let i2 = 0;i2 < len; i2++) {
      if (u === literals[i2]) {
        return true;
      }
    }
    return false;
  };
}, any = () => true, defined = (u) => u !== undefined && u !== null, instanceOf = (constructor) => (u) => u instanceof constructor, orElse19 = (f) => (self) => {
  const result2 = either10(self);
  if (isEither2(result2)) {
    return result2._tag === "Right" ? result2.right : f(result2.left);
  }
  return (input) => {
    const a = result2(input);
    return a._tag === "Right" ? a.right : f(a.left);
  };
}, orElseAbsurd = (self) => orElse19(() => {
  throw new Error("effect/Match/orElseAbsurd: absurd");
})(self), either10 = (self) => {
  if (self._tag === "ValueMatcher") {
    return self.value;
  }
  const len = self.cases.length;
  if (len === 1) {
    const _case2 = self.cases[0];
    return (input) => {
      if (_case2._tag === "When" && _case2.guard(input) === true) {
        return right2(_case2.evaluate(input));
      } else if (_case2._tag === "Not" && _case2.guard(input) === false) {
        return right2(_case2.evaluate(input));
      }
      return left2(input);
    };
  }
  return (input) => {
    for (let i2 = 0;i2 < len; i2++) {
      const _case2 = self.cases[i2];
      if (_case2._tag === "When" && _case2.guard(input) === true) {
        return right2(_case2.evaluate(input));
      } else if (_case2._tag === "Not" && _case2.guard(input) === false) {
        return right2(_case2.evaluate(input));
      }
    }
    return left2(input);
  };
}, option8 = (self) => {
  const toEither = either10(self);
  if (isEither2(toEither)) {
    return match(toEither, {
      onLeft: () => none2(),
      onRight: some3
    });
  }
  return (input) => match(toEither(input), {
    onLeft: () => none2(),
    onRight: some3
  });
}, getExhaustiveAbsurdErrorMessage = "effect/Match/exhaustive: absurd", exhaustive = (self) => {
  const toEither = either10(self);
  if (isEither2(toEither)) {
    if (toEither._tag === "Right") {
      return toEither.right;
    }
    throw new Error(getExhaustiveAbsurdErrorMessage);
  }
  return (u) => {
    const result2 = toEither(u);
    if (result2._tag === "Right") {
      return result2.right;
    }
    throw new Error(getExhaustiveAbsurdErrorMessage);
  };
};
var init_matcher = __esm(() => {
  init_Either();
  init_Function();
  init_Option();
  TypeId35 = /* @__PURE__ */ Symbol.for("@effect/matcher/Matcher");
  TypeMatcherProto = {
    [TypeId35]: {
      _input: identity,
      _filters: identity,
      _remaining: identity,
      _result: identity,
      _return: identity
    },
    _tag: "TypeMatcher",
    add(_case2) {
      return makeTypeMatcher([...this.cases, _case2]);
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  ValueMatcherProto = {
    [TypeId35]: {
      _input: identity,
      _filters: identity,
      _result: identity,
      _return: identity
    },
    _tag: "ValueMatcher",
    add(_case2) {
      if (this.value._tag === "Right") {
        return this;
      }
      if (_case2._tag === "When" && _case2.guard(this.provided) === true) {
        return makeValueMatcher(this.provided, right2(_case2.evaluate(this.provided)));
      } else if (_case2._tag === "Not" && _case2.guard(this.provided) === false) {
        return makeValueMatcher(this.provided, right2(_case2.evaluate(this.provided)));
      }
      return this;
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  valueTags = /* @__PURE__ */ dual(2, (input, fields) => {
    const match35 = tagsExhaustive(fields)(makeTypeMatcher([]));
    return match35(input);
  });
  tag = /* @__PURE__ */ discriminator("_tag");
  tagStartsWith = /* @__PURE__ */ discriminatorStartsWith("_tag");
  tags = /* @__PURE__ */ discriminators("_tag");
  tagsExhaustive = /* @__PURE__ */ discriminatorsExhaustive("_tag");
});

// node_modules/effect/dist/esm/Match.js
var exports_Match = {};
__export(exports_Match, {
  withReturnType: () => withReturnType2,
  whenOr: () => whenOr2,
  whenAnd: () => whenAnd2,
  when: () => when7,
  valueTags: () => valueTags2,
  value: () => value5,
  undefined: () => _undefined,
  typeTags: () => typeTags2,
  type: () => type2,
  tagsExhaustive: () => tagsExhaustive2,
  tags: () => tags2,
  tagStartsWith: () => tagStartsWith2,
  tag: () => tag2,
  symbol: () => symbol4,
  string: () => string7,
  record: () => record3,
  orElseAbsurd: () => orElseAbsurd2,
  orElse: () => orElse20,
  option: () => option9,
  number: () => number6,
  null: () => _null,
  not: () => not4,
  nonEmptyString: () => nonEmptyString4,
  is: () => is3,
  instanceOfUnsafe: () => instanceOfUnsafe,
  instanceOf: () => instanceOf2,
  exhaustive: () => exhaustive2,
  either: () => either11,
  discriminatorsExhaustive: () => discriminatorsExhaustive2,
  discriminators: () => discriminators2,
  discriminatorStartsWith: () => discriminatorStartsWith2,
  discriminator: () => discriminator2,
  defined: () => defined2,
  date: () => date4,
  boolean: () => boolean6,
  bigint: () => bigint3,
  any: () => any2,
  SafeRefinementId: () => SafeRefinementId,
  MatcherTypeId: () => MatcherTypeId
});
var MatcherTypeId, type2, value5, valueTags2, typeTags2, withReturnType2, when7, whenOr2, whenAnd2, discriminator2, discriminatorStartsWith2, discriminators2, discriminatorsExhaustive2, tag2, tagStartsWith2, tags2, tagsExhaustive2, not4, nonEmptyString4, is3, string7, number6, any2, defined2, boolean6, _undefined, _null, bigint3, symbol4, date4, record3, instanceOf2, instanceOfUnsafe, orElse20, orElseAbsurd2, either11, option9, exhaustive2, SafeRefinementId;
var init_Match = __esm(() => {
  init_matcher();
  init_Predicate();
  MatcherTypeId = TypeId35;
  type2 = type;
  value5 = value4;
  valueTags2 = valueTags;
  typeTags2 = typeTags;
  withReturnType2 = withReturnType;
  when7 = when6;
  whenOr2 = whenOr;
  whenAnd2 = whenAnd;
  discriminator2 = discriminator;
  discriminatorStartsWith2 = discriminatorStartsWith;
  discriminators2 = discriminators;
  discriminatorsExhaustive2 = discriminatorsExhaustive;
  tag2 = tag;
  tagStartsWith2 = tagStartsWith;
  tags2 = tags;
  tagsExhaustive2 = tagsExhaustive;
  not4 = not3;
  nonEmptyString4 = nonEmptyString3;
  is3 = is2;
  string7 = isString2;
  number6 = isNumber2;
  any2 = any;
  defined2 = defined;
  boolean6 = isBoolean2;
  _undefined = isUndefined;
  _null = isNull;
  bigint3 = isBigInt;
  symbol4 = isSymbol;
  date4 = isDate;
  record3 = isRecord;
  instanceOf2 = instanceOf;
  instanceOfUnsafe = instanceOf;
  orElse20 = orElse19;
  orElseAbsurd2 = orElseAbsurd;
  either11 = either10;
  option9 = option8;
  exhaustive2 = exhaustive;
  SafeRefinementId = /* @__PURE__ */ Symbol.for("effect/SafeRefinement");
});

// node_modules/effect/dist/esm/MergeState.js
var exports_MergeState = {};
__export(exports_MergeState, {
  match: () => match35,
  isRightDone: () => isRightDone2,
  isMergeState: () => isMergeState2,
  isLeftDone: () => isLeftDone2,
  isBothRunning: () => isBothRunning2,
  RightDone: () => RightDone2,
  MergeStateTypeId: () => MergeStateTypeId2,
  LeftDone: () => LeftDone2,
  BothRunning: () => BothRunning2
});
var MergeStateTypeId2, BothRunning2, LeftDone2, RightDone2, isMergeState2, isBothRunning2, isLeftDone2, isRightDone2, match35;
var init_MergeState = __esm(() => {
  init_mergeState();
  MergeStateTypeId2 = MergeStateTypeId;
  BothRunning2 = BothRunning;
  LeftDone2 = LeftDone;
  RightDone2 = RightDone;
  isMergeState2 = isMergeState;
  isBothRunning2 = isBothRunning;
  isLeftDone2 = isLeftDone;
  isRightDone2 = isRightDone;
  match35 = match26;
});

// node_modules/effect/dist/esm/MergeStrategy.js
var exports_MergeStrategy = {};
__export(exports_MergeStrategy, {
  match: () => match36,
  isMergeStrategy: () => isMergeStrategy2,
  isBufferSliding: () => isBufferSliding2,
  isBackPressure: () => isBackPressure2,
  MergeStrategyTypeId: () => MergeStrategyTypeId2,
  BufferSliding: () => BufferSliding2,
  BackPressure: () => BackPressure3
});
var MergeStrategyTypeId2, BackPressure3, BufferSliding2, isMergeStrategy2, isBackPressure2, isBufferSliding2, match36;
var init_MergeStrategy = __esm(() => {
  init_mergeStrategy();
  MergeStrategyTypeId2 = MergeStrategyTypeId;
  BackPressure3 = BackPressure;
  BufferSliding2 = BufferSliding;
  isMergeStrategy2 = isMergeStrategy;
  isBackPressure2 = isBackPressure;
  isBufferSliding2 = isBufferSliding;
  match36 = match27;
});

// node_modules/effect/dist/esm/Metric.js
var exports_Metric = {};
__export(exports_Metric, {
  zip: () => zip21,
  withNow: () => withNow2,
  withConstantInput: () => withConstantInput2,
  value: () => value6,
  update: () => update9,
  unsafeSnapshot: () => unsafeSnapshot2,
  trackSuccessWith: () => trackSuccessWith2,
  trackSuccess: () => trackSuccess2,
  trackErrorWith: () => trackErrorWith2,
  trackError: () => trackError2,
  trackDurationWith: () => trackDurationWith2,
  trackDuration: () => trackDuration2,
  trackDefectWith: () => trackDefectWith2,
  trackDefect: () => trackDefect2,
  trackAll: () => trackAll2,
  timerWithBoundaries: () => timerWithBoundaries2,
  timer: () => timer3,
  taggedWithLabelsInput: () => taggedWithLabelsInput2,
  taggedWithLabels: () => taggedWithLabels3,
  tagged: () => tagged6,
  sync: () => sync19,
  summaryTimestamp: () => summaryTimestamp2,
  summary: () => summary6,
  succeed: () => succeed26,
  snapshot: () => snapshot2,
  set: () => set13,
  modify: () => modify13,
  mapType: () => mapType3,
  mapInput: () => mapInput12,
  map: () => map39,
  make: () => make95,
  incrementBy: () => incrementBy2,
  increment: () => increment5,
  histogram: () => histogram6,
  globalMetricRegistry: () => globalMetricRegistry2,
  gauge: () => gauge6,
  fromMetricKey: () => fromMetricKey2,
  frequency: () => frequency6,
  fiberSuccesses: () => fiberSuccesses2,
  fiberStarted: () => fiberStarted2,
  fiberLifetimes: () => fiberLifetimes2,
  fiberFailures: () => fiberFailures2,
  fiberActive: () => fiberActive2,
  counter: () => counter7,
  MetricTypeId: () => MetricTypeId2
});
var MetricTypeId2, globalMetricRegistry2, make95, mapInput12, counter7, frequency6, withConstantInput2, fromMetricKey2, gauge6, histogram6, increment5, incrementBy2, map39, mapType3, modify13, set13, snapshot2, succeed26, sync19, summary6, summaryTimestamp2, tagged6, taggedWithLabelsInput2, taggedWithLabels3, timer3, timerWithBoundaries2, trackAll2, trackDefect2, trackDefectWith2, trackDuration2, trackDurationWith2, trackError2, trackErrorWith2, trackSuccess2, trackSuccessWith2, update9, value6, withNow2, zip21, unsafeSnapshot2, fiberStarted2, fiberSuccesses2, fiberFailures2, fiberLifetimes2, fiberActive2;
var init_Metric = __esm(() => {
  init_fiberRuntime();
  init_metric();
  MetricTypeId2 = MetricTypeId;
  globalMetricRegistry2 = globalMetricRegistry;
  make95 = make44;
  mapInput12 = mapInput5;
  counter7 = counter6;
  frequency6 = frequency5;
  withConstantInput2 = withConstantInput;
  fromMetricKey2 = fromMetricKey;
  gauge6 = gauge5;
  histogram6 = histogram5;
  increment5 = increment4;
  incrementBy2 = incrementBy;
  map39 = map20;
  mapType3 = mapType2;
  modify13 = modify9;
  set13 = set8;
  snapshot2 = snapshot;
  succeed26 = succeed7;
  sync19 = sync5;
  summary6 = summary5;
  summaryTimestamp2 = summaryTimestamp;
  tagged6 = tagged2;
  taggedWithLabelsInput2 = taggedWithLabelsInput;
  taggedWithLabels3 = taggedWithLabels2;
  timer3 = timer2;
  timerWithBoundaries2 = timerWithBoundaries;
  trackAll2 = trackAll;
  trackDefect2 = trackDefect;
  trackDefectWith2 = trackDefectWith;
  trackDuration2 = trackDuration;
  trackDurationWith2 = trackDurationWith;
  trackError2 = trackError;
  trackErrorWith2 = trackErrorWith;
  trackSuccess2 = trackSuccess;
  trackSuccessWith2 = trackSuccessWith;
  update9 = update5;
  value6 = value;
  withNow2 = withNow;
  zip21 = zip9;
  unsafeSnapshot2 = unsafeSnapshot;
  fiberStarted2 = fiberStarted;
  fiberSuccesses2 = fiberSuccesses;
  fiberFailures2 = fiberFailures;
  fiberLifetimes2 = fiberLifetimes;
  fiberActive2 = fiberActive;
});

// node_modules/effect/dist/esm/MetricBoundaries.js
var exports_MetricBoundaries = {};
__export(exports_MetricBoundaries, {
  linear: () => linear4,
  isMetricBoundaries: () => isMetricBoundaries2,
  fromIterable: () => fromIterable19,
  exponential: () => exponential4,
  MetricBoundariesTypeId: () => MetricBoundariesTypeId2
});
var MetricBoundariesTypeId2, isMetricBoundaries2, fromIterable19, linear4, exponential4;
var init_MetricBoundaries = __esm(() => {
  init_boundaries();
  MetricBoundariesTypeId2 = MetricBoundariesTypeId;
  isMetricBoundaries2 = isMetricBoundaries;
  fromIterable19 = fromIterable11;
  linear4 = linear;
  exponential4 = exponential;
});

// node_modules/effect/dist/esm/MetricHook.js
var exports_MetricHook = {};
__export(exports_MetricHook, {
  summary: () => summary7,
  onUpdate: () => onUpdate2,
  onModify: () => onModify2,
  make: () => make96,
  histogram: () => histogram7,
  gauge: () => gauge7,
  frequency: () => frequency7,
  counter: () => counter8,
  MetricHookTypeId: () => MetricHookTypeId2
});
var MetricHookTypeId2, make96, counter8, frequency7, gauge7, histogram7, summary7, onUpdate2, onModify2;
var init_MetricHook = __esm(() => {
  init_hook();
  MetricHookTypeId2 = MetricHookTypeId;
  make96 = make41;
  counter8 = counter5;
  frequency7 = frequency4;
  gauge7 = gauge4;
  histogram7 = histogram4;
  summary7 = summary4;
  onUpdate2 = onUpdate;
  onModify2 = onModify;
});

// node_modules/effect/dist/esm/MetricKey.js
var exports_MetricKey = {};
__export(exports_MetricKey, {
  taggedWithLabels: () => taggedWithLabels4,
  tagged: () => tagged7,
  summary: () => summary8,
  isMetricKey: () => isMetricKey2,
  histogram: () => histogram8,
  gauge: () => gauge8,
  frequency: () => frequency8,
  counter: () => counter9,
  MetricKeyTypeId: () => MetricKeyTypeId2
});
var MetricKeyTypeId2, isMetricKey2, counter9, frequency8, gauge8, histogram8, summary8, tagged7, taggedWithLabels4;
var init_MetricKey = __esm(() => {
  init_key();
  MetricKeyTypeId2 = MetricKeyTypeId;
  isMetricKey2 = isMetricKey;
  counter9 = counter3;
  frequency8 = frequency2;
  gauge8 = gauge2;
  histogram8 = histogram2;
  summary8 = summary2;
  tagged7 = tagged;
  taggedWithLabels4 = taggedWithLabels;
});

// node_modules/effect/dist/esm/MetricKeyType.js
var exports_MetricKeyType = {};
__export(exports_MetricKeyType, {
  summary: () => summary9,
  isSummaryKey: () => isSummaryKey2,
  isMetricKeyType: () => isMetricKeyType2,
  isHistogramKey: () => isHistogramKey2,
  isGaugeKey: () => isGaugeKey2,
  isFrequencyKey: () => isFrequencyKey2,
  isCounterKey: () => isCounterKey2,
  histogram: () => histogram9,
  gauge: () => gauge9,
  frequency: () => frequency9,
  counter: () => counter10,
  SummaryKeyTypeTypeId: () => SummaryKeyTypeTypeId2,
  MetricKeyTypeTypeId: () => MetricKeyTypeTypeId2,
  HistogramKeyTypeTypeId: () => HistogramKeyTypeTypeId2,
  GaugeKeyTypeTypeId: () => GaugeKeyTypeTypeId2,
  FrequencyKeyTypeTypeId: () => FrequencyKeyTypeTypeId2,
  CounterKeyTypeTypeId: () => CounterKeyTypeTypeId2
});
var MetricKeyTypeTypeId2, CounterKeyTypeTypeId2, FrequencyKeyTypeTypeId2, GaugeKeyTypeTypeId2, HistogramKeyTypeTypeId2, SummaryKeyTypeTypeId2, counter10, frequency9, gauge9, histogram9, summary9, isMetricKeyType2, isCounterKey2, isFrequencyKey2, isGaugeKey2, isHistogramKey2, isSummaryKey2;
var init_MetricKeyType = __esm(() => {
  init_keyType();
  MetricKeyTypeTypeId2 = MetricKeyTypeTypeId;
  CounterKeyTypeTypeId2 = CounterKeyTypeTypeId;
  FrequencyKeyTypeTypeId2 = FrequencyKeyTypeTypeId;
  GaugeKeyTypeTypeId2 = GaugeKeyTypeTypeId;
  HistogramKeyTypeTypeId2 = HistogramKeyTypeTypeId;
  SummaryKeyTypeTypeId2 = SummaryKeyTypeTypeId;
  counter10 = counter2;
  frequency9 = frequency;
  gauge9 = gauge;
  histogram9 = histogram;
  summary9 = summary;
  isMetricKeyType2 = isMetricKeyType;
  isCounterKey2 = isCounterKey;
  isFrequencyKey2 = isFrequencyKey;
  isGaugeKey2 = isGaugeKey;
  isHistogramKey2 = isHistogramKey;
  isSummaryKey2 = isSummaryKey;
});

// node_modules/effect/dist/esm/MetricLabel.js
var exports_MetricLabel = {};
__export(exports_MetricLabel, {
  make: () => make97,
  isMetricLabel: () => isMetricLabel2,
  MetricLabelTypeId: () => MetricLabelTypeId2
});
var MetricLabelTypeId2, make97, isMetricLabel2;
var init_MetricLabel = __esm(() => {
  init_label();
  MetricLabelTypeId2 = MetricLabelTypeId;
  make97 = make39;
  isMetricLabel2 = isMetricLabel;
});

// node_modules/effect/dist/esm/MetricPair.js
var exports_MetricPair = {};
__export(exports_MetricPair, {
  unsafeMake: () => unsafeMake18,
  make: () => make98,
  MetricPairTypeId: () => MetricPairTypeId2
});
var MetricPairTypeId2, make98, unsafeMake18;
var init_MetricPair = __esm(() => {
  init_pair();
  MetricPairTypeId2 = MetricPairTypeId;
  make98 = make42;
  unsafeMake18 = unsafeMake10;
});

// node_modules/effect/dist/esm/internal/metric/polling.js
var MetricPollingSymbolKey = "effect/MetricPolling", MetricPollingTypeId, make99 = (metric, poll9) => {
  return {
    [MetricPollingTypeId]: MetricPollingTypeId,
    pipe() {
      return pipeArguments(this, arguments);
    },
    metric,
    poll: poll9
  };
}, collectAll2 = (iterable) => {
  const metrics = Array.from(iterable);
  return {
    [MetricPollingTypeId]: MetricPollingTypeId,
    pipe() {
      return pipeArguments(this, arguments);
    },
    metric: make44(Array.of(undefined), (inputs, extraTags) => {
      for (let i2 = 0;i2 < inputs.length; i2++) {
        const pollingMetric = metrics[i2];
        const input = pipe(inputs, (x2) => x2[i2]);
        pollingMetric.metric.unsafeUpdate(input, extraTags);
      }
    }, (extraTags) => Array.from(metrics.map((pollingMetric) => pollingMetric.metric.unsafeValue(extraTags))), (inputs, extraTags) => {
      for (let i2 = 0;i2 < inputs.length; i2++) {
        const pollingMetric = metrics[i2];
        const input = pipe(inputs, (x2) => x2[i2]);
        pollingMetric.metric.unsafeModify(input, extraTags);
      }
    }),
    poll: forEachSequential(metrics, (metric) => metric.poll)
  };
}, launch3, poll9 = (self) => self.poll, pollAndUpdate = (self) => flatMap12(self.poll, (value7) => update5(self.metric, value7)), retry8, zip22;
var init_polling = __esm(() => {
  init_Function();
  init_core();
  init_circular();
  init_metric();
  init_schedule();
  MetricPollingTypeId = /* @__PURE__ */ Symbol.for(MetricPollingSymbolKey);
  launch3 = /* @__PURE__ */ dual(2, (self, schedule3) => pipe(pollAndUpdate(self), zipRight2(value(self.metric)), scheduleForked(schedule3)));
  retry8 = /* @__PURE__ */ dual(2, (self, policy) => ({
    [MetricPollingTypeId]: MetricPollingTypeId,
    pipe() {
      return pipeArguments(this, arguments);
    },
    metric: self.metric,
    poll: retry_Effect(self.poll, policy)
  }));
  zip22 = /* @__PURE__ */ dual(2, (self, that) => ({
    [MetricPollingTypeId]: MetricPollingTypeId,
    pipe() {
      return pipeArguments(this, arguments);
    },
    metric: pipe(self.metric, zip9(that.metric)),
    poll: zip5(self.poll, that.poll)
  }));
});

// node_modules/effect/dist/esm/MetricPolling.js
var exports_MetricPolling = {};
__export(exports_MetricPolling, {
  zip: () => zip23,
  retry: () => retry9,
  pollAndUpdate: () => pollAndUpdate2,
  poll: () => poll10,
  make: () => make100,
  launch: () => launch4,
  collectAll: () => collectAll3,
  MetricPollingTypeId: () => MetricPollingTypeId2
});
var MetricPollingTypeId2, make100, collectAll3, launch4, poll10, pollAndUpdate2, retry9, zip23;
var init_MetricPolling = __esm(() => {
  init_polling();
  MetricPollingTypeId2 = MetricPollingTypeId;
  make100 = make99;
  collectAll3 = collectAll2;
  launch4 = launch3;
  poll10 = poll9;
  pollAndUpdate2 = pollAndUpdate;
  retry9 = retry8;
  zip23 = zip22;
});

// node_modules/effect/dist/esm/MetricRegistry.js
var exports_MetricRegistry = {};
__export(exports_MetricRegistry, {
  make: () => make101,
  MetricRegistryTypeId: () => MetricRegistryTypeId2
});
var MetricRegistryTypeId2, make101;
var init_MetricRegistry = __esm(() => {
  init_registry();
  MetricRegistryTypeId2 = MetricRegistryTypeId;
  make101 = make43;
});

// node_modules/effect/dist/esm/MetricState.js
var exports_MetricState = {};
__export(exports_MetricState, {
  summary: () => summary10,
  isSummaryState: () => isSummaryState2,
  isMetricState: () => isMetricState2,
  isHistogramState: () => isHistogramState2,
  isGaugeState: () => isGaugeState2,
  isFrequencyState: () => isFrequencyState2,
  isCounterState: () => isCounterState2,
  histogram: () => histogram10,
  gauge: () => gauge10,
  frequency: () => frequency10,
  counter: () => counter11,
  SummaryStateTypeId: () => SummaryStateTypeId2,
  MetricStateTypeId: () => MetricStateTypeId2,
  HistogramStateTypeId: () => HistogramStateTypeId2,
  GaugeStateTypeId: () => GaugeStateTypeId2,
  FrequencyStateTypeId: () => FrequencyStateTypeId2,
  CounterStateTypeId: () => CounterStateTypeId2
});
var MetricStateTypeId2, CounterStateTypeId2, FrequencyStateTypeId2, GaugeStateTypeId2, HistogramStateTypeId2, SummaryStateTypeId2, counter11, frequency10, gauge10, histogram10, summary10, isMetricState2, isCounterState2, isFrequencyState2, isGaugeState2, isHistogramState2, isSummaryState2;
var init_MetricState = __esm(() => {
  init_state();
  MetricStateTypeId2 = MetricStateTypeId;
  CounterStateTypeId2 = CounterStateTypeId;
  FrequencyStateTypeId2 = FrequencyStateTypeId;
  GaugeStateTypeId2 = GaugeStateTypeId;
  HistogramStateTypeId2 = HistogramStateTypeId;
  SummaryStateTypeId2 = SummaryStateTypeId;
  counter11 = counter4;
  frequency10 = frequency3;
  gauge10 = gauge3;
  histogram10 = histogram3;
  summary10 = summary3;
  isMetricState2 = isMetricState;
  isCounterState2 = isCounterState;
  isFrequencyState2 = isFrequencyState;
  isGaugeState2 = isGaugeState;
  isHistogramState2 = isHistogramState;
  isSummaryState2 = isSummaryState;
});

// node_modules/effect/dist/esm/ModuleVersion.js
var exports_ModuleVersion = {};
__export(exports_ModuleVersion, {
  setCurrentVersion: () => setCurrentVersion2,
  getCurrentVersion: () => getCurrentVersion2
});
var getCurrentVersion2, setCurrentVersion2;
var init_ModuleVersion = __esm(() => {
  getCurrentVersion2 = getCurrentVersion;
  setCurrentVersion2 = setCurrentVersion;
});

// node_modules/effect/dist/esm/MutableHashSet.js
var exports_MutableHashSet = {};
__export(exports_MutableHashSet, {
  size: () => size27,
  remove: () => remove13,
  make: () => make102,
  has: () => has11,
  fromIterable: () => fromIterable20,
  empty: () => empty46,
  clear: () => clear7,
  add: () => add10
});
var TypeId36, MutableHashSetProto, fromHashMap = (keyMap) => {
  const set14 = Object.create(MutableHashSetProto);
  set14.keyMap = keyMap;
  return set14;
}, empty46 = () => fromHashMap(empty23()), fromIterable20 = (keys9) => fromHashMap(fromIterable9(Array.from(keys9).map((k) => [k, true]))), make102 = (...keys9) => fromIterable20(keys9), add10, has11, remove13, size27 = (self) => size10(self.keyMap), clear7 = (self) => (clear(self.keyMap), self);
var init_MutableHashSet = __esm(() => {
  init_Function();
  init_Inspectable();
  init_MutableHashMap();
  TypeId36 = /* @__PURE__ */ Symbol.for("effect/MutableHashSet");
  MutableHashSetProto = {
    [TypeId36]: TypeId36,
    [Symbol.iterator]() {
      return Array.from(this.keyMap).map(([_]) => _)[Symbol.iterator]();
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "MutableHashSet",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  add10 = /* @__PURE__ */ dual(2, (self, key) => (set5(self.keyMap, key, true), self));
  has11 = /* @__PURE__ */ dual(2, (self, key) => has6(self.keyMap, key));
  remove13 = /* @__PURE__ */ dual(2, (self, key) => (remove8(self.keyMap, key), self));
});

// node_modules/effect/dist/esm/NonEmptyIterable.js
var exports_NonEmptyIterable = {};
__export(exports_NonEmptyIterable, {
  unprepend: () => unprepend2
});
var unprepend2 = (self) => {
  const iterator = self[Symbol.iterator]();
  const next4 = iterator.next();
  if (next4.done) {
    throw new Error("BUG: NonEmptyIterator should not be empty - please report an issue at https://github.com/Effect-TS/effect/issues");
  }
  return [next4.value, iterator];
};

// node_modules/effect/dist/esm/Ordering.js
var exports_Ordering = {};
__export(exports_Ordering, {
  reverse: () => reverse5,
  match: () => match37,
  combineMany: () => combineMany3,
  combineAll: () => combineAll5,
  combine: () => combine17
});
var reverse5 = (o) => o === -1 ? 1 : o === 1 ? -1 : 0, match37, combine17, combineMany3, combineAll5 = (collection) => combineMany3(0, collection);
var init_Ordering = __esm(() => {
  init_Function();
  match37 = /* @__PURE__ */ dual(2, (self, {
    onEqual,
    onGreaterThan,
    onLessThan
  }) => self === -1 ? onLessThan() : self === 0 ? onEqual() : onGreaterThan());
  combine17 = /* @__PURE__ */ dual(2, (self, that) => self !== 0 ? self : that);
  combineMany3 = /* @__PURE__ */ dual(2, (self, collection) => {
    let ordering = self;
    if (ordering !== 0) {
      return ordering;
    }
    for (ordering of collection) {
      if (ordering !== 0) {
        return ordering;
      }
    }
    return ordering;
  });
});

// node_modules/effect/dist/esm/Pool.js
var exports_Pool = {};
__export(exports_Pool, {
  makeWithTTL: () => makeWithTTL4,
  make: () => make103,
  isPool: () => isPool2,
  invalidate: () => invalidate6,
  get: () => get26,
  PoolTypeId: () => PoolTypeId2
});
var PoolTypeId2, isPool2, make103, makeWithTTL4, get26, invalidate6;
var init_Pool = __esm(() => {
  init_pool();
  PoolTypeId2 = PoolTypeId;
  isPool2 = isPool;
  make103 = make84;
  makeWithTTL4 = makeWithTTL;
  get26 = get21;
  invalidate6 = invalidate;
});

// node_modules/effect/dist/esm/Pretty.js
var exports_Pretty = {};
__export(exports_Pretty, {
  match: () => match38,
  make: () => make104
});
var make104 = (schema) => compile(schema.ast, []), getPrettyAnnotation, getMatcher = (defaultPretty) => (ast) => match2(getPrettyAnnotation(ast), {
  onNone: () => defaultPretty,
  onSome: (handler) => handler()
}), toString2, stringify2, formatUnknown2, match38, compile;
var init_Pretty = __esm(() => {
  init_Array();
  init_errors();
  init_util();
  init_Option();
  init_ParseResult();
  init_SchemaAST();
  getPrettyAnnotation = /* @__PURE__ */ getAnnotation(PrettyAnnotationId);
  toString2 = /* @__PURE__ */ getMatcher((a) => String(a));
  stringify2 = /* @__PURE__ */ getMatcher((a) => JSON.stringify(a));
  formatUnknown2 = /* @__PURE__ */ getMatcher(formatUnknown);
  match38 = {
    Declaration: (ast, go4, path) => {
      const annotation = getPrettyAnnotation(ast);
      if (isSome2(annotation)) {
        return annotation.value(...ast.typeParameters.map((tp) => go4(tp, path)));
      }
      throw new Error(getPrettyMissingAnnotationErrorMessage(path, ast));
    },
    VoidKeyword: /* @__PURE__ */ getMatcher(() => "void(0)"),
    NeverKeyword: /* @__PURE__ */ getMatcher(() => {
      throw new Error(getPrettyNeverErrorMessage);
    }),
    Literal: /* @__PURE__ */ getMatcher((literal3) => typeof literal3 === "bigint" ? `${String(literal3)}n` : JSON.stringify(literal3)),
    SymbolKeyword: toString2,
    UniqueSymbol: toString2,
    TemplateLiteral: stringify2,
    UndefinedKeyword: toString2,
    UnknownKeyword: formatUnknown2,
    AnyKeyword: formatUnknown2,
    ObjectKeyword: formatUnknown2,
    StringKeyword: stringify2,
    NumberKeyword: toString2,
    BooleanKeyword: toString2,
    BigIntKeyword: /* @__PURE__ */ getMatcher((a) => `${String(a)}n`),
    Enums: stringify2,
    TupleType: (ast, go4, path) => {
      const hook = getPrettyAnnotation(ast);
      if (isSome2(hook)) {
        return hook.value();
      }
      const elements = ast.elements.map((e, i2) => go4(e.type, path.concat(i2)));
      const rest = ast.rest.map((annotatedAST) => go4(annotatedAST.type, path));
      return (input) => {
        const output = [];
        let i2 = 0;
        for (;i2 < elements.length; i2++) {
          if (input.length < i2 + 1) {
            if (ast.elements[i2].isOptional) {
              continue;
            }
          } else {
            output.push(elements[i2](input[i2]));
          }
        }
        if (isNonEmptyReadonlyArray(rest)) {
          const [head10, ...tail5] = rest;
          for (;i2 < input.length - tail5.length; i2++) {
            output.push(head10(input[i2]));
          }
          for (let j = 0;j < tail5.length; j++) {
            i2 += j;
            output.push(tail5[j](input[i2]));
          }
        }
        return "[" + output.join(", ") + "]";
      };
    },
    TypeLiteral: (ast, go4, path) => {
      const hook = getPrettyAnnotation(ast);
      if (isSome2(hook)) {
        return hook.value();
      }
      const propertySignaturesTypes = ast.propertySignatures.map((ps) => go4(ps.type, path.concat(ps.name)));
      const indexSignatureTypes = ast.indexSignatures.map((is4) => go4(is4.type, path));
      const expectedKeys = {};
      for (let i2 = 0;i2 < propertySignaturesTypes.length; i2++) {
        expectedKeys[ast.propertySignatures[i2].name] = null;
      }
      return (input) => {
        const output = [];
        for (let i2 = 0;i2 < propertySignaturesTypes.length; i2++) {
          const ps = ast.propertySignatures[i2];
          const name = ps.name;
          if (ps.isOptional && !Object.prototype.hasOwnProperty.call(input, name)) {
            continue;
          }
          output.push(`${formatPropertyKey(name)}: ${propertySignaturesTypes[i2](input[name])}`);
        }
        if (indexSignatureTypes.length > 0) {
          for (let i2 = 0;i2 < indexSignatureTypes.length; i2++) {
            const type3 = indexSignatureTypes[i2];
            const keys9 = getKeysForIndexSignature(input, ast.indexSignatures[i2].parameter);
            for (const key of keys9) {
              if (Object.prototype.hasOwnProperty.call(expectedKeys, key)) {
                continue;
              }
              output.push(`${formatPropertyKey(key)}: ${type3(input[key])}`);
            }
          }
        }
        return isNonEmptyReadonlyArray(output) ? "{ " + output.join(", ") + " }" : "{}";
      };
    },
    Union: (ast, go4, path) => {
      const hook = getPrettyAnnotation(ast);
      if (isSome2(hook)) {
        return hook.value();
      }
      const types = ast.types.map((ast2) => [is({
        ast: ast2
      }), go4(ast2, path)]);
      return (a) => {
        const index = types.findIndex(([is4]) => is4(a));
        if (index === -1) {
          throw new Error(getPrettyNoMatchingSchemaErrorMessage(a, path, ast));
        }
        return types[index][1](a);
      };
    },
    Suspend: (ast, go4, path) => {
      return match2(getPrettyAnnotation(ast), {
        onNone: () => {
          const get27 = memoizeThunk(() => go4(ast.f(), path));
          return (a) => get27()(a);
        },
        onSome: (handler) => handler()
      });
    },
    Refinement: (ast, go4, path) => {
      return match2(getPrettyAnnotation(ast), {
        onNone: () => go4(ast.from, path),
        onSome: (handler) => handler()
      });
    },
    Transformation: (ast, go4, path) => {
      return match2(getPrettyAnnotation(ast), {
        onNone: () => go4(ast.to, path),
        onSome: (handler) => handler()
      });
    }
  };
  compile = /* @__PURE__ */ getCompiler(match38);
});

// node_modules/effect/dist/esm/PrimaryKey.js
var exports_PrimaryKey = {};
__export(exports_PrimaryKey, {
  value: () => value7,
  symbol: () => symbol5
});
var symbol5, value7 = (self) => self[symbol5]();
var init_PrimaryKey = __esm(() => {
  symbol5 = /* @__PURE__ */ Symbol.for("effect/PrimaryKey");
});

// node_modules/effect/dist/esm/internal/rateLimiter.js
var make105 = ({
  algorithm = "token-bucket",
  interval,
  limit
}) => {
  switch (algorithm) {
    case "fixed-window": {
      return fixedWindow(limit, interval);
    }
    case "token-bucket": {
      return tokenBucket(limit, interval);
    }
  }
}, tokenBucket = (limit, window3) => gen6(function* () {
  const millisPerToken = Math.ceil(toMillis(window3) / limit);
  const semaphore = yield* makeSemaphore2(limit);
  const latch = yield* makeSemaphore2(0);
  const refill = sleep5(millisPerToken).pipe(zipRight7(latch.releaseAll), zipRight7(semaphore.release(1)), flatMap18((free) => free === limit ? _void : refill));
  yield* pipe(latch.take(1), zipRight7(refill), forever4, forkScoped3, interruptible4);
  const take12 = uninterruptibleMask3((restore) => flatMap18(get15(currentCost), (cost) => zipRight7(restore(semaphore.take(cost)), latch.release(1))));
  return (effect4) => zipRight7(take12, effect4);
}), fixedWindow = (limit, window3) => gen6(function* () {
  const semaphore = yield* makeSemaphore2(limit);
  const latch = yield* makeSemaphore2(0);
  yield* pipe(latch.take(1), zipRight7(sleep5(window3)), zipRight7(latch.releaseAll), zipRight7(semaphore.releaseAll), forever4, forkScoped3, interruptible4);
  const take12 = uninterruptibleMask3((restore) => flatMap18(get15(currentCost), (cost) => zipRight7(restore(semaphore.take(cost)), latch.release(1))));
  return (effect4) => zipRight7(take12, effect4);
}), currentCost, withCost = (cost) => locally2(currentCost, cost);
var init_rateLimiter = __esm(() => {
  init_Duration();
  init_Effect();
  init_FiberRef();
  init_Function();
  init_GlobalValue();
  currentCost = /* @__PURE__ */ globalValue(/* @__PURE__ */ Symbol.for("effect/RateLimiter/currentCost"), () => unsafeMake12(1));
});

// node_modules/effect/dist/esm/RateLimiter.js
var exports_RateLimiter = {};
__export(exports_RateLimiter, {
  withCost: () => withCost2,
  make: () => make106
});
var make106, withCost2;
var init_RateLimiter = __esm(() => {
  init_rateLimiter();
  make106 = make105;
  withCost2 = withCost;
});

// node_modules/effect/dist/esm/Redacted.js
var exports_Redacted = {};
__export(exports_Redacted, {
  value: () => value8,
  unsafeWipe: () => unsafeWipe3,
  make: () => make107,
  isRedacted: () => isRedacted2,
  getEquivalence: () => getEquivalence9,
  RedactedTypeId: () => RedactedTypeId2
});
var RedactedTypeId2, isRedacted2, make107, value8, unsafeWipe3, getEquivalence9 = (isEquivalent) => make((x2, y) => isEquivalent(value8(x2), value8(y)));
var init_Redacted = __esm(() => {
  init_Equivalence();
  init_redacted();
  RedactedTypeId2 = RedactedTypeId;
  isRedacted2 = isRedacted;
  make107 = make74;
  value8 = value2;
  unsafeWipe3 = unsafeWipe;
});

// node_modules/effect/dist/esm/internal/scopedRef.js
var ScopedRefSymbolKey = "effect/ScopedRef", ScopedRefTypeId, scopedRefVariance, proto14, close2 = (self) => flatMap12(get13(self.ref), (tuple7) => tuple7[0].close(exitVoid)), fromAcquire = (acquire2) => uninterruptible(scopeMake2().pipe(flatMap12((newScope) => acquire2.pipe(mapInputContext(add2(scopeTag, newScope)), onError((cause3) => newScope.close(exitFail(cause3))), flatMap12((value9) => makeSynchronized([newScope, value9]).pipe(flatMap12((ref) => {
  const scopedRef = Object.create(proto14);
  scopedRef.ref = ref;
  return pipe(addFinalizer2(() => close2(scopedRef)), as3(scopedRef));
}))))))), get27 = (self) => map14(get13(self.ref), (tuple7) => tuple7[1]), make108 = (evaluate4) => fromAcquire(sync(evaluate4)), set14;
var init_scopedRef = __esm(() => {
  init_Context();
  init_Function();
  init_core();
  init_circular();
  init_effectable();
  init_fiberRuntime();
  init_ref();
  init_synchronizedRef();
  ScopedRefTypeId = /* @__PURE__ */ Symbol.for(ScopedRefSymbolKey);
  scopedRefVariance = {
    _A: (_) => _
  };
  proto14 = {
    ...CommitPrototype,
    commit() {
      return get27(this);
    },
    [ScopedRefTypeId]: scopedRefVariance
  };
  set14 = /* @__PURE__ */ dual(2, (self, acquire2) => flatten8(modifyEffect(self.ref, ([oldScope, value9]) => uninterruptible(scopeClose(oldScope, exitVoid).pipe(zipRight2(scopeMake2()), flatMap12((newScope) => exit(scopeExtend(acquire2, newScope)).pipe(flatMap12((exit4) => exitMatch(exit4, {
    onFailure: (cause3) => scopeClose(newScope, exitVoid).pipe(as3([failCause(cause3), [oldScope, value9]])),
    onSuccess: (value10) => succeed([void_3, [newScope, value10]])
  })))))))));
});

// node_modules/effect/dist/esm/internal/reloadable.js
var ReloadableSymbolKey = "effect/Reloadable", ReloadableTypeId, reloadableVariance, auto = (tag3, options) => scoped3(reloadableTag(tag3), pipe(build(manual(tag3, {
  layer: options.layer
})), map14(unsafeGet3(reloadableTag(tag3))), tap2((reloadable) => acquireRelease2(pipe(reloadable.reload, ignoreLogged, schedule_Effect(options.schedule), forkDaemon2), interruptFiber)))), autoFromConfig = (tag3, options) => scoped3(reloadableTag(tag3), pipe(context2(), flatMap12((env) => pipe(build(auto(tag3, {
  layer: options.layer,
  schedule: options.scheduleFromConfig(env)
})), map14(unsafeGet3(reloadableTag(tag3))))))), get28 = (tag3) => flatMap12(reloadableTag(tag3), (reloadable) => get27(reloadable.scopedRef)), manual = (tag3, options) => scoped3(reloadableTag(tag3), pipe(context2(), flatMap12((env) => pipe(fromAcquire(pipe(build(options.layer), map14(unsafeGet3(tag3)))), map14((ref) => ({
  [ReloadableTypeId]: reloadableVariance,
  scopedRef: ref,
  reload: pipe(set14(ref, pipe(build(options.layer), map14(unsafeGet3(tag3)))), provideContext(env))
})))))), reloadableTag = (tag3) => {
  return GenericTag(`effect/Reloadable<${tag3.key}>`);
}, reload = (tag3) => flatMap12(reloadableTag(tag3), (reloadable) => reloadable.reload), reloadFork = (tag3) => flatMap12(reloadableTag(tag3), (reloadable) => pipe(reloadable.reload, ignoreLogged, forkDaemon2, asVoid2));
var init_reloadable = __esm(() => {
  init_Context();
  init_Function();
  init_core_effect();
  init_core();
  init_fiberRuntime();
  init_layer();
  init_schedule();
  init_scopedRef();
  ReloadableTypeId = /* @__PURE__ */ Symbol.for(ReloadableSymbolKey);
  reloadableVariance = {
    _A: (_) => _
  };
});

// node_modules/effect/dist/esm/Reloadable.js
var exports_Reloadable = {};
__export(exports_Reloadable, {
  tag: () => tag3,
  reloadFork: () => reloadFork2,
  reload: () => reload2,
  manual: () => manual2,
  get: () => get29,
  autoFromConfig: () => autoFromConfig2,
  auto: () => auto2,
  ReloadableTypeId: () => ReloadableTypeId2
});
var ReloadableTypeId2, auto2, autoFromConfig2, get29, manual2, reload2, tag3, reloadFork2;
var init_Reloadable = __esm(() => {
  init_reloadable();
  ReloadableTypeId2 = ReloadableTypeId;
  auto2 = auto;
  autoFromConfig2 = autoFromConfig;
  get29 = get28;
  manual2 = manual;
  reload2 = reload;
  tag3 = reloadableTag;
  reloadFork2 = reloadFork;
});

// node_modules/effect/dist/esm/RequestBlock.js
var exports_RequestBlock = {};
__export(exports_RequestBlock, {
  single: () => single2,
  sequential: () => sequential5,
  reduce: () => reduce20,
  parallel: () => parallel5,
  mapRequestResolvers: () => mapRequestResolvers2,
  empty: () => empty47
});
var single2, empty47, mapRequestResolvers2, parallel5, reduce20, sequential5;
var init_RequestBlock = __esm(() => {
  init_blockedRequests();
  single2 = single;
  empty47 = empty21;
  mapRequestResolvers2 = mapRequestResolvers;
  parallel5 = par;
  reduce20 = reduce10;
  sequential5 = seq;
});

// node_modules/effect/dist/esm/internal/dataSource.js
var make109 = (runAll) => new RequestResolverImpl((requests) => runAll(requests.map((_) => _.map((_2) => _2.request)))), makeWithEntry = (runAll) => new RequestResolverImpl((requests) => runAll(requests)), makeBatched2 = (run9) => new RequestResolverImpl((requests) => {
  if (requests.length > 1) {
    return forEachSequentialDiscard(requests, (block) => {
      const filtered = block.filter((_) => !_.state.completed).map((_) => _.request);
      if (!isNonEmptyArray2(filtered)) {
        return void_3;
      }
      return invokeWithInterrupt(run9(filtered), block);
    });
  } else if (requests.length === 1) {
    const filtered = requests[0].filter((_) => !_.state.completed).map((_) => _.request);
    if (!isNonEmptyArray2(filtered)) {
      return void_3;
    }
    return run9(filtered);
  }
  return void_3;
}), around, aroundRequests, batchN, mapInputContext9, eitherWith3, fromFunction5 = (f) => makeBatched2((requests) => forEachSequentialDiscard(requests, (request2) => complete2(request2, exitSucceed(f(request2))))).identified("FromFunction", f), fromFunctionBatched = (f) => makeBatched2((as15) => forEach16(f(as15), (res, i2) => complete2(as15[i2], exitSucceed(res)), {
  discard: true
})).identified("FromFunctionBatched", f), fromEffect11 = (f) => makeBatched2((requests) => forEach16(requests, (a) => flatMap18(exit3(f(a)), (e) => complete2(a, e)), {
  concurrency: "unbounded",
  discard: true
})).identified("FromEffect", f), fromEffectTagged = () => (fns) => makeBatched2((requests) => {
  const grouped2 = {};
  const tags3 = [];
  for (let i2 = 0, len = requests.length;i2 < len; i2++) {
    if (tags3.includes(requests[i2]._tag)) {
      grouped2[requests[i2]._tag].push(requests[i2]);
    } else {
      grouped2[requests[i2]._tag] = [requests[i2]];
      tags3.push(requests[i2]._tag);
    }
  }
  return forEach16(tags3, (tag4) => matchCauseEffect3(fns[tag4](grouped2[tag4]), {
    onFailure: (cause3) => forEach16(grouped2[tag4], (req) => complete2(req, exitFail(cause3)), {
      discard: true
    }),
    onSuccess: (res) => forEach16(grouped2[tag4], (req, i2) => complete2(req, exitSucceed(res[i2])), {
      discard: true
    })
  }), {
    concurrency: "unbounded",
    discard: true
  });
}).identified("FromEffectTagged", fns), never10, provideContext10, race6;
var init_dataSource = __esm(() => {
  init_Array();
  init_Cause();
  init_Chunk();
  init_Effect();
  init_Function();
  init_core();
  init_fiberRuntime();
  init_request();
  around = /* @__PURE__ */ dual(3, (self, before3, after3) => new RequestResolverImpl((requests) => acquireUseRelease(before3, () => self.runAll(requests), after3), make9("Around", self, before3, after3)));
  aroundRequests = /* @__PURE__ */ dual(3, (self, before3, after3) => new RequestResolverImpl((requests) => {
    const flatRequests = requests.flatMap((chunk6) => chunk6.map((entry) => entry.request));
    return acquireUseRelease(before3(flatRequests), () => self.runAll(requests), (a2) => after3(flatRequests, a2));
  }, make9("AroundRequests", self, before3, after3)));
  batchN = /* @__PURE__ */ dual(2, (self, n) => new RequestResolverImpl((requests) => {
    return n < 1 ? die2(new IllegalArgumentException2("RequestResolver.batchN: n must be at least 1")) : self.runAll(Array.from(map7(reduce3(requests, empty7(), (acc, chunk6) => appendAll3(acc, chunksOf3(unsafeFromArray(chunk6), n))), (chunk6) => Array.from(chunk6))));
  }, make9("BatchN", self, n)));
  mapInputContext9 = /* @__PURE__ */ dual(2, (self, f) => new RequestResolverImpl((requests) => mapInputContext(self.runAll(requests), (context12) => f(context12)), make9("MapInputContext", self, f)));
  eitherWith3 = /* @__PURE__ */ dual(3, (self, that, f) => new RequestResolverImpl((batch) => pipe(forEachSequential(batch, (requests) => {
    const [as15, bs] = pipe(requests, partitionMap3(f));
    return zipWithOptions(self.runAll(Array.of(as15)), that.runAll(Array.of(bs)), () => {
      return;
    }, {
      concurrent: true
    });
  })), make9("EitherWith", self, that, f)));
  never10 = /* @__PURE__ */ make109(() => never5).identified("Never");
  provideContext10 = /* @__PURE__ */ dual(2, (self, context12) => mapInputContext9(self, (_) => context12).identified("ProvideContext", self, context12));
  race6 = /* @__PURE__ */ dual(2, (self, that) => new RequestResolverImpl((requests) => race3(self.runAll(requests), that.runAll(requests))).identified("Race", self, that));
});

// node_modules/effect/dist/esm/RequestResolver.js
var exports_RequestResolver = {};
__export(exports_RequestResolver, {
  race: () => race7,
  provideContext: () => provideContext11,
  never: () => never11,
  mapInputContext: () => mapInputContext10,
  makeWithEntry: () => makeWithEntry2,
  makeBatched: () => makeBatched3,
  make: () => make110,
  locally: () => locally4,
  isRequestResolver: () => isRequestResolver2,
  fromFunctionBatched: () => fromFunctionBatched2,
  fromFunction: () => fromFunction6,
  fromEffectTagged: () => fromEffectTagged2,
  fromEffect: () => fromEffect12,
  eitherWith: () => eitherWith4,
  contextFromServices: () => contextFromServices,
  contextFromEffect: () => contextFromEffect,
  batchN: () => batchN2,
  aroundRequests: () => aroundRequests2,
  around: () => around2,
  RequestResolverTypeId: () => RequestResolverTypeId2
});
var RequestResolverTypeId2, contextFromEffect = (self) => contextWith2((_) => provideContext11(self, _)), contextFromServices = (...services) => (self) => contextWith2((_) => provideContext11(self, pick3(...services)(_))), isRequestResolver2, make110, makeWithEntry2, makeBatched3, around2, aroundRequests2, batchN2, mapInputContext10, eitherWith4, fromFunction6, fromFunctionBatched2, fromEffect12, fromEffectTagged2, never11, provideContext11, race7, locally4;
var init_RequestResolver = __esm(() => {
  init_Context();
  init_Effect();
  init_core();
  init_dataSource();
  RequestResolverTypeId2 = RequestResolverTypeId;
  isRequestResolver2 = isRequestResolver;
  make110 = make109;
  makeWithEntry2 = makeWithEntry;
  makeBatched3 = makeBatched2;
  around2 = around;
  aroundRequests2 = aroundRequests;
  batchN2 = batchN;
  mapInputContext10 = mapInputContext9;
  eitherWith4 = eitherWith3;
  fromFunction6 = fromFunction5;
  fromFunctionBatched2 = fromFunctionBatched;
  fromEffect12 = fromEffect11;
  fromEffectTagged2 = fromEffectTagged;
  never11 = never10;
  provideContext11 = provideContext10;
  race7 = race6;
  locally4 = resolverLocally;
});

// node_modules/effect/dist/esm/internal/resource.js
var ResourceSymbolKey = "effect/Resource", ResourceTypeId, resourceVariance, proto15, auto3 = (acquire2, policy) => tap2(manual3(acquire2), (manual3) => acquireRelease2(pipe(refresh(manual3), schedule_Effect(policy), interruptible2, forkDaemon2), interruptFiber)), manual3 = (acquire2) => flatMap12(context2(), (env) => pipe(fromAcquire(exit(acquire2)), map14((ref) => {
  const resource = Object.create(proto15);
  resource.scopedRef = ref;
  resource.acquire = provideContext(acquire2, env);
  return resource;
}))), get30 = (self) => flatMap12(get27(self.scopedRef), identity), refresh = (self) => set14(self.scopedRef, map14(self.acquire, exitSucceed));
var init_resource = __esm(() => {
  init_Function();
  init_core();
  init_effectable();
  init_fiberRuntime();
  init_schedule();
  init_scopedRef();
  ResourceTypeId = /* @__PURE__ */ Symbol.for(ResourceSymbolKey);
  resourceVariance = {
    _E: (_) => _,
    _A: (_) => _
  };
  proto15 = {
    ...CommitPrototype,
    commit() {
      return get30(this);
    },
    [ResourceTypeId]: resourceVariance
  };
});

// node_modules/effect/dist/esm/Resource.js
var exports_Resource = {};
__export(exports_Resource, {
  refresh: () => refresh2,
  manual: () => manual4,
  get: () => get31,
  auto: () => auto4,
  ResourceTypeId: () => ResourceTypeId2
});
var ResourceTypeId2, auto4, get31, manual4, refresh2;
var init_Resource = __esm(() => {
  init_resource();
  ResourceTypeId2 = ResourceTypeId;
  auto4 = auto3;
  get31 = get30;
  manual4 = manual3;
  refresh2 = refresh;
});

// node_modules/effect/dist/esm/RuntimeFlags.js
var exports_RuntimeFlags = {};
__export(exports_RuntimeFlags, {
  windDown: () => windDown2,
  toSet: () => toSet5,
  runtimeMetrics: () => runtimeMetrics2,
  render: () => render5,
  patch: () => patch13,
  opSupervision: () => opSupervision2,
  none: () => none12,
  make: () => make111,
  isEnabled: () => isEnabled4,
  isDisabled: () => isDisabled4,
  interruption: () => interruption2,
  interruptible: () => interruptible5,
  enableWindDown: () => enableWindDown2,
  enableRuntimeMetrics: () => enableRuntimeMetrics2,
  enableOpSupervision: () => enableOpSupervision2,
  enableInterruption: () => enableInterruption2,
  enableCooperativeYielding: () => enableCooperativeYielding2,
  enableAll: () => enableAll2,
  enable: () => enable4,
  disableWindDown: () => disableWindDown2,
  disableRuntimeMetrics: () => disableRuntimeMetrics2,
  disableOpSupervision: () => disableOpSupervision2,
  disableInterruption: () => disableInterruption2,
  disableCooperativeYielding: () => disableCooperativeYielding2,
  disableAll: () => disableAll2,
  disable: () => disable4,
  differ: () => differ3,
  diff: () => diff12,
  cooperativeYielding: () => cooperativeYielding2,
  WindDown: () => WindDown2,
  RuntimeMetrics: () => RuntimeMetrics2,
  OpSupervision: () => OpSupervision2,
  None: () => None4,
  Interruption: () => Interruption2,
  CooperativeYielding: () => CooperativeYielding2
});
var None4, Interruption2, OpSupervision2, RuntimeMetrics2, WindDown2, CooperativeYielding2, cooperativeYielding2, diff12, differ3, disable4, disableAll2, disableCooperativeYielding2, disableInterruption2, disableOpSupervision2, disableRuntimeMetrics2, disableWindDown2, enable4, enableAll2, enableCooperativeYielding2, enableInterruption2, enableOpSupervision2, enableRuntimeMetrics2, enableWindDown2, interruptible5, interruption2, isEnabled4, isDisabled4, make111, none12, opSupervision2, patch13, render5, runtimeMetrics2, toSet5, windDown2;
var init_RuntimeFlags = __esm(() => {
  init_circular3();
  init_runtimeFlags();
  None4 = None2;
  Interruption2 = Interruption;
  OpSupervision2 = OpSupervision;
  RuntimeMetrics2 = RuntimeMetrics;
  WindDown2 = WindDown;
  CooperativeYielding2 = CooperativeYielding;
  cooperativeYielding2 = cooperativeYielding;
  diff12 = diff7;
  differ3 = differ;
  disable4 = disable2;
  disableAll2 = disableAll;
  disableCooperativeYielding2 = disableCooperativeYielding;
  disableInterruption2 = disableInterruption;
  disableOpSupervision2 = disableOpSupervision;
  disableRuntimeMetrics2 = disableRuntimeMetrics;
  disableWindDown2 = disableWindDown;
  enable4 = enable2;
  enableAll2 = enableAll;
  enableCooperativeYielding2 = enableCooperativeYielding;
  enableInterruption2 = enableInterruption;
  enableOpSupervision2 = enableOpSupervision;
  enableRuntimeMetrics2 = enableRuntimeMetrics;
  enableWindDown2 = enableWindDown;
  interruptible5 = interruptible;
  interruption2 = interruption;
  isEnabled4 = isEnabled2;
  isDisabled4 = isDisabled2;
  make111 = make22;
  none12 = none5;
  opSupervision2 = opSupervision;
  patch13 = patch7;
  render5 = render;
  runtimeMetrics2 = runtimeMetrics;
  toSet5 = toSet3;
  windDown2 = windDown;
});

// node_modules/effect/dist/esm/STM.js
var exports_STM = {};
__export(exports_STM, {
  zipWith: () => zipWith20,
  zipRight: () => zipRight15,
  zipLeft: () => zipLeft15,
  zip: () => zip24,
  whenSTM: () => whenSTM2,
  when: () => when8,
  void: () => void_12,
  validateFirst: () => validateFirst4,
  validateAll: () => validateAll4,
  unsome: () => unsome3,
  unlessSTM: () => unlessSTM2,
  unless: () => unless4,
  try: () => try_6,
  tapError: () => tapError8,
  tapBoth: () => tapBoth5,
  tap: () => tap10,
  sync: () => sync20,
  suspend: () => suspend14,
  summarized: () => summarized5,
  succeedSome: () => succeedSome5,
  succeedNone: () => succeedNone5,
  succeed: () => succeed27,
  some: () => some18,
  retryWhile: () => retryWhile2,
  retryUntil: () => retryUntil2,
  retry: () => retry10,
  replicateSTMDiscard: () => replicateSTMDiscard2,
  replicateSTM: () => replicateSTM2,
  replicate: () => replicate7,
  repeatWhile: () => repeatWhile2,
  repeatUntil: () => repeatUntil2,
  rejectSTM: () => rejectSTM2,
  reject: () => reject2,
  refineOrDieWith: () => refineOrDieWith4,
  refineOrDie: () => refineOrDie4,
  reduceRight: () => reduceRight7,
  reduceAll: () => reduceAll2,
  reduce: () => reduce21,
  provideSomeContext: () => provideSomeContext3,
  provideServiceSTM: () => provideServiceSTM2,
  provideService: () => provideService12,
  provideContext: () => provideContext12,
  partition: () => partition12,
  orTry: () => orTry2,
  orElseSucceed: () => orElseSucceed6,
  orElseOptional: () => orElseOptional2,
  orElseFail: () => orElseFail5,
  orElseEither: () => orElseEither8,
  orElse: () => orElse21,
  orDieWith: () => orDieWith7,
  orDie: () => orDie10,
  option: () => option10,
  none: () => none13,
  negate: () => negate6,
  mergeAll: () => mergeAll11,
  merge: () => merge11,
  matchSTM: () => matchSTM2,
  match: () => match39,
  mapInputContext: () => mapInputContext11,
  mapError: () => mapError13,
  mapBoth: () => mapBoth11,
  mapAttempt: () => mapAttempt4,
  map: () => map40,
  loop: () => loop4,
  let: () => let_10,
  iterate: () => iterate5,
  isSuccess: () => isSuccess7,
  isSTM: () => isSTM2,
  isFailure: () => isFailure8,
  interruptAs: () => interruptAs3,
  interrupt: () => interrupt11,
  ignore: () => ignore5,
  if: () => if_4,
  head: () => head10,
  gen: () => gen8,
  fromOption: () => fromOption10,
  fromEither: () => fromEither6,
  forEach: () => forEach19,
  flipWith: () => flipWith4,
  flip: () => flip7,
  flatten: () => flatten19,
  flatMap: () => flatMap26,
  firstSuccessOf: () => firstSuccessOf3,
  filterOrFail: () => filterOrFail5,
  filterOrElse: () => filterOrElse4,
  filterOrDieMessage: () => filterOrDieMessage4,
  filterOrDie: () => filterOrDie4,
  filterNot: () => filterNot2,
  filter: () => filter21,
  fiberId: () => fiberId4,
  failSync: () => failSync12,
  fail: () => fail24,
  exists: () => exists6,
  every: () => every16,
  eventually: () => eventually4,
  ensuring: () => ensuring11,
  either: () => either12,
  dieSync: () => dieSync9,
  dieMessage: () => dieMessage7,
  die: () => die15,
  contextWithSTM: () => contextWithSTM2,
  contextWith: () => contextWith8,
  context: () => context12,
  cond: () => cond2,
  commitEither: () => commitEither2,
  commit: () => commit3,
  collectSTM: () => collectSTM2,
  collect: () => collect5,
  check: () => check5,
  catchTags: () => catchTags5,
  catchTag: () => catchTag6,
  catchSome: () => catchSome5,
  catchAll: () => catchAll10,
  bindTo: () => bindTo10,
  bind: () => bind10,
  attempt: () => attempt2,
  asVoid: () => asVoid11,
  asSomeError: () => asSomeError4,
  asSome: () => asSome5,
  as: () => as15,
  all: () => all15,
  acquireUseRelease: () => acquireUseRelease7,
  STMTypeId: () => STMTypeId3,
  Do: () => Do8
});
var STMTypeId3, isSTM2, acquireUseRelease7, all15, as15, asSome5, asSomeError4, asVoid11, attempt2, catchAll10, catchSome5, catchTag6, catchTags5, check5, collect5, collectSTM2, commit3, commitEither2, cond2, context12, contextWith8, contextWithSTM2, mapInputContext11, die15, dieMessage7, dieSync9, either12, ensuring11, eventually4, every16, exists6, fail24, failSync12, fiberId4, filter21, filterNot2, filterOrDie4, filterOrDieMessage4, filterOrElse4, filterOrFail5, flatMap26, flatten19, flip7, flipWith4, match39, matchSTM2, forEach19, fromEither6, fromOption10, gen8, head10, if_4, ignore5, interrupt11, interruptAs3, isFailure8, isSuccess7, iterate5, loop4, map40, mapAttempt4, mapBoth11, mapError13, merge11, mergeAll11, negate6, none13, option10, orDie10, orDieWith7, orElse21, orElseEither8, orElseFail5, orElseOptional2, orElseSucceed6, orTry2, partition12, provideContext12, provideSomeContext3, provideService12, provideServiceSTM2, reduce21, reduceAll2, reduceRight7, refineOrDie4, refineOrDieWith4, reject2, rejectSTM2, repeatUntil2, repeatWhile2, replicate7, replicateSTM2, replicateSTMDiscard2, retry10, retryUntil2, retryWhile2, some18, succeed27, succeedNone5, succeedSome5, summarized5, suspend14, sync20, tap10, tapBoth5, tapError8, try_6, unless4, unlessSTM2, unsome3, void_12, validateAll4, validateFirst4, when8, whenSTM2, zip24, zipLeft15, zipRight15, zipWith20, firstSuccessOf3 = (effects) => suspend14(() => {
  const list = fromIterable3(effects);
  if (!isNonEmpty2(list)) {
    return dieSync9(() => new IllegalArgumentException2(`Received an empty collection of effects`));
  }
  return reduce4(tailNonEmpty2(list), headNonEmpty2(list), (left3, right3) => orElse21(left3, () => right3));
}), Do8, bind10, let_10, bindTo10;
var init_STM = __esm(() => {
  init_Cause();
  init_Chunk();
  init_core2();
  init_stm();
  STMTypeId3 = STMTypeId2;
  isSTM2 = isSTM;
  acquireUseRelease7 = acquireUseRelease5;
  all15 = all12;
  as15 = as12;
  asSome5 = asSome4;
  asSomeError4 = asSomeError3;
  asVoid11 = asVoid9;
  attempt2 = attempt;
  catchAll10 = catchAll7;
  catchSome5 = catchSome3;
  catchTag6 = catchTag4;
  catchTags5 = catchTags3;
  check5 = check4;
  collect5 = collect3;
  collectSTM2 = collectSTM;
  commit3 = commit2;
  commitEither2 = commitEither;
  cond2 = cond;
  context12 = context9;
  contextWith8 = contextWith5;
  contextWithSTM2 = contextWithSTM;
  mapInputContext11 = mapInputContext6;
  die15 = die12;
  dieMessage7 = dieMessage4;
  dieSync9 = dieSync7;
  either12 = either8;
  ensuring11 = ensuring8;
  eventually4 = eventually3;
  every16 = every15;
  exists6 = exists5;
  fail24 = fail17;
  failSync12 = failSync9;
  fiberId4 = fiberId3;
  filter21 = filter17;
  filterNot2 = filterNot;
  filterOrDie4 = filterOrDie3;
  filterOrDieMessage4 = filterOrDieMessage3;
  filterOrElse4 = filterOrElse3;
  filterOrFail5 = filterOrFail4;
  flatMap26 = flatMap22;
  flatten19 = flatten16;
  flip7 = flip6;
  flipWith4 = flipWith3;
  match39 = match31;
  matchSTM2 = matchSTM;
  forEach19 = forEach18;
  fromEither6 = fromEither4;
  fromOption10 = fromOption7;
  gen8 = gen7;
  head10 = head9;
  if_4 = if_3;
  ignore5 = ignore4;
  interrupt11 = interrupt10;
  interruptAs3 = interruptAs2;
  isFailure8 = isFailure6;
  isSuccess7 = isSuccess5;
  iterate5 = iterate3;
  loop4 = loop3;
  map40 = map31;
  mapAttempt4 = mapAttempt;
  mapBoth11 = mapBoth8;
  mapError13 = mapError9;
  merge11 = merge9;
  mergeAll11 = mergeAll8;
  negate6 = negate5;
  none13 = none10;
  option10 = option5;
  orDie10 = orDie7;
  orDieWith7 = orDieWith4;
  orElse21 = orElse12;
  orElseEither8 = orElseEither6;
  orElseFail5 = orElseFail3;
  orElseOptional2 = orElseOptional;
  orElseSucceed6 = orElseSucceed4;
  orTry2 = orTry;
  partition12 = partition10;
  provideContext12 = provideContext7;
  provideSomeContext3 = provideSomeContext2;
  provideService12 = provideService9;
  provideServiceSTM2 = provideServiceSTM;
  reduce21 = reduce19;
  reduceAll2 = reduceAll;
  reduceRight7 = reduceRight6;
  refineOrDie4 = refineOrDie2;
  refineOrDieWith4 = refineOrDieWith2;
  reject2 = reject;
  rejectSTM2 = rejectSTM;
  repeatUntil2 = repeatUntil;
  repeatWhile2 = repeatWhile;
  replicate7 = replicate6;
  replicateSTM2 = replicateSTM;
  replicateSTMDiscard2 = replicateSTMDiscard;
  retry10 = retry6;
  retryUntil2 = retryUntil;
  retryWhile2 = retryWhile;
  some18 = some16;
  succeed27 = succeed19;
  succeedNone5 = succeedNone4;
  succeedSome5 = succeedSome4;
  summarized5 = summarized4;
  suspend14 = suspend9;
  sync20 = sync13;
  tap10 = tap7;
  tapBoth5 = tapBoth3;
  tapError8 = tapError6;
  try_6 = try_5;
  unless4 = unless3;
  unlessSTM2 = unlessSTM;
  unsome3 = unsome;
  void_12 = void_9;
  validateAll4 = validateAll3;
  validateFirst4 = validateFirst3;
  when8 = when4;
  whenSTM2 = whenSTM;
  zip24 = zip15;
  zipLeft15 = zipLeft11;
  zipRight15 = zipRight11;
  zipWith20 = zipWith16;
  Do8 = /* @__PURE__ */ succeed27({});
  bind10 = bind8;
  let_10 = let_8;
  bindTo10 = bindTo8;
});

// node_modules/effect/dist/esm/Struct.js
var exports_Struct = {};
__export(exports_Struct, {
  pick: () => pick4,
  omit: () => omit4,
  keys: () => keys9,
  getOrder: () => getOrder6,
  getEquivalence: () => getEquivalence10,
  get: () => get32,
  evolve: () => evolve
});
var pick4, omit4, getEquivalence10, getOrder6, evolve, get32 = (key) => (s) => s[key], keys9 = (o) => Object.keys(o);
var init_Struct = __esm(() => {
  init_Equivalence();
  init_Function();
  init_Order();
  init_Predicate();
  pick4 = /* @__PURE__ */ dual((args2) => isObject2(args2[0]), (s, ...keys9) => {
    const out = {};
    for (const k of keys9) {
      if (k in s) {
        out[k] = s[k];
      }
    }
    return out;
  });
  omit4 = /* @__PURE__ */ dual((args2) => isObject2(args2[0]), (s, ...keys9) => {
    const out = {
      ...s
    };
    for (const k of keys9) {
      delete out[k];
    }
    return out;
  });
  getEquivalence10 = struct;
  getOrder6 = struct3;
  evolve = /* @__PURE__ */ dual(2, (obj, t) => {
    const out = {
      ...obj
    };
    for (const k in t) {
      if (Object.prototype.hasOwnProperty.call(obj, k)) {
        out[k] = t[k](obj[k]);
      }
    }
    return out;
  });
});

// node_modules/effect/dist/esm/Schema.js
var exports_Schema = {};
__export(exports_Schema, {
  withDefaults: () => withDefaults,
  withDecodingDefault: () => withDecodingDefault,
  withConstructorDefault: () => withConstructorDefault,
  validateSync: () => validateSync,
  validatePromise: () => validatePromise2,
  validateOption: () => validateOption,
  validateEither: () => validateEither2,
  validate: () => validate6,
  validDate: () => validDate,
  uppercased: () => uppercased,
  uncapitalized: () => uncapitalized,
  typeSchema: () => typeSchema,
  trimmed: () => trimmed,
  transformOrFail: () => transformOrFail,
  transformLiterals: () => transformLiterals,
  transformLiteral: () => transformLiteral,
  transform: () => transform3,
  tag: () => tag4,
  symbolWithResult: () => symbolWithResult,
  symbolSerializable: () => symbolSerializable,
  suspend: () => suspend15,
  successSchema: () => successSchema,
  startsWith: () => startsWith2,
  standardSchemaV1: () => standardSchemaV1,
  split: () => split5,
  serializeSuccess: () => serializeSuccess,
  serializeFailure: () => serializeFailure,
  serializeExit: () => serializeExit,
  serialize: () => serialize,
  serializableSchema: () => serializableSchema,
  requiredToOptional: () => requiredToOptional,
  required: () => required2,
  rename: () => rename2,
  propertySignature: () => propertySignature,
  positiveBigInt: () => positiveBigInt,
  positiveBigDecimal: () => positiveBigDecimal,
  positive: () => positive,
  pluck: () => pluck,
  pickLiteral: () => pickLiteral,
  pick: () => pick5,
  pattern: () => pattern,
  partialWith: () => partialWith,
  partial: () => partial2,
  parseNumber: () => parseNumber,
  parseJson: () => parseJson,
  optionalWith: () => optionalWith,
  optionalToRequired: () => optionalToRequired,
  optionalToOptional: () => optionalToOptional,
  optionalElement: () => optionalElement,
  optional: () => optional,
  omit: () => omit5,
  nonPositiveBigInt: () => nonPositiveBigInt,
  nonPositiveBigDecimal: () => nonPositiveBigDecimal,
  nonPositive: () => nonPositive,
  nonNegativeBigInt: () => nonNegativeBigInt,
  nonNegativeBigDecimal: () => nonNegativeBigDecimal,
  nonNegative: () => nonNegative,
  nonNaN: () => nonNaN,
  nonEmptyString: () => nonEmptyString5,
  negativeBigInt: () => negativeBigInt,
  negativeBigDecimal: () => negativeBigDecimal,
  negative: () => negative,
  mutable: () => mutable2,
  multipleOf: () => multipleOf,
  minLength: () => minLength,
  minItems: () => minItems,
  maxLength: () => maxLength,
  maxItems: () => maxItems,
  makePropertySignature: () => makePropertySignature,
  make: () => make112,
  lowercased: () => lowercased,
  lessThanOrEqualToDuration: () => lessThanOrEqualToDuration,
  lessThanOrEqualToDate: () => lessThanOrEqualToDate,
  lessThanOrEqualToBigInt: () => lessThanOrEqualToBigInt,
  lessThanOrEqualToBigDecimal: () => lessThanOrEqualToBigDecimal,
  lessThanOrEqualTo: () => lessThanOrEqualTo8,
  lessThanDuration: () => lessThanDuration,
  lessThanDate: () => lessThanDate,
  lessThanBigInt: () => lessThanBigInt,
  lessThanBigDecimal: () => lessThanBigDecimal,
  lessThan: () => lessThan15,
  length: () => length5,
  keyof: () => keyof2,
  itemsCount: () => itemsCount,
  isSchema: () => isSchema,
  isPropertySignature: () => isPropertySignature,
  is: () => is,
  int: () => int,
  instanceOf: () => instanceOf3,
  includes: () => includes4,
  headOrElse: () => headOrElse,
  headNonEmpty: () => headNonEmpty3,
  head: () => head11,
  greaterThanOrEqualToDuration: () => greaterThanOrEqualToDuration,
  greaterThanOrEqualToDate: () => greaterThanOrEqualToDate,
  greaterThanOrEqualToBigInt: () => greaterThanOrEqualToBigInt,
  greaterThanOrEqualToBigDecimal: () => greaterThanOrEqualToBigDecimal,
  greaterThanOrEqualTo: () => greaterThanOrEqualTo8,
  greaterThanDuration: () => greaterThanDuration,
  greaterThanDate: () => greaterThanDate,
  greaterThanBigInt: () => greaterThanBigInt,
  greaterThanBigDecimal: () => greaterThanBigDecimal,
  greaterThan: () => greaterThan11,
  getNumberIndexedAccess: () => getNumberIndexedAccess2,
  getClassTag: () => getClassTag,
  fromKey: () => fromKey,
  fromBrand: () => fromBrand,
  format: () => format8,
  finite: () => finite,
  filterEffect: () => filterEffect2,
  filter: () => filter22,
  failureSchema: () => failureSchema,
  extend: () => extend4,
  exitSchema: () => exitSchema,
  equivalence: () => equivalence2,
  endsWith: () => endsWith2,
  encodedSchema: () => encodedSchema,
  encodedBoundSchema: () => encodedBoundSchema,
  encodeUnknownSync: () => encodeUnknownSync,
  encodeUnknownPromise: () => encodeUnknownPromise2,
  encodeUnknownOption: () => encodeUnknownOption,
  encodeUnknownEither: () => encodeUnknownEither2,
  encodeUnknown: () => encodeUnknown2,
  encodeSync: () => encodeSync,
  encodePromise: () => encodePromise2,
  encodeOption: () => encodeOption,
  encodeEither: () => encodeEither2,
  encode: () => encode5,
  element: () => element,
  deserializeSuccess: () => deserializeSuccess,
  deserializeFailure: () => deserializeFailure,
  deserializeExit: () => deserializeExit,
  deserialize: () => deserialize,
  decodeUnknownSync: () => decodeUnknownSync,
  decodeUnknownPromise: () => decodeUnknownPromise2,
  decodeUnknownOption: () => decodeUnknownOption,
  decodeUnknownEither: () => decodeUnknownEither2,
  decodeUnknown: () => decodeUnknown3,
  decodeSync: () => decodeSync,
  decodePromise: () => decodePromise2,
  decodeOption: () => decodeOption,
  decodeEither: () => decodeEither2,
  decode: () => decode6,
  declare: () => declare,
  compose: () => compose6,
  clampDuration: () => clampDuration,
  clampBigInt: () => clampBigInt,
  clampBigDecimal: () => clampBigDecimal,
  clamp: () => clamp9,
  capitalized: () => capitalized,
  brand: () => brand,
  betweenDuration: () => betweenDuration,
  betweenDate: () => betweenDate,
  betweenBigInt: () => betweenBigInt,
  betweenBigDecimal: () => betweenBigDecimal,
  between: () => between8,
  attachPropertySignature: () => attachPropertySignature,
  asserts: () => asserts,
  asWithResult: () => asWithResult,
  asSerializableWithResult: () => asSerializableWithResult,
  asSerializable: () => asSerializable,
  asSchema: () => asSchema,
  annotations: () => annotations2,
  Void: () => Void,
  ValidDateSchemaId: () => ValidDateSchemaId,
  ValidDateFromSelf: () => ValidDateFromSelf,
  UppercasedSchemaId: () => UppercasedSchemaId,
  Uppercased: () => Uppercased,
  Uppercase: () => Uppercase,
  Unknown: () => Unknown,
  UniqueSymbolFromSelf: () => UniqueSymbolFromSelf,
  Union: () => Union2,
  UndefinedOr: () => UndefinedOr,
  Undefined: () => Undefined,
  UncapitalizedSchemaId: () => UncapitalizedSchemaId,
  Uncapitalized: () => Uncapitalized,
  Uncapitalize: () => Uncapitalize,
  Uint8ArrayFromSelf: () => Uint8ArrayFromSelf,
  Uint8ArrayFromHex: () => Uint8ArrayFromHex,
  Uint8ArrayFromBase64Url: () => Uint8ArrayFromBase64Url,
  Uint8ArrayFromBase64: () => Uint8ArrayFromBase64,
  Uint8Array: () => Uint8Array$,
  Uint8: () => Uint8,
  UUIDSchemaId: () => UUIDSchemaId,
  UUID: () => UUID,
  URLFromSelf: () => URLFromSelf,
  URL: () => URL$,
  ULIDSchemaId: () => ULIDSchemaId,
  ULID: () => ULID,
  TypeId: () => TypeId37,
  Tuple: () => Tuple,
  TrimmedSchemaId: () => TrimmedSchemaId,
  Trimmed: () => Trimmed,
  Trim: () => Trim,
  ToPropertySignature: () => ToPropertySignature,
  TimeZoneOffsetFromSelf: () => TimeZoneOffsetFromSelf,
  TimeZoneOffset: () => TimeZoneOffset,
  TimeZoneNamedFromSelf: () => TimeZoneNamedFromSelf,
  TimeZoneNamed: () => TimeZoneNamed,
  TimeZoneFromSelf: () => TimeZoneFromSelf,
  TimeZone: () => TimeZone,
  TemplateLiteralParser: () => TemplateLiteralParser,
  TemplateLiteral: () => TemplateLiteral2,
  TaggedStruct: () => TaggedStruct,
  TaggedRequest: () => TaggedRequest,
  TaggedError: () => TaggedError3,
  TaggedClass: () => TaggedClass4,
  SymbolFromSelf: () => SymbolFromSelf,
  Symbol: () => Symbol$,
  Struct: () => Struct,
  StringFromUriComponent: () => StringFromUriComponent,
  StringFromHex: () => StringFromHex,
  StringFromBase64Url: () => StringFromBase64Url,
  StringFromBase64: () => StringFromBase64,
  String: () => String$,
  StartsWithSchemaId: () => StartsWithSchemaId,
  SortedSetFromSelf: () => SortedSetFromSelf,
  SortedSet: () => SortedSet,
  SetFromSelf: () => SetFromSelf,
  Set: () => set15,
  RefineSchemaId: () => RefineSchemaId,
  RedactedFromSelf: () => RedactedFromSelf,
  Redacted: () => Redacted,
  Record: () => Record,
  ReadonlySetFromSelf: () => ReadonlySetFromSelf,
  ReadonlySet: () => ReadonlySet,
  ReadonlyMapFromSelf: () => ReadonlyMapFromSelf,
  ReadonlyMapFromRecord: () => ReadonlyMapFromRecord,
  ReadonlyMap: () => ReadonlyMap,
  PropertySignatureTypeId: () => PropertySignatureTypeId,
  PropertySignatureTransformation: () => PropertySignatureTransformation2,
  PropertySignatureDeclaration: () => PropertySignatureDeclaration,
  PropertyKey: () => PropertyKey$,
  PositiveBigIntFromSelf: () => PositiveBigIntFromSelf,
  PositiveBigInt: () => PositiveBigInt,
  PositiveBigDecimalSchemaId: () => PositiveBigDecimalSchemaId,
  PositiveBigDecimalFromSelf: () => PositiveBigDecimalFromSelf,
  Positive: () => Positive,
  PatternSchemaId: () => PatternSchemaId,
  OptionFromUndefinedOr: () => OptionFromUndefinedOr,
  OptionFromSelf: () => OptionFromSelf,
  OptionFromNullishOr: () => OptionFromNullishOr,
  OptionFromNullOr: () => OptionFromNullOr,
  OptionFromNonEmptyTrimmedString: () => OptionFromNonEmptyTrimmedString,
  Option: () => Option,
  Object: () => Object$,
  NumberFromString: () => NumberFromString,
  Number: () => Number$,
  NullishOr: () => NullishOr,
  NullOr: () => NullOr,
  Null: () => Null,
  Not: () => Not,
  NonPositiveBigIntFromSelf: () => NonPositiveBigIntFromSelf,
  NonPositiveBigInt: () => NonPositiveBigInt,
  NonPositiveBigDecimalSchemaId: () => NonPositiveBigDecimalSchemaId,
  NonPositiveBigDecimalFromSelf: () => NonPositiveBigDecimalFromSelf,
  NonPositive: () => NonPositive,
  NonNegativeInt: () => NonNegativeInt,
  NonNegativeBigIntFromSelf: () => NonNegativeBigIntFromSelf,
  NonNegativeBigInt: () => NonNegativeBigInt,
  NonNegativeBigDecimalSchemaId: () => NonNegativeBigDecimalSchemaId,
  NonNegativeBigDecimalFromSelf: () => NonNegativeBigDecimalFromSelf,
  NonNegative: () => NonNegative,
  NonNaNSchemaId: () => NonNaNSchemaId2,
  NonNaN: () => NonNaN,
  NonEmptyTrimmedString: () => NonEmptyTrimmedString,
  NonEmptyString: () => NonEmptyString,
  NonEmptyChunkFromSelf: () => NonEmptyChunkFromSelf,
  NonEmptyChunk: () => NonEmptyChunk,
  NonEmptyArrayEnsure: () => NonEmptyArrayEnsure,
  NonEmptyArray: () => NonEmptyArray,
  Never: () => Never,
  NegativeBigIntFromSelf: () => NegativeBigIntFromSelf,
  NegativeBigInt: () => NegativeBigInt,
  NegativeBigDecimalSchemaId: () => NegativeBigDecimalSchemaId,
  NegativeBigDecimalFromSelf: () => NegativeBigDecimalFromSelf,
  Negative: () => Negative,
  MultipleOfSchemaId: () => MultipleOfSchemaId,
  MinLengthSchemaId: () => MinLengthSchemaId2,
  MinItemsSchemaId: () => MinItemsSchemaId2,
  MaxLengthSchemaId: () => MaxLengthSchemaId2,
  MaxItemsSchemaId: () => MaxItemsSchemaId2,
  MapFromSelf: () => MapFromSelf,
  MapFromRecord: () => MapFromRecord,
  Map: () => map41,
  LowercasedSchemaId: () => LowercasedSchemaId,
  Lowercased: () => Lowercased,
  Lowercase: () => Lowercase,
  Literal: () => Literal2,
  ListFromSelf: () => ListFromSelf,
  List: () => List,
  LessThanSchemaId: () => LessThanSchemaId2,
  LessThanOrEqualToSchemaId: () => LessThanOrEqualToSchemaId2,
  LessThanOrEqualToDurationSchemaId: () => LessThanOrEqualToDurationSchemaId,
  LessThanOrEqualToDateSchemaId: () => LessThanOrEqualToDateSchemaId,
  LessThanOrEqualToBigIntSchemaId: () => LessThanOrEqualToBigIntSchemaId2,
  LessThanOrEqualToBigDecimalSchemaId: () => LessThanOrEqualToBigDecimalSchemaId,
  LessThanDurationSchemaId: () => LessThanDurationSchemaId,
  LessThanDateSchemaId: () => LessThanDateSchemaId,
  LessThanBigIntSchemaId: () => LessThanBigIntSchemaId2,
  LessThanBigDecimalSchemaId: () => LessThanBigDecimalSchemaId,
  LengthSchemaId: () => LengthSchemaId2,
  JsonNumberSchemaId: () => JsonNumberSchemaId2,
  JsonNumber: () => JsonNumber,
  ItemsCountSchemaId: () => ItemsCountSchemaId2,
  IntSchemaId: () => IntSchemaId2,
  Int: () => Int,
  InstanceOfSchemaId: () => InstanceOfSchemaId,
  IncludesSchemaId: () => IncludesSchemaId,
  HashSetFromSelf: () => HashSetFromSelf,
  HashSet: () => HashSet,
  HashMapFromSelf: () => HashMapFromSelf,
  HashMap: () => HashMap,
  GreaterThanSchemaId: () => GreaterThanSchemaId2,
  GreaterThanOrEqualToSchemaId: () => GreaterThanOrEqualToSchemaId2,
  GreaterThanOrEqualToDurationSchemaId: () => GreaterThanOrEqualToDurationSchemaId,
  GreaterThanOrEqualToDateSchemaId: () => GreaterThanOrEqualToDateSchemaId,
  GreaterThanOrEqualToBigIntSchemaId: () => GreaterThanOrEqualToBigIntSchemaId2,
  GreaterThanOrEqualToBigDecimalSchemaId: () => GreaterThanOrEqualToBigDecimalSchemaId,
  GreaterThanDurationSchemaId: () => GreaterThanDurationSchemaId,
  GreaterThanDateSchemaId: () => GreaterThanDateSchemaId,
  GreaterThanBigIntSchemaId: () => GreaterThanBigIntSchemaId,
  GreaterThanBigDecimalSchemaId: () => GreaterThanBigDecimalSchemaId,
  FromPropertySignature: () => FromPropertySignature,
  FiniteSchemaId: () => FiniteSchemaId2,
  Finite: () => Finite,
  FiberIdFromSelf: () => FiberIdFromSelf,
  FiberId: () => FiberId,
  ExitFromSelf: () => ExitFromSelf,
  Exit: () => Exit,
  Enums: () => Enums2,
  EndsWithSchemaId: () => EndsWithSchemaId,
  EitherFromUnion: () => EitherFromUnion,
  EitherFromSelf: () => EitherFromSelf,
  Either: () => Either3,
  DurationFromSelf: () => DurationFromSelf,
  DurationFromNanos: () => DurationFromNanos,
  DurationFromMillis: () => DurationFromMillis,
  Duration: () => Duration,
  Defect: () => Defect,
  DateTimeZonedFromSelf: () => DateTimeZonedFromSelf,
  DateTimeZoned: () => DateTimeZoned,
  DateTimeUtcFromSelf: () => DateTimeUtcFromSelf,
  DateTimeUtcFromNumber: () => DateTimeUtcFromNumber,
  DateTimeUtcFromDate: () => DateTimeUtcFromDate,
  DateTimeUtc: () => DateTimeUtc,
  DateFromString: () => DateFromString,
  DateFromSelfSchemaId: () => DateFromSelfSchemaId2,
  DateFromSelf: () => DateFromSelf,
  DateFromNumber: () => DateFromNumber,
  Date: () => Date$,
  DataFromSelf: () => DataFromSelf,
  Data: () => Data,
  Config: () => Config2,
  Class: () => Class6,
  ChunkFromSelf: () => ChunkFromSelf,
  Chunk: () => Chunk,
  Char: () => Char,
  CauseFromSelf: () => CauseFromSelf,
  Cause: () => Cause,
  CapitalizedSchemaId: () => CapitalizedSchemaId,
  Capitalized: () => Capitalized,
  Capitalize: () => Capitalize,
  BrandSchemaId: () => BrandSchemaId,
  BooleanFromUnknown: () => BooleanFromUnknown,
  BooleanFromString: () => BooleanFromString,
  Boolean: () => Boolean$,
  BigIntFromSelf: () => BigIntFromSelf,
  BigIntFromNumber: () => BigIntFromNumber,
  BigInt: () => BigInt$,
  BigDecimalFromSelf: () => BigDecimalFromSelf,
  BigDecimalFromNumber: () => BigDecimalFromNumber,
  BigDecimal: () => BigDecimal,
  BetweenSchemaId: () => BetweenSchemaId2,
  BetweenDurationSchemaId: () => BetweenDurationSchemaId,
  BetweenDateSchemaId: () => BetweenDateSchemaId,
  BetweenBigIntSchemaId: () => BetweenBigIntSchemaId,
  BetweenBigDecimalSchemaId: () => BetweenBigDecimalSchemaId,
  ArrayFormatterIssue: () => ArrayFormatterIssue,
  ArrayEnsure: () => ArrayEnsure,
  Array: () => Array$,
  Any: () => Any
});
function make112(ast) {
  return class SchemaClass {
    [TypeId37] = variance11;
    static ast = ast;
    static annotations(annotations2) {
      return make112(mergeSchemaAnnotations(this.ast, annotations2));
    }
    static pipe() {
      return pipeArguments(this, arguments);
    }
    static toString() {
      return String(ast);
    }
    static Type;
    static Encoded;
    static Context;
    static [TypeId37] = variance11;
  };
}
function asSchema(schema) {
  return schema;
}
function getDefaultLiteralAST(literals) {
  return isMembers(literals) ? Union.make(mapMembers(literals, (literal3) => new Literal(literal3))) : new Literal(literals[0]);
}
function makeLiteralClass(literals, ast = getDefaultLiteralAST(literals)) {
  return class LiteralClass extends make112(ast) {
    static annotations(annotations2) {
      return makeLiteralClass(this.literals, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static literals = [...literals];
  };
}
function Literal2(...literals) {
  return isNonEmptyReadonlyArray(literals) ? makeLiteralClass(literals) : Never;
}
function getTemplateLiteralParserCoercedElement(encoded, schema) {
  const ast = encoded.ast;
  switch (ast._tag) {
    case "Literal": {
      const literal3 = ast.literal;
      if (!isString2(literal3)) {
        const s = String(literal3);
        return transform3(Literal2(s), schema, {
          strict: true,
          decode: () => literal3,
          encode: () => s
        });
      }
      break;
    }
    case "NumberKeyword":
      return compose6(NumberFromString, schema);
    case "Union": {
      const members = [];
      let hasCoercions = false;
      for (const member of ast.types) {
        const schema2 = make112(member);
        const encoded2 = encodedSchema(schema2);
        const coerced = getTemplateLiteralParserCoercedElement(encoded2, schema2);
        if (coerced) {
          hasCoercions = true;
        }
        members.push(coerced ?? schema2);
      }
      return hasCoercions ? compose6(Union2(...members), schema) : schema;
    }
  }
}
function makeDeclareClass(typeParameters, ast) {
  return class DeclareClass extends make112(ast) {
    static annotations(annotations2) {
      return makeDeclareClass(this.typeParameters, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static typeParameters = [...typeParameters];
  };
}
function makeUnionClass(members, ast = getDefaultUnionAST(members)) {
  return class UnionClass extends make112(ast) {
    static annotations(annotations2) {
      return makeUnionClass(this.members, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static members = [...members];
  };
}
function Union2(...members) {
  return isMembers(members) ? makeUnionClass(members) : isNonEmptyReadonlyArray(members) ? members[0] : Never;
}
function makeTupleTypeClass(elements, rest, ast = getDefaultTupleTypeAST(elements, rest)) {
  return class TupleTypeClass extends make112(ast) {
    static annotations(annotations2) {
      return makeTupleTypeClass(this.elements, this.rest, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static elements = [...elements];
    static rest = [...rest];
  };
}
function Tuple(...args2) {
  return Array.isArray(args2[0]) ? makeTupleTypeClass(args2[0], args2.slice(1)) : makeTupleTypeClass(args2, []);
}
function makeArrayClass(value9, ast) {
  return class ArrayClass extends makeTupleTypeClass([], [value9], ast) {
    static annotations(annotations2) {
      return makeArrayClass(this.value, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static value = value9;
  };
}
function makeNonEmptyArrayClass(value9, ast) {
  return class NonEmptyArrayClass extends makeTupleTypeClass([value9], [value9], ast) {
    static annotations(annotations2) {
      return makeNonEmptyArrayClass(this.value, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static value = value9;
  };
}
function ArrayEnsure(value9) {
  return transform3(Union2(value9, Array$(value9)), Array$(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => ensure(i2),
    encode: (a) => a.length === 1 ? a[0] : a
  });
}
function NonEmptyArrayEnsure(value9) {
  return transform3(Union2(value9, NonEmptyArray(value9)), NonEmptyArray(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => isNonEmptyReadonlyArray(i2) ? i2 : of2(i2),
    encode: (a) => a.length === 1 ? a[0] : a
  });
}

class PropertySignatureTransformation2 {
  from;
  to;
  decode;
  encode;
  _tag = "PropertySignatureTransformation";
  constructor(from, to, decode7, encode6) {
    this.from = from;
    this.to = to;
    this.decode = decode7;
    this.encode = encode6;
  }
  toString() {
    return `PropertySignature<${formatPropertySignatureToken(this.to.isOptional)}, ${this.to.type}, ${formatPropertyKey2(this.from.fromKey)}, ${formatPropertySignatureToken(this.from.isOptional)}, ${this.from.type}>`;
  }
}
function makeTypeLiteralClass(fields, records, ast = getDefaultTypeLiteralAST(fields, records)) {
  return class TypeLiteralClass extends make112(ast) {
    static annotations(annotations2) {
      return makeTypeLiteralClass(this.fields, this.records, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static fields = {
      ...fields
    };
    static records = [...records];
    static make = (props, options) => {
      const propsWithDefaults = lazilyMergeDefaults(fields, {
        ...props
      });
      return getDisableValidationMakeOption(options) ? propsWithDefaults : validateSync(this)(propsWithDefaults);
    };
    static pick(...keys10) {
      return Struct(pick4(fields, ...keys10));
    }
    static omit(...keys10) {
      return Struct(omit4(fields, ...keys10));
    }
  };
}
function Struct(fields, ...records) {
  return makeTypeLiteralClass(fields, records);
}
function makeRecordClass(key, value9, ast) {
  return class RecordClass extends makeTypeLiteralClass({}, [{
    key,
    value: value9
  }], ast) {
    static annotations(annotations2) {
      return makeRecordClass(key, value9, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static key = key;
    static value = value9;
  };
}
function makeBrandClass(from, ast) {
  return class BrandClass extends make112(ast) {
    static annotations(annotations2) {
      return makeBrandClass(this.from, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static make = (a, options) => {
      return getDisableValidationMakeOption(options) ? a : validateSync(this)(a);
    };
    static from = from;
  };
}
function makeRefineClass(from, filter22, ast) {
  return class RefineClass extends make112(ast) {
    static annotations(annotations2) {
      return makeRefineClass(this.from, this.filter, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static [RefineSchemaId] = from;
    static from = from;
    static filter = filter22;
    static make = (a, options) => {
      return getDisableValidationMakeOption(options) ? a : validateSync(this)(a);
    };
  };
}
function filter22(predicate, annotations2) {
  return (self) => {
    function filter23(input, options, ast2) {
      return toFilterParseIssue(predicate(input, options, ast2), ast2, input);
    }
    const ast = new Refinement(self.ast, filter23, toASTAnnotations(annotations2));
    return makeRefineClass(self, filter23, ast);
  };
}
function makeTransformationClass(from, to, ast) {
  return class TransformationClass extends make112(ast) {
    static annotations(annotations2) {
      return makeTransformationClass(this.from, this.to, mergeSchemaAnnotations(this.ast, annotations2));
    }
    static from = from;
    static to = to;
  };
}
function transformLiteral(from, to) {
  return transform3(Literal2(from), Literal2(to), {
    strict: true,
    decode: () => to,
    encode: () => from
  });
}
function transformLiterals(...pairs) {
  return Union2(...pairs.map(([from, to]) => transformLiteral(from, to)));
}
function parseNumber(self) {
  return transformOrFail(self, Number$, {
    strict: false,
    decode: (i2, _, ast) => fromOption9(parse2(i2), () => new Type2(ast, i2, `Unable to decode ${JSON.stringify(i2)} into a number`)),
    encode: (a) => succeed24(String(a))
  });
}
function Redacted(value9) {
  return transform3(value9, RedactedFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => make107(i2),
    encode: (a) => value8(a)
  });
}
function head11(self) {
  return transform3(self, OptionFromSelf(getNumberIndexedAccess2(typeSchema(self))), {
    strict: false,
    decode: (i2) => head2(i2),
    encode: (a) => match2(a, {
      onNone: () => [],
      onSome: of2
    })
  });
}
function headNonEmpty3(self) {
  return transform3(self, getNumberIndexedAccess2(typeSchema(self)), {
    strict: false,
    decode: (i2) => headNonEmpty(i2),
    encode: (a) => of2(a)
  });
}
function Option(value9) {
  const value_ = asSchema(value9);
  const out = transform3(optionEncoded(value_), OptionFromSelf(typeSchema(value_)), {
    strict: true,
    decode: (i2) => optionDecode(i2),
    encode: (a) => match2(a, {
      onNone: () => makeNoneEncoded,
      onSome: makeSomeEncoded
    })
  });
  return out;
}
function OptionFromNullOr(value9) {
  return transform3(NullOr(value9), OptionFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => fromNullable2(i2),
    encode: (a) => getOrNull2(a)
  });
}
function OptionFromNullishOr(value9, onNoneEncoding) {
  return transform3(NullishOr(value9), OptionFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => fromNullable2(i2),
    encode: onNoneEncoding === null ? (a) => getOrNull2(a) : (a) => getOrUndefined2(a)
  });
}
function OptionFromUndefinedOr(value9) {
  return transform3(UndefinedOr(value9), OptionFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => fromNullable2(i2),
    encode: (a) => getOrUndefined2(a)
  });
}
function ReadonlyMap({
  key,
  value: value9
}) {
  return transform3(Array$(Tuple(key, value9)), ReadonlyMapFromSelf({
    key: typeSchema(asSchema(key)),
    value: typeSchema(asSchema(value9))
  }), {
    strict: true,
    decode: (i2) => new Map(i2),
    encode: (a) => Array.from(a.entries())
  });
}
function map41({
  key,
  value: value9
}) {
  return transform3(Array$(Tuple(key, value9)), MapFromSelf({
    key: typeSchema(asSchema(key)),
    value: typeSchema(asSchema(value9))
  }), {
    strict: true,
    decode: (i2) => new Map(i2),
    encode: (a) => Array.from(a.entries())
  });
}
function ReadonlySet(value9) {
  return transform3(Array$(value9), ReadonlySetFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => new Set(i2),
    encode: (a) => Array.from(a)
  });
}
function set15(value9) {
  return transform3(Array$(value9), SetFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => new Set(i2),
    encode: (a) => Array.from(a)
  });
}
function Chunk(value9) {
  return transform3(Array$(value9), ChunkFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => i2.length === 0 ? empty7() : fromIterable3(i2),
    encode: (a) => toReadonlyArray(a)
  });
}
function NonEmptyChunk(value9) {
  return transform3(NonEmptyArray(value9), NonEmptyChunkFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => unsafeFromNonEmptyArray(i2),
    encode: (a) => toReadonlyArray(a)
  });
}
function getDisableValidationMakeOption(options) {
  return isBoolean2(options) ? options : options?.disableValidation ?? false;
}
function causeDecode(cause3) {
  switch (cause3._tag) {
    case "Empty":
      return empty35;
    case "Fail":
      return fail8(cause3.error);
    case "Die":
      return die6(cause3.defect);
    case "Interrupt":
      return interrupt6(fiberIdDecode(cause3.fiberId));
    case "Sequential":
      return sequential4(causeDecode(cause3.left), causeDecode(cause3.right));
    case "Parallel":
      return parallel4(causeDecode(cause3.left), causeDecode(cause3.right));
  }
}
function causeEncode(cause3) {
  switch (cause3._tag) {
    case "Empty":
      return {
        _tag: "Empty"
      };
    case "Fail":
      return {
        _tag: "Fail",
        error: cause3.error
      };
    case "Die":
      return {
        _tag: "Die",
        defect: cause3.defect
      };
    case "Interrupt":
      return {
        _tag: "Interrupt",
        fiberId: cause3.fiberId
      };
    case "Sequential":
      return {
        _tag: "Sequential",
        left: causeEncode(cause3.left),
        right: causeEncode(cause3.right)
      };
    case "Parallel":
      return {
        _tag: "Parallel",
        left: causeEncode(cause3.left),
        right: causeEncode(cause3.right)
      };
  }
}
function HashSet(value9) {
  return transform3(Array$(value9), HashSetFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => fromIterable6(i2),
    encode: (a) => Array.from(a)
  });
}
function List(value9) {
  return transform3(Array$(value9), ListFromSelf(typeSchema(asSchema(value9))), {
    strict: true,
    decode: (i2) => fromIterable8(i2),
    encode: (a) => Array.from(a)
  });
}
function SortedSet(value9, ordA) {
  const to = typeSchema(asSchema(value9));
  return transform3(Array$(value9), SortedSetFromSelf(to, ordA, ordA), {
    strict: true,
    decode: (i2) => fromIterable14(i2, ordA),
    encode: (a) => Array.from(values9(a))
  });
}
var TypeId37, variance11, makeStandardResult = (exit4) => isSuccess(exit4) ? exit4.value : makeStandardFailureResult(pretty3(exit4.cause)), makeStandardFailureResult = (message) => ({
  issues: [{
    message
  }]
}), makeStandardFailureFromParseIssue = (issue) => map26(ArrayFormatter.formatIssue(issue), (issues) => ({
  issues: issues.map((issue2) => ({
    path: issue2.path,
    message: issue2.message
  }))
})), standardSchemaV1 = (schema, overrideOptions) => {
  const decodeUnknown3 = decodeUnknown2(schema, {
    errors: "all"
  });
  return class StandardSchemaV1Class extends make112(schema.ast) {
    static "~standard" = {
      version: 1,
      vendor: "effect",
      validate(value9) {
        const scheduler2 = new SyncScheduler;
        const fiber = runFork2(matchEffect4(decodeUnknown3(value9, overrideOptions), {
          onFailure: makeStandardFailureFromParseIssue,
          onSuccess: (value10) => succeed13({
            value: value10
          })
        }), {
          scheduler: scheduler2
        });
        scheduler2.flush();
        const exit4 = fiber.unsafePoll();
        if (exit4) {
          return makeStandardResult(exit4);
        }
        return new Promise((resolve) => {
          fiber.addObserver((exit5) => {
            resolve(makeStandardResult(exit5));
          });
        });
      }
    };
  };
}, builtInAnnotations, toASTAnnotations = (annotations2) => {
  if (!annotations2) {
    return {};
  }
  const out = {
    ...annotations2
  };
  for (const key in builtInAnnotations) {
    if (key in annotations2) {
      const id3 = builtInAnnotations[key];
      out[id3] = annotations2[key];
      delete out[key];
    }
  }
  return out;
}, mergeSchemaAnnotations = (ast, annotations2) => annotations(ast, toASTAnnotations(annotations2)), format8 = (schema) => String(schema.ast), encodedSchema = (schema) => make112(encodedAST(schema.ast)), encodedBoundSchema = (schema) => make112(encodedBoundAST(schema.ast)), typeSchema = (schema) => make112(typeAST(schema.ast)), encodeUnknown2 = (schema, options) => {
  const encodeUnknown3 = encodeUnknown(schema, options);
  return (u, overrideOptions) => mapError12(encodeUnknown3(u, overrideOptions), parseError);
}, encodeUnknownEither2 = (schema, options) => {
  const encodeUnknownEither3 = encodeUnknownEither(schema, options);
  return (u, overrideOptions) => mapLeft(encodeUnknownEither3(u, overrideOptions), parseError);
}, encodeUnknownPromise2 = (schema, options) => {
  const parser = encodeUnknown2(schema, options);
  return (u, overrideOptions) => runPromise2(parser(u, overrideOptions));
}, encode5, encodeEither2, encodePromise2, decodeUnknown3 = (schema, options) => {
  const decodeUnknown4 = decodeUnknown2(schema, options);
  return (u, overrideOptions) => mapError12(decodeUnknown4(u, overrideOptions), parseError);
}, decodeUnknownEither2 = (schema, options) => {
  const decodeUnknownEither3 = decodeUnknownEither(schema, options);
  return (u, overrideOptions) => mapLeft(decodeUnknownEither3(u, overrideOptions), parseError);
}, decodeUnknownPromise2 = (schema, options) => {
  const parser = decodeUnknown3(schema, options);
  return (u, overrideOptions) => runPromise2(parser(u, overrideOptions));
}, decode6, decodeEither2, decodePromise2, validate6 = (schema, options) => {
  const validate7 = validate5(schema, options);
  return (u, overrideOptions) => mapError12(validate7(u, overrideOptions), parseError);
}, validateEither2 = (schema, options) => {
  const validateEither3 = validateEither(schema, options);
  return (u, overrideOptions) => mapLeft(validateEither3(u, overrideOptions), parseError);
}, validatePromise2 = (schema, options) => {
  const parser = validate6(schema, options);
  return (u, overrideOptions) => runPromise2(parser(u, overrideOptions));
}, isSchema = (u) => hasProperty(u, TypeId37) && isObject2(u[TypeId37]), pickLiteral = (...literals) => (_schema) => Literal2(...literals), UniqueSymbolFromSelf = (symbol6) => make112(new UniqueSymbol(symbol6)), getDefaultEnumsAST = (enums) => new Enums(Object.keys(enums).filter((key) => typeof enums[enums[key]] !== "number").map((key) => [key, enums[key]])), makeEnumsClass = (enums, ast = getDefaultEnumsAST(enums)) => class EnumsClass extends make112(ast) {
  static annotations(annotations2) {
    return makeEnumsClass(this.enums, mergeSchemaAnnotations(this.ast, annotations2));
  }
  static enums = {
    ...enums
  };
}, Enums2 = (enums) => makeEnumsClass(enums), TemplateLiteral2 = (...[head11, ...tail5]) => {
  const spans = [];
  let h2 = "";
  let ts = tail5;
  if (isSchema(head11)) {
    if (isLiteral(head11.ast)) {
      h2 = String(head11.ast.literal);
    } else {
      ts = [head11, ...ts];
    }
  } else {
    h2 = String(head11);
  }
  for (let i2 = 0;i2 < ts.length; i2++) {
    const item = ts[i2];
    if (isSchema(item)) {
      if (i2 < ts.length - 1) {
        const next4 = ts[i2 + 1];
        if (isSchema(next4)) {
          if (isLiteral(next4.ast)) {
            spans.push(new TemplateLiteralSpan(item.ast, String(next4.ast.literal)));
            i2++;
            continue;
          }
        } else {
          spans.push(new TemplateLiteralSpan(item.ast, String(next4)));
          i2++;
          continue;
        }
      }
      spans.push(new TemplateLiteralSpan(item.ast, ""));
    } else {
      spans.push(new TemplateLiteralSpan(new Literal(item), ""));
    }
  }
  if (isNonEmptyArray2(spans)) {
    return make112(new TemplateLiteral(h2, spans));
  } else {
    return make112(new TemplateLiteral("", [new TemplateLiteralSpan(new Literal(h2), "")]));
  }
}, TemplateLiteralParser = (...params) => {
  const encodedSchemas = [];
  const elements = [];
  const schemas = [];
  let coerced = false;
  for (let i2 = 0;i2 < params.length; i2++) {
    const param = params[i2];
    const schema = isSchema(param) ? param : Literal2(param);
    schemas.push(schema);
    const encoded = encodedSchema(schema);
    encodedSchemas.push(encoded);
    const element = getTemplateLiteralParserCoercedElement(encoded, schema);
    if (element) {
      elements.push(element);
      coerced = true;
    } else {
      elements.push(schema);
    }
  }
  const from = TemplateLiteral2(...encodedSchemas);
  const re = getTemplateLiteralCapturingRegExp(from.ast);
  let to = Tuple(...elements);
  if (coerced) {
    to = to.annotations({
      [AutoTitleAnnotationId]: format8(Tuple(...schemas))
    });
  }
  return class TemplateLiteralParserClass extends transformOrFail(from, to, {
    strict: false,
    decode: (i2, _, ast) => {
      const match40 = re.exec(i2);
      return match40 ? succeed24(match40.slice(1, params.length + 1)) : fail23(new Type2(ast, i2, `${re.source}: no match for ${JSON.stringify(i2)}`));
    },
    encode: (tuple7) => succeed24(tuple7.join(""))
  }) {
    static params = params.slice();
  };
}, declareConstructor = (typeParameters, options, annotations2) => makeDeclareClass(typeParameters, new Declaration(typeParameters.map((tp) => tp.ast), (...typeParameters2) => options.decode(...typeParameters2.map(make112)), (...typeParameters2) => options.encode(...typeParameters2.map(make112)), toASTAnnotations(annotations2))), declarePrimitive = (is4, annotations2) => {
  const decodeUnknown4 = () => (input, _, ast) => is4(input) ? succeed24(input) : fail23(new Type2(ast, input));
  const encodeUnknown3 = decodeUnknown4;
  return makeDeclareClass([], new Declaration([], decodeUnknown4, encodeUnknown3, toASTAnnotations(annotations2)));
}, declare = function() {
  if (Array.isArray(arguments[0])) {
    const typeParameters = arguments[0];
    const options = arguments[1];
    const annotations3 = arguments[2];
    return declareConstructor(typeParameters, options, annotations3);
  }
  const is4 = arguments[0];
  const annotations2 = arguments[1];
  return declarePrimitive(is4, annotations2);
}, BrandSchemaId, fromBrand = (constructor, annotations2) => (self) => {
  const out = makeBrandClass(self, new Refinement(self.ast, function predicate(a, _, ast) {
    const either13 = constructor.either(a);
    return isLeft2(either13) ? some3(new Type2(ast, a, either13.left.map((v) => v.message).join(", "))) : none2();
  }, toASTAnnotations({
    schemaId: BrandSchemaId,
    [BrandSchemaId]: {
      constructor
    },
    ...annotations2
  })));
  return out;
}, InstanceOfSchemaId, instanceOf3 = (constructor, annotations2) => declare((u) => u instanceof constructor, {
  title: constructor.name,
  description: `an instance of ${constructor.name}`,
  pretty: () => String,
  schemaId: InstanceOfSchemaId,
  [InstanceOfSchemaId]: {
    constructor
  },
  ...annotations2
}), Undefined, Void, Null, Never, Unknown, Any, BigIntFromSelf, SymbolFromSelf, String$, Number$, Boolean$, Object$, getDefaultUnionAST = (members) => Union.make(members.map((m) => m.ast)), NullOr = (self) => Union2(self, Null), UndefinedOr = (self) => Union2(self, Undefined), NullishOr = (self) => Union2(self, Null, Undefined), keyof2 = (self) => make112(keyof(self.ast)), element = (self) => new ElementImpl(new OptionalType(self.ast, false), self), optionalElement = (self) => new ElementImpl(new OptionalType(self.ast, true), self), ElementImpl, getDefaultTupleTypeAST = (elements, rest) => new TupleType(elements.map((el) => isSchema(el) ? new OptionalType(el.ast, false) : el.ast), rest.map((el) => isSchema(el) ? new Type(el.ast) : el.ast), true), Array$ = (value9) => makeArrayClass(value9), NonEmptyArray = (value9) => makeNonEmptyArrayClass(value9), formatPropertySignatureToken = (isOptional) => isOptional ? '"?:"' : '":"', PropertySignatureDeclaration, FromPropertySignature, ToPropertySignature, formatPropertyKey2 = (p) => {
  if (p === undefined) {
    return "never";
  }
  if (isString2(p)) {
    return JSON.stringify(p);
  }
  return String(p);
}, mergeSignatureAnnotations = (ast, annotations2) => {
  switch (ast._tag) {
    case "PropertySignatureDeclaration": {
      return new PropertySignatureDeclaration(ast.type, ast.isOptional, ast.isReadonly, {
        ...ast.annotations,
        ...annotations2
      }, ast.defaultValue);
    }
    case "PropertySignatureTransformation": {
      return new PropertySignatureTransformation2(ast.from, new ToPropertySignature(ast.to.type, ast.to.isOptional, ast.to.isReadonly, {
        ...ast.to.annotations,
        ...annotations2
      }, ast.to.defaultValue), ast.decode, ast.encode);
    }
  }
}, PropertySignatureTypeId, isPropertySignature = (u) => hasProperty(u, PropertySignatureTypeId), PropertySignatureImpl, makePropertySignature = (ast) => new PropertySignatureImpl(ast), PropertySignatureWithFromImpl, propertySignature = (self) => new PropertySignatureWithFromImpl(new PropertySignatureDeclaration(self.ast, false, true, {}, undefined), self), withConstructorDefault, applyDefaultValue = (o, defaultValue) => match2(o, {
  onNone: () => some3(defaultValue()),
  onSome: (value9) => some3(value9 === undefined ? defaultValue() : value9)
}), pruneUndefined3 = (ast) => pruneUndefined(ast, pruneUndefined3, (ast2) => {
  const pruned = pruneUndefined3(ast2.to);
  if (pruned) {
    return new Transformation(ast2.from, pruned, ast2.transformation);
  }
}), withDecodingDefault, withDefaults, fromKey, optionalToRequired = (from, to, options) => makePropertySignature(new PropertySignatureTransformation2(new FromPropertySignature(from.ast, true, true, {}, undefined), new ToPropertySignature(to.ast, false, true, {}, undefined), (o) => some3(options.decode(o)), flatMap2(options.encode))), requiredToOptional = (from, to, options) => makePropertySignature(new PropertySignatureTransformation2(new FromPropertySignature(from.ast, false, true, {}, undefined), new ToPropertySignature(to.ast, true, true, {}, undefined), flatMap2(options.decode), (o) => some3(options.encode(o)))), optionalToOptional = (from, to, options) => makePropertySignature(new PropertySignatureTransformation2(new FromPropertySignature(from.ast, true, true, {}, undefined), new ToPropertySignature(to.ast, true, true, {}, undefined), options.decode, options.encode)), optionalPropertySignatureAST = (self, options) => {
  const isExact = options?.exact;
  const defaultValue = options?.default;
  const isNullable2 = options?.nullable;
  const asOption = options?.as == "Option";
  const asOptionEncode = options?.onNoneEncoding ? orElse2(options.onNoneEncoding) : identity;
  if (isExact) {
    if (defaultValue) {
      if (isNullable2) {
        return withConstructorDefault(optionalToRequired(NullOr(self), typeSchema(self), {
          decode: match2({
            onNone: defaultValue,
            onSome: (a) => a === null ? defaultValue() : a
          }),
          encode: some3
        }), defaultValue).ast;
      } else {
        return withConstructorDefault(optionalToRequired(self, typeSchema(self), {
          decode: match2({
            onNone: defaultValue,
            onSome: identity
          }),
          encode: some3
        }), defaultValue).ast;
      }
    } else if (asOption) {
      if (isNullable2) {
        return optionalToRequired(NullOr(self), OptionFromSelf(typeSchema(self)), {
          decode: filter(isNotNull),
          encode: asOptionEncode
        }).ast;
      } else {
        return optionalToRequired(self, OptionFromSelf(typeSchema(self)), {
          decode: identity,
          encode: identity
        }).ast;
      }
    } else {
      if (isNullable2) {
        return optionalToOptional(NullOr(self), typeSchema(self), {
          decode: filter(isNotNull),
          encode: identity
        }).ast;
      } else {
        return new PropertySignatureDeclaration(self.ast, true, true, {}, undefined);
      }
    }
  } else {
    if (defaultValue) {
      if (isNullable2) {
        return withConstructorDefault(optionalToRequired(NullishOr(self), typeSchema(self), {
          decode: match2({
            onNone: defaultValue,
            onSome: (a) => a == null ? defaultValue() : a
          }),
          encode: some3
        }), defaultValue).ast;
      } else {
        return withConstructorDefault(optionalToRequired(UndefinedOr(self), typeSchema(self), {
          decode: match2({
            onNone: defaultValue,
            onSome: (a) => a === undefined ? defaultValue() : a
          }),
          encode: some3
        }), defaultValue).ast;
      }
    } else if (asOption) {
      if (isNullable2) {
        return optionalToRequired(NullishOr(self), OptionFromSelf(typeSchema(self)), {
          decode: filter((a) => a != null),
          encode: asOptionEncode
        }).ast;
      } else {
        return optionalToRequired(UndefinedOr(self), OptionFromSelf(typeSchema(self)), {
          decode: filter(isNotUndefined),
          encode: asOptionEncode
        }).ast;
      }
    } else {
      if (isNullable2) {
        return optionalToOptional(NullishOr(self), UndefinedOr(typeSchema(self)), {
          decode: filter(isNotNull),
          encode: identity
        }).ast;
      } else {
        return new PropertySignatureDeclaration(UndefinedOr(self).ast, true, true, {}, undefined);
      }
    }
  }
}, optional = (self) => {
  const ast = self.ast === undefinedKeyword || self.ast === neverKeyword ? undefinedKeyword : UndefinedOr(self).ast;
  return new PropertySignatureWithFromImpl(new PropertySignatureDeclaration(ast, true, true, {}, undefined), self);
}, optionalWith, preserveMissingMessageAnnotation, getDefaultTypeLiteralAST = (fields, records) => {
  const ownKeys2 = ownKeys(fields);
  const pss = [];
  if (ownKeys2.length > 0) {
    const from = [];
    const to = [];
    const transformations = [];
    for (let i2 = 0;i2 < ownKeys2.length; i2++) {
      const key = ownKeys2[i2];
      const field = fields[key];
      if (isPropertySignature(field)) {
        const ast = field.ast;
        switch (ast._tag) {
          case "PropertySignatureDeclaration": {
            const type3 = ast.type;
            const isOptional = ast.isOptional;
            const toAnnotations = ast.annotations;
            from.push(new PropertySignature(key, type3, isOptional, true, preserveMissingMessageAnnotation(ast)));
            to.push(new PropertySignature(key, typeAST(type3), isOptional, true, toAnnotations));
            pss.push(new PropertySignature(key, type3, isOptional, true, toAnnotations));
            break;
          }
          case "PropertySignatureTransformation": {
            const fromKey2 = ast.from.fromKey ?? key;
            from.push(new PropertySignature(fromKey2, ast.from.type, ast.from.isOptional, true, ast.from.annotations));
            to.push(new PropertySignature(key, ast.to.type, ast.to.isOptional, true, ast.to.annotations));
            transformations.push(new PropertySignatureTransformation(fromKey2, key, ast.decode, ast.encode));
            break;
          }
        }
      } else {
        from.push(new PropertySignature(key, field.ast, false, true));
        to.push(new PropertySignature(key, typeAST(field.ast), false, true));
        pss.push(new PropertySignature(key, field.ast, false, true));
      }
    }
    if (isNonEmptyReadonlyArray(transformations)) {
      const issFrom = [];
      const issTo = [];
      for (const r of records) {
        const {
          indexSignatures,
          propertySignatures
        } = record2(r.key.ast, r.value.ast);
        propertySignatures.forEach((ps) => {
          from.push(ps);
          to.push(new PropertySignature(ps.name, typeAST(ps.type), ps.isOptional, ps.isReadonly, ps.annotations));
        });
        indexSignatures.forEach((is4) => {
          issFrom.push(is4);
          issTo.push(new IndexSignature(is4.parameter, typeAST(is4.type), is4.isReadonly));
        });
      }
      return new Transformation(new TypeLiteral(from, issFrom, {
        [AutoTitleAnnotationId]: "Struct (Encoded side)"
      }), new TypeLiteral(to, issTo, {
        [AutoTitleAnnotationId]: "Struct (Type side)"
      }), new TypeLiteralTransformation(transformations));
    }
  }
  const iss = [];
  for (const r of records) {
    const {
      indexSignatures,
      propertySignatures
    } = record2(r.key.ast, r.value.ast);
    propertySignatures.forEach((ps) => pss.push(ps));
    indexSignatures.forEach((is4) => iss.push(is4));
  }
  return new TypeLiteral(pss, iss);
}, lazilyMergeDefaults = (fields, out) => {
  const ownKeys2 = ownKeys(fields);
  for (const key of ownKeys2) {
    const field = fields[key];
    if (out[key] === undefined && isPropertySignature(field)) {
      const ast = field.ast;
      const defaultValue = ast._tag === "PropertySignatureDeclaration" ? ast.defaultValue : ast.to.defaultValue;
      if (defaultValue !== undefined) {
        out[key] = defaultValue();
      }
    }
  }
  return out;
}, tag4 = (tag5) => Literal2(tag5).pipe(propertySignature, withConstructorDefault(() => tag5)), TaggedStruct = (value9, fields) => Struct({
  _tag: tag4(value9),
  ...fields
}), Record = (options) => makeRecordClass(options.key, options.value), pick5 = (...keys10) => (self) => make112(pick(self.ast, keys10)), omit5 = (...keys10) => (self) => make112(omit(self.ast, keys10)), pluck, brand = (brand2, annotations2) => (self) => {
  const annotation = match2(getBrandAnnotation(self.ast), {
    onNone: () => [brand2],
    onSome: (brands) => [...brands, brand2]
  });
  const ast = annotations(self.ast, toASTAnnotations({
    [BrandAnnotationId]: annotation,
    ...annotations2
  }));
  return makeBrandClass(self, ast);
}, partial2 = (self) => make112(partial(self.ast)), partialWith, required2 = (self) => make112(required(self.ast)), mutable2 = (schema) => make112(mutable(schema.ast)), intersectTypeLiterals = (x2, y, path) => {
  if (isTypeLiteral(x2) && isTypeLiteral(y)) {
    const propertySignatures = [...x2.propertySignatures];
    for (const ps of y.propertySignatures) {
      const name = ps.name;
      const i2 = propertySignatures.findIndex((ps2) => ps2.name === name);
      if (i2 === -1) {
        propertySignatures.push(ps);
      } else {
        const {
          isOptional,
          type: type3
        } = propertySignatures[i2];
        propertySignatures[i2] = new PropertySignature(name, extendAST(type3, ps.type, path.concat(name)), isOptional, true);
      }
    }
    return new TypeLiteral(propertySignatures, x2.indexSignatures.concat(y.indexSignatures));
  }
  throw new Error(getSchemaExtendErrorMessage(x2, y, path));
}, preserveRefinementAnnotations, addRefinementToMembers = (refinement, asts) => asts.map((ast) => new Refinement(ast, refinement.filter, preserveRefinementAnnotations(refinement))), extendAST = (x2, y, path) => Union.make(intersectUnionMembers([x2], [y], path)), getTypes = (ast) => isUnion(ast) ? ast.types : [ast], intersectUnionMembers = (xs, ys, path) => flatMap4(xs, (x2) => flatMap4(ys, (y) => {
  switch (y._tag) {
    case "Literal": {
      if (isString2(y.literal) && isStringKeyword(x2) || isNumber2(y.literal) && isNumberKeyword(x2) || isBoolean2(y.literal) && isBooleanKeyword(x2)) {
        return [y];
      }
      break;
    }
    case "StringKeyword": {
      if (y === stringKeyword) {
        if (isStringKeyword(x2) || isLiteral(x2) && isString2(x2.literal)) {
          return [x2];
        } else if (isRefinement(x2)) {
          return addRefinementToMembers(x2, intersectUnionMembers(getTypes(x2.from), [y], path));
        }
      } else if (x2 === stringKeyword) {
        return [y];
      }
      break;
    }
    case "NumberKeyword": {
      if (y === numberKeyword) {
        if (isNumberKeyword(x2) || isLiteral(x2) && isNumber2(x2.literal)) {
          return [x2];
        } else if (isRefinement(x2)) {
          return addRefinementToMembers(x2, intersectUnionMembers(getTypes(x2.from), [y], path));
        }
      } else if (x2 === numberKeyword) {
        return [y];
      }
      break;
    }
    case "BooleanKeyword": {
      if (y === booleanKeyword) {
        if (isBooleanKeyword(x2) || isLiteral(x2) && isBoolean2(x2.literal)) {
          return [x2];
        } else if (isRefinement(x2)) {
          return addRefinementToMembers(x2, intersectUnionMembers(getTypes(x2.from), [y], path));
        }
      } else if (x2 === booleanKeyword) {
        return [y];
      }
      break;
    }
    case "Union":
      return intersectUnionMembers(getTypes(x2), y.types, path);
    case "Suspend":
      return [new Suspend(() => extendAST(x2, y.f(), path))];
    case "Refinement":
      return addRefinementToMembers(y, intersectUnionMembers(getTypes(x2), getTypes(y.from), path));
    case "TypeLiteral": {
      switch (x2._tag) {
        case "Union":
          return intersectUnionMembers(x2.types, [y], path);
        case "Suspend":
          return [new Suspend(() => extendAST(x2.f(), y, path))];
        case "Refinement":
          return addRefinementToMembers(x2, intersectUnionMembers(getTypes(x2.from), [y], path));
        case "TypeLiteral":
          return [intersectTypeLiterals(x2, y, path)];
        case "Transformation": {
          const transformation = x2.transformation;
          const from = intersectTypeLiterals(x2.from, y, path);
          const to = intersectTypeLiterals(x2.to, typeAST(y), path);
          switch (transformation._tag) {
            case "TypeLiteralTransformation":
              return [new Transformation(from, to, new TypeLiteralTransformation(transformation.propertySignatureTransformations))];
            case "ComposeTransformation":
              return [new Transformation(from, to, composeTransformation)];
            case "FinalTransformation":
              return [new Transformation(from, to, new FinalTransformation((fromA, options, ast, fromI) => map37(transformation.decode(fromA, options, ast, fromI), (partial3) => ({
                ...fromA,
                ...partial3
              })), (toI, options, ast, toA) => map37(transformation.encode(toI, options, ast, toA), (partial3) => ({
                ...toI,
                ...partial3
              }))))];
          }
        }
      }
      break;
    }
    case "Transformation": {
      if (isTransformation(x2)) {
        if (isTypeLiteralTransformation(y.transformation) && isTypeLiteralTransformation(x2.transformation)) {
          return [new Transformation(intersectTypeLiterals(x2.from, y.from, path), intersectTypeLiterals(x2.to, y.to, path), new TypeLiteralTransformation(y.transformation.propertySignatureTransformations.concat(x2.transformation.propertySignatureTransformations)))];
        }
      } else {
        return intersectUnionMembers([y], [x2], path);
      }
      break;
    }
  }
  throw new Error(getSchemaExtendErrorMessage(x2, y, path));
})), extend4, compose6, suspend15 = (f) => make112(new Suspend(() => f().ast)), RefineSchemaId, fromFilterPredicateReturnTypeItem = (item, ast, input) => {
  if (isBoolean2(item)) {
    return item ? none2() : some3(new Type2(ast, input));
  }
  if (isString2(item)) {
    return some3(new Type2(ast, input, item));
  }
  if (item !== undefined) {
    if ("_tag" in item) {
      return some3(item);
    }
    const issue = new Type2(ast, input, item.message);
    return some3(isNonEmptyReadonlyArray(item.path) ? new Pointer(item.path, input, issue) : issue);
  }
  return none2();
}, toFilterParseIssue = (out, ast, input) => {
  if (isSingle(out)) {
    return fromFilterPredicateReturnTypeItem(out, ast, input);
  }
  if (isNonEmptyReadonlyArray(out)) {
    const issues = filterMap4(out, (issue) => fromFilterPredicateReturnTypeItem(issue, ast, input));
    if (isNonEmptyReadonlyArray(issues)) {
      return some3(issues.length === 1 ? issues[0] : new Composite2(ast, input, issues));
    }
  }
  return none2();
}, filterEffect2, transformOrFail, transform3, attachPropertySignature, annotations2, rename2, TrimmedSchemaId, trimmed = (annotations3) => (self) => self.pipe(filter22((a) => a === a.trim(), {
  schemaId: TrimmedSchemaId,
  title: "trimmed",
  description: "a string with no leading or trailing whitespace",
  jsonSchema: {
    pattern: "^\\S[\\s\\S]*\\S$|^\\S$|^$"
  },
  ...annotations3
})), MaxLengthSchemaId2, maxLength = (maxLength2, annotations3) => (self) => self.pipe(filter22((a) => a.length <= maxLength2, {
  schemaId: MaxLengthSchemaId2,
  title: `maxLength(${maxLength2})`,
  description: `a string at most ${maxLength2} character(s) long`,
  jsonSchema: {
    maxLength: maxLength2
  },
  ...annotations3
})), MinLengthSchemaId2, minLength = (minLength2, annotations3) => (self) => self.pipe(filter22((a) => a.length >= minLength2, {
  schemaId: MinLengthSchemaId2,
  title: `minLength(${minLength2})`,
  description: `a string at least ${minLength2} character(s) long`,
  jsonSchema: {
    minLength: minLength2
  },
  ...annotations3
})), LengthSchemaId2, length5 = (length6, annotations3) => (self) => {
  const minLength2 = isObject2(length6) ? Math.max(0, Math.floor(length6.min)) : Math.max(0, Math.floor(length6));
  const maxLength2 = isObject2(length6) ? Math.max(minLength2, Math.floor(length6.max)) : minLength2;
  if (minLength2 !== maxLength2) {
    return self.pipe(filter22((a) => a.length >= minLength2 && a.length <= maxLength2, {
      schemaId: LengthSchemaId2,
      title: `length({ min: ${minLength2}, max: ${maxLength2})`,
      description: `a string at least ${minLength2} character(s) and at most ${maxLength2} character(s) long`,
      jsonSchema: {
        minLength: minLength2,
        maxLength: maxLength2
      },
      ...annotations3
    }));
  }
  return self.pipe(filter22((a) => a.length === minLength2, {
    schemaId: LengthSchemaId2,
    title: `length(${minLength2})`,
    description: minLength2 === 1 ? `a single character` : `a string ${minLength2} character(s) long`,
    jsonSchema: {
      minLength: minLength2,
      maxLength: minLength2
    },
    ...annotations3
  }));
}, PatternSchemaId, pattern = (regex, annotations3) => (self) => {
  const source = regex.source;
  return self.pipe(filter22((a) => {
    regex.lastIndex = 0;
    return regex.test(a);
  }, {
    schemaId: PatternSchemaId,
    [PatternSchemaId]: {
      regex
    },
    description: `a string matching the pattern ${source}`,
    jsonSchema: {
      pattern: source
    },
    ...annotations3
  }));
}, StartsWithSchemaId, startsWith2 = (startsWith3, annotations3) => (self) => {
  const formatted = JSON.stringify(startsWith3);
  return self.pipe(filter22((a) => a.startsWith(startsWith3), {
    schemaId: StartsWithSchemaId,
    [StartsWithSchemaId]: {
      startsWith: startsWith3
    },
    title: `startsWith(${formatted})`,
    description: `a string starting with ${formatted}`,
    jsonSchema: {
      pattern: `^${startsWith3}`
    },
    ...annotations3
  }));
}, EndsWithSchemaId, endsWith2 = (endsWith3, annotations3) => (self) => {
  const formatted = JSON.stringify(endsWith3);
  return self.pipe(filter22((a) => a.endsWith(endsWith3), {
    schemaId: EndsWithSchemaId,
    [EndsWithSchemaId]: {
      endsWith: endsWith3
    },
    title: `endsWith(${formatted})`,
    description: `a string ending with ${formatted}`,
    jsonSchema: {
      pattern: `^.*${endsWith3}$`
    },
    ...annotations3
  }));
}, IncludesSchemaId, includes4 = (searchString, annotations3) => (self) => {
  const formatted = JSON.stringify(searchString);
  return self.pipe(filter22((a) => a.includes(searchString), {
    schemaId: IncludesSchemaId,
    [IncludesSchemaId]: {
      includes: searchString
    },
    title: `includes(${formatted})`,
    description: `a string including ${formatted}`,
    jsonSchema: {
      pattern: `.*${searchString}.*`
    },
    ...annotations3
  }));
}, LowercasedSchemaId, lowercased = (annotations3) => (self) => self.pipe(filter22((a) => a === a.toLowerCase(), {
  schemaId: LowercasedSchemaId,
  title: "lowercased",
  description: "a lowercase string",
  jsonSchema: {
    pattern: "^[^A-Z]*$"
  },
  ...annotations3
})), Lowercased, UppercasedSchemaId, uppercased = (annotations3) => (self) => self.pipe(filter22((a) => a === a.toUpperCase(), {
  schemaId: UppercasedSchemaId,
  title: "uppercased",
  description: "an uppercase string",
  jsonSchema: {
    pattern: "^[^a-z]*$"
  },
  ...annotations3
})), Uppercased, CapitalizedSchemaId, capitalized = (annotations3) => (self) => self.pipe(filter22((a) => a[0]?.toUpperCase() === a[0], {
  schemaId: CapitalizedSchemaId,
  title: "capitalized",
  description: "a capitalized string",
  jsonSchema: {
    pattern: "^[^a-z]?.*$"
  },
  ...annotations3
})), Capitalized, UncapitalizedSchemaId, uncapitalized = (annotations3) => (self) => self.pipe(filter22((a) => a[0]?.toLowerCase() === a[0], {
  schemaId: UncapitalizedSchemaId,
  title: "uncapitalized",
  description: "a uncapitalized string",
  jsonSchema: {
    pattern: "^[^A-Z]?.*$"
  },
  ...annotations3
})), Uncapitalized, Char, nonEmptyString5 = (annotations3) => minLength(1, {
  title: "nonEmptyString",
  description: "a non empty string",
  ...annotations3
}), Lowercase, Uppercase, Capitalize, Uncapitalize, Trimmed, NonEmptyTrimmedString, Trim, split5 = (separator) => transform3(String$.annotations({
  description: "a string that will be split"
}), Array$(String$), {
  strict: true,
  decode: (i2) => i2.split(separator),
  encode: (a) => a.join(separator)
}), getErrorMessage2 = (e) => e instanceof Error ? e.message : String(e), getParseJsonTransformation = (options) => transformOrFail(String$.annotations({
  description: "a string to be decoded into JSON"
}), Unknown, {
  strict: true,
  decode: (i2, _, ast) => _try({
    try: () => JSON.parse(i2, options?.reviver),
    catch: (e) => new Type2(ast, i2, getErrorMessage2(e))
  }),
  encode: (a, _, ast) => _try({
    try: () => JSON.stringify(a, options?.replacer, options?.space),
    catch: (e) => new Type2(ast, a, getErrorMessage2(e))
  })
}).annotations({
  title: "parseJson",
  schemaId: ParseJsonSchemaId
}), parseJson = (schemaOrOptions, o) => isSchema(schemaOrOptions) ? compose6(parseJson(o), schemaOrOptions) : getParseJsonTransformation(schemaOrOptions), NonEmptyString, UUIDSchemaId, uuidRegexp, UUID, ULIDSchemaId, ulidRegexp, ULID, URLFromSelf, URL$, FiniteSchemaId2, finite = (annotations3) => (self) => self.pipe(filter22(Number.isFinite, {
  schemaId: FiniteSchemaId2,
  title: "finite",
  description: "a finite number",
  jsonSchema: {
    type: "number"
  },
  ...annotations3
})), GreaterThanSchemaId2, greaterThan11 = (exclusiveMinimum, annotations3) => (self) => self.pipe(filter22((a) => a > exclusiveMinimum, {
  schemaId: GreaterThanSchemaId2,
  title: `greaterThan(${exclusiveMinimum})`,
  description: exclusiveMinimum === 0 ? "a positive number" : `a number greater than ${exclusiveMinimum}`,
  jsonSchema: {
    exclusiveMinimum
  },
  ...annotations3
})), GreaterThanOrEqualToSchemaId2, greaterThanOrEqualTo8 = (minimum, annotations3) => (self) => self.pipe(filter22((a) => a >= minimum, {
  schemaId: GreaterThanOrEqualToSchemaId2,
  title: `greaterThanOrEqualTo(${minimum})`,
  description: minimum === 0 ? "a non-negative number" : `a number greater than or equal to ${minimum}`,
  jsonSchema: {
    minimum
  },
  ...annotations3
})), MultipleOfSchemaId, multipleOf = (divisor, annotations3) => (self) => {
  const positiveDivisor = Math.abs(divisor);
  return self.pipe(filter22((a) => remainder(a, divisor) === 0, {
    schemaId: MultipleOfSchemaId,
    title: `multipleOf(${positiveDivisor})`,
    description: `a number divisible by ${positiveDivisor}`,
    jsonSchema: {
      multipleOf: positiveDivisor
    },
    ...annotations3
  }));
}, IntSchemaId2, int = (annotations3) => (self) => self.pipe(filter22((a) => Number.isSafeInteger(a), {
  schemaId: IntSchemaId2,
  title: "int",
  description: "an integer",
  jsonSchema: {
    type: "integer"
  },
  ...annotations3
})), LessThanSchemaId2, lessThan15 = (exclusiveMaximum, annotations3) => (self) => self.pipe(filter22((a) => a < exclusiveMaximum, {
  schemaId: LessThanSchemaId2,
  title: `lessThan(${exclusiveMaximum})`,
  description: exclusiveMaximum === 0 ? "a negative number" : `a number less than ${exclusiveMaximum}`,
  jsonSchema: {
    exclusiveMaximum
  },
  ...annotations3
})), LessThanOrEqualToSchemaId2, lessThanOrEqualTo8 = (maximum, annotations3) => (self) => self.pipe(filter22((a) => a <= maximum, {
  schemaId: LessThanOrEqualToSchemaId2,
  title: `lessThanOrEqualTo(${maximum})`,
  description: maximum === 0 ? "a non-positive number" : `a number less than or equal to ${maximum}`,
  jsonSchema: {
    maximum
  },
  ...annotations3
})), BetweenSchemaId2, between8 = (minimum, maximum, annotations3) => (self) => self.pipe(filter22((a) => a >= minimum && a <= maximum, {
  schemaId: BetweenSchemaId2,
  title: `between(${minimum}, ${maximum})`,
  description: `a number between ${minimum} and ${maximum}`,
  jsonSchema: {
    minimum,
    maximum
  },
  ...annotations3
})), NonNaNSchemaId2, nonNaN = (annotations3) => (self) => self.pipe(filter22((a) => !Number.isNaN(a), {
  schemaId: NonNaNSchemaId2,
  title: "nonNaN",
  description: "a number excluding NaN",
  ...annotations3
})), positive = (annotations3) => greaterThan11(0, {
  title: "positive",
  ...annotations3
}), negative = (annotations3) => lessThan15(0, {
  title: "negative",
  ...annotations3
}), nonPositive = (annotations3) => lessThanOrEqualTo8(0, {
  title: "nonPositive",
  ...annotations3
}), nonNegative = (annotations3) => greaterThanOrEqualTo8(0, {
  title: "nonNegative",
  ...annotations3
}), clamp9 = (minimum, maximum) => (self) => {
  return transform3(self, typeSchema(self).pipe(between8(minimum, maximum)), {
    strict: false,
    decode: (i2) => clamp3(i2, {
      minimum,
      maximum
    }),
    encode: identity
  });
}, NumberFromString, Finite, Int, NonNaN, Positive, Negative, NonPositive, NonNegative, JsonNumberSchemaId2, JsonNumber, Not, encodeSymbol2 = (sym, ast) => {
  const key = Symbol.keyFor(sym);
  return key === undefined ? fail23(new Type2(ast, sym, `Unable to encode a unique symbol ${String(sym)} into a string`)) : succeed24(key);
}, decodeSymbol = (s) => succeed24(Symbol.for(s)), Symbol$, GreaterThanBigIntSchemaId, greaterThanBigInt = (min11, annotations3) => (self) => self.pipe(filter22((a) => a > min11, {
  schemaId: GreaterThanBigIntSchemaId,
  [GreaterThanBigIntSchemaId]: {
    min: min11
  },
  title: `greaterThanBigInt(${min11})`,
  description: min11 === 0n ? "a positive bigint" : `a bigint greater than ${min11}n`,
  ...annotations3
})), GreaterThanOrEqualToBigIntSchemaId2, greaterThanOrEqualToBigInt = (min11, annotations3) => (self) => self.pipe(filter22((a) => a >= min11, {
  schemaId: GreaterThanOrEqualToBigIntSchemaId2,
  [GreaterThanOrEqualToBigIntSchemaId2]: {
    min: min11
  },
  title: `greaterThanOrEqualToBigInt(${min11})`,
  description: min11 === 0n ? "a non-negative bigint" : `a bigint greater than or equal to ${min11}n`,
  ...annotations3
})), LessThanBigIntSchemaId2, lessThanBigInt = (max14, annotations3) => (self) => self.pipe(filter22((a) => a < max14, {
  schemaId: LessThanBigIntSchemaId2,
  [LessThanBigIntSchemaId2]: {
    max: max14
  },
  title: `lessThanBigInt(${max14})`,
  description: max14 === 0n ? "a negative bigint" : `a bigint less than ${max14}n`,
  ...annotations3
})), LessThanOrEqualToBigIntSchemaId2, lessThanOrEqualToBigInt = (max14, annotations3) => (self) => self.pipe(filter22((a) => a <= max14, {
  schemaId: LessThanOrEqualToBigIntSchemaId2,
  [LessThanOrEqualToBigIntSchemaId2]: {
    max: max14
  },
  title: `lessThanOrEqualToBigInt(${max14})`,
  description: max14 === 0n ? "a non-positive bigint" : `a bigint less than or equal to ${max14}n`,
  ...annotations3
})), BetweenBigIntSchemaId, betweenBigInt = (min11, max14, annotations3) => (self) => self.pipe(filter22((a) => a >= min11 && a <= max14, {
  schemaId: BetweenBigIntSchemaId,
  [BetweenBigIntSchemaId]: {
    min: min11,
    max: max14
  },
  title: `betweenBigInt(${min11}, ${max14})`,
  description: `a bigint between ${min11}n and ${max14}n`,
  ...annotations3
})), positiveBigInt = (annotations3) => greaterThanBigInt(0n, {
  title: "positiveBigInt",
  ...annotations3
}), negativeBigInt = (annotations3) => lessThanBigInt(0n, {
  title: "negativeBigInt",
  ...annotations3
}), nonNegativeBigInt = (annotations3) => greaterThanOrEqualToBigInt(0n, {
  title: "nonNegativeBigInt",
  ...annotations3
}), nonPositiveBigInt = (annotations3) => lessThanOrEqualToBigInt(0n, {
  title: "nonPositiveBigInt",
  ...annotations3
}), clampBigInt = (minimum, maximum) => (self) => transform3(self, self.pipe(typeSchema, betweenBigInt(minimum, maximum)), {
  strict: false,
  decode: (i2) => clamp5(i2, {
    minimum,
    maximum
  }),
  encode: identity
}), BigInt$, PositiveBigIntFromSelf, PositiveBigInt, NegativeBigIntFromSelf, NegativeBigInt, NonPositiveBigIntFromSelf, NonPositiveBigInt, NonNegativeBigIntFromSelf, NonNegativeBigInt, BigIntFromNumber, redactedArbitrary = (value9) => (fc) => value9(fc).map(make107), toComposite = (eff, onSuccess, ast, actual) => mapBoth10(eff, {
  onFailure: (e) => new Composite2(ast, actual, e),
  onSuccess
}), redactedParse = (decodeUnknown4) => (u, options, ast) => isRedacted2(u) ? toComposite(decodeUnknown4(value8(u), options), make107, ast, u) : fail23(new Type2(ast, u)), RedactedFromSelf = (value9) => declare([value9], {
  decode: (value10) => redactedParse(decodeUnknown2(value10)),
  encode: (value10) => redactedParse(encodeUnknown(value10))
}, {
  description: "Redacted(<redacted>)",
  pretty: () => () => "Redacted(<redacted>)",
  arbitrary: redactedArbitrary,
  equivalence: getEquivalence9
}), DurationFromSelf, DurationFromNanos, NonNegativeInt, DurationFromMillis, DurationValueMillis, DurationValueNanos, DurationValueInfinity, durationValueInfinity, DurationValue, FiniteHRTime, InfiniteHRTime, HRTime, isDurationValue = (u) => typeof u === "object", Duration, clampDuration = (minimum, maximum) => (self) => transform3(self, self.pipe(typeSchema, betweenDuration(minimum, maximum)), {
  strict: false,
  decode: (i2) => clamp6(i2, {
    minimum,
    maximum
  }),
  encode: identity
}), LessThanDurationSchemaId, lessThanDuration = (max14, annotations3) => (self) => self.pipe(filter22((a) => lessThan5(a, max14), {
  schemaId: LessThanDurationSchemaId,
  [LessThanDurationSchemaId]: {
    max: max14
  },
  title: `lessThanDuration(${max14})`,
  description: `a Duration less than ${decode(max14)}`,
  ...annotations3
})), LessThanOrEqualToDurationSchemaId, lessThanOrEqualToDuration = (max14, annotations3) => (self) => self.pipe(filter22((a) => lessThanOrEqualTo5(a, max14), {
  schemaId: LessThanDurationSchemaId,
  [LessThanDurationSchemaId]: {
    max: max14
  },
  title: `lessThanOrEqualToDuration(${max14})`,
  description: `a Duration less than or equal to ${decode(max14)}`,
  ...annotations3
})), GreaterThanDurationSchemaId, greaterThanDuration = (min11, annotations3) => (self) => self.pipe(filter22((a) => greaterThan5(a, min11), {
  schemaId: GreaterThanDurationSchemaId,
  [GreaterThanDurationSchemaId]: {
    min: min11
  },
  title: `greaterThanDuration(${min11})`,
  description: `a Duration greater than ${decode(min11)}`,
  ...annotations3
})), GreaterThanOrEqualToDurationSchemaId, greaterThanOrEqualToDuration = (min11, annotations3) => (self) => self.pipe(filter22((a) => greaterThanOrEqualTo5(a, min11), {
  schemaId: GreaterThanOrEqualToDurationSchemaId,
  [GreaterThanOrEqualToDurationSchemaId]: {
    min: min11
  },
  title: `greaterThanOrEqualToDuration(${min11})`,
  description: `a Duration greater than or equal to ${decode(min11)}`,
  ...annotations3
})), BetweenDurationSchemaId, betweenDuration = (minimum, maximum, annotations3) => (self) => self.pipe(filter22((a) => between5(a, {
  minimum,
  maximum
}), {
  schemaId: BetweenDurationSchemaId,
  [BetweenDurationSchemaId]: {
    maximum,
    minimum
  },
  title: `betweenDuration(${minimum}, ${maximum})`,
  description: `a Duration between ${decode(minimum)} and ${decode(maximum)}`,
  ...annotations3
})), Uint8ArrayFromSelf, Uint8, Uint8Array$, makeUint8ArrayTransformation = (id3, decode7, encode6) => transformOrFail(String$.annotations({
  description: "a string to be decoded into a Uint8Array"
}), Uint8ArrayFromSelf, {
  strict: true,
  decode: (i2, _, ast) => mapLeft(decode7(i2), (decodeException) => new Type2(ast, i2, decodeException.message)),
  encode: (a) => succeed24(encode6(a))
}).annotations({
  identifier: id3
}), Uint8ArrayFromBase64, Uint8ArrayFromBase64Url, Uint8ArrayFromHex, makeEncodingTransformation = (id3, decode7, encode6) => transformOrFail(String$.annotations({
  description: `A string that is interpreted as being ${id3}-encoded and will be decoded into a UTF-8 string`
}), String$, {
  strict: true,
  decode: (i2, _, ast) => mapLeft(decode7(i2), (decodeException) => new Type2(ast, i2, decodeException.message)),
  encode: (a) => succeed24(encode6(a))
}).annotations({
  identifier: `StringFrom${id3}`
}), StringFromBase64, StringFromBase64Url, StringFromHex, StringFromUriComponent, MinItemsSchemaId2, minItems = (n, annotations3) => (self) => {
  const minItems2 = Math.floor(n);
  if (minItems2 < 1) {
    throw new Error(getInvalidArgumentErrorMessage(`Expected an integer greater than or equal to 1, actual ${n}`));
  }
  return self.pipe(filter22((a) => a.length >= minItems2, {
    schemaId: MinItemsSchemaId2,
    title: `minItems(${minItems2})`,
    description: `an array of at least ${minItems2} item(s)`,
    jsonSchema: {
      minItems: minItems2
    },
    [StableFilterAnnotationId]: true,
    ...annotations3
  }));
}, MaxItemsSchemaId2, maxItems = (n, annotations3) => (self) => {
  const maxItems2 = Math.floor(n);
  if (maxItems2 < 1) {
    throw new Error(getInvalidArgumentErrorMessage(`Expected an integer greater than or equal to 1, actual ${n}`));
  }
  return self.pipe(filter22((a) => a.length <= maxItems2, {
    schemaId: MaxItemsSchemaId2,
    title: `maxItems(${maxItems2})`,
    description: `an array of at most ${maxItems2} item(s)`,
    jsonSchema: {
      maxItems: maxItems2
    },
    [StableFilterAnnotationId]: true,
    ...annotations3
  }));
}, ItemsCountSchemaId2, itemsCount = (n, annotations3) => (self) => {
  const itemsCount2 = Math.floor(n);
  if (itemsCount2 < 0) {
    throw new Error(getInvalidArgumentErrorMessage(`Expected an integer greater than or equal to 0, actual ${n}`));
  }
  return self.pipe(filter22((a) => a.length === itemsCount2, {
    schemaId: ItemsCountSchemaId2,
    title: `itemsCount(${itemsCount2})`,
    description: `an array of exactly ${itemsCount2} item(s)`,
    jsonSchema: {
      minItems: itemsCount2,
      maxItems: itemsCount2
    },
    [StableFilterAnnotationId]: true,
    ...annotations3
  }));
}, getNumberIndexedAccess2 = (self) => make112(getNumberIndexedAccess(self.ast)), headOrElse, ValidDateSchemaId, validDate = (annotations3) => (self) => self.pipe(filter22((a) => !Number.isNaN(a.getTime()), {
  schemaId: ValidDateSchemaId,
  [ValidDateSchemaId]: {
    noInvalidDate: true
  },
  title: "validDate",
  description: "a valid Date",
  ...annotations3
})), LessThanDateSchemaId, lessThanDate = (max14, annotations3) => (self) => self.pipe(filter22((a) => a < max14, {
  schemaId: LessThanDateSchemaId,
  [LessThanDateSchemaId]: {
    max: max14
  },
  title: `lessThanDate(${formatDate(max14)})`,
  description: `a date before ${formatDate(max14)}`,
  ...annotations3
})), LessThanOrEqualToDateSchemaId, lessThanOrEqualToDate = (max14, annotations3) => (self) => self.pipe(filter22((a) => a <= max14, {
  schemaId: LessThanDateSchemaId,
  [LessThanDateSchemaId]: {
    max: max14
  },
  title: `lessThanOrEqualToDate(${formatDate(max14)})`,
  description: `a date before or equal to ${formatDate(max14)}`,
  ...annotations3
})), GreaterThanDateSchemaId, greaterThanDate = (min11, annotations3) => (self) => self.pipe(filter22((a) => a > min11, {
  schemaId: GreaterThanDateSchemaId,
  [GreaterThanDateSchemaId]: {
    min: min11
  },
  title: `greaterThanDate(${formatDate(min11)})`,
  description: `a date after ${formatDate(min11)}`,
  ...annotations3
})), GreaterThanOrEqualToDateSchemaId, greaterThanOrEqualToDate = (min11, annotations3) => (self) => self.pipe(filter22((a) => a >= min11, {
  schemaId: GreaterThanOrEqualToDateSchemaId,
  [GreaterThanOrEqualToDateSchemaId]: {
    min: min11
  },
  title: `greaterThanOrEqualToDate(${formatDate(min11)})`,
  description: `a date after or equal to ${formatDate(min11)}`,
  ...annotations3
})), BetweenDateSchemaId, betweenDate = (min11, max14, annotations3) => (self) => self.pipe(filter22((a) => a <= max14 && a >= min11, {
  schemaId: BetweenDateSchemaId,
  [BetweenDateSchemaId]: {
    max: max14,
    min: min11
  },
  title: `betweenDate(${formatDate(min11)}, ${formatDate(max14)})`,
  description: `a date between ${formatDate(min11)} and ${formatDate(max14)}`,
  ...annotations3
})), DateFromSelfSchemaId2, DateFromSelf, ValidDateFromSelf, DateFromString, Date$, DateFromNumber, DateTimeUtcFromSelf, decodeDateTimeUtc = (input, ast) => _try({
  try: () => unsafeMake14(input),
  catch: () => new Type2(ast, input, `Unable to decode ${formatUnknown(input)} into a DateTime.Utc`)
}), DateTimeUtcFromNumber, DateTimeUtcFromDate, DateTimeUtc, timeZoneOffsetArbitrary = () => (fc) => fc.integer({
  min: -12 * 60 * 60 * 1000,
  max: 14 * 60 * 60 * 1000
}).map(zoneMakeOffset2), TimeZoneOffsetFromSelf, TimeZoneOffset, timeZoneNamedArbitrary = () => (fc) => fc.constantFrom(...Intl.supportedValuesOf("timeZone")).map(zoneUnsafeMakeNamed2), TimeZoneNamedFromSelf, TimeZoneNamed, TimeZoneFromSelf, TimeZone, timeZoneArbitrary = (fc) => fc.oneof(timeZoneOffsetArbitrary()(fc), timeZoneNamedArbitrary()(fc)), DateTimeZonedFromSelf, DateTimeZoned, OptionNoneEncoded, optionSomeEncoded = (value9) => Struct({
  _tag: Literal2("Some"),
  value: value9
}).annotations({
  description: `SomeEncoded<${format8(value9)}>`
}), optionEncoded = (value9) => Union2(OptionNoneEncoded, optionSomeEncoded(value9)).annotations({
  description: `OptionEncoded<${format8(value9)}>`
}), optionDecode = (input) => input._tag === "None" ? none2() : some3(input.value), optionArbitrary = (value9, ctx) => (fc) => fc.oneof(ctx, fc.record({
  _tag: fc.constant("None")
}), fc.record({
  _tag: fc.constant("Some"),
  value: value9(fc)
})).map(optionDecode), optionPretty = (value9) => match2({
  onNone: () => "none()",
  onSome: (a) => `some(${value9(a)})`
}), optionParse = (decodeUnknown4) => (u, options, ast) => isOption2(u) ? isNone2(u) ? succeed24(none2()) : toComposite(decodeUnknown4(u.value, options), some3, ast, u) : fail23(new Type2(ast, u)), OptionFromSelf = (value9) => {
  return declare([value9], {
    decode: (value10) => optionParse(decodeUnknown2(value10)),
    encode: (value10) => optionParse(encodeUnknown(value10))
  }, {
    description: `Option<${format8(value9)}>`,
    pretty: optionPretty,
    arbitrary: optionArbitrary,
    equivalence: getEquivalence2
  });
}, makeNoneEncoded, makeSomeEncoded = (value9) => ({
  _tag: "Some",
  value: value9
}), OptionFromNonEmptyTrimmedString, rightEncoded = (right3) => Struct({
  _tag: Literal2("Right"),
  right: right3
}).annotations({
  description: `RightEncoded<${format8(right3)}>`
}), leftEncoded = (left3) => Struct({
  _tag: Literal2("Left"),
  left: left3
}).annotations({
  description: `LeftEncoded<${format8(left3)}>`
}), eitherEncoded = (right3, left3) => Union2(rightEncoded(right3), leftEncoded(left3)).annotations({
  description: `EitherEncoded<${format8(left3)}, ${format8(right3)}>`
}), eitherDecode = (input) => input._tag === "Left" ? left2(input.left) : right2(input.right), eitherArbitrary = (right3, left3) => (fc) => fc.oneof(fc.record({
  _tag: fc.constant("Left"),
  left: left3(fc)
}), fc.record({
  _tag: fc.constant("Right"),
  right: right3(fc)
})).map(eitherDecode), eitherPretty = (right3, left3) => match({
  onLeft: (e) => `left(${left3(e)})`,
  onRight: (a) => `right(${right3(a)})`
}), eitherParse = (parseRight, decodeUnknownLeft) => (u, options, ast) => isEither2(u) ? match(u, {
  onLeft: (left3) => toComposite(decodeUnknownLeft(left3, options), left2, ast, u),
  onRight: (right3) => toComposite(parseRight(right3, options), right2, ast, u)
}) : fail23(new Type2(ast, u)), EitherFromSelf = ({
  left: left3,
  right: right3
}) => {
  return declare([right3, left3], {
    decode: (right4, left4) => eitherParse(decodeUnknown2(right4), decodeUnknown2(left4)),
    encode: (right4, left4) => eitherParse(encodeUnknown(right4), encodeUnknown(left4))
  }, {
    description: `Either<${format8(right3)}, ${format8(left3)}>`,
    pretty: eitherPretty,
    arbitrary: eitherArbitrary,
    equivalence: (right4, left4) => getEquivalence({
      left: left4,
      right: right4
    })
  });
}, makeLeftEncoded = (left3) => ({
  _tag: "Left",
  left: left3
}), makeRightEncoded = (right3) => ({
  _tag: "Right",
  right: right3
}), Either3 = ({
  left: left3,
  right: right3
}) => {
  const right_ = asSchema(right3);
  const left_ = asSchema(left3);
  const out = transform3(eitherEncoded(right_, left_), EitherFromSelf({
    left: typeSchema(left_),
    right: typeSchema(right_)
  }), {
    strict: true,
    decode: (i2) => eitherDecode(i2),
    encode: (a) => match(a, {
      onLeft: makeLeftEncoded,
      onRight: makeRightEncoded
    })
  });
  return out;
}, EitherFromUnion = ({
  left: left3,
  right: right3
}) => {
  const right_ = asSchema(right3);
  const left_ = asSchema(left3);
  const toright = typeSchema(right_);
  const toleft = typeSchema(left_);
  const fromRight = transform3(right_, rightEncoded(toright), {
    strict: true,
    decode: (i2) => makeRightEncoded(i2),
    encode: (a) => a.right
  });
  const fromLeft = transform3(left_, leftEncoded(toleft), {
    strict: true,
    decode: (i2) => makeLeftEncoded(i2),
    encode: (a) => a.left
  });
  const out = transform3(Union2(fromRight, fromLeft), EitherFromSelf({
    left: toleft,
    right: toright
  }), {
    strict: true,
    decode: (i2) => i2._tag === "Left" ? left2(i2.left) : right2(i2.right),
    encode: (a) => match(a, {
      onLeft: makeLeftEncoded,
      onRight: makeRightEncoded
    })
  });
  return out;
}, mapArbitrary = (key, value9, ctx) => {
  return (fc) => {
    const items = fc.array(fc.tuple(key(fc), value9(fc)));
    return (ctx.depthIdentifier !== undefined ? fc.oneof(ctx, fc.constant([]), items) : items).map((as16) => new Map(as16));
  };
}, readonlyMapPretty = (key, value9) => (map41) => `new Map([${Array.from(map41.entries()).map(([k, v]) => `[${key(k)}, ${value9(v)}]`).join(", ")}])`, readonlyMapEquivalence = (key, value9) => {
  const arrayEquivalence = getEquivalence5(make(([ka, va], [kb, vb]) => key(ka, kb) && value9(va, vb)));
  return make((a, b) => arrayEquivalence(Array.from(a.entries()), Array.from(b.entries())));
}, readonlyMapParse = (decodeUnknown4) => (u, options, ast) => isMap(u) ? toComposite(decodeUnknown4(Array.from(u.entries()), options), (as16) => new Map(as16), ast, u) : fail23(new Type2(ast, u)), mapFromSelf_ = (key, value9, description) => declare([key, value9], {
  decode: (Key2, Value2) => readonlyMapParse(decodeUnknown2(Array$(Tuple(Key2, Value2)))),
  encode: (Key2, Value2) => readonlyMapParse(encodeUnknown(Array$(Tuple(Key2, Value2))))
}, {
  description,
  pretty: readonlyMapPretty,
  arbitrary: mapArbitrary,
  equivalence: readonlyMapEquivalence
}), ReadonlyMapFromSelf = ({
  key,
  value: value9
}) => mapFromSelf_(key, value9, `ReadonlyMap<${format8(key)}, ${format8(value9)}>`), MapFromSelf = ({
  key,
  value: value9
}) => mapFromSelf_(key, value9, `Map<${format8(key)}, ${format8(value9)}>`), ReadonlyMapFromRecord = ({
  key,
  value: value9
}) => transform3(Record({
  key: encodedBoundSchema(key),
  value: value9
}).annotations({
  description: "a record to be decoded into a ReadonlyMap"
}), ReadonlyMapFromSelf({
  key,
  value: typeSchema(value9)
}), {
  strict: true,
  decode: (i2) => new Map(Object.entries(i2)),
  encode: (a) => Object.fromEntries(a)
}), MapFromRecord = ({
  key,
  value: value9
}) => transform3(Record({
  key: encodedBoundSchema(key),
  value: value9
}).annotations({
  description: "a record to be decoded into a Map"
}), MapFromSelf({
  key,
  value: typeSchema(value9)
}), {
  strict: true,
  decode: (i2) => new Map(Object.entries(i2)),
  encode: (a) => Object.fromEntries(a)
}), setArbitrary = (item, ctx) => (fc) => {
  const items = fc.array(item(fc));
  return (ctx.depthIdentifier !== undefined ? fc.oneof(ctx, fc.constant([]), items) : items).map((as16) => new Set(as16));
}, readonlySetPretty = (item) => (set15) => `new Set([${Array.from(set15.values()).map((a) => item(a)).join(", ")}])`, readonlySetEquivalence = (item) => {
  const arrayEquivalence = getEquivalence5(item);
  return make((a, b) => arrayEquivalence(Array.from(a.values()), Array.from(b.values())));
}, readonlySetParse = (decodeUnknown4) => (u, options, ast) => isSet(u) ? toComposite(decodeUnknown4(Array.from(u.values()), options), (as16) => new Set(as16), ast, u) : fail23(new Type2(ast, u)), setFromSelf_ = (value9, description) => declare([value9], {
  decode: (item) => readonlySetParse(decodeUnknown2(Array$(item))),
  encode: (item) => readonlySetParse(encodeUnknown(Array$(item)))
}, {
  description,
  pretty: readonlySetPretty,
  arbitrary: setArbitrary,
  equivalence: readonlySetEquivalence
}), ReadonlySetFromSelf = (value9) => setFromSelf_(value9, `ReadonlySet<${format8(value9)}>`), SetFromSelf = (value9) => setFromSelf_(value9, `Set<${format8(value9)}>`), bigDecimalPretty = () => (val) => `BigDecimal(${format3(normalize(val))})`, bigDecimalArbitrary = () => (fc) => fc.tuple(fc.bigInt(), fc.integer({
  min: 0,
  max: 18
})).map(([value9, scale2]) => make6(value9, scale2)), BigDecimalFromSelf, BigDecimal, BigDecimalFromNumber, GreaterThanBigDecimalSchemaId, greaterThanBigDecimal = (min11, annotations3) => (self) => {
  const formatted = format3(min11);
  return self.pipe(filter22((a) => greaterThan3(a, min11), {
    schemaId: GreaterThanBigDecimalSchemaId,
    [GreaterThanBigDecimalSchemaId]: {
      min: min11
    },
    title: `greaterThanBigDecimal(${formatted})`,
    description: `a BigDecimal greater than ${formatted}`,
    ...annotations3
  }));
}, GreaterThanOrEqualToBigDecimalSchemaId, greaterThanOrEqualToBigDecimal = (min11, annotations3) => (self) => {
  const formatted = format3(min11);
  return self.pipe(filter22((a) => greaterThanOrEqualTo3(a, min11), {
    schemaId: GreaterThanOrEqualToBigDecimalSchemaId,
    [GreaterThanOrEqualToBigDecimalSchemaId]: {
      min: min11
    },
    title: `greaterThanOrEqualToBigDecimal(${formatted})`,
    description: `a BigDecimal greater than or equal to ${formatted}`,
    ...annotations3
  }));
}, LessThanBigDecimalSchemaId, lessThanBigDecimal = (max14, annotations3) => (self) => {
  const formatted = format3(max14);
  return self.pipe(filter22((a) => lessThan3(a, max14), {
    schemaId: LessThanBigDecimalSchemaId,
    [LessThanBigDecimalSchemaId]: {
      max: max14
    },
    title: `lessThanBigDecimal(${formatted})`,
    description: `a BigDecimal less than ${formatted}`,
    ...annotations3
  }));
}, LessThanOrEqualToBigDecimalSchemaId, lessThanOrEqualToBigDecimal = (max14, annotations3) => (self) => {
  const formatted = format3(max14);
  return self.pipe(filter22((a) => lessThanOrEqualTo3(a, max14), {
    schemaId: LessThanOrEqualToBigDecimalSchemaId,
    [LessThanOrEqualToBigDecimalSchemaId]: {
      max: max14
    },
    title: `lessThanOrEqualToBigDecimal(${formatted})`,
    description: `a BigDecimal less than or equal to ${formatted}`,
    ...annotations3
  }));
}, PositiveBigDecimalSchemaId, positiveBigDecimal = (annotations3) => (self) => self.pipe(filter22((a) => isPositive(a), {
  schemaId: PositiveBigDecimalSchemaId,
  title: "positiveBigDecimal",
  description: `a positive BigDecimal`,
  ...annotations3
})), PositiveBigDecimalFromSelf, NonNegativeBigDecimalSchemaId, nonNegativeBigDecimal = (annotations3) => (self) => self.pipe(filter22((a) => a.value >= 0n, {
  schemaId: NonNegativeBigDecimalSchemaId,
  title: "nonNegativeBigDecimal",
  description: `a non-negative BigDecimal`,
  ...annotations3
})), NonNegativeBigDecimalFromSelf, NegativeBigDecimalSchemaId, negativeBigDecimal = (annotations3) => (self) => self.pipe(filter22((a) => isNegative(a), {
  schemaId: NegativeBigDecimalSchemaId,
  title: "negativeBigDecimal",
  description: `a negative BigDecimal`,
  ...annotations3
})), NegativeBigDecimalFromSelf, NonPositiveBigDecimalSchemaId, nonPositiveBigDecimal = (annotations3) => (self) => self.pipe(filter22((a) => a.value <= 0n, {
  schemaId: NonPositiveBigDecimalSchemaId,
  title: "nonPositiveBigDecimal",
  description: `a non-positive BigDecimal`,
  ...annotations3
})), NonPositiveBigDecimalFromSelf, BetweenBigDecimalSchemaId, betweenBigDecimal = (minimum, maximum, annotations3) => (self) => {
  const formattedMinimum = format3(minimum);
  const formattedMaximum = format3(maximum);
  return self.pipe(filter22((a) => between3(a, {
    minimum,
    maximum
  }), {
    schemaId: BetweenBigDecimalSchemaId,
    [BetweenBigDecimalSchemaId]: {
      maximum,
      minimum
    },
    title: `betweenBigDecimal(${formattedMinimum}, ${formattedMaximum})`,
    description: `a BigDecimal between ${formattedMinimum} and ${formattedMaximum}`,
    ...annotations3
  }));
}, clampBigDecimal = (minimum, maximum) => (self) => transform3(self, self.pipe(typeSchema, betweenBigDecimal(minimum, maximum)), {
  strict: false,
  decode: (i2) => clamp4(i2, {
    minimum,
    maximum
  }),
  encode: identity
}), chunkArbitrary = (item, ctx) => (fc) => {
  const items = fc.array(item(fc));
  return (ctx.depthIdentifier !== undefined ? fc.oneof(ctx, fc.constant([]), items) : items).map(fromIterable3);
}, chunkPretty = (item) => (c) => `Chunk(${toReadonlyArray(c).map(item).join(", ")})`, chunkParse = (decodeUnknown4) => (u, options, ast) => isChunk(u) ? isEmpty2(u) ? succeed24(empty7()) : toComposite(decodeUnknown4(toReadonlyArray(u), options), fromIterable3, ast, u) : fail23(new Type2(ast, u)), ChunkFromSelf = (value9) => {
  return declare([value9], {
    decode: (item) => chunkParse(decodeUnknown2(Array$(item))),
    encode: (item) => chunkParse(encodeUnknown(Array$(item)))
  }, {
    description: `Chunk<${format8(value9)}>`,
    pretty: chunkPretty,
    arbitrary: chunkArbitrary,
    equivalence: getEquivalence6
  });
}, nonEmptyChunkArbitrary = (item) => (fc) => array4(item(fc), {
  minLength: 1
}).map((as16) => unsafeFromNonEmptyArray(as16)), nonEmptyChunkPretty = (item) => (c) => `NonEmptyChunk(${toReadonlyArray(c).map(item).join(", ")})`, nonEmptyChunkParse = (decodeUnknown4) => (u, options, ast) => isChunk(u) && isNonEmpty2(u) ? toComposite(decodeUnknown4(toReadonlyArray(u), options), unsafeFromNonEmptyArray, ast, u) : fail23(new Type2(ast, u)), NonEmptyChunkFromSelf = (value9) => {
  return declare([value9], {
    decode: (item) => nonEmptyChunkParse(decodeUnknown2(NonEmptyArray(item))),
    encode: (item) => nonEmptyChunkParse(encodeUnknown(NonEmptyArray(item)))
  }, {
    description: `NonEmptyChunk<${format8(value9)}>`,
    pretty: nonEmptyChunkPretty,
    arbitrary: nonEmptyChunkArbitrary,
    equivalence: getEquivalence6
  });
}, decodeData = (a) => Array.isArray(a) ? array5(a) : struct5(a), dataArbitrary = (item) => (fc) => item(fc).map(decodeData), dataPretty = (item) => (d) => `Data(${item(d)})`, dataParse = (decodeUnknown4) => (u, options, ast) => isEqual(u) ? toComposite(decodeUnknown4(u, options), decodeData, ast, u) : fail23(new Type2(ast, u)), DataFromSelf = (value9) => {
  return declare([value9], {
    decode: (item) => dataParse(decodeUnknown2(item)),
    encode: (item) => dataParse(encodeUnknown(item))
  }, {
    description: `Data<${format8(value9)}>`,
    pretty: dataPretty,
    arbitrary: dataArbitrary
  });
}, Data = (value9) => {
  return transform3(value9, DataFromSelf(typeSchema(value9)), {
    strict: false,
    decode: (i2) => decodeData(i2),
    encode: (a) => Array.isArray(a) ? Array.from(a) : Object.assign({}, a)
  });
}, isField = (u) => isSchema(u) || isPropertySignature(u), isFields = (fields) => ownKeys(fields).every((key) => isField(fields[key])), getFields = (hasFields) => ("fields" in hasFields) ? hasFields.fields : getFields(hasFields[RefineSchemaId]), getSchemaFromFieldsOr = (fieldsOr) => isFields(fieldsOr) ? Struct(fieldsOr) : isSchema(fieldsOr) ? fieldsOr : Struct(getFields(fieldsOr)), getFieldsFromFieldsOr = (fieldsOr) => isFields(fieldsOr) ? fieldsOr : getFields(fieldsOr), Class6 = (identifier2) => (fieldsOr, annotations3) => makeClass({
  kind: "Class",
  identifier: identifier2,
  schema: getSchemaFromFieldsOr(fieldsOr),
  fields: getFieldsFromFieldsOr(fieldsOr),
  Base: Class4,
  annotations: annotations3
}), getClassTag = (tag5) => withConstructorDefault(propertySignature(Literal2(tag5)), () => tag5), TaggedClass4 = (identifier2) => (tag5, fieldsOr, annotations3) => {
  const fields = getFieldsFromFieldsOr(fieldsOr);
  const schema = getSchemaFromFieldsOr(fieldsOr);
  const newFields = {
    _tag: getClassTag(tag5)
  };
  const taggedFields = extendFields(newFields, fields);
  return class TaggedClass5 extends makeClass({
    kind: "TaggedClass",
    identifier: identifier2 ?? tag5,
    schema: extend4(schema, Struct(newFields)),
    fields: taggedFields,
    Base: Class4,
    annotations: annotations3
  }) {
    static _tag = tag5;
  };
}, TaggedError3 = (identifier2) => (tag5, fieldsOr, annotations3) => {

  class Base3 extends Error4 {
  }
  Base3.prototype.name = tag5;
  const fields = getFieldsFromFieldsOr(fieldsOr);
  const schema = getSchemaFromFieldsOr(fieldsOr);
  const newFields = {
    _tag: getClassTag(tag5)
  };
  const taggedFields = extendFields(newFields, fields);
  return class TaggedErrorClass extends makeClass({
    kind: "TaggedError",
    identifier: identifier2 ?? tag5,
    schema: extend4(schema, Struct(newFields)),
    fields: taggedFields,
    Base: Base3,
    annotations: annotations3,
    disableToString: true
  }) {
    static _tag = tag5;
    get message() {
      return `{ ${ownKeys(fields).map((p) => `${formatPropertyKey(p)}: ${formatUnknown(this[p])}`).join(", ")} }`;
    }
  };
}, extendFields = (a, b) => {
  const out = {
    ...a
  };
  for (const key of ownKeys(b)) {
    if (key in a) {
      throw new Error(getASTDuplicatePropertySignatureErrorMessage(key));
    }
    out[key] = b[key];
  }
  return out;
}, astCache, getClassAnnotations = (annotations3) => {
  if (annotations3 === undefined) {
    return [];
  } else if (Array.isArray(annotations3)) {
    return annotations3;
  } else {
    return [annotations3];
  }
}, makeClass = ({
  Base: Base3,
  annotations: annotations3,
  disableToString,
  fields,
  identifier: identifier2,
  kind,
  schema
}) => {
  const classSymbol = Symbol.for(`effect/Schema/${kind}/${identifier2}`);
  const [typeAnnotations, transformationAnnotations, encodedAnnotations] = getClassAnnotations(annotations3);
  const typeSchema_ = typeSchema(schema);
  const declarationSurrogate = typeSchema_.annotations({
    identifier: identifier2,
    ...typeAnnotations
  });
  const typeSide = typeSchema_.annotations({
    [AutoTitleAnnotationId]: `${identifier2} (Type side)`,
    ...typeAnnotations
  });
  const constructorSchema = schema.annotations({
    [AutoTitleAnnotationId]: `${identifier2} (Constructor)`,
    ...typeAnnotations
  });
  const encodedSide = schema.annotations({
    [AutoTitleAnnotationId]: `${identifier2} (Encoded side)`,
    ...encodedAnnotations
  });
  const transformationSurrogate = schema.annotations({
    [JSONIdentifierAnnotationId]: identifier2,
    ...encodedAnnotations,
    ...typeAnnotations,
    ...transformationAnnotations
  });
  const fallbackInstanceOf = (u) => hasProperty(u, classSymbol) && is(typeSide)(u);
  const klass = class extends Base3 {
    constructor(props = {}, options = false) {
      props = {
        ...props
      };
      if (kind !== "Class") {
        delete props["_tag"];
      }
      props = lazilyMergeDefaults(fields, props);
      if (!getDisableValidationMakeOption(options)) {
        props = validateSync(constructorSchema)(props);
      }
      super(props, true);
    }
    static [TypeId37] = variance11;
    static get ast() {
      let out = astCache.get(this);
      if (out) {
        return out;
      }
      const declaration = declare([schema], {
        decode: () => (input, _, ast) => input instanceof this || fallbackInstanceOf(input) ? succeed24(input) : fail23(new Type2(ast, input)),
        encode: () => (input, options) => input instanceof this ? succeed24(input) : map37(encodeUnknown(typeSide)(input, options), (props) => new this(props, true))
      }, {
        identifier: identifier2,
        pretty: (pretty6) => (self) => `${identifier2}(${pretty6(self)})`,
        arbitrary: (arb) => (fc) => arb(fc).map((props) => new this(props)),
        equivalence: identity,
        [SurrogateAnnotationId]: declarationSurrogate.ast,
        ...typeAnnotations
      });
      out = transform3(encodedSide, declaration, {
        strict: true,
        decode: (i2) => new this(i2, true),
        encode: identity
      }).annotations({
        [SurrogateAnnotationId]: transformationSurrogate.ast,
        ...transformationAnnotations
      }).ast;
      astCache.set(this, out);
      return out;
    }
    static pipe() {
      return pipeArguments(this, arguments);
    }
    static annotations(annotations4) {
      return make112(this.ast).annotations(annotations4);
    }
    static toString() {
      return `(${String(encodedSide)} <-> ${identifier2})`;
    }
    static make(...args2) {
      return new this(...args2);
    }
    static fields = {
      ...fields
    };
    static identifier = identifier2;
    static extend(identifier3) {
      return (newFieldsOr, annotations4) => {
        const newFields = getFieldsFromFieldsOr(newFieldsOr);
        const newSchema = getSchemaFromFieldsOr(newFieldsOr);
        const extendedFields = extendFields(fields, newFields);
        return makeClass({
          kind,
          identifier: identifier3,
          schema: extend4(schema, newSchema),
          fields: extendedFields,
          Base: this,
          annotations: annotations4
        });
      };
    }
    static transformOrFail(identifier3) {
      return (newFieldsOr, options, annotations4) => {
        const transformedFields = extendFields(fields, newFieldsOr);
        return makeClass({
          kind,
          identifier: identifier3,
          schema: transformOrFail(schema, typeSchema(Struct(transformedFields)), options),
          fields: transformedFields,
          Base: this,
          annotations: annotations4
        });
      };
    }
    static transformOrFailFrom(identifier3) {
      return (newFields, options, annotations4) => {
        const transformedFields = extendFields(fields, newFields);
        return makeClass({
          kind,
          identifier: identifier3,
          schema: transformOrFail(encodedSchema(schema), Struct(transformedFields), options),
          fields: transformedFields,
          Base: this,
          annotations: annotations4
        });
      };
    }
    get [classSymbol]() {
      return classSymbol;
    }
  };
  if (disableToString !== true) {
    Object.defineProperty(klass.prototype, "toString", {
      value() {
        return `${identifier2}({ ${ownKeys(fields).map((p) => `${formatPropertyKey(p)}: ${formatUnknown(this[p])}`).join(", ")} })`;
      },
      configurable: true,
      writable: true
    });
  }
  return klass;
}, FiberIdNoneEncoded, FiberIdRuntimeEncoded, FiberIdCompositeEncoded, FiberIdEncoded, fiberIdArbitrary = (fc) => fc.letrec((tie) => ({
  None: fc.record({
    _tag: fc.constant("None")
  }),
  Runtime: fc.record({
    _tag: fc.constant("Runtime"),
    id: fc.integer(),
    startTimeMillis: fc.integer()
  }),
  Composite: fc.record({
    _tag: fc.constant("Composite"),
    left: tie("FiberId"),
    right: tie("FiberId")
  }),
  FiberId: fc.oneof(tie("None"), tie("Runtime"), tie("Composite"))
})).FiberId.map(fiberIdDecode), fiberIdPretty = (fiberId5) => {
  switch (fiberId5._tag) {
    case "None":
      return "FiberId.none";
    case "Runtime":
      return `FiberId.runtime(${fiberId5.id}, ${fiberId5.startTimeMillis})`;
    case "Composite":
      return `FiberId.composite(${fiberIdPretty(fiberId5.right)}, ${fiberIdPretty(fiberId5.left)})`;
  }
}, FiberIdFromSelf, fiberIdDecode = (input) => {
  switch (input._tag) {
    case "None":
      return none4;
    case "Runtime":
      return runtime2(input.id, input.startTimeMillis);
    case "Composite":
      return composite2(fiberIdDecode(input.left), fiberIdDecode(input.right));
  }
}, fiberIdEncode = (input) => {
  switch (input._tag) {
    case "None":
      return {
        _tag: "None"
      };
    case "Runtime":
      return {
        _tag: "Runtime",
        id: input.id,
        startTimeMillis: input.startTimeMillis
      };
    case "Composite":
      return {
        _tag: "Composite",
        left: fiberIdEncode(input.left),
        right: fiberIdEncode(input.right)
      };
  }
}, FiberId, causeDieEncoded = (defect) => Struct({
  _tag: Literal2("Die"),
  defect
}), CauseEmptyEncoded, causeFailEncoded = (error4) => Struct({
  _tag: Literal2("Fail"),
  error: error4
}), CauseInterruptEncoded, causeEncodedId = 0, causeEncoded = (error4, defect) => {
  const error_ = asSchema(error4);
  const defect_ = asSchema(defect);
  const suspended3 = suspend15(() => out);
  const out = Union2(CauseEmptyEncoded, causeFailEncoded(error_), causeDieEncoded(defect_), CauseInterruptEncoded, Struct({
    _tag: Literal2("Sequential"),
    left: suspended3,
    right: suspended3
  }), Struct({
    _tag: Literal2("Parallel"),
    left: suspended3,
    right: suspended3
  })).annotations({
    title: `CauseEncoded<${format8(error4)}>`,
    [JSONIdentifierAnnotationId]: `CauseEncoded${causeEncodedId++}`
  });
  return out;
}, causeArbitrary = (error4, defect) => (fc) => fc.letrec((tie) => ({
  Empty: fc.record({
    _tag: fc.constant("Empty")
  }),
  Fail: fc.record({
    _tag: fc.constant("Fail"),
    error: error4(fc)
  }),
  Die: fc.record({
    _tag: fc.constant("Die"),
    defect: defect(fc)
  }),
  Interrupt: fc.record({
    _tag: fc.constant("Interrupt"),
    fiberId: fiberIdArbitrary(fc)
  }),
  Sequential: fc.record({
    _tag: fc.constant("Sequential"),
    left: tie("Cause"),
    right: tie("Cause")
  }),
  Parallel: fc.record({
    _tag: fc.constant("Parallel"),
    left: tie("Cause"),
    right: tie("Cause")
  }),
  Cause: fc.oneof(tie("Empty"), tie("Fail"), tie("Die"), tie("Interrupt"), tie("Sequential"), tie("Parallel"))
})).Cause.map(causeDecode), causePretty = (error4) => (cause3) => {
  const f = (cause4) => {
    switch (cause4._tag) {
      case "Empty":
        return "Cause.empty";
      case "Fail":
        return `Cause.fail(${error4(cause4.error)})`;
      case "Die":
        return `Cause.die(${pretty3(cause4)})`;
      case "Interrupt":
        return `Cause.interrupt(${fiberIdPretty(cause4.fiberId)})`;
      case "Sequential":
        return `Cause.sequential(${f(cause4.left)}, ${f(cause4.right)})`;
      case "Parallel":
        return `Cause.parallel(${f(cause4.left)}, ${f(cause4.right)})`;
    }
  };
  return f(cause3);
}, causeParse = (decodeUnknown4) => (u, options, ast) => isCause2(u) ? toComposite(decodeUnknown4(causeEncode(u), options), causeDecode, ast, u) : fail23(new Type2(ast, u)), CauseFromSelf = ({
  defect,
  error: error4
}) => {
  return declare([error4, defect], {
    decode: (error5, defect2) => causeParse(decodeUnknown2(causeEncoded(error5, defect2))),
    encode: (error5, defect2) => causeParse(encodeUnknown(causeEncoded(error5, defect2)))
  }, {
    title: `Cause<${error4.ast}>`,
    pretty: causePretty,
    arbitrary: causeArbitrary
  });
}, Cause = ({
  defect,
  error: error4
}) => {
  const error_ = asSchema(error4);
  const defect_ = asSchema(defect);
  const out = transform3(causeEncoded(error_, defect_), CauseFromSelf({
    error: typeSchema(error_),
    defect: typeSchema(defect_)
  }), {
    strict: false,
    decode: (i2) => causeDecode(i2),
    encode: (a) => causeEncode(a)
  });
  return out;
}, Defect, exitFailureEncoded = (error4, defect) => Struct({
  _tag: Literal2("Failure"),
  cause: causeEncoded(error4, defect)
}), exitSuccessEncoded = (value9) => Struct({
  _tag: Literal2("Success"),
  value: value9
}), exitEncoded = (value9, error4, defect) => {
  return Union2(exitFailureEncoded(error4, defect), exitSuccessEncoded(value9)).annotations({
    title: `ExitEncoded<${format8(value9)}, ${format8(error4)}, ${format8(defect)}>`
  });
}, exitDecode = (input) => {
  switch (input._tag) {
    case "Failure":
      return failCause3(causeDecode(input.cause));
    case "Success":
      return succeed3(input.value);
  }
}, exitArbitrary = (value9, error4, defect) => (fc) => fc.oneof(fc.record({
  _tag: fc.constant("Failure"),
  cause: causeArbitrary(error4, defect)(fc)
}), fc.record({
  _tag: fc.constant("Success"),
  value: value9(fc)
})).map(exitDecode), exitPretty = (value9, error4) => (exit4) => exit4._tag === "Failure" ? `Exit.failCause(${causePretty(error4)(exit4.cause)})` : `Exit.succeed(${value9(exit4.value)})`, exitParse = (decodeUnknownValue, decodeUnknownCause) => (u, options, ast) => isExit(u) ? match7(u, {
  onFailure: (cause3) => toComposite(decodeUnknownCause(cause3, options), failCause3, ast, u),
  onSuccess: (value9) => toComposite(decodeUnknownValue(value9, options), succeed3, ast, u)
}) : fail23(new Type2(ast, u)), ExitFromSelf = ({
  defect,
  failure,
  success
}) => declare([success, failure, defect], {
  decode: (success2, failure2, defect2) => exitParse(decodeUnknown2(success2), decodeUnknown2(CauseFromSelf({
    error: failure2,
    defect: defect2
  }))),
  encode: (success2, failure2, defect2) => exitParse(encodeUnknown(success2), encodeUnknown(CauseFromSelf({
    error: failure2,
    defect: defect2
  })))
}, {
  title: `Exit<${success.ast}, ${failure.ast}>`,
  pretty: exitPretty,
  arbitrary: exitArbitrary
}), Exit = ({
  defect,
  failure,
  success
}) => {
  const success_ = asSchema(success);
  const failure_ = asSchema(failure);
  const defect_ = asSchema(defect);
  const out = transform3(exitEncoded(success_, failure_, defect_), ExitFromSelf({
    failure: typeSchema(failure_),
    success: typeSchema(success_),
    defect: typeSchema(defect_)
  }), {
    strict: false,
    decode: (i2) => exitDecode(i2),
    encode: (a) => a._tag === "Failure" ? {
      _tag: "Failure",
      cause: a.cause
    } : {
      _tag: "Success",
      value: a.value
    }
  });
  return out;
}, hashSetArbitrary = (item, ctx) => (fc) => {
  const items = fc.array(item(fc));
  return (ctx.depthIdentifier !== undefined ? fc.oneof(ctx, fc.constant([]), items) : items).map(fromIterable6);
}, hashSetPretty = (item) => (set16) => `HashSet(${Array.from(set16).map((a) => item(a)).join(", ")})`, hashSetEquivalence = (item) => {
  const arrayEquivalence = getEquivalence5(item);
  return make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));
}, hashSetParse = (decodeUnknown4) => (u, options, ast) => isHashSet2(u) ? toComposite(decodeUnknown4(Array.from(u), options), fromIterable6, ast, u) : fail23(new Type2(ast, u)), HashSetFromSelf = (value9) => {
  return declare([value9], {
    decode: (item) => hashSetParse(decodeUnknown2(Array$(item))),
    encode: (item) => hashSetParse(encodeUnknown(Array$(item)))
  }, {
    description: `HashSet<${format8(value9)}>`,
    pretty: hashSetPretty,
    arbitrary: hashSetArbitrary,
    equivalence: hashSetEquivalence
  });
}, hashMapArbitrary = (key, value9, ctx) => (fc) => {
  const items = fc.array(fc.tuple(key(fc), value9(fc)));
  return (ctx.depthIdentifier !== undefined ? fc.oneof(ctx, fc.constant([]), items) : items).map(fromIterable7);
}, hashMapPretty = (key, value9) => (map42) => `HashMap([${Array.from(map42).map(([k, v]) => `[${key(k)}, ${value9(v)}]`).join(", ")}])`, hashMapEquivalence = (key, value9) => {
  const arrayEquivalence = getEquivalence5(make(([ka, va], [kb, vb]) => key(ka, kb) && value9(va, vb)));
  return make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));
}, hashMapParse = (decodeUnknown4) => (u, options, ast) => isHashMap2(u) ? toComposite(decodeUnknown4(Array.from(u), options), fromIterable7, ast, u) : fail23(new Type2(ast, u)), HashMapFromSelf = ({
  key,
  value: value9
}) => {
  return declare([key, value9], {
    decode: (key2, value10) => hashMapParse(decodeUnknown2(Array$(Tuple(key2, value10)))),
    encode: (key2, value10) => hashMapParse(encodeUnknown(Array$(Tuple(key2, value10))))
  }, {
    description: `HashMap<${format8(key)}, ${format8(value9)}>`,
    pretty: hashMapPretty,
    arbitrary: hashMapArbitrary,
    equivalence: hashMapEquivalence
  });
}, HashMap = ({
  key,
  value: value9
}) => {
  return transform3(Array$(Tuple(key, value9)), HashMapFromSelf({
    key: typeSchema(asSchema(key)),
    value: typeSchema(asSchema(value9))
  }), {
    strict: true,
    decode: (i2) => fromIterable7(i2),
    encode: (a) => Array.from(a)
  });
}, listArbitrary = (item, ctx) => (fc) => {
  const items = fc.array(item(fc));
  return (ctx.depthIdentifier !== undefined ? fc.oneof(ctx, fc.constant([]), items) : items).map(fromIterable8);
}, listPretty = (item) => (set16) => `List(${Array.from(set16).map((a) => item(a)).join(", ")})`, listEquivalence = (item) => {
  const arrayEquivalence = getEquivalence5(item);
  return make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));
}, listParse = (decodeUnknown4) => (u, options, ast) => isList(u) ? toComposite(decodeUnknown4(Array.from(u), options), fromIterable8, ast, u) : fail23(new Type2(ast, u)), ListFromSelf = (value9) => {
  return declare([value9], {
    decode: (item) => listParse(decodeUnknown2(Array$(item))),
    encode: (item) => listParse(encodeUnknown(Array$(item)))
  }, {
    description: `List<${format8(value9)}>`,
    pretty: listPretty,
    arbitrary: listArbitrary,
    equivalence: listEquivalence
  });
}, sortedSetArbitrary = (item, ord, ctx) => (fc) => {
  const items = fc.array(item(fc));
  return (ctx.depthIdentifier !== undefined ? fc.oneof(ctx, fc.constant([]), items) : items).map((as16) => fromIterable14(as16, ord));
}, sortedSetPretty = (item) => (set16) => `new SortedSet([${Array.from(values9(set16)).map((a) => item(a)).join(", ")}])`, sortedSetParse = (decodeUnknown4, ord) => (u, options, ast) => isSortedSet(u) ? toComposite(decodeUnknown4(Array.from(values9(u)), options), (as16) => fromIterable14(as16, ord), ast, u) : fail23(new Type2(ast, u)), SortedSetFromSelf = (value9, ordA, ordI) => {
  return declare([value9], {
    decode: (item) => sortedSetParse(decodeUnknown2(Array$(item)), ordA),
    encode: (item) => sortedSetParse(encodeUnknown(Array$(item)), ordI)
  }, {
    description: `SortedSet<${format8(value9)}>`,
    pretty: sortedSetPretty,
    arbitrary: (arb, ctx) => sortedSetArbitrary(arb, ordA, ctx),
    equivalence: () => getEquivalence8()
  });
}, BooleanFromUnknown, BooleanFromString, Config2 = (name, schema) => {
  const decodeUnknownEither3 = decodeUnknownEither(schema);
  return string6(name).pipe(mapOrFail2((s) => decodeUnknownEither3(s).pipe(mapLeft((error4) => InvalidData2([], TreeFormatter.formatIssueSync(error4))))));
}, symbolSerializable, asSerializable = (serializable) => serializable, serializableSchema = (self) => self[symbolSerializable], serialize = (self) => encodeUnknown2(self[symbolSerializable])(self), deserialize, symbolWithResult, asWithResult = (withExit) => withExit, failureSchema = (self) => self[symbolWithResult].failure, successSchema = (self) => self[symbolWithResult].success, exitSchemaCache, exitSchema = (self) => {
  const proto16 = Object.getPrototypeOf(self);
  if (!(symbolWithResult in proto16)) {
    return Exit({
      failure: failureSchema(self),
      success: successSchema(self),
      defect: Defect
    });
  }
  let schema = exitSchemaCache.get(proto16);
  if (schema === undefined) {
    schema = Exit({
      failure: failureSchema(self),
      success: successSchema(self),
      defect: Defect
    });
    exitSchemaCache.set(proto16, schema);
  }
  return schema;
}, serializeFailure, deserializeFailure, serializeSuccess, deserializeSuccess, serializeExit, deserializeExit, asSerializableWithResult = (procedure) => procedure, TaggedRequest = (identifier2) => (tag5, options, annotations3) => {
  const taggedFields = extendFields({
    _tag: getClassTag(tag5)
  }, options.payload);
  return class TaggedRequestClass extends makeClass({
    kind: "TaggedRequest",
    identifier: identifier2 ?? tag5,
    schema: Struct(taggedFields),
    fields: taggedFields,
    Base: Class5,
    annotations: annotations3
  }) {
    static _tag = tag5;
    static success = options.success;
    static failure = options.failure;
    get [symbolSerializable]() {
      return this.constructor;
    }
    get [symbolWithResult]() {
      return {
        failure: options.failure,
        success: options.success
      };
    }
  };
}, equivalence2 = (schema) => go4(schema.ast, []), getEquivalenceAnnotation, go4 = (ast, path) => {
  const hook = getEquivalenceAnnotation(ast);
  if (isSome2(hook)) {
    switch (ast._tag) {
      case "Declaration":
        return hook.value(...ast.typeParameters.map((tp) => go4(tp, path)));
      case "Refinement":
        return hook.value(go4(ast.from, path));
      default:
        return hook.value();
    }
  }
  switch (ast._tag) {
    case "NeverKeyword":
      throw new Error(getEquivalenceUnsupportedErrorMessage(ast, path));
    case "Transformation":
      return go4(ast.to, path);
    case "Declaration":
    case "Literal":
    case "StringKeyword":
    case "TemplateLiteral":
    case "UniqueSymbol":
    case "SymbolKeyword":
    case "UnknownKeyword":
    case "AnyKeyword":
    case "NumberKeyword":
    case "BooleanKeyword":
    case "BigIntKeyword":
    case "UndefinedKeyword":
    case "VoidKeyword":
    case "Enums":
    case "ObjectKeyword":
      return equals;
    case "Refinement":
      return go4(ast.from, path);
    case "Suspend": {
      const get33 = memoizeThunk(() => go4(ast.f(), path));
      return (a, b) => get33()(a, b);
    }
    case "TupleType": {
      const elements = ast.elements.map((element2, i2) => go4(element2.type, path.concat(i2)));
      const rest = ast.rest.map((annotatedAST) => go4(annotatedAST.type, path));
      return make((a, b) => {
        const len = a.length;
        if (len !== b.length) {
          return false;
        }
        let i2 = 0;
        for (;i2 < Math.min(len, ast.elements.length); i2++) {
          if (!elements[i2](a[i2], b[i2])) {
            return false;
          }
        }
        if (isNonEmptyReadonlyArray(rest)) {
          const [head12, ...tail5] = rest;
          for (;i2 < len - tail5.length; i2++) {
            if (!head12(a[i2], b[i2])) {
              return false;
            }
          }
          for (let j = 0;j < tail5.length; j++) {
            i2 += j;
            if (!tail5[j](a[i2], b[i2])) {
              return false;
            }
          }
        }
        return true;
      });
    }
    case "TypeLiteral": {
      if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {
        return equals;
      }
      const propertySignatures = ast.propertySignatures.map((ps) => go4(ps.type, path.concat(ps.name)));
      const indexSignatures = ast.indexSignatures.map((is4) => go4(is4.type, path));
      return make((a, b) => {
        const aStringKeys = Object.keys(a);
        const aSymbolKeys = Object.getOwnPropertySymbols(a);
        for (let i2 = 0;i2 < propertySignatures.length; i2++) {
          const ps = ast.propertySignatures[i2];
          const name = ps.name;
          const aHas = Object.prototype.hasOwnProperty.call(a, name);
          const bHas = Object.prototype.hasOwnProperty.call(b, name);
          if (ps.isOptional) {
            if (aHas !== bHas) {
              return false;
            }
          }
          if (aHas && bHas && !propertySignatures[i2](a[name], b[name])) {
            return false;
          }
        }
        let bSymbolKeys;
        let bStringKeys;
        for (let i2 = 0;i2 < indexSignatures.length; i2++) {
          const is4 = ast.indexSignatures[i2];
          const encodedParameter = getEncodedParameter(is4.parameter);
          const isSymbol2 = isSymbolKeyword(encodedParameter);
          if (isSymbol2) {
            bSymbolKeys = bSymbolKeys || Object.getOwnPropertySymbols(b);
            if (aSymbolKeys.length !== bSymbolKeys.length) {
              return false;
            }
          } else {
            bStringKeys = bStringKeys || Object.keys(b);
            if (aStringKeys.length !== bStringKeys.length) {
              return false;
            }
          }
          const aKeys = isSymbol2 ? aSymbolKeys : aStringKeys;
          for (let j = 0;j < aKeys.length; j++) {
            const key = aKeys[j];
            if (!Object.prototype.hasOwnProperty.call(b, key) || !indexSignatures[i2](a[key], b[key])) {
              return false;
            }
          }
        }
        return true;
      });
    }
    case "Union": {
      const searchTree = getSearchTree(ast.types, true);
      const ownKeys2 = ownKeys(searchTree.keys);
      const len = ownKeys2.length;
      return make((a, b) => {
        let candidates = [];
        if (len > 0 && isRecordOrArray(a)) {
          for (let i2 = 0;i2 < len; i2++) {
            const name = ownKeys2[i2];
            const buckets = searchTree.keys[name].buckets;
            if (Object.prototype.hasOwnProperty.call(a, name)) {
              const literal3 = String(a[name]);
              if (Object.prototype.hasOwnProperty.call(buckets, literal3)) {
                candidates = candidates.concat(buckets[literal3]);
              }
            }
          }
        }
        if (searchTree.otherwise.length > 0) {
          candidates = candidates.concat(searchTree.otherwise);
        }
        const tuples = candidates.map((ast2) => [go4(ast2, path), is({
          ast: ast2
        })]);
        for (let i2 = 0;i2 < tuples.length; i2++) {
          const [equivalence3, is4] = tuples[i2];
          if (is4(a) && is4(b)) {
            if (equivalence3(a, b)) {
              return true;
            }
          }
        }
        return false;
      });
    }
  }
}, SymbolStruct, SymbolFromStruct, PropertyKey$, ArrayFormatterIssue;
var init_Schema = __esm(() => {
  init_Array();
  init_BigDecimal();
  init_BigInt();
  init_Boolean();
  init_Cause();
  init_Chunk();
  init_Config();
  init_ConfigError();
  init_Data();
  init_DateTime();
  init_Duration();
  init_Effect();
  init_Either();
  init_Encoding();
  init_Equal();
  init_Equivalence();
  init_Exit();
  init_FastCheck();
  init_FiberId();
  init_Function();
  init_GlobalValue();
  init_HashMap();
  init_HashSet();
  init_cause();
  init_errors();
  init_schemaId();
  init_util();
  init_List();
  init_Number();
  init_Option();
  init_ParseResult();
  init_Predicate();
  init_Redacted();
  init_Request();
  init_Scheduler();
  init_SchemaAST();
  init_SortedSet();
  init_String();
  init_Struct();
  init_ParseResult();
  TypeId37 = /* @__PURE__ */ Symbol.for("effect/Schema");
  variance11 = {
    _A: (_) => _,
    _I: (_) => _,
    _R: (_) => _
  };
  builtInAnnotations = {
    schemaId: SchemaIdAnnotationId,
    message: MessageAnnotationId,
    missingMessage: MissingMessageAnnotationId,
    identifier: IdentifierAnnotationId,
    title: TitleAnnotationId,
    description: DescriptionAnnotationId,
    examples: ExamplesAnnotationId,
    default: DefaultAnnotationId,
    documentation: DocumentationAnnotationId,
    jsonSchema: JSONSchemaAnnotationId,
    arbitrary: ArbitraryAnnotationId,
    pretty: PrettyAnnotationId,
    equivalence: EquivalenceAnnotationId,
    concurrency: ConcurrencyAnnotationId,
    batching: BatchingAnnotationId,
    parseIssueTitle: ParseIssueTitleAnnotationId,
    parseOptions: ParseOptionsAnnotationId,
    decodingFallback: DecodingFallbackAnnotationId
  };
  encode5 = encodeUnknown2;
  encodeEither2 = encodeUnknownEither2;
  encodePromise2 = encodeUnknownPromise2;
  decode6 = decodeUnknown3;
  decodeEither2 = decodeUnknownEither2;
  decodePromise2 = decodeUnknownPromise2;
  BrandSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Brand");
  InstanceOfSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/InstanceOf");
  Undefined = class Undefined extends (/* @__PURE__ */ make112(undefinedKeyword)) {
  };
  Void = class Void extends (/* @__PURE__ */ make112(voidKeyword)) {
  };
  Null = class Null extends (/* @__PURE__ */ make112($null)) {
  };
  Never = class Never extends (/* @__PURE__ */ make112(neverKeyword)) {
  };
  Unknown = class Unknown extends (/* @__PURE__ */ make112(unknownKeyword)) {
  };
  Any = class Any extends (/* @__PURE__ */ make112(anyKeyword)) {
  };
  BigIntFromSelf = class BigIntFromSelf extends (/* @__PURE__ */ make112(bigIntKeyword)) {
  };
  SymbolFromSelf = class SymbolFromSelf extends (/* @__PURE__ */ make112(symbolKeyword)) {
  };
  String$ = class String$ extends (/* @__PURE__ */ make112(stringKeyword)) {
  };
  Number$ = class Number$ extends (/* @__PURE__ */ make112(numberKeyword)) {
  };
  Boolean$ = class Boolean$ extends (/* @__PURE__ */ make112(booleanKeyword)) {
  };
  Object$ = class Object$ extends (/* @__PURE__ */ make112(objectKeyword)) {
  };
  ElementImpl = class ElementImpl {
    ast;
    from;
    [TypeId37];
    _Token;
    constructor(ast, from) {
      this.ast = ast;
      this.from = from;
    }
    annotations(annotations2) {
      return new ElementImpl(new OptionalType(this.ast.type, this.ast.isOptional, {
        ...this.ast.annotations,
        ...toASTAnnotations(annotations2)
      }), this.from);
    }
    toString() {
      return `${this.ast.type}${this.ast.isOptional ? "?" : ""}`;
    }
  };
  PropertySignatureDeclaration = class PropertySignatureDeclaration extends OptionalType {
    isReadonly;
    defaultValue;
    _tag = "PropertySignatureDeclaration";
    constructor(type3, isOptional, isReadonly, annotations2, defaultValue) {
      super(type3, isOptional, annotations2);
      this.isReadonly = isReadonly;
      this.defaultValue = defaultValue;
    }
    toString() {
      const token = formatPropertySignatureToken(this.isOptional);
      const type3 = String(this.type);
      return `PropertySignature<${token}, ${type3}, never, ${token}, ${type3}>`;
    }
  };
  FromPropertySignature = class FromPropertySignature extends OptionalType {
    isReadonly;
    fromKey;
    constructor(type3, isOptional, isReadonly, annotations2, fromKey) {
      super(type3, isOptional, annotations2);
      this.isReadonly = isReadonly;
      this.fromKey = fromKey;
    }
  };
  ToPropertySignature = class ToPropertySignature extends OptionalType {
    isReadonly;
    defaultValue;
    constructor(type3, isOptional, isReadonly, annotations2, defaultValue) {
      super(type3, isOptional, annotations2);
      this.isReadonly = isReadonly;
      this.defaultValue = defaultValue;
    }
  };
  PropertySignatureTypeId = /* @__PURE__ */ Symbol.for("effect/PropertySignature");
  PropertySignatureImpl = class PropertySignatureImpl {
    ast;
    [TypeId37];
    [PropertySignatureTypeId] = null;
    _TypeToken;
    _Key;
    _EncodedToken;
    _HasDefault;
    constructor(ast) {
      this.ast = ast;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    annotations(annotations2) {
      return new PropertySignatureImpl(mergeSignatureAnnotations(this.ast, toASTAnnotations(annotations2)));
    }
    toString() {
      return String(this.ast);
    }
  };
  PropertySignatureWithFromImpl = class PropertySignatureWithFromImpl extends PropertySignatureImpl {
    from;
    constructor(ast, from) {
      super(ast);
      this.from = from;
    }
    annotations(annotations2) {
      return new PropertySignatureWithFromImpl(mergeSignatureAnnotations(this.ast, toASTAnnotations(annotations2)), this.from);
    }
  };
  withConstructorDefault = /* @__PURE__ */ dual(2, (self, defaultValue) => {
    const ast = self.ast;
    switch (ast._tag) {
      case "PropertySignatureDeclaration":
        return makePropertySignature(new PropertySignatureDeclaration(ast.type, ast.isOptional, ast.isReadonly, ast.annotations, defaultValue));
      case "PropertySignatureTransformation":
        return makePropertySignature(new PropertySignatureTransformation2(ast.from, new ToPropertySignature(ast.to.type, ast.to.isOptional, ast.to.isReadonly, ast.to.annotations, defaultValue), ast.decode, ast.encode));
    }
  });
  withDecodingDefault = /* @__PURE__ */ dual(2, (self, defaultValue) => {
    const ast = self.ast;
    switch (ast._tag) {
      case "PropertySignatureDeclaration": {
        const to = typeAST(ast.type);
        return makePropertySignature(new PropertySignatureTransformation2(new FromPropertySignature(ast.type, ast.isOptional, ast.isReadonly, ast.annotations), new ToPropertySignature(pruneUndefined3(to) ?? to, false, true, {}, ast.defaultValue), (o) => applyDefaultValue(o, defaultValue), identity));
      }
      case "PropertySignatureTransformation": {
        const to = ast.to.type;
        return makePropertySignature(new PropertySignatureTransformation2(ast.from, new ToPropertySignature(pruneUndefined3(to) ?? to, false, ast.to.isReadonly, ast.to.annotations, ast.to.defaultValue), (o) => applyDefaultValue(ast.decode(o), defaultValue), ast.encode));
      }
    }
  });
  withDefaults = /* @__PURE__ */ dual(2, (self, defaults) => self.pipe(withDecodingDefault(defaults.decoding), withConstructorDefault(defaults.constructor)));
  fromKey = /* @__PURE__ */ dual(2, (self, key) => {
    const ast = self.ast;
    switch (ast._tag) {
      case "PropertySignatureDeclaration": {
        return makePropertySignature(new PropertySignatureTransformation2(new FromPropertySignature(ast.type, ast.isOptional, ast.isReadonly, ast.annotations, key), new ToPropertySignature(typeAST(ast.type), ast.isOptional, ast.isReadonly, {}, ast.defaultValue), identity, identity));
      }
      case "PropertySignatureTransformation":
        return makePropertySignature(new PropertySignatureTransformation2(new FromPropertySignature(ast.from.type, ast.from.isOptional, ast.from.isReadonly, ast.from.annotations, key), ast.to, ast.decode, ast.encode));
    }
  });
  optionalWith = /* @__PURE__ */ dual((args2) => isSchema(args2[0]), (self, options) => {
    return new PropertySignatureWithFromImpl(optionalPropertySignatureAST(self, options), self);
  });
  preserveMissingMessageAnnotation = /* @__PURE__ */ pickAnnotations([MissingMessageAnnotationId]);
  pluck = /* @__PURE__ */ dual(2, (schema, key) => {
    const ps = getPropertyKeyIndexedAccess(typeAST(schema.ast), key);
    const value9 = make112(ps.isOptional ? orUndefined(ps.type) : ps.type);
    const out = transform3(schema.pipe(pick5(key)), value9, {
      strict: true,
      decode: (i2) => i2[key],
      encode: (a) => ps.isOptional && a === undefined ? {} : {
        [key]: a
      }
    });
    return out;
  });
  partialWith = /* @__PURE__ */ dual((args2) => isSchema(args2[0]), (self, options) => make112(partial(self.ast, options)));
  preserveRefinementAnnotations = /* @__PURE__ */ omitAnnotations([IdentifierAnnotationId]);
  extend4 = /* @__PURE__ */ dual(2, (self, that) => make112(extendAST(self.ast, that.ast, [])));
  compose6 = /* @__PURE__ */ dual((args2) => isSchema(args2[1]), (from, to) => makeTransformationClass(from, to, compose3(from.ast, to.ast)));
  RefineSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Refine");
  filterEffect2 = /* @__PURE__ */ dual(2, (self, f) => transformOrFail(self, typeSchema(self), {
    strict: true,
    decode: (i2, options, ast) => flatMap25(f(i2, options, ast), (filterReturnType) => match2(toFilterParseIssue(filterReturnType, ast, i2), {
      onNone: () => succeed24(i2),
      onSome: fail23
    })),
    encode: (a) => succeed24(a)
  }));
  transformOrFail = /* @__PURE__ */ dual((args2) => isSchema(args2[0]) && isSchema(args2[1]), (from, to, options) => makeTransformationClass(from, to, new Transformation(from.ast, to.ast, new FinalTransformation(options.decode, options.encode))));
  transform3 = /* @__PURE__ */ dual((args2) => isSchema(args2[0]) && isSchema(args2[1]), (from, to, options) => transformOrFail(from, to, {
    strict: true,
    decode: (fromA, _options, _ast, toA) => succeed24(options.decode(fromA, toA)),
    encode: (toI, _options, _ast, toA) => succeed24(options.encode(toI, toA))
  }));
  attachPropertySignature = /* @__PURE__ */ dual((args2) => isSchema(args2[0]), (schema, key, value9, annotations2) => {
    const ast = extend4(typeSchema(schema), Struct({
      [key]: isSymbol(value9) ? UniqueSymbolFromSelf(value9) : Literal2(value9)
    })).ast;
    return make112(new Transformation(schema.ast, annotations2 ? mergeSchemaAnnotations(ast, annotations2) : ast, new TypeLiteralTransformation([new PropertySignatureTransformation(key, key, () => some3(value9), () => none2())])));
  });
  annotations2 = /* @__PURE__ */ dual(2, (self, annotations3) => self.annotations(annotations3));
  rename2 = /* @__PURE__ */ dual(2, (self, mapping) => make112(rename(self.ast, mapping)));
  TrimmedSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Trimmed");
  MaxLengthSchemaId2 = MaxLengthSchemaId;
  MinLengthSchemaId2 = MinLengthSchemaId;
  LengthSchemaId2 = LengthSchemaId;
  PatternSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Pattern");
  StartsWithSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/StartsWith");
  EndsWithSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/EndsWith");
  IncludesSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Includes");
  LowercasedSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Lowercased");
  Lowercased = class Lowercased extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ lowercased({
    identifier: "Lowercased"
  }))) {
  };
  UppercasedSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Uppercased");
  Uppercased = class Uppercased extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ uppercased({
    identifier: "Uppercased"
  }))) {
  };
  CapitalizedSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Capitalized");
  Capitalized = class Capitalized extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ capitalized({
    identifier: "Capitalized"
  }))) {
  };
  UncapitalizedSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/Uncapitalized");
  Uncapitalized = class Uncapitalized extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ uncapitalized({
    identifier: "Uncapitalized"
  }))) {
  };
  Char = class Char extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ length5(1, {
    identifier: "Char"
  }))) {
  };
  Lowercase = class Lowercase extends (/* @__PURE__ */ transform3(String$.annotations({
    description: "a string that will be converted to lowercase"
  }), Lowercased, {
    strict: true,
    decode: (i2) => i2.toLowerCase(),
    encode: identity
  }).annotations({
    identifier: "Lowercase"
  })) {
  };
  Uppercase = class Uppercase extends (/* @__PURE__ */ transform3(String$.annotations({
    description: "a string that will be converted to uppercase"
  }), Uppercased, {
    strict: true,
    decode: (i2) => i2.toUpperCase(),
    encode: identity
  }).annotations({
    identifier: "Uppercase"
  })) {
  };
  Capitalize = class Capitalize extends (/* @__PURE__ */ transform3(String$.annotations({
    description: "a string that will be converted to a capitalized format"
  }), Capitalized, {
    strict: true,
    decode: (i2) => capitalize(i2),
    encode: identity
  }).annotations({
    identifier: "Capitalize"
  })) {
  };
  Uncapitalize = class Uncapitalize extends (/* @__PURE__ */ transform3(String$.annotations({
    description: "a string that will be converted to an uncapitalized format"
  }), Uncapitalized, {
    strict: true,
    decode: (i2) => uncapitalize(i2),
    encode: identity
  }).annotations({
    identifier: "Uncapitalize"
  })) {
  };
  Trimmed = class Trimmed extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ trimmed({
    identifier: "Trimmed"
  }))) {
  };
  NonEmptyTrimmedString = class NonEmptyTrimmedString extends (/* @__PURE__ */ Trimmed.pipe(/* @__PURE__ */ nonEmptyString5({
    identifier: "NonEmptyTrimmedString"
  }))) {
  };
  Trim = class Trim extends (/* @__PURE__ */ transform3(String$.annotations({
    description: "a string that will be trimmed"
  }), Trimmed, {
    strict: true,
    decode: (i2) => i2.trim(),
    encode: identity
  }).annotations({
    identifier: "Trim"
  })) {
  };
  NonEmptyString = class NonEmptyString extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ nonEmptyString5({
    identifier: "NonEmptyString"
  }))) {
  };
  UUIDSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/UUID");
  uuidRegexp = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
  UUID = class UUID extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ pattern(uuidRegexp, {
    schemaId: UUIDSchemaId,
    identifier: "UUID",
    jsonSchema: {
      format: "uuid",
      pattern: uuidRegexp.source
    },
    description: "a Universally Unique Identifier",
    arbitrary: () => (fc) => fc.uuid()
  }))) {
  };
  ULIDSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/ULID");
  ulidRegexp = /^[0-7][0-9A-HJKMNP-TV-Z]{25}$/i;
  ULID = class ULID extends (/* @__PURE__ */ String$.pipe(/* @__PURE__ */ pattern(ulidRegexp, {
    schemaId: ULIDSchemaId,
    identifier: "ULID",
    description: "a Universally Unique Lexicographically Sortable Identifier",
    arbitrary: () => (fc) => fc.ulid()
  }))) {
  };
  URLFromSelf = class URLFromSelf extends (/* @__PURE__ */ instanceOf3(URL, {
    identifier: "URLFromSelf",
    arbitrary: () => (fc) => fc.webUrl().map((s) => new URL(s)),
    pretty: () => (url3) => url3.toString()
  })) {
  };
  URL$ = class URL$ extends (/* @__PURE__ */ transformOrFail(String$.annotations({
    description: "a string to be decoded into a URL"
  }), URLFromSelf, {
    strict: true,
    decode: (i2, _, ast) => _try({
      try: () => new URL(i2),
      catch: (e) => new Type2(ast, i2, `Unable to decode ${JSON.stringify(i2)} into a URL. ${getErrorMessage2(e)}`)
    }),
    encode: (a) => succeed24(a.toString())
  }).annotations({
    identifier: "URL",
    pretty: () => (url3) => url3.toString()
  })) {
  };
  FiniteSchemaId2 = FiniteSchemaId;
  GreaterThanSchemaId2 = GreaterThanSchemaId;
  GreaterThanOrEqualToSchemaId2 = GreaterThanOrEqualToSchemaId;
  MultipleOfSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/MultipleOf");
  IntSchemaId2 = IntSchemaId;
  LessThanSchemaId2 = LessThanSchemaId;
  LessThanOrEqualToSchemaId2 = LessThanOrEqualToSchemaId;
  BetweenSchemaId2 = BetweenSchemaId;
  NonNaNSchemaId2 = NonNaNSchemaId;
  NumberFromString = class NumberFromString extends (/* @__PURE__ */ parseNumber(String$.annotations({
    description: "a string to be decoded into a number"
  })).annotations({
    identifier: "NumberFromString"
  })) {
  };
  Finite = class Finite extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ finite({
    identifier: "Finite"
  }))) {
  };
  Int = class Int extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ int({
    identifier: "Int"
  }))) {
  };
  NonNaN = class NonNaN extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ nonNaN({
    identifier: "NonNaN"
  }))) {
  };
  Positive = class Positive extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ positive({
    identifier: "Positive"
  }))) {
  };
  Negative = class Negative extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ negative({
    identifier: "Negative"
  }))) {
  };
  NonPositive = class NonPositive extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ nonPositive({
    identifier: "NonPositive"
  }))) {
  };
  NonNegative = class NonNegative extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ nonNegative({
    identifier: "NonNegative"
  }))) {
  };
  JsonNumberSchemaId2 = JsonNumberSchemaId;
  JsonNumber = class JsonNumber extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ finite({
    schemaId: JsonNumberSchemaId2,
    identifier: "JsonNumber"
  }))) {
  };
  Not = class Not extends (/* @__PURE__ */ transform3(/* @__PURE__ */ Boolean$.annotations({
    description: "a boolean that will be negated"
  }), Boolean$, {
    strict: true,
    decode: (i2) => not2(i2),
    encode: (a) => not2(a)
  })) {
  };
  Symbol$ = class Symbol$ extends (/* @__PURE__ */ transformOrFail(String$.annotations({
    description: "a string to be decoded into a globally shared symbol"
  }), SymbolFromSelf, {
    strict: false,
    decode: (i2) => decodeSymbol(i2),
    encode: (a, _, ast) => encodeSymbol2(a, ast)
  }).annotations({
    identifier: "Symbol"
  })) {
  };
  GreaterThanBigIntSchemaId = GreaterThanBigintSchemaId;
  GreaterThanOrEqualToBigIntSchemaId2 = GreaterThanOrEqualToBigIntSchemaId;
  LessThanBigIntSchemaId2 = LessThanBigIntSchemaId;
  LessThanOrEqualToBigIntSchemaId2 = LessThanOrEqualToBigIntSchemaId;
  BetweenBigIntSchemaId = BetweenBigintSchemaId;
  BigInt$ = class BigInt$ extends (/* @__PURE__ */ transformOrFail(String$.annotations({
    description: "a string to be decoded into a bigint"
  }), BigIntFromSelf, {
    strict: true,
    decode: (i2, _, ast) => fromOption9(fromString2(i2), () => new Type2(ast, i2, `Unable to decode ${JSON.stringify(i2)} into a bigint`)),
    encode: (a) => succeed24(String(a))
  }).annotations({
    identifier: "BigInt"
  })) {
  };
  PositiveBigIntFromSelf = /* @__PURE__ */ BigIntFromSelf.pipe(/* @__PURE__ */ positiveBigInt({
    identifier: "PositiveBigintFromSelf"
  }));
  PositiveBigInt = /* @__PURE__ */ BigInt$.pipe(/* @__PURE__ */ positiveBigInt({
    identifier: "PositiveBigint"
  }));
  NegativeBigIntFromSelf = /* @__PURE__ */ BigIntFromSelf.pipe(/* @__PURE__ */ negativeBigInt({
    identifier: "NegativeBigintFromSelf"
  }));
  NegativeBigInt = /* @__PURE__ */ BigInt$.pipe(/* @__PURE__ */ negativeBigInt({
    identifier: "NegativeBigint"
  }));
  NonPositiveBigIntFromSelf = /* @__PURE__ */ BigIntFromSelf.pipe(/* @__PURE__ */ nonPositiveBigInt({
    identifier: "NonPositiveBigintFromSelf"
  }));
  NonPositiveBigInt = /* @__PURE__ */ BigInt$.pipe(/* @__PURE__ */ nonPositiveBigInt({
    identifier: "NonPositiveBigint"
  }));
  NonNegativeBigIntFromSelf = /* @__PURE__ */ BigIntFromSelf.pipe(/* @__PURE__ */ nonNegativeBigInt({
    identifier: "NonNegativeBigintFromSelf"
  }));
  NonNegativeBigInt = /* @__PURE__ */ BigInt$.pipe(/* @__PURE__ */ nonNegativeBigInt({
    identifier: "NonNegativeBigint"
  }));
  BigIntFromNumber = class BigIntFromNumber extends (/* @__PURE__ */ transformOrFail(Number$.annotations({
    description: "a number to be decoded into a bigint"
  }), BigIntFromSelf.pipe(betweenBigInt(BigInt(Number.MIN_SAFE_INTEGER), BigInt(Number.MAX_SAFE_INTEGER))), {
    strict: true,
    decode: (i2, _, ast) => fromOption9(fromNumber2(i2), () => new Type2(ast, i2, `Unable to decode ${i2} into a bigint`)),
    encode: (a, _, ast) => fromOption9(toNumber(a), () => new Type2(ast, a, `Unable to encode ${a}n into a number`))
  }).annotations({
    identifier: "BigIntFromNumber"
  })) {
  };
  DurationFromSelf = class DurationFromSelf extends (/* @__PURE__ */ declare(isDuration, {
    identifier: "DurationFromSelf",
    pretty: () => String,
    arbitrary: () => (fc) => fc.oneof(fc.constant(infinity), fc.bigInt({
      min: 0n
    }).map((_) => nanos(_)), fc.maxSafeNat().map((_) => millis(_))),
    equivalence: () => Equivalence5
  })) {
  };
  DurationFromNanos = class DurationFromNanos extends (/* @__PURE__ */ transformOrFail(NonNegativeBigIntFromSelf.annotations({
    description: "a bigint to be decoded into a Duration"
  }), DurationFromSelf.pipe(filter22((duration5) => isFinite2(duration5), {
    description: "a finite duration"
  })), {
    strict: true,
    decode: (i2) => succeed24(nanos(i2)),
    encode: (a, _, ast) => match2(toNanos(a), {
      onNone: () => fail23(new Type2(ast, a, `Unable to encode ${a} into a bigint`)),
      onSome: (nanos2) => succeed24(nanos2)
    })
  }).annotations({
    identifier: "DurationFromNanos"
  })) {
  };
  NonNegativeInt = /* @__PURE__ */ NonNegative.pipe(int()).annotations({
    identifier: "NonNegativeInt"
  });
  DurationFromMillis = class DurationFromMillis extends (/* @__PURE__ */ transform3(NonNegative.annotations({
    description: "a non-negative number to be decoded into a Duration"
  }), DurationFromSelf, {
    strict: true,
    decode: (i2) => millis(i2),
    encode: (a) => toMillis(a)
  }).annotations({
    identifier: "DurationFromMillis"
  })) {
  };
  DurationValueMillis = /* @__PURE__ */ TaggedStruct("Millis", {
    millis: NonNegativeInt
  });
  DurationValueNanos = /* @__PURE__ */ TaggedStruct("Nanos", {
    nanos: BigInt$
  });
  DurationValueInfinity = /* @__PURE__ */ TaggedStruct("Infinity", {});
  durationValueInfinity = /* @__PURE__ */ DurationValueInfinity.make({});
  DurationValue = /* @__PURE__ */ Union2(DurationValueMillis, DurationValueNanos, DurationValueInfinity).annotations({
    identifier: "DurationValue",
    description: "an JSON-compatible tagged union to be decoded into a Duration"
  });
  FiniteHRTime = /* @__PURE__ */ Tuple(element(NonNegativeInt).annotations({
    title: "seconds"
  }), element(NonNegativeInt).annotations({
    title: "nanos"
  })).annotations({
    identifier: "FiniteHRTime"
  });
  InfiniteHRTime = /* @__PURE__ */ Tuple(Literal2(-1), Literal2(0)).annotations({
    identifier: "InfiniteHRTime"
  });
  HRTime = /* @__PURE__ */ Union2(FiniteHRTime, InfiniteHRTime).annotations({
    identifier: "HRTime",
    description: "a tuple of seconds and nanos to be decoded into a Duration"
  });
  Duration = class Duration extends (/* @__PURE__ */ transform3(Union2(DurationValue, HRTime), DurationFromSelf, {
    strict: true,
    decode: (i2) => {
      if (isDurationValue(i2)) {
        switch (i2._tag) {
          case "Millis":
            return millis(i2.millis);
          case "Nanos":
            return nanos(i2.nanos);
          case "Infinity":
            return infinity;
        }
      }
      const [seconds2, nanos2] = i2;
      return seconds2 === -1 ? infinity : nanos(BigInt(seconds2) * BigInt(1e9) + BigInt(nanos2));
    },
    encode: (a) => {
      switch (a.value._tag) {
        case "Millis":
          return DurationValueMillis.make({
            millis: a.value.millis
          });
        case "Nanos":
          return DurationValueNanos.make({
            nanos: a.value.nanos
          });
        case "Infinity":
          return durationValueInfinity;
      }
    }
  }).annotations({
    identifier: "Duration"
  })) {
  };
  LessThanDurationSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/LessThanDuration");
  LessThanOrEqualToDurationSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/LessThanOrEqualToDuration");
  GreaterThanDurationSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/GreaterThanDuration");
  GreaterThanOrEqualToDurationSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/GreaterThanOrEqualToDuration");
  BetweenDurationSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/BetweenDuration");
  Uint8ArrayFromSelf = class Uint8ArrayFromSelf extends (/* @__PURE__ */ declare(isUint8Array, {
    identifier: "Uint8ArrayFromSelf",
    pretty: () => (u8arr) => `new Uint8Array(${JSON.stringify(Array.from(u8arr))})`,
    arbitrary: () => (fc) => fc.uint8Array(),
    equivalence: () => getEquivalence5(equals)
  })) {
  };
  Uint8 = class Uint8 extends (/* @__PURE__ */ Number$.pipe(/* @__PURE__ */ between8(0, 255, {
    identifier: "Uint8",
    description: "a 8-bit unsigned integer"
  }))) {
  };
  Uint8Array$ = class Uint8Array$ extends (/* @__PURE__ */ transform3(Array$(Uint8).annotations({
    description: "an array of 8-bit unsigned integers to be decoded into a Uint8Array"
  }), Uint8ArrayFromSelf, {
    strict: true,
    decode: (i2) => Uint8Array.from(i2),
    encode: (a) => Array.from(a)
  }).annotations({
    identifier: "Uint8Array"
  })) {
  };
  Uint8ArrayFromBase64 = /* @__PURE__ */ makeUint8ArrayTransformation("Uint8ArrayFromBase64", decodeBase64, encodeBase64);
  Uint8ArrayFromBase64Url = /* @__PURE__ */ makeUint8ArrayTransformation("Uint8ArrayFromBase64Url", decodeBase64Url, encodeBase64Url);
  Uint8ArrayFromHex = /* @__PURE__ */ makeUint8ArrayTransformation("Uint8ArrayFromHex", decodeHex, encodeHex);
  StringFromBase64 = /* @__PURE__ */ makeEncodingTransformation("Base64", decodeBase64String, encodeBase64);
  StringFromBase64Url = /* @__PURE__ */ makeEncodingTransformation("Base64Url", decodeBase64UrlString, encodeBase64Url);
  StringFromHex = /* @__PURE__ */ makeEncodingTransformation("Hex", decodeHexString, encodeHex);
  StringFromUriComponent = /* @__PURE__ */ transformOrFail(String$.annotations({
    description: `A string that is interpreted as being UriComponent-encoded and will be decoded into a UTF-8 string`
  }), String$, {
    strict: true,
    decode: (i2, _, ast) => mapLeft(decodeUriComponent(i2), (decodeException) => new Type2(ast, i2, decodeException.message)),
    encode: (a, _, ast) => mapLeft(encodeUriComponent(a), (encodeException) => new Type2(ast, a, encodeException.message))
  }).annotations({
    identifier: `StringFromUriComponent`
  });
  MinItemsSchemaId2 = MinItemsSchemaId;
  MaxItemsSchemaId2 = MaxItemsSchemaId;
  ItemsCountSchemaId2 = ItemsCountSchemaId;
  headOrElse = /* @__PURE__ */ dual((args2) => isSchema(args2[0]), (self, fallback) => transformOrFail(self, getNumberIndexedAccess2(typeSchema(self)), {
    strict: true,
    decode: (i2, _, ast) => i2.length > 0 ? succeed24(i2[0]) : fallback ? succeed24(fallback()) : fail23(new Type2(ast, i2, "Unable to retrieve the first element of an empty array")),
    encode: (a) => succeed24(of2(a))
  }));
  ValidDateSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/ValidDate");
  LessThanDateSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/LessThanDate");
  LessThanOrEqualToDateSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/LessThanOrEqualToDate");
  GreaterThanDateSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/GreaterThanDate");
  GreaterThanOrEqualToDateSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/GreaterThanOrEqualToDate");
  BetweenDateSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/BetweenDate");
  DateFromSelfSchemaId2 = DateFromSelfSchemaId;
  DateFromSelf = class DateFromSelf extends (/* @__PURE__ */ declare(isDate, {
    identifier: "DateFromSelf",
    schemaId: DateFromSelfSchemaId2,
    [DateFromSelfSchemaId2]: {
      noInvalidDate: false
    },
    description: "a potentially invalid Date instance",
    pretty: () => (date5) => `new Date(${JSON.stringify(date5)})`,
    arbitrary: () => (fc) => fc.date({
      noInvalidDate: false
    }),
    equivalence: () => Date2
  })) {
  };
  ValidDateFromSelf = class ValidDateFromSelf extends (/* @__PURE__ */ DateFromSelf.pipe(/* @__PURE__ */ validDate({
    identifier: "ValidDateFromSelf",
    description: "a valid Date instance"
  }))) {
  };
  DateFromString = class DateFromString extends (/* @__PURE__ */ transform3(String$.annotations({
    description: "a string to be decoded into a Date"
  }), DateFromSelf, {
    strict: true,
    decode: (i2) => new Date(i2),
    encode: (a) => formatDate(a)
  }).annotations({
    identifier: "DateFromString"
  })) {
  };
  Date$ = class Date$ extends (/* @__PURE__ */ DateFromString.pipe(/* @__PURE__ */ validDate({
    identifier: "Date"
  }))) {
  };
  DateFromNumber = class DateFromNumber extends (/* @__PURE__ */ transform3(Number$.annotations({
    description: "a number to be decoded into a Date"
  }), DateFromSelf, {
    strict: true,
    decode: (i2) => new Date(i2),
    encode: (a) => a.getTime()
  }).annotations({
    identifier: "DateFromNumber"
  })) {
  };
  DateTimeUtcFromSelf = class DateTimeUtcFromSelf extends (/* @__PURE__ */ declare((u) => isDateTime2(u) && isUtc2(u), {
    identifier: "DateTimeUtcFromSelf",
    description: "a DateTime.Utc instance",
    pretty: () => (dateTime) => dateTime.toString(),
    arbitrary: () => (fc) => fc.date({
      noInvalidDate: true
    }).map((date5) => unsafeFromDate2(date5)),
    equivalence: () => Equivalence9
  })) {
  };
  DateTimeUtcFromNumber = class DateTimeUtcFromNumber extends (/* @__PURE__ */ transformOrFail(Number$.annotations({
    description: "a number to be decoded into a DateTime.Utc"
  }), DateTimeUtcFromSelf, {
    strict: true,
    decode: (i2, _, ast) => decodeDateTimeUtc(i2, ast),
    encode: (a) => succeed24(toEpochMillis2(a))
  }).annotations({
    identifier: "DateTimeUtcFromNumber"
  })) {
  };
  DateTimeUtcFromDate = class DateTimeUtcFromDate extends (/* @__PURE__ */ transformOrFail(DateFromSelf.annotations({
    description: "a Date to be decoded into a DateTime.Utc"
  }), DateTimeUtcFromSelf, {
    strict: true,
    decode: (i2, _, ast) => decodeDateTimeUtc(i2, ast),
    encode: (a) => succeed24(toDateUtc2(a))
  }).annotations({
    identifier: "DateTimeUtcFromDate"
  })) {
  };
  DateTimeUtc = class DateTimeUtc extends (/* @__PURE__ */ transformOrFail(String$.annotations({
    description: "a string to be decoded into a DateTime.Utc"
  }), DateTimeUtcFromSelf, {
    strict: true,
    decode: (i2, _, ast) => decodeDateTimeUtc(i2, ast),
    encode: (a) => succeed24(formatIso3(a))
  }).annotations({
    identifier: "DateTimeUtc"
  })) {
  };
  TimeZoneOffsetFromSelf = class TimeZoneOffsetFromSelf extends (/* @__PURE__ */ declare(isTimeZoneOffset2, {
    identifier: "TimeZoneOffsetFromSelf",
    description: "a TimeZone.Offset instance",
    pretty: () => (zone) => zone.toString(),
    arbitrary: timeZoneOffsetArbitrary
  })) {
  };
  TimeZoneOffset = class TimeZoneOffset extends (/* @__PURE__ */ transform3(Number$.annotations({
    description: "a number to be decoded into a TimeZone.Offset"
  }), TimeZoneOffsetFromSelf, {
    strict: true,
    decode: (i2) => zoneMakeOffset2(i2),
    encode: (a) => a.offset
  }).annotations({
    identifier: "TimeZoneOffset"
  })) {
  };
  TimeZoneNamedFromSelf = class TimeZoneNamedFromSelf extends (/* @__PURE__ */ declare(isTimeZoneNamed2, {
    identifier: "TimeZoneNamedFromSelf",
    description: "a TimeZone.Named instance",
    pretty: () => (zone) => zone.toString(),
    arbitrary: timeZoneNamedArbitrary
  })) {
  };
  TimeZoneNamed = class TimeZoneNamed extends (/* @__PURE__ */ transformOrFail(String$.annotations({
    description: "a string to be decoded into a TimeZone.Named"
  }), TimeZoneNamedFromSelf, {
    strict: true,
    decode: (i2, _, ast) => _try({
      try: () => zoneUnsafeMakeNamed2(i2),
      catch: () => new Type2(ast, i2, `Unable to decode ${JSON.stringify(i2)} into a TimeZone.Named`)
    }),
    encode: (a) => succeed24(a.id)
  }).annotations({
    identifier: "TimeZoneNamed"
  })) {
  };
  TimeZoneFromSelf = class TimeZoneFromSelf extends (/* @__PURE__ */ Union2(TimeZoneOffsetFromSelf, TimeZoneNamedFromSelf)) {
  };
  TimeZone = class TimeZone extends (/* @__PURE__ */ transformOrFail(String$.annotations({
    description: "a string to be decoded into a TimeZone"
  }), TimeZoneFromSelf, {
    strict: true,
    decode: (i2, _, ast) => match2(zoneFromString2(i2), {
      onNone: () => fail23(new Type2(ast, i2, `Unable to decode ${JSON.stringify(i2)} into a TimeZone`)),
      onSome: succeed24
    }),
    encode: (a) => succeed24(zoneToString2(a))
  }).annotations({
    identifier: "TimeZone"
  })) {
  };
  DateTimeZonedFromSelf = class DateTimeZonedFromSelf extends (/* @__PURE__ */ declare((u) => isDateTime2(u) && isZoned2(u), {
    identifier: "DateTimeZonedFromSelf",
    description: "a DateTime.Zoned instance",
    pretty: () => (dateTime) => dateTime.toString(),
    arbitrary: () => (fc) => fc.tuple(fc.integer({
      min: -31536000000000,
      max: 31536000000000
    }), timeZoneArbitrary(fc)).map(([millis2, timeZone]) => unsafeMakeZoned2(millis2, {
      timeZone
    })),
    equivalence: () => Equivalence9
  })) {
  };
  DateTimeZoned = class DateTimeZoned extends (/* @__PURE__ */ transformOrFail(String$.annotations({
    description: "a string to be decoded into a DateTime.Zoned"
  }), DateTimeZonedFromSelf, {
    strict: true,
    decode: (i2, _, ast) => match2(makeZonedFromString2(i2), {
      onNone: () => fail23(new Type2(ast, i2, `Unable to decode ${JSON.stringify(i2)} into a DateTime.Zoned`)),
      onSome: succeed24
    }),
    encode: (a) => succeed24(formatIsoZoned2(a))
  }).annotations({
    identifier: "DateTimeZoned"
  })) {
  };
  OptionNoneEncoded = /* @__PURE__ */ Struct({
    _tag: Literal2("None")
  }).annotations({
    description: "NoneEncoded"
  });
  makeNoneEncoded = {
    _tag: "None"
  };
  OptionFromNonEmptyTrimmedString = class OptionFromNonEmptyTrimmedString extends (/* @__PURE__ */ transform3(String$, /* @__PURE__ */ OptionFromSelf(NonEmptyTrimmedString), {
    strict: true,
    decode: (i2) => filter(some3(i2.trim()), isNonEmpty7),
    encode: (a) => getOrElse2(a, () => "")
  })) {
  };
  BigDecimalFromSelf = class BigDecimalFromSelf extends (/* @__PURE__ */ declare(isBigDecimal, {
    identifier: "BigDecimalFromSelf",
    pretty: bigDecimalPretty,
    arbitrary: bigDecimalArbitrary,
    equivalence: () => Equivalence2
  })) {
  };
  BigDecimal = class BigDecimal extends (/* @__PURE__ */ transformOrFail(String$.annotations({
    description: "a string to be decoded into a BigDecimal"
  }), BigDecimalFromSelf, {
    strict: true,
    decode: (i2, _, ast) => fromString(i2).pipe(match2({
      onNone: () => fail23(new Type2(ast, i2, `Unable to decode ${JSON.stringify(i2)} into a BigDecimal`)),
      onSome: (val) => succeed24(normalize(val))
    })),
    encode: (a) => succeed24(format3(normalize(a)))
  }).annotations({
    identifier: "BigDecimal"
  })) {
  };
  BigDecimalFromNumber = class BigDecimalFromNumber extends (/* @__PURE__ */ transform3(Number$.annotations({
    description: "a number to be decoded into a BigDecimal"
  }), BigDecimalFromSelf, {
    strict: true,
    decode: (i2) => unsafeFromNumber(i2),
    encode: (a) => unsafeToNumber(a)
  }).annotations({
    identifier: "BigDecimalFromNumber"
  })) {
  };
  GreaterThanBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/GreaterThanBigDecimal");
  GreaterThanOrEqualToBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/GreaterThanOrEqualToBigDecimal");
  LessThanBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/LessThanBigDecimal");
  LessThanOrEqualToBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/LessThanOrEqualToBigDecimal");
  PositiveBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/PositiveBigDecimal");
  PositiveBigDecimalFromSelf = /* @__PURE__ */ BigDecimalFromSelf.pipe(/* @__PURE__ */ positiveBigDecimal({
    identifier: "PositiveBigDecimalFromSelf"
  }));
  NonNegativeBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/NonNegativeBigDecimal");
  NonNegativeBigDecimalFromSelf = /* @__PURE__ */ BigDecimalFromSelf.pipe(/* @__PURE__ */ nonNegativeBigDecimal({
    identifier: "NonNegativeBigDecimalFromSelf"
  }));
  NegativeBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/NegativeBigDecimal");
  NegativeBigDecimalFromSelf = /* @__PURE__ */ BigDecimalFromSelf.pipe(/* @__PURE__ */ negativeBigDecimal({
    identifier: "NegativeBigDecimalFromSelf"
  }));
  NonPositiveBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/schema/NonPositiveBigDecimal");
  NonPositiveBigDecimalFromSelf = /* @__PURE__ */ BigDecimalFromSelf.pipe(/* @__PURE__ */ nonPositiveBigDecimal({
    identifier: "NonPositiveBigDecimalFromSelf"
  }));
  BetweenBigDecimalSchemaId = /* @__PURE__ */ Symbol.for("effect/SchemaId/BetweenBigDecimal");
  astCache = /* @__PURE__ */ globalValue("effect/Schema/astCache", () => new WeakMap);
  FiberIdNoneEncoded = /* @__PURE__ */ Struct({
    _tag: Literal2("None")
  }).annotations({
    identifier: "FiberIdNoneEncoded"
  });
  FiberIdRuntimeEncoded = /* @__PURE__ */ Struct({
    _tag: Literal2("Runtime"),
    id: Int,
    startTimeMillis: Int
  }).annotations({
    identifier: "FiberIdRuntimeEncoded"
  });
  FiberIdCompositeEncoded = /* @__PURE__ */ Struct({
    _tag: Literal2("Composite"),
    left: suspend15(() => FiberIdEncoded),
    right: suspend15(() => FiberIdEncoded)
  }).annotations({
    identifier: "FiberIdCompositeEncoded"
  });
  FiberIdEncoded = /* @__PURE__ */ Union2(FiberIdNoneEncoded, FiberIdRuntimeEncoded, FiberIdCompositeEncoded).annotations({
    identifier: "FiberIdEncoded"
  });
  FiberIdFromSelf = class FiberIdFromSelf extends (/* @__PURE__ */ declare(isFiberId2, {
    identifier: "FiberIdFromSelf",
    pretty: () => fiberIdPretty,
    arbitrary: () => fiberIdArbitrary
  })) {
  };
  FiberId = class FiberId extends (/* @__PURE__ */ transform3(FiberIdEncoded, FiberIdFromSelf, {
    strict: true,
    decode: (i2) => fiberIdDecode(i2),
    encode: (a) => fiberIdEncode(a)
  }).annotations({
    identifier: "FiberId"
  })) {
  };
  CauseEmptyEncoded = /* @__PURE__ */ Struct({
    _tag: /* @__PURE__ */ Literal2("Empty")
  });
  CauseInterruptEncoded = /* @__PURE__ */ Struct({
    _tag: /* @__PURE__ */ Literal2("Interrupt"),
    fiberId: FiberIdEncoded
  });
  Defect = class Defect extends (/* @__PURE__ */ transform3(Unknown, Unknown, {
    strict: true,
    decode: (i2) => {
      if (isObject2(i2) && "message" in i2 && typeof i2.message === "string") {
        const err2 = new Error(i2.message, {
          cause: i2
        });
        if ("name" in i2 && typeof i2.name === "string") {
          err2.name = i2.name;
        }
        err2.stack = "stack" in i2 && typeof i2.stack === "string" ? i2.stack : "";
        return err2;
      }
      return String(i2);
    },
    encode: (a) => {
      if (a instanceof Error) {
        return {
          name: a.name,
          message: a.message
        };
      }
      return prettyErrorMessage(a);
    }
  }).annotations({
    identifier: "Defect"
  })) {
  };
  BooleanFromUnknown = class BooleanFromUnknown extends (/* @__PURE__ */ transform3(Unknown, Boolean$, {
    strict: true,
    decode: (i2) => isTruthy(i2),
    encode: identity
  }).annotations({
    identifier: "BooleanFromUnknown"
  })) {
  };
  BooleanFromString = class BooleanFromString extends (/* @__PURE__ */ transform3(Literal2("true", "false").annotations({
    description: "a string to be decoded into a boolean"
  }), Boolean$, {
    strict: true,
    decode: (i2) => i2 === "true",
    encode: (a) => a ? "true" : "false"
  }).annotations({
    identifier: "BooleanFromString"
  })) {
  };
  symbolSerializable = /* @__PURE__ */ Symbol.for("effect/Schema/Serializable/symbol");
  deserialize = /* @__PURE__ */ dual(2, (self, value9) => decodeUnknown3(self[symbolSerializable])(value9));
  symbolWithResult = /* @__PURE__ */ Symbol.for("effect/Schema/Serializable/symbolResult");
  exitSchemaCache = /* @__PURE__ */ globalValue("effect/Schema/Serializable/exitSchemaCache", () => new WeakMap);
  serializeFailure = /* @__PURE__ */ dual(2, (self, value9) => encode5(self[symbolWithResult].failure)(value9));
  deserializeFailure = /* @__PURE__ */ dual(2, (self, value9) => decodeUnknown3(self[symbolWithResult].failure)(value9));
  serializeSuccess = /* @__PURE__ */ dual(2, (self, value9) => encode5(self[symbolWithResult].success)(value9));
  deserializeSuccess = /* @__PURE__ */ dual(2, (self, value9) => decodeUnknown3(self[symbolWithResult].success)(value9));
  serializeExit = /* @__PURE__ */ dual(2, (self, value9) => encode5(exitSchema(self))(value9));
  deserializeExit = /* @__PURE__ */ dual(2, (self, value9) => decodeUnknown3(exitSchema(self))(value9));
  getEquivalenceAnnotation = /* @__PURE__ */ getAnnotation(EquivalenceAnnotationId);
  SymbolStruct = /* @__PURE__ */ TaggedStruct("symbol", {
    key: String$
  }).annotations({
    description: "an object to be decoded into a globally shared symbol"
  });
  SymbolFromStruct = /* @__PURE__ */ transformOrFail(SymbolStruct, SymbolFromSelf, {
    strict: true,
    decode: (i2) => decodeSymbol(i2.key),
    encode: (a, _, ast) => map37(encodeSymbol2(a, ast), (key) => SymbolStruct.make({
      key
    }))
  });
  PropertyKey$ = class PropertyKey$ extends (/* @__PURE__ */ Union2(String$, Number$, SymbolFromStruct).annotations({
    identifier: "PropertyKey"
  })) {
  };
  ArrayFormatterIssue = class ArrayFormatterIssue extends (/* @__PURE__ */ Struct({
    _tag: propertySignature(Literal2("Pointer", "Unexpected", "Missing", "Composite", "Refinement", "Transformation", "Type", "Forbidden")).annotations({
      description: "The tag identifying the type of parse issue"
    }),
    path: propertySignature(Array$(PropertyKey$)).annotations({
      description: "The path to the property where the issue occurred"
    }),
    message: propertySignature(String$).annotations({
      description: "A descriptive message explaining the issue"
    })
  }).annotations({
    identifier: "ArrayFormatterIssue",
    description: "Represents an issue returned by the ArrayFormatter formatter"
  })) {
  };
});

// node_modules/effect/dist/esm/internal/scopedCache.js
var makeCacheState2 = (map42, keys10, accesses, updating, hits, misses) => ({
  map: map42,
  keys: keys10,
  accesses,
  updating,
  hits,
  misses
}), initialCacheState2 = () => makeCacheState2(empty23(), makeKeySet(), unbounded(), make15(false), 0, 0), complete5 = (key, exit4, ownerCount, entryStats, timeToLive) => struct5({
  _tag: "Complete",
  key,
  exit: exit4,
  ownerCount,
  entryStats,
  timeToLive
}), pending3 = (key, scoped9) => struct5({
  _tag: "Pending",
  key,
  scoped: scoped9
}), refreshing2 = (scoped9, complete6) => struct5({
  _tag: "Refreshing",
  scoped: scoped9,
  complete: complete6
}), toScoped = (self) => matchEffect2(self.exit, {
  onFailure: (cause3) => failCause(cause3),
  onSuccess: ([value9]) => acquireRelease2(as3(sync(() => incrementAndGet(self.ownerCount)), value9), () => releaseOwner(self))
}), releaseOwner = (self) => matchEffect2(self.exit, {
  onFailure: () => void_3,
  onSuccess: ([, finalizer2]) => flatMap12(sync(() => decrementAndGet(self.ownerCount)), (numOwner) => when(finalizer2(void_4), () => numOwner === 0))
}), ScopedCacheSymbolKey = "effect/ScopedCache", ScopedCacheTypeId, scopedCacheVariance, ScopedCacheImpl, make113 = (options) => {
  const timeToLive = decode(options.timeToLive);
  return makeWith7({
    capacity: options.capacity,
    lookup: options.lookup,
    timeToLive: () => timeToLive
  });
}, makeWith7 = (options) => flatMap12(clock, (clock3) => buildWith(options.capacity, options.lookup, clock3, (exit4) => decode(options.timeToLive(exit4)))), buildWith = (capacity10, scopedLookup, clock3, timeToLive) => acquireRelease2(flatMap12(context2(), (context13) => sync(() => new ScopedCacheImpl(capacity10, scopedLookup, clock3, timeToLive, context13))), (cache) => cache.invalidateAll);
var init_scopedCache = __esm(() => {
  init_Context();
  init_Data();
  init_Duration();
  init_Equal();
  init_Exit();
  init_Function();
  init_HashSet();
  init_MutableHashMap();
  init_MutableQueue();
  init_MutableRef();
  init_Option();
  init_Scope();
  init_cache();
  init_core_effect();
  init_core();
  init_fiberRuntime();
  ScopedCacheTypeId = /* @__PURE__ */ Symbol.for(ScopedCacheSymbolKey);
  scopedCacheVariance = {
    _Key: (_) => _,
    _Error: (_) => _,
    _Value: (_) => _
  };
  ScopedCacheImpl = class ScopedCacheImpl {
    capacity;
    scopedLookup;
    clock;
    timeToLive;
    context;
    [ScopedCacheTypeId] = scopedCacheVariance;
    cacheState;
    constructor(capacity10, scopedLookup, clock3, timeToLive, context13) {
      this.capacity = capacity10;
      this.scopedLookup = scopedLookup;
      this.clock = clock3;
      this.timeToLive = timeToLive;
      this.context = context13;
      this.cacheState = initialCacheState2();
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    get cacheStats() {
      return sync(() => makeCacheStats({
        hits: this.cacheState.hits,
        misses: this.cacheState.misses,
        size: size10(this.cacheState.map)
      }));
    }
    getOption(key) {
      return suspend(() => match2(get10(this.cacheState.map, key), {
        onNone: () => succeedNone,
        onSome: (value9) => flatten8(this.resolveMapValue(value9))
      }));
    }
    getOptionComplete(key) {
      return suspend(() => match2(get10(this.cacheState.map, key), {
        onNone: () => succeedNone,
        onSome: (value9) => flatten8(this.resolveMapValue(value9, true))
      }));
    }
    contains(key) {
      return sync(() => has6(this.cacheState.map, key));
    }
    entryStats(key) {
      return sync(() => {
        const value9 = getOrUndefined2(get10(this.cacheState.map, key));
        if (value9 === undefined) {
          return none2();
        }
        switch (value9._tag) {
          case "Complete": {
            return some3(makeEntryStats(value9.entryStats.loadedMillis));
          }
          case "Pending": {
            return none2();
          }
          case "Refreshing": {
            return some3(makeEntryStats(value9.complete.entryStats.loadedMillis));
          }
        }
      });
    }
    get(key) {
      return pipe(this.lookupValueOf(key), memoize, flatMap12((lookupValue) => suspend(() => {
        let k = undefined;
        let value9 = getOrUndefined2(get10(this.cacheState.map, key));
        if (value9 === undefined) {
          k = makeMapKey(key);
          if (has6(this.cacheState.map, key)) {
            value9 = getOrUndefined2(get10(this.cacheState.map, key));
          } else {
            set5(this.cacheState.map, key, pending3(k, lookupValue));
          }
        }
        if (value9 === undefined) {
          this.trackMiss();
          return zipRight2(this.ensureMapSizeNotExceeded(k), lookupValue);
        }
        return map14(this.resolveMapValue(value9), flatMap12(match2({
          onNone: () => {
            const val = value9;
            const current2 = getOrUndefined2(get10(this.cacheState.map, key));
            if (equals(current2, value9)) {
              remove8(this.cacheState.map, key);
            }
            return pipe(this.ensureMapSizeNotExceeded(val.key), zipRight2(releaseOwner(val)), zipRight2(this.get(key)));
          },
          onSome: succeed
        })));
      })), flatten8);
    }
    invalidate(key) {
      return suspend(() => {
        if (has6(this.cacheState.map, key)) {
          const mapValue = getOrUndefined2(get10(this.cacheState.map, key));
          remove8(this.cacheState.map, key);
          switch (mapValue._tag) {
            case "Complete": {
              return releaseOwner(mapValue);
            }
            case "Pending": {
              return void_3;
            }
            case "Refreshing": {
              return releaseOwner(mapValue.complete);
            }
          }
        }
        return void_3;
      });
    }
    get invalidateAll() {
      return forEachConcurrentDiscard(fromIterable6(Array.from(this.cacheState.map).map(([key]) => key)), (key) => this.invalidate(key), false, false);
    }
    refresh(key) {
      return pipe(this.lookupValueOf(key), memoize, flatMap12((scoped9) => {
        let value9 = getOrUndefined2(get10(this.cacheState.map, key));
        let newKey = undefined;
        if (value9 === undefined) {
          newKey = makeMapKey(key);
          if (has6(this.cacheState.map, key)) {
            value9 = getOrUndefined2(get10(this.cacheState.map, key));
          } else {
            set5(this.cacheState.map, key, pending3(newKey, scoped9));
          }
        }
        let finalScoped;
        if (value9 === undefined) {
          finalScoped = zipRight2(this.ensureMapSizeNotExceeded(newKey), scoped9);
        } else {
          switch (value9._tag) {
            case "Complete": {
              if (this.hasExpired(value9.timeToLive)) {
                finalScoped = succeed(this.get(key));
              } else {
                const current2 = getOrUndefined2(get10(this.cacheState.map, key));
                if (equals(current2, value9)) {
                  const mapValue = refreshing2(scoped9, value9);
                  set5(this.cacheState.map, key, mapValue);
                  finalScoped = scoped9;
                } else {
                  finalScoped = succeed(this.get(key));
                }
              }
              break;
            }
            case "Pending": {
              finalScoped = value9.scoped;
              break;
            }
            case "Refreshing": {
              finalScoped = value9.scoped;
              break;
            }
          }
        }
        return flatMap12(finalScoped, (s) => scopedEffect(asVoid2(s)));
      }));
    }
    get size() {
      return sync(() => size10(this.cacheState.map));
    }
    resolveMapValue(value9, ignorePending = false) {
      switch (value9._tag) {
        case "Complete": {
          this.trackHit();
          if (this.hasExpired(value9.timeToLive)) {
            return succeed(succeedNone);
          }
          return as3(this.ensureMapSizeNotExceeded(value9.key), asSome(toScoped(value9)));
        }
        case "Pending": {
          this.trackHit();
          if (ignorePending) {
            return succeed(succeedNone);
          }
          return zipRight2(this.ensureMapSizeNotExceeded(value9.key), map14(value9.scoped, asSome));
        }
        case "Refreshing": {
          this.trackHit();
          if (this.hasExpired(value9.complete.timeToLive)) {
            if (ignorePending) {
              return succeed(succeedNone);
            }
            return zipRight2(this.ensureMapSizeNotExceeded(value9.complete.key), map14(value9.scoped, asSome));
          }
          return as3(this.ensureMapSizeNotExceeded(value9.complete.key), asSome(toScoped(value9.complete)));
        }
      }
    }
    lookupValueOf(key) {
      return pipe(onInterrupt(flatMap12(make55(), (scope6) => pipe(this.scopedLookup(key), provideContext(pipe(this.context, add2(Scope, scope6))), exit, map14((exit4) => [exit4, (exit5) => close(scope6, exit5)]))), () => sync(() => remove8(this.cacheState.map, key))), flatMap12(([exit4, release2]) => {
        const now3 = this.clock.unsafeCurrentTimeMillis();
        const expiredAt = now3 + toMillis(this.timeToLive(exit4));
        switch (exit4._tag) {
          case "Success": {
            const exitWithFinalizer = succeed3([exit4.value, release2]);
            const completedResult = complete5(makeMapKey(key), exitWithFinalizer, make15(1), makeEntryStats(now3), expiredAt);
            let previousValue = undefined;
            if (has6(this.cacheState.map, key)) {
              previousValue = getOrUndefined2(get10(this.cacheState.map, key));
            }
            set5(this.cacheState.map, key, completedResult);
            return sync(() => flatten8(as3(this.cleanMapValue(previousValue), toScoped(completedResult))));
          }
          case "Failure": {
            const completedResult = complete5(makeMapKey(key), exit4, make15(0), makeEntryStats(now3), expiredAt);
            let previousValue = undefined;
            if (has6(this.cacheState.map, key)) {
              previousValue = getOrUndefined2(get10(this.cacheState.map, key));
            }
            set5(this.cacheState.map, key, completedResult);
            return zipRight2(release2(exit4), sync(() => flatten8(as3(this.cleanMapValue(previousValue), toScoped(completedResult)))));
          }
        }
      }), memoize, flatten8);
    }
    hasExpired(timeToLive) {
      return this.clock.unsafeCurrentTimeMillis() > timeToLive;
    }
    trackHit() {
      this.cacheState.hits = this.cacheState.hits + 1;
    }
    trackMiss() {
      this.cacheState.misses = this.cacheState.misses + 1;
    }
    trackAccess(key) {
      const cleanedKeys = [];
      offer(this.cacheState.accesses, key);
      if (compareAndSet(this.cacheState.updating, false, true)) {
        let loop5 = true;
        while (loop5) {
          const key2 = poll2(this.cacheState.accesses, EmptyMutableQueue);
          if (key2 === EmptyMutableQueue) {
            loop5 = false;
          } else {
            this.cacheState.keys.add(key2);
          }
        }
        let size28 = size10(this.cacheState.map);
        loop5 = size28 > this.capacity;
        while (loop5) {
          const key2 = this.cacheState.keys.remove();
          if (key2 === undefined) {
            loop5 = false;
          } else {
            if (has6(this.cacheState.map, key2.current)) {
              const removed = getOrUndefined2(get10(this.cacheState.map, key2.current));
              remove8(this.cacheState.map, key2.current);
              size28 = size28 - 1;
              cleanedKeys.push(removed);
              loop5 = size28 > this.capacity;
            }
          }
        }
        set3(this.cacheState.updating, false);
      }
      return cleanedKeys;
    }
    cleanMapValue(mapValue) {
      if (mapValue === undefined) {
        return void_3;
      }
      switch (mapValue._tag) {
        case "Complete": {
          return releaseOwner(mapValue);
        }
        case "Pending": {
          return void_3;
        }
        case "Refreshing": {
          return releaseOwner(mapValue.complete);
        }
      }
    }
    ensureMapSizeNotExceeded(key) {
      return forEachConcurrentDiscard(this.trackAccess(key), (cleanedMapValue) => this.cleanMapValue(cleanedMapValue), false, false);
    }
  };
});

// node_modules/effect/dist/esm/ScopedCache.js
var exports_ScopedCache = {};
__export(exports_ScopedCache, {
  makeWith: () => makeWith8,
  make: () => make114,
  ScopedCacheTypeId: () => ScopedCacheTypeId2
});
var ScopedCacheTypeId2, make114, makeWith8;
var init_ScopedCache = __esm(() => {
  init_scopedCache();
  ScopedCacheTypeId2 = ScopedCacheTypeId;
  make114 = make113;
  makeWith8 = makeWith7;
});

// node_modules/effect/dist/esm/ScopedRef.js
var exports_ScopedRef = {};
__export(exports_ScopedRef, {
  set: () => set16,
  make: () => make115,
  get: () => get33,
  fromAcquire: () => fromAcquire2,
  ScopedRefTypeId: () => ScopedRefTypeId2
});
var ScopedRefTypeId2, fromAcquire2, get33, make115, set16;
var init_ScopedRef = __esm(() => {
  init_scopedRef();
  ScopedRefTypeId2 = ScopedRefTypeId;
  fromAcquire2 = fromAcquire;
  get33 = get27;
  make115 = make108;
  set16 = set14;
});

// node_modules/effect/dist/esm/Secret.js
var exports_Secret = {};
__export(exports_Secret, {
  value: () => value9,
  unsafeWipe: () => unsafeWipe4,
  make: () => make116,
  isSecret: () => isSecret2,
  fromString: () => fromString4,
  fromIterable: () => fromIterable21,
  SecretTypeId: () => SecretTypeId2
});
var SecretTypeId2, isSecret2, make116, fromIterable21, fromString4, value9, unsafeWipe4;
var init_Secret = __esm(() => {
  init_secret();
  SecretTypeId2 = SecretTypeId;
  isSecret2 = isSecret;
  make116 = make75;
  fromIterable21 = fromIterable18;
  fromString4 = fromString3;
  value9 = value3;
  unsafeWipe4 = unsafeWipe2;
});

// node_modules/effect/dist/esm/SingleProducerAsyncInput.js
var exports_SingleProducerAsyncInput = {};
__export(exports_SingleProducerAsyncInput, {
  make: () => make117
});
var make117;
var init_SingleProducerAsyncInput = __esm(() => {
  init_singleProducerAsyncInput();
  make117 = make63;
});

// node_modules/effect/dist/esm/Sink.js
var exports_Sink = {};
__export(exports_Sink, {
  zipWith: () => zipWith21,
  zipRight: () => zipRight16,
  zipLeft: () => zipLeft16,
  zip: () => zip25,
  withDuration: () => withDuration2,
  unwrapScopedWith: () => unwrapScopedWith5,
  unwrapScoped: () => unwrapScoped7,
  unwrap: () => unwrap8,
  toChannel: () => toChannel5,
  timed: () => timed4,
  take: () => take12,
  sync: () => sync21,
  suspend: () => suspend16,
  summarized: () => summarized6,
  sum: () => sum6,
  succeed: () => succeed28,
  splitWhere: () => splitWhere4,
  some: () => some19,
  refineOrDieWith: () => refineOrDieWith5,
  refineOrDie: () => refineOrDie5,
  raceWith: () => raceWith4,
  raceBoth: () => raceBoth2,
  race: () => race8,
  provideContext: () => provideContext13,
  orElse: () => orElse22,
  never: () => never12,
  mkString: () => mkString3,
  mapLeftover: () => mapLeftover2,
  mapInputEffect: () => mapInputEffect6,
  mapInputChunksEffect: () => mapInputChunksEffect2,
  mapInputChunks: () => mapInputChunks2,
  mapInput: () => mapInput13,
  mapError: () => mapError14,
  mapEffect: () => mapEffect9,
  map: () => map42,
  leftover: () => leftover2,
  last: () => last7,
  ignoreLeftover: () => ignoreLeftover2,
  head: () => head12,
  fromQueue: () => fromQueue5,
  fromPush: () => fromPush2,
  fromPubSub: () => fromPubSub5,
  fromEffect: () => fromEffect13,
  fromChannel: () => fromChannel3,
  forEachWhile: () => forEachWhile2,
  forEachChunkWhile: () => forEachChunkWhile2,
  forEachChunk: () => forEachChunk2,
  forEach: () => forEach20,
  foldWeightedEffect: () => foldWeightedEffect2,
  foldWeightedDecomposeEffect: () => foldWeightedDecomposeEffect2,
  foldWeightedDecompose: () => foldWeightedDecompose2,
  foldWeighted: () => foldWeighted2,
  foldUntilEffect: () => foldUntilEffect2,
  foldUntil: () => foldUntil2,
  foldSink: () => foldSink2,
  foldLeftEffect: () => foldLeftEffect2,
  foldLeftChunksEffect: () => foldLeftChunksEffect2,
  foldLeftChunks: () => foldLeftChunks2,
  foldLeft: () => foldLeft2,
  foldEffect: () => foldEffect2,
  foldChunksEffect: () => foldChunksEffect2,
  foldChunks: () => foldChunks2,
  fold: () => fold2,
  flatMap: () => flatMap27,
  findEffect: () => findEffect3,
  filterInputEffect: () => filterInputEffect2,
  filterInput: () => filterInput2,
  failSync: () => failSync13,
  failCauseSync: () => failCauseSync11,
  failCause: () => failCause18,
  fail: () => fail25,
  every: () => every17,
  ensuringWith: () => ensuringWith5,
  ensuring: () => ensuring12,
  dropWhileEffect: () => dropWhileEffect3,
  dropWhile: () => dropWhile7,
  dropUntilEffect: () => dropUntilEffect3,
  dropUntil: () => dropUntil5,
  drop: () => drop7,
  drain: () => drain5,
  dimapEffect: () => dimapEffect2,
  dimapChunksEffect: () => dimapChunksEffect2,
  dimapChunks: () => dimapChunks2,
  dimap: () => dimap2,
  dieSync: () => dieSync10,
  dieMessage: () => dieMessage8,
  die: () => die16,
  count: () => count6,
  contextWithSink: () => contextWithSink2,
  contextWithEffect: () => contextWithEffect7,
  contextWith: () => contextWith9,
  context: () => context13,
  collectLeftover: () => collectLeftover2,
  collectAllWhileWith: () => collectAllWhileWith2,
  collectAllWhileEffect: () => collectAllWhileEffect2,
  collectAllWhile: () => collectAllWhile2,
  collectAllUntilEffect: () => collectAllUntilEffect2,
  collectAllUntil: () => collectAllUntil2,
  collectAllToSetN: () => collectAllToSetN2,
  collectAllToSet: () => collectAllToSet2,
  collectAllToMapN: () => collectAllToMapN2,
  collectAllToMap: () => collectAllToMap2,
  collectAllN: () => collectAllN2,
  collectAllFrom: () => collectAllFrom2,
  collectAll: () => collectAll4,
  as: () => as16,
  SinkTypeId: () => SinkTypeId4
});
var SinkTypeId4, as16, collectAll4, collectAllN2, collectAllFrom2, collectAllToMap2, collectAllToMapN2, collectAllToSet2, collectAllToSetN2, collectAllUntil2, collectAllUntilEffect2, collectAllWhile2, collectAllWhileEffect2, collectAllWhileWith2, collectLeftover2, mapInput13, mapInputEffect6, mapInputChunks2, mapInputChunksEffect2, count6, die16, dieMessage8, dieSync10, dimap2, dimapEffect2, dimapChunks2, dimapChunksEffect2, drain5, drop7, dropUntil5, dropUntilEffect3, dropWhile7, dropWhileEffect3, ensuring12, ensuringWith5, context13, contextWith9, contextWithEffect7, contextWithSink2, every17, fail25, failSync13, failCause18, failCauseSync11, filterInput2, filterInputEffect2, findEffect3, fold2, foldSink2, foldChunks2, foldChunksEffect2, foldEffect2, foldLeft2, foldLeftChunks2, foldLeftChunksEffect2, foldLeftEffect2, foldUntil2, foldUntilEffect2, foldWeighted2, foldWeightedDecompose2, foldWeightedDecomposeEffect2, foldWeightedEffect2, forEach20, forEachChunk2, forEachChunkWhile2, forEachWhile2, flatMap27, fromChannel3, toChannel5, fromEffect13, fromPubSub5, fromPush2, fromQueue5, head12, ignoreLeftover2, last7, leftover2, map42, mapEffect9, mapError14, mapLeftover2, mkString3, never12, orElse22, provideContext13, race8, raceBoth2, raceWith4, refineOrDie5, refineOrDieWith5, some19, splitWhere4, succeed28, sum6, summarized6, suspend16, sync21, take12, timed4, unwrap8, unwrapScoped7, unwrapScopedWith5, withDuration2, zip25, zipLeft16, zipRight16, zipWith21;
var init_Sink = __esm(() => {
  init_sink();
  SinkTypeId4 = SinkTypeId3;
  as16 = as10;
  collectAll4 = collectAll;
  collectAllN2 = collectAllN;
  collectAllFrom2 = collectAllFrom;
  collectAllToMap2 = collectAllToMap;
  collectAllToMapN2 = collectAllToMapN;
  collectAllToSet2 = collectAllToSet;
  collectAllToSetN2 = collectAllToSetN;
  collectAllUntil2 = collectAllUntil;
  collectAllUntilEffect2 = collectAllUntilEffect;
  collectAllWhile2 = collectAllWhile;
  collectAllWhileEffect2 = collectAllWhileEffect;
  collectAllWhileWith2 = collectAllWhileWith;
  collectLeftover2 = collectLeftover;
  mapInput13 = mapInput8;
  mapInputEffect6 = mapInputEffect3;
  mapInputChunks2 = mapInputChunks;
  mapInputChunksEffect2 = mapInputChunksEffect;
  count6 = count3;
  die16 = die10;
  dieMessage8 = dieMessage3;
  dieSync10 = dieSync6;
  dimap2 = dimap;
  dimapEffect2 = dimapEffect;
  dimapChunks2 = dimapChunks;
  dimapChunksEffect2 = dimapChunksEffect;
  drain5 = drain2;
  drop7 = drop5;
  dropUntil5 = dropUntil3;
  dropUntilEffect3 = dropUntilEffect;
  dropWhile7 = dropWhile5;
  dropWhileEffect3 = dropWhileEffect;
  ensuring12 = ensuring6;
  ensuringWith5 = ensuringWith2;
  context13 = context8;
  contextWith9 = contextWith4;
  contextWithEffect7 = contextWithEffect4;
  contextWithSink2 = contextWithSink;
  every17 = every14;
  fail25 = fail15;
  failSync13 = failSync8;
  failCause18 = failCause13;
  failCauseSync11 = failCauseSync8;
  filterInput2 = filterInput;
  filterInputEffect2 = filterInputEffect;
  findEffect3 = findEffect;
  fold2 = fold;
  foldSink2 = foldSink;
  foldChunks2 = foldChunks;
  foldChunksEffect2 = foldChunksEffect;
  foldEffect2 = foldEffect;
  foldLeft2 = foldLeft;
  foldLeftChunks2 = foldLeftChunks;
  foldLeftChunksEffect2 = foldLeftChunksEffect;
  foldLeftEffect2 = foldLeftEffect;
  foldUntil2 = foldUntil;
  foldUntilEffect2 = foldUntilEffect;
  foldWeighted2 = foldWeighted;
  foldWeightedDecompose2 = foldWeightedDecompose;
  foldWeightedDecomposeEffect2 = foldWeightedDecomposeEffect;
  foldWeightedEffect2 = foldWeightedEffect;
  forEach20 = forEach17;
  forEachChunk2 = forEachChunk;
  forEachChunkWhile2 = forEachChunkWhile;
  forEachWhile2 = forEachWhile;
  flatMap27 = flatMap21;
  fromChannel3 = fromChannel;
  toChannel5 = toChannel;
  fromEffect13 = fromEffect7;
  fromPubSub5 = fromPubSub2;
  fromPush2 = fromPush;
  fromQueue5 = fromQueue2;
  head12 = head8;
  ignoreLeftover2 = ignoreLeftover;
  last7 = last6;
  leftover2 = leftover;
  map42 = map29;
  mapEffect9 = mapEffect6;
  mapError14 = mapError8;
  mapLeftover2 = mapLeftover;
  mkString3 = mkString;
  never12 = never7;
  orElse22 = orElse11;
  provideContext13 = provideContext5;
  race8 = race4;
  raceBoth2 = raceBoth;
  raceWith4 = raceWith3;
  refineOrDie5 = refineOrDie;
  refineOrDieWith5 = refineOrDieWith;
  some19 = some15;
  splitWhere4 = splitWhere3;
  succeed28 = succeed16;
  sum6 = sum5;
  summarized6 = summarized3;
  suspend16 = suspend7;
  sync21 = sync11;
  take12 = take7;
  timed4 = timed3;
  unwrap8 = unwrap3;
  unwrapScoped7 = unwrapScoped4;
  unwrapScopedWith5 = unwrapScopedWith2;
  withDuration2 = withDuration;
  zip25 = zip14;
  zipLeft16 = zipLeft9;
  zipRight16 = zipRight9;
  zipWith21 = zipWith14;
});

// node_modules/effect/dist/esm/SortedMap.js
var exports_SortedMap = {};
__export(exports_SortedMap, {
  values: () => values10,
  size: () => size28,
  set: () => set17,
  remove: () => remove14,
  reduce: () => reduce22,
  partition: () => partition13,
  map: () => map43,
  make: () => make118,
  lastOption: () => lastOption,
  keys: () => keys10,
  isSortedMap: () => isSortedMap,
  isNonEmpty: () => isNonEmpty8,
  isEmpty: () => isEmpty23,
  headOption: () => headOption,
  has: () => has12,
  getOrder: () => getOrder7,
  get: () => get34,
  fromIterable: () => fromIterable22,
  entries: () => entries3,
  empty: () => empty48
});
var TypeId38, SortedMapProto, makeImpl5 = (tree) => {
  const self = Object.create(SortedMapProto);
  self.tree = tree;
  return self;
}, isSortedMap = (u) => hasProperty(u, TypeId38), empty48 = (ord) => makeImpl5(empty31(ord)), fromIterable22, make118 = (ord) => (...entries3) => fromIterable22(ord)(entries3), isEmpty23 = (self) => size28(self) === 0, isNonEmpty8 = (self) => size28(self) > 0, get34, getOrder7 = (self) => getOrder5(self.tree), has12, headOption = (self) => first2(self.tree), map43, reduce22, remove14, set17, size28 = (self) => size12(self.tree), keys10 = (self) => keys6(self.tree), values10 = (self) => values8(self.tree), entries3 = (self) => {
  const iterator = self.tree[Symbol.iterator]();
  iterator[Symbol.iterator] = () => entries3(self);
  return iterator;
}, lastOption = (self) => last5(self.tree), partition13;
var init_SortedMap = __esm(() => {
  init_Equal();
  init_Function();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Predicate();
  init_RedBlackTree();
  TypeId38 = /* @__PURE__ */ Symbol.for("effect/SortedMap");
  SortedMapProto = {
    [TypeId38]: {
      _K: (_) => _,
      _V: (_) => _
    },
    [symbol2]() {
      return pipe(hash(this.tree), combine2(hash("effect/SortedMap")), cached(this));
    },
    [symbol3](that) {
      return isSortedMap(that) && equals(this.tree, that.tree);
    },
    [Symbol.iterator]() {
      return this.tree[Symbol.iterator]();
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "SortedMap",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  fromIterable22 = /* @__PURE__ */ dual(2, (iterable, ord) => makeImpl5(fromIterable13(iterable, ord)));
  get34 = /* @__PURE__ */ dual(2, (self, key) => findFirst9(self.tree, key));
  has12 = /* @__PURE__ */ dual(2, (self, key) => isSome2(get34(self, key)));
  map43 = /* @__PURE__ */ dual(2, (self, f) => reduce22(self, empty48(getOrder5(self.tree)), (acc, v, k) => set17(acc, k, f(v, k))));
  reduce22 = /* @__PURE__ */ dual(3, (self, zero3, f) => reduce14(self.tree, zero3, f));
  remove14 = /* @__PURE__ */ dual(2, (self, key) => makeImpl5(removeFirst2(self.tree, key)));
  set17 = /* @__PURE__ */ dual(3, (self, key, value10) => has8(self.tree, key) ? makeImpl5(insert2(removeFirst2(self.tree, key), key, value10)) : makeImpl5(insert2(self.tree, key, value10)));
  partition13 = /* @__PURE__ */ dual(2, (self, predicate) => {
    const ord = getOrder5(self.tree);
    let right3 = empty48(ord);
    let left3 = empty48(ord);
    for (const value10 of self) {
      if (predicate(value10[0])) {
        right3 = set17(right3, value10[0], value10[1]);
      } else {
        left3 = set17(left3, value10[0], value10[1]);
      }
    }
    return [left3, right3];
  });
});

// node_modules/effect/dist/esm/Stream.js
var exports_Stream = {};
__export(exports_Stream, {
  zipWithPreviousAndNext: () => zipWithPreviousAndNext2,
  zipWithPrevious: () => zipWithPrevious2,
  zipWithNext: () => zipWithNext2,
  zipWithIndex: () => zipWithIndex2,
  zipWithChunks: () => zipWithChunks2,
  zipWith: () => zipWith22,
  zipRight: () => zipRight17,
  zipLeft: () => zipLeft17,
  zipLatestWith: () => zipLatestWith2,
  zipLatestAll: () => zipLatestAll2,
  zipLatest: () => zipLatest2,
  zipFlatten: () => zipFlatten2,
  zipAllWith: () => zipAllWith2,
  zipAllSortedByKeyWith: () => zipAllSortedByKeyWith2,
  zipAllSortedByKeyRight: () => zipAllSortedByKeyRight2,
  zipAllSortedByKeyLeft: () => zipAllSortedByKeyLeft2,
  zipAllSortedByKey: () => zipAllSortedByKey2,
  zipAllRight: () => zipAllRight2,
  zipAllLeft: () => zipAllLeft2,
  zipAll: () => zipAll2,
  zip: () => zip26,
  withSpan: () => withSpan8,
  whenEffect: () => whenEffect4,
  whenCaseEffect: () => whenCaseEffect2,
  whenCase: () => whenCase2,
  when: () => when9,
  void: () => void_13,
  updateService: () => updateService8,
  unwrapScopedWith: () => unwrapScopedWith6,
  unwrapScoped: () => unwrapScoped8,
  unwrap: () => unwrap9,
  unfoldEffect: () => unfoldEffect2,
  unfoldChunkEffect: () => unfoldChunkEffect2,
  unfoldChunk: () => unfoldChunk2,
  unfold: () => unfold6,
  transduce: () => transduce2,
  toReadableStreamRuntime: () => toReadableStreamRuntime2,
  toReadableStreamEffect: () => toReadableStreamEffect2,
  toReadableStream: () => toReadableStream2,
  toQueueOfElements: () => toQueueOfElements2,
  toQueue: () => toQueue4,
  toPull: () => toPull4,
  toPubSub: () => toPubSub4,
  toChannel: () => toChannel6,
  timeoutTo: () => timeoutTo4,
  timeoutFailCause: () => timeoutFailCause4,
  timeoutFail: () => timeoutFail4,
  timeout: () => timeout5,
  tick: () => tick2,
  throttleEffect: () => throttleEffect2,
  throttle: () => throttle2,
  tapSink: () => tapSink2,
  tapErrorCause: () => tapErrorCause7,
  tapError: () => tapError9,
  tapBoth: () => tapBoth6,
  tap: () => tap11,
  takeWhile: () => takeWhile7,
  takeUntilEffect: () => takeUntilEffect2,
  takeUntil: () => takeUntil4,
  takeRight: () => takeRight5,
  take: () => take13,
  sync: () => sync22,
  suspend: () => suspend17,
  succeed: () => succeed29,
  splitOnChunk: () => splitOnChunk2,
  splitLines: () => splitLines4,
  split: () => split6,
  someOrFail: () => someOrFail2,
  someOrElse: () => someOrElse2,
  some: () => some20,
  slidingSize: () => slidingSize2,
  sliding: () => sliding10,
  share: () => share2,
  scopedWith: () => scopedWith6,
  scoped: () => scoped9,
  scheduleWith: () => scheduleWith2,
  schedule: () => schedule3,
  scanReduceEffect: () => scanReduceEffect2,
  scanReduce: () => scanReduce2,
  scanEffect: () => scanEffect2,
  scan: () => scan4,
  runSum: () => runSum2,
  runScoped: () => runScoped4,
  runLast: () => runLast2,
  runIntoQueueScoped: () => runIntoQueueScoped2,
  runIntoQueueElementsScoped: () => runIntoQueueElementsScoped2,
  runIntoQueue: () => runIntoQueue2,
  runIntoPubSubScoped: () => runIntoPubSubScoped2,
  runIntoPubSub: () => runIntoPubSub2,
  runHead: () => runHead2,
  runForEachWhileScoped: () => runForEachWhileScoped2,
  runForEachWhile: () => runForEachWhile2,
  runForEachScoped: () => runForEachScoped2,
  runForEachChunkScoped: () => runForEachChunkScoped2,
  runForEachChunk: () => runForEachChunk2,
  runForEach: () => runForEach2,
  runFoldWhileScopedEffect: () => runFoldWhileScopedEffect2,
  runFoldWhileScoped: () => runFoldWhileScoped2,
  runFoldWhileEffect: () => runFoldWhileEffect2,
  runFoldWhile: () => runFoldWhile2,
  runFoldScopedEffect: () => runFoldScopedEffect2,
  runFoldScoped: () => runFoldScoped2,
  runFoldEffect: () => runFoldEffect2,
  runFold: () => runFold2,
  runDrain: () => runDrain4,
  runCount: () => runCount2,
  runCollect: () => runCollect4,
  run: () => run9,
  retry: () => retry11,
  repeatWith: () => repeatWith2,
  repeatValue: () => repeatValue2,
  repeatElementsWith: () => repeatElementsWith2,
  repeatElements: () => repeatElements2,
  repeatEither: () => repeatEither2,
  repeatEffectWithSchedule: () => repeatEffectWithSchedule2,
  repeatEffectOption: () => repeatEffectOption2,
  repeatEffectChunkOption: () => repeatEffectChunkOption2,
  repeatEffectChunk: () => repeatEffectChunk2,
  repeatEffect: () => repeatEffect2,
  repeat: () => repeat7,
  refineOrDieWith: () => refineOrDieWith6,
  refineOrDie: () => refineOrDie6,
  rechunk: () => rechunk2,
  range: () => range5,
  raceAll: () => raceAll5,
  race: () => race9,
  provideSomeLayer: () => provideSomeLayer5,
  provideServiceStream: () => provideServiceStream2,
  provideServiceEffect: () => provideServiceEffect5,
  provideService: () => provideService13,
  provideLayer: () => provideLayer4,
  provideContext: () => provideContext14,
  prepend: () => prepend7,
  pipeThroughChannelOrFail: () => pipeThroughChannelOrFail2,
  pipeThroughChannel: () => pipeThroughChannel2,
  pipeThrough: () => pipeThrough2,
  peel: () => peel2,
  partitionEither: () => partitionEither2,
  partition: () => partition14,
  paginateEffect: () => paginateEffect2,
  paginateChunkEffect: () => paginateChunkEffect2,
  paginateChunk: () => paginateChunk2,
  paginate: () => paginate2,
  orElseSucceed: () => orElseSucceed7,
  orElseIfEmptyStream: () => orElseIfEmptyStream2,
  orElseIfEmptyChunk: () => orElseIfEmptyChunk2,
  orElseIfEmpty: () => orElseIfEmpty2,
  orElseFail: () => orElseFail6,
  orElseEither: () => orElseEither9,
  orElse: () => orElse23,
  orDieWith: () => orDieWith8,
  orDie: () => orDie11,
  onStart: () => onStart2,
  onError: () => onError5,
  onEnd: () => onEnd2,
  onDone: () => onDone2,
  never: () => never13,
  mkString: () => mkString4,
  mergeWithTag: () => mergeWithTag2,
  mergeWith: () => mergeWith5,
  mergeRight: () => mergeRight2,
  mergeLeft: () => mergeLeft2,
  mergeEither: () => mergeEither2,
  mergeAll: () => mergeAll12,
  merge: () => merge12,
  mapInputContext: () => mapInputContext12,
  mapErrorCause: () => mapErrorCause8,
  mapError: () => mapError15,
  mapEffect: () => mapEffect10,
  mapConcatEffect: () => mapConcatEffect2,
  mapConcatChunkEffect: () => mapConcatChunkEffect2,
  mapConcatChunk: () => mapConcatChunk2,
  mapConcat: () => mapConcat2,
  mapChunksEffect: () => mapChunksEffect2,
  mapChunks: () => mapChunks2,
  mapBoth: () => mapBoth12,
  mapAccumEffect: () => mapAccumEffect2,
  mapAccum: () => mapAccum6,
  map: () => map44,
  make: () => make119,
  let: () => let_11,
  iterate: () => iterate6,
  intersperseAffixes: () => intersperseAffixes2,
  intersperse: () => intersperse4,
  interruptWhenDeferred: () => interruptWhenDeferred4,
  interruptWhen: () => interruptWhen4,
  interruptAfter: () => interruptAfter3,
  interleaveWith: () => interleaveWith2,
  interleave: () => interleave2,
  identity: () => identity6,
  haltWhenDeferred: () => haltWhenDeferred2,
  haltWhen: () => haltWhen2,
  haltAfter: () => haltAfter2,
  groupedWithin: () => groupedWithin2,
  grouped: () => grouped2,
  groupByKey: () => groupByKey2,
  groupBy: () => groupBy4,
  groupAdjacentBy: () => groupAdjacentBy2,
  fromTQueue: () => fromTQueue2,
  fromTPubSub: () => fromTPubSub2,
  fromSchedule: () => fromSchedule2,
  fromReadableStreamByob: () => fromReadableStreamByob2,
  fromReadableStream: () => fromReadableStream2,
  fromQueue: () => fromQueue6,
  fromPull: () => fromPull3,
  fromPubSub: () => fromPubSub6,
  fromIteratorSucceed: () => fromIteratorSucceed2,
  fromIterableEffect: () => fromIterableEffect2,
  fromIterable: () => fromIterable23,
  fromEventListener: () => fromEventListener2,
  fromEffectOption: () => fromEffectOption2,
  fromEffect: () => fromEffect14,
  fromChunks: () => fromChunks2,
  fromChunkQueue: () => fromChunkQueue2,
  fromChunkPubSub: () => fromChunkPubSub2,
  fromChunk: () => fromChunk2,
  fromChannel: () => fromChannel4,
  fromAsyncIterable: () => fromAsyncIterable2,
  forever: () => forever7,
  flattenTake: () => flattenTake2,
  flattenIterables: () => flattenIterables2,
  flattenExitOption: () => flattenExitOption2,
  flattenEffect: () => flattenEffect2,
  flattenChunks: () => flattenChunks2,
  flatten: () => flatten20,
  flatMap: () => flatMap28,
  findEffect: () => findEffect4,
  find: () => find4,
  finalizer: () => finalizer2,
  filterMapWhileEffect: () => filterMapWhileEffect2,
  filterMapWhile: () => filterMapWhile5,
  filterMapEffect: () => filterMapEffect2,
  filterMap: () => filterMap13,
  filterEffect: () => filterEffect3,
  filter: () => filter23,
  failSync: () => failSync14,
  failCauseSync: () => failCauseSync12,
  failCause: () => failCause19,
  fail: () => fail26,
  execute: () => execute2,
  ensuringWith: () => ensuringWith6,
  ensuring: () => ensuring13,
  encodeText: () => encodeText2,
  empty: () => empty49,
  either: () => either13,
  dropWhileEffect: () => dropWhileEffect4,
  dropWhile: () => dropWhile8,
  dropUntilEffect: () => dropUntilEffect4,
  dropUntil: () => dropUntil6,
  dropRight: () => dropRight4,
  drop: () => drop8,
  drainFork: () => drainFork2,
  drain: () => drain6,
  distributedWithDynamic: () => distributedWithDynamic2,
  distributedWith: () => distributedWith2,
  dieSync: () => dieSync11,
  dieMessage: () => dieMessage9,
  die: () => die17,
  decodeText: () => decodeText2,
  debounce: () => debounce2,
  crossWith: () => crossWith2,
  crossRight: () => crossRight2,
  crossLeft: () => crossLeft2,
  cross: () => cross2,
  contextWithStream: () => contextWithStream2,
  contextWithEffect: () => contextWithEffect8,
  contextWith: () => contextWith10,
  context: () => context14,
  concatAll: () => concatAll4,
  concat: () => concat4,
  combineChunks: () => combineChunks2,
  combine: () => combine18,
  chunksWith: () => chunksWith2,
  chunks: () => chunks2,
  changesWithEffect: () => changesWithEffect2,
  changesWith: () => changesWith2,
  changes: () => changes2,
  catchTags: () => catchTags6,
  catchTag: () => catchTag7,
  catchSomeCause: () => catchSomeCause4,
  catchSome: () => catchSome6,
  catchAllCause: () => catchAllCause9,
  catchAll: () => catchAll11,
  bufferChunks: () => bufferChunks2,
  buffer: () => buffer4,
  broadcastedQueuesDynamic: () => broadcastedQueuesDynamic2,
  broadcastedQueues: () => broadcastedQueues2,
  broadcastDynamic: () => broadcastDynamic2,
  broadcast: () => broadcast2,
  branchAfter: () => branchAfter2,
  bindTo: () => bindTo11,
  bindEffect: () => bindEffect2,
  bind: () => bind11,
  asyncScoped: () => asyncScoped2,
  asyncPush: () => asyncPush2,
  asyncEffect: () => asyncEffect4,
  async: () => _async2,
  as: () => as17,
  aggregateWithinEither: () => aggregateWithinEither2,
  aggregateWithin: () => aggregateWithin2,
  aggregate: () => aggregate2,
  acquireRelease: () => acquireRelease5,
  accumulateChunks: () => accumulateChunks2,
  accumulate: () => accumulate2,
  StreamTypeId: () => StreamTypeId4,
  Do: () => Do9,
  DefaultChunkSize: () => DefaultChunkSize2
});
var StreamTypeId4, DefaultChunkSize2, accumulate2, accumulateChunks2, acquireRelease5, aggregate2, aggregateWithin2, aggregateWithinEither2, as17, _async2, asyncEffect4, asyncPush2, asyncScoped2, branchAfter2, broadcast2, share2, broadcastDynamic2, broadcastedQueues2, broadcastedQueuesDynamic2, buffer4, bufferChunks2, catchAll11, catchAllCause9, catchSome6, catchTag7, catchTags6, catchSomeCause4, changes2, changesWith2, changesWithEffect2, chunks2, chunksWith2, combine18, combineChunks2, concat4, concatAll4, cross2, crossLeft2, crossRight2, crossWith2, debounce2, die17, dieSync11, dieMessage9, distributedWith2, distributedWithDynamic2, drain6, drainFork2, drop8, dropRight4, dropUntil6, dropUntilEffect4, dropWhile8, dropWhileEffect4, either13, empty49, ensuring13, ensuringWith6, context14, contextWith10, contextWithEffect8, contextWithStream2, execute2, fail26, failSync14, failCause19, failCauseSync12, filter23, filterEffect3, filterMap13, filterMapEffect2, filterMapWhile5, filterMapWhileEffect2, finalizer2, find4, findEffect4, flatMap28, flatten20, flattenChunks2, flattenEffect2, flattenExitOption2, flattenIterables2, flattenTake2, forever7, fromAsyncIterable2, fromChannel4, toChannel6, fromChunk2, fromChunkPubSub2, fromChunkQueue2, fromChunks2, fromEffect14, fromEffectOption2, fromPubSub6, fromTPubSub2, fromIterable23, fromIterableEffect2, fromIteratorSucceed2, fromPull3, fromQueue6, fromTQueue2, fromReadableStream2, fromReadableStreamByob2, fromSchedule2, groupAdjacentBy2, groupBy4, groupByKey2, grouped2, groupedWithin2, haltAfter2, haltWhen2, haltWhenDeferred2, identity6, interleave2, interleaveWith2, intersperse4, intersperseAffixes2, interruptAfter3, interruptWhen4, interruptWhenDeferred4, iterate6, make119, map44, mapAccum6, mapAccumEffect2, mapBoth12, mapChunks2, mapChunksEffect2, mapConcat2, mapConcatChunk2, mapConcatChunkEffect2, mapConcatEffect2, mapEffect10, mapError15, mapErrorCause8, merge12, mergeAll12, mergeWithTag2, mergeWith5, mergeEither2, mergeLeft2, mergeRight2, mkString4, never13, onEnd2, onError5, onDone2, onStart2, orDie11, orDieWith8, orElse23, orElseEither9, orElseFail6, orElseIfEmpty2, orElseIfEmptyChunk2, orElseIfEmptyStream2, orElseSucceed7, paginate2, paginateChunk2, paginateChunkEffect2, paginateEffect2, partition14, partitionEither2, peel2, pipeThrough2, pipeThroughChannel2, pipeThroughChannelOrFail2, prepend7, provideContext14, provideLayer4, provideService13, provideServiceEffect5, provideServiceStream2, mapInputContext12, provideSomeLayer5, race9, raceAll5, range5, rechunk2, refineOrDie6, refineOrDieWith6, repeat7, repeatEffect2, repeatEffectChunk2, repeatEffectChunkOption2, repeatEffectOption2, repeatEffectWithSchedule2, repeatEither2, repeatElements2, repeatElementsWith2, repeatValue2, repeatWith2, retry11, run9, runCollect4, runCount2, runDrain4, runFold2, runFoldEffect2, runFoldScoped2, runFoldScopedEffect2, runFoldWhile2, runFoldWhileEffect2, runFoldWhileScoped2, runFoldWhileScopedEffect2, runForEach2, runForEachChunk2, runForEachChunkScoped2, runForEachScoped2, runForEachWhile2, runForEachWhileScoped2, runHead2, runIntoPubSub2, runIntoPubSubScoped2, runIntoQueue2, runIntoQueueElementsScoped2, runIntoQueueScoped2, runLast2, runScoped4, runSum2, scan4, scanEffect2, scanReduce2, scanReduceEffect2, schedule3, scheduleWith2, scoped9, scopedWith6, sliding10, slidingSize2, some20, someOrElse2, someOrFail2, split6, splitOnChunk2, splitLines4, succeed29, sync22, suspend17, take13, takeRight5, takeUntil4, takeUntilEffect2, takeWhile7, tap11, tapBoth6, tapError9, tapErrorCause7, tapSink2, throttle2, throttleEffect2, tick2, timeout5, timeoutFail4, timeoutFailCause4, timeoutTo4, toPubSub4, toPull4, toQueue4, toQueueOfElements2, toReadableStream2, toReadableStreamEffect2, toReadableStreamRuntime2, transduce2, unfold6, unfoldChunk2, unfoldChunkEffect2, unfoldEffect2, void_13, unwrap9, unwrapScoped8, unwrapScopedWith6, updateService8, when9, whenCase2, whenCaseEffect2, whenEffect4, withSpan8, zip26, zipFlatten2, zipAll2, zipAllLeft2, zipAllRight2, zipAllSortedByKey2, zipAllSortedByKeyLeft2, zipAllSortedByKeyRight2, zipAllSortedByKeyWith2, zipAllWith2, zipLatest2, zipLatestAll2, zipLatestWith2, zipLeft17, zipRight17, zipWith22, zipWithChunks2, zipWithNext2, zipWithPrevious2, zipWithPreviousAndNext2, zipWithIndex2, Do9, bind11, bindEffect2, bindTo11, let_11, decodeText2, encodeText2, fromEventListener2;
var init_Stream2 = __esm(() => {
  init_groupBy();
  init_stream();
  StreamTypeId4 = StreamTypeId3;
  DefaultChunkSize2 = DefaultChunkSize;
  accumulate2 = accumulate;
  accumulateChunks2 = accumulateChunks;
  acquireRelease5 = acquireRelease4;
  aggregate2 = aggregate;
  aggregateWithin2 = aggregateWithin;
  aggregateWithinEither2 = aggregateWithinEither;
  as17 = as13;
  _async2 = _async;
  asyncEffect4 = asyncEffect3;
  asyncPush2 = asyncPush;
  asyncScoped2 = asyncScoped;
  branchAfter2 = branchAfter;
  broadcast2 = broadcast;
  share2 = share;
  broadcastDynamic2 = broadcastDynamic;
  broadcastedQueues2 = broadcastedQueues;
  broadcastedQueuesDynamic2 = broadcastedQueuesDynamic;
  buffer4 = buffer2;
  bufferChunks2 = bufferChunks;
  catchAll11 = catchAll8;
  catchAllCause9 = catchAllCause7;
  catchSome6 = catchSome4;
  catchTag7 = catchTag5;
  catchTags6 = catchTags4;
  catchSomeCause4 = catchSomeCause3;
  changes2 = changes;
  changesWith2 = changesWith;
  changesWithEffect2 = changesWithEffect;
  chunks2 = chunks;
  chunksWith2 = chunksWith;
  combine18 = combine16;
  combineChunks2 = combineChunks;
  concat4 = concat3;
  concatAll4 = concatAll2;
  cross2 = cross;
  crossLeft2 = crossLeft;
  crossRight2 = crossRight;
  crossWith2 = crossWith;
  debounce2 = debounce;
  die17 = die14;
  dieSync11 = dieSync8;
  dieMessage9 = dieMessage6;
  distributedWith2 = distributedWith;
  distributedWithDynamic2 = distributedWithDynamic;
  drain6 = drain3;
  drainFork2 = drainFork;
  drop8 = drop6;
  dropRight4 = dropRight3;
  dropUntil6 = dropUntil4;
  dropUntilEffect4 = dropUntilEffect2;
  dropWhile8 = dropWhile6;
  dropWhileEffect4 = dropWhileEffect2;
  either13 = either9;
  empty49 = empty43;
  ensuring13 = ensuring9;
  ensuringWith6 = ensuringWith3;
  context14 = context10;
  contextWith10 = contextWith6;
  contextWithEffect8 = contextWithEffect5;
  contextWithStream2 = contextWithStream;
  execute2 = execute;
  fail26 = fail19;
  failSync14 = failSync10;
  failCause19 = failCause16;
  failCauseSync12 = failCauseSync9;
  filter23 = filter18;
  filterEffect3 = filterEffect;
  filterMap13 = filterMap12;
  filterMapEffect2 = filterMapEffect;
  filterMapWhile5 = filterMapWhile4;
  filterMapWhileEffect2 = filterMapWhileEffect;
  finalizer2 = finalizer;
  find4 = find3;
  findEffect4 = findEffect2;
  flatMap28 = flatMap23;
  flatten20 = flatten17;
  flattenChunks2 = flattenChunks;
  flattenEffect2 = flattenEffect;
  flattenExitOption2 = flattenExitOption;
  flattenIterables2 = flattenIterables;
  flattenTake2 = flattenTake;
  forever7 = forever6;
  fromAsyncIterable2 = fromAsyncIterable;
  fromChannel4 = fromChannel2;
  toChannel6 = toChannel2;
  fromChunk2 = fromChunk;
  fromChunkPubSub2 = fromChunkPubSub;
  fromChunkQueue2 = fromChunkQueue;
  fromChunks2 = fromChunks;
  fromEffect14 = fromEffect9;
  fromEffectOption2 = fromEffectOption;
  fromPubSub6 = fromPubSub3;
  fromTPubSub2 = fromTPubSub;
  fromIterable23 = fromIterable17;
  fromIterableEffect2 = fromIterableEffect;
  fromIteratorSucceed2 = fromIteratorSucceed;
  fromPull3 = fromPull2;
  fromQueue6 = fromQueue3;
  fromTQueue2 = fromTQueue;
  fromReadableStream2 = fromReadableStream;
  fromReadableStreamByob2 = fromReadableStreamByob;
  fromSchedule2 = fromSchedule;
  groupAdjacentBy2 = groupAdjacentBy;
  groupBy4 = groupBy3;
  groupByKey2 = groupByKey;
  grouped2 = grouped;
  groupedWithin2 = groupedWithin;
  haltAfter2 = haltAfter;
  haltWhen2 = haltWhen;
  haltWhenDeferred2 = haltWhenDeferred;
  identity6 = identityStream;
  interleave2 = interleave;
  interleaveWith2 = interleaveWith;
  intersperse4 = intersperse3;
  intersperseAffixes2 = intersperseAffixes;
  interruptAfter3 = interruptAfter2;
  interruptWhen4 = interruptWhen2;
  interruptWhenDeferred4 = interruptWhenDeferred2;
  iterate6 = iterate4;
  make119 = make73;
  map44 = map33;
  mapAccum6 = mapAccum5;
  mapAccumEffect2 = mapAccumEffect;
  mapBoth12 = mapBoth9;
  mapChunks2 = mapChunks;
  mapChunksEffect2 = mapChunksEffect;
  mapConcat2 = mapConcat;
  mapConcatChunk2 = mapConcatChunk;
  mapConcatChunkEffect2 = mapConcatChunkEffect;
  mapConcatEffect2 = mapConcatEffect;
  mapEffect10 = mapEffectOptions;
  mapError15 = mapError10;
  mapErrorCause8 = mapErrorCause6;
  merge12 = merge10;
  mergeAll12 = mergeAll9;
  mergeWithTag2 = mergeWithTag;
  mergeWith5 = mergeWith3;
  mergeEither2 = mergeEither;
  mergeLeft2 = mergeLeft;
  mergeRight2 = mergeRight;
  mkString4 = mkString2;
  never13 = never8;
  onEnd2 = onEnd;
  onError5 = onError4;
  onDone2 = onDone;
  onStart2 = onStart;
  orDie11 = orDie8;
  orDieWith8 = orDieWith5;
  orElse23 = orElse13;
  orElseEither9 = orElseEither7;
  orElseFail6 = orElseFail4;
  orElseIfEmpty2 = orElseIfEmpty;
  orElseIfEmptyChunk2 = orElseIfEmptyChunk;
  orElseIfEmptyStream2 = orElseIfEmptyStream;
  orElseSucceed7 = orElseSucceed5;
  paginate2 = paginate;
  paginateChunk2 = paginateChunk;
  paginateChunkEffect2 = paginateChunkEffect;
  paginateEffect2 = paginateEffect;
  partition14 = partition11;
  partitionEither2 = partitionEither;
  peel2 = peel;
  pipeThrough2 = pipeThrough;
  pipeThroughChannel2 = pipeThroughChannel;
  pipeThroughChannelOrFail2 = pipeThroughChannelOrFail;
  prepend7 = prepend6;
  provideContext14 = provideContext8;
  provideLayer4 = provideLayer2;
  provideService13 = provideService10;
  provideServiceEffect5 = provideServiceEffect4;
  provideServiceStream2 = provideServiceStream;
  mapInputContext12 = mapInputContext7;
  provideSomeLayer5 = provideSomeLayer3;
  race9 = race5;
  raceAll5 = raceAll4;
  range5 = range4;
  rechunk2 = rechunk;
  refineOrDie6 = refineOrDie3;
  refineOrDieWith6 = refineOrDieWith3;
  repeat7 = repeat4;
  repeatEffect2 = repeatEffect;
  repeatEffectChunk2 = repeatEffectChunk;
  repeatEffectChunkOption2 = repeatEffectChunkOption;
  repeatEffectOption2 = repeatEffectOption;
  repeatEffectWithSchedule2 = repeatEffectWithSchedule;
  repeatEither2 = repeatEither;
  repeatElements2 = repeatElements;
  repeatElementsWith2 = repeatElementsWith;
  repeatValue2 = repeatValue;
  repeatWith2 = repeatWith;
  retry11 = retry7;
  run9 = run4;
  runCollect4 = runCollect2;
  runCount2 = runCount;
  runDrain4 = runDrain2;
  runFold2 = runFold;
  runFoldEffect2 = runFoldEffect;
  runFoldScoped2 = runFoldScoped;
  runFoldScopedEffect2 = runFoldScopedEffect;
  runFoldWhile2 = runFoldWhile;
  runFoldWhileEffect2 = runFoldWhileEffect;
  runFoldWhileScoped2 = runFoldWhileScoped;
  runFoldWhileScopedEffect2 = runFoldWhileScopedEffect;
  runForEach2 = runForEach;
  runForEachChunk2 = runForEachChunk;
  runForEachChunkScoped2 = runForEachChunkScoped;
  runForEachScoped2 = runForEachScoped;
  runForEachWhile2 = runForEachWhile;
  runForEachWhileScoped2 = runForEachWhileScoped;
  runHead2 = runHead;
  runIntoPubSub2 = runIntoPubSub;
  runIntoPubSubScoped2 = runIntoPubSubScoped;
  runIntoQueue2 = runIntoQueue;
  runIntoQueueElementsScoped2 = runIntoQueueElementsScoped;
  runIntoQueueScoped2 = runIntoQueueScoped;
  runLast2 = runLast;
  runScoped4 = runScoped2;
  runSum2 = runSum;
  scan4 = scan3;
  scanEffect2 = scanEffect;
  scanReduce2 = scanReduce;
  scanReduceEffect2 = scanReduceEffect;
  schedule3 = schedule2;
  scheduleWith2 = scheduleWith;
  scoped9 = scoped7;
  scopedWith6 = scopedWith4;
  sliding10 = sliding9;
  slidingSize2 = slidingSize;
  some20 = some17;
  someOrElse2 = someOrElse;
  someOrFail2 = someOrFail;
  split6 = split4;
  splitOnChunk2 = splitOnChunk;
  splitLines4 = splitLines2;
  succeed29 = succeed20;
  sync22 = sync14;
  suspend17 = suspend10;
  take13 = take11;
  takeRight5 = takeRight4;
  takeUntil4 = takeUntil3;
  takeUntilEffect2 = takeUntilEffect;
  takeWhile7 = takeWhile6;
  tap11 = tap9;
  tapBoth6 = tapBoth4;
  tapError9 = tapError7;
  tapErrorCause7 = tapErrorCause6;
  tapSink2 = tapSink;
  throttle2 = throttle;
  throttleEffect2 = throttleEffect;
  tick2 = tick;
  timeout5 = timeout4;
  timeoutFail4 = timeoutFail3;
  timeoutFailCause4 = timeoutFailCause3;
  timeoutTo4 = timeoutTo3;
  toPubSub4 = toPubSub2;
  toPull4 = toPull2;
  toQueue4 = toQueue2;
  toQueueOfElements2 = toQueueOfElements;
  toReadableStream2 = toReadableStream;
  toReadableStreamEffect2 = toReadableStreamEffect;
  toReadableStreamRuntime2 = toReadableStreamRuntime;
  transduce2 = transduce;
  unfold6 = unfold5;
  unfoldChunk2 = unfoldChunk;
  unfoldChunkEffect2 = unfoldChunkEffect;
  unfoldEffect2 = unfoldEffect;
  void_13 = void_10;
  unwrap9 = unwrap4;
  unwrapScoped8 = unwrapScoped5;
  unwrapScopedWith6 = unwrapScopedWith3;
  updateService8 = updateService6;
  when9 = when5;
  whenCase2 = whenCase;
  whenCaseEffect2 = whenCaseEffect;
  whenEffect4 = whenEffect3;
  withSpan8 = withSpan6;
  zip26 = zip16;
  zipFlatten2 = zipFlatten;
  zipAll2 = zipAll;
  zipAllLeft2 = zipAllLeft;
  zipAllRight2 = zipAllRight;
  zipAllSortedByKey2 = zipAllSortedByKey;
  zipAllSortedByKeyLeft2 = zipAllSortedByKeyLeft;
  zipAllSortedByKeyRight2 = zipAllSortedByKeyRight;
  zipAllSortedByKeyWith2 = zipAllSortedByKeyWith;
  zipAllWith2 = zipAllWith;
  zipLatest2 = zipLatest;
  zipLatestAll2 = zipLatestAll;
  zipLatestWith2 = zipLatestWith;
  zipLeft17 = zipLeft12;
  zipRight17 = zipRight12;
  zipWith22 = zipWith17;
  zipWithChunks2 = zipWithChunks;
  zipWithNext2 = zipWithNext;
  zipWithPrevious2 = zipWithPrevious;
  zipWithPreviousAndNext2 = zipWithPreviousAndNext;
  zipWithIndex2 = zipWithIndex;
  Do9 = Do7;
  bind11 = bind9;
  bindEffect2 = bindEffect;
  bindTo11 = bindTo9;
  let_11 = let_9;
  decodeText2 = decodeText;
  encodeText2 = encodeText;
  fromEventListener2 = fromEventListener;
});

// node_modules/effect/dist/esm/StreamEmit.js
var exports_StreamEmit = {};
var init_StreamEmit = () => {};

// node_modules/effect/dist/esm/Streamable.js
var exports_Streamable = {};
__export(exports_Streamable, {
  Class: () => Class7
});
var streamVariance2, Class7;
var init_Streamable = __esm(() => {
  init_Stream2();
  streamVariance2 = {
    _R: (_) => _,
    _E: (_) => _,
    _A: (_) => _
  };
  Class7 = class Class7 {
    [StreamTypeId4] = streamVariance2;
    pipe() {
      return pipeArguments(this, arguments);
    }
    get channel() {
      return toChannel6(this.toStream());
    }
  };
});

// node_modules/effect/dist/esm/Subscribable.js
var exports_Subscribable = {};
__export(exports_Subscribable, {
  unwrap: () => unwrap10,
  mapEffect: () => mapEffect11,
  map: () => map45,
  make: () => make120,
  isSubscribable: () => isSubscribable,
  TypeId: () => TypeId39
});
var TypeId39, isSubscribable = (u) => hasProperty(u, TypeId39), Proto6, make120 = (options) => Object.assign(Object.create(Proto6), options), map45, mapEffect11, unwrap10 = (effect4) => make120({
  get: flatMap18(effect4, (s) => s.get),
  changes: unwrap9(map26(effect4, (s) => s.changes))
});
var init_Subscribable = __esm(() => {
  init_Effect();
  init_Function();
  init_Predicate();
  init_Readable();
  init_Stream2();
  TypeId39 = /* @__PURE__ */ Symbol.for("effect/Subscribable");
  Proto6 = {
    [TypeId15]: TypeId15,
    [TypeId39]: TypeId39,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  map45 = /* @__PURE__ */ dual(2, (self, f) => make120({
    get: map26(self.get, f),
    changes: map44(self.changes, f)
  }));
  mapEffect11 = /* @__PURE__ */ dual(2, (self, f) => make120({
    get: flatMap18(self.get, f),
    changes: mapEffect10(self.changes, f)
  }));
});

// node_modules/effect/dist/esm/SynchronizedRef.js
var exports_SynchronizedRef = {};
__export(exports_SynchronizedRef, {
  updateSomeEffect: () => updateSomeEffect2,
  updateSomeAndGetEffect: () => updateSomeAndGetEffect,
  updateSomeAndGet: () => updateSomeAndGet5,
  updateSome: () => updateSome5,
  updateEffect: () => updateEffect2,
  updateAndGetEffect: () => updateAndGetEffect2,
  updateAndGet: () => updateAndGet6,
  update: () => update10,
  unsafeMake: () => unsafeMake19,
  setAndGet: () => setAndGet5,
  set: () => set18,
  modifySomeEffect: () => modifySomeEffect2,
  modifySome: () => modifySome5,
  modifyEffect: () => modifyEffect2,
  modify: () => modify14,
  make: () => make121,
  getAndUpdateSomeEffect: () => getAndUpdateSomeEffect2,
  getAndUpdateSome: () => getAndUpdateSome5,
  getAndUpdateEffect: () => getAndUpdateEffect2,
  getAndUpdate: () => getAndUpdate6,
  getAndSet: () => getAndSet6,
  get: () => get35,
  SynchronizedRefTypeId: () => SynchronizedRefTypeId
});
var SynchronizedRefTypeId, make121, get35, getAndSet6, getAndUpdate6, getAndUpdateEffect2, getAndUpdateSome5, getAndUpdateSomeEffect2, modify14, modifyEffect2, modifySome5, modifySomeEffect2, set18, setAndGet5, update10, updateEffect2, updateAndGet6, updateAndGetEffect2, updateSome5, updateSomeEffect2, updateSomeAndGet5, updateSomeAndGetEffect, unsafeMake19;
var init_SynchronizedRef = __esm(() => {
  init_circular();
  init_ref();
  init_synchronizedRef();
  SynchronizedRefTypeId = SynchronizedTypeId;
  make121 = makeSynchronized;
  get35 = get13;
  getAndSet6 = getAndSet2;
  getAndUpdate6 = getAndUpdate2;
  getAndUpdateEffect2 = getAndUpdateEffect;
  getAndUpdateSome5 = getAndUpdateSome;
  getAndUpdateSomeEffect2 = getAndUpdateSomeEffect;
  modify14 = modify10;
  modifyEffect2 = modifyEffect;
  modifySome5 = modifySome;
  modifySomeEffect2 = modifySomeEffect;
  set18 = set6;
  setAndGet5 = setAndGet2;
  update10 = update3;
  updateEffect2 = updateEffect;
  updateAndGet6 = updateAndGet2;
  updateAndGetEffect2 = updateAndGetEffect;
  updateSome5 = updateSome;
  updateSomeEffect2 = updateSomeEffect;
  updateSomeAndGet5 = updateSomeAndGet;
  updateSomeAndGetEffect = updateSomeAndGetEffectSynchronized;
  unsafeMake19 = unsafeMakeSynchronized;
});

// node_modules/effect/dist/esm/internal/subscriptionRef.js
var SubscriptionRefSymbolKey = "effect/SubscriptionRef", SubscriptionRefTypeId, subscriptionRefVariance, SubscriptionRefImpl, get36 = (self) => get14(self.ref), make122 = (value10) => pipe(all11([unbounded4(), make37(value10), makeSemaphore2(1)]), map26(([pubsub, ref, semaphore]) => new SubscriptionRefImpl(ref, pubsub, semaphore))), modify15, modifyEffect3, set19;
var init_subscriptionRef = __esm(() => {
  init_Effect();
  init_Effectable();
  init_Function();
  init_PubSub();
  init_Readable();
  init_Ref();
  init_Subscribable();
  init_SynchronizedRef();
  init_circular();
  init_ref();
  init_stream();
  SubscriptionRefTypeId = /* @__PURE__ */ Symbol.for(SubscriptionRefSymbolKey);
  subscriptionRefVariance = {
    _A: (_) => _
  };
  SubscriptionRefImpl = class SubscriptionRefImpl extends Class2 {
    ref;
    pubsub;
    semaphore;
    [TypeId15] = TypeId15;
    [TypeId39] = TypeId39;
    [RefTypeId2] = refVariance;
    [SynchronizedRefTypeId] = synchronizedVariance;
    [SubscriptionRefTypeId] = subscriptionRefVariance;
    constructor(ref, pubsub, semaphore) {
      super();
      this.ref = ref;
      this.pubsub = pubsub;
      this.semaphore = semaphore;
      this.get = get14(this.ref);
    }
    commit() {
      return this.get;
    }
    get;
    get changes() {
      return pipe(get14(this.ref), flatMap18((a) => map26(fromPubSub3(this.pubsub, {
        scoped: true
      }), (s) => concat3(make73(a), s))), this.semaphore.withPermits(1), unwrapScoped5);
    }
    modify(f) {
      return this.modifyEffect((a) => succeed13(f(a)));
    }
    modifyEffect(f) {
      return pipe(get14(this.ref), flatMap18(f), flatMap18(([b, a]) => pipe(set7(this.ref, a), as8(b), zipLeft7(publish2(this.pubsub, a)))), this.semaphore.withPermits(1));
    }
  };
  modify15 = /* @__PURE__ */ dual(2, (self, f) => self.modify(f));
  modifyEffect3 = /* @__PURE__ */ dual(2, (self, f) => self.modifyEffect(f));
  set19 = /* @__PURE__ */ dual(2, (self, value10) => pipe(set7(self.ref, value10), zipLeft7(publish2(self.pubsub, value10)), self.semaphore.withPermits(1)));
});

// node_modules/effect/dist/esm/SubscriptionRef.js
var exports_SubscriptionRef = {};
__export(exports_SubscriptionRef, {
  updateSomeEffect: () => updateSomeEffect3,
  updateSomeAndGetEffect: () => updateSomeAndGetEffect2,
  updateSomeAndGet: () => updateSomeAndGet6,
  updateSome: () => updateSome6,
  updateEffect: () => updateEffect3,
  updateAndGetEffect: () => updateAndGetEffect3,
  updateAndGet: () => updateAndGet7,
  update: () => update11,
  setAndGet: () => setAndGet6,
  set: () => set20,
  modifySomeEffect: () => modifySomeEffect3,
  modifySome: () => modifySome6,
  modifyEffect: () => modifyEffect4,
  modify: () => modify16,
  make: () => make123,
  getAndUpdateSomeEffect: () => getAndUpdateSomeEffect3,
  getAndUpdateSome: () => getAndUpdateSome6,
  getAndUpdateEffect: () => getAndUpdateEffect3,
  getAndUpdate: () => getAndUpdate7,
  getAndSet: () => getAndSet7,
  get: () => get37,
  SubscriptionRefTypeId: () => SubscriptionRefTypeId2
});
var SubscriptionRefTypeId2, get37, getAndSet7, getAndUpdate7, getAndUpdateEffect3, getAndUpdateSome6, getAndUpdateSomeEffect3, make123, modify16, modifyEffect4, modifySome6, modifySomeEffect3, set20, setAndGet6, update11, updateEffect3, updateAndGet7, updateAndGetEffect3, updateSome6, updateSomeEffect3, updateSomeAndGet6, updateSomeAndGetEffect2;
var init_SubscriptionRef = __esm(() => {
  init_subscriptionRef();
  init_Ref();
  init_SynchronizedRef();
  SubscriptionRefTypeId2 = SubscriptionRefTypeId;
  get37 = get36;
  getAndSet7 = getAndSet3;
  getAndUpdate7 = getAndUpdate3;
  getAndUpdateEffect3 = getAndUpdateEffect2;
  getAndUpdateSome6 = getAndUpdateSome2;
  getAndUpdateSomeEffect3 = getAndUpdateSomeEffect2;
  make123 = make122;
  modify16 = modify15;
  modifyEffect4 = modifyEffect3;
  modifySome6 = modifySome2;
  modifySomeEffect3 = modifySomeEffect2;
  set20 = set19;
  setAndGet6 = setAndGet3;
  update11 = update4;
  updateEffect3 = updateEffect2;
  updateAndGet7 = updateAndGet3;
  updateAndGetEffect3 = updateAndGetEffect2;
  updateSome6 = updateSome2;
  updateSomeEffect3 = updateSomeEffect2;
  updateSomeAndGet6 = updateSomeAndGet2;
  updateSomeAndGetEffect2 = updateSomeAndGetEffect;
});

// node_modules/effect/dist/esm/Supervisor.js
var exports_Supervisor = {};
__export(exports_Supervisor, {
  unsafeTrack: () => unsafeTrack2,
  track: () => track2,
  none: () => none14,
  fromEffect: () => fromEffect15,
  fibersIn: () => fibersIn2,
  addSupervisor: () => addSupervisor2,
  SupervisorTypeId: () => SupervisorTypeId2,
  AbstractSupervisor: () => AbstractSupervisor
});
var SupervisorTypeId2, addSupervisor2, fibersIn2, fromEffect15, none14, track2, unsafeTrack2, AbstractSupervisor;
var init_Supervisor = __esm(() => {
  init_core();
  init_circular3();
  init_supervisor();
  SupervisorTypeId2 = SupervisorTypeId;
  addSupervisor2 = addSupervisor;
  fibersIn2 = fibersIn;
  fromEffect15 = fromEffect2;
  none14 = none8;
  track2 = track;
  unsafeTrack2 = unsafeTrack;
  AbstractSupervisor = class AbstractSupervisor {
    onStart(_context, _effect, _parent, _fiber) {}
    onEnd(_value, _fiber) {}
    onEffect(_fiber, _effect) {}
    onSuspend(_fiber) {}
    onResume(_fiber) {}
    map(f) {
      return new ProxySupervisor(this, map14(this.value, f));
    }
    zip(right3) {
      return new Zip(this, right3);
    }
    onRun(execution, _fiber) {
      return execution();
    }
    [SupervisorTypeId2] = supervisorVariance;
  };
});

// node_modules/effect/dist/esm/Symbol.js
var exports_Symbol = {};
__export(exports_Symbol, {
  isSymbol: () => isSymbol2,
  Equivalence: () => Equivalence10
});
var isSymbol2, Equivalence10;
var init_Symbol = __esm(() => {
  init_Equivalence();
  init_Predicate();
  isSymbol2 = isSymbol;
  Equivalence10 = symbol;
});

// node_modules/effect/dist/esm/internal/stm/tArray.js
var TArraySymbolKey = "effect/TArray", TArrayTypeId, tArrayVariance, TArrayImpl, collectFirst, collectFirstSTM, contains7, count7, countSTM, empty50 = () => fromIterable24([]), every18, everySTM, findFirst11, findFirstIndex3, findFirstIndexFrom, findFirstIndexWhere, findFirstIndexWhereFrom, findFirstIndexWhereSTM, findFirstIndexWhereFromSTM, findFirstSTM, findLast4, findLastIndex3, findLastIndexFrom, findLastSTM, forEach21, fromIterable24 = (iterable) => map31(forEach18(iterable, make69), (chunk6) => new TArrayImpl(chunk6)), get38, headOption2 = (self) => self.chunk.length === 0 ? succeed19(none2()) : map31(get18(self.chunk[0]), some3), lastOption2 = (self) => self.chunk.length === 0 ? succeedNone4 : map31(get18(self.chunk[self.chunk.length - 1]), some3), make124 = (...elements) => fromIterable24(elements), maxOption, minOption, reduce23, reduceOption, reduceOptionSTM, reduceSTM, size29 = (self) => self.chunk.length, some21, someSTM, toArray4 = (self) => forEach18(self.chunk, get18), transform4, transformSTM, update12, updateSTM;
var init_tArray = __esm(() => {
  init_Equal();
  init_Function();
  init_Option();
  init_Order();
  init_core2();
  init_stm();
  init_tRef();
  TArrayTypeId = /* @__PURE__ */ Symbol.for(TArraySymbolKey);
  tArrayVariance = {
    _A: (_) => _
  };
  TArrayImpl = class TArrayImpl {
    chunk;
    [TArrayTypeId] = tArrayVariance;
    constructor(chunk6) {
      this.chunk = chunk6;
    }
  };
  collectFirst = /* @__PURE__ */ dual(2, (self, pf) => collectFirstSTM(self, (a) => pipe(pf(a), map2(succeed19))));
  collectFirstSTM = /* @__PURE__ */ dual(2, (self, pf) => withSTMRuntime((runtime8) => {
    let index = 0;
    let result2 = none2();
    while (isNone2(result2) && index < self.chunk.length) {
      const element2 = pipe(self.chunk[index], unsafeGet9(runtime8.journal));
      const option11 = pf(element2);
      if (isSome2(option11)) {
        result2 = option11;
      }
      index = index + 1;
    }
    return pipe(result2, match2({
      onNone: () => succeedNone4,
      onSome: map31(some3)
    }));
  }));
  contains7 = /* @__PURE__ */ dual(2, (self, value10) => some21(self, (a) => equals(a)(value10)));
  count7 = /* @__PURE__ */ dual(2, (self, predicate) => reduce23(self, 0, (n, a) => predicate(a) ? n + 1 : n));
  countSTM = /* @__PURE__ */ dual(2, (self, predicate) => reduceSTM(self, 0, (n, a) => map31(predicate(a), (bool) => bool ? n + 1 : n)));
  every18 = /* @__PURE__ */ dual(2, (self, predicate) => negate5(some21(self, (a) => !predicate(a))));
  everySTM = /* @__PURE__ */ dual(2, (self, predicate) => map31(countSTM(self, predicate), (count8) => count8 === self.chunk.length));
  findFirst11 = /* @__PURE__ */ dual(2, (self, predicate) => collectFirst(self, (a) => predicate(a) ? some3(a) : none2()));
  findFirstIndex3 = /* @__PURE__ */ dual(2, (self, value10) => findFirstIndexFrom(self, value10, 0));
  findFirstIndexFrom = /* @__PURE__ */ dual(3, (self, value10, from) => findFirstIndexWhereFrom(self, (a) => equals(a)(value10), from));
  findFirstIndexWhere = /* @__PURE__ */ dual(2, (self, predicate) => findFirstIndexWhereFrom(self, predicate, 0));
  findFirstIndexWhereFrom = /* @__PURE__ */ dual(3, (self, predicate, from) => {
    if (from < 0) {
      return succeedNone4;
    }
    return effect3((journal) => {
      let index = from;
      let found = false;
      while (!found && index < self.chunk.length) {
        const element2 = unsafeGet9(self.chunk[index], journal);
        found = predicate(element2);
        index = index + 1;
      }
      if (found) {
        return some3(index - 1);
      }
      return none2();
    });
  });
  findFirstIndexWhereSTM = /* @__PURE__ */ dual(2, (self, predicate) => findFirstIndexWhereFromSTM(self, predicate, 0));
  findFirstIndexWhereFromSTM = /* @__PURE__ */ dual(3, (self, predicate, from) => {
    const forIndex = (index) => index < self.chunk.length ? pipe(get18(self.chunk[index]), flatMap22(predicate), flatMap22((bool) => bool ? succeed19(some3(index)) : forIndex(index + 1))) : succeedNone4;
    return from < 0 ? succeedNone4 : forIndex(from);
  });
  findFirstSTM = /* @__PURE__ */ dual(2, (self, predicate) => {
    const init2 = [none2(), 0];
    const cont = (state) => isNone2(state[0]) && state[1] < self.chunk.length - 1;
    return map31(iterate3(init2, {
      while: cont,
      body: (state) => {
        const index = state[1];
        return pipe(get18(self.chunk[index]), flatMap22((value10) => map31(predicate(value10), (bool) => [bool ? some3(value10) : none2(), index + 1])));
      }
    }), (state) => state[0]);
  });
  findLast4 = /* @__PURE__ */ dual(2, (self, predicate) => effect3((journal) => {
    let index = self.chunk.length - 1;
    let result2 = none2();
    while (isNone2(result2) && index >= 0) {
      const element2 = unsafeGet9(self.chunk[index], journal);
      if (predicate(element2)) {
        result2 = some3(element2);
      }
      index = index - 1;
    }
    return result2;
  }));
  findLastIndex3 = /* @__PURE__ */ dual(2, (self, value10) => findLastIndexFrom(self, value10, self.chunk.length - 1));
  findLastIndexFrom = /* @__PURE__ */ dual(3, (self, value10, end6) => {
    if (end6 >= self.chunk.length) {
      return succeedNone4;
    }
    return effect3((journal) => {
      let index = end6;
      let found = false;
      while (!found && index >= 0) {
        const element2 = unsafeGet9(self.chunk[index], journal);
        found = equals(element2)(value10);
        index = index - 1;
      }
      if (found) {
        return some3(index + 1);
      }
      return none2();
    });
  });
  findLastSTM = /* @__PURE__ */ dual(2, (self, predicate) => {
    const init2 = [none2(), self.chunk.length - 1];
    const cont = (state) => isNone2(state[0]) && state[1] >= 0;
    return map31(iterate3(init2, {
      while: cont,
      body: (state) => {
        const index = state[1];
        return pipe(get18(self.chunk[index]), flatMap22((value10) => map31(predicate(value10), (bool) => [bool ? some3(value10) : none2(), index - 1])));
      }
    }), (state) => state[0]);
  });
  forEach21 = /* @__PURE__ */ dual(2, (self, f) => reduceSTM(self, undefined, (_, a) => f(a)));
  get38 = /* @__PURE__ */ dual(2, (self, index) => {
    if (index < 0 || index >= self.chunk.length) {
      return dieMessage4("Index out of bounds");
    }
    return get18(self.chunk[index]);
  });
  maxOption = /* @__PURE__ */ dual(2, (self, order) => {
    const greaterThan12 = greaterThan(order);
    return reduceOption(self, (acc, curr) => greaterThan12(acc)(curr) ? curr : acc);
  });
  minOption = /* @__PURE__ */ dual(2, (self, order) => {
    const lessThan16 = lessThan(order);
    return reduceOption(self, (acc, curr) => lessThan16(acc)(curr) ? curr : acc);
  });
  reduce23 = /* @__PURE__ */ dual(3, (self, zero3, f) => effect3((journal) => {
    let index = 0;
    let result2 = zero3;
    while (index < self.chunk.length) {
      const element2 = unsafeGet9(self.chunk[index], journal);
      result2 = f(result2, element2);
      index = index + 1;
    }
    return result2;
  }));
  reduceOption = /* @__PURE__ */ dual(2, (self, f) => effect3((journal) => {
    let index = 0;
    let result2 = undefined;
    while (index < self.chunk.length) {
      const element2 = unsafeGet9(self.chunk[index], journal);
      result2 = result2 === undefined ? element2 : f(result2, element2);
      index = index + 1;
    }
    return fromNullable2(result2);
  }));
  reduceOptionSTM = /* @__PURE__ */ dual(2, (self, f) => reduceSTM(self, none2(), (acc, curr) => isSome2(acc) ? map31(f(acc.value, curr), some3) : succeedSome4(curr)));
  reduceSTM = /* @__PURE__ */ dual(3, (self, zero3, f) => flatMap22(toArray4(self), reduce19(zero3, f)));
  some21 = /* @__PURE__ */ dual(2, (self, predicate) => map31(findFirst11(self, predicate), isSome2));
  someSTM = /* @__PURE__ */ dual(2, (self, predicate) => map31(countSTM(self, predicate), (n) => n > 0));
  transform4 = /* @__PURE__ */ dual(2, (self, f) => effect3((journal) => {
    let index = 0;
    while (index < self.chunk.length) {
      const ref = self.chunk[index];
      unsafeSet2(ref, f(unsafeGet9(ref, journal)), journal);
      index = index + 1;
    }
    return;
  }));
  transformSTM = /* @__PURE__ */ dual(2, (self, f) => flatMap22(forEach18(self.chunk, (ref) => flatMap22(get18(ref), f)), (chunk6) => effect3((journal) => {
    const iterator = chunk6[Symbol.iterator]();
    let index = 0;
    let next4;
    while ((next4 = iterator.next()) && !next4.done) {
      unsafeSet2(self.chunk[index], next4.value, journal);
      index = index + 1;
    }
    return;
  })));
  update12 = /* @__PURE__ */ dual(3, (self, index, f) => {
    if (index < 0 || index >= self.chunk.length) {
      return dieMessage4("Index out of bounds");
    }
    return update8(self.chunk[index], f);
  });
  updateSTM = /* @__PURE__ */ dual(3, (self, index, f) => {
    if (index < 0 || index >= self.chunk.length) {
      return dieMessage4("Index out of bounds");
    }
    return pipe(get18(self.chunk[index]), flatMap22(f), flatMap22((updated) => set10(self.chunk[index], updated)));
  });
});

// node_modules/effect/dist/esm/TArray.js
var exports_TArray = {};
__export(exports_TArray, {
  updateSTM: () => updateSTM2,
  update: () => update13,
  transformSTM: () => transformSTM2,
  transform: () => transform5,
  toArray: () => toArray5,
  someSTM: () => someSTM2,
  some: () => some22,
  size: () => size30,
  reduceSTM: () => reduceSTM2,
  reduceOptionSTM: () => reduceOptionSTM2,
  reduceOption: () => reduceOption2,
  reduce: () => reduce24,
  minOption: () => minOption2,
  maxOption: () => maxOption2,
  make: () => make125,
  lastOption: () => lastOption3,
  headOption: () => headOption3,
  get: () => get39,
  fromIterable: () => fromIterable25,
  forEach: () => forEach22,
  findLastSTM: () => findLastSTM2,
  findLastIndexFrom: () => findLastIndexFrom2,
  findLastIndex: () => findLastIndex4,
  findLast: () => findLast5,
  findFirstSTM: () => findFirstSTM2,
  findFirstIndexWhereSTM: () => findFirstIndexWhereSTM2,
  findFirstIndexWhereFromSTM: () => findFirstIndexWhereFromSTM2,
  findFirstIndexWhereFrom: () => findFirstIndexWhereFrom2,
  findFirstIndexWhere: () => findFirstIndexWhere2,
  findFirstIndexFrom: () => findFirstIndexFrom2,
  findFirstIndex: () => findFirstIndex4,
  findFirst: () => findFirst12,
  everySTM: () => everySTM2,
  every: () => every19,
  empty: () => empty51,
  countSTM: () => countSTM2,
  count: () => count8,
  contains: () => contains8,
  collectFirstSTM: () => collectFirstSTM2,
  collectFirst: () => collectFirst2,
  TArrayTypeId: () => TArrayTypeId2
});
var TArrayTypeId2, collectFirst2, collectFirstSTM2, contains8, count8, countSTM2, empty51, every19, everySTM2, findFirst12, findFirstIndex4, findFirstIndexFrom2, findFirstIndexWhere2, findFirstIndexWhereFrom2, findFirstIndexWhereSTM2, findFirstIndexWhereFromSTM2, findFirstSTM2, findLast5, findLastIndex4, findLastIndexFrom2, findLastSTM2, forEach22, fromIterable25, get39, headOption3, lastOption3, make125, maxOption2, minOption2, reduce24, reduceOption2, reduceOptionSTM2, reduceSTM2, size30, some22, someSTM2, toArray5, transform5, transformSTM2, update13, updateSTM2;
var init_TArray = __esm(() => {
  init_tArray();
  TArrayTypeId2 = TArrayTypeId;
  collectFirst2 = collectFirst;
  collectFirstSTM2 = collectFirstSTM;
  contains8 = contains7;
  count8 = count7;
  countSTM2 = countSTM;
  empty51 = empty50;
  every19 = every18;
  everySTM2 = everySTM;
  findFirst12 = findFirst11;
  findFirstIndex4 = findFirstIndex3;
  findFirstIndexFrom2 = findFirstIndexFrom;
  findFirstIndexWhere2 = findFirstIndexWhere;
  findFirstIndexWhereFrom2 = findFirstIndexWhereFrom;
  findFirstIndexWhereSTM2 = findFirstIndexWhereSTM;
  findFirstIndexWhereFromSTM2 = findFirstIndexWhereFromSTM;
  findFirstSTM2 = findFirstSTM;
  findLast5 = findLast4;
  findLastIndex4 = findLastIndex3;
  findLastIndexFrom2 = findLastIndexFrom;
  findLastSTM2 = findLastSTM;
  forEach22 = forEach21;
  fromIterable25 = fromIterable24;
  get39 = get38;
  headOption3 = headOption2;
  lastOption3 = lastOption2;
  make125 = make124;
  maxOption2 = maxOption;
  minOption2 = minOption;
  reduce24 = reduce23;
  reduceOption2 = reduceOption;
  reduceOptionSTM2 = reduceOptionSTM;
  reduceSTM2 = reduceSTM;
  size30 = size29;
  some22 = some21;
  someSTM2 = someSTM;
  toArray5 = toArray4;
  transform5 = transform4;
  transformSTM2 = transformSTM;
  update13 = update12;
  updateSTM2 = updateSTM;
});

// node_modules/effect/dist/esm/internal/stm/tDeferred.js
var TDeferredSymbolKey = "effect/TDeferred", TDeferredTypeId, tDeferredVariance, TDeferredImpl, _await4 = (self) => flatten16(collect3(get18(self.ref), (option11) => isSome2(option11) ? some3(fromEither4(option11.value)) : none2())), done12, fail27, make126 = () => map31(make69(none2()), (ref) => new TDeferredImpl(ref)), poll11 = (self) => get18(self.ref), succeed30;
var init_tDeferred = __esm(() => {
  init_Either();
  init_Function();
  init_Option();
  init_core2();
  init_stm();
  init_tRef();
  TDeferredTypeId = /* @__PURE__ */ Symbol.for(TDeferredSymbolKey);
  tDeferredVariance = {
    _A: (_) => _,
    _E: (_) => _
  };
  TDeferredImpl = class TDeferredImpl {
    ref;
    [TDeferredTypeId] = tDeferredVariance;
    constructor(ref) {
      this.ref = ref;
    }
  };
  done12 = /* @__PURE__ */ dual(2, (self, either14) => flatMap22(get18(self.ref), match2({
    onNone: () => zipRight11(set10(self.ref, some3(either14)), succeed19(true)),
    onSome: () => succeed19(false)
  })));
  fail27 = /* @__PURE__ */ dual(2, (self, error4) => done12(self, left2(error4)));
  succeed30 = /* @__PURE__ */ dual(2, (self, value10) => done12(self, right2(value10)));
});

// node_modules/effect/dist/esm/TDeferred.js
var exports_TDeferred = {};
__export(exports_TDeferred, {
  succeed: () => succeed31,
  poll: () => poll12,
  make: () => make127,
  fail: () => fail28,
  done: () => done13,
  await: () => _await5,
  TDeferredTypeId: () => TDeferredTypeId2
});
var TDeferredTypeId2, _await5, done13, fail28, make127, poll12, succeed31;
var init_TDeferred = __esm(() => {
  init_tDeferred();
  TDeferredTypeId2 = TDeferredTypeId;
  _await5 = _await4;
  done13 = done12;
  fail28 = fail27;
  make127 = make126;
  poll12 = poll11;
  succeed31 = succeed30;
});

// node_modules/effect/dist/esm/internal/stm/tMap.js
var TMapSymbolKey = "effect/TMap", TMapTypeId, tMapVariance, TMapImpl, isTMap = (u) => hasProperty(u, TMapTypeId), InitialCapacity = 16, LoadFactor = 0.75, nextPowerOfTwo = (size31) => {
  const n = -1 >>> Math.clz32(size31 - 1);
  return n < 0 ? 1 : n + 1;
}, hash3 = (key) => {
  const h2 = hash(key);
  return h2 ^ h2 >>> 16;
}, indexOf4 = (k, capacity10) => hash3(k) & capacity10 - 1, allocate2 = (capacity10, data) => {
  const buckets = Array.from({
    length: capacity10
  }, () => empty7());
  const distinct = new Map(data);
  let size31 = 0;
  for (const entry of distinct) {
    const index = indexOf4(entry[0], capacity10);
    buckets[index] = pipe(buckets[index], prepend3(entry));
    size31 = size31 + 1;
  }
  return pipe(fromIterable24(buckets), flatMap22((buckets2) => pipe(make69(buckets2), flatMap22((tBuckets) => pipe(make69(size31), map31((tSize) => new TMapImpl(tBuckets, tSize)))))));
}, empty52 = () => fromIterable26([]), find5, findSTM, findAll3, findAllSTM, forEach23, fromIterable26 = (iterable) => suspend9(() => {
  const data = fromIterable3(iterable);
  const capacity10 = data.length < InitialCapacity ? InitialCapacity : nextPowerOfTwo(data.length);
  return allocate2(capacity10, data);
}), get40, getOrElse8, has13, isEmpty24 = (self) => map31(get18(self.tSize), (size31) => size31 === 0), keys11 = (self) => map31(toReadonlyArray2(self), map6((entry) => entry[0])), make128 = (...entries4) => fromIterable26(entries4), merge13, reduce25, reduceSTM3, remove15, removeAll, removeIf, retainIf, set21, setIfAbsent, size31 = (self) => get18(self.tSize), takeFirst, takeFirstSTM, takeSome, takeSomeSTM, toReadonlyArray2 = (self) => effect3((journal) => {
  const buckets = unsafeGet9(self.tBuckets, journal);
  const capacity10 = buckets.chunk.length;
  const builder = [];
  let index = 0;
  while (index < capacity10) {
    const bucket = buckets.chunk[index];
    for (const entry of unsafeGet9(bucket, journal)) {
      builder.push(entry);
    }
    index = index + 1;
  }
  return builder;
}), toChunk2 = (self) => reduce25(self, empty7(), (acc, value10, key) => append3(acc, [key, value10])), toHashMap = (self) => reduce25(self, empty11(), (acc, value10, key) => pipe(acc, set4(key, value10))), toArray6 = (self) => reduce25(self, [], (acc, value10, key) => {
  acc.unshift([key, value10]);
  return acc;
}), toMap = (self) => reduce25(self, new Map, (acc, value10, key) => acc.set(key, value10)), transform6, transformSTM3, transformValues, transformValuesSTM, updateWith3, values11 = (self) => map31(toReadonlyArray2(self), map6((entry) => entry[1]));
var init_tMap = __esm(() => {
  init_Array();
  init_Chunk();
  init_Equal();
  init_Function();
  init_Hash();
  init_HashMap();
  init_Option();
  init_Predicate();
  init_STM();
  init_core2();
  init_stm();
  init_tArray();
  init_tRef();
  TMapTypeId = /* @__PURE__ */ Symbol.for(TMapSymbolKey);
  tMapVariance = {
    _K: (_) => _,
    _V: (_) => _
  };
  TMapImpl = class TMapImpl {
    tBuckets;
    tSize;
    [TMapTypeId] = tMapVariance;
    constructor(tBuckets, tSize) {
      this.tBuckets = tBuckets;
      this.tSize = tSize;
    }
  };
  find5 = /* @__PURE__ */ dual(2, (self, pf) => findSTM(self, (key, value10) => {
    const option11 = pf(key, value10);
    if (isSome2(option11)) {
      return succeed19(option11.value);
    }
    return fail17(none2());
  }));
  findSTM = /* @__PURE__ */ dual(2, (self, f) => reduceSTM3(self, none2(), (acc, value10, key) => isNone2(acc) ? matchSTM(f(key, value10), {
    onFailure: match2({
      onNone: () => succeedNone4,
      onSome: fail17
    }),
    onSuccess: succeedSome4
  }) : succeed27(acc)));
  findAll3 = /* @__PURE__ */ dual(2, (self, pf) => findAllSTM(self, (key, value10) => {
    const option11 = pf(key, value10);
    if (isSome2(option11)) {
      return succeed19(option11.value);
    }
    return fail17(none2());
  }));
  findAllSTM = /* @__PURE__ */ dual(2, (self, pf) => map31(reduceSTM3(self, empty7(), (acc, value10, key) => matchSTM(pf(key, value10), {
    onFailure: match2({
      onNone: () => succeed19(acc),
      onSome: fail17
    }),
    onSuccess: (a) => succeed19(append3(acc, a))
  })), (a) => Array.from(a)));
  forEach23 = /* @__PURE__ */ dual(2, (self, f) => reduceSTM3(self, undefined, (_, value10, key) => asVoid9(f(key, value10))));
  get40 = /* @__PURE__ */ dual(2, (self, key) => effect3((journal) => {
    const buckets = unsafeGet9(self.tBuckets, journal);
    const index = indexOf4(key, buckets.chunk.length);
    const bucket = unsafeGet9(buckets.chunk[index], journal);
    return pipe(findFirst3(bucket, (entry) => equals(entry[0])(key)), map2((entry) => entry[1]));
  }));
  getOrElse8 = /* @__PURE__ */ dual(3, (self, key, fallback) => map31(get40(self, key), getOrElse2(fallback)));
  has13 = /* @__PURE__ */ dual(2, (self, key) => map31(get40(self, key), isSome2));
  merge13 = /* @__PURE__ */ dual(4, (self, key, value10, f) => flatMap22(get40(self, key), match2({
    onNone: () => as12(set21(self, key, value10), value10),
    onSome: (v0) => {
      const v1 = f(v0, value10);
      return as12(set21(self, key, v1), v1);
    }
  })));
  reduce25 = /* @__PURE__ */ dual(3, (self, zero3, f) => effect3((journal) => {
    const buckets = unsafeGet9(self.tBuckets, journal);
    let result2 = zero3;
    let index = 0;
    while (index < buckets.chunk.length) {
      const bucket = buckets.chunk[index];
      const items = unsafeGet9(bucket, journal);
      result2 = reduce4(items, result2, (acc, entry) => f(acc, entry[1], entry[0]));
      index = index + 1;
    }
    return result2;
  }));
  reduceSTM3 = /* @__PURE__ */ dual(3, (self, zero3, f) => flatMap22(toReadonlyArray2(self), reduce19(zero3, (acc, entry) => f(acc, entry[1], entry[0]))));
  remove15 = /* @__PURE__ */ dual(2, (self, key) => effect3((journal) => {
    const buckets = unsafeGet9(self.tBuckets, journal);
    const index = indexOf4(key, buckets.chunk.length);
    const bucket = unsafeGet9(buckets.chunk[index], journal);
    const [toRemove, toRetain] = partition3(bucket, (entry) => equals(entry[1], key));
    if (isNonEmpty2(toRemove)) {
      const currentSize = unsafeGet9(self.tSize, journal);
      unsafeSet2(buckets.chunk[index], toRetain, journal);
      unsafeSet2(self.tSize, currentSize - 1, journal);
    }
  }));
  removeAll = /* @__PURE__ */ dual(2, (self, keys12) => effect3((journal) => {
    const iterator = keys12[Symbol.iterator]();
    let next4;
    while ((next4 = iterator.next()) && !next4.done) {
      const buckets = unsafeGet9(self.tBuckets, journal);
      const index = indexOf4(next4.value, buckets.chunk.length);
      const bucket = unsafeGet9(buckets.chunk[index], journal);
      const [toRemove, toRetain] = partition3(bucket, (entry) => equals(next4.value)(entry[0]));
      if (isNonEmpty2(toRemove)) {
        const currentSize = unsafeGet9(self.tSize, journal);
        unsafeSet2(buckets.chunk[index], toRetain, journal);
        unsafeSet2(self.tSize, currentSize - 1, journal);
      }
    }
  }));
  removeIf = /* @__PURE__ */ dual((args2) => isTMap(args2[0]), (self, predicate, options) => effect3((journal) => {
    const discard3 = options?.discard === true;
    const buckets = unsafeGet9(self.tBuckets, journal);
    const capacity10 = buckets.chunk.length;
    const removed = [];
    let index = 0;
    let newSize = 0;
    while (index < capacity10) {
      const bucket = unsafeGet9(buckets.chunk[index], journal);
      const iterator = bucket[Symbol.iterator]();
      let next4;
      let newBucket = empty7();
      while ((next4 = iterator.next()) && !next4.done) {
        const [k, v] = next4.value;
        if (!predicate(k, v)) {
          newBucket = prepend3(newBucket, next4.value);
          newSize = newSize + 1;
        } else {
          if (!discard3) {
            removed.push([k, v]);
          }
        }
      }
      unsafeSet2(buckets.chunk[index], newBucket, journal);
      index = index + 1;
    }
    unsafeSet2(self.tSize, newSize, journal);
    if (!discard3) {
      return removed;
    }
  }));
  retainIf = /* @__PURE__ */ dual((args2) => isTMap(args2[0]), (self, predicate, options) => removeIf(self, (key, value10) => !predicate(key, value10), options));
  set21 = /* @__PURE__ */ dual(3, (self, key, value10) => {
    const resize = (journal, buckets) => {
      const capacity10 = buckets.chunk.length;
      const newCapacity = capacity10 << 1;
      const newBuckets = Array.from({
        length: newCapacity
      }, () => empty7());
      let index = 0;
      while (index < capacity10) {
        const pairs = unsafeGet9(buckets.chunk[index], journal);
        const iterator = pairs[Symbol.iterator]();
        let next4;
        while ((next4 = iterator.next()) && !next4.done) {
          const newIndex2 = indexOf4(next4.value[0], newCapacity);
          newBuckets[newIndex2] = prepend3(newBuckets[newIndex2], next4.value);
        }
        index = index + 1;
      }
      const newIndex = indexOf4(key, newCapacity);
      newBuckets[newIndex] = prepend3(newBuckets[newIndex], [key, value10]);
      const newArray = [];
      index = 0;
      while (index < newCapacity) {
        newArray[index] = new TRefImpl(newBuckets[index]);
        index = index + 1;
      }
      const newTArray = new TArrayImpl(newArray);
      unsafeSet2(self.tBuckets, newTArray, journal);
    };
    return effect3((journal) => {
      const buckets = unsafeGet9(self.tBuckets, journal);
      const capacity10 = buckets.chunk.length;
      const index = indexOf4(key, capacity10);
      const bucket = unsafeGet9(buckets.chunk[index], journal);
      const shouldUpdate = some8(bucket, (entry) => equals(key)(entry[0]));
      if (shouldUpdate) {
        const newBucket = map7(bucket, (entry) => equals(key)(entry[0]) ? [key, value10] : entry);
        unsafeSet2(buckets.chunk[index], newBucket, journal);
      } else {
        const newSize = unsafeGet9(self.tSize, journal) + 1;
        unsafeSet2(self.tSize, newSize, journal);
        if (capacity10 * LoadFactor < newSize) {
          resize(journal, buckets);
        } else {
          const newBucket = prepend3(bucket, [key, value10]);
          unsafeSet2(buckets.chunk[index], newBucket, journal);
        }
      }
    });
  });
  setIfAbsent = /* @__PURE__ */ dual(3, (self, key, value10) => flatMap22(get40(self, key), match2({
    onNone: () => set21(self, key, value10),
    onSome: () => void_9
  })));
  takeFirst = /* @__PURE__ */ dual(2, (self, pf) => pipe(effect3((journal) => {
    const buckets = unsafeGet9(self.tBuckets, journal);
    const capacity10 = buckets.chunk.length;
    const size32 = unsafeGet9(self.tSize, journal);
    let result2 = none2();
    let index = 0;
    while (index < capacity10 && isNone2(result2)) {
      const bucket = unsafeGet9(buckets.chunk[index], journal);
      const recreate = some8(bucket, (entry) => isSome2(pf(entry[0], entry[1])));
      if (recreate) {
        const iterator = bucket[Symbol.iterator]();
        let newBucket = empty7();
        let next4;
        while ((next4 = iterator.next()) && !next4.done && isNone2(result2)) {
          const option11 = pf(next4.value[0], next4.value[1]);
          if (isSome2(option11) && isNone2(result2)) {
            result2 = option11;
          } else {
            newBucket = prepend3(newBucket, next4.value);
          }
        }
        unsafeSet2(buckets.chunk[index], newBucket, journal);
      }
      index = index + 1;
    }
    if (isSome2(result2)) {
      unsafeSet2(self.tSize, size32 - 1, journal);
    }
    return result2;
  }), collect3((option11) => isSome2(option11) ? some3(option11.value) : none2())));
  takeFirstSTM = /* @__PURE__ */ dual(2, (self, pf) => pipe(findSTM(self, (key, value10) => map31(pf(key, value10), (a) => [key, a])), collect3((option11) => isSome2(option11) ? some3(option11.value) : none2()), flatMap22((entry) => as12(remove15(self, entry[0]), entry[1]))));
  takeSome = /* @__PURE__ */ dual(2, (self, pf) => pipe(effect3((journal) => {
    const buckets = unsafeGet9(self.tBuckets, journal);
    const capacity10 = buckets.chunk.length;
    const builder = [];
    let newSize = 0;
    let index = 0;
    while (index < capacity10) {
      const bucket = unsafeGet9(buckets.chunk[index], journal);
      const recreate = some8(bucket, (entry) => isSome2(pf(entry[0], entry[1])));
      if (recreate) {
        const iterator = bucket[Symbol.iterator]();
        let newBucket = empty7();
        let next4;
        while ((next4 = iterator.next()) && !next4.done) {
          const option11 = pf(next4.value[0], next4.value[1]);
          if (isSome2(option11)) {
            builder.push(option11.value);
          } else {
            newBucket = prepend3(newBucket, next4.value);
            newSize = newSize + 1;
          }
        }
        unsafeSet2(buckets.chunk[index], newBucket, journal);
      } else {
        newSize = newSize + bucket.length;
      }
      index = index + 1;
    }
    unsafeSet2(self.tSize, newSize, journal);
    if (builder.length > 0) {
      return some3(builder);
    }
    return none2();
  }), collect3((option11) => isSome2(option11) ? some3(option11.value) : none2())));
  takeSomeSTM = /* @__PURE__ */ dual(2, (self, pf) => pipe(findAllSTM(self, (key, value10) => map31(pf(key, value10), (a) => [key, a])), map31((chunk6) => isNonEmptyArray2(chunk6) ? some3(chunk6) : none2()), collect3((option11) => isSome2(option11) ? some3(option11.value) : none2()), flatMap22((entries4) => as12(removeAll(self, entries4.map((entry) => entry[0])), map6(entries4, (entry) => entry[1])))));
  transform6 = /* @__PURE__ */ dual(2, (self, f) => effect3((journal) => {
    const buckets = pipe(self.tBuckets, unsafeGet9(journal));
    const capacity10 = buckets.chunk.length;
    const newBuckets = Array.from({
      length: capacity10
    }, () => empty7());
    let newSize = 0;
    let index = 0;
    while (index < capacity10) {
      const bucket = buckets.chunk[index];
      const pairs = unsafeGet9(bucket, journal);
      const iterator = pairs[Symbol.iterator]();
      let next4;
      while ((next4 = iterator.next()) && !next4.done) {
        const newPair = f(next4.value[0], next4.value[1]);
        const index2 = indexOf4(newPair[0], capacity10);
        const newBucket = newBuckets[index2];
        if (!some8(newBucket, (entry) => equals(entry[0], newPair[0]))) {
          newBuckets[index2] = prepend3(newBucket, newPair);
          newSize = newSize + 1;
        }
      }
      index = index + 1;
    }
    index = 0;
    while (index < capacity10) {
      unsafeSet2(buckets.chunk[index], newBuckets[index], journal);
      index = index + 1;
    }
    unsafeSet2(self.tSize, newSize, journal);
  }));
  transformSTM3 = /* @__PURE__ */ dual(2, (self, f) => pipe(flatMap22(toReadonlyArray2(self), forEach18((entry) => f(entry[0], entry[1]))), flatMap22((newData) => effect3((journal) => {
    const buckets = unsafeGet9(self.tBuckets, journal);
    const capacity10 = buckets.chunk.length;
    const newBuckets = Array.from({
      length: capacity10
    }, () => empty7());
    const iterator = newData[Symbol.iterator]();
    let newSize = 0;
    let next4;
    while ((next4 = iterator.next()) && !next4.done) {
      const index2 = indexOf4(next4.value[0], capacity10);
      const newBucket = newBuckets[index2];
      if (!some8(newBucket, (entry) => equals(entry[0])(next4.value[0]))) {
        newBuckets[index2] = prepend3(newBucket, next4.value);
        newSize = newSize + 1;
      }
    }
    let index = 0;
    while (index < capacity10) {
      unsafeSet2(buckets.chunk[index], newBuckets[index], journal);
      index = index + 1;
    }
    unsafeSet2(self.tSize, newSize, journal);
  }))));
  transformValues = /* @__PURE__ */ dual(2, (self, f) => transform6(self, (key, value10) => [key, f(value10)]));
  transformValuesSTM = /* @__PURE__ */ dual(2, (self, f) => transformSTM3(self, (key, value10) => map31(f(value10), (value11) => [key, value11])));
  updateWith3 = /* @__PURE__ */ dual(3, (self, key, f) => flatMap22(get40(self, key), (option11) => match2(f(option11), {
    onNone: () => as12(remove15(self, key), none2()),
    onSome: (value10) => as12(set21(self, key, value10), some3(value10))
  })));
});

// node_modules/effect/dist/esm/TMap.js
var exports_TMap = {};
__export(exports_TMap, {
  values: () => values12,
  updateWith: () => updateWith4,
  transformValuesSTM: () => transformValuesSTM2,
  transformValues: () => transformValues2,
  transformSTM: () => transformSTM4,
  transform: () => transform7,
  toMap: () => toMap2,
  toHashMap: () => toHashMap2,
  toChunk: () => toChunk3,
  toArray: () => toArray7,
  takeSomeSTM: () => takeSomeSTM2,
  takeSome: () => takeSome2,
  takeFirstSTM: () => takeFirstSTM2,
  takeFirst: () => takeFirst2,
  size: () => size32,
  setIfAbsent: () => setIfAbsent2,
  set: () => set22,
  retainIf: () => retainIf2,
  removeIf: () => removeIf2,
  removeAll: () => removeAll2,
  remove: () => remove16,
  reduceSTM: () => reduceSTM4,
  reduce: () => reduce26,
  merge: () => merge14,
  make: () => make129,
  keys: () => keys12,
  isEmpty: () => isEmpty25,
  has: () => has14,
  getOrElse: () => getOrElse9,
  get: () => get41,
  fromIterable: () => fromIterable27,
  forEach: () => forEach24,
  findSTM: () => findSTM2,
  findAllSTM: () => findAllSTM2,
  findAll: () => findAll4,
  find: () => find6,
  empty: () => empty53,
  TMapTypeId: () => TMapTypeId2
});
var TMapTypeId2, empty53, find6, findSTM2, findAll4, findAllSTM2, forEach24, fromIterable27, get41, getOrElse9, has14, isEmpty25, keys12, make129, merge14, reduce26, reduceSTM4, remove16, removeAll2, removeIf2, retainIf2, set22, setIfAbsent2, size32, takeFirst2, takeFirstSTM2, takeSome2, takeSomeSTM2, toChunk3, toHashMap2, toArray7, toMap2, transform7, transformSTM4, transformValues2, transformValuesSTM2, updateWith4, values12;
var init_TMap = __esm(() => {
  init_tMap();
  TMapTypeId2 = TMapTypeId;
  empty53 = empty52;
  find6 = find5;
  findSTM2 = findSTM;
  findAll4 = findAll3;
  findAllSTM2 = findAllSTM;
  forEach24 = forEach23;
  fromIterable27 = fromIterable26;
  get41 = get40;
  getOrElse9 = getOrElse8;
  has14 = has13;
  isEmpty25 = isEmpty24;
  keys12 = keys11;
  make129 = make128;
  merge14 = merge13;
  reduce26 = reduce25;
  reduceSTM4 = reduceSTM3;
  remove16 = remove15;
  removeAll2 = removeAll;
  removeIf2 = removeIf;
  retainIf2 = retainIf;
  set22 = set21;
  setIfAbsent2 = setIfAbsent;
  size32 = size31;
  takeFirst2 = takeFirst;
  takeFirstSTM2 = takeFirstSTM;
  takeSome2 = takeSome;
  takeSomeSTM2 = takeSomeSTM;
  toChunk3 = toChunk2;
  toHashMap2 = toHashMap;
  toArray7 = toArray6;
  toMap2 = toMap;
  transform7 = transform6;
  transformSTM4 = transformSTM3;
  transformValues2 = transformValues;
  transformValuesSTM2 = transformValuesSTM;
  updateWith4 = updateWith3;
  values12 = values11;
});

// node_modules/effect/dist/esm/internal/stm/tPriorityQueue.js
var TPriorityQueueSymbolKey = "effect/TPriorityQueue", TPriorityQueueTypeId, tPriorityQueueVariance, TPriorityQueueImpl, empty54 = (order) => pipe(make69(empty48(order)), map31((ref) => new TPriorityQueueImpl(ref))), fromIterable28 = (order) => (iterable) => pipe(make69(fromIterable2(iterable).reduce((map46, value10) => pipe(map46, set17(value10, pipe(map46, get34(value10), match2({
  onNone: () => of2(value10),
  onSome: prepend2(value10)
})))), empty48(order))), map31((ref) => new TPriorityQueueImpl(ref))), isEmpty26 = (self) => map31(get18(self.ref), isEmpty23), isNonEmpty9 = (self) => map31(get18(self.ref), isNonEmpty8), make130 = (order) => (...elements) => fromIterable28(order)(elements), offer7, offerAll6, peek3 = (self) => withSTMRuntime((runtime8) => {
  const map46 = unsafeGet9(self.ref, runtime8.journal);
  return match2(headOption(map46), {
    onNone: () => retry6,
    onSome: (elements) => succeed19(elements[0])
  });
}), peekOption3 = (self) => modify12(self.ref, (map46) => [map2(headOption(map46), (elements) => elements[0]), map46]), removeIf3, retainIf3, size33 = (self) => modify12(self.ref, (map46) => [reduce22(map46, 0, (n, as18) => n + as18.length), map46]), take14 = (self) => withSTMRuntime((runtime8) => {
  const map46 = unsafeGet9(self.ref, runtime8.journal);
  return match2(headOption(map46), {
    onNone: () => retry6,
    onSome: (values13) => {
      const head13 = values13[1][0];
      const tail5 = values13[1].slice(1);
      unsafeSet2(self.ref, tail5.length > 0 ? set17(map46, head13, tail5) : remove14(map46, head13), runtime8.journal);
      return succeed19(head13);
    }
  });
}), takeAll5 = (self) => modify12(self.ref, (map46) => {
  const builder = [];
  for (const entry of map46) {
    for (const value10 of entry[1]) {
      builder.push(value10);
    }
  }
  return [builder, empty48(getOrder7(map46))];
}), takeOption = (self) => effect3((journal) => {
  const map46 = pipe(self.ref, unsafeGet9(journal));
  return match2(headOption(map46), {
    onNone: () => none2(),
    onSome: ([key, value10]) => {
      const tail5 = value10.slice(1);
      unsafeSet2(self.ref, tail5.length > 0 ? set17(map46, key, tail5) : remove14(map46, key), journal);
      return some3(value10[0]);
    }
  });
}), takeUpTo5, toChunk4 = (self) => modify12(self.ref, (map46) => {
  const builder = [];
  for (const entry of map46) {
    for (const value10 of entry[1]) {
      builder.push(value10);
    }
  }
  return [unsafeFromArray(builder), map46];
}), toArray8 = (self) => modify12(self.ref, (map46) => {
  const builder = [];
  for (const entry of map46) {
    for (const value10 of entry[1]) {
      builder.push(value10);
    }
  }
  return [builder, map46];
});
var init_tPriorityQueue = __esm(() => {
  init_Array();
  init_Chunk();
  init_Function();
  init_Option();
  init_SortedMap();
  init_core2();
  init_tRef();
  TPriorityQueueTypeId = /* @__PURE__ */ Symbol.for(TPriorityQueueSymbolKey);
  tPriorityQueueVariance = {
    _A: (_) => _
  };
  TPriorityQueueImpl = class TPriorityQueueImpl {
    ref;
    [TPriorityQueueTypeId] = tPriorityQueueVariance;
    constructor(ref) {
      this.ref = ref;
    }
  };
  offer7 = /* @__PURE__ */ dual(2, (self, value10) => update8(self.ref, (map46) => set17(map46, value10, match2(get34(map46, value10), {
    onNone: () => of2(value10),
    onSome: prepend2(value10)
  }))));
  offerAll6 = /* @__PURE__ */ dual(2, (self, values13) => update8(self.ref, (map46) => fromIterable2(values13).reduce((map47, value10) => set17(map47, value10, match2(get34(map47, value10), {
    onNone: () => of2(value10),
    onSome: prepend2(value10)
  })), map46)));
  removeIf3 = /* @__PURE__ */ dual(2, (self, predicate) => retainIf3(self, (a) => !predicate(a)));
  retainIf3 = /* @__PURE__ */ dual(2, (self, predicate) => update8(self.ref, (map46) => reduce22(map46, empty48(getOrder7(map46)), (map47, value10, key) => {
    const filtered = filter4(value10, predicate);
    return filtered.length > 0 ? set17(map47, key, filtered) : remove14(map47, key);
  })));
  takeUpTo5 = /* @__PURE__ */ dual(2, (self, n) => modify12(self.ref, (map46) => {
    const builder = [];
    const iterator = map46[Symbol.iterator]();
    let updated = map46;
    let index = 0;
    let next4;
    while ((next4 = iterator.next()) && !next4.done && index < n) {
      const [key, value10] = next4.value;
      const [left3, right3] = pipe(value10, splitAt(n - index));
      for (const value11 of left3) {
        builder.push(value11);
      }
      if (right3.length > 0) {
        updated = set17(updated, key, right3);
      } else {
        updated = remove14(updated, key);
      }
      index = index + left3.length;
    }
    return [builder, updated];
  }));
});

// node_modules/effect/dist/esm/TPriorityQueue.js
var exports_TPriorityQueue = {};
__export(exports_TPriorityQueue, {
  toChunk: () => toChunk5,
  toArray: () => toArray9,
  takeUpTo: () => takeUpTo6,
  takeOption: () => takeOption2,
  takeAll: () => takeAll6,
  take: () => take15,
  size: () => size34,
  retainIf: () => retainIf4,
  removeIf: () => removeIf4,
  peekOption: () => peekOption4,
  peek: () => peek4,
  offerAll: () => offerAll7,
  offer: () => offer8,
  make: () => make131,
  isNonEmpty: () => isNonEmpty10,
  isEmpty: () => isEmpty27,
  fromIterable: () => fromIterable29,
  empty: () => empty55,
  TPriorityQueueTypeId: () => TPriorityQueueTypeId2
});
var TPriorityQueueTypeId2, empty55, fromIterable29, isEmpty27, isNonEmpty10, make131, offer8, offerAll7, peek4, peekOption4, removeIf4, retainIf4, size34, take15, takeAll6, takeOption2, takeUpTo6, toChunk5, toArray9;
var init_TPriorityQueue = __esm(() => {
  init_tPriorityQueue();
  TPriorityQueueTypeId2 = TPriorityQueueTypeId;
  empty55 = empty54;
  fromIterable29 = fromIterable28;
  isEmpty27 = isEmpty26;
  isNonEmpty10 = isNonEmpty9;
  make131 = make130;
  offer8 = offer7;
  offerAll7 = offerAll6;
  peek4 = peek3;
  peekOption4 = peekOption3;
  removeIf4 = removeIf3;
  retainIf4 = retainIf3;
  size34 = size33;
  take15 = take14;
  takeAll6 = takeAll5;
  takeOption2 = takeOption;
  takeUpTo6 = takeUpTo5;
  toChunk5 = toChunk4;
  toArray9 = toArray8;
});

// node_modules/effect/dist/esm/internal/stm/tRandom.js
var TRandomSymbolKey = "effect/TRandom", TRandomTypeId, randomInteger = (state) => {
  const prng = new PCGRandom;
  prng.setState(state);
  return [prng.integer(0), prng.getState()];
}, randomIntegerBetween = (low, high) => {
  return (state) => {
    const prng = new PCGRandom;
    prng.setState(state);
    return [prng.integer(high - low) + low, prng.getState()];
  };
}, randomNumber = (state) => {
  const prng = new PCGRandom;
  prng.setState(state);
  return [prng.number(), prng.getState()];
}, withState = (state, f) => {
  return pipe(state, modify12(f));
}, shuffleWith2 = (iterable, nextIntBounded) => {
  const swap4 = (buffer5, index1, index2) => pipe(buffer5, get38(index1), flatMap22((tmp) => pipe(buffer5, updateSTM(index1, () => pipe(buffer5, get38(index2))), zipRight11(pipe(buffer5, update12(index2, () => tmp))))));
  return pipe(fromIterable24(iterable), flatMap22((buffer5) => {
    const array8 = [];
    for (let i2 = array8.length;i2 >= 2; i2 = i2 - 1) {
      array8.push(i2);
    }
    return pipe(array8, forEach18((n) => pipe(nextIntBounded(n), flatMap22((k) => swap4(buffer5, n - 1, k))), {
      discard: true
    }), zipRight11(toArray4(buffer5)));
  }));
}, Tag4, TRandomImpl, live, next4, nextBoolean3, nextInt3, nextIntBetween3 = (low, high) => flatMap22(Tag4, (random4) => random4.nextIntBetween(low, high)), nextRange3 = (min11, max14) => flatMap22(Tag4, (random4) => random4.nextRange(min11, max14)), shuffle3 = (elements) => flatMap22(Tag4, (random4) => random4.shuffle(elements));
var init_tRandom = __esm(() => {
  init_Context();
  init_Function();
  init_Layer();
  init_Utils();
  init_core2();
  init_stm();
  init_tArray();
  init_tRef();
  TRandomTypeId = /* @__PURE__ */ Symbol.for(TRandomSymbolKey);
  Tag4 = /* @__PURE__ */ GenericTag("effect/TRandom");
  TRandomImpl = class TRandomImpl {
    state;
    [TRandomTypeId] = TRandomTypeId;
    constructor(state) {
      this.state = state;
      this.next = withState(this.state, randomNumber);
      this.nextBoolean = flatMap22(this.next, (n) => succeed19(n > 0.5));
      this.nextInt = withState(this.state, randomInteger);
    }
    next;
    nextBoolean;
    nextInt;
    nextRange(min11, max14) {
      return flatMap22(this.next, (n) => succeed19((max14 - min11) * n + min11));
    }
    nextIntBetween(low, high) {
      return withState(this.state, randomIntegerBetween(low, high));
    }
    shuffle(elements) {
      return shuffleWith2(elements, (n) => this.nextIntBetween(0, n));
    }
  };
  live = /* @__PURE__ */ effect(Tag4, /* @__PURE__ */ pipe(/* @__PURE__ */ make69(/* @__PURE__ */ new PCGRandom(Math.random() * 4294967296 >>> 0).getState()), /* @__PURE__ */ map31((seed) => new TRandomImpl(seed)), commit2));
  next4 = /* @__PURE__ */ flatMap22(Tag4, (random4) => random4.next);
  nextBoolean3 = /* @__PURE__ */ flatMap22(Tag4, (random4) => random4.nextBoolean);
  nextInt3 = /* @__PURE__ */ flatMap22(Tag4, (random4) => random4.nextInt);
});

// node_modules/effect/dist/esm/TRandom.js
var exports_TRandom = {};
__export(exports_TRandom, {
  shuffle: () => shuffle4,
  nextRange: () => nextRange4,
  nextIntBetween: () => nextIntBetween4,
  nextInt: () => nextInt4,
  nextBoolean: () => nextBoolean4,
  next: () => next5,
  live: () => live2,
  Tag: () => Tag5,
  TRandomTypeId: () => TRandomTypeId2
});
var TRandomTypeId2, Tag5, live2, next5, nextBoolean4, nextInt4, nextIntBetween4, nextRange4, shuffle4;
var init_TRandom = __esm(() => {
  init_tRandom();
  TRandomTypeId2 = TRandomTypeId;
  Tag5 = Tag4;
  live2 = live;
  next5 = next4;
  nextBoolean4 = nextBoolean3;
  nextInt4 = nextInt3;
  nextIntBetween4 = nextIntBetween3;
  nextRange4 = nextRange3;
  shuffle4 = shuffle3;
});

// node_modules/effect/dist/esm/internal/stm/tReentrantLock.js
var TReentrantLockSymbolKey = "effect/TReentrantLock", TReentrantLockTypeId, WriteLockTypeId, ReadLockTypeId, TReentranLockImpl, ReadLock, WriteLock, isReadLock = (lock) => {
  return ReadLockTypeId in lock;
}, isWriteLock = (lock) => {
  return WriteLockTypeId in lock;
}, emptyReadLock, makeReadLock = (fiberId5, count9) => {
  if (count9 <= 0) {
    return emptyReadLock;
  }
  return new ReadLock(make18([fiberId5, count9]));
}, noOtherHolder = (readLock, fiberId5) => {
  return isEmpty4(readLock.readers) || size7(readLock.readers) === 1 && has5(readLock.readers, fiberId5);
}, adjustReadLock = (readLock, fiberId5, adjustment) => {
  const total = readLock.readLocksHeld(fiberId5);
  const newTotal = total + adjustment;
  if (newTotal < 0) {
    throw new Error("BUG - TReentrantLock.ReadLock.adjust - please report an issue at https://github.com/Effect-TS/effect/issues");
  }
  if (newTotal === 0) {
    return new ReadLock(remove7(readLock.readers, fiberId5));
  }
  return new ReadLock(set4(readLock.readers, fiberId5, newTotal));
}, adjustRead = (self, delta) => withSTMRuntime((runtime8) => {
  const lock = unsafeGet9(self.state, runtime8.journal);
  if (isReadLock(lock)) {
    const result2 = adjustReadLock(lock, runtime8.fiberId, delta);
    unsafeSet2(self.state, result2, runtime8.journal);
    return succeed19(result2.readLocksHeld(runtime8.fiberId));
  }
  if (isWriteLock(lock) && equals(runtime8.fiberId)(lock.fiberId)) {
    const newTotal = lock.readLocks + delta;
    if (newTotal < 0) {
      throw new Error(`Defect: Fiber ${threadName2(runtime8.fiberId)} releasing read locks it does not hold, newTotal: ${newTotal}`);
    }
    unsafeSet2(self.state, new WriteLock(newTotal, lock.writeLocks, runtime8.fiberId), runtime8.journal);
    return succeed19(newTotal);
  }
  return retry6;
}), acquireRead = (self) => adjustRead(self, 1), acquireWrite = (self) => withSTMRuntime((runtime8) => {
  const lock = unsafeGet9(self.state, runtime8.journal);
  if (isReadLock(lock) && noOtherHolder(lock, runtime8.fiberId)) {
    unsafeSet2(self.state, new WriteLock(lock.readLocksHeld(runtime8.fiberId), 1, runtime8.fiberId), runtime8.journal);
    return succeed19(1);
  }
  if (isWriteLock(lock) && equals(runtime8.fiberId)(lock.fiberId)) {
    unsafeSet2(self.state, new WriteLock(lock.readLocks, lock.writeLocks + 1, runtime8.fiberId), runtime8.journal);
    return succeed19(lock.writeLocks + 1);
  }
  return retry6;
}), fiberReadLocks = (self) => effect3((journal, fiberId5) => unsafeGet9(self.state, journal).readLocksHeld(fiberId5)), fiberWriteLocks = (self) => effect3((journal, fiberId5) => unsafeGet9(self.state, journal).writeLocksHeld(fiberId5)), lock = (self) => writeLock(self), locked = (self) => zipWith16(readLocked(self), writeLocked(self), (x2, y) => x2 || y), make132, readLock = (self) => acquireRelease3(commit2(acquireRead(self)), () => commit2(releaseRead(self))), readLocks = (self) => map31(get18(self.state), (state) => state.readLocks), readLocked = (self) => map31(get18(self.state), (state) => state.readLocks > 0), releaseRead = (self) => adjustRead(self, -1), releaseWrite = (self) => withSTMRuntime((runtime8) => {
  const lock2 = unsafeGet9(self.state, runtime8.journal);
  if (isWriteLock(lock2) && lock2.writeLocks === 1 && equals(runtime8.fiberId)(lock2.fiberId)) {
    const result2 = makeReadLock(lock2.fiberId, lock2.readLocks);
    unsafeSet2(self.state, result2, runtime8.journal);
    return succeed19(result2.writeLocksHeld(runtime8.fiberId));
  }
  if (isWriteLock(lock2) && equals(runtime8.fiberId)(lock2.fiberId)) {
    const result2 = new WriteLock(lock2.readLocks, lock2.writeLocks - 1, runtime8.fiberId);
    unsafeSet2(self.state, result2, runtime8.journal);
    return succeed19(result2.writeLocksHeld(runtime8.fiberId));
  }
  throw new Error(`Defect: Fiber ${threadName2(runtime8.fiberId)} releasing write lock it does not hold`);
}), withLock, withReadLock, withWriteLock, writeLock = (self) => acquireRelease3(commit2(acquireWrite(self)), () => commit2(releaseWrite(self))), writeLocked = (self) => map31(get18(self.state), (state) => state.writeLocks > 0), writeLocks = (self) => map31(get18(self.state), (state) => state.writeLocks);
var init_tReentrantLock = __esm(() => {
  init_Effect();
  init_Equal();
  init_FiberId();
  init_Function();
  init_HashMap();
  init_Option();
  init_core2();
  init_tRef();
  TReentrantLockTypeId = /* @__PURE__ */ Symbol.for(TReentrantLockSymbolKey);
  WriteLockTypeId = /* @__PURE__ */ Symbol.for("effect/TReentrantLock/WriteLock");
  ReadLockTypeId = /* @__PURE__ */ Symbol.for("effect/TReentrantLock/ReadLock");
  TReentranLockImpl = class TReentranLockImpl {
    state;
    [TReentrantLockTypeId] = TReentrantLockTypeId;
    constructor(state) {
      this.state = state;
    }
  };
  ReadLock = class ReadLock {
    readers;
    [ReadLockTypeId] = ReadLockTypeId;
    constructor(readers) {
      this.readers = readers;
    }
    get readLocks() {
      return Array.from(this.readers).reduce((acc, curr) => acc + curr[1], 0);
    }
    get writeLocks() {
      return 0;
    }
    readLocksHeld(fiberId5) {
      return getOrElse2(get9(this.readers, fiberId5), () => 0);
    }
    writeLocksHeld(_fiberId) {
      return 0;
    }
  };
  WriteLock = class WriteLock {
    readLocks;
    writeLocks;
    fiberId;
    [WriteLockTypeId] = WriteLockTypeId;
    constructor(readLocks, writeLocks, fiberId5) {
      this.readLocks = readLocks;
      this.writeLocks = writeLocks;
      this.fiberId = fiberId5;
    }
    readLocksHeld(fiberId5) {
      return equals(fiberId5)(this.fiberId) ? this.readLocks : 0;
    }
    writeLocksHeld(fiberId5) {
      return equals(fiberId5)(this.fiberId) ? this.writeLocks : 0;
    }
  };
  emptyReadLock = /* @__PURE__ */ new ReadLock(/* @__PURE__ */ empty11());
  make132 = /* @__PURE__ */ map31(/* @__PURE__ */ make69(emptyReadLock), (readLock) => new TReentranLockImpl(readLock));
  withLock = /* @__PURE__ */ dual(2, (effect4, self) => withWriteLock(effect4, self));
  withReadLock = /* @__PURE__ */ dual(2, (effect4, self) => uninterruptibleMask3((restore) => zipRight7(restore(commit2(acquireRead(self))), ensuring4(effect4, commit2(releaseRead(self))))));
  withWriteLock = /* @__PURE__ */ dual(2, (effect4, self) => uninterruptibleMask3((restore) => zipRight7(restore(commit2(acquireWrite(self))), ensuring4(effect4, commit2(releaseWrite(self))))));
});

// node_modules/effect/dist/esm/TReentrantLock.js
var exports_TReentrantLock = {};
__export(exports_TReentrantLock, {
  writeLocks: () => writeLocks2,
  writeLocked: () => writeLocked2,
  writeLock: () => writeLock2,
  withWriteLock: () => withWriteLock2,
  withReadLock: () => withReadLock2,
  withLock: () => withLock2,
  releaseWrite: () => releaseWrite2,
  releaseRead: () => releaseRead2,
  readLocks: () => readLocks2,
  readLocked: () => readLocked2,
  readLock: () => readLock2,
  make: () => make133,
  locked: () => locked2,
  lock: () => lock2,
  fiberWriteLocks: () => fiberWriteLocks2,
  fiberReadLocks: () => fiberReadLocks2,
  acquireWrite: () => acquireWrite2,
  acquireRead: () => acquireRead2,
  TReentrantLockTypeId: () => TReentrantLockTypeId2
});
var TReentrantLockTypeId2, acquireRead2, acquireWrite2, fiberReadLocks2, fiberWriteLocks2, lock2, locked2, make133, readLock2, readLocks2, readLocked2, releaseRead2, releaseWrite2, withLock2, withReadLock2, withWriteLock2, writeLock2, writeLocked2, writeLocks2;
var init_TReentrantLock = __esm(() => {
  init_tReentrantLock();
  TReentrantLockTypeId2 = TReentrantLockTypeId;
  acquireRead2 = acquireRead;
  acquireWrite2 = acquireWrite;
  fiberReadLocks2 = fiberReadLocks;
  fiberWriteLocks2 = fiberWriteLocks;
  lock2 = lock;
  locked2 = locked;
  make133 = make132;
  readLock2 = readLock;
  readLocks2 = readLocks;
  readLocked2 = readLocked;
  releaseRead2 = releaseRead;
  releaseWrite2 = releaseWrite;
  withLock2 = withLock;
  withReadLock2 = withReadLock;
  withWriteLock2 = withWriteLock;
  writeLock2 = writeLock;
  writeLocked2 = writeLocked;
  writeLocks2 = writeLocks;
});

// node_modules/effect/dist/esm/TRef.js
var exports_TRef = {};
__export(exports_TRef, {
  updateSomeAndGet: () => updateSomeAndGet7,
  updateSome: () => updateSome7,
  updateAndGet: () => updateAndGet8,
  update: () => update14,
  setAndGet: () => setAndGet7,
  set: () => set23,
  modifySome: () => modifySome7,
  modify: () => modify17,
  make: () => make134,
  getAndUpdateSome: () => getAndUpdateSome7,
  getAndUpdate: () => getAndUpdate8,
  getAndSet: () => getAndSet8,
  get: () => get42,
  TRefTypeId: () => TRefTypeId2
});
var TRefTypeId2, get42, getAndSet8, getAndUpdate8, getAndUpdateSome7, make134, modify17, modifySome7, set23, setAndGet7, update14, updateAndGet8, updateSome7, updateSomeAndGet7;
var init_TRef = __esm(() => {
  init_tRef();
  TRefTypeId2 = TRefTypeId;
  get42 = get18;
  getAndSet8 = getAndSet5;
  getAndUpdate8 = getAndUpdate5;
  getAndUpdateSome7 = getAndUpdateSome4;
  make134 = make69;
  modify17 = modify12;
  modifySome7 = modifySome4;
  set23 = set10;
  setAndGet7 = setAndGet4;
  update14 = update8;
  updateAndGet8 = updateAndGet5;
  updateSome7 = updateSome4;
  updateSomeAndGet7 = updateSomeAndGet4;
});

// node_modules/effect/dist/esm/internal/stm/tSemaphore.js
var TSemaphoreSymbolKey = "effect/TSemaphore", TSemaphoreTypeId, TSemaphoreImpl, make135 = (permits) => map40(make69(permits), (permits2) => new TSemaphoreImpl(permits2)), acquire2 = (self) => acquireN(self, 1), acquireN, available = (self) => get18(self.permits), release2 = (self) => releaseN(self, 1), releaseN, withPermit, withPermits, withPermitScoped = (self) => withPermitsScoped(self, 1), withPermitsScoped, unsafeMakeSemaphore3 = (permits) => {
  return new TSemaphoreImpl(new TRefImpl(permits));
};
var init_tSemaphore = __esm(() => {
  init_Cause();
  init_Effect();
  init_Function();
  init_STM();
  init_core2();
  init_tRef();
  TSemaphoreTypeId = /* @__PURE__ */ Symbol.for(TSemaphoreSymbolKey);
  TSemaphoreImpl = class TSemaphoreImpl {
    permits;
    [TSemaphoreTypeId] = TSemaphoreTypeId;
    constructor(permits) {
      this.permits = permits;
    }
  };
  acquireN = /* @__PURE__ */ dual(2, (self, n) => withSTMRuntime((driver3) => {
    if (n < 0) {
      throw new IllegalArgumentException2(`Unexpected negative value ${n} passed to Semaphore.acquireN`);
    }
    const value10 = unsafeGet9(self.permits, driver3.journal);
    if (value10 < n) {
      return retry10;
    } else {
      return succeed27(unsafeSet2(self.permits, value10 - n, driver3.journal));
    }
  }));
  releaseN = /* @__PURE__ */ dual(2, (self, n) => withSTMRuntime((driver3) => {
    if (n < 0) {
      throw new IllegalArgumentException2(`Unexpected negative value ${n} passed to Semaphore.releaseN`);
    }
    const current2 = unsafeGet9(self.permits, driver3.journal);
    return succeed27(unsafeSet2(self.permits, current2 + n, driver3.journal));
  }));
  withPermit = /* @__PURE__ */ dual(2, (self, semaphore) => withPermits(self, semaphore, 1));
  withPermits = /* @__PURE__ */ dual(3, (self, semaphore, permits) => uninterruptibleMask3((restore) => zipRight7(restore(commit2(acquireN(permits)(semaphore))), ensuring4(self, commit2(releaseN(permits)(semaphore))))));
  withPermitsScoped = /* @__PURE__ */ dual(2, (self, permits) => acquireReleaseInterruptible2(commit2(acquireN(self, permits)), () => commit2(releaseN(self, permits))));
});

// node_modules/effect/dist/esm/TSemaphore.js
var exports_TSemaphore = {};
__export(exports_TSemaphore, {
  withPermitsScoped: () => withPermitsScoped2,
  withPermits: () => withPermits2,
  withPermitScoped: () => withPermitScoped2,
  withPermit: () => withPermit2,
  unsafeMake: () => unsafeMake20,
  releaseN: () => releaseN2,
  release: () => release3,
  make: () => make136,
  available: () => available2,
  acquireN: () => acquireN2,
  acquire: () => acquire3,
  TSemaphoreTypeId: () => TSemaphoreTypeId2
});
var TSemaphoreTypeId2, acquire3, acquireN2, available2, make136, release3, releaseN2, withPermit2, withPermits2, withPermitScoped2, withPermitsScoped2, unsafeMake20;
var init_TSemaphore = __esm(() => {
  init_tSemaphore();
  TSemaphoreTypeId2 = TSemaphoreTypeId;
  acquire3 = acquire2;
  acquireN2 = acquireN;
  available2 = available;
  make136 = make135;
  release3 = release2;
  releaseN2 = releaseN;
  withPermit2 = withPermit;
  withPermits2 = withPermits;
  withPermitScoped2 = withPermitScoped;
  withPermitsScoped2 = withPermitsScoped;
  unsafeMake20 = unsafeMakeSemaphore3;
});

// node_modules/effect/dist/esm/internal/stm/tSet.js
var TSetSymbolKey = "effect/TSet", TSetTypeId, tSetVariance, TSetImpl, isTSet = (u) => hasProperty(u, TSetTypeId), add11, difference7, empty56 = () => fromIterable30([]), forEach25, fromIterable30 = (iterable) => map31(fromIterable26(Array.from(iterable).map((a) => [a, undefined])), (tMap) => new TSetImpl(tMap)), has15, intersection8, isEmpty28 = (self) => isEmpty24(self.tMap), make137 = (...elements) => fromIterable30(elements), reduce27, reduceSTM5, remove17, removeAll3, removeIf5, retainIf5, size35 = (self) => map31(toChunk6(self), (chunk6) => chunk6.length), takeFirst3, takeFirstSTM3, takeSome3, takeSomeSTM3, toChunk6 = (self) => keys11(self.tMap).pipe(map40(unsafeFromArray)), toHashSet = (self) => reduce27(self, empty10(), (acc, value10) => pipe(acc, add4(value10))), toArray10 = (self) => reduce27(self, [], (acc, value10) => [...acc, value10]), toReadonlySet = (self) => map31(toArray10(self), (values13) => new Set(values13)), transform8, transformSTM5, union15;
var init_tSet = __esm(() => {
  init_Array();
  init_Chunk();
  init_Function();
  init_HashSet();
  init_Predicate();
  init_STM();
  init_core2();
  init_tMap();
  TSetTypeId = /* @__PURE__ */ Symbol.for(TSetSymbolKey);
  tSetVariance = {
    _A: (_) => _
  };
  TSetImpl = class TSetImpl {
    tMap;
    [TSetTypeId] = tSetVariance;
    constructor(tMap) {
      this.tMap = tMap;
    }
  };
  add11 = /* @__PURE__ */ dual(2, (self, value10) => set21(self.tMap, value10, undefined));
  difference7 = /* @__PURE__ */ dual(2, (self, other) => flatMap22(toHashSet(other), (values13) => removeIf5(self, (value10) => has4(values13, value10), {
    discard: true
  })));
  forEach25 = /* @__PURE__ */ dual(2, (self, f) => reduceSTM5(self, undefined, (_, value10) => f(value10)));
  has15 = /* @__PURE__ */ dual(2, (self, value10) => has13(self.tMap, value10));
  intersection8 = /* @__PURE__ */ dual(2, (self, other) => flatMap22(toHashSet(other), (values13) => pipe(self, retainIf5((value10) => pipe(values13, has4(value10)), {
    discard: true
  }))));
  reduce27 = /* @__PURE__ */ dual(3, (self, zero3, f) => reduce25(self.tMap, zero3, (acc, _, key) => f(acc, key)));
  reduceSTM5 = /* @__PURE__ */ dual(3, (self, zero3, f) => reduceSTM3(self.tMap, zero3, (acc, _, key) => f(acc, key)));
  remove17 = /* @__PURE__ */ dual(2, (self, value10) => remove15(self.tMap, value10));
  removeAll3 = /* @__PURE__ */ dual(2, (self, iterable) => removeAll(self.tMap, iterable));
  removeIf5 = /* @__PURE__ */ dual((args2) => isTSet(args2[0]), (self, predicate, options) => options?.discard === true ? removeIf(self.tMap, (key) => predicate(key), {
    discard: true
  }) : pipe(removeIf(self.tMap, (key) => predicate(key)), map31(map6((entry) => entry[0]))));
  retainIf5 = /* @__PURE__ */ dual((args2) => isTSet(args2[0]), (self, predicate, options) => options?.discard === true ? retainIf(self.tMap, (key) => predicate(key), {
    discard: true
  }) : pipe(retainIf(self.tMap, (key) => predicate(key)), map31(map6((entry) => entry[0]))));
  takeFirst3 = /* @__PURE__ */ dual(2, (self, pf) => takeFirst(self.tMap, (key) => pf(key)));
  takeFirstSTM3 = /* @__PURE__ */ dual(2, (self, pf) => takeFirstSTM(self.tMap, (key) => pf(key)));
  takeSome3 = /* @__PURE__ */ dual(2, (self, pf) => takeSome(self.tMap, (key) => pf(key)));
  takeSomeSTM3 = /* @__PURE__ */ dual(2, (self, pf) => takeSomeSTM(self.tMap, (key) => pf(key)));
  transform8 = /* @__PURE__ */ dual(2, (self, f) => transform6(self.tMap, (key, value10) => [f(key), value10]));
  transformSTM5 = /* @__PURE__ */ dual(2, (self, f) => transformSTM3(self.tMap, (key, value10) => map31(f(key), (a) => [a, value10])));
  union15 = /* @__PURE__ */ dual(2, (self, other) => forEach25(other, (value10) => add11(self, value10)));
});

// node_modules/effect/dist/esm/TSet.js
var exports_TSet = {};
__export(exports_TSet, {
  union: () => union16,
  transformSTM: () => transformSTM6,
  transform: () => transform9,
  toReadonlySet: () => toReadonlySet2,
  toHashSet: () => toHashSet2,
  toChunk: () => toChunk7,
  toArray: () => toArray11,
  takeSomeSTM: () => takeSomeSTM4,
  takeSome: () => takeSome4,
  takeFirstSTM: () => takeFirstSTM4,
  takeFirst: () => takeFirst4,
  size: () => size36,
  retainIf: () => retainIf6,
  removeIf: () => removeIf6,
  removeAll: () => removeAll4,
  remove: () => remove18,
  reduceSTM: () => reduceSTM6,
  reduce: () => reduce28,
  make: () => make138,
  isEmpty: () => isEmpty29,
  intersection: () => intersection9,
  has: () => has16,
  fromIterable: () => fromIterable31,
  forEach: () => forEach26,
  empty: () => empty57,
  difference: () => difference8,
  add: () => add12,
  TSetTypeId: () => TSetTypeId2
});
var TSetTypeId2, add12, difference8, empty57, forEach26, fromIterable31, has16, intersection9, isEmpty29, make138, reduce28, reduceSTM6, remove18, removeAll4, removeIf6, retainIf6, size36, takeFirst4, takeFirstSTM4, takeSome4, takeSomeSTM4, toChunk7, toHashSet2, toArray11, toReadonlySet2, transform9, transformSTM6, union16;
var init_TSet = __esm(() => {
  init_tSet();
  TSetTypeId2 = TSetTypeId;
  add12 = add11;
  difference8 = difference7;
  empty57 = empty56;
  forEach26 = forEach25;
  fromIterable31 = fromIterable30;
  has16 = has15;
  intersection9 = intersection8;
  isEmpty29 = isEmpty28;
  make138 = make137;
  reduce28 = reduce27;
  reduceSTM6 = reduceSTM5;
  remove18 = remove17;
  removeAll4 = removeAll3;
  removeIf6 = removeIf5;
  retainIf6 = retainIf5;
  size36 = size35;
  takeFirst4 = takeFirst3;
  takeFirstSTM4 = takeFirstSTM3;
  takeSome4 = takeSome3;
  takeSomeSTM4 = takeSomeSTM3;
  toChunk7 = toChunk6;
  toHashSet2 = toHashSet;
  toArray11 = toArray10;
  toReadonlySet2 = toReadonlySet;
  transform9 = transform8;
  transformSTM6 = transformSTM5;
  union16 = union15;
});

// node_modules/effect/dist/esm/internal/stm/tSubscriptionRef.js
var TSubscriptionRefSymbolKey = "effect/TSubscriptionRef", TSubscriptionRefTypeId, TSubscriptionRefVariance, TDequeueMerge, TSubscriptionRefImpl, make139 = (value10) => pipe(all15([unbounded8(), make134(value10)]), map40(([pubsub, ref]) => new TSubscriptionRefImpl(ref, pubsub))), get43 = (self) => get42(self.ref), set24, getAndSet9, getAndUpdate9, getAndUpdateSome8, setAndGet8, modify18, modifySome8, update15, updateAndGet9, updateSome8, updateSomeAndGet8, changesScoped = (self) => acquireRelease3(self.changes, shutdown8), changesStream = (self) => unwrap4(map26(self.changes, fromTQueue));
var init_tSubscriptionRef = __esm(() => {
  init_Effect();
  init_Function();
  init_Option();
  init_STM();
  init_TPubSub();
  init_TQueue();
  init_TRef();
  init_stream();
  init_tQueue();
  init_tRef();
  TSubscriptionRefTypeId = /* @__PURE__ */ Symbol.for(TSubscriptionRefSymbolKey);
  TSubscriptionRefVariance = {
    _A: (_) => _
  };
  TDequeueMerge = class TDequeueMerge {
    first;
    second;
    [TDequeueTypeId2] = tDequeueVariance;
    constructor(first5, second) {
      this.first = first5;
      this.second = second;
    }
    peek = /* @__PURE__ */ gen8(this, function* () {
      const first5 = yield* this.peekOption;
      if (first5._tag === "Some") {
        return first5.value;
      }
      return yield* retry10;
    });
    peekOption = /* @__PURE__ */ gen8(this, function* () {
      const first5 = yield* this.first.peekOption;
      if (first5._tag === "Some") {
        return first5;
      }
      const second = yield* this.second.peekOption;
      if (second._tag === "Some") {
        return second;
      }
      return none2();
    });
    take = /* @__PURE__ */ gen8(this, function* () {
      if (!(yield* this.first.isEmpty)) {
        return yield* this.first.take;
      }
      if (!(yield* this.second.isEmpty)) {
        return yield* this.second.take;
      }
      return yield* retry10;
    });
    takeAll = /* @__PURE__ */ gen8(this, function* () {
      return [...yield* this.first.takeAll, ...yield* this.second.takeAll];
    });
    takeUpTo(max14) {
      return gen8(this, function* () {
        const first5 = yield* this.first.takeUpTo(max14);
        if (first5.length >= max14) {
          return first5;
        }
        return [...first5, ...yield* this.second.takeUpTo(max14 - first5.length)];
      });
    }
    capacity() {
      return this.first.capacity() + this.second.capacity();
    }
    size = /* @__PURE__ */ gen8(this, function* () {
      return (yield* this.first.size) + (yield* this.second.size);
    });
    isFull = /* @__PURE__ */ gen8(this, function* () {
      return (yield* this.first.isFull) && (yield* this.second.isFull);
    });
    isEmpty = /* @__PURE__ */ gen8(this, function* () {
      return (yield* this.first.isEmpty) && (yield* this.second.isEmpty);
    });
    shutdown = /* @__PURE__ */ gen8(this, function* () {
      yield* this.first.shutdown;
      yield* this.second.shutdown;
    });
    isShutdown = /* @__PURE__ */ gen8(this, function* () {
      return (yield* this.first.isShutdown) && (yield* this.second.isShutdown);
    });
    awaitShutdown = /* @__PURE__ */ gen8(this, function* () {
      yield* this.first.awaitShutdown;
      yield* this.second.awaitShutdown;
    });
  };
  TSubscriptionRefImpl = class TSubscriptionRefImpl {
    ref;
    pubsub;
    [TSubscriptionRefTypeId] = TSubscriptionRefVariance;
    [TRefTypeId2] = tRefVariance;
    constructor(ref, pubsub) {
      this.ref = ref;
      this.pubsub = pubsub;
    }
    get todos() {
      return this.ref.todos;
    }
    get versioned() {
      return this.ref.versioned;
    }
    pipe() {
      return pipeArguments(this, arguments);
    }
    get changes() {
      return gen8(this, function* () {
        const first5 = yield* unbounded9();
        yield* offer5(first5, yield* get42(this.ref));
        return new TDequeueMerge(first5, yield* subscribe4(this.pubsub));
      });
    }
    modify(f) {
      return pipe(get42(this.ref), map40(f), flatMap26(([b, a]) => pipe(set23(this.ref, a), as15(b), zipLeft15(publish4(this.pubsub, a)))));
    }
  };
  set24 = /* @__PURE__ */ dual(2, (self, value10) => self.modify(() => [undefined, value10]));
  getAndSet9 = /* @__PURE__ */ dual(2, (self, value10) => self.modify((a) => [a, value10]));
  getAndUpdate9 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [a, f(a)]));
  getAndUpdateSome8 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => match2(f(a), {
    onNone: () => [a, a],
    onSome: (b) => [a, b]
  })));
  setAndGet8 = /* @__PURE__ */ dual(2, (self, value10) => self.modify(() => [value10, value10]));
  modify18 = /* @__PURE__ */ dual(2, (self, f) => self.modify(f));
  modifySome8 = /* @__PURE__ */ dual(3, (self, fallback, f) => self.modify((a) => match2(f(a), {
    onNone: () => [fallback, a],
    onSome: (b) => b
  })));
  update15 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [undefined, f(a)]));
  updateAndGet9 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => {
    const b = f(a);
    return [b, b];
  }));
  updateSome8 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => [undefined, match2(f(a), {
    onNone: () => a,
    onSome: (b) => b
  })]));
  updateSomeAndGet8 = /* @__PURE__ */ dual(2, (self, f) => self.modify((a) => match2(f(a), {
    onNone: () => [a, a],
    onSome: (b) => [b, b]
  })));
});

// node_modules/effect/dist/esm/TSubscriptionRef.js
var exports_TSubscriptionRef = {};
__export(exports_TSubscriptionRef, {
  updateSomeAndGet: () => updateSomeAndGet9,
  updateSome: () => updateSome9,
  updateAndGet: () => updateAndGet10,
  update: () => update16,
  setAndGet: () => setAndGet9,
  set: () => set25,
  modifySome: () => modifySome9,
  modify: () => modify19,
  make: () => make140,
  getAndUpdateSome: () => getAndUpdateSome9,
  getAndUpdate: () => getAndUpdate10,
  getAndSet: () => getAndSet10,
  get: () => get44,
  changesStream: () => changesStream2,
  changesScoped: () => changesScoped2,
  changes: () => changes3,
  TSubscriptionRefTypeId: () => TSubscriptionRefTypeId2
});
var TSubscriptionRefTypeId2, get44, getAndSet10, getAndUpdate10, getAndUpdateSome9, make140, modify19, modifySome9, set25, setAndGet9, update16, updateAndGet10, updateSome9, updateSomeAndGet9, changesScoped2, changesStream2, changes3 = (self) => self.changes;
var init_TSubscriptionRef = __esm(() => {
  init_tSubscriptionRef();
  TSubscriptionRefTypeId2 = TSubscriptionRefTypeId;
  get44 = get43;
  getAndSet10 = getAndSet9;
  getAndUpdate10 = getAndUpdate9;
  getAndUpdateSome9 = getAndUpdateSome8;
  make140 = make139;
  modify19 = modify18;
  modifySome9 = modifySome8;
  set25 = set24;
  setAndGet9 = setAndGet8;
  update16 = update15;
  updateAndGet10 = updateAndGet9;
  updateSome9 = updateSome8;
  updateSomeAndGet9 = updateSomeAndGet8;
  changesScoped2 = changesScoped;
  changesStream2 = changesStream;
});

// node_modules/effect/dist/esm/Take.js
var exports_Take = {};
__export(exports_Take, {
  tap: () => tap12,
  of: () => of8,
  matchEffect: () => matchEffect6,
  match: () => match40,
  map: () => map46,
  make: () => make141,
  isSuccess: () => isSuccess8,
  isFailure: () => isFailure9,
  isDone: () => isDone8,
  fromPull: () => fromPull4,
  fromExit: () => fromExit2,
  fromEffect: () => fromEffect16,
  failCause: () => failCause20,
  fail: () => fail29,
  end: () => end6,
  done: () => done14,
  dieMessage: () => dieMessage10,
  die: () => die18,
  chunk: () => chunk6,
  TakeTypeId: () => TakeTypeId2
});
var TakeTypeId2, chunk6, die18, dieMessage10, done14, end6, fail29, failCause20, fromEffect16, fromExit2, fromPull4, isDone8, isFailure9, isSuccess8, make141, map46, match40, matchEffect6, of8, tap12;
var init_Take = __esm(() => {
  init_take();
  TakeTypeId2 = TakeTypeId;
  chunk6 = chunk3;
  die18 = die13;
  dieMessage10 = dieMessage5;
  done14 = done11;
  end6 = end4;
  fail29 = fail18;
  failCause20 = failCause14;
  fromEffect16 = fromEffect8;
  fromExit2 = fromExit;
  fromPull4 = fromPull;
  isDone8 = isDone7;
  isFailure9 = isFailure7;
  isSuccess8 = isSuccess6;
  make141 = make72;
  map46 = map32;
  match40 = match32;
  matchEffect6 = matchEffect5;
  of8 = of7;
  tap12 = tap8;
});

// node_modules/effect/dist/esm/TestAnnotation.js
var exports_TestAnnotation = {};
__export(exports_TestAnnotation, {
  tagged: () => tagged8,
  retried: () => retried,
  repeated: () => repeated3,
  make: () => make142,
  isTestAnnotation: () => isTestAnnotation,
  ignored: () => ignored,
  fibers: () => fibers,
  compose: () => compose7,
  TestAnnotationTypeId: () => TestAnnotationTypeId
});
var TestAnnotationSymbolKey = "effect/TestAnnotation", TestAnnotationTypeId, TestAnnotationImpl, isTestAnnotation = (u) => hasProperty(u, TestAnnotationTypeId), make142 = (identifier2, initial, combine19) => {
  return new TestAnnotationImpl(identifier2, initial, combine19);
}, compose7 = (left3, right3) => {
  if (isLeft2(left3) && isLeft2(right3)) {
    return left2(left3.left + right3.left);
  }
  if (isRight2(left3) && isRight2(right3)) {
    return right2(pipe(left3.right, appendAll3(right3.right)));
  }
  if (isRight2(left3) && isLeft2(right3)) {
    return right3;
  }
  if (isLeft2(left3) && isRight2(right3)) {
    return right3;
  }
  throw new Error(getBugErrorMessage("TestAnnotation.compose"));
}, fibers, ignored, repeated3, retried, tagged8;
var init_TestAnnotation = __esm(() => {
  init_Chunk();
  init_Either();
  init_Equal();
  init_Function();
  init_Hash();
  init_HashSet();
  init_Predicate();
  TestAnnotationTypeId = /* @__PURE__ */ Symbol.for(TestAnnotationSymbolKey);
  TestAnnotationImpl = class TestAnnotationImpl {
    identifier;
    initial;
    combine;
    [TestAnnotationTypeId] = {
      _A: (_) => _
    };
    constructor(identifier2, initial, combine19) {
      this.identifier = identifier2;
      this.initial = initial;
      this.combine = combine19;
    }
    [symbol2]() {
      return pipe(hash(TestAnnotationSymbolKey), combine2(hash(this.identifier)), cached(this));
    }
    [symbol3](that) {
      return isTestAnnotation(that) && this.identifier === that.identifier;
    }
  };
  fibers = /* @__PURE__ */ make142("fibers", /* @__PURE__ */ left2(0), compose7);
  ignored = /* @__PURE__ */ make142("ignored", 0, (a, b) => a + b);
  repeated3 = /* @__PURE__ */ make142("repeated", 0, (a, b) => a + b);
  retried = /* @__PURE__ */ make142("retried", 0, (a, b) => a + b);
  tagged8 = /* @__PURE__ */ make142("tagged", /* @__PURE__ */ empty10(), (a, b) => pipe(a, union6(b)));
});

// node_modules/effect/dist/esm/TestAnnotationMap.js
var exports_TestAnnotationMap = {};
__export(exports_TestAnnotationMap, {
  update: () => update17,
  overwrite: () => overwrite,
  make: () => make143,
  isTestAnnotationMap: () => isTestAnnotationMap,
  get: () => get45,
  empty: () => empty58,
  combine: () => combine19,
  annotate: () => annotate,
  TestAnnotationMapTypeId: () => TestAnnotationMapTypeId
});
var TestAnnotationMapTypeId, TestAnnotationMapImpl, isTestAnnotationMap = (u) => hasProperty(u, TestAnnotationMapTypeId), empty58 = () => new TestAnnotationMapImpl(empty11()), make143 = (map47) => {
  return new TestAnnotationMapImpl(map47);
}, overwrite, update17, get45, annotate, combine19;
var init_TestAnnotationMap = __esm(() => {
  init_Function();
  init_HashMap();
  init_Predicate();
  TestAnnotationMapTypeId = /* @__PURE__ */ Symbol.for("effect/TestAnnotationMap");
  TestAnnotationMapImpl = class TestAnnotationMapImpl {
    map;
    [TestAnnotationMapTypeId] = TestAnnotationMapTypeId;
    constructor(map47) {
      this.map = map47;
    }
  };
  overwrite = /* @__PURE__ */ dual(3, (self, key, value10) => make143(set4(self.map, key, value10)));
  update17 = /* @__PURE__ */ dual(3, (self, key, f) => {
    let value10 = key.initial;
    if (has5(self.map, key.identifier)) {
      value10 = unsafeGet6(self.map, key.identifier);
    }
    return overwrite(self, key, f(value10));
  });
  get45 = /* @__PURE__ */ dual(2, (self, key) => {
    if (has5(self.map, key.identifier)) {
      return unsafeGet6(self.map, key.identifier);
    }
    return key.initial;
  });
  annotate = /* @__PURE__ */ dual(3, (self, key, value10) => update17(self, key, (_) => key.combine(_, value10)));
  combine19 = /* @__PURE__ */ dual(2, (self, that) => {
    let result2 = self.map;
    for (const entry of that.map) {
      if (has5(result2, entry[0])) {
        const value10 = get9(result2, entry[0]);
        result2 = set4(result2, entry[0], entry[0].combine(value10, entry[1]));
      } else {
        result2 = set4(result2, entry[0], entry[1]);
      }
    }
    return make143(result2);
  });
});

// node_modules/effect/dist/esm/TestAnnotations.js
var exports_TestAnnotations = {};
__export(exports_TestAnnotations, {
  make: () => make144,
  isTestAnnotations: () => isTestAnnotations,
  TestAnnotationsTypeId: () => TestAnnotationsTypeId,
  TestAnnotations: () => TestAnnotations
});
var TestAnnotationsTypeId, AnnotationsImpl, TestAnnotations, isTestAnnotations = (u) => hasProperty(u, TestAnnotationsTypeId), make144 = (ref) => new AnnotationsImpl(ref);
var init_TestAnnotations = __esm(() => {
  init_Array();
  init_Context();
  init_Equal();
  init_Function();
  init_core_effect();
  init_core();
  init_fiber();
  init_MutableRef();
  init_Predicate();
  init_Ref();
  init_SortedSet();
  init_TestAnnotation();
  init_TestAnnotationMap();
  TestAnnotationsTypeId = /* @__PURE__ */ Symbol.for("effect/TestAnnotations");
  AnnotationsImpl = class AnnotationsImpl {
    ref;
    [TestAnnotationsTypeId] = TestAnnotationsTypeId;
    constructor(ref) {
      this.ref = ref;
    }
    get(key) {
      return map14(get14(this.ref), get45(key));
    }
    annotate(key, value10) {
      return update4(this.ref, annotate(key, value10));
    }
    get supervisedFibers() {
      return descriptorWith((descriptor3) => flatMap12(this.get(fibers), (either14) => {
        switch (either14._tag) {
          case "Left": {
            return succeed(empty32(Order7));
          }
          case "Right": {
            return pipe(either14.right, forEachSequential((ref) => sync(() => get8(ref))), map14(reduce3(empty32(Order7), (a, b) => union8(a, b))), map14(filter13((fiber) => !equals(fiber.id(), descriptor3.id))));
          }
        }
      }));
    }
  };
  TestAnnotations = /* @__PURE__ */ GenericTag("effect/Annotations");
});

// node_modules/effect/dist/esm/internal/testing/suspendedWarningData.js
var OP_SUSPENDED_WARNING_DATA_START = "Start", OP_SUSPENDED_WARNING_DATA_PENDING = "Pending", OP_SUSPENDED_WARNING_DATA_DONE = "Done", start3, pending4 = (fiber) => {
  return {
    _tag: OP_SUSPENDED_WARNING_DATA_PENDING,
    fiber
  };
}, done15, isStart = (self) => {
  return self._tag === OP_SUSPENDED_WARNING_DATA_START;
}, isPending2 = (self) => {
  return self._tag === OP_SUSPENDED_WARNING_DATA_PENDING;
};
var init_suspendedWarningData = __esm(() => {
  start3 = {
    _tag: OP_SUSPENDED_WARNING_DATA_START
  };
  done15 = {
    _tag: OP_SUSPENDED_WARNING_DATA_DONE
  };
});

// node_modules/effect/dist/esm/internal/testing/warningData.js
var OP_WARNING_DATA_START = "Start", OP_WARNING_DATA_PENDING = "Pending", OP_WARNING_DATA_DONE = "Done", start4, pending5 = (fiber) => {
  return {
    _tag: OP_WARNING_DATA_PENDING,
    fiber
  };
}, done16, isStart2 = (self) => {
  return self._tag === OP_WARNING_DATA_START;
}, isPending3 = (self) => {
  return self._tag === OP_WARNING_DATA_PENDING;
};
var init_warningData = __esm(() => {
  start4 = {
    _tag: OP_WARNING_DATA_START
  };
  done16 = {
    _tag: OP_WARNING_DATA_DONE
  };
});

// node_modules/effect/dist/esm/TestLive.js
var exports_TestLive = {};
__export(exports_TestLive, {
  make: () => make145,
  TestLiveTypeId: () => TestLiveTypeId,
  TestLive: () => TestLive
});
var TestLiveTypeId, TestLive, LiveImpl, make145 = (services) => new LiveImpl(services);
var init_TestLive = __esm(() => {
  init_Context();
  init_core();
  init_defaultServices();
  TestLiveTypeId = /* @__PURE__ */ Symbol.for("effect/TestLive");
  TestLive = /* @__PURE__ */ GenericTag("effect/TestLive");
  LiveImpl = class LiveImpl {
    services;
    [TestLiveTypeId] = TestLiveTypeId;
    constructor(services) {
      this.services = services;
    }
    provide(effect4) {
      return fiberRefLocallyWith(currentServices, merge3(this.services))(effect4);
    }
  };
});

// node_modules/effect/dist/esm/TestClock.js
var exports_TestClock = {};
__export(exports_TestClock, {
  testClockWith: () => testClockWith,
  testClock: () => testClock,
  sleeps: () => sleeps,
  sleep: () => sleep6,
  setTime: () => setTime,
  save: () => save,
  makeData: () => makeData,
  live: () => live3,
  defaultTestClock: () => defaultTestClock,
  currentTimeMillis: () => currentTimeMillis3,
  adjustWith: () => adjustWith,
  adjust: () => adjust,
  TestClockImpl: () => TestClockImpl,
  TestClock: () => TestClock
});
var makeData = (instant, sleeps) => ({
  instant,
  sleeps
}), TestClock, warning, suspendedWarning, TestClockImpl, live3 = (data) => scoped3(TestClock, gen4(function* ($) {
  const live4 = yield* $(TestLive);
  const annotations3 = yield* $(TestAnnotations);
  const clockState = yield* $(sync(() => unsafeMake7(data)));
  const warningState = yield* $(makeSynchronized(start4));
  const suspendedWarningState = yield* $(makeSynchronized(start3));
  const testClock = new TestClockImpl(clockState, live4, annotations3, warningState, suspendedWarningState);
  yield* $(withClockScoped(testClock));
  yield* $(addFinalizer2(() => zipRight2(testClock.warningDone(), testClock.suspendedWarningDone())));
  return testClock;
})), defaultTestClock, adjust = (durationInput) => {
  const duration5 = decode(durationInput);
  return testClockWith((testClock) => testClock.adjust(duration5));
}, adjustWith, save = () => testClockWith((testClock) => testClock.save), setTime = (input) => testClockWith((testClock) => testClock.setTime(typeof input === "number" ? input : unsafeMake14(input).epochMillis)), sleep6 = (durationInput) => {
  const duration5 = decode(durationInput);
  return testClockWith((testClock) => testClock.sleep(duration5));
}, sleeps = () => testClockWith((testClock) => testClock.sleeps), testClock = () => testClockWith(succeed), testClockWith = (f) => fiberRefGetWith(currentServices, (services) => f(pipe(services, get5(clockTag)))), currentTimeMillis3;
var init_TestClock = __esm(() => {
  init_Chunk();
  init_Context();
  init_DateTime();
  init_Duration();
  init_Equal();
  init_FiberStatus();
  init_Function();
  init_HashMap();
  init_clock();
  init_core_effect();
  init_core();
  init_defaultServices();
  init_circular();
  init_fiberRuntime();
  init_layer();
  init_ref();
  init_synchronizedRef();
  init_suspendedWarningData();
  init_warningData();
  init_Number();
  init_Option();
  init_Order();
  init_TestAnnotations();
  init_TestLive();
  TestClock = /* @__PURE__ */ GenericTag("effect/TestClock");
  warning = "Warning: A test is using time, but is not advancing " + "the test clock, which may result in the test hanging. Use TestClock.adjust to " + "manually advance the time.";
  suspendedWarning = "Warning: A test is advancing the test clock, " + "but a fiber is not suspending, which may result in the test hanging. Use " + "TestAspect.diagnose to identity the fiber that is not suspending.";
  TestClockImpl = class TestClockImpl {
    clockState;
    live;
    annotations;
    warningState;
    suspendedWarningState;
    [ClockTypeId] = ClockTypeId;
    constructor(clockState, live3, annotations3, warningState, suspendedWarningState) {
      this.clockState = clockState;
      this.live = live3;
      this.annotations = annotations3;
      this.warningState = warningState;
      this.suspendedWarningState = suspendedWarningState;
      this.currentTimeMillis = map14(get13(this.clockState), (data) => data.instant);
      this.currentTimeNanos = map14(get13(this.clockState), (data) => BigInt(data.instant * 1e6));
    }
    unsafeCurrentTimeMillis() {
      return unsafeGet7(this.clockState).instant;
    }
    unsafeCurrentTimeNanos() {
      return BigInt(unsafeGet7(this.clockState).instant * 1e6);
    }
    currentTimeMillis;
    currentTimeNanos;
    get save() {
      return map14(get13(this.clockState), (data) => set6(this.clockState, data));
    }
    setTime(instant) {
      return zipRight2(this.warningDone(), this.run(() => instant));
    }
    sleep(durationInput) {
      const duration5 = decode(durationInput);
      return flatMap12(deferredMake(), (deferred) => pipe(modify7(this.clockState, (data) => {
        const end7 = data.instant + toMillis(duration5);
        if (end7 > data.instant) {
          return [true, makeData(data.instant, pipe(data.sleeps, prepend3([end7, deferred])))];
        }
        return [false, data];
      }), flatMap12((shouldAwait) => shouldAwait ? pipe(this.warningStart(), zipRight2(deferredAwait(deferred))) : pipe(deferredSucceed(deferred, undefined), asVoid2))));
    }
    get sleeps() {
      return map14(get13(this.clockState), (data) => map7(data.sleeps, (_) => _[0]));
    }
    adjust(durationInput) {
      const duration5 = decode(durationInput);
      return zipRight2(this.warningDone(), this.run((n) => n + toMillis(duration5)));
    }
    adjustWith(durationInput) {
      const duration5 = decode(durationInput);
      return (effect4) => zipLeftOptions(effect4, this.adjust(duration5), {
        concurrent: true
      });
    }
    supervisedFibers() {
      return this.annotations.supervisedFibers;
    }
    freeze() {
      return flatMap12(this.supervisedFibers(), (fibers2) => pipe(fibers2, reduce12(empty11(), (map47, fiber) => pipe(fiber.status, flatMap12((status3) => {
        if (isDone3(status3)) {
          return succeed(set4(map47, fiber.id(), status3));
        }
        if (isSuspended2(status3)) {
          return succeed(set4(map47, fiber.id(), status3));
        }
        return fail2(undefined);
      })))));
    }
    warningStart() {
      return updateSomeEffect(this.warningState, (data) => isStart2(data) ? some3(pipe(this.live.provide(pipe(logWarning(warning), delay(seconds(5)))), interruptible2, fork2, map14((fiber) => pending5(fiber)))) : none2());
    }
    warningDone() {
      return updateSomeEffect(this.warningState, (warningData) => {
        if (isStart2(warningData)) {
          return some3(succeed(done16));
        }
        if (isPending3(warningData)) {
          return some3(pipe(interruptFiber(warningData.fiber), as3(done16)));
        }
        return none2();
      });
    }
    yieldTimer = /* @__PURE__ */ async_((resume2) => {
      const timer4 = setTimeout(() => {
        resume2(void_3);
      }, 0);
      return sync(() => clearTimeout(timer4));
    });
    suspended() {
      return pipe(this.freeze(), zip5(pipe(this.yieldTimer, zipRight2(this.freeze()))), flatMap12(([first5, last8]) => equals(first5, last8) ? succeed(first5) : fail2(undefined)));
    }
    awaitSuspended() {
      return pipe(this.suspendedWarningStart(), zipRight2(pipe(this.suspended(), zipWith6(pipe(this.yieldTimer, zipRight2(this.suspended())), equals), filterOrFail(identity, constVoid), eventually)), zipRight2(this.suspendedWarningDone()));
    }
    suspendedWarningStart() {
      return updateSomeEffect(this.suspendedWarningState, (suspendedWarningData) => {
        if (isStart(suspendedWarningData)) {
          return some3(pipe(this.live.provide(pipe(logWarning(suspendedWarning), zipRight2(set6(this.suspendedWarningState, done15)), delay(seconds(5)))), interruptible2, fork2, map14((fiber) => pending4(fiber))));
        }
        return none2();
      });
    }
    suspendedWarningDone() {
      return updateSomeEffect(this.suspendedWarningState, (suspendedWarningData) => {
        if (isPending2(suspendedWarningData)) {
          return some3(pipe(interruptFiber(suspendedWarningData.fiber), as3(start3)));
        }
        return none2();
      });
    }
    run(f) {
      return pipe(this.awaitSuspended(), zipRight2(pipe(modify7(this.clockState, (data) => {
        const end7 = f(data.instant);
        const sorted = pipe(data.sleeps, sort2(pipe(Order, mapInput3((_) => _[0]))));
        if (isNonEmpty2(sorted)) {
          const [instant, deferred] = headNonEmpty2(sorted);
          if (instant <= end7) {
            return [some3([end7, deferred]), makeData(instant, tailNonEmpty2(sorted))];
          }
        }
        return [none2(), makeData(end7, data.sleeps)];
      }), flatMap12((option11) => {
        switch (option11._tag) {
          case "None": {
            return void_3;
          }
          case "Some": {
            const [end7, deferred] = option11.value;
            return pipe(deferredSucceed(deferred, undefined), zipRight2(yieldNow()), zipRight2(this.run(() => end7)));
          }
        }
      }))));
    }
  };
  defaultTestClock = /* @__PURE__ */ live3(/* @__PURE__ */ makeData(/* @__PURE__ */ new Date(0).getTime(), /* @__PURE__ */ empty7()));
  adjustWith = /* @__PURE__ */ dual(2, (effect4, durationInput) => {
    const duration5 = decode(durationInput);
    return testClockWith((testClock) => testClock.adjustWith(duration5)(effect4));
  });
  currentTimeMillis3 = /* @__PURE__ */ testClockWith((testClock2) => testClock2.currentTimeMillis);
});

// node_modules/effect/dist/esm/TestConfig.js
var exports_TestConfig = {};
__export(exports_TestConfig, {
  make: () => make146,
  TestConfig: () => TestConfig
});
var TestConfig, make146 = (params) => params;
var init_TestConfig = __esm(() => {
  init_Context();
  TestConfig = /* @__PURE__ */ GenericTag("effect/TestConfig");
});

// node_modules/effect/dist/esm/TestSized.js
var exports_TestSized = {};
__export(exports_TestSized, {
  make: () => make147,
  fromFiberRef: () => fromFiberRef,
  TestSizedTypeId: () => TestSizedTypeId,
  TestSized: () => TestSized
});
var TestSizedTypeId, TestSized, SizedImpl, make147 = (size37) => new SizedImpl(fiberRefUnsafeMake(size37)), fromFiberRef = (fiberRef) => new SizedImpl(fiberRef);
var init_TestSized = __esm(() => {
  init_Context();
  init_core();
  TestSizedTypeId = /* @__PURE__ */ Symbol.for("effect/TestSized");
  TestSized = /* @__PURE__ */ GenericTag("effect/TestSized");
  SizedImpl = class SizedImpl {
    fiberRef;
    [TestSizedTypeId] = TestSizedTypeId;
    constructor(fiberRef) {
      this.fiberRef = fiberRef;
    }
    get size() {
      return fiberRefGet(this.fiberRef);
    }
    withSize(size37) {
      return (effect4) => fiberRefLocally(this.fiberRef, size37)(effect4);
    }
  };
});

// node_modules/effect/dist/esm/TestServices.js
var exports_TestServices = {};
__export(exports_TestServices, {
  withTestConfigScoped: () => withTestConfigScoped,
  withTestConfig: () => withTestConfig,
  withSizedScoped: () => withSizedScoped,
  withSized: () => withSized,
  withSize: () => withSize,
  withLiveScoped: () => withLiveScoped,
  withLive: () => withLive,
  withAnnotationsScoped: () => withAnnotationsScoped,
  withAnnotations: () => withAnnotations,
  testConfigWith: () => testConfigWith,
  testConfigLayer: () => testConfigLayer,
  testConfig: () => testConfig,
  supervisedFibers: () => supervisedFibers,
  sizedWith: () => sizedWith,
  sizedLayer: () => sizedLayer,
  sized: () => sized,
  size: () => size37,
  shrinks: () => shrinks,
  samples: () => samples,
  retries: () => retries,
  repeats: () => repeats,
  provideWithLive: () => provideWithLive,
  provideLive: () => provideLive,
  liveWith: () => liveWith,
  liveServices: () => liveServices3,
  liveLayer: () => liveLayer,
  live: () => live4,
  get: () => get46,
  currentServices: () => currentServices3,
  annotationsWith: () => annotationsWith,
  annotationsLayer: () => annotationsLayer,
  annotations: () => annotations3,
  annotate: () => annotate2
});
var liveServices3, currentServices3, annotations3 = () => annotationsWith(succeed), annotationsWith = (f) => fiberRefGetWith(currentServices3, (services) => f(get5(services, TestAnnotations))), withAnnotations, withAnnotationsScoped = (annotations4) => fiberRefLocallyScopedWith(currentServices3, add2(TestAnnotations, annotations4)), annotationsLayer = () => scoped3(TestAnnotations, pipe(sync(() => unsafeMake7(empty58())), map14(make144), tap2(withAnnotationsScoped))), get46 = (key) => annotationsWith((annotations4) => annotations4.get(key)), annotate2 = (key, value10) => annotationsWith((annotations4) => annotations4.annotate(key, value10)), supervisedFibers = () => annotationsWith((annotations4) => annotations4.supervisedFibers), liveWith = (f) => fiberRefGetWith(currentServices3, (services) => f(get5(services, TestLive))), live4, withLive, withLiveScoped = (live5) => fiberRefLocallyScopedWith(currentServices3, add2(TestLive, live5)), liveLayer = () => scoped3(TestLive, pipe(context2(), map14(make145), tap2(withLiveScoped))), provideLive = (effect4) => liveWith((live5) => live5.provide(effect4)), provideWithLive, sizedWith = (f) => fiberRefGetWith(currentServices3, (services) => f(get5(services, TestSized))), sized, withSized, withSizedScoped = (sized2) => fiberRefLocallyScopedWith(currentServices3, add2(TestSized, sized2)), sizedLayer = (size37) => scoped3(TestSized, pipe(fiberRefMake(size37), map14(fromFiberRef), tap2(withSizedScoped))), size37, withSize, testConfigWith = (f) => fiberRefGetWith(currentServices3, (services) => f(get5(services, TestConfig))), testConfig, withTestConfig, withTestConfigScoped = (config2) => fiberRefLocallyScopedWith(currentServices3, add2(TestConfig, config2)), testConfigLayer = (params) => scoped3(TestConfig, suspend4(() => {
  const testConfig2 = make146(params);
  return pipe(withTestConfigScoped(testConfig2), as3(testConfig2));
})), repeats, retries, samples, shrinks;
var init_TestServices = __esm(() => {
  init_Context();
  init_Effect();
  init_Function();
  init_core();
  init_defaultServices();
  init_fiberRuntime();
  init_layer();
  init_ref();
  init_TestAnnotationMap();
  init_TestAnnotations();
  init_TestConfig();
  init_TestLive();
  init_TestSized();
  liveServices3 = /* @__PURE__ */ pipe(/* @__PURE__ */ make8(TestAnnotations, /* @__PURE__ */ make144(/* @__PURE__ */ unsafeMake7(/* @__PURE__ */ empty58()))), /* @__PURE__ */ add2(TestLive, /* @__PURE__ */ make145(liveServices)), /* @__PURE__ */ add2(TestSized, /* @__PURE__ */ make147(100)), /* @__PURE__ */ add2(TestConfig, /* @__PURE__ */ make146({
    repeats: 100,
    retries: 100,
    samples: 200,
    shrinks: 1000
  })));
  currentServices3 = /* @__PURE__ */ fiberRefUnsafeMakeContext(liveServices3);
  withAnnotations = /* @__PURE__ */ dual(2, (effect4, annotations4) => fiberRefLocallyWith(currentServices3, add2(TestAnnotations, annotations4))(effect4));
  live4 = /* @__PURE__ */ liveWith(succeed);
  withLive = /* @__PURE__ */ dual(2, (effect4, live5) => fiberRefLocallyWith(currentServices3, add2(TestLive, live5))(effect4));
  provideWithLive = /* @__PURE__ */ dual(2, (self, f) => fiberRefGetWith(currentServices, (services) => provideLive(f(fiberRefLocally(currentServices, services)(self)))));
  sized = /* @__PURE__ */ sizedWith(succeed);
  withSized = /* @__PURE__ */ dual(2, (effect4, sized2) => fiberRefLocallyWith(currentServices3, add2(TestSized, sized2))(effect4));
  size37 = /* @__PURE__ */ sizedWith((sized2) => sized2.size);
  withSize = /* @__PURE__ */ dual(2, (effect4, size38) => sizedWith((sized2) => sized2.withSize(size38)(effect4)));
  testConfig = /* @__PURE__ */ testConfigWith(succeed);
  withTestConfig = /* @__PURE__ */ dual(2, (effect4, config2) => fiberRefLocallyWith(currentServices3, add2(TestConfig, config2))(effect4));
  repeats = /* @__PURE__ */ testConfigWith((config2) => succeed(config2.repeats));
  retries = /* @__PURE__ */ testConfigWith((config2) => succeed(config2.retries));
  samples = /* @__PURE__ */ testConfigWith((config2) => succeed(config2.samples));
  shrinks = /* @__PURE__ */ testConfigWith((config2) => succeed(config2.shrinks));
});

// node_modules/effect/dist/esm/TestContext.js
var exports_TestContext = {};
__export(exports_TestContext, {
  live: () => live5,
  TestContext: () => TestContext,
  LiveContext: () => LiveContext
});
var live5, LiveContext, TestContext;
var init_TestContext = __esm(() => {
  init_Function();
  init_defaultServices();
  init_layer();
  init_TestClock();
  init_TestServices();
  live5 = /* @__PURE__ */ pipe(/* @__PURE__ */ annotationsLayer(), /* @__PURE__ */ merge6(/* @__PURE__ */ liveLayer()), /* @__PURE__ */ merge6(/* @__PURE__ */ sizedLayer(100)), /* @__PURE__ */ merge6(/* @__PURE__ */ pipe(defaultTestClock, /* @__PURE__ */ provideMerge(/* @__PURE__ */ merge6(/* @__PURE__ */ liveLayer(), /* @__PURE__ */ annotationsLayer())))), /* @__PURE__ */ merge6(/* @__PURE__ */ testConfigLayer({
    repeats: 100,
    retries: 100,
    samples: 200,
    shrinks: 1000
  })));
  LiveContext = /* @__PURE__ */ syncContext(() => liveServices);
  TestContext = /* @__PURE__ */ provideMerge(live5, LiveContext);
});

// node_modules/effect/dist/esm/internal/trie.js
var TrieSymbolKey = "effect/Trie", TrieTypeId, trieVariance, TrieProto, makeImpl6 = (root) => {
  const trie = Object.create(TrieProto);
  trie._root = root;
  trie._count = root?.count ?? 0;
  return trie;
}, TrieIterator, isTrie = (u) => hasProperty(u, TrieTypeId), empty59 = () => makeImpl6(undefined), fromIterable32 = (entries4) => {
  let trie = empty59();
  for (const [key, value10] of entries4) {
    trie = insert3(trie, key, value10);
  }
  return trie;
}, make148 = (...entries4) => {
  return fromIterable32(entries4);
}, insert3, size38 = (self) => self._root?.count ?? 0, isEmpty30 = (self) => size38(self) === 0, keys13 = (self) => new TrieIterator(self, (key) => key, () => true), values13 = (self) => new TrieIterator(self, (_, value10) => value10, () => true), entries4 = (self) => new TrieIterator(self, (key, value10) => [key, value10], () => true), reduce29, map47, filter24, filterMap14, compact5 = (self) => filterMap14(self, identity), forEach27, keysWithPrefix, valuesWithPrefix, entriesWithPrefix, toEntriesWithPrefix, get47, has17, unsafeGet12, remove19, removeMany3, insertMany, modify20, longestPrefixOf;
var init_trie = __esm(() => {
  init_Equal();
  init_Function();
  init_Hash();
  init_Inspectable();
  init_Option();
  init_Predicate();
  TrieTypeId = /* @__PURE__ */ Symbol.for(TrieSymbolKey);
  trieVariance = {
    _Value: (_) => _
  };
  TrieProto = {
    [TrieTypeId]: trieVariance,
    [Symbol.iterator]() {
      return new TrieIterator(this, (k, v) => [k, v], () => true);
    },
    [symbol2]() {
      let hash4 = hash(TrieSymbolKey);
      for (const item of this) {
        hash4 ^= pipe(hash(item[0]), combine2(hash(item[1])));
      }
      return cached(this, hash4);
    },
    [symbol3](that) {
      if (isTrie(that)) {
        const entries4 = Array.from(that);
        return Array.from(this).every((itemSelf, i2) => {
          const itemThat = entries4[i2];
          return equals(itemSelf[0], itemThat[0]) && equals(itemSelf[1], itemThat[1]);
        });
      }
      return false;
    },
    toString() {
      return format2(this.toJSON());
    },
    toJSON() {
      return {
        _id: "Trie",
        values: Array.from(this).map(toJSON)
      };
    },
    [NodeInspectSymbol]() {
      return this.toJSON();
    },
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
  TrieIterator = class TrieIterator {
    trie;
    f;
    filter;
    stack = [];
    constructor(trie, f, filter24) {
      this.trie = trie;
      this.f = f;
      this.filter = filter24;
      const root = trie._root !== undefined ? trie._root : undefined;
      if (root !== undefined) {
        this.stack.push([root, "", false]);
      }
    }
    next() {
      while (this.stack.length > 0) {
        const [node, keyString, isAdded] = this.stack.pop();
        if (isAdded) {
          const value10 = node.value;
          if (value10 !== undefined) {
            const key = keyString + node.key;
            if (this.filter(key, value10)) {
              return {
                done: false,
                value: this.f(key, value10)
              };
            }
          }
        } else {
          this.addToStack(node, keyString);
        }
      }
      return {
        done: true,
        value: undefined
      };
    }
    addToStack(node, keyString) {
      if (node.right !== undefined) {
        this.stack.push([node.right, keyString, false]);
      }
      if (node.mid !== undefined) {
        this.stack.push([node.mid, keyString + node.key, false]);
      }
      this.stack.push([node, keyString, true]);
      if (node.left !== undefined) {
        this.stack.push([node.left, keyString, false]);
      }
    }
    [Symbol.iterator]() {
      return new TrieIterator(this.trie, this.f, this.filter);
    }
  };
  insert3 = /* @__PURE__ */ dual(3, (self, key, value10) => {
    if (key.length === 0)
      return self;
    const dStack = [];
    const nStack = [];
    let n = self._root ?? {
      key: key[0],
      count: 0
    };
    const count9 = n.count + 1;
    let cIndex = 0;
    while (cIndex < key.length) {
      const c = key[cIndex];
      nStack.push(n);
      if (c > n.key) {
        dStack.push(1);
        if (n.right === undefined) {
          n = {
            key: c,
            count: count9
          };
        } else {
          n = n.right;
        }
      } else if (c < n.key) {
        dStack.push(-1);
        if (n.left === undefined) {
          n = {
            key: c,
            count: count9
          };
        } else {
          n = n.left;
        }
      } else {
        if (cIndex === key.length - 1) {
          n.value = value10;
        } else if (n.mid === undefined) {
          dStack.push(0);
          n = {
            key: key[cIndex + 1],
            count: count9
          };
        } else {
          dStack.push(0);
          n = n.mid;
        }
        cIndex += 1;
      }
    }
    for (let s = nStack.length - 2;s >= 0; --s) {
      const n2 = nStack[s];
      const d = dStack[s];
      if (d === -1) {
        nStack[s] = {
          key: n2.key,
          count: count9,
          value: n2.value,
          left: nStack[s + 1],
          mid: n2.mid,
          right: n2.right
        };
      } else if (d === 1) {
        nStack[s] = {
          key: n2.key,
          count: count9,
          value: n2.value,
          left: n2.left,
          mid: n2.mid,
          right: nStack[s + 1]
        };
      } else {
        nStack[s] = {
          key: n2.key,
          count: count9,
          value: n2.value,
          left: n2.left,
          mid: nStack[s + 1],
          right: n2.right
        };
      }
    }
    nStack[0].count = count9;
    return makeImpl6(nStack[0]);
  });
  reduce29 = /* @__PURE__ */ dual(3, (self, zero3, f) => {
    let accumulator = zero3;
    for (const entry of self) {
      accumulator = f(accumulator, entry[1], entry[0]);
    }
    return accumulator;
  });
  map47 = /* @__PURE__ */ dual(2, (self, f) => reduce29(self, empty59(), (trie, value10, key) => insert3(trie, key, f(value10, key))));
  filter24 = /* @__PURE__ */ dual(2, (self, f) => reduce29(self, empty59(), (trie, value10, key) => f(value10, key) ? insert3(trie, key, value10) : trie));
  filterMap14 = /* @__PURE__ */ dual(2, (self, f) => reduce29(self, empty59(), (trie, value10, key) => {
    const option11 = f(value10, key);
    return isSome2(option11) ? insert3(trie, key, option11.value) : trie;
  }));
  forEach27 = /* @__PURE__ */ dual(2, (self, f) => reduce29(self, undefined, (_, value10, key) => f(value10, key)));
  keysWithPrefix = /* @__PURE__ */ dual(2, (self, prefix) => new TrieIterator(self, (key) => key, (key) => key.startsWith(prefix)));
  valuesWithPrefix = /* @__PURE__ */ dual(2, (self, prefix) => new TrieIterator(self, (_, value10) => value10, (key) => key.startsWith(prefix)));
  entriesWithPrefix = /* @__PURE__ */ dual(2, (self, prefix) => new TrieIterator(self, (key, value10) => [key, value10], (key) => key.startsWith(prefix)));
  toEntriesWithPrefix = /* @__PURE__ */ dual(2, (self, prefix) => Array.from(entriesWithPrefix(self, prefix)));
  get47 = /* @__PURE__ */ dual(2, (self, key) => {
    let n = self._root;
    if (n === undefined || key.length === 0)
      return none2();
    let cIndex = 0;
    while (cIndex < key.length) {
      const c = key[cIndex];
      if (c > n.key) {
        if (n.right === undefined) {
          return none2();
        } else {
          n = n.right;
        }
      } else if (c < n.key) {
        if (n.left === undefined) {
          return none2();
        } else {
          n = n.left;
        }
      } else {
        if (cIndex === key.length - 1) {
          return fromNullable2(n.value);
        } else {
          if (n.mid === undefined) {
            return none2();
          } else {
            n = n.mid;
            cIndex += 1;
          }
        }
      }
    }
    return none2();
  });
  has17 = /* @__PURE__ */ dual(2, (self, key) => isSome2(get47(self, key)));
  unsafeGet12 = /* @__PURE__ */ dual(2, (self, key) => {
    const element2 = get47(self, key);
    if (isNone2(element2)) {
      throw new Error("Expected trie to contain key");
    }
    return element2.value;
  });
  remove19 = /* @__PURE__ */ dual(2, (self, key) => {
    let n = self._root;
    if (n === undefined || key.length === 0)
      return self;
    const count9 = n.count - 1;
    const dStack = [];
    const nStack = [];
    let cIndex = 0;
    while (cIndex < key.length) {
      const c = key[cIndex];
      if (c > n.key) {
        if (n.right === undefined) {
          return self;
        } else {
          nStack.push(n);
          dStack.push(1);
          n = n.right;
        }
      } else if (c < n.key) {
        if (n.left === undefined) {
          return self;
        } else {
          nStack.push(n);
          dStack.push(-1);
          n = n.left;
        }
      } else {
        if (cIndex === key.length - 1) {
          if (n.value !== undefined) {
            nStack.push(n);
            dStack.push(0);
            cIndex += 1;
          } else {
            return self;
          }
        } else {
          if (n.mid === undefined) {
            return self;
          } else {
            nStack.push(n);
            dStack.push(0);
            n = n.mid;
            cIndex += 1;
          }
        }
      }
    }
    const removeNode = nStack[nStack.length - 1];
    nStack[nStack.length - 1] = {
      key: removeNode.key,
      count: count9,
      left: removeNode.left,
      mid: removeNode.mid,
      right: removeNode.right
    };
    for (let s = nStack.length - 2;s >= 0; --s) {
      const n2 = nStack[s];
      const d = dStack[s];
      const child = nStack[s + 1];
      const nc = child.left === undefined && child.mid === undefined && child.right === undefined ? undefined : child;
      if (d === -1) {
        nStack[s] = {
          key: n2.key,
          count: count9,
          value: n2.value,
          left: nc,
          mid: n2.mid,
          right: n2.right
        };
      } else if (d === 1) {
        nStack[s] = {
          key: n2.key,
          count: count9,
          value: n2.value,
          left: n2.left,
          mid: n2.mid,
          right: nc
        };
      } else {
        nStack[s] = {
          key: n2.key,
          count: count9,
          value: n2.value,
          left: n2.left,
          mid: nc,
          right: n2.right
        };
      }
    }
    nStack[0].count = count9;
    return makeImpl6(nStack[0]);
  });
  removeMany3 = /* @__PURE__ */ dual(2, (self, keys14) => {
    let trie = self;
    for (const key of keys14) {
      trie = remove19(key)(trie);
    }
    return trie;
  });
  insertMany = /* @__PURE__ */ dual(2, (self, iter) => {
    let trie = self;
    for (const [key, value10] of iter) {
      trie = insert3(key, value10)(trie);
    }
    return trie;
  });
  modify20 = /* @__PURE__ */ dual(3, (self, key, f) => {
    let n = self._root;
    if (n === undefined || key.length === 0)
      return self;
    const dStack = [];
    const nStack = [];
    let cIndex = 0;
    while (cIndex < key.length) {
      const c = key[cIndex];
      if (c > n.key) {
        if (n.right === undefined) {
          return self;
        } else {
          nStack.push(n);
          dStack.push(1);
          n = n.right;
        }
      } else if (c < n.key) {
        if (n.left === undefined) {
          return self;
        } else {
          nStack.push(n);
          dStack.push(-1);
          n = n.left;
        }
      } else {
        if (cIndex === key.length - 1) {
          if (n.value !== undefined) {
            nStack.push(n);
            dStack.push(0);
            cIndex += 1;
          } else {
            return self;
          }
        } else {
          if (n.mid === undefined) {
            return self;
          } else {
            nStack.push(n);
            dStack.push(0);
            n = n.mid;
            cIndex += 1;
          }
        }
      }
    }
    const updateNode = nStack[nStack.length - 1];
    if (updateNode.value === undefined) {
      return self;
    }
    nStack[nStack.length - 1] = {
      key: updateNode.key,
      count: updateNode.count,
      value: f(updateNode.value),
      left: updateNode.left,
      mid: updateNode.mid,
      right: updateNode.right
    };
    for (let s = nStack.length - 2;s >= 0; --s) {
      const n2 = nStack[s];
      const d = dStack[s];
      const child = nStack[s + 1];
      if (d === -1) {
        nStack[s] = {
          key: n2.key,
          count: n2.count,
          value: n2.value,
          left: child,
          mid: n2.mid,
          right: n2.right
        };
      } else if (d === 1) {
        nStack[s] = {
          key: n2.key,
          count: n2.count,
          value: n2.value,
          left: n2.left,
          mid: n2.mid,
          right: child
        };
      } else {
        nStack[s] = {
          key: n2.key,
          count: n2.count,
          value: n2.value,
          left: n2.left,
          mid: child,
          right: n2.right
        };
      }
    }
    return makeImpl6(nStack[0]);
  });
  longestPrefixOf = /* @__PURE__ */ dual(2, (self, key) => {
    let n = self._root;
    if (n === undefined || key.length === 0)
      return none2();
    let longestPrefixNode = undefined;
    let cIndex = 0;
    while (cIndex < key.length) {
      const c = key[cIndex];
      if (n.value !== undefined) {
        longestPrefixNode = [key.slice(0, cIndex + 1), n.value];
      }
      if (c > n.key) {
        if (n.right === undefined) {
          break;
        } else {
          n = n.right;
        }
      } else if (c < n.key) {
        if (n.left === undefined) {
          break;
        } else {
          n = n.left;
        }
      } else {
        if (n.mid === undefined) {
          break;
        } else {
          n = n.mid;
          cIndex += 1;
        }
      }
    }
    return fromNullable2(longestPrefixNode);
  });
});

// node_modules/effect/dist/esm/Trie.js
var exports_Trie = {};
__export(exports_Trie, {
  valuesWithPrefix: () => valuesWithPrefix2,
  values: () => values14,
  unsafeGet: () => unsafeGet13,
  toEntriesWithPrefix: () => toEntriesWithPrefix2,
  toEntries: () => toEntries3,
  size: () => size39,
  removeMany: () => removeMany4,
  remove: () => remove20,
  reduce: () => reduce30,
  modify: () => modify21,
  map: () => map48,
  make: () => make149,
  longestPrefixOf: () => longestPrefixOf2,
  keysWithPrefix: () => keysWithPrefix2,
  keys: () => keys14,
  isEmpty: () => isEmpty31,
  insertMany: () => insertMany2,
  insert: () => insert4,
  has: () => has18,
  get: () => get48,
  fromIterable: () => fromIterable33,
  forEach: () => forEach28,
  filterMap: () => filterMap15,
  filter: () => filter25,
  entriesWithPrefix: () => entriesWithPrefix2,
  entries: () => entries5,
  empty: () => empty60,
  compact: () => compact6
});
var empty60, fromIterable33, make149, insert4, keys14, values14, entries5, toEntries3 = (self) => Array.from(entries5(self)), keysWithPrefix2, valuesWithPrefix2, entriesWithPrefix2, toEntriesWithPrefix2, longestPrefixOf2, size39, get48, has18, isEmpty31, unsafeGet13, remove20, reduce30, map48, filter25, filterMap15, compact6, forEach28, modify21, removeMany4, insertMany2;
var init_Trie = __esm(() => {
  init_trie();
  empty60 = empty59;
  fromIterable33 = fromIterable32;
  make149 = make148;
  insert4 = insert3;
  keys14 = keys13;
  values14 = values13;
  entries5 = entries4;
  keysWithPrefix2 = keysWithPrefix;
  valuesWithPrefix2 = valuesWithPrefix;
  entriesWithPrefix2 = entriesWithPrefix;
  toEntriesWithPrefix2 = toEntriesWithPrefix;
  longestPrefixOf2 = longestPrefixOf;
  size39 = size38;
  get48 = get47;
  has18 = has17;
  isEmpty31 = isEmpty30;
  unsafeGet13 = unsafeGet12;
  remove20 = remove19;
  reduce30 = reduce29;
  map48 = map47;
  filter25 = filter24;
  filterMap15 = filterMap14;
  compact6 = compact5;
  forEach28 = forEach27;
  modify21 = modify20;
  removeMany4 = removeMany3;
  insertMany2 = insertMany;
});

// node_modules/effect/dist/esm/Types.js
var exports_Types = {};
var init_Types = () => {};

// node_modules/effect/dist/esm/Unify.js
var exports_Unify = {};
__export(exports_Unify, {
  unify: () => unify2
});
var unify2;
var init_Unify = __esm(() => {
  init_Function();
  unify2 = identity;
});

// node_modules/effect/dist/esm/UpstreamPullRequest.js
var exports_UpstreamPullRequest = {};
__export(exports_UpstreamPullRequest, {
  match: () => match41,
  isUpstreamPullRequest: () => isUpstreamPullRequest2,
  isPulled: () => isPulled2,
  isNoUpstream: () => isNoUpstream2,
  UpstreamPullRequestTypeId: () => UpstreamPullRequestTypeId2,
  Pulled: () => Pulled2,
  NoUpstream: () => NoUpstream2
});
var UpstreamPullRequestTypeId2, Pulled2, NoUpstream2, isUpstreamPullRequest2, isPulled2, isNoUpstream2, match41;
var init_UpstreamPullRequest = __esm(() => {
  init_upstreamPullRequest();
  UpstreamPullRequestTypeId2 = UpstreamPullRequestTypeId;
  Pulled2 = Pulled;
  NoUpstream2 = NoUpstream;
  isUpstreamPullRequest2 = isUpstreamPullRequest;
  isPulled2 = isPulled;
  isNoUpstream2 = isNoUpstream;
  match41 = match24;
});

// node_modules/effect/dist/esm/UpstreamPullStrategy.js
var exports_UpstreamPullStrategy = {};
__export(exports_UpstreamPullStrategy, {
  match: () => match42,
  isUpstreamPullStrategy: () => isUpstreamPullStrategy2,
  isPullAfterNext: () => isPullAfterNext2,
  isPullAfterAllEnqueued: () => isPullAfterAllEnqueued2,
  UpstreamPullStrategyTypeId: () => UpstreamPullStrategyTypeId2,
  PullAfterNext: () => PullAfterNext2,
  PullAfterAllEnqueued: () => PullAfterAllEnqueued2
});
var UpstreamPullStrategyTypeId2, PullAfterNext2, PullAfterAllEnqueued2, isUpstreamPullStrategy2, isPullAfterNext2, isPullAfterAllEnqueued2, match42;
var init_UpstreamPullStrategy = __esm(() => {
  init_upstreamPullStrategy();
  UpstreamPullStrategyTypeId2 = UpstreamPullStrategyTypeId;
  PullAfterNext2 = PullAfterNext;
  PullAfterAllEnqueued2 = PullAfterAllEnqueued;
  isUpstreamPullStrategy2 = isUpstreamPullStrategy;
  isPullAfterNext2 = isPullAfterNext;
  isPullAfterAllEnqueued2 = isPullAfterAllEnqueued;
  match42 = match23;
});

// node_modules/effect/dist/esm/index.js
var exports_esm = {};
__export(exports_esm, {
  unsafeCoerce: () => unsafeCoerce,
  pipe: () => pipe,
  identity: () => identity,
  hole: () => hole,
  flow: () => flow,
  absurd: () => absurd,
  Utils: () => exports_Utils,
  UpstreamPullStrategy: () => exports_UpstreamPullStrategy,
  UpstreamPullRequest: () => exports_UpstreamPullRequest,
  Unify: () => exports_Unify,
  Types: () => exports_Types,
  Tuple: () => exports_Tuple,
  Trie: () => exports_Trie,
  Tracer: () => exports_Tracer,
  TestSized: () => exports_TestSized,
  TestServices: () => exports_TestServices,
  TestLive: () => exports_TestLive,
  TestContext: () => exports_TestContext,
  TestConfig: () => exports_TestConfig,
  TestClock: () => exports_TestClock,
  TestAnnotations: () => exports_TestAnnotations,
  TestAnnotationMap: () => exports_TestAnnotationMap,
  TestAnnotation: () => exports_TestAnnotation,
  Take: () => exports_Take,
  TSubscriptionRef: () => exports_TSubscriptionRef,
  TSet: () => exports_TSet,
  TSemaphore: () => exports_TSemaphore,
  TRef: () => exports_TRef,
  TReentrantLock: () => exports_TReentrantLock,
  TRandom: () => exports_TRandom,
  TQueue: () => exports_TQueue,
  TPubSub: () => exports_TPubSub,
  TPriorityQueue: () => exports_TPriorityQueue,
  TMap: () => exports_TMap,
  TDeferred: () => exports_TDeferred,
  TArray: () => exports_TArray,
  SynchronizedRef: () => exports_SynchronizedRef,
  Symbol: () => exports_Symbol,
  Supervisor: () => exports_Supervisor,
  SubscriptionRef: () => exports_SubscriptionRef,
  Subscribable: () => exports_Subscribable,
  Struct: () => exports_Struct,
  String: () => exports_String,
  Streamable: () => exports_Streamable,
  StreamHaltStrategy: () => exports_StreamHaltStrategy,
  StreamEmit: () => exports_StreamEmit,
  Stream: () => exports_Stream,
  SortedSet: () => exports_SortedSet,
  SortedMap: () => exports_SortedMap,
  Sink: () => exports_Sink,
  SingleProducerAsyncInput: () => exports_SingleProducerAsyncInput,
  Secret: () => exports_Secret,
  ScopedRef: () => exports_ScopedRef,
  ScopedCache: () => exports_ScopedCache,
  Scope: () => exports_Scope,
  SchemaAST: () => exports_SchemaAST,
  Schema: () => exports_Schema,
  Scheduler: () => exports_Scheduler,
  ScheduleIntervals: () => exports_ScheduleIntervals,
  ScheduleInterval: () => exports_ScheduleInterval,
  ScheduleDecision: () => exports_ScheduleDecision,
  Schedule: () => exports_Schedule,
  STM: () => exports_STM,
  RuntimeFlagsPatch: () => exports_RuntimeFlagsPatch,
  RuntimeFlags: () => exports_RuntimeFlags,
  Runtime: () => exports_Runtime,
  Resource: () => exports_Resource,
  RequestResolver: () => exports_RequestResolver,
  RequestBlock: () => exports_RequestBlock,
  Request: () => exports_Request,
  Reloadable: () => exports_Reloadable,
  RegExp: () => exports_RegExp,
  Ref: () => exports_Ref,
  Redacted: () => exports_Redacted,
  RedBlackTree: () => exports_RedBlackTree,
  Record: () => exports_Record,
  Readable: () => exports_Readable,
  RcRef: () => exports_RcRef,
  RcMap: () => exports_RcMap,
  RateLimiter: () => exports_RateLimiter,
  Random: () => exports_Random,
  Queue: () => exports_Queue,
  PubSub: () => exports_PubSub,
  PrimaryKey: () => exports_PrimaryKey,
  Pretty: () => exports_Pretty,
  Predicate: () => exports_Predicate,
  Pool: () => exports_Pool,
  Pipeable: () => exports_Pipeable,
  ParseResult: () => exports_ParseResult,
  Ordering: () => exports_Ordering,
  Order: () => exports_Order,
  Option: () => exports_Option,
  Number: () => exports_Number,
  NonEmptyIterable: () => exports_NonEmptyIterable,
  MutableRef: () => exports_MutableRef,
  MutableQueue: () => exports_MutableQueue,
  MutableList: () => exports_MutableList,
  MutableHashSet: () => exports_MutableHashSet,
  MutableHashMap: () => exports_MutableHashMap,
  ModuleVersion: () => exports_ModuleVersion,
  Micro: () => exports_Micro,
  MetricState: () => exports_MetricState,
  MetricRegistry: () => exports_MetricRegistry,
  MetricPolling: () => exports_MetricPolling,
  MetricPair: () => exports_MetricPair,
  MetricLabel: () => exports_MetricLabel,
  MetricKeyType: () => exports_MetricKeyType,
  MetricKey: () => exports_MetricKey,
  MetricHook: () => exports_MetricHook,
  MetricBoundaries: () => exports_MetricBoundaries,
  Metric: () => exports_Metric,
  MergeStrategy: () => exports_MergeStrategy,
  MergeState: () => exports_MergeState,
  MergeDecision: () => exports_MergeDecision,
  Match: () => exports_Match,
  ManagedRuntime: () => exports_ManagedRuntime,
  Mailbox: () => exports_Mailbox,
  Logger: () => exports_Logger,
  LogSpan: () => exports_LogSpan,
  LogLevel: () => exports_LogLevel,
  List: () => exports_List,
  LayerMap: () => exports_LayerMap,
  Layer: () => exports_Layer,
  KeyedPool: () => exports_KeyedPool,
  JSONSchema: () => exports_JSONSchema,
  Iterable: () => exports_Iterable,
  Inspectable: () => exports_Inspectable,
  HashSet: () => exports_HashSet,
  HashMap: () => exports_HashMap,
  Hash: () => exports_Hash,
  HKT: () => exports_HKT,
  GroupBy: () => exports_GroupBy,
  GlobalValue: () => exports_GlobalValue,
  Function: () => exports_Function,
  FiberStatus: () => exports_FiberStatus,
  FiberSet: () => exports_FiberSet,
  FiberRefsPatch: () => exports_FiberRefsPatch,
  FiberRefs: () => exports_FiberRefs,
  FiberRef: () => exports_FiberRef,
  FiberMap: () => exports_FiberMap,
  FiberId: () => exports_FiberId,
  FiberHandle: () => exports_FiberHandle,
  Fiber: () => exports_Fiber,
  FastCheck: () => exports_FastCheck,
  Exit: () => exports_Exit,
  ExecutionStrategy: () => exports_ExecutionStrategy,
  Equivalence: () => exports_Equivalence,
  Equal: () => exports_Equal,
  Encoding: () => exports_Encoding,
  Either: () => exports_Either,
  Effectable: () => exports_Effectable,
  Effect: () => exports_Effect,
  Duration: () => exports_Duration,
  Differ: () => exports_Differ,
  Deferred: () => exports_Deferred,
  DefaultServices: () => exports_DefaultServices,
  DateTime: () => exports_DateTime,
  Data: () => exports_Data,
  Cron: () => exports_Cron,
  Context: () => exports_Context,
  Console: () => exports_Console,
  ConfigProviderPathPatch: () => exports_ConfigProviderPathPatch,
  ConfigProvider: () => exports_ConfigProvider,
  ConfigError: () => exports_ConfigError,
  Config: () => exports_Config,
  Clock: () => exports_Clock,
  Chunk: () => exports_Chunk,
  ChildExecutorDecision: () => exports_ChildExecutorDecision,
  Channel: () => exports_Channel,
  Cause: () => exports_Cause,
  Cache: () => exports_Cache,
  Brand: () => exports_Brand,
  Boolean: () => exports_Boolean,
  BigInt: () => exports_BigInt,
  BigDecimal: () => exports_BigDecimal,
  Array: () => exports_Array,
  Arbitrary: () => exports_Arbitrary
});
var init_esm = __esm(() => {
  init_Function();
  init_Arbitrary2();
  init_Array();
  init_BigDecimal();
  init_BigInt();
  init_Boolean();
  init_Brand();
  init_Cache();
  init_Cause();
  init_Channel();
  init_ChildExecutorDecision();
  init_Chunk();
  init_Clock();
  init_Config();
  init_ConfigError();
  init_ConfigProvider();
  init_ConfigProviderPathPatch();
  init_Console();
  init_Context();
  init_Cron();
  init_Data();
  init_DateTime();
  init_DefaultServices();
  init_Deferred();
  init_Differ();
  init_Duration();
  init_Effect();
  init_Effectable();
  init_Either();
  init_Encoding();
  init_Equal();
  init_Equivalence();
  init_ExecutionStrategy();
  init_Exit();
  init_FastCheck();
  init_Fiber();
  init_FiberHandle();
  init_FiberId();
  init_FiberMap();
  init_FiberRef();
  init_FiberRefs();
  init_FiberRefsPatch();
  init_FiberSet();
  init_FiberStatus();
  init_Function();
  init_GlobalValue();
  init_GroupBy();
  init_HKT();
  init_Hash();
  init_HashMap();
  init_HashSet();
  init_Inspectable();
  init_Iterable();
  init_JSONSchema();
  init_KeyedPool();
  init_Layer();
  init_LayerMap();
  init_List();
  init_LogLevel();
  init_LogSpan();
  init_Logger();
  init_Mailbox();
  init_ManagedRuntime();
  init_Match();
  init_MergeDecision();
  init_MergeState();
  init_MergeStrategy();
  init_Metric();
  init_MetricBoundaries();
  init_MetricHook();
  init_MetricKey();
  init_MetricKeyType();
  init_MetricLabel();
  init_MetricPair();
  init_MetricPolling();
  init_MetricRegistry();
  init_MetricState();
  init_Micro();
  init_ModuleVersion();
  init_MutableHashMap();
  init_MutableHashSet();
  init_MutableList();
  init_MutableQueue();
  init_MutableRef();
  init_Number();
  init_Option();
  init_Order();
  init_Ordering();
  init_ParseResult();
  init_Pool();
  init_Predicate();
  init_Pretty();
  init_PrimaryKey();
  init_PubSub();
  init_Queue();
  init_Random2();
  init_RateLimiter();
  init_RcMap();
  init_RcRef();
  init_Readable();
  init_Record();
  init_RedBlackTree();
  init_Redacted();
  init_Ref();
  init_RegExp();
  init_Reloadable();
  init_Request();
  init_RequestBlock();
  init_RequestResolver();
  init_Resource();
  init_Runtime();
  init_RuntimeFlags();
  init_RuntimeFlagsPatch();
  init_STM();
  init_Schedule();
  init_ScheduleDecision();
  init_ScheduleInterval();
  init_ScheduleIntervals();
  init_Scheduler();
  init_Schema();
  init_SchemaAST();
  init_Scope();
  init_ScopedCache();
  init_ScopedRef();
  init_Secret();
  init_SingleProducerAsyncInput();
  init_Sink();
  init_SortedMap();
  init_SortedSet();
  init_Stream2();
  init_StreamEmit();
  init_StreamHaltStrategy();
  init_Streamable();
  init_String();
  init_Struct();
  init_Subscribable();
  init_SubscriptionRef();
  init_Supervisor();
  init_Symbol();
  init_SynchronizedRef();
  init_TArray();
  init_TDeferred();
  init_TMap();
  init_TPriorityQueue();
  init_TPubSub();
  init_TQueue();
  init_TRandom();
  init_TReentrantLock();
  init_TRef();
  init_TSemaphore();
  init_TSet();
  init_TSubscriptionRef();
  init_Take();
  init_TestAnnotation();
  init_TestAnnotationMap();
  init_TestAnnotations();
  init_TestClock();
  init_TestConfig();
  init_TestContext();
  init_TestLive();
  init_TestServices();
  init_TestSized();
  init_Tracer();
  init_Trie();
  init_Tuple();
  init_Types();
  init_Unify();
  init_UpstreamPullRequest();
  init_UpstreamPullStrategy();
  init_Utils();
});

// node_modules/xsschema/dist/effect-CE0Pj37O.js
var exports_effect_CE0Pj37O = {};
__export(exports_effect_CE0Pj37O, {
  getToJsonSchemaFn: () => getToJsonSchemaFn2
});
var getToJsonSchemaFn2 = async () => {
  const { JSONSchema } = await tryImport(Promise.resolve().then(() => (init_esm(), exports_esm)), "effect");
  return (schema) => JSONSchema.make(schema);
};
var init_effect_CE0Pj37O = __esm(() => {
  init_index_DtiOmYCK();
});

// node_modules/valibot/dist/index.js
function getDefault(schema, dataset, config2) {
  return typeof schema.default === "function" ? schema.default(dataset, config2) : schema.default;
}
var init_dist = () => {};

// node_modules/@valibot/to-json-schema/dist/index.js
var exports_dist = {};
__export(exports_dist, {
  toJsonSchema: () => toJsonSchema
});
function handleError(message, config2) {
  switch (config2?.errorMode) {
    case "ignore": {
      break;
    }
    case "warn": {
      console.warn(message);
      break;
    }
    default: {
      throw new Error(message);
    }
  }
}
function convertAction(jsonSchema, valibotAction, config2) {
  switch (valibotAction.type) {
    case "base64": {
      jsonSchema.contentEncoding = "base64";
      break;
    }
    case "bic":
    case "cuid2":
    case "decimal":
    case "digits":
    case "emoji":
    case "hexadecimal":
    case "hex_color":
    case "nanoid":
    case "octal":
    case "ulid": {
      jsonSchema.pattern = valibotAction.requirement.source;
      break;
    }
    case "description": {
      jsonSchema.description = valibotAction.description;
      break;
    }
    case "email": {
      jsonSchema.format = "email";
      break;
    }
    case "empty": {
      if (jsonSchema.type === "array") {
        jsonSchema.maxItems = 0;
      } else {
        if (jsonSchema.type !== "string") {
          handleError(`The "${valibotAction.type}" action is not supported on type "${jsonSchema.type}".`, config2);
        }
        jsonSchema.maxLength = 0;
      }
      break;
    }
    case "integer": {
      jsonSchema.type = "integer";
      break;
    }
    case "ipv4": {
      jsonSchema.format = "ipv4";
      break;
    }
    case "ipv6": {
      jsonSchema.format = "ipv6";
      break;
    }
    case "iso_date": {
      jsonSchema.format = "date";
      break;
    }
    case "iso_date_time":
    case "iso_timestamp": {
      jsonSchema.format = "date-time";
      break;
    }
    case "iso_time": {
      jsonSchema.format = "time";
      break;
    }
    case "length": {
      if (jsonSchema.type === "array") {
        jsonSchema.minItems = valibotAction.requirement;
        jsonSchema.maxItems = valibotAction.requirement;
      } else {
        if (jsonSchema.type !== "string") {
          handleError(`The "${valibotAction.type}" action is not supported on type "${jsonSchema.type}".`, config2);
        }
        jsonSchema.minLength = valibotAction.requirement;
        jsonSchema.maxLength = valibotAction.requirement;
      }
      break;
    }
    case "max_length": {
      if (jsonSchema.type === "array") {
        jsonSchema.maxItems = valibotAction.requirement;
      } else {
        if (jsonSchema.type !== "string") {
          handleError(`The "${valibotAction.type}" action is not supported on type "${jsonSchema.type}".`, config2);
        }
        jsonSchema.maxLength = valibotAction.requirement;
      }
      break;
    }
    case "max_value": {
      if (jsonSchema.type !== "number") {
        handleError(`The "max_value" action is not supported on type "${jsonSchema.type}".`, config2);
      }
      jsonSchema.maximum = valibotAction.requirement;
      break;
    }
    case "min_length": {
      if (jsonSchema.type === "array") {
        jsonSchema.minItems = valibotAction.requirement;
      } else {
        if (jsonSchema.type !== "string") {
          handleError(`The "${valibotAction.type}" action is not supported on type "${jsonSchema.type}".`, config2);
        }
        jsonSchema.minLength = valibotAction.requirement;
      }
      break;
    }
    case "min_value": {
      if (jsonSchema.type !== "number") {
        handleError(`The "min_value" action is not supported on type "${jsonSchema.type}".`, config2);
      }
      jsonSchema.minimum = valibotAction.requirement;
      break;
    }
    case "multiple_of": {
      jsonSchema.multipleOf = valibotAction.requirement;
      break;
    }
    case "non_empty": {
      if (jsonSchema.type === "array") {
        jsonSchema.minItems = 1;
      } else {
        if (jsonSchema.type !== "string") {
          handleError(`The "${valibotAction.type}" action is not supported on type "${jsonSchema.type}".`, config2);
        }
        jsonSchema.minLength = 1;
      }
      break;
    }
    case "regex": {
      if (valibotAction.requirement.flags) {
        handleError("RegExp flags are not supported by JSON Schema.", config2);
      }
      jsonSchema.pattern = valibotAction.requirement.source;
      break;
    }
    case "title": {
      jsonSchema.title = valibotAction.title;
      break;
    }
    case "url": {
      jsonSchema.format = "uri";
      break;
    }
    case "uuid": {
      jsonSchema.format = "uuid";
      break;
    }
    case "value": {
      jsonSchema.const = valibotAction.requirement;
      break;
    }
    default: {
      handleError(`The "${valibotAction.type}" action cannot be converted to JSON Schema.`, config2);
    }
  }
  return jsonSchema;
}
function convertSchema(jsonSchema, valibotSchema, config2, context15) {
  const referenceId = context15.referenceMap.get(valibotSchema);
  if (referenceId && referenceId in context15.definitions) {
    jsonSchema.$ref = `#/$defs/${referenceId}`;
    return jsonSchema;
  }
  if ("pipe" in valibotSchema) {
    for (let index = 0;index < valibotSchema.pipe.length; index++) {
      const valibotPipeItem = valibotSchema.pipe[index];
      if (valibotPipeItem.kind === "schema") {
        if (index > 0) {
          handleError('A "pipe" with multiple schemas cannot be converted to JSON Schema.', config2);
        }
        const tempJsonSchema = convertSchema({}, valibotPipeItem, config2, context15);
        if (tempJsonSchema.$ref) {
          const referenceId2 = tempJsonSchema.$ref.split("/")[2];
          Object.assign(jsonSchema, context15.definitions[referenceId2]);
        } else {
          Object.assign(jsonSchema, tempJsonSchema);
        }
      } else {
        jsonSchema = convertAction(jsonSchema, valibotPipeItem, config2);
      }
    }
    return jsonSchema;
  }
  switch (valibotSchema.type) {
    case "boolean": {
      jsonSchema.type = "boolean";
      break;
    }
    case "null": {
      jsonSchema.type = "null";
      break;
    }
    case "number": {
      jsonSchema.type = "number";
      break;
    }
    case "string": {
      jsonSchema.type = "string";
      break;
    }
    case "array": {
      jsonSchema.type = "array";
      jsonSchema.items = convertSchema({}, valibotSchema.item, config2, context15);
      break;
    }
    case "tuple":
    case "tuple_with_rest":
    case "loose_tuple":
    case "strict_tuple": {
      jsonSchema.type = "array";
      jsonSchema.items = [];
      for (const item of valibotSchema.items) {
        jsonSchema.items.push(convertSchema({}, item, config2, context15));
      }
      if (valibotSchema.type === "tuple_with_rest") {
        jsonSchema.additionalItems = convertSchema({}, valibotSchema.rest, config2, context15);
      } else {
        jsonSchema.additionalItems = valibotSchema.type === "loose_tuple";
      }
      break;
    }
    case "object":
    case "object_with_rest":
    case "loose_object":
    case "strict_object": {
      jsonSchema.type = "object";
      jsonSchema.properties = {};
      jsonSchema.required = [];
      for (const key in valibotSchema.entries) {
        const entry = valibotSchema.entries[key];
        jsonSchema.properties[key] = convertSchema({}, entry, config2, context15);
        if (entry.type !== "nullish" && entry.type !== "optional") {
          jsonSchema.required.push(key);
        }
      }
      if (valibotSchema.type === "object_with_rest") {
        jsonSchema.additionalProperties = convertSchema({}, valibotSchema.rest, config2, context15);
      } else if (valibotSchema.type === "strict_object") {
        jsonSchema.additionalProperties = false;
      }
      break;
    }
    case "record": {
      if ("pipe" in valibotSchema.key) {
        handleError('The "record" schema with a schema for the key that contains a "pipe" cannot be converted to JSON Schema.', config2);
      }
      if (valibotSchema.key.type !== "string") {
        handleError(`The "record" schema with the "${valibotSchema.key.type}" schema for the key cannot be converted to JSON Schema.`, config2);
      }
      jsonSchema.type = "object";
      jsonSchema.additionalProperties = convertSchema({}, valibotSchema.value, config2, context15);
      break;
    }
    case "any":
    case "unknown": {
      break;
    }
    case "nullable":
    case "nullish": {
      jsonSchema.anyOf = [
        convertSchema({}, valibotSchema.wrapped, config2, context15),
        { type: "null" }
      ];
      if (valibotSchema.default !== undefined) {
        jsonSchema.default = getDefault(valibotSchema);
      }
      break;
    }
    case "exact_optional":
    case "optional":
    case "undefinedable": {
      jsonSchema = convertSchema(jsonSchema, valibotSchema.wrapped, config2, context15);
      if (valibotSchema.default !== undefined) {
        jsonSchema.default = getDefault(valibotSchema);
      }
      break;
    }
    case "literal": {
      if (typeof valibotSchema.literal !== "boolean" && typeof valibotSchema.literal !== "number" && typeof valibotSchema.literal !== "string") {
        handleError('The value of the "literal" schema is not JSON compatible.', config2);
      }
      jsonSchema.const = valibotSchema.literal;
      break;
    }
    case "enum": {
      jsonSchema.enum = valibotSchema.options;
      break;
    }
    case "picklist": {
      if (valibotSchema.options.some((option11) => typeof option11 !== "number" && typeof option11 !== "string")) {
        handleError('An option of the "picklist" schema is not JSON compatible.', config2);
      }
      jsonSchema.enum = valibotSchema.options;
      break;
    }
    case "union":
    case "variant": {
      jsonSchema.anyOf = valibotSchema.options.map((option11) => convertSchema({}, option11, config2, context15));
      break;
    }
    case "intersect": {
      jsonSchema.allOf = valibotSchema.options.map((option11) => convertSchema({}, option11, config2, context15));
      break;
    }
    case "lazy": {
      let wrappedValibotSchema = context15.getterMap.get(valibotSchema.getter);
      if (!wrappedValibotSchema) {
        wrappedValibotSchema = valibotSchema.getter(undefined);
        context15.getterMap.set(valibotSchema.getter, wrappedValibotSchema);
      }
      let referenceId2 = context15.referenceMap.get(wrappedValibotSchema);
      if (!referenceId2) {
        referenceId2 = `${refCount++}`;
        context15.referenceMap.set(wrappedValibotSchema, referenceId2);
        context15.definitions[referenceId2] = convertSchema({}, wrappedValibotSchema, config2, context15);
      }
      jsonSchema.$ref = `#/$defs/${referenceId2}`;
      break;
    }
    default: {
      handleError(`The "${valibotSchema.type}" schema cannot be converted to JSON Schema.`, config2);
    }
  }
  return jsonSchema;
}
function toJsonSchema(schema, config2) {
  const context15 = {
    definitions: {},
    referenceMap: /* @__PURE__ */ new Map,
    getterMap: /* @__PURE__ */ new Map
  };
  if (config2?.definitions) {
    for (const key in config2.definitions) {
      context15.referenceMap.set(config2.definitions[key], key);
    }
    for (const key in config2.definitions) {
      context15.definitions[key] = convertSchema({}, config2.definitions[key], config2, context15);
    }
  }
  const jsonSchema = convertSchema({ $schema: "http://json-schema.org/draft-07/schema#" }, schema, config2, context15);
  if (context15.referenceMap.size) {
    jsonSchema.$defs = context15.definitions;
  }
  return jsonSchema;
}
var refCount = 0;
var init_dist2 = __esm(() => {
  init_dist();
});

// node_modules/xsschema/dist/valibot-C0gMwA8F.js
var exports_valibot_C0gMwA8F = {};
__export(exports_valibot_C0gMwA8F, {
  getToJsonSchemaFn: () => getToJsonSchemaFn3
});
var getToJsonSchemaFn3 = async () => {
  const { toJsonSchema: toJsonSchema2 } = await tryImport(Promise.resolve().then(() => (init_dist2(), exports_dist)), "@valibot/to-json-schema");
  return (schema) => toJsonSchema2(schema);
};
var init_valibot_C0gMwA8F = __esm(() => {
  init_index_DtiOmYCK();
});

// node_modules/zod-to-json-schema/dist/esm/Options.js
var ignoreOverride, jsonDescription = (jsonSchema, def) => {
  if (def.description) {
    try {
      return {
        ...jsonSchema,
        ...JSON.parse(def.description)
      };
    } catch {}
  }
  return jsonSchema;
}, defaultOptions, getDefaultOptions = (options) => typeof options === "string" ? {
  ...defaultOptions,
  name: options
} : {
  ...defaultOptions,
  ...options
};
var init_Options = __esm(() => {
  ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
  defaultOptions = {
    name: undefined,
    $refStrategy: "root",
    basePath: ["#"],
    effectStrategy: "input",
    pipeStrategy: "all",
    dateStrategy: "format:date-time",
    mapStrategy: "entries",
    removeAdditionalStrategy: "passthrough",
    allowedAdditionalProperties: true,
    rejectedAdditionalProperties: false,
    definitionPath: "definitions",
    target: "jsonSchema7",
    strictUnions: false,
    definitions: {},
    errorMessages: false,
    markdownDescription: false,
    patternStrategy: "escape",
    applyRegexFlags: false,
    emailStrategy: "format:email",
    base64Strategy: "contentEncoding:base64",
    nameStrategy: "ref"
  };
});

// node_modules/zod-to-json-schema/dist/esm/Refs.js
var getRefs = (options) => {
  const _options = getDefaultOptions(options);
  const currentPath = _options.name !== undefined ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;
  return {
    ..._options,
    currentPath,
    propertyPath: undefined,
    seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [
      def._def,
      {
        def: def._def,
        path: [..._options.basePath, _options.definitionPath, name],
        jsonSchema: undefined
      }
    ]))
  };
};
var init_Refs = __esm(() => {
  init_Options();
});

// node_modules/zod-to-json-schema/dist/esm/errorMessages.js
function addErrorMessage(res, key, errorMessage, refs) {
  if (!refs?.errorMessages)
    return;
  if (errorMessage) {
    res.errorMessage = {
      ...res.errorMessage,
      [key]: errorMessage
    };
  }
}
function setResponseValueAndErrors(res, key, value10, errorMessage, refs) {
  res[key] = value10;
  addErrorMessage(res, key, errorMessage, refs);
}

// node_modules/zod-to-json-schema/dist/esm/parsers/any.js
function parseAnyDef() {
  return {};
}

// node_modules/zod-to-json-schema/dist/esm/parsers/array.js
function parseArrayDef(def, refs) {
  const res = {
    type: "array"
  };
  if (def.type?._def && def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) {
    res.items = parseDef(def.type._def, {
      ...refs,
      currentPath: [...refs.currentPath, "items"]
    });
  }
  if (def.minLength) {
    setResponseValueAndErrors(res, "minItems", def.minLength.value, def.minLength.message, refs);
  }
  if (def.maxLength) {
    setResponseValueAndErrors(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
  }
  if (def.exactLength) {
    setResponseValueAndErrors(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
    setResponseValueAndErrors(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
  }
  return res;
}
var init_array2 = __esm(() => {
  init_lib();
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js
function parseBigintDef(def, refs) {
  const res = {
    type: "integer",
    format: "int64"
  };
  if (!def.checks)
    return res;
  for (const check6 of def.checks) {
    switch (check6.kind) {
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check6.inclusive) {
            setResponseValueAndErrors(res, "minimum", check6.value, check6.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check6.value, check6.message, refs);
          }
        } else {
          if (!check6.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check6.value, check6.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check6.inclusive) {
            setResponseValueAndErrors(res, "maximum", check6.value, check6.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check6.value, check6.message, refs);
          }
        } else {
          if (!check6.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check6.value, check6.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check6.value, check6.message, refs);
        break;
    }
  }
  return res;
}
var init_bigint = () => {};

// node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js
function parseBooleanDef() {
  return {
    type: "boolean"
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/branded.js
function parseBrandedDef(_def, refs) {
  return parseDef(_def.type._def, refs);
}
var init_branded = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/catch.js
var parseCatchDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};
var init_catch = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/date.js
function parseDateDef(def, refs, overrideDateStrategy) {
  const strategy = overrideDateStrategy ?? refs.dateStrategy;
  if (Array.isArray(strategy)) {
    return {
      anyOf: strategy.map((item, i2) => parseDateDef(def, refs, item))
    };
  }
  switch (strategy) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return integerDateParser(def, refs);
  }
}
var integerDateParser = (def, refs) => {
  const res = {
    type: "integer",
    format: "unix-time"
  };
  if (refs.target === "openApi3") {
    return res;
  }
  for (const check6 of def.checks) {
    switch (check6.kind) {
      case "min":
        setResponseValueAndErrors(res, "minimum", check6.value, check6.message, refs);
        break;
      case "max":
        setResponseValueAndErrors(res, "maximum", check6.value, check6.message, refs);
        break;
    }
  }
  return res;
};
var init_date2 = () => {};

// node_modules/zod-to-json-schema/dist/esm/parsers/default.js
function parseDefaultDef(_def, refs) {
  return {
    ...parseDef(_def.innerType._def, refs),
    default: _def.defaultValue()
  };
}
var init_default = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/effects.js
function parseEffectsDef(_def, refs) {
  return refs.effectStrategy === "input" ? parseDef(_def.schema._def, refs) : {};
}
var init_effects = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/enum.js
function parseEnumDef(def) {
  return {
    type: "string",
    enum: Array.from(def.values)
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js
function parseIntersectionDef(def, refs) {
  const allOf = [
    parseDef(def.left._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "0"]
    }),
    parseDef(def.right._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "1"]
    })
  ].filter((x2) => !!x2);
  let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : undefined;
  const mergedAllOf = [];
  allOf.forEach((schema) => {
    if (isJsonSchema7AllOfType(schema)) {
      mergedAllOf.push(...schema.allOf);
      if (schema.unevaluatedProperties === undefined) {
        unevaluatedProperties = undefined;
      }
    } else {
      let nestedSchema = schema;
      if ("additionalProperties" in schema && schema.additionalProperties === false) {
        const { additionalProperties, ...rest } = schema;
        nestedSchema = rest;
      } else {
        unevaluatedProperties = undefined;
      }
      mergedAllOf.push(nestedSchema);
    }
  });
  return mergedAllOf.length ? {
    allOf: mergedAllOf,
    ...unevaluatedProperties
  } : undefined;
}
var isJsonSchema7AllOfType = (type3) => {
  if ("type" in type3 && type3.type === "string")
    return false;
  return "allOf" in type3;
};
var init_intersection = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/literal.js
function parseLiteralDef(def, refs) {
  const parsedType = typeof def.value;
  if (parsedType !== "bigint" && parsedType !== "number" && parsedType !== "boolean" && parsedType !== "string") {
    return {
      type: Array.isArray(def.value) ? "array" : "object"
    };
  }
  if (refs.target === "openApi3") {
    return {
      type: parsedType === "bigint" ? "integer" : parsedType,
      enum: [def.value]
    };
  }
  return {
    type: parsedType === "bigint" ? "integer" : parsedType,
    const: def.value
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/string.js
function parseStringDef(def, refs) {
  const res = {
    type: "string"
  };
  if (def.checks) {
    for (const check6 of def.checks) {
      switch (check6.kind) {
        case "min":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check6.value) : check6.value, check6.message, refs);
          break;
        case "max":
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check6.value) : check6.value, check6.message, refs);
          break;
        case "email":
          switch (refs.emailStrategy) {
            case "format:email":
              addFormat(res, "email", check6.message, refs);
              break;
            case "format:idn-email":
              addFormat(res, "idn-email", check6.message, refs);
              break;
            case "pattern:zod":
              addPattern(res, zodPatterns.email, check6.message, refs);
              break;
          }
          break;
        case "url":
          addFormat(res, "uri", check6.message, refs);
          break;
        case "uuid":
          addFormat(res, "uuid", check6.message, refs);
          break;
        case "regex":
          addPattern(res, check6.regex, check6.message, refs);
          break;
        case "cuid":
          addPattern(res, zodPatterns.cuid, check6.message, refs);
          break;
        case "cuid2":
          addPattern(res, zodPatterns.cuid2, check6.message, refs);
          break;
        case "startsWith":
          addPattern(res, RegExp(`^${escapeLiteralCheckValue(check6.value, refs)}`), check6.message, refs);
          break;
        case "endsWith":
          addPattern(res, RegExp(`${escapeLiteralCheckValue(check6.value, refs)}$`), check6.message, refs);
          break;
        case "datetime":
          addFormat(res, "date-time", check6.message, refs);
          break;
        case "date":
          addFormat(res, "date", check6.message, refs);
          break;
        case "time":
          addFormat(res, "time", check6.message, refs);
          break;
        case "duration":
          addFormat(res, "duration", check6.message, refs);
          break;
        case "length":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check6.value) : check6.value, check6.message, refs);
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check6.value) : check6.value, check6.message, refs);
          break;
        case "includes": {
          addPattern(res, RegExp(escapeLiteralCheckValue(check6.value, refs)), check6.message, refs);
          break;
        }
        case "ip": {
          if (check6.version !== "v6") {
            addFormat(res, "ipv4", check6.message, refs);
          }
          if (check6.version !== "v4") {
            addFormat(res, "ipv6", check6.message, refs);
          }
          break;
        }
        case "base64url":
          addPattern(res, zodPatterns.base64url, check6.message, refs);
          break;
        case "jwt":
          addPattern(res, zodPatterns.jwt, check6.message, refs);
          break;
        case "cidr": {
          if (check6.version !== "v6") {
            addPattern(res, zodPatterns.ipv4Cidr, check6.message, refs);
          }
          if (check6.version !== "v4") {
            addPattern(res, zodPatterns.ipv6Cidr, check6.message, refs);
          }
          break;
        }
        case "emoji":
          addPattern(res, zodPatterns.emoji(), check6.message, refs);
          break;
        case "ulid": {
          addPattern(res, zodPatterns.ulid, check6.message, refs);
          break;
        }
        case "base64": {
          switch (refs.base64Strategy) {
            case "format:binary": {
              addFormat(res, "binary", check6.message, refs);
              break;
            }
            case "contentEncoding:base64": {
              setResponseValueAndErrors(res, "contentEncoding", "base64", check6.message, refs);
              break;
            }
            case "pattern:zod": {
              addPattern(res, zodPatterns.base64, check6.message, refs);
              break;
            }
          }
          break;
        }
        case "nanoid": {
          addPattern(res, zodPatterns.nanoid, check6.message, refs);
        }
        case "toLowerCase":
        case "toUpperCase":
        case "trim":
          break;
        default:
          ((_) => {})(check6);
      }
    }
  }
  return res;
}
function escapeLiteralCheckValue(literal3, refs) {
  return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(literal3) : literal3;
}
function escapeNonAlphaNumeric(source) {
  let result2 = "";
  for (let i2 = 0;i2 < source.length; i2++) {
    if (!ALPHA_NUMERIC.has(source[i2])) {
      result2 += "\\";
    }
    result2 += source[i2];
  }
  return result2;
}
function addFormat(schema, value10, message, refs) {
  if (schema.format || schema.anyOf?.some((x2) => x2.format)) {
    if (!schema.anyOf) {
      schema.anyOf = [];
    }
    if (schema.format) {
      schema.anyOf.push({
        format: schema.format,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { format: schema.errorMessage.format }
        }
      });
      delete schema.format;
      if (schema.errorMessage) {
        delete schema.errorMessage.format;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.anyOf.push({
      format: value10,
      ...message && refs.errorMessages && { errorMessage: { format: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "format", value10, message, refs);
  }
}
function addPattern(schema, regex, message, refs) {
  if (schema.pattern || schema.allOf?.some((x2) => x2.pattern)) {
    if (!schema.allOf) {
      schema.allOf = [];
    }
    if (schema.pattern) {
      schema.allOf.push({
        pattern: schema.pattern,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { pattern: schema.errorMessage.pattern }
        }
      });
      delete schema.pattern;
      if (schema.errorMessage) {
        delete schema.errorMessage.pattern;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.allOf.push({
      pattern: stringifyRegExpWithFlags(regex, refs),
      ...message && refs.errorMessages && { errorMessage: { pattern: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "pattern", stringifyRegExpWithFlags(regex, refs), message, refs);
  }
}
function stringifyRegExpWithFlags(regex, refs) {
  if (!refs.applyRegexFlags || !regex.flags) {
    return regex.source;
  }
  const flags = {
    i: regex.flags.includes("i"),
    m: regex.flags.includes("m"),
    s: regex.flags.includes("s")
  };
  const source = flags.i ? regex.source.toLowerCase() : regex.source;
  let pattern2 = "";
  let isEscaped = false;
  let inCharGroup = false;
  let inCharRange = false;
  for (let i2 = 0;i2 < source.length; i2++) {
    if (isEscaped) {
      pattern2 += source[i2];
      isEscaped = false;
      continue;
    }
    if (flags.i) {
      if (inCharGroup) {
        if (source[i2].match(/[a-z]/)) {
          if (inCharRange) {
            pattern2 += source[i2];
            pattern2 += `${source[i2 - 2]}-${source[i2]}`.toUpperCase();
            inCharRange = false;
          } else if (source[i2 + 1] === "-" && source[i2 + 2]?.match(/[a-z]/)) {
            pattern2 += source[i2];
            inCharRange = true;
          } else {
            pattern2 += `${source[i2]}${source[i2].toUpperCase()}`;
          }
          continue;
        }
      } else if (source[i2].match(/[a-z]/)) {
        pattern2 += `[${source[i2]}${source[i2].toUpperCase()}]`;
        continue;
      }
    }
    if (flags.m) {
      if (source[i2] === "^") {
        pattern2 += `(^|(?<=[\r
]))`;
        continue;
      } else if (source[i2] === "$") {
        pattern2 += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (flags.s && source[i2] === ".") {
      pattern2 += inCharGroup ? `${source[i2]}\r
` : `[${source[i2]}\r
]`;
      continue;
    }
    pattern2 += source[i2];
    if (source[i2] === "\\") {
      isEscaped = true;
    } else if (inCharGroup && source[i2] === "]") {
      inCharGroup = false;
    } else if (!inCharGroup && source[i2] === "[") {
      inCharGroup = true;
    }
  }
  try {
    new RegExp(pattern2);
  } catch {
    console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
    return regex.source;
  }
  return pattern2;
}
var emojiRegex2 = undefined, zodPatterns, ALPHA_NUMERIC;
var init_string2 = __esm(() => {
  zodPatterns = {
    cuid: /^[cC][^\s-]{8,}$/,
    cuid2: /^[0-9a-z]+$/,
    ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
    email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
    emoji: () => {
      if (emojiRegex2 === undefined) {
        emojiRegex2 = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
      }
      return emojiRegex2;
    },
    uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
    ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
    ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
    ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
    ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
    base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
    base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
    nanoid: /^[a-zA-Z0-9_-]{21}$/,
    jwt: /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/
  };
  ALPHA_NUMERIC = new Set("ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789");
});

// node_modules/zod-to-json-schema/dist/esm/parsers/record.js
function parseRecordDef(def, refs) {
  if (refs.target === "openAi") {
    console.warn("Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.");
  }
  if (refs.target === "openApi3" && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      type: "object",
      required: def.keyType._def.values,
      properties: def.keyType._def.values.reduce((acc, key) => ({
        ...acc,
        [key]: parseDef(def.valueType._def, {
          ...refs,
          currentPath: [...refs.currentPath, "properties", key]
        }) ?? {}
      }), {}),
      additionalProperties: refs.rejectedAdditionalProperties
    };
  }
  const schema = {
    type: "object",
    additionalProperties: parseDef(def.valueType._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? refs.allowedAdditionalProperties
  };
  if (refs.target === "openApi3") {
    return schema;
  }
  if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {
    const { type: type3, ...keyType } = parseStringDef(def.keyType._def, refs);
    return {
      ...schema,
      propertyNames: keyType
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      ...schema,
      propertyNames: {
        enum: def.keyType._def.values
      }
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.type._def.checks?.length) {
    const { type: type3, ...keyType } = parseBrandedDef(def.keyType._def, refs);
    return {
      ...schema,
      propertyNames: keyType
    };
  }
  return schema;
}
var init_record2 = __esm(() => {
  init_lib();
  init_parseDef();
  init_string2();
  init_branded();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/map.js
function parseMapDef(def, refs) {
  if (refs.mapStrategy === "record") {
    return parseRecordDef(def, refs);
  }
  const keys15 = parseDef(def.keyType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "0"]
  }) || {};
  const values15 = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [keys15, values15],
      minItems: 2,
      maxItems: 2
    }
  };
}
var init_map = __esm(() => {
  init_parseDef();
  init_record2();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js
function parseNativeEnumDef(def) {
  const object2 = def.values;
  const actualKeys = Object.keys(def.values).filter((key) => {
    return typeof object2[object2[key]] !== "number";
  });
  const actualValues = actualKeys.map((key) => object2[key]);
  const parsedTypes = Array.from(new Set(actualValues.map((values15) => typeof values15)));
  return {
    type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: actualValues
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/never.js
function parseNeverDef() {
  return {
    not: {}
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/null.js
function parseNullDef(refs) {
  return refs.target === "openApi3" ? {
    enum: ["null"],
    nullable: true
  } : {
    type: "null"
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/union.js
function parseUnionDef(def, refs) {
  if (refs.target === "openApi3")
    return asAnyOf(def, refs);
  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
  if (options.every((x2) => (x2._def.typeName in primitiveMappings) && (!x2._def.checks || !x2._def.checks.length))) {
    const types = options.reduce((types2, x2) => {
      const type3 = primitiveMappings[x2._def.typeName];
      return type3 && !types2.includes(type3) ? [...types2, type3] : types2;
    }, []);
    return {
      type: types.length > 1 ? types : types[0]
    };
  } else if (options.every((x2) => x2._def.typeName === "ZodLiteral" && !x2.description)) {
    const types = options.reduce((acc, x2) => {
      const type3 = typeof x2._def.value;
      switch (type3) {
        case "string":
        case "number":
        case "boolean":
          return [...acc, type3];
        case "bigint":
          return [...acc, "integer"];
        case "object":
          if (x2._def.value === null)
            return [...acc, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return acc;
      }
    }, []);
    if (types.length === options.length) {
      const uniqueTypes = types.filter((x2, i2, a) => a.indexOf(x2) === i2);
      return {
        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
        enum: options.reduce((acc, x2) => {
          return acc.includes(x2._def.value) ? acc : [...acc, x2._def.value];
        }, [])
      };
    }
  } else if (options.every((x2) => x2._def.typeName === "ZodEnum")) {
    return {
      type: "string",
      enum: options.reduce((acc, x2) => [
        ...acc,
        ...x2._def.values.filter((x3) => !acc.includes(x3))
      ], [])
    };
  }
  return asAnyOf(def, refs);
}
var primitiveMappings, asAnyOf = (def, refs) => {
  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x2, i2) => parseDef(x2._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", `${i2}`]
  })).filter((x2) => !!x2 && (!refs.strictUnions || typeof x2 === "object" && Object.keys(x2).length > 0));
  return anyOf.length ? { anyOf } : undefined;
};
var init_union = __esm(() => {
  init_parseDef();
  primitiveMappings = {
    ZodString: "string",
    ZodNumber: "number",
    ZodBigInt: "integer",
    ZodBoolean: "boolean",
    ZodNull: "null"
  };
});

// node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js
function parseNullableDef(def, refs) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
    if (refs.target === "openApi3") {
      return {
        type: primitiveMappings[def.innerType._def.typeName],
        nullable: true
      };
    }
    return {
      type: [
        primitiveMappings[def.innerType._def.typeName],
        "null"
      ]
    };
  }
  if (refs.target === "openApi3") {
    const base2 = parseDef(def.innerType._def, {
      ...refs,
      currentPath: [...refs.currentPath]
    });
    if (base2 && "$ref" in base2)
      return { allOf: [base2], nullable: true };
    return base2 && { ...base2, nullable: true };
  }
  const base = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "0"]
  });
  return base && { anyOf: [base, { type: "null" }] };
}
var init_nullable = __esm(() => {
  init_parseDef();
  init_union();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/number.js
function parseNumberDef(def, refs) {
  const res = {
    type: "number"
  };
  if (!def.checks)
    return res;
  for (const check6 of def.checks) {
    switch (check6.kind) {
      case "int":
        res.type = "integer";
        addErrorMessage(res, "type", check6.message, refs);
        break;
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check6.inclusive) {
            setResponseValueAndErrors(res, "minimum", check6.value, check6.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check6.value, check6.message, refs);
          }
        } else {
          if (!check6.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check6.value, check6.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check6.inclusive) {
            setResponseValueAndErrors(res, "maximum", check6.value, check6.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check6.value, check6.message, refs);
          }
        } else {
          if (!check6.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check6.value, check6.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check6.value, check6.message, refs);
        break;
    }
  }
  return res;
}
var init_number = () => {};

// node_modules/zod-to-json-schema/dist/esm/parsers/object.js
function parseObjectDef(def, refs) {
  const forceOptionalIntoNullable = refs.target === "openAi";
  const result2 = {
    type: "object",
    properties: {}
  };
  const required3 = [];
  const shape = def.shape();
  for (const propName in shape) {
    let propDef = shape[propName];
    if (propDef === undefined || propDef._def === undefined) {
      continue;
    }
    let propOptional = safeIsOptional(propDef);
    if (propOptional && forceOptionalIntoNullable) {
      if (propDef instanceof ZodOptional) {
        propDef = propDef._def.innerType;
      }
      if (!propDef.isNullable()) {
        propDef = propDef.nullable();
      }
      propOptional = false;
    }
    const parsedDef = parseDef(propDef._def, {
      ...refs,
      currentPath: [...refs.currentPath, "properties", propName],
      propertyPath: [...refs.currentPath, "properties", propName]
    });
    if (parsedDef === undefined) {
      continue;
    }
    result2.properties[propName] = parsedDef;
    if (!propOptional) {
      required3.push(propName);
    }
  }
  if (required3.length) {
    result2.required = required3;
  }
  const additionalProperties = decideAdditionalProperties(def, refs);
  if (additionalProperties !== undefined) {
    result2.additionalProperties = additionalProperties;
  }
  return result2;
}
function decideAdditionalProperties(def, refs) {
  if (def.catchall._def.typeName !== "ZodNever") {
    return parseDef(def.catchall._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    });
  }
  switch (def.unknownKeys) {
    case "passthrough":
      return refs.allowedAdditionalProperties;
    case "strict":
      return refs.rejectedAdditionalProperties;
    case "strip":
      return refs.removeAdditionalStrategy === "strict" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;
  }
}
function safeIsOptional(schema) {
  try {
    return schema.isOptional();
  } catch {
    return true;
  }
}
var init_object2 = __esm(() => {
  init_lib();
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/optional.js
var parseOptionalDef = (def, refs) => {
  if (refs.currentPath.toString() === refs.propertyPath?.toString()) {
    return parseDef(def.innerType._def, refs);
  }
  const innerSchema = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "1"]
  });
  return innerSchema ? {
    anyOf: [
      {
        not: {}
      },
      innerSchema
    ]
  } : {};
};
var init_optional = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js
var parsePipelineDef = (def, refs) => {
  if (refs.pipeStrategy === "input") {
    return parseDef(def.in._def, refs);
  } else if (refs.pipeStrategy === "output") {
    return parseDef(def.out._def, refs);
  }
  const a = parseDef(def.in._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", "0"]
  });
  const b = parseDef(def.out._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", a ? "1" : "0"]
  });
  return {
    allOf: [a, b].filter((x2) => x2 !== undefined)
  };
};
var init_pipeline = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/promise.js
function parsePromiseDef(def, refs) {
  return parseDef(def.type._def, refs);
}
var init_promise = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/set.js
function parseSetDef(def, refs) {
  const items = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items"]
  });
  const schema = {
    type: "array",
    uniqueItems: true,
    items
  };
  if (def.minSize) {
    setResponseValueAndErrors(schema, "minItems", def.minSize.value, def.minSize.message, refs);
  }
  if (def.maxSize) {
    setResponseValueAndErrors(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
  }
  return schema;
}
var init_set = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js
function parseTupleDef(def, refs) {
  if (def.rest) {
    return {
      type: "array",
      minItems: def.items.length,
      items: def.items.map((x2, i2) => parseDef(x2._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i2}`]
      })).reduce((acc, x2) => x2 === undefined ? acc : [...acc, x2], []),
      additionalItems: parseDef(def.rest._def, {
        ...refs,
        currentPath: [...refs.currentPath, "additionalItems"]
      })
    };
  } else {
    return {
      type: "array",
      minItems: def.items.length,
      maxItems: def.items.length,
      items: def.items.map((x2, i2) => parseDef(x2._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i2}`]
      })).reduce((acc, x2) => x2 === undefined ? acc : [...acc, x2], [])
    };
  }
}
var init_tuple2 = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js
function parseUndefinedDef() {
  return {
    not: {}
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js
function parseUnknownDef() {
  return {};
}

// node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js
var parseReadonlyDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};
var init_readonly = __esm(() => {
  init_parseDef();
});

// node_modules/zod-to-json-schema/dist/esm/selectParser.js
var selectParser = (def, typeName, refs) => {
  switch (typeName) {
    case ZodFirstPartyTypeKind.ZodString:
      return parseStringDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNumber:
      return parseNumberDef(def, refs);
    case ZodFirstPartyTypeKind.ZodObject:
      return parseObjectDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBigInt:
      return parseBigintDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBoolean:
      return parseBooleanDef();
    case ZodFirstPartyTypeKind.ZodDate:
      return parseDateDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUndefined:
      return parseUndefinedDef();
    case ZodFirstPartyTypeKind.ZodNull:
      return parseNullDef(refs);
    case ZodFirstPartyTypeKind.ZodArray:
      return parseArrayDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUnion:
    case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
      return parseUnionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodIntersection:
      return parseIntersectionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodTuple:
      return parseTupleDef(def, refs);
    case ZodFirstPartyTypeKind.ZodRecord:
      return parseRecordDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLiteral:
      return parseLiteralDef(def, refs);
    case ZodFirstPartyTypeKind.ZodEnum:
      return parseEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNativeEnum:
      return parseNativeEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNullable:
      return parseNullableDef(def, refs);
    case ZodFirstPartyTypeKind.ZodOptional:
      return parseOptionalDef(def, refs);
    case ZodFirstPartyTypeKind.ZodMap:
      return parseMapDef(def, refs);
    case ZodFirstPartyTypeKind.ZodSet:
      return parseSetDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLazy:
      return () => def.getter()._def;
    case ZodFirstPartyTypeKind.ZodPromise:
      return parsePromiseDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNaN:
    case ZodFirstPartyTypeKind.ZodNever:
      return parseNeverDef();
    case ZodFirstPartyTypeKind.ZodEffects:
      return parseEffectsDef(def, refs);
    case ZodFirstPartyTypeKind.ZodAny:
      return parseAnyDef();
    case ZodFirstPartyTypeKind.ZodUnknown:
      return parseUnknownDef();
    case ZodFirstPartyTypeKind.ZodDefault:
      return parseDefaultDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBranded:
      return parseBrandedDef(def, refs);
    case ZodFirstPartyTypeKind.ZodReadonly:
      return parseReadonlyDef(def, refs);
    case ZodFirstPartyTypeKind.ZodCatch:
      return parseCatchDef(def, refs);
    case ZodFirstPartyTypeKind.ZodPipeline:
      return parsePipelineDef(def, refs);
    case ZodFirstPartyTypeKind.ZodFunction:
    case ZodFirstPartyTypeKind.ZodVoid:
    case ZodFirstPartyTypeKind.ZodSymbol:
      return;
    default:
      return ((_) => {
        return;
      })(typeName);
  }
};
var init_selectParser = __esm(() => {
  init_lib();
  init_array2();
  init_bigint();
  init_branded();
  init_catch();
  init_date2();
  init_default();
  init_effects();
  init_intersection();
  init_map();
  init_nullable();
  init_number();
  init_object2();
  init_optional();
  init_pipeline();
  init_promise();
  init_record2();
  init_set();
  init_string2();
  init_tuple2();
  init_union();
  init_readonly();
});

// node_modules/zod-to-json-schema/dist/esm/parseDef.js
function parseDef(def, refs, forceResolution = false) {
  const seenItem = refs.seen.get(def);
  if (refs.override) {
    const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);
    if (overrideResult !== ignoreOverride) {
      return overrideResult;
    }
  }
  if (seenItem && !forceResolution) {
    const seenSchema = get$ref(seenItem, refs);
    if (seenSchema !== undefined) {
      return seenSchema;
    }
  }
  const newItem = { def, path: refs.currentPath, jsonSchema: undefined };
  refs.seen.set(def, newItem);
  const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);
  const jsonSchema = typeof jsonSchemaOrGetter === "function" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;
  if (jsonSchema) {
    addMeta(def, refs, jsonSchema);
  }
  if (refs.postProcess) {
    const postProcessResult = refs.postProcess(jsonSchema, def, refs);
    newItem.jsonSchema = jsonSchema;
    return postProcessResult;
  }
  newItem.jsonSchema = jsonSchema;
  return jsonSchema;
}
var get$ref = (item, refs) => {
  switch (refs.$refStrategy) {
    case "root":
      return { $ref: item.path.join("/") };
    case "relative":
      return { $ref: getRelativePath(refs.currentPath, item.path) };
    case "none":
    case "seen": {
      if (item.path.length < refs.currentPath.length && item.path.every((value10, index) => refs.currentPath[index] === value10)) {
        console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
        return {};
      }
      return refs.$refStrategy === "seen" ? {} : undefined;
    }
  }
}, getRelativePath = (pathA, pathB) => {
  let i2 = 0;
  for (;i2 < pathA.length && i2 < pathB.length; i2++) {
    if (pathA[i2] !== pathB[i2])
      break;
  }
  return [(pathA.length - i2).toString(), ...pathB.slice(i2)].join("/");
}, addMeta = (def, refs, jsonSchema) => {
  if (def.description) {
    jsonSchema.description = def.description;
    if (refs.markdownDescription) {
      jsonSchema.markdownDescription = def.description;
    }
  }
  return jsonSchema;
};
var init_parseDef = __esm(() => {
  init_Options();
  init_selectParser();
});

// node_modules/zod-to-json-schema/dist/esm/parseTypes.js
var init_parseTypes = () => {};

// node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js
var zodToJsonSchema = (schema, options) => {
  const refs = getRefs(options);
  const definitions = typeof options === "object" && options.definitions ? Object.entries(options.definitions).reduce((acc, [name2, schema2]) => ({
    ...acc,
    [name2]: parseDef(schema2._def, {
      ...refs,
      currentPath: [...refs.basePath, refs.definitionPath, name2]
    }, true) ?? {}
  }), {}) : undefined;
  const name = typeof options === "string" ? options : options?.nameStrategy === "title" ? undefined : options?.name;
  const main = parseDef(schema._def, name === undefined ? refs : {
    ...refs,
    currentPath: [...refs.basePath, refs.definitionPath, name]
  }, false) ?? {};
  const title = typeof options === "object" && options.name !== undefined && options.nameStrategy === "title" ? options.name : undefined;
  if (title !== undefined) {
    main.title = title;
  }
  const combined = name === undefined ? definitions ? {
    ...main,
    [refs.definitionPath]: definitions
  } : main : {
    $ref: [
      ...refs.$refStrategy === "relative" ? [] : refs.basePath,
      refs.definitionPath,
      name
    ].join("/"),
    [refs.definitionPath]: {
      ...definitions,
      [name]: main
    }
  };
  if (refs.target === "jsonSchema7") {
    combined.$schema = "http://json-schema.org/draft-07/schema#";
  } else if (refs.target === "jsonSchema2019-09" || refs.target === "openAi") {
    combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
  }
  if (refs.target === "openAi" && (("anyOf" in combined) || ("oneOf" in combined) || ("allOf" in combined) || ("type" in combined) && Array.isArray(combined.type))) {
    console.warn("Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.");
  }
  return combined;
};
var init_zodToJsonSchema = __esm(() => {
  init_parseDef();
  init_Refs();
});

// node_modules/zod-to-json-schema/dist/esm/index.js
var exports_esm2 = {};
__export(exports_esm2, {
  zodToJsonSchema: () => zodToJsonSchema,
  zodPatterns: () => zodPatterns,
  setResponseValueAndErrors: () => setResponseValueAndErrors,
  selectParser: () => selectParser,
  primitiveMappings: () => primitiveMappings,
  parseUnknownDef: () => parseUnknownDef,
  parseUnionDef: () => parseUnionDef,
  parseUndefinedDef: () => parseUndefinedDef,
  parseTupleDef: () => parseTupleDef,
  parseStringDef: () => parseStringDef,
  parseSetDef: () => parseSetDef,
  parseRecordDef: () => parseRecordDef,
  parseReadonlyDef: () => parseReadonlyDef,
  parsePromiseDef: () => parsePromiseDef,
  parsePipelineDef: () => parsePipelineDef,
  parseOptionalDef: () => parseOptionalDef,
  parseObjectDef: () => parseObjectDef,
  parseNumberDef: () => parseNumberDef,
  parseNullableDef: () => parseNullableDef,
  parseNullDef: () => parseNullDef,
  parseNeverDef: () => parseNeverDef,
  parseNativeEnumDef: () => parseNativeEnumDef,
  parseMapDef: () => parseMapDef,
  parseLiteralDef: () => parseLiteralDef,
  parseIntersectionDef: () => parseIntersectionDef,
  parseEnumDef: () => parseEnumDef,
  parseEffectsDef: () => parseEffectsDef,
  parseDefaultDef: () => parseDefaultDef,
  parseDef: () => parseDef,
  parseDateDef: () => parseDateDef,
  parseCatchDef: () => parseCatchDef,
  parseBrandedDef: () => parseBrandedDef,
  parseBooleanDef: () => parseBooleanDef,
  parseBigintDef: () => parseBigintDef,
  parseArrayDef: () => parseArrayDef,
  parseAnyDef: () => parseAnyDef,
  jsonDescription: () => jsonDescription,
  ignoreOverride: () => ignoreOverride,
  getRefs: () => getRefs,
  getDefaultOptions: () => getDefaultOptions,
  defaultOptions: () => defaultOptions,
  default: () => esm_default,
  addErrorMessage: () => addErrorMessage
});
var esm_default;
var init_esm2 = __esm(() => {
  init_Options();
  init_Refs();
  init_parseDef();
  init_parseTypes();
  init_array2();
  init_bigint();
  init_branded();
  init_catch();
  init_date2();
  init_default();
  init_effects();
  init_intersection();
  init_map();
  init_nullable();
  init_number();
  init_object2();
  init_optional();
  init_pipeline();
  init_promise();
  init_readonly();
  init_record2();
  init_set();
  init_string2();
  init_tuple2();
  init_union();
  init_selectParser();
  init_zodToJsonSchema();
  init_zodToJsonSchema();
  esm_default = zodToJsonSchema;
});

// node_modules/xsschema/dist/zod-DvRxrLZA.js
var exports_zod_DvRxrLZA = {};
__export(exports_zod_DvRxrLZA, {
  getToJsonSchemaFn: () => getToJsonSchemaFn4
});
var getToJsonSchemaFn4 = async () => {
  const { zodToJsonSchema: zodToJsonSchema3 } = await tryImport(Promise.resolve().then(() => (init_esm2(), exports_esm2)), "zod-to-json-schema");
  return (schema) => zodToJsonSchema3(schema);
};
var init_zod_DvRxrLZA = __esm(() => {
  init_index_DtiOmYCK();
});

// node_modules/xsschema/dist/index-DtiOmYCK.js
var tryImport = async (result2, name) => {
  try {
    return await result2;
  } catch {
    throw new Error(`xsschema: Missing dependencies "${name}".`);
  }
}, getToJsonSchemaFn5 = async (vendor) => {
  switch (vendor) {
    case "arktype":
      return Promise.resolve().then(() => (init_arktype_C_GObzDh(), exports_arktype_C_GObzDh)).then(async ({ getToJsonSchemaFn: getToJsonSchemaFn22 }) => getToJsonSchemaFn22());
    case "effect":
      return Promise.resolve().then(() => (init_effect_CE0Pj37O(), exports_effect_CE0Pj37O)).then(async ({ getToJsonSchemaFn: getToJsonSchemaFn22 }) => getToJsonSchemaFn22());
    case "valibot":
      return Promise.resolve().then(() => (init_valibot_C0gMwA8F(), exports_valibot_C0gMwA8F)).then(async ({ getToJsonSchemaFn: getToJsonSchemaFn22 }) => getToJsonSchemaFn22());
    case "zod":
      return Promise.resolve().then(() => (init_zod_DvRxrLZA(), exports_zod_DvRxrLZA)).then(async ({ getToJsonSchemaFn: getToJsonSchemaFn22 }) => getToJsonSchemaFn22());
    default:
      throw new Error(`xsschema: Unsupported schema vendor "${vendor}"`);
  }
}, toJsonSchema2 = async (schema) => getToJsonSchemaFn5(schema["~standard"].vendor).then(async (toJsonSchema22) => toJsonSchema22(schema));
var init_index_DtiOmYCK = () => {};

// node_modules/@modelcontextprotocol/sdk/dist/esm/types.js
init_lib();
var LATEST_PROTOCOL_VERSION = "2025-03-26";
var SUPPORTED_PROTOCOL_VERSIONS = [
  LATEST_PROTOCOL_VERSION,
  "2024-11-05",
  "2024-10-07"
];
var JSONRPC_VERSION = "2.0";
var ProgressTokenSchema = z.union([z.string(), z.number().int()]);
var CursorSchema = z.string();
var RequestMetaSchema = z.object({
  progressToken: z.optional(ProgressTokenSchema)
}).passthrough();
var BaseRequestParamsSchema = z.object({
  _meta: z.optional(RequestMetaSchema)
}).passthrough();
var RequestSchema = z.object({
  method: z.string(),
  params: z.optional(BaseRequestParamsSchema)
});
var BaseNotificationParamsSchema = z.object({
  _meta: z.optional(z.object({}).passthrough())
}).passthrough();
var NotificationSchema = z.object({
  method: z.string(),
  params: z.optional(BaseNotificationParamsSchema)
});
var ResultSchema = z.object({
  _meta: z.optional(z.object({}).passthrough())
}).passthrough();
var RequestIdSchema = z.union([z.string(), z.number().int()]);
var JSONRPCRequestSchema = z.object({
  jsonrpc: z.literal(JSONRPC_VERSION),
  id: RequestIdSchema
}).merge(RequestSchema).strict();
var isJSONRPCRequest = (value) => JSONRPCRequestSchema.safeParse(value).success;
var JSONRPCNotificationSchema = z.object({
  jsonrpc: z.literal(JSONRPC_VERSION)
}).merge(NotificationSchema).strict();
var isJSONRPCNotification = (value) => JSONRPCNotificationSchema.safeParse(value).success;
var JSONRPCResponseSchema = z.object({
  jsonrpc: z.literal(JSONRPC_VERSION),
  id: RequestIdSchema,
  result: ResultSchema
}).strict();
var isJSONRPCResponse = (value) => JSONRPCResponseSchema.safeParse(value).success;
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2[ErrorCode2["ConnectionClosed"] = -32000] = "ConnectionClosed";
  ErrorCode2[ErrorCode2["RequestTimeout"] = -32001] = "RequestTimeout";
  ErrorCode2[ErrorCode2["ParseError"] = -32700] = "ParseError";
  ErrorCode2[ErrorCode2["InvalidRequest"] = -32600] = "InvalidRequest";
  ErrorCode2[ErrorCode2["MethodNotFound"] = -32601] = "MethodNotFound";
  ErrorCode2[ErrorCode2["InvalidParams"] = -32602] = "InvalidParams";
  ErrorCode2[ErrorCode2["InternalError"] = -32603] = "InternalError";
})(ErrorCode || (ErrorCode = {}));
var JSONRPCErrorSchema = z.object({
  jsonrpc: z.literal(JSONRPC_VERSION),
  id: RequestIdSchema,
  error: z.object({
    code: z.number().int(),
    message: z.string(),
    data: z.optional(z.unknown())
  })
}).strict();
var isJSONRPCError = (value) => JSONRPCErrorSchema.safeParse(value).success;
var JSONRPCMessageSchema = z.union([
  JSONRPCRequestSchema,
  JSONRPCNotificationSchema,
  JSONRPCResponseSchema,
  JSONRPCErrorSchema
]);
var EmptyResultSchema = ResultSchema.strict();
var CancelledNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/cancelled"),
  params: BaseNotificationParamsSchema.extend({
    requestId: RequestIdSchema,
    reason: z.string().optional()
  })
});
var ImplementationSchema = z.object({
  name: z.string(),
  version: z.string()
}).passthrough();
var ClientCapabilitiesSchema = z.object({
  experimental: z.optional(z.object({}).passthrough()),
  sampling: z.optional(z.object({}).passthrough()),
  roots: z.optional(z.object({
    listChanged: z.optional(z.boolean())
  }).passthrough())
}).passthrough();
var InitializeRequestSchema = RequestSchema.extend({
  method: z.literal("initialize"),
  params: BaseRequestParamsSchema.extend({
    protocolVersion: z.string(),
    capabilities: ClientCapabilitiesSchema,
    clientInfo: ImplementationSchema
  })
});
var isInitializeRequest = (value) => InitializeRequestSchema.safeParse(value).success;
var ServerCapabilitiesSchema = z.object({
  experimental: z.optional(z.object({}).passthrough()),
  logging: z.optional(z.object({}).passthrough()),
  completions: z.optional(z.object({}).passthrough()),
  prompts: z.optional(z.object({
    listChanged: z.optional(z.boolean())
  }).passthrough()),
  resources: z.optional(z.object({
    subscribe: z.optional(z.boolean()),
    listChanged: z.optional(z.boolean())
  }).passthrough()),
  tools: z.optional(z.object({
    listChanged: z.optional(z.boolean())
  }).passthrough())
}).passthrough();
var InitializeResultSchema = ResultSchema.extend({
  protocolVersion: z.string(),
  capabilities: ServerCapabilitiesSchema,
  serverInfo: ImplementationSchema,
  instructions: z.optional(z.string())
});
var InitializedNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/initialized")
});
var PingRequestSchema = RequestSchema.extend({
  method: z.literal("ping")
});
var ProgressSchema = z.object({
  progress: z.number(),
  total: z.optional(z.number())
}).passthrough();
var ProgressNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/progress"),
  params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({
    progressToken: ProgressTokenSchema
  })
});
var PaginatedRequestSchema = RequestSchema.extend({
  params: BaseRequestParamsSchema.extend({
    cursor: z.optional(CursorSchema)
  }).optional()
});
var PaginatedResultSchema = ResultSchema.extend({
  nextCursor: z.optional(CursorSchema)
});
var ResourceContentsSchema = z.object({
  uri: z.string(),
  mimeType: z.optional(z.string())
}).passthrough();
var TextResourceContentsSchema = ResourceContentsSchema.extend({
  text: z.string()
});
var BlobResourceContentsSchema = ResourceContentsSchema.extend({
  blob: z.string().base64()
});
var ResourceSchema = z.object({
  uri: z.string(),
  name: z.string(),
  description: z.optional(z.string()),
  mimeType: z.optional(z.string())
}).passthrough();
var ResourceTemplateSchema = z.object({
  uriTemplate: z.string(),
  name: z.string(),
  description: z.optional(z.string()),
  mimeType: z.optional(z.string())
}).passthrough();
var ListResourcesRequestSchema = PaginatedRequestSchema.extend({
  method: z.literal("resources/list")
});
var ListResourcesResultSchema = PaginatedResultSchema.extend({
  resources: z.array(ResourceSchema)
});
var ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({
  method: z.literal("resources/templates/list")
});
var ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({
  resourceTemplates: z.array(ResourceTemplateSchema)
});
var ReadResourceRequestSchema = RequestSchema.extend({
  method: z.literal("resources/read"),
  params: BaseRequestParamsSchema.extend({
    uri: z.string()
  })
});
var ReadResourceResultSchema = ResultSchema.extend({
  contents: z.array(z.union([TextResourceContentsSchema, BlobResourceContentsSchema]))
});
var ResourceListChangedNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/resources/list_changed")
});
var SubscribeRequestSchema = RequestSchema.extend({
  method: z.literal("resources/subscribe"),
  params: BaseRequestParamsSchema.extend({
    uri: z.string()
  })
});
var UnsubscribeRequestSchema = RequestSchema.extend({
  method: z.literal("resources/unsubscribe"),
  params: BaseRequestParamsSchema.extend({
    uri: z.string()
  })
});
var ResourceUpdatedNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/resources/updated"),
  params: BaseNotificationParamsSchema.extend({
    uri: z.string()
  })
});
var PromptArgumentSchema = z.object({
  name: z.string(),
  description: z.optional(z.string()),
  required: z.optional(z.boolean())
}).passthrough();
var PromptSchema = z.object({
  name: z.string(),
  description: z.optional(z.string()),
  arguments: z.optional(z.array(PromptArgumentSchema))
}).passthrough();
var ListPromptsRequestSchema = PaginatedRequestSchema.extend({
  method: z.literal("prompts/list")
});
var ListPromptsResultSchema = PaginatedResultSchema.extend({
  prompts: z.array(PromptSchema)
});
var GetPromptRequestSchema = RequestSchema.extend({
  method: z.literal("prompts/get"),
  params: BaseRequestParamsSchema.extend({
    name: z.string(),
    arguments: z.optional(z.record(z.string()))
  })
});
var TextContentSchema = z.object({
  type: z.literal("text"),
  text: z.string()
}).passthrough();
var ImageContentSchema = z.object({
  type: z.literal("image"),
  data: z.string().base64(),
  mimeType: z.string()
}).passthrough();
var AudioContentSchema = z.object({
  type: z.literal("audio"),
  data: z.string().base64(),
  mimeType: z.string()
}).passthrough();
var EmbeddedResourceSchema = z.object({
  type: z.literal("resource"),
  resource: z.union([TextResourceContentsSchema, BlobResourceContentsSchema])
}).passthrough();
var PromptMessageSchema = z.object({
  role: z.enum(["user", "assistant"]),
  content: z.union([
    TextContentSchema,
    ImageContentSchema,
    AudioContentSchema,
    EmbeddedResourceSchema
  ])
}).passthrough();
var GetPromptResultSchema = ResultSchema.extend({
  description: z.optional(z.string()),
  messages: z.array(PromptMessageSchema)
});
var PromptListChangedNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/prompts/list_changed")
});
var ToolAnnotationsSchema = z.object({
  title: z.optional(z.string()),
  readOnlyHint: z.optional(z.boolean()),
  destructiveHint: z.optional(z.boolean()),
  idempotentHint: z.optional(z.boolean()),
  openWorldHint: z.optional(z.boolean())
}).passthrough();
var ToolSchema = z.object({
  name: z.string(),
  description: z.optional(z.string()),
  inputSchema: z.object({
    type: z.literal("object"),
    properties: z.optional(z.object({}).passthrough())
  }).passthrough(),
  annotations: z.optional(ToolAnnotationsSchema)
}).passthrough();
var ListToolsRequestSchema = PaginatedRequestSchema.extend({
  method: z.literal("tools/list")
});
var ListToolsResultSchema = PaginatedResultSchema.extend({
  tools: z.array(ToolSchema)
});
var CallToolResultSchema = ResultSchema.extend({
  content: z.array(z.union([TextContentSchema, ImageContentSchema, AudioContentSchema, EmbeddedResourceSchema])),
  isError: z.boolean().default(false).optional()
});
var CompatibilityCallToolResultSchema = CallToolResultSchema.or(ResultSchema.extend({
  toolResult: z.unknown()
}));
var CallToolRequestSchema = RequestSchema.extend({
  method: z.literal("tools/call"),
  params: BaseRequestParamsSchema.extend({
    name: z.string(),
    arguments: z.optional(z.record(z.unknown()))
  })
});
var ToolListChangedNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/tools/list_changed")
});
var LoggingLevelSchema = z.enum([
  "debug",
  "info",
  "notice",
  "warning",
  "error",
  "critical",
  "alert",
  "emergency"
]);
var SetLevelRequestSchema = RequestSchema.extend({
  method: z.literal("logging/setLevel"),
  params: BaseRequestParamsSchema.extend({
    level: LoggingLevelSchema
  })
});
var LoggingMessageNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/message"),
  params: BaseNotificationParamsSchema.extend({
    level: LoggingLevelSchema,
    logger: z.optional(z.string()),
    data: z.unknown()
  })
});
var ModelHintSchema = z.object({
  name: z.string().optional()
}).passthrough();
var ModelPreferencesSchema = z.object({
  hints: z.optional(z.array(ModelHintSchema)),
  costPriority: z.optional(z.number().min(0).max(1)),
  speedPriority: z.optional(z.number().min(0).max(1)),
  intelligencePriority: z.optional(z.number().min(0).max(1))
}).passthrough();
var SamplingMessageSchema = z.object({
  role: z.enum(["user", "assistant"]),
  content: z.union([TextContentSchema, ImageContentSchema, AudioContentSchema])
}).passthrough();
var CreateMessageRequestSchema = RequestSchema.extend({
  method: z.literal("sampling/createMessage"),
  params: BaseRequestParamsSchema.extend({
    messages: z.array(SamplingMessageSchema),
    systemPrompt: z.optional(z.string()),
    includeContext: z.optional(z.enum(["none", "thisServer", "allServers"])),
    temperature: z.optional(z.number()),
    maxTokens: z.number().int(),
    stopSequences: z.optional(z.array(z.string())),
    metadata: z.optional(z.object({}).passthrough()),
    modelPreferences: z.optional(ModelPreferencesSchema)
  })
});
var CreateMessageResultSchema = ResultSchema.extend({
  model: z.string(),
  stopReason: z.optional(z.enum(["endTurn", "stopSequence", "maxTokens"]).or(z.string())),
  role: z.enum(["user", "assistant"]),
  content: z.discriminatedUnion("type", [
    TextContentSchema,
    ImageContentSchema,
    AudioContentSchema
  ])
});
var ResourceReferenceSchema = z.object({
  type: z.literal("ref/resource"),
  uri: z.string()
}).passthrough();
var PromptReferenceSchema = z.object({
  type: z.literal("ref/prompt"),
  name: z.string()
}).passthrough();
var CompleteRequestSchema = RequestSchema.extend({
  method: z.literal("completion/complete"),
  params: BaseRequestParamsSchema.extend({
    ref: z.union([PromptReferenceSchema, ResourceReferenceSchema]),
    argument: z.object({
      name: z.string(),
      value: z.string()
    }).passthrough()
  })
});
var CompleteResultSchema = ResultSchema.extend({
  completion: z.object({
    values: z.array(z.string()).max(100),
    total: z.optional(z.number().int()),
    hasMore: z.optional(z.boolean())
  }).passthrough()
});
var RootSchema = z.object({
  uri: z.string().startsWith("file://"),
  name: z.optional(z.string())
}).passthrough();
var ListRootsRequestSchema = RequestSchema.extend({
  method: z.literal("roots/list")
});
var ListRootsResultSchema = ResultSchema.extend({
  roots: z.array(RootSchema)
});
var RootsListChangedNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/roots/list_changed")
});
var ClientRequestSchema = z.union([
  PingRequestSchema,
  InitializeRequestSchema,
  CompleteRequestSchema,
  SetLevelRequestSchema,
  GetPromptRequestSchema,
  ListPromptsRequestSchema,
  ListResourcesRequestSchema,
  ListResourceTemplatesRequestSchema,
  ReadResourceRequestSchema,
  SubscribeRequestSchema,
  UnsubscribeRequestSchema,
  CallToolRequestSchema,
  ListToolsRequestSchema
]);
var ClientNotificationSchema = z.union([
  CancelledNotificationSchema,
  ProgressNotificationSchema,
  InitializedNotificationSchema,
  RootsListChangedNotificationSchema
]);
var ClientResultSchema = z.union([
  EmptyResultSchema,
  CreateMessageResultSchema,
  ListRootsResultSchema
]);
var ServerRequestSchema = z.union([
  PingRequestSchema,
  CreateMessageRequestSchema,
  ListRootsRequestSchema
]);
var ServerNotificationSchema = z.union([
  CancelledNotificationSchema,
  ProgressNotificationSchema,
  LoggingMessageNotificationSchema,
  ResourceUpdatedNotificationSchema,
  ResourceListChangedNotificationSchema,
  ToolListChangedNotificationSchema,
  PromptListChangedNotificationSchema
]);
var ServerResultSchema = z.union([
  EmptyResultSchema,
  InitializeResultSchema,
  CompleteResultSchema,
  GetPromptResultSchema,
  ListPromptsResultSchema,
  ListResourcesResultSchema,
  ListResourceTemplatesResultSchema,
  ReadResourceResultSchema,
  CallToolResultSchema,
  ListToolsResultSchema
]);

class McpError extends Error {
  constructor(code2, message, data) {
    super(`MCP error ${code2}: ${message}`);
    this.code = code2;
    this.data = data;
    this.name = "McpError";
  }
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js
var DEFAULT_REQUEST_TIMEOUT_MSEC = 60000;

class Protocol {
  constructor(_options) {
    this._options = _options;
    this._requestMessageId = 0;
    this._requestHandlers = new Map;
    this._requestHandlerAbortControllers = new Map;
    this._notificationHandlers = new Map;
    this._responseHandlers = new Map;
    this._progressHandlers = new Map;
    this._timeoutInfo = new Map;
    this.setNotificationHandler(CancelledNotificationSchema, (notification) => {
      const controller = this._requestHandlerAbortControllers.get(notification.params.requestId);
      controller === null || controller === undefined || controller.abort(notification.params.reason);
    });
    this.setNotificationHandler(ProgressNotificationSchema, (notification) => {
      this._onprogress(notification);
    });
    this.setRequestHandler(PingRequestSchema, (_request) => ({}));
  }
  _setupTimeout(messageId, timeout, maxTotalTimeout, onTimeout, resetTimeoutOnProgress = false) {
    this._timeoutInfo.set(messageId, {
      timeoutId: setTimeout(onTimeout, timeout),
      startTime: Date.now(),
      timeout,
      maxTotalTimeout,
      resetTimeoutOnProgress,
      onTimeout
    });
  }
  _resetTimeout(messageId) {
    const info = this._timeoutInfo.get(messageId);
    if (!info)
      return false;
    const totalElapsed = Date.now() - info.startTime;
    if (info.maxTotalTimeout && totalElapsed >= info.maxTotalTimeout) {
      this._timeoutInfo.delete(messageId);
      throw new McpError(ErrorCode.RequestTimeout, "Maximum total timeout exceeded", { maxTotalTimeout: info.maxTotalTimeout, totalElapsed });
    }
    clearTimeout(info.timeoutId);
    info.timeoutId = setTimeout(info.onTimeout, info.timeout);
    return true;
  }
  _cleanupTimeout(messageId) {
    const info = this._timeoutInfo.get(messageId);
    if (info) {
      clearTimeout(info.timeoutId);
      this._timeoutInfo.delete(messageId);
    }
  }
  async connect(transport) {
    this._transport = transport;
    this._transport.onclose = () => {
      this._onclose();
    };
    this._transport.onerror = (error) => {
      this._onerror(error);
    };
    this._transport.onmessage = (message, extra) => {
      if (isJSONRPCResponse(message) || isJSONRPCError(message)) {
        this._onresponse(message);
      } else if (isJSONRPCRequest(message)) {
        this._onrequest(message, extra);
      } else if (isJSONRPCNotification(message)) {
        this._onnotification(message);
      } else {
        this._onerror(new Error(`Unknown message type: ${JSON.stringify(message)}`));
      }
    };
    await this._transport.start();
  }
  _onclose() {
    var _a;
    const responseHandlers = this._responseHandlers;
    this._responseHandlers = new Map;
    this._progressHandlers.clear();
    this._transport = undefined;
    (_a = this.onclose) === null || _a === undefined || _a.call(this);
    const error = new McpError(ErrorCode.ConnectionClosed, "Connection closed");
    for (const handler of responseHandlers.values()) {
      handler(error);
    }
  }
  _onerror(error) {
    var _a;
    (_a = this.onerror) === null || _a === undefined || _a.call(this, error);
  }
  _onnotification(notification) {
    var _a;
    const handler = (_a = this._notificationHandlers.get(notification.method)) !== null && _a !== undefined ? _a : this.fallbackNotificationHandler;
    if (handler === undefined) {
      return;
    }
    Promise.resolve().then(() => handler(notification)).catch((error) => this._onerror(new Error(`Uncaught error in notification handler: ${error}`)));
  }
  _onrequest(request, extra) {
    var _a, _b, _c, _d;
    const handler = (_a = this._requestHandlers.get(request.method)) !== null && _a !== undefined ? _a : this.fallbackRequestHandler;
    if (handler === undefined) {
      (_b = this._transport) === null || _b === undefined || _b.send({
        jsonrpc: "2.0",
        id: request.id,
        error: {
          code: ErrorCode.MethodNotFound,
          message: "Method not found"
        }
      }).catch((error) => this._onerror(new Error(`Failed to send an error response: ${error}`)));
      return;
    }
    const abortController = new AbortController;
    this._requestHandlerAbortControllers.set(request.id, abortController);
    const fullExtra = {
      signal: abortController.signal,
      sessionId: (_c = this._transport) === null || _c === undefined ? undefined : _c.sessionId,
      _meta: (_d = request.params) === null || _d === undefined ? undefined : _d._meta,
      sendNotification: (notification) => this.notification(notification, { relatedRequestId: request.id }),
      sendRequest: (r, resultSchema, options) => this.request(r, resultSchema, { ...options, relatedRequestId: request.id }),
      authInfo: extra === null || extra === undefined ? undefined : extra.authInfo,
      requestId: request.id
    };
    Promise.resolve().then(() => handler(request, fullExtra)).then((result2) => {
      var _a2;
      if (abortController.signal.aborted) {
        return;
      }
      return (_a2 = this._transport) === null || _a2 === undefined ? undefined : _a2.send({
        result: result2,
        jsonrpc: "2.0",
        id: request.id
      });
    }, (error) => {
      var _a2, _b2;
      if (abortController.signal.aborted) {
        return;
      }
      return (_a2 = this._transport) === null || _a2 === undefined ? undefined : _a2.send({
        jsonrpc: "2.0",
        id: request.id,
        error: {
          code: Number.isSafeInteger(error["code"]) ? error["code"] : ErrorCode.InternalError,
          message: (_b2 = error.message) !== null && _b2 !== undefined ? _b2 : "Internal error"
        }
      });
    }).catch((error) => this._onerror(new Error(`Failed to send response: ${error}`))).finally(() => {
      this._requestHandlerAbortControllers.delete(request.id);
    });
  }
  _onprogress(notification) {
    const { progressToken, ...params } = notification.params;
    const messageId = Number(progressToken);
    const handler = this._progressHandlers.get(messageId);
    if (!handler) {
      this._onerror(new Error(`Received a progress notification for an unknown token: ${JSON.stringify(notification)}`));
      return;
    }
    const responseHandler = this._responseHandlers.get(messageId);
    const timeoutInfo = this._timeoutInfo.get(messageId);
    if (timeoutInfo && responseHandler && timeoutInfo.resetTimeoutOnProgress) {
      try {
        this._resetTimeout(messageId);
      } catch (error) {
        responseHandler(error);
        return;
      }
    }
    handler(params);
  }
  _onresponse(response) {
    const messageId = Number(response.id);
    const handler = this._responseHandlers.get(messageId);
    if (handler === undefined) {
      this._onerror(new Error(`Received a response for an unknown message ID: ${JSON.stringify(response)}`));
      return;
    }
    this._responseHandlers.delete(messageId);
    this._progressHandlers.delete(messageId);
    this._cleanupTimeout(messageId);
    if (isJSONRPCResponse(response)) {
      handler(response);
    } else {
      const error = new McpError(response.error.code, response.error.message, response.error.data);
      handler(error);
    }
  }
  get transport() {
    return this._transport;
  }
  async close() {
    var _a;
    await ((_a = this._transport) === null || _a === undefined ? undefined : _a.close());
  }
  request(request, resultSchema, options) {
    const { relatedRequestId, resumptionToken, onresumptiontoken } = options !== null && options !== undefined ? options : {};
    return new Promise((resolve, reject) => {
      var _a, _b, _c, _d, _e;
      if (!this._transport) {
        reject(new Error("Not connected"));
        return;
      }
      if (((_a = this._options) === null || _a === undefined ? undefined : _a.enforceStrictCapabilities) === true) {
        this.assertCapabilityForMethod(request.method);
      }
      (_b = options === null || options === undefined ? undefined : options.signal) === null || _b === undefined || _b.throwIfAborted();
      const messageId = this._requestMessageId++;
      const jsonrpcRequest = {
        ...request,
        jsonrpc: "2.0",
        id: messageId
      };
      if (options === null || options === undefined ? undefined : options.onprogress) {
        this._progressHandlers.set(messageId, options.onprogress);
        jsonrpcRequest.params = {
          ...request.params,
          _meta: { progressToken: messageId }
        };
      }
      const cancel = (reason) => {
        var _a2;
        this._responseHandlers.delete(messageId);
        this._progressHandlers.delete(messageId);
        this._cleanupTimeout(messageId);
        (_a2 = this._transport) === null || _a2 === undefined || _a2.send({
          jsonrpc: "2.0",
          method: "notifications/cancelled",
          params: {
            requestId: messageId,
            reason: String(reason)
          }
        }, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => this._onerror(new Error(`Failed to send cancellation: ${error}`)));
        reject(reason);
      };
      this._responseHandlers.set(messageId, (response) => {
        var _a2;
        if ((_a2 = options === null || options === undefined ? undefined : options.signal) === null || _a2 === undefined ? undefined : _a2.aborted) {
          return;
        }
        if (response instanceof Error) {
          return reject(response);
        }
        try {
          const result2 = resultSchema.parse(response.result);
          resolve(result2);
        } catch (error) {
          reject(error);
        }
      });
      (_c = options === null || options === undefined ? undefined : options.signal) === null || _c === undefined || _c.addEventListener("abort", () => {
        var _a2;
        cancel((_a2 = options === null || options === undefined ? undefined : options.signal) === null || _a2 === undefined ? undefined : _a2.reason);
      });
      const timeout = (_d = options === null || options === undefined ? undefined : options.timeout) !== null && _d !== undefined ? _d : DEFAULT_REQUEST_TIMEOUT_MSEC;
      const timeoutHandler = () => cancel(new McpError(ErrorCode.RequestTimeout, "Request timed out", { timeout }));
      this._setupTimeout(messageId, timeout, options === null || options === undefined ? undefined : options.maxTotalTimeout, timeoutHandler, (_e = options === null || options === undefined ? undefined : options.resetTimeoutOnProgress) !== null && _e !== undefined ? _e : false);
      this._transport.send(jsonrpcRequest, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => {
        this._cleanupTimeout(messageId);
        reject(error);
      });
    });
  }
  async notification(notification, options) {
    if (!this._transport) {
      throw new Error("Not connected");
    }
    this.assertNotificationCapability(notification.method);
    const jsonrpcNotification = {
      ...notification,
      jsonrpc: "2.0"
    };
    await this._transport.send(jsonrpcNotification, options);
  }
  setRequestHandler(requestSchema, handler) {
    const method = requestSchema.shape.method.value;
    this.assertRequestHandlerCapability(method);
    this._requestHandlers.set(method, (request, extra) => {
      return Promise.resolve(handler(requestSchema.parse(request), extra));
    });
  }
  removeRequestHandler(method) {
    this._requestHandlers.delete(method);
  }
  assertCanSetRequestHandler(method) {
    if (this._requestHandlers.has(method)) {
      throw new Error(`A request handler for ${method} already exists, which would be overridden`);
    }
  }
  setNotificationHandler(notificationSchema, handler) {
    this._notificationHandlers.set(notificationSchema.shape.method.value, (notification) => Promise.resolve(handler(notificationSchema.parse(notification))));
  }
  removeNotificationHandler(method) {
    this._notificationHandlers.delete(method);
  }
}
function mergeCapabilities(base, additional) {
  return Object.entries(additional).reduce((acc, [key, value]) => {
    if (value && typeof value === "object") {
      acc[key] = acc[key] ? { ...acc[key], ...value } : value;
    } else {
      acc[key] = value;
    }
    return acc;
  }, { ...base });
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/index.js
class Server extends Protocol {
  constructor(_serverInfo, options) {
    var _a;
    super(options);
    this._serverInfo = _serverInfo;
    this._capabilities = (_a = options === null || options === undefined ? undefined : options.capabilities) !== null && _a !== undefined ? _a : {};
    this._instructions = options === null || options === undefined ? undefined : options.instructions;
    this.setRequestHandler(InitializeRequestSchema, (request) => this._oninitialize(request));
    this.setNotificationHandler(InitializedNotificationSchema, () => {
      var _a2;
      return (_a2 = this.oninitialized) === null || _a2 === undefined ? undefined : _a2.call(this);
    });
  }
  registerCapabilities(capabilities) {
    if (this.transport) {
      throw new Error("Cannot register capabilities after connecting to transport");
    }
    this._capabilities = mergeCapabilities(this._capabilities, capabilities);
  }
  assertCapabilityForMethod(method) {
    var _a, _b;
    switch (method) {
      case "sampling/createMessage":
        if (!((_a = this._clientCapabilities) === null || _a === undefined ? undefined : _a.sampling)) {
          throw new Error(`Client does not support sampling (required for ${method})`);
        }
        break;
      case "roots/list":
        if (!((_b = this._clientCapabilities) === null || _b === undefined ? undefined : _b.roots)) {
          throw new Error(`Client does not support listing roots (required for ${method})`);
        }
        break;
      case "ping":
        break;
    }
  }
  assertNotificationCapability(method) {
    switch (method) {
      case "notifications/message":
        if (!this._capabilities.logging) {
          throw new Error(`Server does not support logging (required for ${method})`);
        }
        break;
      case "notifications/resources/updated":
      case "notifications/resources/list_changed":
        if (!this._capabilities.resources) {
          throw new Error(`Server does not support notifying about resources (required for ${method})`);
        }
        break;
      case "notifications/tools/list_changed":
        if (!this._capabilities.tools) {
          throw new Error(`Server does not support notifying of tool list changes (required for ${method})`);
        }
        break;
      case "notifications/prompts/list_changed":
        if (!this._capabilities.prompts) {
          throw new Error(`Server does not support notifying of prompt list changes (required for ${method})`);
        }
        break;
      case "notifications/cancelled":
        break;
      case "notifications/progress":
        break;
    }
  }
  assertRequestHandlerCapability(method) {
    switch (method) {
      case "sampling/createMessage":
        if (!this._capabilities.sampling) {
          throw new Error(`Server does not support sampling (required for ${method})`);
        }
        break;
      case "logging/setLevel":
        if (!this._capabilities.logging) {
          throw new Error(`Server does not support logging (required for ${method})`);
        }
        break;
      case "prompts/get":
      case "prompts/list":
        if (!this._capabilities.prompts) {
          throw new Error(`Server does not support prompts (required for ${method})`);
        }
        break;
      case "resources/list":
      case "resources/templates/list":
      case "resources/read":
        if (!this._capabilities.resources) {
          throw new Error(`Server does not support resources (required for ${method})`);
        }
        break;
      case "tools/call":
      case "tools/list":
        if (!this._capabilities.tools) {
          throw new Error(`Server does not support tools (required for ${method})`);
        }
        break;
      case "ping":
      case "initialize":
        break;
    }
  }
  async _oninitialize(request) {
    const requestedVersion = request.params.protocolVersion;
    this._clientCapabilities = request.params.capabilities;
    this._clientVersion = request.params.clientInfo;
    return {
      protocolVersion: SUPPORTED_PROTOCOL_VERSIONS.includes(requestedVersion) ? requestedVersion : LATEST_PROTOCOL_VERSION,
      capabilities: this.getCapabilities(),
      serverInfo: this._serverInfo,
      ...this._instructions && { instructions: this._instructions }
    };
  }
  getClientCapabilities() {
    return this._clientCapabilities;
  }
  getClientVersion() {
    return this._clientVersion;
  }
  getCapabilities() {
    return this._capabilities;
  }
  async ping() {
    return this.request({ method: "ping" }, EmptyResultSchema);
  }
  async createMessage(params, options) {
    return this.request({ method: "sampling/createMessage", params }, CreateMessageResultSchema, options);
  }
  async listRoots(params, options) {
    return this.request({ method: "roots/list", params }, ListRootsResultSchema, options);
  }
  async sendLoggingMessage(params) {
    return this.notification({ method: "notifications/message", params });
  }
  async sendResourceUpdated(params) {
    return this.notification({
      method: "notifications/resources/updated",
      params
    });
  }
  async sendResourceListChanged() {
    return this.notification({
      method: "notifications/resources/list_changed"
    });
  }
  async sendToolListChanged() {
    return this.notification({ method: "notifications/tools/list_changed" });
  }
  async sendPromptListChanged() {
    return this.notification({ method: "notifications/prompts/list_changed" });
  }
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/stdio.js
var import_node_process = __toESM(require("node:process"));

// node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js
class ReadBuffer {
  append(chunk) {
    this._buffer = this._buffer ? Buffer.concat([this._buffer, chunk]) : chunk;
  }
  readMessage() {
    if (!this._buffer) {
      return null;
    }
    const index = this._buffer.indexOf(`
`);
    if (index === -1) {
      return null;
    }
    const line = this._buffer.toString("utf8", 0, index).replace(/\r$/, "");
    this._buffer = this._buffer.subarray(index + 1);
    return deserializeMessage(line);
  }
  clear() {
    this._buffer = undefined;
  }
}
function deserializeMessage(line) {
  return JSONRPCMessageSchema.parse(JSON.parse(line));
}
function serializeMessage(message) {
  return JSON.stringify(message) + `
`;
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/stdio.js
class StdioServerTransport {
  constructor(_stdin = import_node_process.default.stdin, _stdout = import_node_process.default.stdout) {
    this._stdin = _stdin;
    this._stdout = _stdout;
    this._readBuffer = new ReadBuffer;
    this._started = false;
    this._ondata = (chunk) => {
      this._readBuffer.append(chunk);
      this.processReadBuffer();
    };
    this._onerror = (error) => {
      var _a;
      (_a = this.onerror) === null || _a === undefined || _a.call(this, error);
    };
  }
  async start() {
    if (this._started) {
      throw new Error("StdioServerTransport already started! If using Server class, note that connect() calls start() automatically.");
    }
    this._started = true;
    this._stdin.on("data", this._ondata);
    this._stdin.on("error", this._onerror);
  }
  processReadBuffer() {
    var _a, _b;
    while (true) {
      try {
        const message = this._readBuffer.readMessage();
        if (message === null) {
          break;
        }
        (_a = this.onmessage) === null || _a === undefined || _a.call(this, message);
      } catch (error) {
        (_b = this.onerror) === null || _b === undefined || _b.call(this, error);
      }
    }
  }
  async close() {
    var _a;
    this._stdin.off("data", this._ondata);
    this._stdin.off("error", this._onerror);
    const remainingDataListeners = this._stdin.listenerCount("data");
    if (remainingDataListeners === 0) {
      this._stdin.pause();
    }
    this._readBuffer.clear();
    (_a = this.onclose) === null || _a === undefined || _a.call(this);
  }
  send(message) {
    return new Promise((resolve) => {
      const json = serializeMessage(message);
      if (this._stdout.write(json)) {
        resolve();
      } else {
        this._stdout.once("drain", resolve);
      }
    });
  }
}

// node_modules/fastmcp/dist/FastMCP.js
var import_events = require("events");

// node_modules/peek-readable/lib/Errors.js
var defaultMessages = "End-Of-Stream";

class EndOfStreamError extends Error {
  constructor() {
    super(defaultMessages);
    this.name = "EndOfStreamError";
  }
}

class AbortError extends Error {
  constructor(message = "The operation was aborted") {
    super(message);
    this.name = "AbortError";
  }
}
// node_modules/peek-readable/lib/AbstractStreamReader.js
class AbstractStreamReader {
  constructor() {
    this.endOfStream = false;
    this.interrupted = false;
    this.peekQueue = [];
  }
  async peek(uint8Array, mayBeLess = false) {
    const bytesRead = await this.read(uint8Array, mayBeLess);
    this.peekQueue.push(uint8Array.subarray(0, bytesRead));
    return bytesRead;
  }
  async read(buffer, mayBeLess = false) {
    if (buffer.length === 0) {
      return 0;
    }
    let bytesRead = this.readFromPeekBuffer(buffer);
    if (!this.endOfStream) {
      bytesRead += await this.readRemainderFromStream(buffer.subarray(bytesRead), mayBeLess);
    }
    if (bytesRead === 0) {
      throw new EndOfStreamError;
    }
    return bytesRead;
  }
  readFromPeekBuffer(buffer) {
    let remaining = buffer.length;
    let bytesRead = 0;
    while (this.peekQueue.length > 0 && remaining > 0) {
      const peekData = this.peekQueue.pop();
      if (!peekData)
        throw new Error("peekData should be defined");
      const lenCopy = Math.min(peekData.length, remaining);
      buffer.set(peekData.subarray(0, lenCopy), bytesRead);
      bytesRead += lenCopy;
      remaining -= lenCopy;
      if (lenCopy < peekData.length) {
        this.peekQueue.push(peekData.subarray(lenCopy));
      }
    }
    return bytesRead;
  }
  async readRemainderFromStream(buffer, mayBeLess) {
    let bytesRead = 0;
    while (bytesRead < buffer.length && !this.endOfStream) {
      if (this.interrupted) {
        throw new AbortError;
      }
      const chunkLen = await this.readFromStream(buffer.subarray(bytesRead), mayBeLess);
      if (chunkLen === 0)
        break;
      bytesRead += chunkLen;
    }
    if (!mayBeLess && bytesRead < buffer.length) {
      throw new EndOfStreamError;
    }
    return bytesRead;
  }
}
// node_modules/peek-readable/lib/WebStreamReader.js
class WebStreamReader extends AbstractStreamReader {
  constructor(reader) {
    super();
    this.reader = reader;
  }
  async abort() {
    return this.close();
  }
  async close() {
    this.reader.releaseLock();
  }
}

// node_modules/peek-readable/lib/WebStreamByobReader.js
class WebStreamByobReader extends WebStreamReader {
  async readFromStream(buffer, mayBeLess) {
    if (buffer.length === 0)
      return 0;
    const result2 = await this.reader.read(new Uint8Array(buffer.length), { min: mayBeLess ? undefined : buffer.length });
    if (result2.done) {
      this.endOfStream = result2.done;
    }
    if (result2.value) {
      buffer.set(result2.value);
      return result2.value.length;
    }
    return 0;
  }
}
// node_modules/peek-readable/lib/WebStreamDefaultReader.js
class WebStreamDefaultReader extends AbstractStreamReader {
  constructor(reader) {
    super();
    this.reader = reader;
    this.buffer = null;
  }
  writeChunk(target, chunk) {
    const written = Math.min(chunk.length, target.length);
    target.set(chunk.subarray(0, written));
    if (written < chunk.length) {
      this.buffer = chunk.subarray(written);
    } else {
      this.buffer = null;
    }
    return written;
  }
  async readFromStream(buffer, mayBeLess) {
    if (buffer.length === 0)
      return 0;
    let totalBytesRead = 0;
    if (this.buffer) {
      totalBytesRead += this.writeChunk(buffer, this.buffer);
    }
    while (totalBytesRead < buffer.length && !this.endOfStream) {
      const result2 = await this.reader.read();
      if (result2.done) {
        this.endOfStream = true;
        break;
      }
      if (result2.value) {
        totalBytesRead += this.writeChunk(buffer.subarray(totalBytesRead), result2.value);
      }
    }
    if (totalBytesRead === 0 && this.endOfStream) {
      throw new EndOfStreamError;
    }
    return totalBytesRead;
  }
  abort() {
    this.interrupted = true;
    return this.reader.cancel();
  }
  async close() {
    await this.abort();
    this.reader.releaseLock();
  }
}
// node_modules/peek-readable/lib/WebStreamReaderFactory.js
function makeWebStreamReader(stream) {
  try {
    const reader = stream.getReader({ mode: "byob" });
    if (reader instanceof ReadableStreamDefaultReader) {
      return new WebStreamDefaultReader(reader);
    }
    return new WebStreamByobReader(reader);
  } catch (error) {
    if (error instanceof TypeError) {
      return new WebStreamDefaultReader(stream.getReader());
    }
    throw error;
  }
}
// node_modules/strtok3/lib/AbstractTokenizer.js
class AbstractTokenizer {
  constructor(options) {
    this.numBuffer = new Uint8Array(8);
    this.position = 0;
    this.onClose = options?.onClose;
    if (options?.abortSignal) {
      options.abortSignal.addEventListener("abort", () => {
        this.abort();
      });
    }
  }
  async readToken(token, position = this.position) {
    const uint8Array = new Uint8Array(token.len);
    const len = await this.readBuffer(uint8Array, { position });
    if (len < token.len)
      throw new EndOfStreamError;
    return token.get(uint8Array, 0);
  }
  async peekToken(token, position = this.position) {
    const uint8Array = new Uint8Array(token.len);
    const len = await this.peekBuffer(uint8Array, { position });
    if (len < token.len)
      throw new EndOfStreamError;
    return token.get(uint8Array, 0);
  }
  async readNumber(token) {
    const len = await this.readBuffer(this.numBuffer, { length: token.len });
    if (len < token.len)
      throw new EndOfStreamError;
    return token.get(this.numBuffer, 0);
  }
  async peekNumber(token) {
    const len = await this.peekBuffer(this.numBuffer, { length: token.len });
    if (len < token.len)
      throw new EndOfStreamError;
    return token.get(this.numBuffer, 0);
  }
  async ignore(length) {
    if (this.fileInfo.size !== undefined) {
      const bytesLeft = this.fileInfo.size - this.position;
      if (length > bytesLeft) {
        this.position += bytesLeft;
        return bytesLeft;
      }
    }
    this.position += length;
    return length;
  }
  async close() {
    await this.abort();
    await this.onClose?.();
  }
  normalizeOptions(uint8Array, options) {
    if (!this.supportsRandomAccess() && options && options.position !== undefined && options.position < this.position) {
      throw new Error("`options.position` must be equal or greater than `tokenizer.position`");
    }
    return {
      ...{
        mayBeLess: false,
        offset: 0,
        length: uint8Array.length,
        position: this.position
      },
      ...options
    };
  }
  abort() {
    return Promise.resolve();
  }
}

// node_modules/strtok3/lib/ReadStreamTokenizer.js
var maxBufferSize = 256000;

class ReadStreamTokenizer extends AbstractTokenizer {
  constructor(streamReader, options) {
    super(options);
    this.streamReader = streamReader;
    this.fileInfo = options?.fileInfo ?? {};
  }
  async readBuffer(uint8Array, options) {
    const normOptions = this.normalizeOptions(uint8Array, options);
    const skipBytes = normOptions.position - this.position;
    if (skipBytes > 0) {
      await this.ignore(skipBytes);
      return this.readBuffer(uint8Array, options);
    }
    if (skipBytes < 0) {
      throw new Error("`options.position` must be equal or greater than `tokenizer.position`");
    }
    if (normOptions.length === 0) {
      return 0;
    }
    const bytesRead = await this.streamReader.read(uint8Array.subarray(0, normOptions.length), normOptions.mayBeLess);
    this.position += bytesRead;
    if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {
      throw new EndOfStreamError;
    }
    return bytesRead;
  }
  async peekBuffer(uint8Array, options) {
    const normOptions = this.normalizeOptions(uint8Array, options);
    let bytesRead = 0;
    if (normOptions.position) {
      const skipBytes = normOptions.position - this.position;
      if (skipBytes > 0) {
        const skipBuffer = new Uint8Array(normOptions.length + skipBytes);
        bytesRead = await this.peekBuffer(skipBuffer, { mayBeLess: normOptions.mayBeLess });
        uint8Array.set(skipBuffer.subarray(skipBytes));
        return bytesRead - skipBytes;
      }
      if (skipBytes < 0) {
        throw new Error("Cannot peek from a negative offset in a stream");
      }
    }
    if (normOptions.length > 0) {
      try {
        bytesRead = await this.streamReader.peek(uint8Array.subarray(0, normOptions.length), normOptions.mayBeLess);
      } catch (err) {
        if (options?.mayBeLess && err instanceof EndOfStreamError) {
          return 0;
        }
        throw err;
      }
      if (!normOptions.mayBeLess && bytesRead < normOptions.length) {
        throw new EndOfStreamError;
      }
    }
    return bytesRead;
  }
  async ignore(length) {
    const bufSize = Math.min(maxBufferSize, length);
    const buf = new Uint8Array(bufSize);
    let totBytesRead = 0;
    while (totBytesRead < length) {
      const remaining = length - totBytesRead;
      const bytesRead = await this.readBuffer(buf, { length: Math.min(bufSize, remaining) });
      if (bytesRead < 0) {
        return bytesRead;
      }
      totBytesRead += bytesRead;
    }
    return totBytesRead;
  }
  abort() {
    return this.streamReader.abort();
  }
  async close() {
    return this.streamReader.close();
  }
  supportsRandomAccess() {
    return false;
  }
}

// node_modules/strtok3/lib/BufferTokenizer.js
class BufferTokenizer extends AbstractTokenizer {
  constructor(uint8Array, options) {
    super(options);
    this.uint8Array = uint8Array;
    this.fileInfo = { ...options?.fileInfo ?? {}, ...{ size: uint8Array.length } };
  }
  async readBuffer(uint8Array, options) {
    if (options?.position) {
      this.position = options.position;
    }
    const bytesRead = await this.peekBuffer(uint8Array, options);
    this.position += bytesRead;
    return bytesRead;
  }
  async peekBuffer(uint8Array, options) {
    const normOptions = this.normalizeOptions(uint8Array, options);
    const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);
    if (!normOptions.mayBeLess && bytes2read < normOptions.length) {
      throw new EndOfStreamError;
    }
    uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read));
    return bytes2read;
  }
  close() {
    return super.close();
  }
  supportsRandomAccess() {
    return true;
  }
  setPosition(position) {
    this.position = position;
  }
}
// node_modules/strtok3/lib/core.js
function fromWebStream(webStream, options) {
  const webStreamReader = makeWebStreamReader(webStream);
  const _options = options ?? {};
  const chainedClose = _options.onClose;
  _options.onClose = async () => {
    await webStreamReader.close();
    if (chainedClose) {
      return chainedClose();
    }
  };
  return new ReadStreamTokenizer(webStreamReader, _options);
}
function fromBuffer(uint8Array, options) {
  return new BufferTokenizer(uint8Array, options);
}

// node_modules/strtok3/lib/FileTokenizer.js
var import_promises = require("node:fs/promises");

class FileTokenizer extends AbstractTokenizer {
  static async fromFile(sourceFilePath) {
    const fileHandle = await import_promises.open(sourceFilePath, "r");
    const stat = await fileHandle.stat();
    return new FileTokenizer(fileHandle, { fileInfo: { path: sourceFilePath, size: stat.size } });
  }
  constructor(fileHandle, options) {
    super(options);
    this.fileHandle = fileHandle;
    this.fileInfo = options.fileInfo;
  }
  async readBuffer(uint8Array, options) {
    const normOptions = this.normalizeOptions(uint8Array, options);
    this.position = normOptions.position;
    if (normOptions.length === 0)
      return 0;
    const res = await this.fileHandle.read(uint8Array, 0, normOptions.length, normOptions.position);
    this.position += res.bytesRead;
    if (res.bytesRead < normOptions.length && (!options || !options.mayBeLess)) {
      throw new EndOfStreamError;
    }
    return res.bytesRead;
  }
  async peekBuffer(uint8Array, options) {
    const normOptions = this.normalizeOptions(uint8Array, options);
    const res = await this.fileHandle.read(uint8Array, 0, normOptions.length, normOptions.position);
    if (!normOptions.mayBeLess && res.bytesRead < normOptions.length) {
      throw new EndOfStreamError;
    }
    return res.bytesRead;
  }
  async close() {
    await this.fileHandle.close();
    return super.close();
  }
  setPosition(position) {
    this.position = position;
  }
  supportsRandomAccess() {
    return true;
  }
}
// node_modules/strtok3/lib/index.js
var fromFile = FileTokenizer.fromFile;

// node_modules/token-types/lib/index.js
var ieee754 = __toESM(require_ieee754());
function dv(array) {
  return new DataView(array.buffer, array.byteOffset);
}
var UINT8 = {
  len: 1,
  get(array, offset) {
    return dv(array).getUint8(offset);
  },
  put(array, offset, value) {
    dv(array).setUint8(offset, value);
    return offset + 1;
  }
};
var UINT16_LE = {
  len: 2,
  get(array, offset) {
    return dv(array).getUint16(offset, true);
  },
  put(array, offset, value) {
    dv(array).setUint16(offset, value, true);
    return offset + 2;
  }
};
var UINT16_BE = {
  len: 2,
  get(array, offset) {
    return dv(array).getUint16(offset);
  },
  put(array, offset, value) {
    dv(array).setUint16(offset, value);
    return offset + 2;
  }
};
var UINT32_LE = {
  len: 4,
  get(array, offset) {
    return dv(array).getUint32(offset, true);
  },
  put(array, offset, value) {
    dv(array).setUint32(offset, value, true);
    return offset + 4;
  }
};
var UINT32_BE = {
  len: 4,
  get(array, offset) {
    return dv(array).getUint32(offset);
  },
  put(array, offset, value) {
    dv(array).setUint32(offset, value);
    return offset + 4;
  }
};
var INT32_BE = {
  len: 4,
  get(array, offset) {
    return dv(array).getInt32(offset);
  },
  put(array, offset, value) {
    dv(array).setInt32(offset, value);
    return offset + 4;
  }
};
var UINT64_LE = {
  len: 8,
  get(array, offset) {
    return dv(array).getBigUint64(offset, true);
  },
  put(array, offset, value) {
    dv(array).setBigUint64(offset, value, true);
    return offset + 8;
  }
};
class StringType {
  constructor(len, encoding) {
    this.len = len;
    this.encoding = encoding;
    this.textDecoder = new TextDecoder(encoding);
  }
  get(uint8Array, offset) {
    return this.textDecoder.decode(uint8Array.subarray(offset, offset + this.len));
  }
}

// node_modules/fflate/esm/index.mjs
var import_module = require("module");
var require2 = import_module.createRequire("/");
var Worker;
try {
  Worker = require2("worker_threads").Worker;
} catch (e) {}
var u8 = Uint8Array;
var u16 = Uint16Array;
var i32 = Int32Array;
var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var freb = function(eb, start) {
  var b = new u16(31);
  for (var i = 0;i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  }
  var r = new i32(b[30]);
  for (var i = 1;i < 30; ++i) {
    for (var j = b[i];j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }
  return { b, r };
};
var _a = freb(fleb, 2);
var fl = _a.b;
var revfl = _a.r;
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0);
var fd = _b.b;
var revfd = _b.r;
var rev = new u16(32768);
for (i = 0;i < 32768; ++i) {
  x = (i & 43690) >> 1 | (i & 21845) << 1;
  x = (x & 52428) >> 2 | (x & 13107) << 2;
  x = (x & 61680) >> 4 | (x & 3855) << 4;
  rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
}
var x;
var i;
var hMap = function(cd, mb, r) {
  var s = cd.length;
  var i2 = 0;
  var l = new u16(mb);
  for (;i2 < s; ++i2) {
    if (cd[i2])
      ++l[cd[i2] - 1];
  }
  var le = new u16(mb);
  for (i2 = 1;i2 < mb; ++i2) {
    le[i2] = le[i2 - 1] + l[i2 - 1] << 1;
  }
  var co;
  if (r) {
    co = new u16(1 << mb);
    var rvb = 15 - mb;
    for (i2 = 0;i2 < s; ++i2) {
      if (cd[i2]) {
        var sv = i2 << 4 | cd[i2];
        var r_1 = mb - cd[i2];
        var v = le[cd[i2] - 1]++ << r_1;
        for (var m = v | (1 << r_1) - 1;v <= m; ++v) {
          co[rev[v] >> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);
    for (i2 = 0;i2 < s; ++i2) {
      if (cd[i2]) {
        co[i2] = rev[le[cd[i2] - 1]++] >> 15 - cd[i2];
      }
    }
  }
  return co;
};
var flt = new u8(288);
for (i = 0;i < 144; ++i)
  flt[i] = 8;
var i;
for (i = 144;i < 256; ++i)
  flt[i] = 9;
var i;
for (i = 256;i < 280; ++i)
  flt[i] = 7;
var i;
for (i = 280;i < 288; ++i)
  flt[i] = 8;
var i;
var fdt = new u8(32);
for (i = 0;i < 32; ++i)
  fdt[i] = 5;
var i;
var flrm = /* @__PURE__ */ hMap(flt, 9, 1);
var fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
var max = function(a) {
  var m = a[0];
  for (var i2 = 1;i2 < a.length; ++i2) {
    if (a[i2] > m)
      m = a[i2];
  }
  return m;
};
var bits = function(d, p, m) {
  var o = p / 8 | 0;
  return (d[o] | d[o + 1] << 8) >> (p & 7) & m;
};
var bits16 = function(d, p) {
  var o = p / 8 | 0;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);
};
var shft = function(p) {
  return (p + 7) / 8 | 0;
};
var slc = function(v, s, e) {
  if (s == null || s < 0)
    s = 0;
  if (e == null || e > v.length)
    e = v.length;
  return new u8(v.subarray(s, e));
};
var ec = [
  "unexpected EOF",
  "invalid block type",
  "invalid length/literal",
  "invalid distance",
  "stream finished",
  "no stream handler",
  ,
  "no callback",
  "invalid UTF-8 data",
  "extra field too long",
  "date not in range 1980-2099",
  "filename too long",
  "stream finishing",
  "invalid zip data"
];
var err = function(ind, msg, nt) {
  var e = new Error(msg || ec[ind]);
  e.code = ind;
  if (Error.captureStackTrace)
    Error.captureStackTrace(e, err);
  if (!nt)
    throw e;
  return e;
};
var inflt = function(dat, st, buf, dict) {
  var sl = dat.length, dl = dict ? dict.length : 0;
  if (!sl || st.f && !st.l)
    return buf || new u8(0);
  var noBuf = !buf;
  var resize = noBuf || st.i != 2;
  var noSt = st.i;
  if (noBuf)
    buf = new u8(sl * 3);
  var cbuf = function(l2) {
    var bl = buf.length;
    if (l2 > bl) {
      var nbuf = new u8(Math.max(bl * 2, l2));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
  var tbts = sl * 8;
  do {
    if (!lm) {
      final = bits(dat, pos, 1);
      var type = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type) {
        var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
        if (t > sl) {
          if (noSt)
            err(0);
          break;
        }
        if (resize)
          cbuf(bt + l);
        buf.set(dat.subarray(s, t), bt);
        st.b = bt += l, st.p = pos = t * 8, st.f = final;
        continue;
      } else if (type == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type == 2) {
        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        var tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        var ldt = new u8(tl);
        var clt = new u8(19);
        for (var i2 = 0;i2 < hcLen; ++i2) {
          clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);
        }
        pos += hcLen * 3;
        var clb = max(clt), clbmsk = (1 << clb) - 1;
        var clm = hMap(clt, clb, 1);
        for (var i2 = 0;i2 < tl; ) {
          var r = clm[bits(dat, pos, clbmsk)];
          pos += r & 15;
          var s = r >> 4;
          if (s < 16) {
            ldt[i2++] = s;
          } else {
            var c = 0, n = 0;
            if (s == 16)
              n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i2 - 1];
            else if (s == 17)
              n = 3 + bits(dat, pos, 7), pos += 3;
            else if (s == 18)
              n = 11 + bits(dat, pos, 127), pos += 7;
            while (n--)
              ldt[i2++] = c;
          }
        }
        var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
        lbt = max(lt);
        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else
        err(1);
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
    }
    if (resize)
      cbuf(bt + 131072);
    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    var lpos = pos;
    for (;; lpos = pos) {
      var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
      pos += c & 15;
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
      if (!c)
        err(2);
      if (sym < 256)
        buf[bt++] = sym;
      else if (sym == 256) {
        lpos = pos, lm = null;
        break;
      } else {
        var add = sym - 254;
        if (sym > 264) {
          var i2 = sym - 257, b = fleb[i2];
          add = bits(dat, pos, (1 << b) - 1) + fl[i2];
          pos += b;
        }
        var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;
        if (!d)
          err(3);
        pos += d & 15;
        var dt = fd[dsym];
        if (dsym > 3) {
          var b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (resize)
          cbuf(bt + 131072);
        var end = bt + add;
        if (bt < dt) {
          var shift = dl - dt, dend = Math.min(dt, end);
          if (shift + bt < 0)
            err(3);
          for (;bt < dend; ++bt)
            buf[bt] = dict[shift + bt];
        }
        for (;bt < end; ++bt)
          buf[bt] = buf[bt - dt];
      }
    }
    st.l = lm, st.p = lpos, st.b = bt, st.f = final;
    if (lm)
      final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);
  return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
};
var et = /* @__PURE__ */ new u8(0);
var gzs = function(d) {
  if (d[0] != 31 || d[1] != 139 || d[2] != 8)
    err(6, "invalid gzip data");
  var flg = d[3];
  var st = 10;
  if (flg & 4)
    st += (d[10] | d[11] << 8) + 2;
  for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1);zs > 0; zs -= !d[st++])
    ;
  return st + (flg & 2);
};
var gzl = function(d) {
  var l = d.length;
  return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;
};
var zls = function(d, dict) {
  if ((d[0] & 15) != 8 || d[0] >> 4 > 7 || (d[0] << 8 | d[1]) % 31)
    err(6, "invalid zlib data");
  if ((d[1] >> 5 & 1) == +!dict)
    err(6, "invalid zlib data: " + (d[1] & 32 ? "need" : "unexpected") + " dictionary");
  return (d[1] >> 3 & 4) + 2;
};
function inflateSync(data, opts) {
  return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);
}
function gunzipSync(data, opts) {
  var st = gzs(data);
  if (st + 8 > data.length)
    err(6, "invalid gzip data");
  return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);
}
function unzlibSync(data, opts) {
  return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);
}
function decompressSync(data, opts) {
  return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzipSync(data, opts) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflateSync(data, opts) : unzlibSync(data, opts);
}
var td = typeof TextDecoder != "undefined" && /* @__PURE__ */ new TextDecoder;
var tds = 0;
try {
  td.decode(et, { stream: true });
  tds = 1;
} catch (e) {}

// node_modules/@tokenizer/inflate/lib/index.js
var import_debug = __toESM(require_src());

// node_modules/@tokenizer/inflate/lib/ZipToken.js
var Signature = {
  LocalFileHeader: 67324752,
  DataDescriptor: 134695760,
  CentralFileHeader: 33639248,
  EndOfCentralDirectory: 101010256
};
var DataDescriptor = {
  get(array) {
    const flags = UINT16_LE.get(array, 6);
    return {
      signature: UINT32_LE.get(array, 0),
      compressedSize: UINT32_LE.get(array, 8),
      uncompressedSize: UINT32_LE.get(array, 12)
    };
  },
  len: 16
};
var LocalFileHeaderToken = {
  get(array) {
    const flags = UINT16_LE.get(array, 6);
    return {
      signature: UINT32_LE.get(array, 0),
      minVersion: UINT16_LE.get(array, 4),
      dataDescriptor: !!(flags & 8),
      compressedMethod: UINT16_LE.get(array, 8),
      compressedSize: UINT32_LE.get(array, 18),
      uncompressedSize: UINT32_LE.get(array, 22),
      filenameLength: UINT16_LE.get(array, 26),
      extraFieldLength: UINT16_LE.get(array, 28),
      filename: null
    };
  },
  len: 30
};
var EndOfCentralDirectoryRecordToken = {
  get(array) {
    return {
      signature: UINT32_LE.get(array, 0),
      nrOfThisDisk: UINT16_LE.get(array, 4),
      nrOfThisDiskWithTheStart: UINT16_LE.get(array, 6),
      nrOfEntriesOnThisDisk: UINT16_LE.get(array, 8),
      nrOfEntriesOfSize: UINT16_LE.get(array, 10),
      sizeOfCd: UINT32_LE.get(array, 12),
      offsetOfStartOfCd: UINT32_LE.get(array, 16),
      zipFileCommentLength: UINT16_LE.get(array, 20)
    };
  },
  len: 22
};
var FileHeader = {
  get(array) {
    const flags = UINT16_LE.get(array, 8);
    return {
      signature: UINT32_LE.get(array, 0),
      minVersion: UINT16_LE.get(array, 6),
      dataDescriptor: !!(flags & 8),
      compressedMethod: UINT16_LE.get(array, 10),
      compressedSize: UINT32_LE.get(array, 20),
      uncompressedSize: UINT32_LE.get(array, 24),
      filenameLength: UINT16_LE.get(array, 28),
      extraFieldLength: UINT16_LE.get(array, 30),
      fileCommentLength: UINT16_LE.get(array, 32),
      relativeOffsetOfLocalHeader: UINT32_LE.get(array, 42),
      filename: null
    };
  },
  len: 46
};

// node_modules/@tokenizer/inflate/lib/index.js
function signatureToArray(signature) {
  const signatureBytes = new Uint8Array(UINT32_LE.len);
  UINT32_LE.put(signatureBytes, 0, signature);
  return signatureBytes;
}
var debug = import_debug.default("tokenizer:inflate");
var syncBufferSize = 256 * 1024;
var ddSignatureArray = signatureToArray(Signature.DataDescriptor);
var eocdSignatureBytes = signatureToArray(Signature.EndOfCentralDirectory);

class ZipHandler {
  constructor(tokenizer) {
    this.tokenizer = tokenizer;
    this.syncBuffer = new Uint8Array(syncBufferSize);
  }
  async isZip() {
    return await this.peekSignature() === Signature.LocalFileHeader;
  }
  peekSignature() {
    return this.tokenizer.peekToken(UINT32_LE);
  }
  async findEndOfCentralDirectoryLocator() {
    const randomReadTokenizer = this.tokenizer;
    const chunkLength = Math.min(16 * 1024, randomReadTokenizer.fileInfo.size);
    const buffer = this.syncBuffer.subarray(0, chunkLength);
    await this.tokenizer.readBuffer(buffer, { position: randomReadTokenizer.fileInfo.size - chunkLength });
    for (let i2 = buffer.length - 4;i2 >= 0; i2--) {
      if (buffer[i2] === eocdSignatureBytes[0] && buffer[i2 + 1] === eocdSignatureBytes[1] && buffer[i2 + 2] === eocdSignatureBytes[2] && buffer[i2 + 3] === eocdSignatureBytes[3]) {
        return randomReadTokenizer.fileInfo.size - chunkLength + i2;
      }
    }
    return -1;
  }
  async readCentralDirectory() {
    if (!this.tokenizer.supportsRandomAccess()) {
      debug("Cannot reading central-directory without random-read support");
      return;
    }
    debug("Reading central-directory...");
    const pos = this.tokenizer.position;
    const offset = await this.findEndOfCentralDirectoryLocator();
    if (offset > 0) {
      debug("Central-directory 32-bit signature found");
      const eocdHeader = await this.tokenizer.readToken(EndOfCentralDirectoryRecordToken, offset);
      const files = [];
      this.tokenizer.setPosition(eocdHeader.offsetOfStartOfCd);
      for (let n = 0;n < eocdHeader.nrOfEntriesOfSize; ++n) {
        const entry = await this.tokenizer.readToken(FileHeader);
        if (entry.signature !== Signature.CentralFileHeader) {
          throw new Error("Expected Central-File-Header signature");
        }
        entry.filename = await this.tokenizer.readToken(new StringType(entry.filenameLength, "utf-8"));
        await this.tokenizer.ignore(entry.extraFieldLength);
        await this.tokenizer.ignore(entry.fileCommentLength);
        files.push(entry);
        debug(`Add central-directory file-entry: n=${n + 1}/${files.length}: filename=${files[n].filename}`);
      }
      this.tokenizer.setPosition(pos);
      return files;
    }
    this.tokenizer.setPosition(pos);
  }
  async unzip(fileCb) {
    const entries = await this.readCentralDirectory();
    if (entries) {
      return this.iterateOverCentralDirectory(entries, fileCb);
    }
    let stop = false;
    do {
      const zipHeader = await this.readLocalFileHeader();
      if (!zipHeader)
        break;
      const next = fileCb(zipHeader);
      stop = !!next.stop;
      let fileData = undefined;
      await this.tokenizer.ignore(zipHeader.extraFieldLength);
      if (zipHeader.dataDescriptor && zipHeader.compressedSize === 0) {
        const chunks = [];
        let len = syncBufferSize;
        debug("Compressed-file-size unknown, scanning for next data-descriptor-signature....");
        let nextHeaderIndex = -1;
        while (nextHeaderIndex < 0 && len === syncBufferSize) {
          len = await this.tokenizer.peekBuffer(this.syncBuffer, { mayBeLess: true });
          nextHeaderIndex = indexOf(this.syncBuffer.subarray(0, len), ddSignatureArray);
          const size = nextHeaderIndex >= 0 ? nextHeaderIndex : len;
          if (next.handler) {
            const data = new Uint8Array(size);
            await this.tokenizer.readBuffer(data);
            chunks.push(data);
          } else {
            await this.tokenizer.ignore(size);
          }
        }
        debug(`Found data-descriptor-signature at pos=${this.tokenizer.position}`);
        if (next.handler) {
          await this.inflate(zipHeader, mergeArrays(chunks), next.handler);
        }
      } else {
        if (next.handler) {
          debug(`Reading compressed-file-data: ${zipHeader.compressedSize} bytes`);
          fileData = new Uint8Array(zipHeader.compressedSize);
          await this.tokenizer.readBuffer(fileData);
          await this.inflate(zipHeader, fileData, next.handler);
        } else {
          debug(`Ignoring compressed-file-data: ${zipHeader.compressedSize} bytes`);
          await this.tokenizer.ignore(zipHeader.compressedSize);
        }
      }
      debug(`Reading data-descriptor at pos=${this.tokenizer.position}`);
      if (zipHeader.dataDescriptor) {
        const dataDescriptor = await this.tokenizer.readToken(DataDescriptor);
        if (dataDescriptor.signature !== 134695760) {
          throw new Error(`Expected data-descriptor-signature at position ${this.tokenizer.position - DataDescriptor.len}`);
        }
      }
    } while (!stop);
  }
  async iterateOverCentralDirectory(entries, fileCb) {
    for (const fileHeader of entries) {
      const next = fileCb(fileHeader);
      if (next.handler) {
        this.tokenizer.setPosition(fileHeader.relativeOffsetOfLocalHeader);
        const zipHeader = await this.readLocalFileHeader();
        if (zipHeader) {
          await this.tokenizer.ignore(zipHeader.extraFieldLength);
          const fileData = new Uint8Array(fileHeader.compressedSize);
          await this.tokenizer.readBuffer(fileData);
          await this.inflate(zipHeader, fileData, next.handler);
        }
      }
      if (next.stop)
        break;
    }
  }
  inflate(zipHeader, fileData, cb) {
    if (zipHeader.compressedMethod === 0) {
      return cb(fileData);
    }
    debug(`Decompress filename=${zipHeader.filename}, compressed-size=${fileData.length}`);
    const uncompressedData = decompressSync(fileData);
    return cb(uncompressedData);
  }
  async readLocalFileHeader() {
    const signature = await this.tokenizer.peekToken(UINT32_LE);
    if (signature === Signature.LocalFileHeader) {
      const header = await this.tokenizer.readToken(LocalFileHeaderToken);
      header.filename = await this.tokenizer.readToken(new StringType(header.filenameLength, "utf-8"));
      return header;
    }
    if (signature === Signature.CentralFileHeader) {
      return false;
    }
    if (signature === 3759263696) {
      throw new Error("Encrypted ZIP");
    }
    throw new Error("Unexpected signature");
  }
}
function indexOf(buffer, portion) {
  const bufferLength = buffer.length;
  const portionLength = portion.length;
  if (portionLength > bufferLength)
    return -1;
  for (let i2 = 0;i2 <= bufferLength - portionLength; i2++) {
    let found = true;
    for (let j = 0;j < portionLength; j++) {
      if (buffer[i2 + j] !== portion[j]) {
        found = false;
        break;
      }
    }
    if (found) {
      return i2;
    }
  }
  return -1;
}
function mergeArrays(chunks) {
  const totalLength = chunks.reduce((acc, curr) => acc + curr.length, 0);
  const mergedArray = new Uint8Array(totalLength);
  let offset = 0;
  for (const chunk of chunks) {
    mergedArray.set(chunk, offset);
    offset += chunk.length;
  }
  return mergedArray;
}

// node_modules/uint8array-extras/index.js
var cachedDecoders = {
  utf8: new globalThis.TextDecoder("utf8")
};
var cachedEncoder = new globalThis.TextEncoder;
var byteToHexLookupTable = Array.from({ length: 256 }, (_, index) => index.toString(16).padStart(2, "0"));
function getUintBE(view) {
  const { byteLength } = view;
  if (byteLength === 6) {
    return view.getUint16(0) * 2 ** 32 + view.getUint32(2);
  }
  if (byteLength === 5) {
    return view.getUint8(0) * 2 ** 32 + view.getUint32(1);
  }
  if (byteLength === 4) {
    return view.getUint32(0);
  }
  if (byteLength === 3) {
    return view.getUint8(0) * 2 ** 16 + view.getUint16(1);
  }
  if (byteLength === 2) {
    return view.getUint16(0);
  }
  if (byteLength === 1) {
    return view.getUint8(0);
  }
}
function indexOf2(array, value) {
  const arrayLength = array.length;
  const valueLength = value.length;
  if (valueLength === 0) {
    return -1;
  }
  if (valueLength > arrayLength) {
    return -1;
  }
  const validOffsetLength = arrayLength - valueLength;
  for (let index = 0;index <= validOffsetLength; index++) {
    let isMatch = true;
    for (let index2 = 0;index2 < valueLength; index2++) {
      if (array[index + index2] !== value[index2]) {
        isMatch = false;
        break;
      }
    }
    if (isMatch) {
      return index;
    }
  }
  return -1;
}
function includes(array, value) {
  return indexOf2(array, value) !== -1;
}

// node_modules/file-type/util.js
function stringToBytes(string) {
  return [...string].map((character) => character.charCodeAt(0));
}
function tarHeaderChecksumMatches(arrayBuffer, offset = 0) {
  const readSum = Number.parseInt(new StringType(6).get(arrayBuffer, 148).replace(/\0.*$/, "").trim(), 8);
  if (Number.isNaN(readSum)) {
    return false;
  }
  let sum = 8 * 32;
  for (let index = offset;index < offset + 148; index++) {
    sum += arrayBuffer[index];
  }
  for (let index = offset + 156;index < offset + 512; index++) {
    sum += arrayBuffer[index];
  }
  return readSum === sum;
}
var uint32SyncSafeToken = {
  get: (buffer, offset) => buffer[offset + 3] & 127 | buffer[offset + 2] << 7 | buffer[offset + 1] << 14 | buffer[offset] << 21,
  len: 4
};

// node_modules/file-type/supported.js
var extensions = [
  "jpg",
  "png",
  "apng",
  "gif",
  "webp",
  "flif",
  "xcf",
  "cr2",
  "cr3",
  "orf",
  "arw",
  "dng",
  "nef",
  "rw2",
  "raf",
  "tif",
  "bmp",
  "icns",
  "jxr",
  "psd",
  "indd",
  "zip",
  "tar",
  "rar",
  "gz",
  "bz2",
  "7z",
  "dmg",
  "mp4",
  "mid",
  "mkv",
  "webm",
  "mov",
  "avi",
  "mpg",
  "mp2",
  "mp3",
  "m4a",
  "oga",
  "ogg",
  "ogv",
  "opus",
  "flac",
  "wav",
  "spx",
  "amr",
  "pdf",
  "epub",
  "elf",
  "macho",
  "exe",
  "swf",
  "rtf",
  "wasm",
  "woff",
  "woff2",
  "eot",
  "ttf",
  "otf",
  "ttc",
  "ico",
  "flv",
  "ps",
  "xz",
  "sqlite",
  "nes",
  "crx",
  "xpi",
  "cab",
  "deb",
  "ar",
  "rpm",
  "Z",
  "lz",
  "cfb",
  "mxf",
  "mts",
  "blend",
  "bpg",
  "docx",
  "pptx",
  "xlsx",
  "3gp",
  "3g2",
  "j2c",
  "jp2",
  "jpm",
  "jpx",
  "mj2",
  "aif",
  "qcp",
  "odt",
  "ods",
  "odp",
  "xml",
  "mobi",
  "heic",
  "cur",
  "ktx",
  "ape",
  "wv",
  "dcm",
  "ics",
  "glb",
  "pcap",
  "dsf",
  "lnk",
  "alias",
  "voc",
  "ac3",
  "m4v",
  "m4p",
  "m4b",
  "f4v",
  "f4p",
  "f4b",
  "f4a",
  "mie",
  "asf",
  "ogm",
  "ogx",
  "mpc",
  "arrow",
  "shp",
  "aac",
  "mp1",
  "it",
  "s3m",
  "xm",
  "ai",
  "skp",
  "avif",
  "eps",
  "lzh",
  "pgp",
  "asar",
  "stl",
  "chm",
  "3mf",
  "zst",
  "jxl",
  "vcf",
  "jls",
  "pst",
  "dwg",
  "parquet",
  "class",
  "arj",
  "cpio",
  "ace",
  "avro",
  "icc",
  "fbx",
  "vsdx",
  "vtt",
  "apk",
  "drc",
  "lz4",
  "potx",
  "xltx",
  "dotx",
  "xltm",
  "ott",
  "ots",
  "otp",
  "odg",
  "otg",
  "xlsm",
  "docm",
  "dotm",
  "potm",
  "pptm",
  "jar",
  "rm",
  "ppsm",
  "ppsx"
];
var mimeTypes = [
  "image/jpeg",
  "image/png",
  "image/gif",
  "image/webp",
  "image/flif",
  "image/x-xcf",
  "image/x-canon-cr2",
  "image/x-canon-cr3",
  "image/tiff",
  "image/bmp",
  "image/vnd.ms-photo",
  "image/vnd.adobe.photoshop",
  "application/x-indesign",
  "application/epub+zip",
  "application/x-xpinstall",
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12",
  "application/vnd.oasis.opendocument.text",
  "application/vnd.oasis.opendocument.spreadsheet",
  "application/vnd.oasis.opendocument.presentation",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  "application/vnd.openxmlformats-officedocument.presentationml.presentation",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
  "application/zip",
  "application/x-tar",
  "application/x-rar-compressed",
  "application/gzip",
  "application/x-bzip2",
  "application/x-7z-compressed",
  "application/x-apple-diskimage",
  "application/x-apache-arrow",
  "video/mp4",
  "audio/midi",
  "video/x-matroska",
  "video/webm",
  "video/quicktime",
  "video/vnd.avi",
  "audio/wav",
  "audio/qcelp",
  "audio/x-ms-asf",
  "video/x-ms-asf",
  "application/vnd.ms-asf",
  "video/mpeg",
  "video/3gpp",
  "audio/mpeg",
  "audio/mp4",
  "video/ogg",
  "audio/ogg",
  "audio/ogg; codecs=opus",
  "application/ogg",
  "audio/x-flac",
  "audio/ape",
  "audio/wavpack",
  "audio/amr",
  "application/pdf",
  "application/x-elf",
  "application/x-mach-binary",
  "application/x-msdownload",
  "application/x-shockwave-flash",
  "application/rtf",
  "application/wasm",
  "font/woff",
  "font/woff2",
  "application/vnd.ms-fontobject",
  "font/ttf",
  "font/otf",
  "font/collection",
  "image/x-icon",
  "video/x-flv",
  "application/postscript",
  "application/eps",
  "application/x-xz",
  "application/x-sqlite3",
  "application/x-nintendo-nes-rom",
  "application/x-google-chrome-extension",
  "application/vnd.ms-cab-compressed",
  "application/x-deb",
  "application/x-unix-archive",
  "application/x-rpm",
  "application/x-compress",
  "application/x-lzip",
  "application/x-cfb",
  "application/x-mie",
  "application/mxf",
  "video/mp2t",
  "application/x-blender",
  "image/bpg",
  "image/j2c",
  "image/jp2",
  "image/jpx",
  "image/jpm",
  "image/mj2",
  "audio/aiff",
  "application/xml",
  "application/x-mobipocket-ebook",
  "image/heif",
  "image/heif-sequence",
  "image/heic",
  "image/heic-sequence",
  "image/icns",
  "image/ktx",
  "application/dicom",
  "audio/x-musepack",
  "text/calendar",
  "text/vcard",
  "text/vtt",
  "model/gltf-binary",
  "application/vnd.tcpdump.pcap",
  "audio/x-dsf",
  "application/x.ms.shortcut",
  "application/x.apple.alias",
  "audio/x-voc",
  "audio/vnd.dolby.dd-raw",
  "audio/x-m4a",
  "image/apng",
  "image/x-olympus-orf",
  "image/x-sony-arw",
  "image/x-adobe-dng",
  "image/x-nikon-nef",
  "image/x-panasonic-rw2",
  "image/x-fujifilm-raf",
  "video/x-m4v",
  "video/3gpp2",
  "application/x-esri-shape",
  "audio/aac",
  "audio/x-it",
  "audio/x-s3m",
  "audio/x-xm",
  "video/MP1S",
  "video/MP2P",
  "application/vnd.sketchup.skp",
  "image/avif",
  "application/x-lzh-compressed",
  "application/pgp-encrypted",
  "application/x-asar",
  "model/stl",
  "application/vnd.ms-htmlhelp",
  "model/3mf",
  "image/jxl",
  "application/zstd",
  "image/jls",
  "application/vnd.ms-outlook",
  "image/vnd.dwg",
  "application/x-parquet",
  "application/java-vm",
  "application/x-arj",
  "application/x-cpio",
  "application/x-ace-compressed",
  "application/avro",
  "application/vnd.iccprofile",
  "application/x.autodesk.fbx",
  "application/vnd.visio",
  "application/vnd.android.package-archive",
  "application/vnd.google.draco",
  "application/x-lz4",
  "application/vnd.openxmlformats-officedocument.presentationml.template",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
  "application/vnd.ms-excel.template.macroenabled.12",
  "application/vnd.oasis.opendocument.text-template",
  "application/vnd.oasis.opendocument.spreadsheet-template",
  "application/vnd.oasis.opendocument.presentation-template",
  "application/vnd.oasis.opendocument.graphics",
  "application/vnd.oasis.opendocument.graphics-template",
  "application/vnd.ms-excel.sheet.macroenabled.12",
  "application/vnd.ms-word.document.macroenabled.12",
  "application/vnd.ms-word.template.macroenabled.12",
  "application/vnd.ms-powerpoint.template.macroenabled.12",
  "application/vnd.ms-powerpoint.presentation.macroenabled.12",
  "application/java-archive",
  "application/vnd.rn-realmedia"
];

// node_modules/file-type/core.js
var reasonableDetectionSizeInBytes = 4100;
async function fileTypeFromBuffer(input) {
  return new FileTypeParser().fromBuffer(input);
}
function getFileTypeFromMimeType(mimeType) {
  switch (mimeType.toLowerCase()) {
    case "application/epub+zip":
      return {
        ext: "epub",
        mime: "application/epub+zip"
      };
    case "application/vnd.oasis.opendocument.text":
      return {
        ext: "odt",
        mime: "application/vnd.oasis.opendocument.text"
      };
    case "application/vnd.oasis.opendocument.text-template":
      return {
        ext: "ott",
        mime: "application/vnd.oasis.opendocument.text-template"
      };
    case "application/vnd.oasis.opendocument.spreadsheet":
      return {
        ext: "ods",
        mime: "application/vnd.oasis.opendocument.spreadsheet"
      };
    case "application/vnd.oasis.opendocument.spreadsheet-template":
      return {
        ext: "ots",
        mime: "application/vnd.oasis.opendocument.spreadsheet-template"
      };
    case "application/vnd.oasis.opendocument.presentation":
      return {
        ext: "odp",
        mime: "application/vnd.oasis.opendocument.presentation"
      };
    case "application/vnd.oasis.opendocument.presentation-template":
      return {
        ext: "otp",
        mime: "application/vnd.oasis.opendocument.presentation-template"
      };
    case "application/vnd.oasis.opendocument.graphics":
      return {
        ext: "odg",
        mime: "application/vnd.oasis.opendocument.graphics"
      };
    case "application/vnd.oasis.opendocument.graphics-template":
      return {
        ext: "otg",
        mime: "application/vnd.oasis.opendocument.graphics-template"
      };
    case "application/vnd.openxmlformats-officedocument.presentationml.slideshow":
      return {
        ext: "ppsx",
        mime: "application/vnd.openxmlformats-officedocument.presentationml.slideshow"
      };
    case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
      return {
        ext: "xlsx",
        mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
      };
    case "application/vnd.ms-excel.sheet.macroenabled":
      return {
        ext: "xlsm",
        mime: "application/vnd.ms-excel.sheet.macroenabled.12"
      };
    case "application/vnd.openxmlformats-officedocument.spreadsheetml.template":
      return {
        ext: "xltx",
        mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.template"
      };
    case "application/vnd.ms-excel.template.macroenabled":
      return {
        ext: "xltm",
        mime: "application/vnd.ms-excel.template.macroenabled.12"
      };
    case "application/vnd.ms-powerpoint.slideshow.macroenabled":
      return {
        ext: "ppsm",
        mime: "application/vnd.ms-powerpoint.slideshow.macroenabled.12"
      };
    case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
      return {
        ext: "docx",
        mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
      };
    case "application/vnd.ms-word.document.macroenabled":
      return {
        ext: "docm",
        mime: "application/vnd.ms-word.document.macroenabled.12"
      };
    case "application/vnd.openxmlformats-officedocument.wordprocessingml.template":
      return {
        ext: "dotx",
        mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.template"
      };
    case "application/vnd.ms-word.template.macroenabledtemplate":
      return {
        ext: "dotm",
        mime: "application/vnd.ms-word.template.macroenabled.12"
      };
    case "application/vnd.openxmlformats-officedocument.presentationml.template":
      return {
        ext: "potx",
        mime: "application/vnd.openxmlformats-officedocument.presentationml.template"
      };
    case "application/vnd.ms-powerpoint.template.macroenabled":
      return {
        ext: "potm",
        mime: "application/vnd.ms-powerpoint.template.macroenabled.12"
      };
    case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
      return {
        ext: "pptx",
        mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation"
      };
    case "application/vnd.ms-powerpoint.presentation.macroenabled":
      return {
        ext: "pptm",
        mime: "application/vnd.ms-powerpoint.presentation.macroenabled.12"
      };
    case "application/vnd.ms-visio.drawing":
      return {
        ext: "vsdx",
        mime: "application/vnd.visio"
      };
    case "application/vnd.ms-package.3dmanufacturing-3dmodel+xml":
      return {
        ext: "3mf",
        mime: "model/3mf"
      };
    default:
  }
}
function _check(buffer, headers, options) {
  options = {
    offset: 0,
    ...options
  };
  for (const [index, header] of headers.entries()) {
    if (options.mask) {
      if (header !== (options.mask[index] & buffer[index + options.offset])) {
        return false;
      }
    } else if (header !== buffer[index + options.offset]) {
      return false;
    }
  }
  return true;
}
class FileTypeParser {
  constructor(options) {
    this.detectors = [
      ...options?.customDetectors ?? [],
      { id: "core", detect: this.detectConfident },
      { id: "core.imprecise", detect: this.detectImprecise }
    ];
    this.tokenizerOptions = {
      abortSignal: options?.signal
    };
  }
  async fromTokenizer(tokenizer) {
    const initialPosition = tokenizer.position;
    for (const detector of this.detectors) {
      const fileType = await detector.detect(tokenizer);
      if (fileType) {
        return fileType;
      }
      if (initialPosition !== tokenizer.position) {
        return;
      }
    }
  }
  async fromBuffer(input) {
    if (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {
      throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`ArrayBuffer\`, got \`${typeof input}\``);
    }
    const buffer = input instanceof Uint8Array ? input : new Uint8Array(input);
    if (!(buffer?.length > 1)) {
      return;
    }
    return this.fromTokenizer(fromBuffer(buffer, this.tokenizerOptions));
  }
  async fromBlob(blob) {
    return this.fromStream(blob.stream());
  }
  async fromStream(stream) {
    const tokenizer = await fromWebStream(stream, this.tokenizerOptions);
    try {
      return await this.fromTokenizer(tokenizer);
    } finally {
      await tokenizer.close();
    }
  }
  async toDetectionStream(stream, options) {
    const { sampleSize = reasonableDetectionSizeInBytes } = options;
    let detectedFileType;
    let firstChunk;
    const reader = stream.getReader({ mode: "byob" });
    try {
      const { value: chunk, done } = await reader.read(new Uint8Array(sampleSize));
      firstChunk = chunk;
      if (!done && chunk) {
        try {
          detectedFileType = await this.fromBuffer(chunk.slice(0, sampleSize));
        } catch (error) {
          if (!(error instanceof EndOfStreamError)) {
            throw error;
          }
          detectedFileType = undefined;
        }
      }
      firstChunk = chunk;
    } finally {
      reader.releaseLock();
    }
    const transformStream = new TransformStream({
      async start(controller) {
        controller.enqueue(firstChunk);
      },
      transform(chunk, controller) {
        controller.enqueue(chunk);
      }
    });
    const newStream = stream.pipeThrough(transformStream);
    newStream.fileType = detectedFileType;
    return newStream;
  }
  check(header, options) {
    return _check(this.buffer, header, options);
  }
  checkString(header, options) {
    return this.check(stringToBytes(header), options);
  }
  detectConfident = async (tokenizer) => {
    this.buffer = new Uint8Array(reasonableDetectionSizeInBytes);
    if (tokenizer.fileInfo.size === undefined) {
      tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;
    }
    this.tokenizer = tokenizer;
    await tokenizer.peekBuffer(this.buffer, { length: 12, mayBeLess: true });
    if (this.check([66, 77])) {
      return {
        ext: "bmp",
        mime: "image/bmp"
      };
    }
    if (this.check([11, 119])) {
      return {
        ext: "ac3",
        mime: "audio/vnd.dolby.dd-raw"
      };
    }
    if (this.check([120, 1])) {
      return {
        ext: "dmg",
        mime: "application/x-apple-diskimage"
      };
    }
    if (this.check([77, 90])) {
      return {
        ext: "exe",
        mime: "application/x-msdownload"
      };
    }
    if (this.check([37, 33])) {
      await tokenizer.peekBuffer(this.buffer, { length: 24, mayBeLess: true });
      if (this.checkString("PS-Adobe-", { offset: 2 }) && this.checkString(" EPSF-", { offset: 14 })) {
        return {
          ext: "eps",
          mime: "application/eps"
        };
      }
      return {
        ext: "ps",
        mime: "application/postscript"
      };
    }
    if (this.check([31, 160]) || this.check([31, 157])) {
      return {
        ext: "Z",
        mime: "application/x-compress"
      };
    }
    if (this.check([199, 113])) {
      return {
        ext: "cpio",
        mime: "application/x-cpio"
      };
    }
    if (this.check([96, 234])) {
      return {
        ext: "arj",
        mime: "application/x-arj"
      };
    }
    if (this.check([239, 187, 191])) {
      this.tokenizer.ignore(3);
      return this.detectConfident(tokenizer);
    }
    if (this.check([71, 73, 70])) {
      return {
        ext: "gif",
        mime: "image/gif"
      };
    }
    if (this.check([73, 73, 188])) {
      return {
        ext: "jxr",
        mime: "image/vnd.ms-photo"
      };
    }
    if (this.check([31, 139, 8])) {
      return {
        ext: "gz",
        mime: "application/gzip"
      };
    }
    if (this.check([66, 90, 104])) {
      return {
        ext: "bz2",
        mime: "application/x-bzip2"
      };
    }
    if (this.checkString("ID3")) {
      await tokenizer.ignore(6);
      const id3HeaderLength = await tokenizer.readToken(uint32SyncSafeToken);
      if (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {
        return {
          ext: "mp3",
          mime: "audio/mpeg"
        };
      }
      await tokenizer.ignore(id3HeaderLength);
      return this.fromTokenizer(tokenizer);
    }
    if (this.checkString("MP+")) {
      return {
        ext: "mpc",
        mime: "audio/x-musepack"
      };
    }
    if ((this.buffer[0] === 67 || this.buffer[0] === 70) && this.check([87, 83], { offset: 1 })) {
      return {
        ext: "swf",
        mime: "application/x-shockwave-flash"
      };
    }
    if (this.check([255, 216, 255])) {
      if (this.check([247], { offset: 3 })) {
        return {
          ext: "jls",
          mime: "image/jls"
        };
      }
      return {
        ext: "jpg",
        mime: "image/jpeg"
      };
    }
    if (this.check([79, 98, 106, 1])) {
      return {
        ext: "avro",
        mime: "application/avro"
      };
    }
    if (this.checkString("FLIF")) {
      return {
        ext: "flif",
        mime: "image/flif"
      };
    }
    if (this.checkString("8BPS")) {
      return {
        ext: "psd",
        mime: "image/vnd.adobe.photoshop"
      };
    }
    if (this.checkString("MPCK")) {
      return {
        ext: "mpc",
        mime: "audio/x-musepack"
      };
    }
    if (this.checkString("FORM")) {
      return {
        ext: "aif",
        mime: "audio/aiff"
      };
    }
    if (this.checkString("icns", { offset: 0 })) {
      return {
        ext: "icns",
        mime: "image/icns"
      };
    }
    if (this.check([80, 75, 3, 4])) {
      let fileType;
      await new ZipHandler(tokenizer).unzip((zipHeader) => {
        switch (zipHeader.filename) {
          case "META-INF/mozilla.rsa":
            fileType = {
              ext: "xpi",
              mime: "application/x-xpinstall"
            };
            return {
              stop: true
            };
          case "META-INF/MANIFEST.MF":
            fileType = {
              ext: "jar",
              mime: "application/java-archive"
            };
            return {
              stop: true
            };
          case "mimetype":
            return {
              async handler(fileData) {
                const mimeType = new TextDecoder("utf-8").decode(fileData).trim();
                fileType = getFileTypeFromMimeType(mimeType);
              },
              stop: true
            };
          case "[Content_Types].xml":
            return {
              async handler(fileData) {
                let xmlContent = new TextDecoder("utf-8").decode(fileData);
                const endPos = xmlContent.indexOf('.main+xml"');
                if (endPos === -1) {
                  const mimeType = "application/vnd.ms-package.3dmanufacturing-3dmodel+xml";
                  if (xmlContent.includes(`ContentType="${mimeType}"`)) {
                    fileType = getFileTypeFromMimeType(mimeType);
                  }
                } else {
                  xmlContent = xmlContent.slice(0, Math.max(0, endPos));
                  const firstPos = xmlContent.lastIndexOf('"');
                  const mimeType = xmlContent.slice(Math.max(0, firstPos + 1));
                  fileType = getFileTypeFromMimeType(mimeType);
                }
              },
              stop: true
            };
          default:
            if (/classes\d*\.dex/.test(zipHeader.filename)) {
              fileType = {
                ext: "apk",
                mime: "application/vnd.android.package-archive"
              };
              return { stop: true };
            }
            return {};
        }
      });
      return fileType ?? {
        ext: "zip",
        mime: "application/zip"
      };
    }
    if (this.checkString("OggS")) {
      await tokenizer.ignore(28);
      const type = new Uint8Array(8);
      await tokenizer.readBuffer(type);
      if (_check(type, [79, 112, 117, 115, 72, 101, 97, 100])) {
        return {
          ext: "opus",
          mime: "audio/ogg; codecs=opus"
        };
      }
      if (_check(type, [128, 116, 104, 101, 111, 114, 97])) {
        return {
          ext: "ogv",
          mime: "video/ogg"
        };
      }
      if (_check(type, [1, 118, 105, 100, 101, 111, 0])) {
        return {
          ext: "ogm",
          mime: "video/ogg"
        };
      }
      if (_check(type, [127, 70, 76, 65, 67])) {
        return {
          ext: "oga",
          mime: "audio/ogg"
        };
      }
      if (_check(type, [83, 112, 101, 101, 120, 32, 32])) {
        return {
          ext: "spx",
          mime: "audio/ogg"
        };
      }
      if (_check(type, [1, 118, 111, 114, 98, 105, 115])) {
        return {
          ext: "ogg",
          mime: "audio/ogg"
        };
      }
      return {
        ext: "ogx",
        mime: "application/ogg"
      };
    }
    if (this.check([80, 75]) && (this.buffer[2] === 3 || this.buffer[2] === 5 || this.buffer[2] === 7) && (this.buffer[3] === 4 || this.buffer[3] === 6 || this.buffer[3] === 8)) {
      return {
        ext: "zip",
        mime: "application/zip"
      };
    }
    if (this.checkString("MThd")) {
      return {
        ext: "mid",
        mime: "audio/midi"
      };
    }
    if (this.checkString("wOFF") && (this.check([0, 1, 0, 0], { offset: 4 }) || this.checkString("OTTO", { offset: 4 }))) {
      return {
        ext: "woff",
        mime: "font/woff"
      };
    }
    if (this.checkString("wOF2") && (this.check([0, 1, 0, 0], { offset: 4 }) || this.checkString("OTTO", { offset: 4 }))) {
      return {
        ext: "woff2",
        mime: "font/woff2"
      };
    }
    if (this.check([212, 195, 178, 161]) || this.check([161, 178, 195, 212])) {
      return {
        ext: "pcap",
        mime: "application/vnd.tcpdump.pcap"
      };
    }
    if (this.checkString("DSD ")) {
      return {
        ext: "dsf",
        mime: "audio/x-dsf"
      };
    }
    if (this.checkString("LZIP")) {
      return {
        ext: "lz",
        mime: "application/x-lzip"
      };
    }
    if (this.checkString("fLaC")) {
      return {
        ext: "flac",
        mime: "audio/x-flac"
      };
    }
    if (this.check([66, 80, 71, 251])) {
      return {
        ext: "bpg",
        mime: "image/bpg"
      };
    }
    if (this.checkString("wvpk")) {
      return {
        ext: "wv",
        mime: "audio/wavpack"
      };
    }
    if (this.checkString("%PDF")) {
      try {
        const skipBytes = 1350;
        if (skipBytes === await tokenizer.ignore(skipBytes)) {
          const maxBufferSize2 = 10 * 1024 * 1024;
          const buffer = new Uint8Array(Math.min(maxBufferSize2, tokenizer.fileInfo.size - skipBytes));
          await tokenizer.readBuffer(buffer, { mayBeLess: true });
          if (includes(buffer, new TextEncoder().encode("AIPrivateData"))) {
            return {
              ext: "ai",
              mime: "application/postscript"
            };
          }
        }
      } catch (error) {
        if (!(error instanceof EndOfStreamError)) {
          throw error;
        }
      }
      return {
        ext: "pdf",
        mime: "application/pdf"
      };
    }
    if (this.check([0, 97, 115, 109])) {
      return {
        ext: "wasm",
        mime: "application/wasm"
      };
    }
    if (this.check([73, 73])) {
      const fileType = await this.readTiffHeader(false);
      if (fileType) {
        return fileType;
      }
    }
    if (this.check([77, 77])) {
      const fileType = await this.readTiffHeader(true);
      if (fileType) {
        return fileType;
      }
    }
    if (this.checkString("MAC ")) {
      return {
        ext: "ape",
        mime: "audio/ape"
      };
    }
    if (this.check([26, 69, 223, 163])) {
      async function readField() {
        const msb = await tokenizer.peekNumber(UINT8);
        let mask = 128;
        let ic = 0;
        while ((msb & mask) === 0 && mask !== 0) {
          ++ic;
          mask >>= 1;
        }
        const id = new Uint8Array(ic + 1);
        await tokenizer.readBuffer(id);
        return id;
      }
      async function readElement() {
        const idField = await readField();
        const lengthField = await readField();
        lengthField[0] ^= 128 >> lengthField.length - 1;
        const nrLength = Math.min(6, lengthField.length);
        const idView = new DataView(idField.buffer);
        const lengthView = new DataView(lengthField.buffer, lengthField.length - nrLength, nrLength);
        return {
          id: getUintBE(idView),
          len: getUintBE(lengthView)
        };
      }
      async function readChildren(children) {
        while (children > 0) {
          const element = await readElement();
          if (element.id === 17026) {
            const rawValue = await tokenizer.readToken(new StringType(element.len));
            return rawValue.replaceAll(/\00.*$/g, "");
          }
          await tokenizer.ignore(element.len);
          --children;
        }
      }
      const re = await readElement();
      const documentType = await readChildren(re.len);
      switch (documentType) {
        case "webm":
          return {
            ext: "webm",
            mime: "video/webm"
          };
        case "matroska":
          return {
            ext: "mkv",
            mime: "video/x-matroska"
          };
        default:
          return;
      }
    }
    if (this.checkString("SQLi")) {
      return {
        ext: "sqlite",
        mime: "application/x-sqlite3"
      };
    }
    if (this.check([78, 69, 83, 26])) {
      return {
        ext: "nes",
        mime: "application/x-nintendo-nes-rom"
      };
    }
    if (this.checkString("Cr24")) {
      return {
        ext: "crx",
        mime: "application/x-google-chrome-extension"
      };
    }
    if (this.checkString("MSCF") || this.checkString("ISc(")) {
      return {
        ext: "cab",
        mime: "application/vnd.ms-cab-compressed"
      };
    }
    if (this.check([237, 171, 238, 219])) {
      return {
        ext: "rpm",
        mime: "application/x-rpm"
      };
    }
    if (this.check([197, 208, 211, 198])) {
      return {
        ext: "eps",
        mime: "application/eps"
      };
    }
    if (this.check([40, 181, 47, 253])) {
      return {
        ext: "zst",
        mime: "application/zstd"
      };
    }
    if (this.check([127, 69, 76, 70])) {
      return {
        ext: "elf",
        mime: "application/x-elf"
      };
    }
    if (this.check([33, 66, 68, 78])) {
      return {
        ext: "pst",
        mime: "application/vnd.ms-outlook"
      };
    }
    if (this.checkString("PAR1")) {
      return {
        ext: "parquet",
        mime: "application/x-parquet"
      };
    }
    if (this.checkString("ttcf")) {
      return {
        ext: "ttc",
        mime: "font/collection"
      };
    }
    if (this.check([207, 250, 237, 254])) {
      return {
        ext: "macho",
        mime: "application/x-mach-binary"
      };
    }
    if (this.check([4, 34, 77, 24])) {
      return {
        ext: "lz4",
        mime: "application/x-lz4"
      };
    }
    if (this.check([79, 84, 84, 79, 0])) {
      return {
        ext: "otf",
        mime: "font/otf"
      };
    }
    if (this.checkString("#!AMR")) {
      return {
        ext: "amr",
        mime: "audio/amr"
      };
    }
    if (this.checkString("{\\rtf")) {
      return {
        ext: "rtf",
        mime: "application/rtf"
      };
    }
    if (this.check([70, 76, 86, 1])) {
      return {
        ext: "flv",
        mime: "video/x-flv"
      };
    }
    if (this.checkString("IMPM")) {
      return {
        ext: "it",
        mime: "audio/x-it"
      };
    }
    if (this.checkString("-lh0-", { offset: 2 }) || this.checkString("-lh1-", { offset: 2 }) || this.checkString("-lh2-", { offset: 2 }) || this.checkString("-lh3-", { offset: 2 }) || this.checkString("-lh4-", { offset: 2 }) || this.checkString("-lh5-", { offset: 2 }) || this.checkString("-lh6-", { offset: 2 }) || this.checkString("-lh7-", { offset: 2 }) || this.checkString("-lzs-", { offset: 2 }) || this.checkString("-lz4-", { offset: 2 }) || this.checkString("-lz5-", { offset: 2 }) || this.checkString("-lhd-", { offset: 2 })) {
      return {
        ext: "lzh",
        mime: "application/x-lzh-compressed"
      };
    }
    if (this.check([0, 0, 1, 186])) {
      if (this.check([33], { offset: 4, mask: [241] })) {
        return {
          ext: "mpg",
          mime: "video/MP1S"
        };
      }
      if (this.check([68], { offset: 4, mask: [196] })) {
        return {
          ext: "mpg",
          mime: "video/MP2P"
        };
      }
    }
    if (this.checkString("ITSF")) {
      return {
        ext: "chm",
        mime: "application/vnd.ms-htmlhelp"
      };
    }
    if (this.check([202, 254, 186, 190])) {
      return {
        ext: "class",
        mime: "application/java-vm"
      };
    }
    if (this.checkString(".RMF")) {
      return {
        ext: "rm",
        mime: "application/vnd.rn-realmedia"
      };
    }
    if (this.checkString("DRACO")) {
      return {
        ext: "drc",
        mime: "application/vnd.google.draco"
      };
    }
    if (this.check([253, 55, 122, 88, 90, 0])) {
      return {
        ext: "xz",
        mime: "application/x-xz"
      };
    }
    if (this.checkString("<?xml ")) {
      return {
        ext: "xml",
        mime: "application/xml"
      };
    }
    if (this.check([55, 122, 188, 175, 39, 28])) {
      return {
        ext: "7z",
        mime: "application/x-7z-compressed"
      };
    }
    if (this.check([82, 97, 114, 33, 26, 7]) && (this.buffer[6] === 0 || this.buffer[6] === 1)) {
      return {
        ext: "rar",
        mime: "application/x-rar-compressed"
      };
    }
    if (this.checkString("solid ")) {
      return {
        ext: "stl",
        mime: "model/stl"
      };
    }
    if (this.checkString("AC")) {
      const version = new StringType(4, "latin1").get(this.buffer, 2);
      if (version.match("^d*") && version >= 1000 && version <= 1050) {
        return {
          ext: "dwg",
          mime: "image/vnd.dwg"
        };
      }
    }
    if (this.checkString("070707")) {
      return {
        ext: "cpio",
        mime: "application/x-cpio"
      };
    }
    if (this.checkString("BLENDER")) {
      return {
        ext: "blend",
        mime: "application/x-blender"
      };
    }
    if (this.checkString("!<arch>")) {
      await tokenizer.ignore(8);
      const string = await tokenizer.readToken(new StringType(13, "ascii"));
      if (string === "debian-binary") {
        return {
          ext: "deb",
          mime: "application/x-deb"
        };
      }
      return {
        ext: "ar",
        mime: "application/x-unix-archive"
      };
    }
    if (this.checkString("WEBVTT") && [`
`, "\r", "\t", " ", "\x00"].some((char7) => this.checkString(char7, { offset: 6 }))) {
      return {
        ext: "vtt",
        mime: "text/vtt"
      };
    }
    if (this.check([137, 80, 78, 71, 13, 10, 26, 10])) {
      await tokenizer.ignore(8);
      async function readChunkHeader() {
        return {
          length: await tokenizer.readToken(INT32_BE),
          type: await tokenizer.readToken(new StringType(4, "latin1"))
        };
      }
      do {
        const chunk = await readChunkHeader();
        if (chunk.length < 0) {
          return;
        }
        switch (chunk.type) {
          case "IDAT":
            return {
              ext: "png",
              mime: "image/png"
            };
          case "acTL":
            return {
              ext: "apng",
              mime: "image/apng"
            };
          default:
            await tokenizer.ignore(chunk.length + 4);
        }
      } while (tokenizer.position + 8 < tokenizer.fileInfo.size);
      return {
        ext: "png",
        mime: "image/png"
      };
    }
    if (this.check([65, 82, 82, 79, 87, 49, 0, 0])) {
      return {
        ext: "arrow",
        mime: "application/x-apache-arrow"
      };
    }
    if (this.check([103, 108, 84, 70, 2, 0, 0, 0])) {
      return {
        ext: "glb",
        mime: "model/gltf-binary"
      };
    }
    if (this.check([102, 114, 101, 101], { offset: 4 }) || this.check([109, 100, 97, 116], { offset: 4 }) || this.check([109, 111, 111, 118], { offset: 4 }) || this.check([119, 105, 100, 101], { offset: 4 })) {
      return {
        ext: "mov",
        mime: "video/quicktime"
      };
    }
    if (this.check([73, 73, 82, 79, 8, 0, 0, 0, 24])) {
      return {
        ext: "orf",
        mime: "image/x-olympus-orf"
      };
    }
    if (this.checkString("gimp xcf ")) {
      return {
        ext: "xcf",
        mime: "image/x-xcf"
      };
    }
    if (this.checkString("ftyp", { offset: 4 }) && (this.buffer[8] & 96) !== 0) {
      const brandMajor = new StringType(4, "latin1").get(this.buffer, 8).replace("\x00", " ").trim();
      switch (brandMajor) {
        case "avif":
        case "avis":
          return { ext: "avif", mime: "image/avif" };
        case "mif1":
          return { ext: "heic", mime: "image/heif" };
        case "msf1":
          return { ext: "heic", mime: "image/heif-sequence" };
        case "heic":
        case "heix":
          return { ext: "heic", mime: "image/heic" };
        case "hevc":
        case "hevx":
          return { ext: "heic", mime: "image/heic-sequence" };
        case "qt":
          return { ext: "mov", mime: "video/quicktime" };
        case "M4V":
        case "M4VH":
        case "M4VP":
          return { ext: "m4v", mime: "video/x-m4v" };
        case "M4P":
          return { ext: "m4p", mime: "video/mp4" };
        case "M4B":
          return { ext: "m4b", mime: "audio/mp4" };
        case "M4A":
          return { ext: "m4a", mime: "audio/x-m4a" };
        case "F4V":
          return { ext: "f4v", mime: "video/mp4" };
        case "F4P":
          return { ext: "f4p", mime: "video/mp4" };
        case "F4A":
          return { ext: "f4a", mime: "audio/mp4" };
        case "F4B":
          return { ext: "f4b", mime: "audio/mp4" };
        case "crx":
          return { ext: "cr3", mime: "image/x-canon-cr3" };
        default:
          if (brandMajor.startsWith("3g")) {
            if (brandMajor.startsWith("3g2")) {
              return { ext: "3g2", mime: "video/3gpp2" };
            }
            return { ext: "3gp", mime: "video/3gpp" };
          }
          return { ext: "mp4", mime: "video/mp4" };
      }
    }
    if (this.check([82, 73, 70, 70])) {
      if (this.checkString("WEBP", { offset: 8 })) {
        return {
          ext: "webp",
          mime: "image/webp"
        };
      }
      if (this.check([65, 86, 73], { offset: 8 })) {
        return {
          ext: "avi",
          mime: "video/vnd.avi"
        };
      }
      if (this.check([87, 65, 86, 69], { offset: 8 })) {
        return {
          ext: "wav",
          mime: "audio/wav"
        };
      }
      if (this.check([81, 76, 67, 77], { offset: 8 })) {
        return {
          ext: "qcp",
          mime: "audio/qcelp"
        };
      }
    }
    if (this.check([73, 73, 85, 0, 24, 0, 0, 0, 136, 231, 116, 216])) {
      return {
        ext: "rw2",
        mime: "image/x-panasonic-rw2"
      };
    }
    if (this.check([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
      async function readHeader() {
        const guid = new Uint8Array(16);
        await tokenizer.readBuffer(guid);
        return {
          id: guid,
          size: Number(await tokenizer.readToken(UINT64_LE))
        };
      }
      await tokenizer.ignore(30);
      while (tokenizer.position + 24 < tokenizer.fileInfo.size) {
        const header = await readHeader();
        let payload = header.size - 24;
        if (_check(header.id, [145, 7, 220, 183, 183, 169, 207, 17, 142, 230, 0, 192, 12, 32, 83, 101])) {
          const typeId = new Uint8Array(16);
          payload -= await tokenizer.readBuffer(typeId);
          if (_check(typeId, [64, 158, 105, 248, 77, 91, 207, 17, 168, 253, 0, 128, 95, 92, 68, 43])) {
            return {
              ext: "asf",
              mime: "audio/x-ms-asf"
            };
          }
          if (_check(typeId, [192, 239, 25, 188, 77, 91, 207, 17, 168, 253, 0, 128, 95, 92, 68, 43])) {
            return {
              ext: "asf",
              mime: "video/x-ms-asf"
            };
          }
          break;
        }
        await tokenizer.ignore(payload);
      }
      return {
        ext: "asf",
        mime: "application/vnd.ms-asf"
      };
    }
    if (this.check([171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10])) {
      return {
        ext: "ktx",
        mime: "image/ktx"
      };
    }
    if ((this.check([126, 16, 4]) || this.check([126, 24, 4])) && this.check([48, 77, 73, 69], { offset: 4 })) {
      return {
        ext: "mie",
        mime: "application/x-mie"
      };
    }
    if (this.check([39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], { offset: 2 })) {
      return {
        ext: "shp",
        mime: "application/x-esri-shape"
      };
    }
    if (this.check([255, 79, 255, 81])) {
      return {
        ext: "j2c",
        mime: "image/j2c"
      };
    }
    if (this.check([0, 0, 0, 12, 106, 80, 32, 32, 13, 10, 135, 10])) {
      await tokenizer.ignore(20);
      const type = await tokenizer.readToken(new StringType(4, "ascii"));
      switch (type) {
        case "jp2 ":
          return {
            ext: "jp2",
            mime: "image/jp2"
          };
        case "jpx ":
          return {
            ext: "jpx",
            mime: "image/jpx"
          };
        case "jpm ":
          return {
            ext: "jpm",
            mime: "image/jpm"
          };
        case "mjp2":
          return {
            ext: "mj2",
            mime: "image/mj2"
          };
        default:
          return;
      }
    }
    if (this.check([255, 10]) || this.check([0, 0, 0, 12, 74, 88, 76, 32, 13, 10, 135, 10])) {
      return {
        ext: "jxl",
        mime: "image/jxl"
      };
    }
    if (this.check([254, 255])) {
      if (this.check([0, 60, 0, 63, 0, 120, 0, 109, 0, 108], { offset: 2 })) {
        return {
          ext: "xml",
          mime: "application/xml"
        };
      }
      return;
    }
    if (this.check([208, 207, 17, 224, 161, 177, 26, 225])) {
      return {
        ext: "cfb",
        mime: "application/x-cfb"
      };
    }
    await tokenizer.peekBuffer(this.buffer, { length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true });
    if (this.check([97, 99, 115, 112], { offset: 36 })) {
      return {
        ext: "icc",
        mime: "application/vnd.iccprofile"
      };
    }
    if (this.checkString("**ACE", { offset: 7 }) && this.checkString("**", { offset: 12 })) {
      return {
        ext: "ace",
        mime: "application/x-ace-compressed"
      };
    }
    if (this.checkString("BEGIN:")) {
      if (this.checkString("VCARD", { offset: 6 })) {
        return {
          ext: "vcf",
          mime: "text/vcard"
        };
      }
      if (this.checkString("VCALENDAR", { offset: 6 })) {
        return {
          ext: "ics",
          mime: "text/calendar"
        };
      }
    }
    if (this.checkString("FUJIFILMCCD-RAW")) {
      return {
        ext: "raf",
        mime: "image/x-fujifilm-raf"
      };
    }
    if (this.checkString("Extended Module:")) {
      return {
        ext: "xm",
        mime: "audio/x-xm"
      };
    }
    if (this.checkString("Creative Voice File")) {
      return {
        ext: "voc",
        mime: "audio/x-voc"
      };
    }
    if (this.check([4, 0, 0, 0]) && this.buffer.length >= 16) {
      const jsonSize = new DataView(this.buffer.buffer).getUint32(12, true);
      if (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {
        try {
          const header = new TextDecoder().decode(this.buffer.slice(16, jsonSize + 16));
          const json = JSON.parse(header);
          if (json.files) {
            return {
              ext: "asar",
              mime: "application/x-asar"
            };
          }
        } catch {}
      }
    }
    if (this.check([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2])) {
      return {
        ext: "mxf",
        mime: "application/mxf"
      };
    }
    if (this.checkString("SCRM", { offset: 44 })) {
      return {
        ext: "s3m",
        mime: "audio/x-s3m"
      };
    }
    if (this.check([71]) && this.check([71], { offset: 188 })) {
      return {
        ext: "mts",
        mime: "video/mp2t"
      };
    }
    if (this.check([71], { offset: 4 }) && this.check([71], { offset: 196 })) {
      return {
        ext: "mts",
        mime: "video/mp2t"
      };
    }
    if (this.check([66, 79, 79, 75, 77, 79, 66, 73], { offset: 60 })) {
      return {
        ext: "mobi",
        mime: "application/x-mobipocket-ebook"
      };
    }
    if (this.check([68, 73, 67, 77], { offset: 128 })) {
      return {
        ext: "dcm",
        mime: "application/dicom"
      };
    }
    if (this.check([76, 0, 0, 0, 1, 20, 2, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 70])) {
      return {
        ext: "lnk",
        mime: "application/x.ms.shortcut"
      };
    }
    if (this.check([98, 111, 111, 107, 0, 0, 0, 0, 109, 97, 114, 107, 0, 0, 0, 0])) {
      return {
        ext: "alias",
        mime: "application/x.apple.alias"
      };
    }
    if (this.checkString("Kaydara FBX Binary  \x00")) {
      return {
        ext: "fbx",
        mime: "application/x.autodesk.fbx"
      };
    }
    if (this.check([76, 80], { offset: 34 }) && (this.check([0, 0, 1], { offset: 8 }) || this.check([1, 0, 2], { offset: 8 }) || this.check([2, 0, 2], { offset: 8 }))) {
      return {
        ext: "eot",
        mime: "application/vnd.ms-fontobject"
      };
    }
    if (this.check([6, 6, 237, 245, 216, 29, 70, 229, 189, 49, 239, 231, 254, 116, 183, 29])) {
      return {
        ext: "indd",
        mime: "application/x-indesign"
      };
    }
    await tokenizer.peekBuffer(this.buffer, { length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true });
    if (tarHeaderChecksumMatches(this.buffer)) {
      return {
        ext: "tar",
        mime: "application/x-tar"
      };
    }
    if (this.check([255, 254])) {
      if (this.check([60, 0, 63, 0, 120, 0, 109, 0, 108, 0], { offset: 2 })) {
        return {
          ext: "xml",
          mime: "application/xml"
        };
      }
      if (this.check([255, 14, 83, 0, 107, 0, 101, 0, 116, 0, 99, 0, 104, 0, 85, 0, 112, 0, 32, 0, 77, 0, 111, 0, 100, 0, 101, 0, 108, 0], { offset: 2 })) {
        return {
          ext: "skp",
          mime: "application/vnd.sketchup.skp"
        };
      }
      return;
    }
    if (this.checkString("-----BEGIN PGP MESSAGE-----")) {
      return {
        ext: "pgp",
        mime: "application/pgp-encrypted"
      };
    }
  };
  detectImprecise = async (tokenizer) => {
    this.buffer = new Uint8Array(reasonableDetectionSizeInBytes);
    await tokenizer.peekBuffer(this.buffer, { length: Math.min(8, tokenizer.fileInfo.size), mayBeLess: true });
    if (this.check([0, 0, 1, 186]) || this.check([0, 0, 1, 179])) {
      return {
        ext: "mpg",
        mime: "video/mpeg"
      };
    }
    if (this.check([0, 1, 0, 0, 0])) {
      return {
        ext: "ttf",
        mime: "font/ttf"
      };
    }
    if (this.check([0, 0, 1, 0])) {
      return {
        ext: "ico",
        mime: "image/x-icon"
      };
    }
    if (this.check([0, 0, 2, 0])) {
      return {
        ext: "cur",
        mime: "image/x-icon"
      };
    }
    if (this.buffer.length >= 2 && this.check([255, 224], { offset: 0, mask: [255, 224] })) {
      if (this.check([16], { offset: 1, mask: [22] })) {
        if (this.check([8], { offset: 1, mask: [8] })) {
          return {
            ext: "aac",
            mime: "audio/aac"
          };
        }
        return {
          ext: "aac",
          mime: "audio/aac"
        };
      }
      if (this.check([2], { offset: 1, mask: [6] })) {
        return {
          ext: "mp3",
          mime: "audio/mpeg"
        };
      }
      if (this.check([4], { offset: 1, mask: [6] })) {
        return {
          ext: "mp2",
          mime: "audio/mpeg"
        };
      }
      if (this.check([6], { offset: 1, mask: [6] })) {
        return {
          ext: "mp1",
          mime: "audio/mpeg"
        };
      }
    }
  };
  async readTiffTag(bigEndian) {
    const tagId = await this.tokenizer.readToken(bigEndian ? UINT16_BE : UINT16_LE);
    this.tokenizer.ignore(10);
    switch (tagId) {
      case 50341:
        return {
          ext: "arw",
          mime: "image/x-sony-arw"
        };
      case 50706:
        return {
          ext: "dng",
          mime: "image/x-adobe-dng"
        };
      default:
    }
  }
  async readTiffIFD(bigEndian) {
    const numberOfTags = await this.tokenizer.readToken(bigEndian ? UINT16_BE : UINT16_LE);
    for (let n = 0;n < numberOfTags; ++n) {
      const fileType = await this.readTiffTag(bigEndian);
      if (fileType) {
        return fileType;
      }
    }
  }
  async readTiffHeader(bigEndian) {
    const version = (bigEndian ? UINT16_BE : UINT16_LE).get(this.buffer, 2);
    const ifdOffset = (bigEndian ? UINT32_BE : UINT32_LE).get(this.buffer, 4);
    if (version === 42) {
      if (ifdOffset >= 6) {
        if (this.checkString("CR", { offset: 8 })) {
          return {
            ext: "cr2",
            mime: "image/x-canon-cr2"
          };
        }
        if (ifdOffset >= 8) {
          const someId1 = (bigEndian ? UINT16_BE : UINT16_LE).get(this.buffer, 8);
          const someId2 = (bigEndian ? UINT16_BE : UINT16_LE).get(this.buffer, 10);
          if (someId1 === 28 && someId2 === 254 || someId1 === 31 && someId2 === 11) {
            return {
              ext: "nef",
              mime: "image/x-nikon-nef"
            };
          }
        }
      }
      await this.tokenizer.ignore(ifdOffset);
      const fileType = await this.readTiffIFD(bigEndian);
      return fileType ?? {
        ext: "tif",
        mime: "image/tiff"
      };
    }
    if (version === 43) {
      return {
        ext: "tif",
        mime: "image/tiff"
      };
    }
  }
}
var supportedExtensions = new Set(extensions);
var supportedMimeTypes = new Set(mimeTypes);
// node_modules/fastmcp/dist/FastMCP.js
var import_promises2 = require("fs/promises");

// node_modules/fuse.js/dist/fuse.mjs
function isArray(value) {
  return !Array.isArray ? getTag(value) === "[object Array]" : Array.isArray(value);
}
var INFINITY = 1 / 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  let result2 = value + "";
  return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
}
function toString(value) {
  return value == null ? "" : baseToString(value);
}
function isString(value) {
  return typeof value === "string";
}
function isNumber(value) {
  return typeof value === "number";
}
function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && getTag(value) == "[object Boolean]";
}
function isObject(value) {
  return typeof value === "object";
}
function isObjectLike(value) {
  return isObject(value) && value !== null;
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
function isBlank(value) {
  return !value.trim().length;
}
function getTag(value) {
  return value == null ? value === undefined ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(value);
}
var INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
var LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) => `Invalid value for key ${key}`;
var PATTERN_LENGTH_TOO_LARGE = (max2) => `Pattern length exceeds max of ${max2}.`;
var MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;
var INVALID_KEY_WEIGHT_VALUE = (key) => `Property 'weight' in key '${key}' must be a positive integer`;
var hasOwn = Object.prototype.hasOwnProperty;

class KeyStore {
  constructor(keys) {
    this._keys = [];
    this._keyMap = {};
    let totalWeight = 0;
    keys.forEach((key) => {
      let obj = createKey(key);
      this._keys.push(obj);
      this._keyMap[obj.id] = obj;
      totalWeight += obj.weight;
    });
    this._keys.forEach((key) => {
      key.weight /= totalWeight;
    });
  }
  get(keyId) {
    return this._keyMap[keyId];
  }
  keys() {
    return this._keys;
  }
  toJSON() {
    return JSON.stringify(this._keys);
  }
}
function createKey(key) {
  let path = null;
  let id = null;
  let src = null;
  let weight = 1;
  let getFn = null;
  if (isString(key) || isArray(key)) {
    src = key;
    path = createKeyPath(key);
    id = createKeyId(key);
  } else {
    if (!hasOwn.call(key, "name")) {
      throw new Error(MISSING_KEY_PROPERTY("name"));
    }
    const name = key.name;
    src = name;
    if (hasOwn.call(key, "weight")) {
      weight = key.weight;
      if (weight <= 0) {
        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));
      }
    }
    path = createKeyPath(name);
    id = createKeyId(name);
    getFn = key.getFn;
  }
  return { path, id, weight, src, getFn };
}
function createKeyPath(key) {
  return isArray(key) ? key : key.split(".");
}
function createKeyId(key) {
  return isArray(key) ? key.join(".") : key;
}
function get(obj, path) {
  let list = [];
  let arr = false;
  const deepGet = (obj2, path2, index) => {
    if (!isDefined(obj2)) {
      return;
    }
    if (!path2[index]) {
      list.push(obj2);
    } else {
      let key = path2[index];
      const value = obj2[key];
      if (!isDefined(value)) {
        return;
      }
      if (index === path2.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {
        list.push(toString(value));
      } else if (isArray(value)) {
        arr = true;
        for (let i2 = 0, len = value.length;i2 < len; i2 += 1) {
          deepGet(value[i2], path2, index + 1);
        }
      } else if (path2.length) {
        deepGet(value, path2, index + 1);
      }
    }
  };
  deepGet(obj, isString(path) ? path.split(".") : path, 0);
  return arr ? list : list[0];
}
var MatchOptions = {
  includeMatches: false,
  findAllMatches: false,
  minMatchCharLength: 1
};
var BasicOptions = {
  isCaseSensitive: false,
  ignoreDiacritics: false,
  includeScore: false,
  keys: [],
  shouldSort: true,
  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1
};
var FuzzyOptions = {
  location: 0,
  threshold: 0.6,
  distance: 100
};
var AdvancedOptions = {
  useExtendedSearch: false,
  getFn: get,
  ignoreLocation: false,
  ignoreFieldNorm: false,
  fieldNormWeight: 1
};
var Config = {
  ...BasicOptions,
  ...MatchOptions,
  ...FuzzyOptions,
  ...AdvancedOptions
};
var SPACE = /[^ ]+/g;
function norm(weight = 1, mantissa = 3) {
  const cache = new Map;
  const m = Math.pow(10, mantissa);
  return {
    get(value) {
      const numTokens = value.match(SPACE).length;
      if (cache.has(numTokens)) {
        return cache.get(numTokens);
      }
      const norm2 = 1 / Math.pow(numTokens, 0.5 * weight);
      const n = parseFloat(Math.round(norm2 * m) / m);
      cache.set(numTokens, n);
      return n;
    },
    clear() {
      cache.clear();
    }
  };
}

class FuseIndex {
  constructor({
    getFn = Config.getFn,
    fieldNormWeight = Config.fieldNormWeight
  } = {}) {
    this.norm = norm(fieldNormWeight, 3);
    this.getFn = getFn;
    this.isCreated = false;
    this.setIndexRecords();
  }
  setSources(docs = []) {
    this.docs = docs;
  }
  setIndexRecords(records = []) {
    this.records = records;
  }
  setKeys(keys = []) {
    this.keys = keys;
    this._keysMap = {};
    keys.forEach((key, idx) => {
      this._keysMap[key.id] = idx;
    });
  }
  create() {
    if (this.isCreated || !this.docs.length) {
      return;
    }
    this.isCreated = true;
    if (isString(this.docs[0])) {
      this.docs.forEach((doc, docIndex) => {
        this._addString(doc, docIndex);
      });
    } else {
      this.docs.forEach((doc, docIndex) => {
        this._addObject(doc, docIndex);
      });
    }
    this.norm.clear();
  }
  add(doc) {
    const idx = this.size();
    if (isString(doc)) {
      this._addString(doc, idx);
    } else {
      this._addObject(doc, idx);
    }
  }
  removeAt(idx) {
    this.records.splice(idx, 1);
    for (let i2 = idx, len = this.size();i2 < len; i2 += 1) {
      this.records[i2].i -= 1;
    }
  }
  getValueForItemAtKeyId(item, keyId) {
    return item[this._keysMap[keyId]];
  }
  size() {
    return this.records.length;
  }
  _addString(doc, docIndex) {
    if (!isDefined(doc) || isBlank(doc)) {
      return;
    }
    let record = {
      v: doc,
      i: docIndex,
      n: this.norm.get(doc)
    };
    this.records.push(record);
  }
  _addObject(doc, docIndex) {
    let record = { i: docIndex, $: {} };
    this.keys.forEach((key, keyIndex) => {
      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);
      if (!isDefined(value)) {
        return;
      }
      if (isArray(value)) {
        let subRecords = [];
        const stack = [{ nestedArrIndex: -1, value }];
        while (stack.length) {
          const { nestedArrIndex, value: value2 } = stack.pop();
          if (!isDefined(value2)) {
            continue;
          }
          if (isString(value2) && !isBlank(value2)) {
            let subRecord = {
              v: value2,
              i: nestedArrIndex,
              n: this.norm.get(value2)
            };
            subRecords.push(subRecord);
          } else if (isArray(value2)) {
            value2.forEach((item, k) => {
              stack.push({
                nestedArrIndex: k,
                value: item
              });
            });
          } else
            ;
        }
        record.$[keyIndex] = subRecords;
      } else if (isString(value) && !isBlank(value)) {
        let subRecord = {
          v: value,
          n: this.norm.get(value)
        };
        record.$[keyIndex] = subRecord;
      }
    });
    this.records.push(record);
  }
  toJSON() {
    return {
      keys: this.keys,
      records: this.records
    };
  }
}
function createIndex(keys, docs, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
  const myIndex = new FuseIndex({ getFn, fieldNormWeight });
  myIndex.setKeys(keys.map(createKey));
  myIndex.setSources(docs);
  myIndex.create();
  return myIndex;
}
function parseIndex(data, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
  const { keys, records } = data;
  const myIndex = new FuseIndex({ getFn, fieldNormWeight });
  myIndex.setKeys(keys);
  myIndex.setIndexRecords(records);
  return myIndex;
}
function computeScore$1(pattern, {
  errors = 0,
  currentLocation = 0,
  expectedLocation = 0,
  distance = Config.distance,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  const accuracy = errors / pattern.length;
  if (ignoreLocation) {
    return accuracy;
  }
  const proximity = Math.abs(expectedLocation - currentLocation);
  if (!distance) {
    return proximity ? 1 : accuracy;
  }
  return accuracy + proximity / distance;
}
function convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {
  let indices = [];
  let start = -1;
  let end = -1;
  let i2 = 0;
  for (let len = matchmask.length;i2 < len; i2 += 1) {
    let match = matchmask[i2];
    if (match && start === -1) {
      start = i2;
    } else if (!match && start !== -1) {
      end = i2 - 1;
      if (end - start + 1 >= minMatchCharLength) {
        indices.push([start, end]);
      }
      start = -1;
    }
  }
  if (matchmask[i2 - 1] && i2 - start >= minMatchCharLength) {
    indices.push([start, i2 - 1]);
  }
  return indices;
}
var MAX_BITS = 32;
function search(text, pattern, patternAlphabet, {
  location = Config.location,
  distance = Config.distance,
  threshold = Config.threshold,
  findAllMatches = Config.findAllMatches,
  minMatchCharLength = Config.minMatchCharLength,
  includeMatches = Config.includeMatches,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  if (pattern.length > MAX_BITS) {
    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
  }
  const patternLen = pattern.length;
  const textLen = text.length;
  const expectedLocation = Math.max(0, Math.min(location, textLen));
  let currentThreshold = threshold;
  let bestLocation = expectedLocation;
  const computeMatches = minMatchCharLength > 1 || includeMatches;
  const matchMask = computeMatches ? Array(textLen) : [];
  let index;
  while ((index = text.indexOf(pattern, bestLocation)) > -1) {
    let score = computeScore$1(pattern, {
      currentLocation: index,
      expectedLocation,
      distance,
      ignoreLocation
    });
    currentThreshold = Math.min(score, currentThreshold);
    bestLocation = index + patternLen;
    if (computeMatches) {
      let i2 = 0;
      while (i2 < patternLen) {
        matchMask[index + i2] = 1;
        i2 += 1;
      }
    }
  }
  bestLocation = -1;
  let lastBitArr = [];
  let finalScore = 1;
  let binMax = patternLen + textLen;
  const mask = 1 << patternLen - 1;
  for (let i2 = 0;i2 < patternLen; i2 += 1) {
    let binMin = 0;
    let binMid = binMax;
    while (binMin < binMid) {
      const score2 = computeScore$1(pattern, {
        errors: i2,
        currentLocation: expectedLocation + binMid,
        expectedLocation,
        distance,
        ignoreLocation
      });
      if (score2 <= currentThreshold) {
        binMin = binMid;
      } else {
        binMax = binMid;
      }
      binMid = Math.floor((binMax - binMin) / 2 + binMin);
    }
    binMax = binMid;
    let start = Math.max(1, expectedLocation - binMid + 1);
    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;
    let bitArr = Array(finish + 2);
    bitArr[finish + 1] = (1 << i2) - 1;
    for (let j = finish;j >= start; j -= 1) {
      let currentLocation = j - 1;
      let charMatch = patternAlphabet[text.charAt(currentLocation)];
      if (computeMatches) {
        matchMask[currentLocation] = +!!charMatch;
      }
      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;
      if (i2) {
        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
      }
      if (bitArr[j] & mask) {
        finalScore = computeScore$1(pattern, {
          errors: i2,
          currentLocation,
          expectedLocation,
          distance,
          ignoreLocation
        });
        if (finalScore <= currentThreshold) {
          currentThreshold = finalScore;
          bestLocation = currentLocation;
          if (bestLocation <= expectedLocation) {
            break;
          }
          start = Math.max(1, 2 * expectedLocation - bestLocation);
        }
      }
    }
    const score = computeScore$1(pattern, {
      errors: i2 + 1,
      currentLocation: expectedLocation,
      expectedLocation,
      distance,
      ignoreLocation
    });
    if (score > currentThreshold) {
      break;
    }
    lastBitArr = bitArr;
  }
  const result2 = {
    isMatch: bestLocation >= 0,
    score: Math.max(0.001, finalScore)
  };
  if (computeMatches) {
    const indices = convertMaskToIndices(matchMask, minMatchCharLength);
    if (!indices.length) {
      result2.isMatch = false;
    } else if (includeMatches) {
      result2.indices = indices;
    }
  }
  return result2;
}
function createPatternAlphabet(pattern) {
  let mask = {};
  for (let i2 = 0, len = pattern.length;i2 < len; i2 += 1) {
    const char = pattern.charAt(i2);
    mask[char] = (mask[char] || 0) | 1 << len - i2 - 1;
  }
  return mask;
}
var stripDiacritics = String.prototype.normalize ? (str) => str.normalize("NFD").replace(/[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/g, "") : (str) => str;

class BitapSearch {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreDiacritics = Config.ignoreDiacritics,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    this.options = {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreDiacritics,
      ignoreLocation
    };
    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;
    this.pattern = pattern;
    this.chunks = [];
    if (!this.pattern.length) {
      return;
    }
    const addChunk = (pattern2, startIndex) => {
      this.chunks.push({
        pattern: pattern2,
        alphabet: createPatternAlphabet(pattern2),
        startIndex
      });
    };
    const len = this.pattern.length;
    if (len > MAX_BITS) {
      let i2 = 0;
      const remainder = len % MAX_BITS;
      const end = len - remainder;
      while (i2 < end) {
        addChunk(this.pattern.substr(i2, MAX_BITS), i2);
        i2 += MAX_BITS;
      }
      if (remainder) {
        const startIndex = len - MAX_BITS;
        addChunk(this.pattern.substr(startIndex), startIndex);
      }
    } else {
      addChunk(this.pattern, 0);
    }
  }
  searchIn(text) {
    const { isCaseSensitive, ignoreDiacritics, includeMatches } = this.options;
    text = isCaseSensitive ? text : text.toLowerCase();
    text = ignoreDiacritics ? stripDiacritics(text) : text;
    if (this.pattern === text) {
      let result3 = {
        isMatch: true,
        score: 0
      };
      if (includeMatches) {
        result3.indices = [[0, text.length - 1]];
      }
      return result3;
    }
    const {
      location,
      distance,
      threshold,
      findAllMatches,
      minMatchCharLength,
      ignoreLocation
    } = this.options;
    let allIndices = [];
    let totalScore = 0;
    let hasMatches = false;
    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {
      const { isMatch, score, indices } = search(text, pattern, alphabet, {
        location: location + startIndex,
        distance,
        threshold,
        findAllMatches,
        minMatchCharLength,
        includeMatches,
        ignoreLocation
      });
      if (isMatch) {
        hasMatches = true;
      }
      totalScore += score;
      if (isMatch && indices) {
        allIndices = [...allIndices, ...indices];
      }
    });
    let result2 = {
      isMatch: hasMatches,
      score: hasMatches ? totalScore / this.chunks.length : 1
    };
    if (hasMatches && includeMatches) {
      result2.indices = allIndices;
    }
    return result2;
  }
}

class BaseMatch {
  constructor(pattern) {
    this.pattern = pattern;
  }
  static isMultiMatch(pattern) {
    return getMatch(pattern, this.multiRegex);
  }
  static isSingleMatch(pattern) {
    return getMatch(pattern, this.singleRegex);
  }
  search() {}
}
function getMatch(pattern, exp) {
  const matches = pattern.match(exp);
  return matches ? matches[1] : null;
}

class ExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "exact";
  }
  static get multiRegex() {
    return /^="(.*)"$/;
  }
  static get singleRegex() {
    return /^=(.*)$/;
  }
  search(text) {
    const isMatch = text === this.pattern;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
}

class InverseExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-exact";
  }
  static get multiRegex() {
    return /^!"(.*)"$/;
  }
  static get singleRegex() {
    return /^!(.*)$/;
  }
  search(text) {
    const index = text.indexOf(this.pattern);
    const isMatch = index === -1;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
}

class PrefixExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "prefix-exact";
  }
  static get multiRegex() {
    return /^\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^\^(.*)$/;
  }
  search(text) {
    const isMatch = text.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
}

class InversePrefixExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-prefix-exact";
  }
  static get multiRegex() {
    return /^!\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^!\^(.*)$/;
  }
  search(text) {
    const isMatch = !text.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
}

class SuffixExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "suffix-exact";
  }
  static get multiRegex() {
    return /^"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^(.*)\$$/;
  }
  search(text) {
    const isMatch = text.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [text.length - this.pattern.length, text.length - 1]
    };
  }
}

class InverseSuffixExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-suffix-exact";
  }
  static get multiRegex() {
    return /^!"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^!(.*)\$$/;
  }
  search(text) {
    const isMatch = !text.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
}

class FuzzyMatch extends BaseMatch {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreDiacritics = Config.ignoreDiacritics,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    super(pattern);
    this._bitapSearch = new BitapSearch(pattern, {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreDiacritics,
      ignoreLocation
    });
  }
  static get type() {
    return "fuzzy";
  }
  static get multiRegex() {
    return /^"(.*)"$/;
  }
  static get singleRegex() {
    return /^(.*)$/;
  }
  search(text) {
    return this._bitapSearch.searchIn(text);
  }
}

class IncludeMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "include";
  }
  static get multiRegex() {
    return /^'"(.*)"$/;
  }
  static get singleRegex() {
    return /^'(.*)$/;
  }
  search(text) {
    let location = 0;
    let index;
    const indices = [];
    const patternLen = this.pattern.length;
    while ((index = text.indexOf(this.pattern, location)) > -1) {
      location = index + patternLen;
      indices.push([index, location - 1]);
    }
    const isMatch = !!indices.length;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices
    };
  }
}
var searchers = [
  ExactMatch,
  IncludeMatch,
  PrefixExactMatch,
  InversePrefixExactMatch,
  InverseSuffixExactMatch,
  SuffixExactMatch,
  InverseExactMatch,
  FuzzyMatch
];
var searchersLen = searchers.length;
var SPACE_RE = / +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;
var OR_TOKEN = "|";
function parseQuery(pattern, options = {}) {
  return pattern.split(OR_TOKEN).map((item) => {
    let query = item.trim().split(SPACE_RE).filter((item2) => item2 && !!item2.trim());
    let results = [];
    for (let i2 = 0, len = query.length;i2 < len; i2 += 1) {
      const queryItem = query[i2];
      let found = false;
      let idx = -1;
      while (!found && ++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isMultiMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          found = true;
        }
      }
      if (found) {
        continue;
      }
      idx = -1;
      while (++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isSingleMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          break;
        }
      }
    }
    return results;
  });
}
var MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);

class ExtendedSearch {
  constructor(pattern, {
    isCaseSensitive = Config.isCaseSensitive,
    ignoreDiacritics = Config.ignoreDiacritics,
    includeMatches = Config.includeMatches,
    minMatchCharLength = Config.minMatchCharLength,
    ignoreLocation = Config.ignoreLocation,
    findAllMatches = Config.findAllMatches,
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance
  } = {}) {
    this.query = null;
    this.options = {
      isCaseSensitive,
      ignoreDiacritics,
      includeMatches,
      minMatchCharLength,
      findAllMatches,
      ignoreLocation,
      location,
      threshold,
      distance
    };
    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;
    this.pattern = pattern;
    this.query = parseQuery(this.pattern, this.options);
  }
  static condition(_, options) {
    return options.useExtendedSearch;
  }
  searchIn(text) {
    const query = this.query;
    if (!query) {
      return {
        isMatch: false,
        score: 1
      };
    }
    const { includeMatches, isCaseSensitive, ignoreDiacritics } = this.options;
    text = isCaseSensitive ? text : text.toLowerCase();
    text = ignoreDiacritics ? stripDiacritics(text) : text;
    let numMatches = 0;
    let allIndices = [];
    let totalScore = 0;
    for (let i2 = 0, qLen = query.length;i2 < qLen; i2 += 1) {
      const searchers2 = query[i2];
      allIndices.length = 0;
      numMatches = 0;
      for (let j = 0, pLen = searchers2.length;j < pLen; j += 1) {
        const searcher = searchers2[j];
        const { isMatch, indices, score } = searcher.search(text);
        if (isMatch) {
          numMatches += 1;
          totalScore += score;
          if (includeMatches) {
            const type = searcher.constructor.type;
            if (MultiMatchSet.has(type)) {
              allIndices = [...allIndices, ...indices];
            } else {
              allIndices.push(indices);
            }
          }
        } else {
          totalScore = 0;
          numMatches = 0;
          allIndices.length = 0;
          break;
        }
      }
      if (numMatches) {
        let result2 = {
          isMatch: true,
          score: totalScore / numMatches
        };
        if (includeMatches) {
          result2.indices = allIndices;
        }
        return result2;
      }
    }
    return {
      isMatch: false,
      score: 1
    };
  }
}
var registeredSearchers = [];
function register(...args) {
  registeredSearchers.push(...args);
}
function createSearcher(pattern, options) {
  for (let i2 = 0, len = registeredSearchers.length;i2 < len; i2 += 1) {
    let searcherClass = registeredSearchers[i2];
    if (searcherClass.condition(pattern, options)) {
      return new searcherClass(pattern, options);
    }
  }
  return new BitapSearch(pattern, options);
}
var LogicalOperator = {
  AND: "$and",
  OR: "$or"
};
var KeyType = {
  PATH: "$path",
  PATTERN: "$val"
};
var isExpression = (query) => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
var isPath = (query) => !!query[KeyType.PATH];
var isLeaf = (query) => !isArray(query) && isObject(query) && !isExpression(query);
var convertToExplicit = (query) => ({
  [LogicalOperator.AND]: Object.keys(query).map((key) => ({
    [key]: query[key]
  }))
});
function parse(query, options, { auto = true } = {}) {
  const next = (query2) => {
    let keys = Object.keys(query2);
    const isQueryPath = isPath(query2);
    if (!isQueryPath && keys.length > 1 && !isExpression(query2)) {
      return next(convertToExplicit(query2));
    }
    if (isLeaf(query2)) {
      const key = isQueryPath ? query2[KeyType.PATH] : keys[0];
      const pattern = isQueryPath ? query2[KeyType.PATTERN] : query2[key];
      if (!isString(pattern)) {
        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
      }
      const obj = {
        keyId: createKeyId(key),
        pattern
      };
      if (auto) {
        obj.searcher = createSearcher(pattern, options);
      }
      return obj;
    }
    let node = {
      children: [],
      operator: keys[0]
    };
    keys.forEach((key) => {
      const value = query2[key];
      if (isArray(value)) {
        value.forEach((item) => {
          node.children.push(next(item));
        });
      }
    });
    return node;
  };
  if (!isExpression(query)) {
    query = convertToExplicit(query);
  }
  return next(query);
}
function computeScore(results, { ignoreFieldNorm = Config.ignoreFieldNorm }) {
  results.forEach((result2) => {
    let totalScore = 1;
    result2.matches.forEach(({ key, norm: norm2, score }) => {
      const weight = key ? key.weight : null;
      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm2));
    });
    result2.score = totalScore;
  });
}
function transformMatches(result2, data) {
  const matches = result2.matches;
  data.matches = [];
  if (!isDefined(matches)) {
    return;
  }
  matches.forEach((match) => {
    if (!isDefined(match.indices) || !match.indices.length) {
      return;
    }
    const { indices, value } = match;
    let obj = {
      indices,
      value
    };
    if (match.key) {
      obj.key = match.key.src;
    }
    if (match.idx > -1) {
      obj.refIndex = match.idx;
    }
    data.matches.push(obj);
  });
}
function transformScore(result2, data) {
  data.score = result2.score;
}
function format(results, docs, {
  includeMatches = Config.includeMatches,
  includeScore = Config.includeScore
} = {}) {
  const transformers = [];
  if (includeMatches)
    transformers.push(transformMatches);
  if (includeScore)
    transformers.push(transformScore);
  return results.map((result2) => {
    const { idx } = result2;
    const data = {
      item: docs[idx],
      refIndex: idx
    };
    if (transformers.length) {
      transformers.forEach((transformer) => {
        transformer(result2, data);
      });
    }
    return data;
  });
}

class Fuse {
  constructor(docs, options = {}, index) {
    this.options = { ...Config, ...options };
    if (this.options.useExtendedSearch && false) {}
    this._keyStore = new KeyStore(this.options.keys);
    this.setCollection(docs, index);
  }
  setCollection(docs, index) {
    this._docs = docs;
    if (index && !(index instanceof FuseIndex)) {
      throw new Error(INCORRECT_INDEX_TYPE);
    }
    this._myIndex = index || createIndex(this.options.keys, this._docs, {
      getFn: this.options.getFn,
      fieldNormWeight: this.options.fieldNormWeight
    });
  }
  add(doc) {
    if (!isDefined(doc)) {
      return;
    }
    this._docs.push(doc);
    this._myIndex.add(doc);
  }
  remove(predicate = () => false) {
    const results = [];
    for (let i2 = 0, len = this._docs.length;i2 < len; i2 += 1) {
      const doc = this._docs[i2];
      if (predicate(doc, i2)) {
        this.removeAt(i2);
        i2 -= 1;
        len -= 1;
        results.push(doc);
      }
    }
    return results;
  }
  removeAt(idx) {
    this._docs.splice(idx, 1);
    this._myIndex.removeAt(idx);
  }
  getIndex() {
    return this._myIndex;
  }
  search(query, { limit = -1 } = {}) {
    const {
      includeMatches,
      includeScore,
      shouldSort,
      sortFn,
      ignoreFieldNorm
    } = this.options;
    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
    computeScore(results, { ignoreFieldNorm });
    if (shouldSort) {
      results.sort(sortFn);
    }
    if (isNumber(limit) && limit > -1) {
      results = results.slice(0, limit);
    }
    return format(results, this._docs, {
      includeMatches,
      includeScore
    });
  }
  _searchStringList(query) {
    const searcher = createSearcher(query, this.options);
    const { records } = this._myIndex;
    const results = [];
    records.forEach(({ v: text, i: idx, n: norm2 }) => {
      if (!isDefined(text)) {
        return;
      }
      const { isMatch, score, indices } = searcher.searchIn(text);
      if (isMatch) {
        results.push({
          item: text,
          idx,
          matches: [{ score, value: text, norm: norm2, indices }]
        });
      }
    });
    return results;
  }
  _searchLogical(query) {
    const expression = parse(query, this.options);
    const evaluate = (node, item, idx) => {
      if (!node.children) {
        const { keyId, searcher } = node;
        const matches = this._findMatches({
          key: this._keyStore.get(keyId),
          value: this._myIndex.getValueForItemAtKeyId(item, keyId),
          searcher
        });
        if (matches && matches.length) {
          return [
            {
              idx,
              item,
              matches
            }
          ];
        }
        return [];
      }
      const res = [];
      for (let i2 = 0, len = node.children.length;i2 < len; i2 += 1) {
        const child = node.children[i2];
        const result2 = evaluate(child, item, idx);
        if (result2.length) {
          res.push(...result2);
        } else if (node.operator === LogicalOperator.AND) {
          return [];
        }
      }
      return res;
    };
    const records = this._myIndex.records;
    const resultMap = {};
    const results = [];
    records.forEach(({ $: item, i: idx }) => {
      if (isDefined(item)) {
        let expResults = evaluate(expression, item, idx);
        if (expResults.length) {
          if (!resultMap[idx]) {
            resultMap[idx] = { idx, item, matches: [] };
            results.push(resultMap[idx]);
          }
          expResults.forEach(({ matches }) => {
            resultMap[idx].matches.push(...matches);
          });
        }
      }
    });
    return results;
  }
  _searchObjectList(query) {
    const searcher = createSearcher(query, this.options);
    const { keys, records } = this._myIndex;
    const results = [];
    records.forEach(({ $: item, i: idx }) => {
      if (!isDefined(item)) {
        return;
      }
      let matches = [];
      keys.forEach((key, keyIndex) => {
        matches.push(...this._findMatches({
          key,
          value: item[keyIndex],
          searcher
        }));
      });
      if (matches.length) {
        results.push({
          idx,
          item,
          matches
        });
      }
    });
    return results;
  }
  _findMatches({ key, value, searcher }) {
    if (!isDefined(value)) {
      return [];
    }
    let matches = [];
    if (isArray(value)) {
      value.forEach(({ v: text, i: idx, n: norm2 }) => {
        if (!isDefined(text)) {
          return;
        }
        const { isMatch, score, indices } = searcher.searchIn(text);
        if (isMatch) {
          matches.push({
            score,
            key,
            value: text,
            idx,
            norm: norm2,
            indices
          });
        }
      });
    } else {
      const { v: text, n: norm2 } = value;
      const { isMatch, score, indices } = searcher.searchIn(text);
      if (isMatch) {
        matches.push({ score, key, value: text, norm: norm2, indices });
      }
    }
    return matches;
  }
}
Fuse.version = "7.1.0";
Fuse.createIndex = createIndex;
Fuse.parseIndex = parseIndex;
Fuse.config = Config;
{
  Fuse.parseQuery = parse;
}
{
  register(ExtendedSearch);
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/streamableHttp.js
var import_raw_body = __toESM(require_raw_body());
var import_content_type = __toESM(require_content_type());
var import_node_crypto = require("node:crypto");
var MAXIMUM_MESSAGE_SIZE = "4mb";

class StreamableHTTPServerTransport {
  constructor(options) {
    var _a2;
    this._started = false;
    this._streamMapping = new Map;
    this._requestToStreamMapping = new Map;
    this._requestResponseMap = new Map;
    this._initialized = false;
    this._enableJsonResponse = false;
    this._standaloneSseStreamId = "_GET_stream";
    this.sessionIdGenerator = options.sessionIdGenerator;
    this._enableJsonResponse = (_a2 = options.enableJsonResponse) !== null && _a2 !== undefined ? _a2 : false;
    this._eventStore = options.eventStore;
    this._onsessioninitialized = options.onsessioninitialized;
  }
  async start() {
    if (this._started) {
      throw new Error("Transport already started");
    }
    this._started = true;
  }
  async handleRequest(req, res, parsedBody) {
    if (req.method === "POST") {
      await this.handlePostRequest(req, res, parsedBody);
    } else if (req.method === "GET") {
      await this.handleGetRequest(req, res);
    } else if (req.method === "DELETE") {
      await this.handleDeleteRequest(req, res);
    } else {
      await this.handleUnsupportedRequest(res);
    }
  }
  async handleGetRequest(req, res) {
    const acceptHeader = req.headers.accept;
    if (!(acceptHeader === null || acceptHeader === undefined ? undefined : acceptHeader.includes("text/event-stream"))) {
      res.writeHead(406).end(JSON.stringify({
        jsonrpc: "2.0",
        error: {
          code: -32000,
          message: "Not Acceptable: Client must accept text/event-stream"
        },
        id: null
      }));
      return;
    }
    if (!this.validateSession(req, res)) {
      return;
    }
    if (this._eventStore) {
      const lastEventId = req.headers["last-event-id"];
      if (lastEventId) {
        await this.replayEvents(lastEventId, res);
        return;
      }
    }
    const headers = {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache, no-transform",
      Connection: "keep-alive"
    };
    if (this.sessionId !== undefined) {
      headers["mcp-session-id"] = this.sessionId;
    }
    if (this._streamMapping.get(this._standaloneSseStreamId) !== undefined) {
      res.writeHead(409).end(JSON.stringify({
        jsonrpc: "2.0",
        error: {
          code: -32000,
          message: "Conflict: Only one SSE stream is allowed per session"
        },
        id: null
      }));
      return;
    }
    res.writeHead(200, headers).flushHeaders();
    this._streamMapping.set(this._standaloneSseStreamId, res);
    res.on("close", () => {
      this._streamMapping.delete(this._standaloneSseStreamId);
    });
  }
  async replayEvents(lastEventId, res) {
    var _a2, _b2;
    if (!this._eventStore) {
      return;
    }
    try {
      const headers = {
        "Content-Type": "text/event-stream",
        "Cache-Control": "no-cache, no-transform",
        Connection: "keep-alive"
      };
      if (this.sessionId !== undefined) {
        headers["mcp-session-id"] = this.sessionId;
      }
      res.writeHead(200, headers).flushHeaders();
      const streamId = await ((_a2 = this._eventStore) === null || _a2 === undefined ? undefined : _a2.replayEventsAfter(lastEventId, {
        send: async (eventId, message) => {
          var _a3;
          if (!this.writeSSEEvent(res, message, eventId)) {
            (_a3 = this.onerror) === null || _a3 === undefined || _a3.call(this, new Error("Failed replay events"));
            res.end();
          }
        }
      }));
      this._streamMapping.set(streamId, res);
    } catch (error) {
      (_b2 = this.onerror) === null || _b2 === undefined || _b2.call(this, error);
    }
  }
  writeSSEEvent(res, message, eventId) {
    let eventData = `event: message
`;
    if (eventId) {
      eventData += `id: ${eventId}
`;
    }
    eventData += `data: ${JSON.stringify(message)}

`;
    return res.write(eventData);
  }
  async handleUnsupportedRequest(res) {
    res.writeHead(405, {
      Allow: "GET, POST, DELETE"
    }).end(JSON.stringify({
      jsonrpc: "2.0",
      error: {
        code: -32000,
        message: "Method not allowed."
      },
      id: null
    }));
  }
  async handlePostRequest(req, res, parsedBody) {
    var _a2, _b2, _c, _d, _e;
    try {
      const acceptHeader = req.headers.accept;
      if (!(acceptHeader === null || acceptHeader === undefined ? undefined : acceptHeader.includes("application/json")) || !acceptHeader.includes("text/event-stream")) {
        res.writeHead(406).end(JSON.stringify({
          jsonrpc: "2.0",
          error: {
            code: -32000,
            message: "Not Acceptable: Client must accept both application/json and text/event-stream"
          },
          id: null
        }));
        return;
      }
      const ct = req.headers["content-type"];
      if (!ct || !ct.includes("application/json")) {
        res.writeHead(415).end(JSON.stringify({
          jsonrpc: "2.0",
          error: {
            code: -32000,
            message: "Unsupported Media Type: Content-Type must be application/json"
          },
          id: null
        }));
        return;
      }
      let rawMessage;
      if (parsedBody !== undefined) {
        rawMessage = parsedBody;
      } else {
        const parsedCt = import_content_type.default.parse(ct);
        const body = await import_raw_body.default(req, {
          limit: MAXIMUM_MESSAGE_SIZE,
          encoding: (_a2 = parsedCt.parameters.charset) !== null && _a2 !== undefined ? _a2 : "utf-8"
        });
        rawMessage = JSON.parse(body.toString());
      }
      let messages;
      if (Array.isArray(rawMessage)) {
        messages = rawMessage.map((msg) => JSONRPCMessageSchema.parse(msg));
      } else {
        messages = [JSONRPCMessageSchema.parse(rawMessage)];
      }
      const isInitializationRequest = messages.some(isInitializeRequest);
      if (isInitializationRequest) {
        if (this._initialized && this.sessionId !== undefined) {
          res.writeHead(400).end(JSON.stringify({
            jsonrpc: "2.0",
            error: {
              code: -32600,
              message: "Invalid Request: Server already initialized"
            },
            id: null
          }));
          return;
        }
        if (messages.length > 1) {
          res.writeHead(400).end(JSON.stringify({
            jsonrpc: "2.0",
            error: {
              code: -32600,
              message: "Invalid Request: Only one initialization request is allowed"
            },
            id: null
          }));
          return;
        }
        this.sessionId = (_b2 = this.sessionIdGenerator) === null || _b2 === undefined ? undefined : _b2.call(this);
        this._initialized = true;
        if (this.sessionId && this._onsessioninitialized) {
          this._onsessioninitialized(this.sessionId);
        }
      }
      if (!isInitializationRequest && !this.validateSession(req, res)) {
        return;
      }
      const hasRequests = messages.some(isJSONRPCRequest);
      if (!hasRequests) {
        res.writeHead(202).end();
        for (const message of messages) {
          (_c = this.onmessage) === null || _c === undefined || _c.call(this, message);
        }
      } else if (hasRequests) {
        const streamId = import_node_crypto.randomUUID();
        if (!this._enableJsonResponse) {
          const headers = {
            "Content-Type": "text/event-stream",
            "Cache-Control": "no-cache",
            Connection: "keep-alive"
          };
          if (this.sessionId !== undefined) {
            headers["mcp-session-id"] = this.sessionId;
          }
          res.writeHead(200, headers);
        }
        for (const message of messages) {
          if (isJSONRPCRequest(message)) {
            this._streamMapping.set(streamId, res);
            this._requestToStreamMapping.set(message.id, streamId);
          }
        }
        res.on("close", () => {
          this._streamMapping.delete(streamId);
        });
        for (const message of messages) {
          (_d = this.onmessage) === null || _d === undefined || _d.call(this, message);
        }
      }
    } catch (error) {
      res.writeHead(400).end(JSON.stringify({
        jsonrpc: "2.0",
        error: {
          code: -32700,
          message: "Parse error",
          data: String(error)
        },
        id: null
      }));
      (_e = this.onerror) === null || _e === undefined || _e.call(this, error);
    }
  }
  async handleDeleteRequest(req, res) {
    if (!this.validateSession(req, res)) {
      return;
    }
    await this.close();
    res.writeHead(200).end();
  }
  validateSession(req, res) {
    if (this.sessionIdGenerator === undefined) {
      return true;
    }
    if (!this._initialized) {
      res.writeHead(400).end(JSON.stringify({
        jsonrpc: "2.0",
        error: {
          code: -32000,
          message: "Bad Request: Server not initialized"
        },
        id: null
      }));
      return false;
    }
    const sessionId = req.headers["mcp-session-id"];
    if (!sessionId) {
      res.writeHead(400).end(JSON.stringify({
        jsonrpc: "2.0",
        error: {
          code: -32000,
          message: "Bad Request: Mcp-Session-Id header is required"
        },
        id: null
      }));
      return false;
    } else if (Array.isArray(sessionId)) {
      res.writeHead(400).end(JSON.stringify({
        jsonrpc: "2.0",
        error: {
          code: -32000,
          message: "Bad Request: Mcp-Session-Id header must be a single value"
        },
        id: null
      }));
      return false;
    } else if (sessionId !== this.sessionId) {
      res.writeHead(404).end(JSON.stringify({
        jsonrpc: "2.0",
        error: {
          code: -32001,
          message: "Session not found"
        },
        id: null
      }));
      return false;
    }
    return true;
  }
  async close() {
    var _a2;
    this._streamMapping.forEach((response) => {
      response.end();
    });
    this._streamMapping.clear();
    this._requestResponseMap.clear();
    (_a2 = this.onclose) === null || _a2 === undefined || _a2.call(this);
  }
  async send(message, options) {
    let requestId = options === null || options === undefined ? undefined : options.relatedRequestId;
    if (isJSONRPCResponse(message) || isJSONRPCError(message)) {
      requestId = message.id;
    }
    if (requestId === undefined) {
      if (isJSONRPCResponse(message) || isJSONRPCError(message)) {
        throw new Error("Cannot send a response on a standalone SSE stream unless resuming a previous client request");
      }
      const standaloneSse = this._streamMapping.get(this._standaloneSseStreamId);
      if (standaloneSse === undefined) {
        return;
      }
      let eventId;
      if (this._eventStore) {
        eventId = await this._eventStore.storeEvent(this._standaloneSseStreamId, message);
      }
      this.writeSSEEvent(standaloneSse, message, eventId);
      return;
    }
    const streamId = this._requestToStreamMapping.get(requestId);
    const response = this._streamMapping.get(streamId);
    if (!streamId) {
      throw new Error(`No connection established for request ID: ${String(requestId)}`);
    }
    if (!this._enableJsonResponse) {
      let eventId;
      if (this._eventStore) {
        eventId = await this._eventStore.storeEvent(streamId, message);
      }
      if (response) {
        this.writeSSEEvent(response, message, eventId);
      }
    }
    if (isJSONRPCResponse(message) || isJSONRPCError(message)) {
      this._requestResponseMap.set(requestId, message);
      const relatedIds = Array.from(this._requestToStreamMapping.entries()).filter(([_, streamId2]) => this._streamMapping.get(streamId2) === response).map(([id]) => id);
      const allResponsesReady = relatedIds.every((id) => this._requestResponseMap.has(id));
      if (allResponsesReady) {
        if (!response) {
          throw new Error(`No connection established for request ID: ${String(requestId)}`);
        }
        if (this._enableJsonResponse) {
          const headers = {
            "Content-Type": "application/json"
          };
          if (this.sessionId !== undefined) {
            headers["mcp-session-id"] = this.sessionId;
          }
          const responses = relatedIds.map((id) => this._requestResponseMap.get(id));
          response.writeHead(200, headers);
          if (responses.length === 1) {
            response.end(JSON.stringify(responses[0]));
          } else {
            response.end(JSON.stringify(responses));
          }
        } else {
          response.end();
        }
        for (const id of relatedIds) {
          this._requestResponseMap.delete(id);
          this._requestToStreamMapping.delete(id);
        }
      }
    }
  }
}

// node_modules/mcp-proxy/dist/chunk-FMSNG7MS.js
var import_http = __toESM(require("http"));
var import_node_crypto3 = require("node:crypto");

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/sse.js
var import_node_crypto2 = require("node:crypto");
var import_raw_body2 = __toESM(require_raw_body());
var import_content_type2 = __toESM(require_content_type());
var import_url = require("url");
var MAXIMUM_MESSAGE_SIZE2 = "4mb";

class SSEServerTransport {
  constructor(_endpoint, res) {
    this._endpoint = _endpoint;
    this.res = res;
    this._sessionId = import_node_crypto2.randomUUID();
  }
  async start() {
    if (this._sseResponse) {
      throw new Error("SSEServerTransport already started! If using Server class, note that connect() calls start() automatically.");
    }
    this.res.writeHead(200, {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache, no-transform",
      Connection: "keep-alive"
    });
    const dummyBase = "http://localhost";
    const endpointUrl = new import_url.URL(this._endpoint, dummyBase);
    endpointUrl.searchParams.set("sessionId", this._sessionId);
    const relativeUrlWithSession = endpointUrl.pathname + endpointUrl.search + endpointUrl.hash;
    this.res.write(`event: endpoint
data: ${relativeUrlWithSession}

`);
    this._sseResponse = this.res;
    this.res.on("close", () => {
      var _a2;
      this._sseResponse = undefined;
      (_a2 = this.onclose) === null || _a2 === undefined || _a2.call(this);
    });
  }
  async handlePostMessage(req, res, parsedBody) {
    var _a2, _b2, _c;
    if (!this._sseResponse) {
      const message = "SSE connection not established";
      res.writeHead(500).end(message);
      throw new Error(message);
    }
    const authInfo = req.auth;
    let body;
    try {
      const ct = import_content_type2.default.parse((_a2 = req.headers["content-type"]) !== null && _a2 !== undefined ? _a2 : "");
      if (ct.type !== "application/json") {
        throw new Error(`Unsupported content-type: ${ct}`);
      }
      body = parsedBody !== null && parsedBody !== undefined ? parsedBody : await import_raw_body2.default(req, {
        limit: MAXIMUM_MESSAGE_SIZE2,
        encoding: (_b2 = ct.parameters.charset) !== null && _b2 !== undefined ? _b2 : "utf-8"
      });
    } catch (error) {
      res.writeHead(400).end(String(error));
      (_c = this.onerror) === null || _c === undefined || _c.call(this, error);
      return;
    }
    try {
      await this.handleMessage(typeof body === "string" ? JSON.parse(body) : body, { authInfo });
    } catch (_d) {
      res.writeHead(400).end(`Invalid message: ${body}`);
      return;
    }
    res.writeHead(202).end("Accepted");
  }
  async handleMessage(message, extra) {
    var _a2, _b2;
    let parsedMessage;
    try {
      parsedMessage = JSONRPCMessageSchema.parse(message);
    } catch (error) {
      (_a2 = this.onerror) === null || _a2 === undefined || _a2.call(this, error);
      throw error;
    }
    (_b2 = this.onmessage) === null || _b2 === undefined || _b2.call(this, parsedMessage, extra);
  }
  async close() {
    var _a2, _b2;
    (_a2 = this._sseResponse) === null || _a2 === undefined || _a2.end();
    this._sseResponse = undefined;
    (_b2 = this.onclose) === null || _b2 === undefined || _b2.call(this);
  }
  async send(message) {
    if (!this._sseResponse) {
      throw new Error("Not connected");
    }
    this._sseResponse.write(`event: message
data: ${JSON.stringify(message)}

`);
  }
  get sessionId() {
    return this._sessionId;
  }
}

// node_modules/mcp-proxy/dist/chunk-FMSNG7MS.js
var import_http2 = __toESM(require("http"));
var InMemoryEventStore = class {
  events = /* @__PURE__ */ new Map;
  async replayEventsAfter(lastEventId, {
    send
  }) {
    if (!lastEventId || !this.events.has(lastEventId)) {
      return "";
    }
    const streamId = this.getStreamIdFromEventId(lastEventId);
    if (!streamId) {
      return "";
    }
    let foundLastEvent = false;
    const sortedEvents = [...this.events.entries()].sort((a, b) => a[0].localeCompare(b[0]));
    for (const [
      eventId,
      { message, streamId: eventStreamId }
    ] of sortedEvents) {
      if (eventStreamId !== streamId) {
        continue;
      }
      if (eventId === lastEventId) {
        foundLastEvent = true;
        continue;
      }
      if (foundLastEvent) {
        await send(eventId, message);
      }
    }
    return streamId;
  }
  async storeEvent(streamId, message) {
    const eventId = this.generateEventId(streamId);
    this.events.set(eventId, { message, streamId });
    return eventId;
  }
  generateEventId(streamId) {
    return `${streamId}_${Date.now()}_${Math.random().toString(36).substring(2, 10)}`;
  }
  getStreamIdFromEventId(eventId) {
    const parts = eventId.split("_");
    return parts.length > 0 ? parts[0] : "";
  }
};
var startHTTPStreamServer = async ({
  createServer,
  endpoint,
  eventStore,
  onClose,
  onConnect,
  onUnhandledRequest,
  port
}) => {
  const activeTransports = {};
  const httpServer = import_http.default.createServer(async (req, res) => {
    if (req.headers.origin) {
      try {
        const origin = new URL(req.headers.origin);
        res.setHeader("Access-Control-Allow-Origin", origin.origin);
        res.setHeader("Access-Control-Allow-Credentials", "true");
        res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        res.setHeader("Access-Control-Allow-Headers", "*");
      } catch (error) {
        console.error("Error parsing origin:", error);
      }
    }
    if (req.method === "OPTIONS") {
      res.writeHead(204);
      res.end();
      return;
    }
    if (req.method === "GET" && req.url === `/ping`) {
      res.writeHead(200).end("pong");
      return;
    }
    if (req.method === "POST" && new URL(req.url, "http://localhost").pathname === endpoint) {
      try {
        const sessionId = Array.isArray(req.headers["mcp-session-id"]) ? req.headers["mcp-session-id"][0] : req.headers["mcp-session-id"];
        let transport;
        let server;
        const body = await getBody(req);
        if (sessionId && activeTransports[sessionId]) {
          transport = activeTransports[sessionId].transport;
          server = activeTransports[sessionId].server;
        } else if (!sessionId && isInitializeRequest(body)) {
          transport = new StreamableHTTPServerTransport({
            eventStore: eventStore || new InMemoryEventStore,
            onsessioninitialized: (_sessionId) => {
              activeTransports[_sessionId] = {
                server,
                transport
              };
            },
            sessionIdGenerator: import_node_crypto3.randomUUID
          });
          transport.onclose = async () => {
            const sid = transport.sessionId;
            if (sid && activeTransports[sid]) {
              onClose?.(server);
              try {
                await server.close();
              } catch (error) {
                console.error("Error closing server:", error);
              }
              delete activeTransports[sid];
            }
          };
          try {
            server = await createServer(req);
          } catch (error) {
            if (error instanceof Response) {
              res.writeHead(error.status).end(error.statusText);
              return;
            }
            res.writeHead(500).end("Error creating server");
            return;
          }
          server.connect(transport);
          onConnect?.(server);
          await transport.handleRequest(req, res, body);
          return;
        } else {
          res.setHeader("Content-Type", "application/json");
          res.writeHead(400).end(JSON.stringify({
            error: {
              code: -32000,
              message: "Bad Request: No valid session ID provided"
            },
            id: null,
            jsonrpc: "2.0"
          }));
          return;
        }
        await transport.handleRequest(req, res, body);
      } catch (error) {
        console.error("Error handling request:", error);
        res.setHeader("Content-Type", "application/json");
        res.writeHead(500).end(JSON.stringify({
          error: { code: -32603, message: "Internal Server Error" },
          id: null,
          jsonrpc: "2.0"
        }));
      }
      return;
    }
    if (req.method === "GET" && new URL(req.url, "http://localhost").pathname === endpoint) {
      const sessionId = req.headers["mcp-session-id"];
      const activeTransport = sessionId ? activeTransports[sessionId] : undefined;
      if (!sessionId) {
        res.writeHead(400).end("No sessionId");
        return;
      }
      if (!activeTransport) {
        res.writeHead(400).end("No active transport");
        return;
      }
      const lastEventId = req.headers["last-event-id"];
      if (lastEventId) {
        console.log(`Client reconnecting with Last-Event-ID: ${lastEventId}`);
      } else {
        console.log(`Establishing new SSE stream for session ${sessionId}`);
      }
      await activeTransport.transport.handleRequest(req, res);
      return;
    }
    if (req.method === "DELETE" && new URL(req.url, "http://localhost").pathname === endpoint) {
      console.log("received delete request");
      const sessionId = req.headers["mcp-session-id"];
      if (!sessionId) {
        res.writeHead(400).end("Invalid or missing sessionId");
        return;
      }
      console.log("received delete request for session", sessionId);
      const { server, transport } = activeTransports[sessionId];
      if (!transport) {
        res.writeHead(400).end("No active transport");
        return;
      }
      try {
        await transport.handleRequest(req, res);
        onClose?.(server);
      } catch (error) {
        console.error("Error handling delete request:", error);
        res.writeHead(500).end("Error handling delete request");
      }
      return;
    }
    if (onUnhandledRequest) {
      await onUnhandledRequest(req, res);
    } else {
      res.writeHead(404).end();
    }
  });
  await new Promise((resolve) => {
    httpServer.listen(port, "::", () => {
      resolve(undefined);
    });
  });
  return {
    close: async () => {
      for (const transport of Object.values(activeTransports)) {
        await transport.transport.close();
      }
      return new Promise((resolve, reject) => {
        httpServer.close((error) => {
          if (error) {
            reject(error);
            return;
          }
          resolve();
        });
      });
    }
  };
};
function getBody(request) {
  return new Promise((resolve) => {
    const bodyParts = [];
    let body;
    request.on("data", (chunk) => {
      bodyParts.push(chunk);
    }).on("end", () => {
      body = Buffer.concat(bodyParts).toString();
      resolve(JSON.parse(body));
    });
  });
}
var startSSEServer = async ({
  createServer,
  endpoint,
  onClose,
  onConnect,
  onUnhandledRequest,
  port
}) => {
  const activeTransports = {};
  const httpServer = import_http2.default.createServer(async (req, res) => {
    if (req.headers.origin) {
      try {
        const origin = new URL(req.headers.origin);
        res.setHeader("Access-Control-Allow-Origin", origin.origin);
        res.setHeader("Access-Control-Allow-Credentials", "true");
        res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        res.setHeader("Access-Control-Allow-Headers", "*");
      } catch (error) {
        console.error("Error parsing origin:", error);
      }
    }
    if (req.method === "OPTIONS") {
      res.writeHead(204);
      res.end();
      return;
    }
    if (req.method === "GET" && req.url === "/health") {
      res.writeHead(200, { "Content-Type": "text/plain" }).end("OK");
      return;
    }
    if (req.method === "GET" && req.url === `/ping`) {
      res.writeHead(200).end("pong");
      return;
    }
    if (req.method === "GET" && new URL(req.url, "http://localhost").pathname === endpoint) {
      const transport = new SSEServerTransport("/messages", res);
      let server;
      try {
        server = await createServer(req);
      } catch (error) {
        if (error instanceof Response) {
          res.writeHead(error.status).end(error.statusText);
          return;
        }
        res.writeHead(500).end("Error creating server");
        return;
      }
      activeTransports[transport.sessionId] = transport;
      let closed = false;
      res.on("close", async () => {
        closed = true;
        try {
          await server.close();
        } catch (error) {
          console.error("Error closing server:", error);
        }
        delete activeTransports[transport.sessionId];
        onClose?.(server);
      });
      try {
        await server.connect(transport);
        await transport.send({
          jsonrpc: "2.0",
          method: "sse/connection",
          params: { message: "SSE Connection established" }
        });
        onConnect?.(server);
      } catch (error) {
        if (!closed) {
          console.error("Error connecting to server:", error);
          res.writeHead(500).end("Error connecting to server");
        }
      }
      return;
    }
    if (req.method === "POST" && req.url?.startsWith("/messages")) {
      const sessionId = new URL(req.url, "https://example.com").searchParams.get("sessionId");
      if (!sessionId) {
        res.writeHead(400).end("No sessionId");
        return;
      }
      const activeTransport = activeTransports[sessionId];
      if (!activeTransport) {
        res.writeHead(400).end("No active transport");
        return;
      }
      await activeTransport.handlePostMessage(req, res);
      return;
    }
    if (onUnhandledRequest) {
      await onUnhandledRequest(req, res);
    } else {
      res.writeHead(404).end();
    }
  });
  await new Promise((resolve) => {
    httpServer.listen(port, "::", () => {
      resolve(undefined);
    });
  });
  return {
    close: async () => {
      for (const transport of Object.values(activeTransports)) {
        await transport.close();
      }
      return new Promise((resolve, reject) => {
        httpServer.close((error) => {
          if (error) {
            reject(error);
            return;
          }
          resolve();
        });
      });
    }
  };
};

// node_modules/pkce-challenge/dist/index.node.js
var crypto;
crypto = globalThis.crypto?.webcrypto ?? globalThis.crypto ?? import("node:crypto").then((m) => m.webcrypto);

// node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth.js
init_lib();
var OAuthMetadataSchema = z.object({
  issuer: z.string(),
  authorization_endpoint: z.string(),
  token_endpoint: z.string(),
  registration_endpoint: z.string().optional(),
  scopes_supported: z.array(z.string()).optional(),
  response_types_supported: z.array(z.string()),
  response_modes_supported: z.array(z.string()).optional(),
  grant_types_supported: z.array(z.string()).optional(),
  token_endpoint_auth_methods_supported: z.array(z.string()).optional(),
  token_endpoint_auth_signing_alg_values_supported: z.array(z.string()).optional(),
  service_documentation: z.string().optional(),
  revocation_endpoint: z.string().optional(),
  revocation_endpoint_auth_methods_supported: z.array(z.string()).optional(),
  revocation_endpoint_auth_signing_alg_values_supported: z.array(z.string()).optional(),
  introspection_endpoint: z.string().optional(),
  introspection_endpoint_auth_methods_supported: z.array(z.string()).optional(),
  introspection_endpoint_auth_signing_alg_values_supported: z.array(z.string()).optional(),
  code_challenge_methods_supported: z.array(z.string()).optional()
}).passthrough();
var OAuthTokensSchema = z.object({
  access_token: z.string(),
  token_type: z.string(),
  expires_in: z.number().optional(),
  scope: z.string().optional(),
  refresh_token: z.string().optional()
}).strip();
var OAuthErrorResponseSchema = z.object({
  error: z.string(),
  error_description: z.string().optional(),
  error_uri: z.string().optional()
});
var OAuthClientMetadataSchema = z.object({
  redirect_uris: z.array(z.string()).refine((uris) => uris.every((uri) => URL.canParse(uri)), { message: "redirect_uris must contain valid URLs" }),
  token_endpoint_auth_method: z.string().optional(),
  grant_types: z.array(z.string()).optional(),
  response_types: z.array(z.string()).optional(),
  client_name: z.string().optional(),
  client_uri: z.string().optional(),
  logo_uri: z.string().optional(),
  scope: z.string().optional(),
  contacts: z.array(z.string()).optional(),
  tos_uri: z.string().optional(),
  policy_uri: z.string().optional(),
  jwks_uri: z.string().optional(),
  jwks: z.any().optional(),
  software_id: z.string().optional(),
  software_version: z.string().optional()
}).strip();
var OAuthClientInformationSchema = z.object({
  client_id: z.string(),
  client_secret: z.string().optional(),
  client_id_issued_at: z.number().optional(),
  client_secret_expires_at: z.number().optional()
}).strip();
var OAuthClientInformationFullSchema = OAuthClientMetadataSchema.merge(OAuthClientInformationSchema);
var OAuthClientRegistrationErrorSchema = z.object({
  error: z.string(),
  error_description: z.string().optional()
}).strip();
var OAuthTokenRevocationRequestSchema = z.object({
  token: z.string(),
  token_type_hint: z.string().optional()
}).strip();

// node_modules/fastmcp/dist/FastMCP.js
var import_promises3 = require("timers/promises");
var import_undici = __toESM(require_undici());
var import_uri_templates = __toESM(require_uri_templates());

// node_modules/xsschema/dist/index.js
init_index_DtiOmYCK();

// node_modules/fastmcp/dist/FastMCP.js
init_lib();
var imageContent = async (input) => {
  let rawData;
  try {
    if ("url" in input) {
      try {
        const response = await import_undici.fetch(input.url);
        if (!response.ok) {
          throw new Error(`Server responded with status: ${response.status} - ${response.statusText}`);
        }
        rawData = Buffer.from(await response.arrayBuffer());
      } catch (error4) {
        throw new Error(`Failed to fetch image from URL (${input.url}): ${error4 instanceof Error ? error4.message : String(error4)}`);
      }
    } else if ("path" in input) {
      try {
        rawData = await import_promises2.readFile(input.path);
      } catch (error4) {
        throw new Error(`Failed to read image from path (${input.path}): ${error4 instanceof Error ? error4.message : String(error4)}`);
      }
    } else if ("buffer" in input) {
      rawData = input.buffer;
    } else {
      throw new Error("Invalid input: Provide a valid 'url', 'path', or 'buffer'");
    }
    const mimeType = await fileTypeFromBuffer(rawData);
    if (!mimeType || !mimeType.mime.startsWith("image/")) {
      console.warn(`Warning: Content may not be a valid image. Detected MIME: ${mimeType?.mime || "unknown"}`);
    }
    const base64Data = rawData.toString("base64");
    return {
      data: base64Data,
      mimeType: mimeType?.mime ?? "image/png",
      type: "image"
    };
  } catch (error4) {
    if (error4 instanceof Error) {
      throw error4;
    } else {
      throw new Error(`Unexpected error processing image: ${String(error4)}`);
    }
  }
};
var FastMCPError = class extends Error {
  constructor(message) {
    super(message);
    this.name = new.target.name;
  }
};
var UnexpectedStateError = class extends FastMCPError {
  extras;
  constructor(message, extras) {
    super(message);
    this.name = new.target.name;
    this.extras = extras;
  }
};
var UserError = class extends UnexpectedStateError {
};
var TextContentZodSchema = z.object({
  text: z.string(),
  type: z.literal("text")
}).strict();
var ImageContentZodSchema = z.object({
  data: z.string().base64(),
  mimeType: z.string(),
  type: z.literal("image")
}).strict();
var ContentZodSchema = z.discriminatedUnion("type", [
  TextContentZodSchema,
  ImageContentZodSchema
]);
var ContentResultZodSchema = z.object({
  content: ContentZodSchema.array(),
  isError: z.boolean().optional()
}).strict();
var CompletionZodSchema = z.object({
  hasMore: z.optional(z.boolean()),
  total: z.optional(z.number().int()),
  values: z.array(z.string()).max(100)
});
var FastMCPSessionEventEmitterBase = import_events.EventEmitter;
var FastMCPSessionEventEmitter = class extends FastMCPSessionEventEmitterBase {
};
var FastMCPSession = class extends FastMCPSessionEventEmitter {
  get clientCapabilities() {
    return this.#clientCapabilities ?? null;
  }
  get loggingLevel() {
    return this.#loggingLevel;
  }
  get roots() {
    return this.#roots;
  }
  get server() {
    return this.#server;
  }
  #auth;
  #capabilities = {};
  #clientCapabilities;
  #loggingLevel = "info";
  #pingConfig;
  #pingInterval = null;
  #prompts = [];
  #resources = [];
  #resourceTemplates = [];
  #roots = [];
  #rootsConfig;
  #server;
  constructor({
    auth: auth2,
    instructions,
    name,
    ping,
    prompts,
    resources,
    resourcesTemplates,
    roots: roots3,
    tools,
    version
  }) {
    super();
    this.#auth = auth2;
    this.#pingConfig = ping;
    this.#rootsConfig = roots3;
    if (tools.length) {
      this.#capabilities.tools = {};
    }
    if (resources.length || resourcesTemplates.length) {
      this.#capabilities.resources = {};
    }
    if (prompts.length) {
      for (const prompt of prompts) {
        this.addPrompt(prompt);
      }
      this.#capabilities.prompts = {};
    }
    this.#capabilities.logging = {};
    this.#server = new Server({ name, version }, { capabilities: this.#capabilities, instructions });
    this.setupErrorHandling();
    this.setupLoggingHandlers();
    this.setupRootsHandlers();
    this.setupCompleteHandlers();
    if (tools.length) {
      this.setupToolHandlers(tools);
    }
    if (resources.length || resourcesTemplates.length) {
      for (const resource of resources) {
        this.addResource(resource);
      }
      this.setupResourceHandlers(resources);
      if (resourcesTemplates.length) {
        for (const resourceTemplate of resourcesTemplates) {
          this.addResourceTemplate(resourceTemplate);
        }
        this.setupResourceTemplateHandlers(resourcesTemplates);
      }
    }
    if (prompts.length) {
      this.setupPromptHandlers(prompts);
    }
  }
  async close() {
    if (this.#pingInterval) {
      clearInterval(this.#pingInterval);
    }
    try {
      await this.#server.close();
    } catch (error4) {
      console.error("[FastMCP error]", "could not close server", error4);
    }
  }
  async connect(transport) {
    if (this.#server.transport) {
      throw new UnexpectedStateError("Server is already connected");
    }
    await this.#server.connect(transport);
    let attempt3 = 0;
    while (attempt3++ < 10) {
      const capabilities = await this.#server.getClientCapabilities();
      if (capabilities) {
        this.#clientCapabilities = capabilities;
        break;
      }
      await import_promises3.setTimeout(100);
    }
    if (!this.#clientCapabilities) {
      console.warn("[FastMCP warning] could not infer client capabilities");
    }
    if (this.#clientCapabilities?.roots?.listChanged && typeof this.#server.listRoots === "function") {
      try {
        const roots3 = await this.#server.listRoots();
        this.#roots = roots3.roots;
      } catch (e) {
        if (e instanceof McpError && e.code === ErrorCode.MethodNotFound) {
          console.debug("[FastMCP debug] listRoots method not supported by client");
        } else {
          console.error(`[FastMCP error] received error listing roots.

${e instanceof Error ? e.stack : JSON.stringify(e)}`);
        }
      }
    }
    if (this.#clientCapabilities) {
      const pingConfig = this.#getPingConfig(transport);
      if (pingConfig.enabled) {
        this.#pingInterval = setInterval(async () => {
          try {
            await this.#server.ping();
          } catch {
            const logLevel3 = pingConfig.logLevel;
            if (logLevel3 === "debug") {
              console.debug("[FastMCP debug] server ping failed");
            } else if (logLevel3 === "warning") {
              console.warn("[FastMCP warning] server is not responding to ping");
            } else if (logLevel3 === "error") {
              console.error("[FastMCP error] server is not responding to ping");
            } else {
              console.info("[FastMCP info] server ping failed");
            }
          }
        }, pingConfig.intervalMs);
      }
    }
  }
  async requestSampling(message) {
    return this.#server.createMessage(message);
  }
  #getPingConfig(transport) {
    const pingConfig = this.#pingConfig || {};
    let defaultEnabled = false;
    if ("type" in transport) {
      if (transport.type === "sse" || transport.type === "httpStream") {
        defaultEnabled = true;
      }
    }
    return {
      enabled: pingConfig.enabled !== undefined ? pingConfig.enabled : defaultEnabled,
      intervalMs: pingConfig.intervalMs || 5000,
      logLevel: pingConfig.logLevel || "debug"
    };
  }
  addPrompt(inputPrompt) {
    const completers = {};
    const enums = {};
    for (const argument of inputPrompt.arguments ?? []) {
      if (argument.complete) {
        completers[argument.name] = argument.complete;
      }
      if (argument.enum) {
        enums[argument.name] = argument.enum;
      }
    }
    const prompt = {
      ...inputPrompt,
      complete: async (name, value10) => {
        if (completers[name]) {
          return await completers[name](value10);
        }
        if (enums[name]) {
          const fuse = new Fuse(enums[name], {
            keys: ["value"]
          });
          const result2 = fuse.search(value10);
          return {
            total: result2.length,
            values: result2.map((item) => item.item)
          };
        }
        return {
          values: []
        };
      }
    };
    this.#prompts.push(prompt);
  }
  addResource(inputResource) {
    this.#resources.push(inputResource);
  }
  addResourceTemplate(inputResourceTemplate) {
    const completers = {};
    for (const argument of inputResourceTemplate.arguments ?? []) {
      if (argument.complete) {
        completers[argument.name] = argument.complete;
      }
    }
    const resourceTemplate = {
      ...inputResourceTemplate,
      complete: async (name, value10) => {
        if (completers[name]) {
          return await completers[name](value10);
        }
        return {
          values: []
        };
      }
    };
    this.#resourceTemplates.push(resourceTemplate);
  }
  setupCompleteHandlers() {
    this.#server.setRequestHandler(CompleteRequestSchema, async (request2) => {
      if (request2.params.ref.type === "ref/prompt") {
        const prompt = this.#prompts.find((prompt2) => prompt2.name === request2.params.ref.name);
        if (!prompt) {
          throw new UnexpectedStateError("Unknown prompt", {
            request: request2
          });
        }
        if (!prompt.complete) {
          throw new UnexpectedStateError("Prompt does not support completion", {
            request: request2
          });
        }
        const completion = CompletionZodSchema.parse(await prompt.complete(request2.params.argument.name, request2.params.argument.value));
        return {
          completion
        };
      }
      if (request2.params.ref.type === "ref/resource") {
        const resource = this.#resourceTemplates.find((resource2) => resource2.uriTemplate === request2.params.ref.uri);
        if (!resource) {
          throw new UnexpectedStateError("Unknown resource", {
            request: request2
          });
        }
        if (!("uriTemplate" in resource)) {
          throw new UnexpectedStateError("Unexpected resource");
        }
        if (!resource.complete) {
          throw new UnexpectedStateError("Resource does not support completion", {
            request: request2
          });
        }
        const completion = CompletionZodSchema.parse(await resource.complete(request2.params.argument.name, request2.params.argument.value));
        return {
          completion
        };
      }
      throw new UnexpectedStateError("Unexpected completion request", {
        request: request2
      });
    });
  }
  setupErrorHandling() {
    this.#server.onerror = (error4) => {
      console.error("[FastMCP error]", error4);
    };
  }
  setupLoggingHandlers() {
    this.#server.setRequestHandler(SetLevelRequestSchema, (request2) => {
      this.#loggingLevel = request2.params.level;
      return {};
    });
  }
  setupPromptHandlers(prompts) {
    this.#server.setRequestHandler(ListPromptsRequestSchema, async () => {
      return {
        prompts: prompts.map((prompt) => {
          return {
            arguments: prompt.arguments,
            complete: prompt.complete,
            description: prompt.description,
            name: prompt.name
          };
        })
      };
    });
    this.#server.setRequestHandler(GetPromptRequestSchema, async (request2) => {
      const prompt = prompts.find((prompt2) => prompt2.name === request2.params.name);
      if (!prompt) {
        throw new McpError(ErrorCode.MethodNotFound, `Unknown prompt: ${request2.params.name}`);
      }
      const args2 = request2.params.arguments;
      for (const arg of prompt.arguments ?? []) {
        if (arg.required && !(args2 && (arg.name in args2))) {
          throw new McpError(ErrorCode.InvalidRequest, `Missing required argument: ${arg.name}`);
        }
      }
      let result2;
      try {
        result2 = await prompt.load(args2);
      } catch (error4) {
        throw new McpError(ErrorCode.InternalError, `Error loading prompt: ${error4}`);
      }
      return {
        description: prompt.description,
        messages: [
          {
            content: { text: result2, type: "text" },
            role: "user"
          }
        ]
      };
    });
  }
  setupResourceHandlers(resources) {
    this.#server.setRequestHandler(ListResourcesRequestSchema, async () => {
      return {
        resources: resources.map((resource) => {
          return {
            mimeType: resource.mimeType,
            name: resource.name,
            uri: resource.uri
          };
        })
      };
    });
    this.#server.setRequestHandler(ReadResourceRequestSchema, async (request2) => {
      if ("uri" in request2.params) {
        const resource = resources.find((resource2) => ("uri" in resource2) && resource2.uri === request2.params.uri);
        if (!resource) {
          for (const resourceTemplate of this.#resourceTemplates) {
            const uriTemplate = import_uri_templates.default(resourceTemplate.uriTemplate);
            const match43 = uriTemplate.fromUri(request2.params.uri);
            if (!match43) {
              continue;
            }
            const uri = uriTemplate.fill(match43);
            const result2 = await resourceTemplate.load(match43);
            return {
              contents: [
                {
                  mimeType: resourceTemplate.mimeType,
                  name: resourceTemplate.name,
                  uri,
                  ...result2
                }
              ]
            };
          }
          throw new McpError(ErrorCode.MethodNotFound, `Unknown resource: ${request2.params.uri}`);
        }
        if (!("uri" in resource)) {
          throw new UnexpectedStateError("Resource does not support reading");
        }
        let maybeArrayResult;
        try {
          maybeArrayResult = await resource.load();
        } catch (error4) {
          throw new McpError(ErrorCode.InternalError, `Error reading resource: ${error4}`, {
            uri: resource.uri
          });
        }
        if (Array.isArray(maybeArrayResult)) {
          return {
            contents: maybeArrayResult.map((result2) => ({
              mimeType: resource.mimeType,
              name: resource.name,
              uri: resource.uri,
              ...result2
            }))
          };
        } else {
          return {
            contents: [
              {
                mimeType: resource.mimeType,
                name: resource.name,
                uri: resource.uri,
                ...maybeArrayResult
              }
            ]
          };
        }
      }
      throw new UnexpectedStateError("Unknown resource request", {
        request: request2
      });
    });
  }
  setupResourceTemplateHandlers(resourceTemplates) {
    this.#server.setRequestHandler(ListResourceTemplatesRequestSchema, async () => {
      return {
        resourceTemplates: resourceTemplates.map((resourceTemplate) => {
          return {
            name: resourceTemplate.name,
            uriTemplate: resourceTemplate.uriTemplate
          };
        })
      };
    });
  }
  setupRootsHandlers() {
    if (this.#rootsConfig?.enabled === false) {
      console.debug("[FastMCP debug] roots capability explicitly disabled via config");
      return;
    }
    if (typeof this.#server.listRoots === "function") {
      this.#server.setNotificationHandler(RootsListChangedNotificationSchema, () => {
        this.#server.listRoots().then((roots3) => {
          this.#roots = roots3.roots;
          this.emit("rootsChanged", {
            roots: roots3.roots
          });
        }).catch((error4) => {
          if (error4 instanceof McpError && error4.code === ErrorCode.MethodNotFound) {
            console.debug("[FastMCP debug] listRoots method not supported by client");
          } else {
            console.error("[FastMCP error] Error listing roots", error4);
          }
        });
      });
    } else {
      console.debug("[FastMCP debug] roots capability not available, not setting up notification handler");
    }
  }
  setupToolHandlers(tools) {
    this.#server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: await Promise.all(tools.map(async (tool) => {
          return {
            annotations: tool.annotations,
            description: tool.description,
            inputSchema: tool.parameters ? await toJsonSchema2(tool.parameters) : {
              additionalProperties: false,
              properties: {},
              type: "object"
            },
            name: tool.name
          };
        }))
      };
    });
    this.#server.setRequestHandler(CallToolRequestSchema, async (request2) => {
      const tool = tools.find((tool2) => tool2.name === request2.params.name);
      if (!tool) {
        throw new McpError(ErrorCode.MethodNotFound, `Unknown tool: ${request2.params.name}`);
      }
      let args2 = undefined;
      if (tool.parameters) {
        const parsed = await tool.parameters["~standard"].validate(request2.params.arguments);
        if (parsed.issues) {
          throw new McpError(ErrorCode.InvalidParams, `Invalid ${request2.params.name} parameters: ${JSON.stringify(parsed.issues)}`);
        }
        args2 = parsed.value;
      }
      const progressToken = request2.params?._meta?.progressToken;
      let result2;
      try {
        const reportProgress = async (progress) => {
          await this.#server.notification({
            method: "notifications/progress",
            params: {
              ...progress,
              progressToken
            }
          });
        };
        const log5 = {
          debug: (message, context15) => {
            this.#server.sendLoggingMessage({
              data: {
                context: context15,
                message
              },
              level: "debug"
            });
          },
          error: (message, context15) => {
            this.#server.sendLoggingMessage({
              data: {
                context: context15,
                message
              },
              level: "error"
            });
          },
          info: (message, context15) => {
            this.#server.sendLoggingMessage({
              data: {
                context: context15,
                message
              },
              level: "info"
            });
          },
          warn: (message, context15) => {
            this.#server.sendLoggingMessage({
              data: {
                context: context15,
                message
              },
              level: "warning"
            });
          }
        };
        const executeToolPromise = tool.execute(args2, {
          log: log5,
          reportProgress,
          session: this.#auth
        });
        const maybeStringResult = await (tool.timeoutMs ? Promise.race([
          executeToolPromise,
          new Promise((_, reject3) => {
            setTimeout(() => {
              reject3(new UserError(`Tool execution timed out after ${tool.timeoutMs}ms`));
            }, tool.timeoutMs);
          })
        ]) : executeToolPromise);
        if (typeof maybeStringResult === "string") {
          result2 = ContentResultZodSchema.parse({
            content: [{ text: maybeStringResult, type: "text" }]
          });
        } else if ("type" in maybeStringResult) {
          result2 = ContentResultZodSchema.parse({
            content: [maybeStringResult]
          });
        } else {
          result2 = ContentResultZodSchema.parse(maybeStringResult);
        }
      } catch (error4) {
        if (error4 instanceof UserError) {
          return {
            content: [{ text: error4.message, type: "text" }],
            isError: true
          };
        }
        return {
          content: [{ text: `Error: ${error4}`, type: "text" }],
          isError: true
        };
      }
      return result2;
    });
  }
};
var FastMCPEventEmitterBase = import_events.EventEmitter;
var FastMCPEventEmitter = class extends FastMCPEventEmitterBase {
};
var FastMCP = class extends FastMCPEventEmitter {
  constructor(options) {
    super();
    this.options = options;
    this.#options = options;
    this.#authenticate = options.authenticate;
  }
  get sessions() {
    return this.#sessions;
  }
  #authenticate;
  #httpStreamServer = null;
  #options;
  #prompts = [];
  #resources = [];
  #resourcesTemplates = [];
  #sessions = [];
  #sseServer = null;
  #tools = [];
  addPrompt(prompt) {
    this.#prompts.push(prompt);
  }
  addResource(resource) {
    this.#resources.push(resource);
  }
  addResourceTemplate(resource) {
    this.#resourcesTemplates.push(resource);
  }
  addTool(tool) {
    this.#tools.push(tool);
  }
  async start(options = {
    transportType: "stdio"
  }) {
    if (options.transportType === "stdio") {
      const transport = new StdioServerTransport;
      const session = new FastMCPSession({
        instructions: this.#options.instructions,
        name: this.#options.name,
        ping: this.#options.ping,
        prompts: this.#prompts,
        resources: this.#resources,
        resourcesTemplates: this.#resourcesTemplates,
        roots: this.#options.roots,
        tools: this.#tools,
        version: this.#options.version
      });
      await session.connect(transport);
      this.#sessions.push(session);
      this.emit("connect", {
        session
      });
    } else if (options.transportType === "sse") {
      this.#sseServer = await startSSEServer({
        createServer: async (request2) => {
          let auth2;
          if (this.#authenticate) {
            auth2 = await this.#authenticate(request2);
          }
          return new FastMCPSession({
            auth: auth2,
            name: this.#options.name,
            ping: this.#options.ping,
            prompts: this.#prompts,
            resources: this.#resources,
            resourcesTemplates: this.#resourcesTemplates,
            roots: this.#options.roots,
            tools: this.#tools,
            version: this.#options.version
          });
        },
        endpoint: options.sse.endpoint,
        onClose: (session) => {
          this.emit("disconnect", {
            session
          });
        },
        onConnect: async (session) => {
          this.#sessions.push(session);
          this.emit("connect", {
            session
          });
        },
        port: options.sse.port
      });
      console.info(`[FastMCP info] server is running on SSE at http://localhost:${options.sse.port}${options.sse.endpoint}`);
    } else if (options.transportType === "httpStream") {
      this.#httpStreamServer = await startHTTPStreamServer({
        createServer: async (request2) => {
          let auth2;
          if (this.#authenticate) {
            auth2 = await this.#authenticate(request2);
          }
          return new FastMCPSession({
            auth: auth2,
            name: this.#options.name,
            ping: this.#options.ping,
            prompts: this.#prompts,
            resources: this.#resources,
            resourcesTemplates: this.#resourcesTemplates,
            roots: this.#options.roots,
            tools: this.#tools,
            version: this.#options.version
          });
        },
        endpoint: options.httpStream.endpoint,
        onClose: (session) => {
          this.emit("disconnect", {
            session
          });
        },
        onConnect: async (session) => {
          this.#sessions.push(session);
          this.emit("connect", {
            session
          });
        },
        port: options.httpStream.port
      });
      console.info(`[FastMCP info] server is running on HTTP Stream at http://localhost:${options.httpStream.port}${options.httpStream.endpoint}`);
    } else {
      throw new Error("Invalid transport type");
    }
  }
  async stop() {
    if (this.#sseServer) {
      await this.#sseServer.close();
    }
    if (this.#httpStreamServer) {
      await this.#httpStreamServer.close();
    }
  }
};

// server/server.ts
var server = new FastMCP({
  name: "Blockbench MCP",
  version: "1.0.0",
  instructions: Settings.get("mcp_instructions") || ""
});
var server_default = server;
// server/tools.ts
init_lib();

// lib/factories.ts
var tools = {};
function createTool(tool, enabled2 = true) {
  if (tools[tool.name]) {
    throw new Error(`Tool with name "${tool.name}" already exists.`);
  }
  server_default.addTool(tool);
  tools[tool.name] = {
    name: tool.name,
    description: tool.annotations?.title ?? tool.description ?? `${tool.name} tool`,
    enabled: enabled2
  };
  return tools[tool.name];
}

// lib/util.ts
function fixCircularReferences(o) {
  const weirdTypes = [
    Int8Array,
    Uint8Array,
    Uint8ClampedArray,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    BigInt64Array,
    BigUint64Array,
    Float32Array,
    Float64Array,
    ArrayBuffer,
    DataView
  ];
  const defs = new Map;
  return function(k, v) {
    if (k && v === o)
      return "[" + k + " is the same as original object]";
    if (v === undefined)
      return;
    if (v === null)
      return null;
    const weirdType = weirdTypes.find((t) => v instanceof t);
    if (weirdType)
      return weirdType.toString();
    if (typeof v == "function") {
      return v.toString();
    }
    if (v && typeof v == "object") {
      const def = defs.get(v);
      if (def)
        return "[" + k + " is the same as " + def + "]";
      defs.set(v, k);
    }
    return v;
  };
}
function getProjectTexture(id3) {
  const texture = (Project?.textures ?? Texture.all).find(({ id: textureId, name, uuid: uuid2 }) => textureId === id3 || name === id3 || uuid2 === id3);
  return texture || null;
}

// server/tools.ts
createTool({
  name: "place_cube",
  description: "Places a cube of the given size at the specified position. Texture and group are optional.",
  annotations: {
    title: "Place Cube",
    destructiveHint: true
  },
  parameters: z.object({
    elements: z.array(z.object({
      name: z.string(),
      origin: z.tuple([z.number(), z.number(), z.number()]),
      from: z.tuple([z.number(), z.number(), z.number()]),
      to: z.tuple([z.number(), z.number(), z.number()]),
      rotation: z.tuple([z.number(), z.number(), z.number()])
    })).min(1),
    texture: z.string().optional(),
    group: z.string().optional(),
    faces: z.union([
      z.array(z.enum(["north", "south", "east", "west", "up", "down"])),
      z.boolean().optional(),
      z.array(z.object({
        face: z.enum(["north", "south", "east", "west", "up", "down"]),
        uv: z.tuple([z.number(), z.number(), z.number(), z.number()])
      }))
    ]).optional().default(true)
  }),
  async execute({ elements, texture, faces, group: group5 }, { reportProgress }) {
    Undo.initEdit({
      elements: [],
      outliner: true,
      collections: []
    });
    const total = elements.length;
    const projectTexture = texture ? getProjectTexture(texture) : Texture.getDefault();
    if (!projectTexture) {
      throw new Error(`No texture found for "${texture}".`);
    }
    const groups = getAllGroups();
    const outlinerGroup = groups.find((g) => g.name === group5 || g.uuid === group5);
    const autouv = faces === true || Array.isArray(faces) && faces.every((face) => typeof face === "string");
    const cubes = elements.map((element2, progress) => {
      const cube = new Cube({
        autouv: autouv ? 1 : 0,
        name: element2.name,
        from: element2.from,
        to: element2.to,
        origin: element2.origin,
        rotation: element2.rotation
      }).init();
      cube.addTo(outlinerGroup);
      if (!autouv && Array.isArray(faces)) {
        faces.forEach(({ face, uv }) => {
          cube.faces[face].extend({
            uv
          });
        });
      } else {
        cube.applyTexture(projectTexture, faces !== false ? faces : undefined);
        cube.mapAutoUV();
      }
      reportProgress({
        progress,
        total
      });
      return cube;
    });
    Undo.finishEdit("Agent placed cubes");
    Canvas.updateAll();
    return await Promise.resolve(JSON.stringify(cubes.map((cube) => `Added cube ${cube.name} with ID ${cube.uuid}`)));
  }
});
createTool({
  name: "eval",
  description: "Evaluates the given expression and logs it to the console.",
  annotations: {
    title: "Eval",
    destructiveHint: true,
    openWorldHint: true
  },
  parameters: z.object({
    code: z.string()
  }),
  async execute({ code }) {
    try {
      const result = await eval(code);
      if (result !== undefined) {
        return `Code executed successfully. Result: ${JSON.stringify(result)}`;
      }
      return "Code executed successfully, but no result was returned.";
    } catch (error4) {
      return `Error executing code: ${error4}`;
    }
  }
});
createTool({
  name: "list_textures",
  description: "Returns a list of all textures in the Blockbench editor.",
  annotations: {
    title: "List Textures",
    readOnlyHint: true
  },
  parameters: z.object({}),
  async execute() {
    const textures = Project?.textures ?? Texture.all;
    if (textures.length === 0) {
      return "No textures found.";
    }
    return JSON.stringify(textures.map((texture) => ({
      name: texture.name,
      uuid: texture.uuid,
      id: texture.id
    })));
  }
});
createTool({
  name: "get_texture",
  description: "Returns the image data of the given texture.",
  annotations: {
    title: "Get Texture",
    readOnlyHint: true
  },
  parameters: z.object({
    texture: z.string()
  }),
  async execute({ texture }) {
    const image = getProjectTexture(texture);
    if (!image) {
      return `No image found for texture "${texture}".`;
    }
    return imageContent({ url: image.getDataURL() });
  }
});
createTool({
  name: "capture_screenshot",
  description: "Returns the image data of the current view.",
  annotations: {
    title: "Capture Screenshot",
    readOnlyHint: true,
    destructiveHint: true
  },
  parameters: z.object({
    project: z.string().optional()
  }),
  async execute({ project: project3 }) {
    const selectedProject = Project ?? ModelProject.all.find((p) => p.name === project3 || p.uuid === project3 || p.selected);
    if (!selectedProject) {
      throw new Error("No project found in the Blockbench editor.");
    }
    selectedProject.updateThumbnail();
    return imageContent({ url: selectedProject.thumbnail });
  }
});
createTool({
  name: "set_camera_angle",
  description: "Sets the camera angle to the specified value.",
  annotations: {
    title: "Set Camera Angle",
    destructiveHint: true
  },
  parameters: z.object({
    angle: z.object({
      position: z.tuple([z.number(), z.number(), z.number()]),
      target: z.tuple([z.number(), z.number(), z.number()]).optional(),
      rotation: z.tuple([z.number(), z.number(), z.number()]).optional(),
      projection: z.enum(["unset", "orthographic", "perspective"])
    })
  }),
  async execute({ angle }) {
    const preview = Preview.selected;
    if (!preview) {
      throw new Error("No preview found in the Blockbench editor.");
    }
    preview.loadAnglePreset(angle);
    return `Camera angle set to ${JSON.stringify(angle)}.`;
  }
});
var tools_default = tools;
// server/resources.ts
server_default.addResource({
  name: "api",
  description: "Blockbench's exposed API. Accessible through `Blockbench.` in the console.",
  uri: "/api",
  mimeType: "application/json",
  async load() {
    const fixFunc = fixCircularReferences(Blockbench);
    const result2 = JSON.stringify(Blockbench, fixFunc);
    return await Promise.resolve([{
      type: "text",
      text: result2
    }]);
  }
});
var nodesResource = {
  name: "nodes",
  description: "Returns the current nodes in the Blockbench editor.",
  uriTemplate: "nodes://{id}",
  arguments: [
    {
      name: "id",
      description: "The ID of the node. Could be a UUID, name, or numeric ID.",
      complete: async (value10) => {
        if (!Project?.nodes_3d) {
          return {
            values: []
          };
        }
        const nodeKeys = Object.keys(Project.nodes_3d);
        if (value10.length > 0) {
          const filteredKeys = nodeKeys.filter((key) => key.includes(value10));
          return {
            values: filteredKeys
          };
        }
        return {
          values: nodeKeys
        };
      }
    }
  ],
  async load({ id: id3 }) {
    if (!Project?.nodes_3d) {
      throw new Error("No nodes found in the Blockbench editor.");
    }
    const node = Project.nodes_3d[id3] ?? Object.values(Project.nodes_3d).find((node2) => node2.name === id3 || node2.uuid === id3);
    if (!node) {
      throw new Error(`Node with ID "${id3}" not found.`);
    }
    const { position, rotation, scale: scale2, ...rest } = node;
    return {
      text: JSON.stringify({
        ...rest,
        position: position.toArray(),
        rotation: rotation.toArray(),
        scale: scale2.toArray()
      })
    };
  }
};
server_default.addResourceTemplate(nodesResource);
var texturesResource = {
  name: "textures",
  description: "Returns the current textures in the Blockbench editor.",
  uriTemplate: "textures://{id}",
  arguments: [
    {
      name: "id",
      description: "The ID of the texture. Could be a UUID, name, or numeric ID.",
      complete: async (value10) => {
        const textures = Project?.textures ?? Texture.all;
        if (value10.length > 0) {
          const filteredTextures = textures.filter((texture) => texture.name.includes(value10));
          return {
            values: filteredTextures.map((texture) => texture.name)
          };
        }
        return {
          values: textures.map((texture) => texture.name)
        };
      }
    }
  ],
  async load({ id: id3 }) {
    const texture = getProjectTexture(id3);
    if (!texture) {
      throw new Error(`Texture with ID "${id3}" not found.`);
    }
    return {
      name: texture.name,
      blob: await new Promise((resolve) => {
        resolve(texture.getBase64());
      })
    };
  }
};
server_default.addResourceTemplate(texturesResource);
// ui/index.ts
var panel;
function uiSetup(server2, tools2) {
  panel = new Panel("mcp_panel", {
    id: "mcp_panel",
    icon: "robot",
    name: "MCP",
    default_side: "right",
    component: {
      mounted() {
        server2.on("connect", () => {
          this.server.connected = true;
        });
      },
      data: () => ({
        server: {
          connected: false,
          name: server2.options.name,
          version: server2.options.version
        },
        tools: Object.values(tools2).map((tool) => ({
          name: tool.name,
          description: tool.description
        }))
      }),
      name: "mcp_panel",
      template: `<div class="mcp-panel">
                <dl>
                    <dt>Server Name</dt>
                    <dd>{{server.name}}</dd>
                    <dt>Server Version</dt>
                    <dd>{{server.version}}</dd>
                    <dt>Server Status</dt>
                    <dd>
                        <span v-if="server.connected" class="connected">Connected</span>
                        <span v-else class="disconnected">Disconnected</span>
                    </dd>
                </dl>

                <h3>Tools</h3>
                <ul>
                    <li v-for="tool in tools" :key="tool.name">
                        <strong>{{tool.name}}</strong>: {{tool.description}}
                    </li>
                </ul>
            </div>`
    },
    expand_button: true
  });
  return panel;
}
function uiTeardown() {
  panel?.delete();
}

// ui/settings.ts
var settings = [];
function settingsSetup() {
  const category = "general";
  settings.push(new Setting("mcp_instructions", {
    name: "MCP System Instructions",
    description: "Instructions for the MCP system.",
    type: "text",
    value: "Generate simple, low-poly models for Minecraft inside Blockbench.",
    category,
    icon: "psychology"
  }), new Setting("mcp_port", {
    name: "MCP Server Port",
    description: "Port for the MCP server.",
    type: "number",
    value: 3000,
    category,
    icon: "numbers"
  }), new Setting("mcp_endpoint", {
    name: "MCP Server Endpoint",
    description: "Endpoint for the MCP server.",
    type: "text",
    value: "/mcp",
    category,
    icon: "webhook"
  }));
}
function settingsTeardown() {
  settings.forEach((setting) => {
    setting.delete();
  });
}

// index.ts
(() => {
  const onload = () => {
    settingsSetup();
    uiSetup(server_default, tools_default);
    server_default.start({
      transportType: "httpStream",
      httpStream: {
        port: Settings.get("mcp_port") || 3000,
        endpoint: Settings.get("mcp_endpoint") || "/mcp"
      }
    });
  };
  const onunload = () => {
    server_default.stop();
    uiTeardown();
    settingsTeardown();
  };
  BBPlugin.register("mcp", {
    version: "1.0.0",
    title: "MCP Server",
    author: "Jason J. Gardner",
    description: "Adds a Model Context Protocol server to Blockbench, allowing for remote control of the editor by AI agents.",
    tags: ["AI", "MCP"],
    icon: "icon.svg",
    variant: "desktop",
    await_loading: true,
    repository: "https://github.com/jasonjgardner/blockbench-plugins",
    min_version: "4.11.9",
    onload,
    onunload
  });
})();

//# debugId=759B46F3D28BCCF264756E2164756E21
